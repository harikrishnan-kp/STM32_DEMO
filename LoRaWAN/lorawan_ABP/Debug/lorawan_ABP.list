
lorawan_ABP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a5ac  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000108c  0801a66c  0801a66c  0001b66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b6f8  0801b6f8  0001d124  2**0
                  CONTENTS
  4 .ARM          00000008  0801b6f8  0801b6f8  0001c6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b700  0801b700  0001d124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b700  0801b700  0001c700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b704  0801b704  0001c704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  0801b708  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001524  20000124  0801b82c  0001d124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001648  0801b82c  0001d648  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001d124  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027ace  00000000  00000000  0001d14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000072cf  00000000  00000000  00044c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fd8  00000000  00000000  0004bef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000184d  00000000  00000000  0004dec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000232de  00000000  00000000  0004f715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035043  00000000  00000000  000729f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7d2f  00000000  00000000  000a7a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f765  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077dc  00000000  00000000  0014f7a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00156f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000124 	.word	0x20000124
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801a654 	.word	0x0801a654

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000128 	.word	0x20000128
 8000104:	0801a654 	.word	0x0801a654

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0010      	movs	r0, r2
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	0019      	movs	r1, r3
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f001 fdef 	bl	8001ffc <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f001 fd2f 	bl	8001e8c <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 fde1 	bl	8001ffc <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fdd7 	bl	8001ffc <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			@ (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fd59 	bl	8001f14 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			@ (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f001 fd4f 	bl	8001f14 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			@ (mov r8, r8)

08000484 <__aeabi_cfrcmple>:
 8000484:	4684      	mov	ip, r0
 8000486:	0008      	movs	r0, r1
 8000488:	4661      	mov	r1, ip
 800048a:	e7ff      	b.n	800048c <__aeabi_cfcmpeq>

0800048c <__aeabi_cfcmpeq>:
 800048c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800048e:	f000 faed 	bl	8000a6c <__lesf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	d401      	bmi.n	800049a <__aeabi_cfcmpeq+0xe>
 8000496:	2100      	movs	r1, #0
 8000498:	42c8      	cmn	r0, r1
 800049a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800049c <__aeabi_fcmpeq>:
 800049c:	b510      	push	{r4, lr}
 800049e:	f000 fa6d 	bl	800097c <__eqsf2>
 80004a2:	4240      	negs	r0, r0
 80004a4:	3001      	adds	r0, #1
 80004a6:	bd10      	pop	{r4, pc}

080004a8 <__aeabi_fcmplt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 fadf 	bl	8000a6c <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	db01      	blt.n	80004b6 <__aeabi_fcmplt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_fcmple>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fad5 	bl	8000a6c <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dd01      	ble.n	80004ca <__aeabi_fcmple+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_fcmpgt>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fa7b 	bl	80009cc <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dc01      	bgt.n	80004de <__aeabi_fcmpgt+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_fcmpge>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f000 fa71 	bl	80009cc <__gesf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	da01      	bge.n	80004f2 <__aeabi_fcmpge+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_uldivmod>:
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d111      	bne.n	8000520 <__aeabi_uldivmod+0x28>
 80004fc:	2a00      	cmp	r2, #0
 80004fe:	d10f      	bne.n	8000520 <__aeabi_uldivmod+0x28>
 8000500:	2900      	cmp	r1, #0
 8000502:	d100      	bne.n	8000506 <__aeabi_uldivmod+0xe>
 8000504:	2800      	cmp	r0, #0
 8000506:	d002      	beq.n	800050e <__aeabi_uldivmod+0x16>
 8000508:	2100      	movs	r1, #0
 800050a:	43c9      	mvns	r1, r1
 800050c:	0008      	movs	r0, r1
 800050e:	b407      	push	{r0, r1, r2}
 8000510:	4802      	ldr	r0, [pc, #8]	@ (800051c <__aeabi_uldivmod+0x24>)
 8000512:	a102      	add	r1, pc, #8	@ (adr r1, 800051c <__aeabi_uldivmod+0x24>)
 8000514:	1840      	adds	r0, r0, r1
 8000516:	9002      	str	r0, [sp, #8]
 8000518:	bd03      	pop	{r0, r1, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)
 800051c:	fffffee9 	.word	0xfffffee9
 8000520:	b403      	push	{r0, r1}
 8000522:	4668      	mov	r0, sp
 8000524:	b501      	push	{r0, lr}
 8000526:	9802      	ldr	r0, [sp, #8]
 8000528:	f000 f83c 	bl	80005a4 <__udivmoddi4>
 800052c:	9b01      	ldr	r3, [sp, #4]
 800052e:	469e      	mov	lr, r3
 8000530:	b002      	add	sp, #8
 8000532:	bc0c      	pop	{r2, r3}
 8000534:	4770      	bx	lr
 8000536:	46c0      	nop			@ (mov r8, r8)

08000538 <__aeabi_f2uiz>:
 8000538:	219e      	movs	r1, #158	@ 0x9e
 800053a:	b510      	push	{r4, lr}
 800053c:	05c9      	lsls	r1, r1, #23
 800053e:	1c04      	adds	r4, r0, #0
 8000540:	f7ff ffd0 	bl	80004e4 <__aeabi_fcmpge>
 8000544:	2800      	cmp	r0, #0
 8000546:	d103      	bne.n	8000550 <__aeabi_f2uiz+0x18>
 8000548:	1c20      	adds	r0, r4, #0
 800054a:	f000 fdbf 	bl	80010cc <__aeabi_f2iz>
 800054e:	bd10      	pop	{r4, pc}
 8000550:	219e      	movs	r1, #158	@ 0x9e
 8000552:	1c20      	adds	r0, r4, #0
 8000554:	05c9      	lsls	r1, r1, #23
 8000556:	f000 fc15 	bl	8000d84 <__aeabi_fsub>
 800055a:	f000 fdb7 	bl	80010cc <__aeabi_f2iz>
 800055e:	2380      	movs	r3, #128	@ 0x80
 8000560:	061b      	lsls	r3, r3, #24
 8000562:	469c      	mov	ip, r3
 8000564:	4460      	add	r0, ip
 8000566:	e7f2      	b.n	800054e <__aeabi_f2uiz+0x16>

08000568 <__aeabi_d2uiz>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	2200      	movs	r2, #0
 800056c:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <__aeabi_d2uiz+0x38>)
 800056e:	0004      	movs	r4, r0
 8000570:	000d      	movs	r5, r1
 8000572:	f7ff ff7d 	bl	8000470 <__aeabi_dcmpge>
 8000576:	2800      	cmp	r0, #0
 8000578:	d104      	bne.n	8000584 <__aeabi_d2uiz+0x1c>
 800057a:	0020      	movs	r0, r4
 800057c:	0029      	movs	r1, r5
 800057e:	f002 fc13 	bl	8002da8 <__aeabi_d2iz>
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <__aeabi_d2uiz+0x38>)
 8000586:	2200      	movs	r2, #0
 8000588:	0020      	movs	r0, r4
 800058a:	0029      	movs	r1, r5
 800058c:	f002 f870 	bl	8002670 <__aeabi_dsub>
 8000590:	f002 fc0a 	bl	8002da8 <__aeabi_d2iz>
 8000594:	2380      	movs	r3, #128	@ 0x80
 8000596:	061b      	lsls	r3, r3, #24
 8000598:	469c      	mov	ip, r3
 800059a:	4460      	add	r0, ip
 800059c:	e7f1      	b.n	8000582 <__aeabi_d2uiz+0x1a>
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	41e00000 	.word	0x41e00000

080005a4 <__udivmoddi4>:
 80005a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a6:	4657      	mov	r7, sl
 80005a8:	464e      	mov	r6, r9
 80005aa:	4645      	mov	r5, r8
 80005ac:	46de      	mov	lr, fp
 80005ae:	b5e0      	push	{r5, r6, r7, lr}
 80005b0:	0004      	movs	r4, r0
 80005b2:	000d      	movs	r5, r1
 80005b4:	4692      	mov	sl, r2
 80005b6:	4699      	mov	r9, r3
 80005b8:	b083      	sub	sp, #12
 80005ba:	428b      	cmp	r3, r1
 80005bc:	d830      	bhi.n	8000620 <__udivmoddi4+0x7c>
 80005be:	d02d      	beq.n	800061c <__udivmoddi4+0x78>
 80005c0:	4649      	mov	r1, r9
 80005c2:	4650      	mov	r0, sl
 80005c4:	f002 fce4 	bl	8002f90 <__clzdi2>
 80005c8:	0029      	movs	r1, r5
 80005ca:	0006      	movs	r6, r0
 80005cc:	0020      	movs	r0, r4
 80005ce:	f002 fcdf 	bl	8002f90 <__clzdi2>
 80005d2:	1a33      	subs	r3, r6, r0
 80005d4:	4698      	mov	r8, r3
 80005d6:	3b20      	subs	r3, #32
 80005d8:	d434      	bmi.n	8000644 <__udivmoddi4+0xa0>
 80005da:	469b      	mov	fp, r3
 80005dc:	4653      	mov	r3, sl
 80005de:	465a      	mov	r2, fp
 80005e0:	4093      	lsls	r3, r2
 80005e2:	4642      	mov	r2, r8
 80005e4:	001f      	movs	r7, r3
 80005e6:	4653      	mov	r3, sl
 80005e8:	4093      	lsls	r3, r2
 80005ea:	001e      	movs	r6, r3
 80005ec:	42af      	cmp	r7, r5
 80005ee:	d83b      	bhi.n	8000668 <__udivmoddi4+0xc4>
 80005f0:	42af      	cmp	r7, r5
 80005f2:	d100      	bne.n	80005f6 <__udivmoddi4+0x52>
 80005f4:	e079      	b.n	80006ea <__udivmoddi4+0x146>
 80005f6:	465b      	mov	r3, fp
 80005f8:	1ba4      	subs	r4, r4, r6
 80005fa:	41bd      	sbcs	r5, r7
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	da00      	bge.n	8000602 <__udivmoddi4+0x5e>
 8000600:	e076      	b.n	80006f0 <__udivmoddi4+0x14c>
 8000602:	2200      	movs	r2, #0
 8000604:	2300      	movs	r3, #0
 8000606:	9200      	str	r2, [sp, #0]
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	2301      	movs	r3, #1
 800060c:	465a      	mov	r2, fp
 800060e:	4093      	lsls	r3, r2
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	2301      	movs	r3, #1
 8000614:	4642      	mov	r2, r8
 8000616:	4093      	lsls	r3, r2
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	e029      	b.n	8000670 <__udivmoddi4+0xcc>
 800061c:	4282      	cmp	r2, r0
 800061e:	d9cf      	bls.n	80005c0 <__udivmoddi4+0x1c>
 8000620:	2200      	movs	r2, #0
 8000622:	2300      	movs	r3, #0
 8000624:	9200      	str	r2, [sp, #0]
 8000626:	9301      	str	r3, [sp, #4]
 8000628:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <__udivmoddi4+0x8e>
 800062e:	601c      	str	r4, [r3, #0]
 8000630:	605d      	str	r5, [r3, #4]
 8000632:	9800      	ldr	r0, [sp, #0]
 8000634:	9901      	ldr	r1, [sp, #4]
 8000636:	b003      	add	sp, #12
 8000638:	bcf0      	pop	{r4, r5, r6, r7}
 800063a:	46bb      	mov	fp, r7
 800063c:	46b2      	mov	sl, r6
 800063e:	46a9      	mov	r9, r5
 8000640:	46a0      	mov	r8, r4
 8000642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000644:	4642      	mov	r2, r8
 8000646:	469b      	mov	fp, r3
 8000648:	2320      	movs	r3, #32
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	4652      	mov	r2, sl
 800064e:	40da      	lsrs	r2, r3
 8000650:	4641      	mov	r1, r8
 8000652:	0013      	movs	r3, r2
 8000654:	464a      	mov	r2, r9
 8000656:	408a      	lsls	r2, r1
 8000658:	0017      	movs	r7, r2
 800065a:	4642      	mov	r2, r8
 800065c:	431f      	orrs	r7, r3
 800065e:	4653      	mov	r3, sl
 8000660:	4093      	lsls	r3, r2
 8000662:	001e      	movs	r6, r3
 8000664:	42af      	cmp	r7, r5
 8000666:	d9c3      	bls.n	80005f0 <__udivmoddi4+0x4c>
 8000668:	2200      	movs	r2, #0
 800066a:	2300      	movs	r3, #0
 800066c:	9200      	str	r2, [sp, #0]
 800066e:	9301      	str	r3, [sp, #4]
 8000670:	4643      	mov	r3, r8
 8000672:	2b00      	cmp	r3, #0
 8000674:	d0d8      	beq.n	8000628 <__udivmoddi4+0x84>
 8000676:	07fb      	lsls	r3, r7, #31
 8000678:	0872      	lsrs	r2, r6, #1
 800067a:	431a      	orrs	r2, r3
 800067c:	4646      	mov	r6, r8
 800067e:	087b      	lsrs	r3, r7, #1
 8000680:	e00e      	b.n	80006a0 <__udivmoddi4+0xfc>
 8000682:	42ab      	cmp	r3, r5
 8000684:	d101      	bne.n	800068a <__udivmoddi4+0xe6>
 8000686:	42a2      	cmp	r2, r4
 8000688:	d80c      	bhi.n	80006a4 <__udivmoddi4+0x100>
 800068a:	1aa4      	subs	r4, r4, r2
 800068c:	419d      	sbcs	r5, r3
 800068e:	2001      	movs	r0, #1
 8000690:	1924      	adds	r4, r4, r4
 8000692:	416d      	adcs	r5, r5
 8000694:	2100      	movs	r1, #0
 8000696:	3e01      	subs	r6, #1
 8000698:	1824      	adds	r4, r4, r0
 800069a:	414d      	adcs	r5, r1
 800069c:	2e00      	cmp	r6, #0
 800069e:	d006      	beq.n	80006ae <__udivmoddi4+0x10a>
 80006a0:	42ab      	cmp	r3, r5
 80006a2:	d9ee      	bls.n	8000682 <__udivmoddi4+0xde>
 80006a4:	3e01      	subs	r6, #1
 80006a6:	1924      	adds	r4, r4, r4
 80006a8:	416d      	adcs	r5, r5
 80006aa:	2e00      	cmp	r6, #0
 80006ac:	d1f8      	bne.n	80006a0 <__udivmoddi4+0xfc>
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	465b      	mov	r3, fp
 80006b4:	1900      	adds	r0, r0, r4
 80006b6:	4169      	adcs	r1, r5
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db24      	blt.n	8000706 <__udivmoddi4+0x162>
 80006bc:	002b      	movs	r3, r5
 80006be:	465a      	mov	r2, fp
 80006c0:	4644      	mov	r4, r8
 80006c2:	40d3      	lsrs	r3, r2
 80006c4:	002a      	movs	r2, r5
 80006c6:	40e2      	lsrs	r2, r4
 80006c8:	001c      	movs	r4, r3
 80006ca:	465b      	mov	r3, fp
 80006cc:	0015      	movs	r5, r2
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	db2a      	blt.n	8000728 <__udivmoddi4+0x184>
 80006d2:	0026      	movs	r6, r4
 80006d4:	409e      	lsls	r6, r3
 80006d6:	0033      	movs	r3, r6
 80006d8:	0026      	movs	r6, r4
 80006da:	4647      	mov	r7, r8
 80006dc:	40be      	lsls	r6, r7
 80006de:	0032      	movs	r2, r6
 80006e0:	1a80      	subs	r0, r0, r2
 80006e2:	4199      	sbcs	r1, r3
 80006e4:	9000      	str	r0, [sp, #0]
 80006e6:	9101      	str	r1, [sp, #4]
 80006e8:	e79e      	b.n	8000628 <__udivmoddi4+0x84>
 80006ea:	42a3      	cmp	r3, r4
 80006ec:	d8bc      	bhi.n	8000668 <__udivmoddi4+0xc4>
 80006ee:	e782      	b.n	80005f6 <__udivmoddi4+0x52>
 80006f0:	4642      	mov	r2, r8
 80006f2:	2320      	movs	r3, #32
 80006f4:	2100      	movs	r1, #0
 80006f6:	1a9b      	subs	r3, r3, r2
 80006f8:	2200      	movs	r2, #0
 80006fa:	9100      	str	r1, [sp, #0]
 80006fc:	9201      	str	r2, [sp, #4]
 80006fe:	2201      	movs	r2, #1
 8000700:	40da      	lsrs	r2, r3
 8000702:	9201      	str	r2, [sp, #4]
 8000704:	e785      	b.n	8000612 <__udivmoddi4+0x6e>
 8000706:	4642      	mov	r2, r8
 8000708:	2320      	movs	r3, #32
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	002a      	movs	r2, r5
 800070e:	4646      	mov	r6, r8
 8000710:	409a      	lsls	r2, r3
 8000712:	0023      	movs	r3, r4
 8000714:	40f3      	lsrs	r3, r6
 8000716:	4644      	mov	r4, r8
 8000718:	4313      	orrs	r3, r2
 800071a:	002a      	movs	r2, r5
 800071c:	40e2      	lsrs	r2, r4
 800071e:	001c      	movs	r4, r3
 8000720:	465b      	mov	r3, fp
 8000722:	0015      	movs	r5, r2
 8000724:	2b00      	cmp	r3, #0
 8000726:	dad4      	bge.n	80006d2 <__udivmoddi4+0x12e>
 8000728:	4642      	mov	r2, r8
 800072a:	002f      	movs	r7, r5
 800072c:	2320      	movs	r3, #32
 800072e:	0026      	movs	r6, r4
 8000730:	4097      	lsls	r7, r2
 8000732:	1a9b      	subs	r3, r3, r2
 8000734:	40de      	lsrs	r6, r3
 8000736:	003b      	movs	r3, r7
 8000738:	4333      	orrs	r3, r6
 800073a:	e7cd      	b.n	80006d8 <__udivmoddi4+0x134>

0800073c <__aeabi_fdiv>:
 800073c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800073e:	464f      	mov	r7, r9
 8000740:	4646      	mov	r6, r8
 8000742:	46d6      	mov	lr, sl
 8000744:	0244      	lsls	r4, r0, #9
 8000746:	b5c0      	push	{r6, r7, lr}
 8000748:	0047      	lsls	r7, r0, #1
 800074a:	1c0e      	adds	r6, r1, #0
 800074c:	0a64      	lsrs	r4, r4, #9
 800074e:	0e3f      	lsrs	r7, r7, #24
 8000750:	0fc5      	lsrs	r5, r0, #31
 8000752:	2f00      	cmp	r7, #0
 8000754:	d03c      	beq.n	80007d0 <__aeabi_fdiv+0x94>
 8000756:	2fff      	cmp	r7, #255	@ 0xff
 8000758:	d042      	beq.n	80007e0 <__aeabi_fdiv+0xa4>
 800075a:	2300      	movs	r3, #0
 800075c:	2280      	movs	r2, #128	@ 0x80
 800075e:	4699      	mov	r9, r3
 8000760:	469a      	mov	sl, r3
 8000762:	00e4      	lsls	r4, r4, #3
 8000764:	04d2      	lsls	r2, r2, #19
 8000766:	4314      	orrs	r4, r2
 8000768:	3f7f      	subs	r7, #127	@ 0x7f
 800076a:	0273      	lsls	r3, r6, #9
 800076c:	0a5b      	lsrs	r3, r3, #9
 800076e:	4698      	mov	r8, r3
 8000770:	0073      	lsls	r3, r6, #1
 8000772:	0e1b      	lsrs	r3, r3, #24
 8000774:	0ff6      	lsrs	r6, r6, #31
 8000776:	2b00      	cmp	r3, #0
 8000778:	d01b      	beq.n	80007b2 <__aeabi_fdiv+0x76>
 800077a:	2bff      	cmp	r3, #255	@ 0xff
 800077c:	d013      	beq.n	80007a6 <__aeabi_fdiv+0x6a>
 800077e:	4642      	mov	r2, r8
 8000780:	2180      	movs	r1, #128	@ 0x80
 8000782:	00d2      	lsls	r2, r2, #3
 8000784:	04c9      	lsls	r1, r1, #19
 8000786:	4311      	orrs	r1, r2
 8000788:	4688      	mov	r8, r1
 800078a:	2000      	movs	r0, #0
 800078c:	3b7f      	subs	r3, #127	@ 0x7f
 800078e:	0029      	movs	r1, r5
 8000790:	1aff      	subs	r7, r7, r3
 8000792:	464b      	mov	r3, r9
 8000794:	4071      	eors	r1, r6
 8000796:	b2c9      	uxtb	r1, r1
 8000798:	2b0f      	cmp	r3, #15
 800079a:	d900      	bls.n	800079e <__aeabi_fdiv+0x62>
 800079c:	e0b5      	b.n	800090a <__aeabi_fdiv+0x1ce>
 800079e:	4a74      	ldr	r2, [pc, #464]	@ (8000970 <__aeabi_fdiv+0x234>)
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	58d3      	ldr	r3, [r2, r3]
 80007a4:	469f      	mov	pc, r3
 80007a6:	4643      	mov	r3, r8
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d13f      	bne.n	800082c <__aeabi_fdiv+0xf0>
 80007ac:	3fff      	subs	r7, #255	@ 0xff
 80007ae:	3302      	adds	r3, #2
 80007b0:	e003      	b.n	80007ba <__aeabi_fdiv+0x7e>
 80007b2:	4643      	mov	r3, r8
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d12d      	bne.n	8000814 <__aeabi_fdiv+0xd8>
 80007b8:	2301      	movs	r3, #1
 80007ba:	0029      	movs	r1, r5
 80007bc:	464a      	mov	r2, r9
 80007be:	4071      	eors	r1, r6
 80007c0:	b2c9      	uxtb	r1, r1
 80007c2:	431a      	orrs	r2, r3
 80007c4:	2a0e      	cmp	r2, #14
 80007c6:	d838      	bhi.n	800083a <__aeabi_fdiv+0xfe>
 80007c8:	486a      	ldr	r0, [pc, #424]	@ (8000974 <__aeabi_fdiv+0x238>)
 80007ca:	0092      	lsls	r2, r2, #2
 80007cc:	5882      	ldr	r2, [r0, r2]
 80007ce:	4697      	mov	pc, r2
 80007d0:	2c00      	cmp	r4, #0
 80007d2:	d113      	bne.n	80007fc <__aeabi_fdiv+0xc0>
 80007d4:	2304      	movs	r3, #4
 80007d6:	4699      	mov	r9, r3
 80007d8:	3b03      	subs	r3, #3
 80007da:	2700      	movs	r7, #0
 80007dc:	469a      	mov	sl, r3
 80007de:	e7c4      	b.n	800076a <__aeabi_fdiv+0x2e>
 80007e0:	2c00      	cmp	r4, #0
 80007e2:	d105      	bne.n	80007f0 <__aeabi_fdiv+0xb4>
 80007e4:	2308      	movs	r3, #8
 80007e6:	4699      	mov	r9, r3
 80007e8:	3b06      	subs	r3, #6
 80007ea:	27ff      	movs	r7, #255	@ 0xff
 80007ec:	469a      	mov	sl, r3
 80007ee:	e7bc      	b.n	800076a <__aeabi_fdiv+0x2e>
 80007f0:	230c      	movs	r3, #12
 80007f2:	4699      	mov	r9, r3
 80007f4:	3b09      	subs	r3, #9
 80007f6:	27ff      	movs	r7, #255	@ 0xff
 80007f8:	469a      	mov	sl, r3
 80007fa:	e7b6      	b.n	800076a <__aeabi_fdiv+0x2e>
 80007fc:	0020      	movs	r0, r4
 80007fe:	f002 fba9 	bl	8002f54 <__clzsi2>
 8000802:	2776      	movs	r7, #118	@ 0x76
 8000804:	1f43      	subs	r3, r0, #5
 8000806:	409c      	lsls	r4, r3
 8000808:	2300      	movs	r3, #0
 800080a:	427f      	negs	r7, r7
 800080c:	4699      	mov	r9, r3
 800080e:	469a      	mov	sl, r3
 8000810:	1a3f      	subs	r7, r7, r0
 8000812:	e7aa      	b.n	800076a <__aeabi_fdiv+0x2e>
 8000814:	4640      	mov	r0, r8
 8000816:	f002 fb9d 	bl	8002f54 <__clzsi2>
 800081a:	4642      	mov	r2, r8
 800081c:	1f43      	subs	r3, r0, #5
 800081e:	409a      	lsls	r2, r3
 8000820:	2376      	movs	r3, #118	@ 0x76
 8000822:	425b      	negs	r3, r3
 8000824:	1a1b      	subs	r3, r3, r0
 8000826:	4690      	mov	r8, r2
 8000828:	2000      	movs	r0, #0
 800082a:	e7b0      	b.n	800078e <__aeabi_fdiv+0x52>
 800082c:	2303      	movs	r3, #3
 800082e:	464a      	mov	r2, r9
 8000830:	431a      	orrs	r2, r3
 8000832:	4691      	mov	r9, r2
 8000834:	2003      	movs	r0, #3
 8000836:	33fc      	adds	r3, #252	@ 0xfc
 8000838:	e7a9      	b.n	800078e <__aeabi_fdiv+0x52>
 800083a:	000d      	movs	r5, r1
 800083c:	20ff      	movs	r0, #255	@ 0xff
 800083e:	2200      	movs	r2, #0
 8000840:	05c0      	lsls	r0, r0, #23
 8000842:	07ed      	lsls	r5, r5, #31
 8000844:	4310      	orrs	r0, r2
 8000846:	4328      	orrs	r0, r5
 8000848:	bce0      	pop	{r5, r6, r7}
 800084a:	46ba      	mov	sl, r7
 800084c:	46b1      	mov	r9, r6
 800084e:	46a8      	mov	r8, r5
 8000850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000852:	000d      	movs	r5, r1
 8000854:	2000      	movs	r0, #0
 8000856:	2200      	movs	r2, #0
 8000858:	e7f2      	b.n	8000840 <__aeabi_fdiv+0x104>
 800085a:	4653      	mov	r3, sl
 800085c:	2b02      	cmp	r3, #2
 800085e:	d0ed      	beq.n	800083c <__aeabi_fdiv+0x100>
 8000860:	2b03      	cmp	r3, #3
 8000862:	d033      	beq.n	80008cc <__aeabi_fdiv+0x190>
 8000864:	46a0      	mov	r8, r4
 8000866:	2b01      	cmp	r3, #1
 8000868:	d105      	bne.n	8000876 <__aeabi_fdiv+0x13a>
 800086a:	2000      	movs	r0, #0
 800086c:	2200      	movs	r2, #0
 800086e:	e7e7      	b.n	8000840 <__aeabi_fdiv+0x104>
 8000870:	0035      	movs	r5, r6
 8000872:	2803      	cmp	r0, #3
 8000874:	d07a      	beq.n	800096c <__aeabi_fdiv+0x230>
 8000876:	003b      	movs	r3, r7
 8000878:	337f      	adds	r3, #127	@ 0x7f
 800087a:	2b00      	cmp	r3, #0
 800087c:	dd2d      	ble.n	80008da <__aeabi_fdiv+0x19e>
 800087e:	4642      	mov	r2, r8
 8000880:	0752      	lsls	r2, r2, #29
 8000882:	d007      	beq.n	8000894 <__aeabi_fdiv+0x158>
 8000884:	220f      	movs	r2, #15
 8000886:	4641      	mov	r1, r8
 8000888:	400a      	ands	r2, r1
 800088a:	2a04      	cmp	r2, #4
 800088c:	d002      	beq.n	8000894 <__aeabi_fdiv+0x158>
 800088e:	2204      	movs	r2, #4
 8000890:	4694      	mov	ip, r2
 8000892:	44e0      	add	r8, ip
 8000894:	4642      	mov	r2, r8
 8000896:	0112      	lsls	r2, r2, #4
 8000898:	d505      	bpl.n	80008a6 <__aeabi_fdiv+0x16a>
 800089a:	4642      	mov	r2, r8
 800089c:	4b36      	ldr	r3, [pc, #216]	@ (8000978 <__aeabi_fdiv+0x23c>)
 800089e:	401a      	ands	r2, r3
 80008a0:	003b      	movs	r3, r7
 80008a2:	4690      	mov	r8, r2
 80008a4:	3380      	adds	r3, #128	@ 0x80
 80008a6:	2bfe      	cmp	r3, #254	@ 0xfe
 80008a8:	dcc8      	bgt.n	800083c <__aeabi_fdiv+0x100>
 80008aa:	4642      	mov	r2, r8
 80008ac:	0192      	lsls	r2, r2, #6
 80008ae:	0a52      	lsrs	r2, r2, #9
 80008b0:	b2d8      	uxtb	r0, r3
 80008b2:	e7c5      	b.n	8000840 <__aeabi_fdiv+0x104>
 80008b4:	2280      	movs	r2, #128	@ 0x80
 80008b6:	2500      	movs	r5, #0
 80008b8:	20ff      	movs	r0, #255	@ 0xff
 80008ba:	03d2      	lsls	r2, r2, #15
 80008bc:	e7c0      	b.n	8000840 <__aeabi_fdiv+0x104>
 80008be:	2280      	movs	r2, #128	@ 0x80
 80008c0:	03d2      	lsls	r2, r2, #15
 80008c2:	4214      	tst	r4, r2
 80008c4:	d002      	beq.n	80008cc <__aeabi_fdiv+0x190>
 80008c6:	4643      	mov	r3, r8
 80008c8:	4213      	tst	r3, r2
 80008ca:	d049      	beq.n	8000960 <__aeabi_fdiv+0x224>
 80008cc:	2280      	movs	r2, #128	@ 0x80
 80008ce:	03d2      	lsls	r2, r2, #15
 80008d0:	4322      	orrs	r2, r4
 80008d2:	0252      	lsls	r2, r2, #9
 80008d4:	20ff      	movs	r0, #255	@ 0xff
 80008d6:	0a52      	lsrs	r2, r2, #9
 80008d8:	e7b2      	b.n	8000840 <__aeabi_fdiv+0x104>
 80008da:	2201      	movs	r2, #1
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	2b1b      	cmp	r3, #27
 80008e0:	dcc3      	bgt.n	800086a <__aeabi_fdiv+0x12e>
 80008e2:	4642      	mov	r2, r8
 80008e4:	40da      	lsrs	r2, r3
 80008e6:	4643      	mov	r3, r8
 80008e8:	379e      	adds	r7, #158	@ 0x9e
 80008ea:	40bb      	lsls	r3, r7
 80008ec:	1e59      	subs	r1, r3, #1
 80008ee:	418b      	sbcs	r3, r1
 80008f0:	431a      	orrs	r2, r3
 80008f2:	0753      	lsls	r3, r2, #29
 80008f4:	d004      	beq.n	8000900 <__aeabi_fdiv+0x1c4>
 80008f6:	230f      	movs	r3, #15
 80008f8:	4013      	ands	r3, r2
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	d000      	beq.n	8000900 <__aeabi_fdiv+0x1c4>
 80008fe:	3204      	adds	r2, #4
 8000900:	0153      	lsls	r3, r2, #5
 8000902:	d529      	bpl.n	8000958 <__aeabi_fdiv+0x21c>
 8000904:	2001      	movs	r0, #1
 8000906:	2200      	movs	r2, #0
 8000908:	e79a      	b.n	8000840 <__aeabi_fdiv+0x104>
 800090a:	4642      	mov	r2, r8
 800090c:	0163      	lsls	r3, r4, #5
 800090e:	0155      	lsls	r5, r2, #5
 8000910:	42ab      	cmp	r3, r5
 8000912:	d215      	bcs.n	8000940 <__aeabi_fdiv+0x204>
 8000914:	201b      	movs	r0, #27
 8000916:	2200      	movs	r2, #0
 8000918:	3f01      	subs	r7, #1
 800091a:	2601      	movs	r6, #1
 800091c:	001c      	movs	r4, r3
 800091e:	0052      	lsls	r2, r2, #1
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	2c00      	cmp	r4, #0
 8000924:	db01      	blt.n	800092a <__aeabi_fdiv+0x1ee>
 8000926:	429d      	cmp	r5, r3
 8000928:	d801      	bhi.n	800092e <__aeabi_fdiv+0x1f2>
 800092a:	1b5b      	subs	r3, r3, r5
 800092c:	4332      	orrs	r2, r6
 800092e:	3801      	subs	r0, #1
 8000930:	2800      	cmp	r0, #0
 8000932:	d1f3      	bne.n	800091c <__aeabi_fdiv+0x1e0>
 8000934:	1e58      	subs	r0, r3, #1
 8000936:	4183      	sbcs	r3, r0
 8000938:	4313      	orrs	r3, r2
 800093a:	4698      	mov	r8, r3
 800093c:	000d      	movs	r5, r1
 800093e:	e79a      	b.n	8000876 <__aeabi_fdiv+0x13a>
 8000940:	201a      	movs	r0, #26
 8000942:	2201      	movs	r2, #1
 8000944:	1b5b      	subs	r3, r3, r5
 8000946:	e7e8      	b.n	800091a <__aeabi_fdiv+0x1de>
 8000948:	3b02      	subs	r3, #2
 800094a:	425a      	negs	r2, r3
 800094c:	4153      	adcs	r3, r2
 800094e:	425b      	negs	r3, r3
 8000950:	0035      	movs	r5, r6
 8000952:	2200      	movs	r2, #0
 8000954:	b2d8      	uxtb	r0, r3
 8000956:	e773      	b.n	8000840 <__aeabi_fdiv+0x104>
 8000958:	0192      	lsls	r2, r2, #6
 800095a:	2000      	movs	r0, #0
 800095c:	0a52      	lsrs	r2, r2, #9
 800095e:	e76f      	b.n	8000840 <__aeabi_fdiv+0x104>
 8000960:	431a      	orrs	r2, r3
 8000962:	0252      	lsls	r2, r2, #9
 8000964:	0035      	movs	r5, r6
 8000966:	20ff      	movs	r0, #255	@ 0xff
 8000968:	0a52      	lsrs	r2, r2, #9
 800096a:	e769      	b.n	8000840 <__aeabi_fdiv+0x104>
 800096c:	4644      	mov	r4, r8
 800096e:	e7ad      	b.n	80008cc <__aeabi_fdiv+0x190>
 8000970:	0801acf0 	.word	0x0801acf0
 8000974:	0801ad30 	.word	0x0801ad30
 8000978:	f7ffffff 	.word	0xf7ffffff

0800097c <__eqsf2>:
 800097c:	b570      	push	{r4, r5, r6, lr}
 800097e:	0042      	lsls	r2, r0, #1
 8000980:	024e      	lsls	r6, r1, #9
 8000982:	004c      	lsls	r4, r1, #1
 8000984:	0245      	lsls	r5, r0, #9
 8000986:	0a6d      	lsrs	r5, r5, #9
 8000988:	0e12      	lsrs	r2, r2, #24
 800098a:	0fc3      	lsrs	r3, r0, #31
 800098c:	0a76      	lsrs	r6, r6, #9
 800098e:	0e24      	lsrs	r4, r4, #24
 8000990:	0fc9      	lsrs	r1, r1, #31
 8000992:	2aff      	cmp	r2, #255	@ 0xff
 8000994:	d010      	beq.n	80009b8 <__eqsf2+0x3c>
 8000996:	2cff      	cmp	r4, #255	@ 0xff
 8000998:	d00c      	beq.n	80009b4 <__eqsf2+0x38>
 800099a:	2001      	movs	r0, #1
 800099c:	42a2      	cmp	r2, r4
 800099e:	d10a      	bne.n	80009b6 <__eqsf2+0x3a>
 80009a0:	42b5      	cmp	r5, r6
 80009a2:	d108      	bne.n	80009b6 <__eqsf2+0x3a>
 80009a4:	428b      	cmp	r3, r1
 80009a6:	d00f      	beq.n	80009c8 <__eqsf2+0x4c>
 80009a8:	2a00      	cmp	r2, #0
 80009aa:	d104      	bne.n	80009b6 <__eqsf2+0x3a>
 80009ac:	0028      	movs	r0, r5
 80009ae:	1e43      	subs	r3, r0, #1
 80009b0:	4198      	sbcs	r0, r3
 80009b2:	e000      	b.n	80009b6 <__eqsf2+0x3a>
 80009b4:	2001      	movs	r0, #1
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	2001      	movs	r0, #1
 80009ba:	2cff      	cmp	r4, #255	@ 0xff
 80009bc:	d1fb      	bne.n	80009b6 <__eqsf2+0x3a>
 80009be:	4335      	orrs	r5, r6
 80009c0:	d1f9      	bne.n	80009b6 <__eqsf2+0x3a>
 80009c2:	404b      	eors	r3, r1
 80009c4:	0018      	movs	r0, r3
 80009c6:	e7f6      	b.n	80009b6 <__eqsf2+0x3a>
 80009c8:	2000      	movs	r0, #0
 80009ca:	e7f4      	b.n	80009b6 <__eqsf2+0x3a>

080009cc <__gesf2>:
 80009cc:	b530      	push	{r4, r5, lr}
 80009ce:	0042      	lsls	r2, r0, #1
 80009d0:	0244      	lsls	r4, r0, #9
 80009d2:	024d      	lsls	r5, r1, #9
 80009d4:	0fc3      	lsrs	r3, r0, #31
 80009d6:	0048      	lsls	r0, r1, #1
 80009d8:	0a64      	lsrs	r4, r4, #9
 80009da:	0e12      	lsrs	r2, r2, #24
 80009dc:	0a6d      	lsrs	r5, r5, #9
 80009de:	0e00      	lsrs	r0, r0, #24
 80009e0:	0fc9      	lsrs	r1, r1, #31
 80009e2:	2aff      	cmp	r2, #255	@ 0xff
 80009e4:	d019      	beq.n	8000a1a <__gesf2+0x4e>
 80009e6:	28ff      	cmp	r0, #255	@ 0xff
 80009e8:	d00b      	beq.n	8000a02 <__gesf2+0x36>
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	d11e      	bne.n	8000a2c <__gesf2+0x60>
 80009ee:	2800      	cmp	r0, #0
 80009f0:	d10b      	bne.n	8000a0a <__gesf2+0x3e>
 80009f2:	2d00      	cmp	r5, #0
 80009f4:	d027      	beq.n	8000a46 <__gesf2+0x7a>
 80009f6:	2c00      	cmp	r4, #0
 80009f8:	d134      	bne.n	8000a64 <__gesf2+0x98>
 80009fa:	2900      	cmp	r1, #0
 80009fc:	d02f      	beq.n	8000a5e <__gesf2+0x92>
 80009fe:	0008      	movs	r0, r1
 8000a00:	bd30      	pop	{r4, r5, pc}
 8000a02:	2d00      	cmp	r5, #0
 8000a04:	d128      	bne.n	8000a58 <__gesf2+0x8c>
 8000a06:	2a00      	cmp	r2, #0
 8000a08:	d101      	bne.n	8000a0e <__gesf2+0x42>
 8000a0a:	2c00      	cmp	r4, #0
 8000a0c:	d0f5      	beq.n	80009fa <__gesf2+0x2e>
 8000a0e:	428b      	cmp	r3, r1
 8000a10:	d107      	bne.n	8000a22 <__gesf2+0x56>
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d023      	beq.n	8000a5e <__gesf2+0x92>
 8000a16:	0018      	movs	r0, r3
 8000a18:	e7f2      	b.n	8000a00 <__gesf2+0x34>
 8000a1a:	2c00      	cmp	r4, #0
 8000a1c:	d11c      	bne.n	8000a58 <__gesf2+0x8c>
 8000a1e:	28ff      	cmp	r0, #255	@ 0xff
 8000a20:	d014      	beq.n	8000a4c <__gesf2+0x80>
 8000a22:	1e58      	subs	r0, r3, #1
 8000a24:	2302      	movs	r3, #2
 8000a26:	4018      	ands	r0, r3
 8000a28:	3801      	subs	r0, #1
 8000a2a:	e7e9      	b.n	8000a00 <__gesf2+0x34>
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	d0f8      	beq.n	8000a22 <__gesf2+0x56>
 8000a30:	428b      	cmp	r3, r1
 8000a32:	d1f6      	bne.n	8000a22 <__gesf2+0x56>
 8000a34:	4282      	cmp	r2, r0
 8000a36:	dcf4      	bgt.n	8000a22 <__gesf2+0x56>
 8000a38:	dbeb      	blt.n	8000a12 <__gesf2+0x46>
 8000a3a:	42ac      	cmp	r4, r5
 8000a3c:	d8f1      	bhi.n	8000a22 <__gesf2+0x56>
 8000a3e:	2000      	movs	r0, #0
 8000a40:	42ac      	cmp	r4, r5
 8000a42:	d2dd      	bcs.n	8000a00 <__gesf2+0x34>
 8000a44:	e7e5      	b.n	8000a12 <__gesf2+0x46>
 8000a46:	2c00      	cmp	r4, #0
 8000a48:	d0da      	beq.n	8000a00 <__gesf2+0x34>
 8000a4a:	e7ea      	b.n	8000a22 <__gesf2+0x56>
 8000a4c:	2d00      	cmp	r5, #0
 8000a4e:	d103      	bne.n	8000a58 <__gesf2+0x8c>
 8000a50:	428b      	cmp	r3, r1
 8000a52:	d1e6      	bne.n	8000a22 <__gesf2+0x56>
 8000a54:	2000      	movs	r0, #0
 8000a56:	e7d3      	b.n	8000a00 <__gesf2+0x34>
 8000a58:	2002      	movs	r0, #2
 8000a5a:	4240      	negs	r0, r0
 8000a5c:	e7d0      	b.n	8000a00 <__gesf2+0x34>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	4240      	negs	r0, r0
 8000a62:	e7cd      	b.n	8000a00 <__gesf2+0x34>
 8000a64:	428b      	cmp	r3, r1
 8000a66:	d0e8      	beq.n	8000a3a <__gesf2+0x6e>
 8000a68:	e7db      	b.n	8000a22 <__gesf2+0x56>
 8000a6a:	46c0      	nop			@ (mov r8, r8)

08000a6c <__lesf2>:
 8000a6c:	b530      	push	{r4, r5, lr}
 8000a6e:	0042      	lsls	r2, r0, #1
 8000a70:	0244      	lsls	r4, r0, #9
 8000a72:	024d      	lsls	r5, r1, #9
 8000a74:	0fc3      	lsrs	r3, r0, #31
 8000a76:	0048      	lsls	r0, r1, #1
 8000a78:	0a64      	lsrs	r4, r4, #9
 8000a7a:	0e12      	lsrs	r2, r2, #24
 8000a7c:	0a6d      	lsrs	r5, r5, #9
 8000a7e:	0e00      	lsrs	r0, r0, #24
 8000a80:	0fc9      	lsrs	r1, r1, #31
 8000a82:	2aff      	cmp	r2, #255	@ 0xff
 8000a84:	d01a      	beq.n	8000abc <__lesf2+0x50>
 8000a86:	28ff      	cmp	r0, #255	@ 0xff
 8000a88:	d00e      	beq.n	8000aa8 <__lesf2+0x3c>
 8000a8a:	2a00      	cmp	r2, #0
 8000a8c:	d11e      	bne.n	8000acc <__lesf2+0x60>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	d10e      	bne.n	8000ab0 <__lesf2+0x44>
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	d02a      	beq.n	8000aec <__lesf2+0x80>
 8000a96:	2c00      	cmp	r4, #0
 8000a98:	d00c      	beq.n	8000ab4 <__lesf2+0x48>
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d01d      	beq.n	8000ada <__lesf2+0x6e>
 8000a9e:	1e58      	subs	r0, r3, #1
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	4018      	ands	r0, r3
 8000aa4:	3801      	subs	r0, #1
 8000aa6:	e010      	b.n	8000aca <__lesf2+0x5e>
 8000aa8:	2d00      	cmp	r5, #0
 8000aaa:	d10d      	bne.n	8000ac8 <__lesf2+0x5c>
 8000aac:	2a00      	cmp	r2, #0
 8000aae:	d120      	bne.n	8000af2 <__lesf2+0x86>
 8000ab0:	2c00      	cmp	r4, #0
 8000ab2:	d11e      	bne.n	8000af2 <__lesf2+0x86>
 8000ab4:	2900      	cmp	r1, #0
 8000ab6:	d023      	beq.n	8000b00 <__lesf2+0x94>
 8000ab8:	0008      	movs	r0, r1
 8000aba:	e006      	b.n	8000aca <__lesf2+0x5e>
 8000abc:	2c00      	cmp	r4, #0
 8000abe:	d103      	bne.n	8000ac8 <__lesf2+0x5c>
 8000ac0:	28ff      	cmp	r0, #255	@ 0xff
 8000ac2:	d1ec      	bne.n	8000a9e <__lesf2+0x32>
 8000ac4:	2d00      	cmp	r5, #0
 8000ac6:	d017      	beq.n	8000af8 <__lesf2+0x8c>
 8000ac8:	2002      	movs	r0, #2
 8000aca:	bd30      	pop	{r4, r5, pc}
 8000acc:	2800      	cmp	r0, #0
 8000ace:	d0e6      	beq.n	8000a9e <__lesf2+0x32>
 8000ad0:	428b      	cmp	r3, r1
 8000ad2:	d1e4      	bne.n	8000a9e <__lesf2+0x32>
 8000ad4:	4282      	cmp	r2, r0
 8000ad6:	dce2      	bgt.n	8000a9e <__lesf2+0x32>
 8000ad8:	db04      	blt.n	8000ae4 <__lesf2+0x78>
 8000ada:	42ac      	cmp	r4, r5
 8000adc:	d8df      	bhi.n	8000a9e <__lesf2+0x32>
 8000ade:	2000      	movs	r0, #0
 8000ae0:	42ac      	cmp	r4, r5
 8000ae2:	d2f2      	bcs.n	8000aca <__lesf2+0x5e>
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00b      	beq.n	8000b00 <__lesf2+0x94>
 8000ae8:	0018      	movs	r0, r3
 8000aea:	e7ee      	b.n	8000aca <__lesf2+0x5e>
 8000aec:	2c00      	cmp	r4, #0
 8000aee:	d0ec      	beq.n	8000aca <__lesf2+0x5e>
 8000af0:	e7d5      	b.n	8000a9e <__lesf2+0x32>
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d1d3      	bne.n	8000a9e <__lesf2+0x32>
 8000af6:	e7f5      	b.n	8000ae4 <__lesf2+0x78>
 8000af8:	2000      	movs	r0, #0
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d0e5      	beq.n	8000aca <__lesf2+0x5e>
 8000afe:	e7ce      	b.n	8000a9e <__lesf2+0x32>
 8000b00:	2001      	movs	r0, #1
 8000b02:	4240      	negs	r0, r0
 8000b04:	e7e1      	b.n	8000aca <__lesf2+0x5e>
 8000b06:	46c0      	nop			@ (mov r8, r8)

08000b08 <__aeabi_fmul>:
 8000b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b0a:	464f      	mov	r7, r9
 8000b0c:	4646      	mov	r6, r8
 8000b0e:	46d6      	mov	lr, sl
 8000b10:	0243      	lsls	r3, r0, #9
 8000b12:	0a5b      	lsrs	r3, r3, #9
 8000b14:	0045      	lsls	r5, r0, #1
 8000b16:	b5c0      	push	{r6, r7, lr}
 8000b18:	4699      	mov	r9, r3
 8000b1a:	1c0f      	adds	r7, r1, #0
 8000b1c:	0e2d      	lsrs	r5, r5, #24
 8000b1e:	0fc6      	lsrs	r6, r0, #31
 8000b20:	2d00      	cmp	r5, #0
 8000b22:	d100      	bne.n	8000b26 <__aeabi_fmul+0x1e>
 8000b24:	e088      	b.n	8000c38 <__aeabi_fmul+0x130>
 8000b26:	2dff      	cmp	r5, #255	@ 0xff
 8000b28:	d100      	bne.n	8000b2c <__aeabi_fmul+0x24>
 8000b2a:	e08d      	b.n	8000c48 <__aeabi_fmul+0x140>
 8000b2c:	2280      	movs	r2, #128	@ 0x80
 8000b2e:	00db      	lsls	r3, r3, #3
 8000b30:	04d2      	lsls	r2, r2, #19
 8000b32:	431a      	orrs	r2, r3
 8000b34:	2300      	movs	r3, #0
 8000b36:	4691      	mov	r9, r2
 8000b38:	4698      	mov	r8, r3
 8000b3a:	469a      	mov	sl, r3
 8000b3c:	3d7f      	subs	r5, #127	@ 0x7f
 8000b3e:	027c      	lsls	r4, r7, #9
 8000b40:	007b      	lsls	r3, r7, #1
 8000b42:	0a64      	lsrs	r4, r4, #9
 8000b44:	0e1b      	lsrs	r3, r3, #24
 8000b46:	0fff      	lsrs	r7, r7, #31
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d068      	beq.n	8000c1e <__aeabi_fmul+0x116>
 8000b4c:	2bff      	cmp	r3, #255	@ 0xff
 8000b4e:	d021      	beq.n	8000b94 <__aeabi_fmul+0x8c>
 8000b50:	2280      	movs	r2, #128	@ 0x80
 8000b52:	00e4      	lsls	r4, r4, #3
 8000b54:	04d2      	lsls	r2, r2, #19
 8000b56:	4314      	orrs	r4, r2
 8000b58:	4642      	mov	r2, r8
 8000b5a:	3b7f      	subs	r3, #127	@ 0x7f
 8000b5c:	195b      	adds	r3, r3, r5
 8000b5e:	2100      	movs	r1, #0
 8000b60:	1c5d      	adds	r5, r3, #1
 8000b62:	2a0a      	cmp	r2, #10
 8000b64:	dc2e      	bgt.n	8000bc4 <__aeabi_fmul+0xbc>
 8000b66:	407e      	eors	r6, r7
 8000b68:	4642      	mov	r2, r8
 8000b6a:	2a02      	cmp	r2, #2
 8000b6c:	dc23      	bgt.n	8000bb6 <__aeabi_fmul+0xae>
 8000b6e:	3a01      	subs	r2, #1
 8000b70:	2a01      	cmp	r2, #1
 8000b72:	d900      	bls.n	8000b76 <__aeabi_fmul+0x6e>
 8000b74:	e0bd      	b.n	8000cf2 <__aeabi_fmul+0x1ea>
 8000b76:	2902      	cmp	r1, #2
 8000b78:	d06e      	beq.n	8000c58 <__aeabi_fmul+0x150>
 8000b7a:	2901      	cmp	r1, #1
 8000b7c:	d12c      	bne.n	8000bd8 <__aeabi_fmul+0xd0>
 8000b7e:	2000      	movs	r0, #0
 8000b80:	2200      	movs	r2, #0
 8000b82:	05c0      	lsls	r0, r0, #23
 8000b84:	07f6      	lsls	r6, r6, #31
 8000b86:	4310      	orrs	r0, r2
 8000b88:	4330      	orrs	r0, r6
 8000b8a:	bce0      	pop	{r5, r6, r7}
 8000b8c:	46ba      	mov	sl, r7
 8000b8e:	46b1      	mov	r9, r6
 8000b90:	46a8      	mov	r8, r5
 8000b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b94:	002b      	movs	r3, r5
 8000b96:	33ff      	adds	r3, #255	@ 0xff
 8000b98:	2c00      	cmp	r4, #0
 8000b9a:	d065      	beq.n	8000c68 <__aeabi_fmul+0x160>
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	4641      	mov	r1, r8
 8000ba0:	4311      	orrs	r1, r2
 8000ba2:	0032      	movs	r2, r6
 8000ba4:	3501      	adds	r5, #1
 8000ba6:	4688      	mov	r8, r1
 8000ba8:	407a      	eors	r2, r7
 8000baa:	35ff      	adds	r5, #255	@ 0xff
 8000bac:	290a      	cmp	r1, #10
 8000bae:	dd00      	ble.n	8000bb2 <__aeabi_fmul+0xaa>
 8000bb0:	e0d8      	b.n	8000d64 <__aeabi_fmul+0x25c>
 8000bb2:	0016      	movs	r6, r2
 8000bb4:	2103      	movs	r1, #3
 8000bb6:	4640      	mov	r0, r8
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4082      	lsls	r2, r0
 8000bbc:	20a6      	movs	r0, #166	@ 0xa6
 8000bbe:	00c0      	lsls	r0, r0, #3
 8000bc0:	4202      	tst	r2, r0
 8000bc2:	d020      	beq.n	8000c06 <__aeabi_fmul+0xfe>
 8000bc4:	4653      	mov	r3, sl
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d046      	beq.n	8000c58 <__aeabi_fmul+0x150>
 8000bca:	2b03      	cmp	r3, #3
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_fmul+0xc8>
 8000bce:	e0bb      	b.n	8000d48 <__aeabi_fmul+0x240>
 8000bd0:	4651      	mov	r1, sl
 8000bd2:	464c      	mov	r4, r9
 8000bd4:	2901      	cmp	r1, #1
 8000bd6:	d0d2      	beq.n	8000b7e <__aeabi_fmul+0x76>
 8000bd8:	002b      	movs	r3, r5
 8000bda:	337f      	adds	r3, #127	@ 0x7f
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	dd70      	ble.n	8000cc2 <__aeabi_fmul+0x1ba>
 8000be0:	0762      	lsls	r2, r4, #29
 8000be2:	d004      	beq.n	8000bee <__aeabi_fmul+0xe6>
 8000be4:	220f      	movs	r2, #15
 8000be6:	4022      	ands	r2, r4
 8000be8:	2a04      	cmp	r2, #4
 8000bea:	d000      	beq.n	8000bee <__aeabi_fmul+0xe6>
 8000bec:	3404      	adds	r4, #4
 8000bee:	0122      	lsls	r2, r4, #4
 8000bf0:	d503      	bpl.n	8000bfa <__aeabi_fmul+0xf2>
 8000bf2:	4b63      	ldr	r3, [pc, #396]	@ (8000d80 <__aeabi_fmul+0x278>)
 8000bf4:	401c      	ands	r4, r3
 8000bf6:	002b      	movs	r3, r5
 8000bf8:	3380      	adds	r3, #128	@ 0x80
 8000bfa:	2bfe      	cmp	r3, #254	@ 0xfe
 8000bfc:	dc2c      	bgt.n	8000c58 <__aeabi_fmul+0x150>
 8000bfe:	01a2      	lsls	r2, r4, #6
 8000c00:	0a52      	lsrs	r2, r2, #9
 8000c02:	b2d8      	uxtb	r0, r3
 8000c04:	e7bd      	b.n	8000b82 <__aeabi_fmul+0x7a>
 8000c06:	2090      	movs	r0, #144	@ 0x90
 8000c08:	0080      	lsls	r0, r0, #2
 8000c0a:	4202      	tst	r2, r0
 8000c0c:	d127      	bne.n	8000c5e <__aeabi_fmul+0x156>
 8000c0e:	38b9      	subs	r0, #185	@ 0xb9
 8000c10:	38ff      	subs	r0, #255	@ 0xff
 8000c12:	4210      	tst	r0, r2
 8000c14:	d06d      	beq.n	8000cf2 <__aeabi_fmul+0x1ea>
 8000c16:	003e      	movs	r6, r7
 8000c18:	46a1      	mov	r9, r4
 8000c1a:	468a      	mov	sl, r1
 8000c1c:	e7d2      	b.n	8000bc4 <__aeabi_fmul+0xbc>
 8000c1e:	2c00      	cmp	r4, #0
 8000c20:	d141      	bne.n	8000ca6 <__aeabi_fmul+0x19e>
 8000c22:	2301      	movs	r3, #1
 8000c24:	4642      	mov	r2, r8
 8000c26:	431a      	orrs	r2, r3
 8000c28:	4690      	mov	r8, r2
 8000c2a:	002b      	movs	r3, r5
 8000c2c:	4642      	mov	r2, r8
 8000c2e:	2101      	movs	r1, #1
 8000c30:	1c5d      	adds	r5, r3, #1
 8000c32:	2a0a      	cmp	r2, #10
 8000c34:	dd97      	ble.n	8000b66 <__aeabi_fmul+0x5e>
 8000c36:	e7c5      	b.n	8000bc4 <__aeabi_fmul+0xbc>
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d126      	bne.n	8000c8a <__aeabi_fmul+0x182>
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	4698      	mov	r8, r3
 8000c40:	3b03      	subs	r3, #3
 8000c42:	2500      	movs	r5, #0
 8000c44:	469a      	mov	sl, r3
 8000c46:	e77a      	b.n	8000b3e <__aeabi_fmul+0x36>
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d118      	bne.n	8000c7e <__aeabi_fmul+0x176>
 8000c4c:	2308      	movs	r3, #8
 8000c4e:	4698      	mov	r8, r3
 8000c50:	3b06      	subs	r3, #6
 8000c52:	25ff      	movs	r5, #255	@ 0xff
 8000c54:	469a      	mov	sl, r3
 8000c56:	e772      	b.n	8000b3e <__aeabi_fmul+0x36>
 8000c58:	20ff      	movs	r0, #255	@ 0xff
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	e791      	b.n	8000b82 <__aeabi_fmul+0x7a>
 8000c5e:	2280      	movs	r2, #128	@ 0x80
 8000c60:	2600      	movs	r6, #0
 8000c62:	20ff      	movs	r0, #255	@ 0xff
 8000c64:	03d2      	lsls	r2, r2, #15
 8000c66:	e78c      	b.n	8000b82 <__aeabi_fmul+0x7a>
 8000c68:	4641      	mov	r1, r8
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	3501      	adds	r5, #1
 8000c6e:	4311      	orrs	r1, r2
 8000c70:	4688      	mov	r8, r1
 8000c72:	35ff      	adds	r5, #255	@ 0xff
 8000c74:	290a      	cmp	r1, #10
 8000c76:	dca5      	bgt.n	8000bc4 <__aeabi_fmul+0xbc>
 8000c78:	2102      	movs	r1, #2
 8000c7a:	407e      	eors	r6, r7
 8000c7c:	e774      	b.n	8000b68 <__aeabi_fmul+0x60>
 8000c7e:	230c      	movs	r3, #12
 8000c80:	4698      	mov	r8, r3
 8000c82:	3b09      	subs	r3, #9
 8000c84:	25ff      	movs	r5, #255	@ 0xff
 8000c86:	469a      	mov	sl, r3
 8000c88:	e759      	b.n	8000b3e <__aeabi_fmul+0x36>
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f002 f962 	bl	8002f54 <__clzsi2>
 8000c90:	464a      	mov	r2, r9
 8000c92:	1f43      	subs	r3, r0, #5
 8000c94:	2576      	movs	r5, #118	@ 0x76
 8000c96:	409a      	lsls	r2, r3
 8000c98:	2300      	movs	r3, #0
 8000c9a:	426d      	negs	r5, r5
 8000c9c:	4691      	mov	r9, r2
 8000c9e:	4698      	mov	r8, r3
 8000ca0:	469a      	mov	sl, r3
 8000ca2:	1a2d      	subs	r5, r5, r0
 8000ca4:	e74b      	b.n	8000b3e <__aeabi_fmul+0x36>
 8000ca6:	0020      	movs	r0, r4
 8000ca8:	f002 f954 	bl	8002f54 <__clzsi2>
 8000cac:	4642      	mov	r2, r8
 8000cae:	1f43      	subs	r3, r0, #5
 8000cb0:	409c      	lsls	r4, r3
 8000cb2:	1a2b      	subs	r3, r5, r0
 8000cb4:	3b76      	subs	r3, #118	@ 0x76
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	1c5d      	adds	r5, r3, #1
 8000cba:	2a0a      	cmp	r2, #10
 8000cbc:	dc00      	bgt.n	8000cc0 <__aeabi_fmul+0x1b8>
 8000cbe:	e752      	b.n	8000b66 <__aeabi_fmul+0x5e>
 8000cc0:	e780      	b.n	8000bc4 <__aeabi_fmul+0xbc>
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	2b1b      	cmp	r3, #27
 8000cc8:	dd00      	ble.n	8000ccc <__aeabi_fmul+0x1c4>
 8000cca:	e758      	b.n	8000b7e <__aeabi_fmul+0x76>
 8000ccc:	359e      	adds	r5, #158	@ 0x9e
 8000cce:	0022      	movs	r2, r4
 8000cd0:	40ac      	lsls	r4, r5
 8000cd2:	40da      	lsrs	r2, r3
 8000cd4:	1e63      	subs	r3, r4, #1
 8000cd6:	419c      	sbcs	r4, r3
 8000cd8:	4322      	orrs	r2, r4
 8000cda:	0753      	lsls	r3, r2, #29
 8000cdc:	d004      	beq.n	8000ce8 <__aeabi_fmul+0x1e0>
 8000cde:	230f      	movs	r3, #15
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	d000      	beq.n	8000ce8 <__aeabi_fmul+0x1e0>
 8000ce6:	3204      	adds	r2, #4
 8000ce8:	0153      	lsls	r3, r2, #5
 8000cea:	d537      	bpl.n	8000d5c <__aeabi_fmul+0x254>
 8000cec:	2001      	movs	r0, #1
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e747      	b.n	8000b82 <__aeabi_fmul+0x7a>
 8000cf2:	0c21      	lsrs	r1, r4, #16
 8000cf4:	464a      	mov	r2, r9
 8000cf6:	0424      	lsls	r4, r4, #16
 8000cf8:	0c24      	lsrs	r4, r4, #16
 8000cfa:	0027      	movs	r7, r4
 8000cfc:	0c10      	lsrs	r0, r2, #16
 8000cfe:	0412      	lsls	r2, r2, #16
 8000d00:	0c12      	lsrs	r2, r2, #16
 8000d02:	4344      	muls	r4, r0
 8000d04:	4357      	muls	r7, r2
 8000d06:	4348      	muls	r0, r1
 8000d08:	4351      	muls	r1, r2
 8000d0a:	0c3a      	lsrs	r2, r7, #16
 8000d0c:	1909      	adds	r1, r1, r4
 8000d0e:	1852      	adds	r2, r2, r1
 8000d10:	4294      	cmp	r4, r2
 8000d12:	d903      	bls.n	8000d1c <__aeabi_fmul+0x214>
 8000d14:	2180      	movs	r1, #128	@ 0x80
 8000d16:	0249      	lsls	r1, r1, #9
 8000d18:	468c      	mov	ip, r1
 8000d1a:	4460      	add	r0, ip
 8000d1c:	043f      	lsls	r7, r7, #16
 8000d1e:	0411      	lsls	r1, r2, #16
 8000d20:	0c3f      	lsrs	r7, r7, #16
 8000d22:	19c9      	adds	r1, r1, r7
 8000d24:	018c      	lsls	r4, r1, #6
 8000d26:	1e67      	subs	r7, r4, #1
 8000d28:	41bc      	sbcs	r4, r7
 8000d2a:	0c12      	lsrs	r2, r2, #16
 8000d2c:	0e89      	lsrs	r1, r1, #26
 8000d2e:	1812      	adds	r2, r2, r0
 8000d30:	430c      	orrs	r4, r1
 8000d32:	0192      	lsls	r2, r2, #6
 8000d34:	4314      	orrs	r4, r2
 8000d36:	0112      	lsls	r2, r2, #4
 8000d38:	d50e      	bpl.n	8000d58 <__aeabi_fmul+0x250>
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	0862      	lsrs	r2, r4, #1
 8000d3e:	401c      	ands	r4, r3
 8000d40:	4314      	orrs	r4, r2
 8000d42:	e749      	b.n	8000bd8 <__aeabi_fmul+0xd0>
 8000d44:	003e      	movs	r6, r7
 8000d46:	46a1      	mov	r9, r4
 8000d48:	2280      	movs	r2, #128	@ 0x80
 8000d4a:	464b      	mov	r3, r9
 8000d4c:	03d2      	lsls	r2, r2, #15
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	0252      	lsls	r2, r2, #9
 8000d52:	20ff      	movs	r0, #255	@ 0xff
 8000d54:	0a52      	lsrs	r2, r2, #9
 8000d56:	e714      	b.n	8000b82 <__aeabi_fmul+0x7a>
 8000d58:	001d      	movs	r5, r3
 8000d5a:	e73d      	b.n	8000bd8 <__aeabi_fmul+0xd0>
 8000d5c:	0192      	lsls	r2, r2, #6
 8000d5e:	2000      	movs	r0, #0
 8000d60:	0a52      	lsrs	r2, r2, #9
 8000d62:	e70e      	b.n	8000b82 <__aeabi_fmul+0x7a>
 8000d64:	290f      	cmp	r1, #15
 8000d66:	d1ed      	bne.n	8000d44 <__aeabi_fmul+0x23c>
 8000d68:	2280      	movs	r2, #128	@ 0x80
 8000d6a:	464b      	mov	r3, r9
 8000d6c:	03d2      	lsls	r2, r2, #15
 8000d6e:	4213      	tst	r3, r2
 8000d70:	d0ea      	beq.n	8000d48 <__aeabi_fmul+0x240>
 8000d72:	4214      	tst	r4, r2
 8000d74:	d1e8      	bne.n	8000d48 <__aeabi_fmul+0x240>
 8000d76:	003e      	movs	r6, r7
 8000d78:	20ff      	movs	r0, #255	@ 0xff
 8000d7a:	4322      	orrs	r2, r4
 8000d7c:	e701      	b.n	8000b82 <__aeabi_fmul+0x7a>
 8000d7e:	46c0      	nop			@ (mov r8, r8)
 8000d80:	f7ffffff 	.word	0xf7ffffff

08000d84 <__aeabi_fsub>:
 8000d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d86:	4647      	mov	r7, r8
 8000d88:	46ce      	mov	lr, r9
 8000d8a:	024e      	lsls	r6, r1, #9
 8000d8c:	0243      	lsls	r3, r0, #9
 8000d8e:	0045      	lsls	r5, r0, #1
 8000d90:	0a72      	lsrs	r2, r6, #9
 8000d92:	0fc4      	lsrs	r4, r0, #31
 8000d94:	0048      	lsls	r0, r1, #1
 8000d96:	b580      	push	{r7, lr}
 8000d98:	4694      	mov	ip, r2
 8000d9a:	0a5f      	lsrs	r7, r3, #9
 8000d9c:	0e2d      	lsrs	r5, r5, #24
 8000d9e:	099b      	lsrs	r3, r3, #6
 8000da0:	0e00      	lsrs	r0, r0, #24
 8000da2:	0fc9      	lsrs	r1, r1, #31
 8000da4:	09b6      	lsrs	r6, r6, #6
 8000da6:	28ff      	cmp	r0, #255	@ 0xff
 8000da8:	d024      	beq.n	8000df4 <__aeabi_fsub+0x70>
 8000daa:	2201      	movs	r2, #1
 8000dac:	4051      	eors	r1, r2
 8000dae:	1a2a      	subs	r2, r5, r0
 8000db0:	428c      	cmp	r4, r1
 8000db2:	d00f      	beq.n	8000dd4 <__aeabi_fsub+0x50>
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	dc00      	bgt.n	8000dba <__aeabi_fsub+0x36>
 8000db8:	e16a      	b.n	8001090 <__aeabi_fsub+0x30c>
 8000dba:	2800      	cmp	r0, #0
 8000dbc:	d135      	bne.n	8000e2a <__aeabi_fsub+0xa6>
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_fsub+0x40>
 8000dc2:	e0a2      	b.n	8000f0a <__aeabi_fsub+0x186>
 8000dc4:	1e51      	subs	r1, r2, #1
 8000dc6:	2a01      	cmp	r2, #1
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_fsub+0x48>
 8000dca:	e124      	b.n	8001016 <__aeabi_fsub+0x292>
 8000dcc:	2aff      	cmp	r2, #255	@ 0xff
 8000dce:	d021      	beq.n	8000e14 <__aeabi_fsub+0x90>
 8000dd0:	000a      	movs	r2, r1
 8000dd2:	e02f      	b.n	8000e34 <__aeabi_fsub+0xb0>
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	dc00      	bgt.n	8000dda <__aeabi_fsub+0x56>
 8000dd8:	e167      	b.n	80010aa <__aeabi_fsub+0x326>
 8000dda:	2800      	cmp	r0, #0
 8000ddc:	d05e      	beq.n	8000e9c <__aeabi_fsub+0x118>
 8000dde:	2dff      	cmp	r5, #255	@ 0xff
 8000de0:	d018      	beq.n	8000e14 <__aeabi_fsub+0x90>
 8000de2:	2180      	movs	r1, #128	@ 0x80
 8000de4:	04c9      	lsls	r1, r1, #19
 8000de6:	430e      	orrs	r6, r1
 8000de8:	2a1b      	cmp	r2, #27
 8000dea:	dc00      	bgt.n	8000dee <__aeabi_fsub+0x6a>
 8000dec:	e076      	b.n	8000edc <__aeabi_fsub+0x158>
 8000dee:	002a      	movs	r2, r5
 8000df0:	3301      	adds	r3, #1
 8000df2:	e032      	b.n	8000e5a <__aeabi_fsub+0xd6>
 8000df4:	002a      	movs	r2, r5
 8000df6:	3aff      	subs	r2, #255	@ 0xff
 8000df8:	4691      	mov	r9, r2
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d042      	beq.n	8000e84 <__aeabi_fsub+0x100>
 8000dfe:	428c      	cmp	r4, r1
 8000e00:	d055      	beq.n	8000eae <__aeabi_fsub+0x12a>
 8000e02:	464a      	mov	r2, r9
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	d100      	bne.n	8000e0a <__aeabi_fsub+0x86>
 8000e08:	e09c      	b.n	8000f44 <__aeabi_fsub+0x1c0>
 8000e0a:	2d00      	cmp	r5, #0
 8000e0c:	d100      	bne.n	8000e10 <__aeabi_fsub+0x8c>
 8000e0e:	e077      	b.n	8000f00 <__aeabi_fsub+0x17c>
 8000e10:	000c      	movs	r4, r1
 8000e12:	0033      	movs	r3, r6
 8000e14:	08db      	lsrs	r3, r3, #3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d100      	bne.n	8000e1c <__aeabi_fsub+0x98>
 8000e1a:	e06e      	b.n	8000efa <__aeabi_fsub+0x176>
 8000e1c:	2280      	movs	r2, #128	@ 0x80
 8000e1e:	03d2      	lsls	r2, r2, #15
 8000e20:	4313      	orrs	r3, r2
 8000e22:	025b      	lsls	r3, r3, #9
 8000e24:	20ff      	movs	r0, #255	@ 0xff
 8000e26:	0a5b      	lsrs	r3, r3, #9
 8000e28:	e024      	b.n	8000e74 <__aeabi_fsub+0xf0>
 8000e2a:	2dff      	cmp	r5, #255	@ 0xff
 8000e2c:	d0f2      	beq.n	8000e14 <__aeabi_fsub+0x90>
 8000e2e:	2180      	movs	r1, #128	@ 0x80
 8000e30:	04c9      	lsls	r1, r1, #19
 8000e32:	430e      	orrs	r6, r1
 8000e34:	2101      	movs	r1, #1
 8000e36:	2a1b      	cmp	r2, #27
 8000e38:	dc08      	bgt.n	8000e4c <__aeabi_fsub+0xc8>
 8000e3a:	0031      	movs	r1, r6
 8000e3c:	2020      	movs	r0, #32
 8000e3e:	40d1      	lsrs	r1, r2
 8000e40:	1a82      	subs	r2, r0, r2
 8000e42:	4096      	lsls	r6, r2
 8000e44:	0032      	movs	r2, r6
 8000e46:	1e50      	subs	r0, r2, #1
 8000e48:	4182      	sbcs	r2, r0
 8000e4a:	4311      	orrs	r1, r2
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	015a      	lsls	r2, r3, #5
 8000e50:	d460      	bmi.n	8000f14 <__aeabi_fsub+0x190>
 8000e52:	2107      	movs	r1, #7
 8000e54:	002a      	movs	r2, r5
 8000e56:	4019      	ands	r1, r3
 8000e58:	d057      	beq.n	8000f0a <__aeabi_fsub+0x186>
 8000e5a:	210f      	movs	r1, #15
 8000e5c:	4019      	ands	r1, r3
 8000e5e:	2904      	cmp	r1, #4
 8000e60:	d000      	beq.n	8000e64 <__aeabi_fsub+0xe0>
 8000e62:	3304      	adds	r3, #4
 8000e64:	0159      	lsls	r1, r3, #5
 8000e66:	d550      	bpl.n	8000f0a <__aeabi_fsub+0x186>
 8000e68:	1c50      	adds	r0, r2, #1
 8000e6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000e6c:	d045      	beq.n	8000efa <__aeabi_fsub+0x176>
 8000e6e:	019b      	lsls	r3, r3, #6
 8000e70:	b2c0      	uxtb	r0, r0
 8000e72:	0a5b      	lsrs	r3, r3, #9
 8000e74:	05c0      	lsls	r0, r0, #23
 8000e76:	4318      	orrs	r0, r3
 8000e78:	07e4      	lsls	r4, r4, #31
 8000e7a:	4320      	orrs	r0, r4
 8000e7c:	bcc0      	pop	{r6, r7}
 8000e7e:	46b9      	mov	r9, r7
 8000e80:	46b0      	mov	r8, r6
 8000e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e84:	2201      	movs	r2, #1
 8000e86:	4051      	eors	r1, r2
 8000e88:	428c      	cmp	r4, r1
 8000e8a:	d1ba      	bne.n	8000e02 <__aeabi_fsub+0x7e>
 8000e8c:	464a      	mov	r2, r9
 8000e8e:	2a00      	cmp	r2, #0
 8000e90:	d010      	beq.n	8000eb4 <__aeabi_fsub+0x130>
 8000e92:	2d00      	cmp	r5, #0
 8000e94:	d100      	bne.n	8000e98 <__aeabi_fsub+0x114>
 8000e96:	e098      	b.n	8000fca <__aeabi_fsub+0x246>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	e7bb      	b.n	8000e14 <__aeabi_fsub+0x90>
 8000e9c:	2e00      	cmp	r6, #0
 8000e9e:	d034      	beq.n	8000f0a <__aeabi_fsub+0x186>
 8000ea0:	1e51      	subs	r1, r2, #1
 8000ea2:	2a01      	cmp	r2, #1
 8000ea4:	d06e      	beq.n	8000f84 <__aeabi_fsub+0x200>
 8000ea6:	2aff      	cmp	r2, #255	@ 0xff
 8000ea8:	d0b4      	beq.n	8000e14 <__aeabi_fsub+0x90>
 8000eaa:	000a      	movs	r2, r1
 8000eac:	e79c      	b.n	8000de8 <__aeabi_fsub+0x64>
 8000eae:	2a00      	cmp	r2, #0
 8000eb0:	d000      	beq.n	8000eb4 <__aeabi_fsub+0x130>
 8000eb2:	e088      	b.n	8000fc6 <__aeabi_fsub+0x242>
 8000eb4:	20fe      	movs	r0, #254	@ 0xfe
 8000eb6:	1c6a      	adds	r2, r5, #1
 8000eb8:	4210      	tst	r0, r2
 8000eba:	d000      	beq.n	8000ebe <__aeabi_fsub+0x13a>
 8000ebc:	e092      	b.n	8000fe4 <__aeabi_fsub+0x260>
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d000      	beq.n	8000ec4 <__aeabi_fsub+0x140>
 8000ec2:	e0a4      	b.n	800100e <__aeabi_fsub+0x28a>
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d100      	bne.n	8000eca <__aeabi_fsub+0x146>
 8000ec8:	e0cb      	b.n	8001062 <__aeabi_fsub+0x2de>
 8000eca:	2e00      	cmp	r6, #0
 8000ecc:	d000      	beq.n	8000ed0 <__aeabi_fsub+0x14c>
 8000ece:	e0ca      	b.n	8001066 <__aeabi_fsub+0x2e2>
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	08db      	lsrs	r3, r3, #3
 8000ed4:	025b      	lsls	r3, r3, #9
 8000ed6:	0a5b      	lsrs	r3, r3, #9
 8000ed8:	b2d0      	uxtb	r0, r2
 8000eda:	e7cb      	b.n	8000e74 <__aeabi_fsub+0xf0>
 8000edc:	0031      	movs	r1, r6
 8000ede:	2020      	movs	r0, #32
 8000ee0:	40d1      	lsrs	r1, r2
 8000ee2:	1a82      	subs	r2, r0, r2
 8000ee4:	4096      	lsls	r6, r2
 8000ee6:	0032      	movs	r2, r6
 8000ee8:	1e50      	subs	r0, r2, #1
 8000eea:	4182      	sbcs	r2, r0
 8000eec:	430a      	orrs	r2, r1
 8000eee:	189b      	adds	r3, r3, r2
 8000ef0:	015a      	lsls	r2, r3, #5
 8000ef2:	d5ae      	bpl.n	8000e52 <__aeabi_fsub+0xce>
 8000ef4:	1c6a      	adds	r2, r5, #1
 8000ef6:	2dfe      	cmp	r5, #254	@ 0xfe
 8000ef8:	d14a      	bne.n	8000f90 <__aeabi_fsub+0x20c>
 8000efa:	20ff      	movs	r0, #255	@ 0xff
 8000efc:	2300      	movs	r3, #0
 8000efe:	e7b9      	b.n	8000e74 <__aeabi_fsub+0xf0>
 8000f00:	22ff      	movs	r2, #255	@ 0xff
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d14b      	bne.n	8000f9e <__aeabi_fsub+0x21a>
 8000f06:	000c      	movs	r4, r1
 8000f08:	0033      	movs	r3, r6
 8000f0a:	08db      	lsrs	r3, r3, #3
 8000f0c:	2aff      	cmp	r2, #255	@ 0xff
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_fsub+0x18e>
 8000f10:	e781      	b.n	8000e16 <__aeabi_fsub+0x92>
 8000f12:	e7df      	b.n	8000ed4 <__aeabi_fsub+0x150>
 8000f14:	019f      	lsls	r7, r3, #6
 8000f16:	09bf      	lsrs	r7, r7, #6
 8000f18:	0038      	movs	r0, r7
 8000f1a:	f002 f81b 	bl	8002f54 <__clzsi2>
 8000f1e:	3805      	subs	r0, #5
 8000f20:	4087      	lsls	r7, r0
 8000f22:	4285      	cmp	r5, r0
 8000f24:	dc21      	bgt.n	8000f6a <__aeabi_fsub+0x1e6>
 8000f26:	003b      	movs	r3, r7
 8000f28:	2120      	movs	r1, #32
 8000f2a:	1b42      	subs	r2, r0, r5
 8000f2c:	3201      	adds	r2, #1
 8000f2e:	40d3      	lsrs	r3, r2
 8000f30:	1a8a      	subs	r2, r1, r2
 8000f32:	4097      	lsls	r7, r2
 8000f34:	1e7a      	subs	r2, r7, #1
 8000f36:	4197      	sbcs	r7, r2
 8000f38:	2200      	movs	r2, #0
 8000f3a:	433b      	orrs	r3, r7
 8000f3c:	0759      	lsls	r1, r3, #29
 8000f3e:	d000      	beq.n	8000f42 <__aeabi_fsub+0x1be>
 8000f40:	e78b      	b.n	8000e5a <__aeabi_fsub+0xd6>
 8000f42:	e78f      	b.n	8000e64 <__aeabi_fsub+0xe0>
 8000f44:	20fe      	movs	r0, #254	@ 0xfe
 8000f46:	1c6a      	adds	r2, r5, #1
 8000f48:	4210      	tst	r0, r2
 8000f4a:	d112      	bne.n	8000f72 <__aeabi_fsub+0x1ee>
 8000f4c:	2d00      	cmp	r5, #0
 8000f4e:	d152      	bne.n	8000ff6 <__aeabi_fsub+0x272>
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d07c      	beq.n	800104e <__aeabi_fsub+0x2ca>
 8000f54:	2e00      	cmp	r6, #0
 8000f56:	d0bb      	beq.n	8000ed0 <__aeabi_fsub+0x14c>
 8000f58:	1b9a      	subs	r2, r3, r6
 8000f5a:	0150      	lsls	r0, r2, #5
 8000f5c:	d400      	bmi.n	8000f60 <__aeabi_fsub+0x1dc>
 8000f5e:	e08b      	b.n	8001078 <__aeabi_fsub+0x2f4>
 8000f60:	2401      	movs	r4, #1
 8000f62:	2200      	movs	r2, #0
 8000f64:	1af3      	subs	r3, r6, r3
 8000f66:	400c      	ands	r4, r1
 8000f68:	e7e8      	b.n	8000f3c <__aeabi_fsub+0x1b8>
 8000f6a:	4b56      	ldr	r3, [pc, #344]	@ (80010c4 <__aeabi_fsub+0x340>)
 8000f6c:	1a2a      	subs	r2, r5, r0
 8000f6e:	403b      	ands	r3, r7
 8000f70:	e7e4      	b.n	8000f3c <__aeabi_fsub+0x1b8>
 8000f72:	1b9f      	subs	r7, r3, r6
 8000f74:	017a      	lsls	r2, r7, #5
 8000f76:	d446      	bmi.n	8001006 <__aeabi_fsub+0x282>
 8000f78:	2f00      	cmp	r7, #0
 8000f7a:	d1cd      	bne.n	8000f18 <__aeabi_fsub+0x194>
 8000f7c:	2400      	movs	r4, #0
 8000f7e:	2000      	movs	r0, #0
 8000f80:	2300      	movs	r3, #0
 8000f82:	e777      	b.n	8000e74 <__aeabi_fsub+0xf0>
 8000f84:	199b      	adds	r3, r3, r6
 8000f86:	2501      	movs	r5, #1
 8000f88:	3201      	adds	r2, #1
 8000f8a:	0159      	lsls	r1, r3, #5
 8000f8c:	d400      	bmi.n	8000f90 <__aeabi_fsub+0x20c>
 8000f8e:	e760      	b.n	8000e52 <__aeabi_fsub+0xce>
 8000f90:	2101      	movs	r1, #1
 8000f92:	484d      	ldr	r0, [pc, #308]	@ (80010c8 <__aeabi_fsub+0x344>)
 8000f94:	4019      	ands	r1, r3
 8000f96:	085b      	lsrs	r3, r3, #1
 8000f98:	4003      	ands	r3, r0
 8000f9a:	430b      	orrs	r3, r1
 8000f9c:	e7ce      	b.n	8000f3c <__aeabi_fsub+0x1b8>
 8000f9e:	1e57      	subs	r7, r2, #1
 8000fa0:	2a01      	cmp	r2, #1
 8000fa2:	d05a      	beq.n	800105a <__aeabi_fsub+0x2d6>
 8000fa4:	000c      	movs	r4, r1
 8000fa6:	2aff      	cmp	r2, #255	@ 0xff
 8000fa8:	d033      	beq.n	8001012 <__aeabi_fsub+0x28e>
 8000faa:	2201      	movs	r2, #1
 8000fac:	2f1b      	cmp	r7, #27
 8000fae:	dc07      	bgt.n	8000fc0 <__aeabi_fsub+0x23c>
 8000fb0:	2120      	movs	r1, #32
 8000fb2:	1bc9      	subs	r1, r1, r7
 8000fb4:	001a      	movs	r2, r3
 8000fb6:	408b      	lsls	r3, r1
 8000fb8:	40fa      	lsrs	r2, r7
 8000fba:	1e59      	subs	r1, r3, #1
 8000fbc:	418b      	sbcs	r3, r1
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	0005      	movs	r5, r0
 8000fc2:	1ab3      	subs	r3, r6, r2
 8000fc4:	e743      	b.n	8000e4e <__aeabi_fsub+0xca>
 8000fc6:	2d00      	cmp	r5, #0
 8000fc8:	d123      	bne.n	8001012 <__aeabi_fsub+0x28e>
 8000fca:	22ff      	movs	r2, #255	@ 0xff
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d09b      	beq.n	8000f08 <__aeabi_fsub+0x184>
 8000fd0:	1e51      	subs	r1, r2, #1
 8000fd2:	2a01      	cmp	r2, #1
 8000fd4:	d0d6      	beq.n	8000f84 <__aeabi_fsub+0x200>
 8000fd6:	2aff      	cmp	r2, #255	@ 0xff
 8000fd8:	d01b      	beq.n	8001012 <__aeabi_fsub+0x28e>
 8000fda:	291b      	cmp	r1, #27
 8000fdc:	dd2c      	ble.n	8001038 <__aeabi_fsub+0x2b4>
 8000fde:	0002      	movs	r2, r0
 8000fe0:	1c73      	adds	r3, r6, #1
 8000fe2:	e73a      	b.n	8000e5a <__aeabi_fsub+0xd6>
 8000fe4:	2aff      	cmp	r2, #255	@ 0xff
 8000fe6:	d088      	beq.n	8000efa <__aeabi_fsub+0x176>
 8000fe8:	199b      	adds	r3, r3, r6
 8000fea:	085b      	lsrs	r3, r3, #1
 8000fec:	0759      	lsls	r1, r3, #29
 8000fee:	d000      	beq.n	8000ff2 <__aeabi_fsub+0x26e>
 8000ff0:	e733      	b.n	8000e5a <__aeabi_fsub+0xd6>
 8000ff2:	08db      	lsrs	r3, r3, #3
 8000ff4:	e76e      	b.n	8000ed4 <__aeabi_fsub+0x150>
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d110      	bne.n	800101c <__aeabi_fsub+0x298>
 8000ffa:	2e00      	cmp	r6, #0
 8000ffc:	d043      	beq.n	8001086 <__aeabi_fsub+0x302>
 8000ffe:	2401      	movs	r4, #1
 8001000:	0033      	movs	r3, r6
 8001002:	400c      	ands	r4, r1
 8001004:	e706      	b.n	8000e14 <__aeabi_fsub+0x90>
 8001006:	2401      	movs	r4, #1
 8001008:	1af7      	subs	r7, r6, r3
 800100a:	400c      	ands	r4, r1
 800100c:	e784      	b.n	8000f18 <__aeabi_fsub+0x194>
 800100e:	2b00      	cmp	r3, #0
 8001010:	d104      	bne.n	800101c <__aeabi_fsub+0x298>
 8001012:	0033      	movs	r3, r6
 8001014:	e6fe      	b.n	8000e14 <__aeabi_fsub+0x90>
 8001016:	2501      	movs	r5, #1
 8001018:	1b9b      	subs	r3, r3, r6
 800101a:	e718      	b.n	8000e4e <__aeabi_fsub+0xca>
 800101c:	2e00      	cmp	r6, #0
 800101e:	d100      	bne.n	8001022 <__aeabi_fsub+0x29e>
 8001020:	e6f8      	b.n	8000e14 <__aeabi_fsub+0x90>
 8001022:	2280      	movs	r2, #128	@ 0x80
 8001024:	03d2      	lsls	r2, r2, #15
 8001026:	4297      	cmp	r7, r2
 8001028:	d304      	bcc.n	8001034 <__aeabi_fsub+0x2b0>
 800102a:	4594      	cmp	ip, r2
 800102c:	d202      	bcs.n	8001034 <__aeabi_fsub+0x2b0>
 800102e:	2401      	movs	r4, #1
 8001030:	0033      	movs	r3, r6
 8001032:	400c      	ands	r4, r1
 8001034:	08db      	lsrs	r3, r3, #3
 8001036:	e6f1      	b.n	8000e1c <__aeabi_fsub+0x98>
 8001038:	001a      	movs	r2, r3
 800103a:	2520      	movs	r5, #32
 800103c:	40ca      	lsrs	r2, r1
 800103e:	1a69      	subs	r1, r5, r1
 8001040:	408b      	lsls	r3, r1
 8001042:	1e59      	subs	r1, r3, #1
 8001044:	418b      	sbcs	r3, r1
 8001046:	4313      	orrs	r3, r2
 8001048:	0005      	movs	r5, r0
 800104a:	199b      	adds	r3, r3, r6
 800104c:	e750      	b.n	8000ef0 <__aeabi_fsub+0x16c>
 800104e:	2e00      	cmp	r6, #0
 8001050:	d094      	beq.n	8000f7c <__aeabi_fsub+0x1f8>
 8001052:	2401      	movs	r4, #1
 8001054:	0033      	movs	r3, r6
 8001056:	400c      	ands	r4, r1
 8001058:	e73a      	b.n	8000ed0 <__aeabi_fsub+0x14c>
 800105a:	000c      	movs	r4, r1
 800105c:	2501      	movs	r5, #1
 800105e:	1af3      	subs	r3, r6, r3
 8001060:	e6f5      	b.n	8000e4e <__aeabi_fsub+0xca>
 8001062:	0033      	movs	r3, r6
 8001064:	e734      	b.n	8000ed0 <__aeabi_fsub+0x14c>
 8001066:	199b      	adds	r3, r3, r6
 8001068:	2200      	movs	r2, #0
 800106a:	0159      	lsls	r1, r3, #5
 800106c:	d5c1      	bpl.n	8000ff2 <__aeabi_fsub+0x26e>
 800106e:	4a15      	ldr	r2, [pc, #84]	@ (80010c4 <__aeabi_fsub+0x340>)
 8001070:	4013      	ands	r3, r2
 8001072:	08db      	lsrs	r3, r3, #3
 8001074:	2201      	movs	r2, #1
 8001076:	e72d      	b.n	8000ed4 <__aeabi_fsub+0x150>
 8001078:	2a00      	cmp	r2, #0
 800107a:	d100      	bne.n	800107e <__aeabi_fsub+0x2fa>
 800107c:	e77e      	b.n	8000f7c <__aeabi_fsub+0x1f8>
 800107e:	0013      	movs	r3, r2
 8001080:	2200      	movs	r2, #0
 8001082:	08db      	lsrs	r3, r3, #3
 8001084:	e726      	b.n	8000ed4 <__aeabi_fsub+0x150>
 8001086:	2380      	movs	r3, #128	@ 0x80
 8001088:	2400      	movs	r4, #0
 800108a:	20ff      	movs	r0, #255	@ 0xff
 800108c:	03db      	lsls	r3, r3, #15
 800108e:	e6f1      	b.n	8000e74 <__aeabi_fsub+0xf0>
 8001090:	2a00      	cmp	r2, #0
 8001092:	d100      	bne.n	8001096 <__aeabi_fsub+0x312>
 8001094:	e756      	b.n	8000f44 <__aeabi_fsub+0x1c0>
 8001096:	1b47      	subs	r7, r0, r5
 8001098:	003a      	movs	r2, r7
 800109a:	2d00      	cmp	r5, #0
 800109c:	d100      	bne.n	80010a0 <__aeabi_fsub+0x31c>
 800109e:	e730      	b.n	8000f02 <__aeabi_fsub+0x17e>
 80010a0:	2280      	movs	r2, #128	@ 0x80
 80010a2:	04d2      	lsls	r2, r2, #19
 80010a4:	000c      	movs	r4, r1
 80010a6:	4313      	orrs	r3, r2
 80010a8:	e77f      	b.n	8000faa <__aeabi_fsub+0x226>
 80010aa:	2a00      	cmp	r2, #0
 80010ac:	d100      	bne.n	80010b0 <__aeabi_fsub+0x32c>
 80010ae:	e701      	b.n	8000eb4 <__aeabi_fsub+0x130>
 80010b0:	1b41      	subs	r1, r0, r5
 80010b2:	2d00      	cmp	r5, #0
 80010b4:	d101      	bne.n	80010ba <__aeabi_fsub+0x336>
 80010b6:	000a      	movs	r2, r1
 80010b8:	e788      	b.n	8000fcc <__aeabi_fsub+0x248>
 80010ba:	2280      	movs	r2, #128	@ 0x80
 80010bc:	04d2      	lsls	r2, r2, #19
 80010be:	4313      	orrs	r3, r2
 80010c0:	e78b      	b.n	8000fda <__aeabi_fsub+0x256>
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	fbffffff 	.word	0xfbffffff
 80010c8:	7dffffff 	.word	0x7dffffff

080010cc <__aeabi_f2iz>:
 80010cc:	0241      	lsls	r1, r0, #9
 80010ce:	0042      	lsls	r2, r0, #1
 80010d0:	0fc3      	lsrs	r3, r0, #31
 80010d2:	0a49      	lsrs	r1, r1, #9
 80010d4:	2000      	movs	r0, #0
 80010d6:	0e12      	lsrs	r2, r2, #24
 80010d8:	2a7e      	cmp	r2, #126	@ 0x7e
 80010da:	dd03      	ble.n	80010e4 <__aeabi_f2iz+0x18>
 80010dc:	2a9d      	cmp	r2, #157	@ 0x9d
 80010de:	dd02      	ble.n	80010e6 <__aeabi_f2iz+0x1a>
 80010e0:	4a09      	ldr	r2, [pc, #36]	@ (8001108 <__aeabi_f2iz+0x3c>)
 80010e2:	1898      	adds	r0, r3, r2
 80010e4:	4770      	bx	lr
 80010e6:	2080      	movs	r0, #128	@ 0x80
 80010e8:	0400      	lsls	r0, r0, #16
 80010ea:	4301      	orrs	r1, r0
 80010ec:	2a95      	cmp	r2, #149	@ 0x95
 80010ee:	dc07      	bgt.n	8001100 <__aeabi_f2iz+0x34>
 80010f0:	2096      	movs	r0, #150	@ 0x96
 80010f2:	1a82      	subs	r2, r0, r2
 80010f4:	40d1      	lsrs	r1, r2
 80010f6:	4248      	negs	r0, r1
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1f3      	bne.n	80010e4 <__aeabi_f2iz+0x18>
 80010fc:	0008      	movs	r0, r1
 80010fe:	e7f1      	b.n	80010e4 <__aeabi_f2iz+0x18>
 8001100:	3a96      	subs	r2, #150	@ 0x96
 8001102:	4091      	lsls	r1, r2
 8001104:	e7f7      	b.n	80010f6 <__aeabi_f2iz+0x2a>
 8001106:	46c0      	nop			@ (mov r8, r8)
 8001108:	7fffffff 	.word	0x7fffffff

0800110c <__aeabi_ui2f>:
 800110c:	b570      	push	{r4, r5, r6, lr}
 800110e:	1e04      	subs	r4, r0, #0
 8001110:	d00e      	beq.n	8001130 <__aeabi_ui2f+0x24>
 8001112:	f001 ff1f 	bl	8002f54 <__clzsi2>
 8001116:	239e      	movs	r3, #158	@ 0x9e
 8001118:	0001      	movs	r1, r0
 800111a:	1a1b      	subs	r3, r3, r0
 800111c:	2b96      	cmp	r3, #150	@ 0x96
 800111e:	dc0c      	bgt.n	800113a <__aeabi_ui2f+0x2e>
 8001120:	2808      	cmp	r0, #8
 8001122:	d02f      	beq.n	8001184 <__aeabi_ui2f+0x78>
 8001124:	3908      	subs	r1, #8
 8001126:	408c      	lsls	r4, r1
 8001128:	0264      	lsls	r4, r4, #9
 800112a:	0a64      	lsrs	r4, r4, #9
 800112c:	b2d8      	uxtb	r0, r3
 800112e:	e001      	b.n	8001134 <__aeabi_ui2f+0x28>
 8001130:	2000      	movs	r0, #0
 8001132:	2400      	movs	r4, #0
 8001134:	05c0      	lsls	r0, r0, #23
 8001136:	4320      	orrs	r0, r4
 8001138:	bd70      	pop	{r4, r5, r6, pc}
 800113a:	2b99      	cmp	r3, #153	@ 0x99
 800113c:	dc16      	bgt.n	800116c <__aeabi_ui2f+0x60>
 800113e:	1f42      	subs	r2, r0, #5
 8001140:	2805      	cmp	r0, #5
 8001142:	d000      	beq.n	8001146 <__aeabi_ui2f+0x3a>
 8001144:	4094      	lsls	r4, r2
 8001146:	0022      	movs	r2, r4
 8001148:	4810      	ldr	r0, [pc, #64]	@ (800118c <__aeabi_ui2f+0x80>)
 800114a:	4002      	ands	r2, r0
 800114c:	0765      	lsls	r5, r4, #29
 800114e:	d009      	beq.n	8001164 <__aeabi_ui2f+0x58>
 8001150:	250f      	movs	r5, #15
 8001152:	402c      	ands	r4, r5
 8001154:	2c04      	cmp	r4, #4
 8001156:	d005      	beq.n	8001164 <__aeabi_ui2f+0x58>
 8001158:	3204      	adds	r2, #4
 800115a:	0154      	lsls	r4, r2, #5
 800115c:	d502      	bpl.n	8001164 <__aeabi_ui2f+0x58>
 800115e:	239f      	movs	r3, #159	@ 0x9f
 8001160:	4002      	ands	r2, r0
 8001162:	1a5b      	subs	r3, r3, r1
 8001164:	0192      	lsls	r2, r2, #6
 8001166:	0a54      	lsrs	r4, r2, #9
 8001168:	b2d8      	uxtb	r0, r3
 800116a:	e7e3      	b.n	8001134 <__aeabi_ui2f+0x28>
 800116c:	0002      	movs	r2, r0
 800116e:	0020      	movs	r0, r4
 8001170:	321b      	adds	r2, #27
 8001172:	4090      	lsls	r0, r2
 8001174:	0002      	movs	r2, r0
 8001176:	1e50      	subs	r0, r2, #1
 8001178:	4182      	sbcs	r2, r0
 800117a:	2005      	movs	r0, #5
 800117c:	1a40      	subs	r0, r0, r1
 800117e:	40c4      	lsrs	r4, r0
 8001180:	4314      	orrs	r4, r2
 8001182:	e7e0      	b.n	8001146 <__aeabi_ui2f+0x3a>
 8001184:	0264      	lsls	r4, r4, #9
 8001186:	2096      	movs	r0, #150	@ 0x96
 8001188:	0a64      	lsrs	r4, r4, #9
 800118a:	e7d3      	b.n	8001134 <__aeabi_ui2f+0x28>
 800118c:	fbffffff 	.word	0xfbffffff

08001190 <__aeabi_dadd>:
 8001190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001192:	4657      	mov	r7, sl
 8001194:	464e      	mov	r6, r9
 8001196:	4645      	mov	r5, r8
 8001198:	46de      	mov	lr, fp
 800119a:	b5e0      	push	{r5, r6, r7, lr}
 800119c:	b083      	sub	sp, #12
 800119e:	9000      	str	r0, [sp, #0]
 80011a0:	9101      	str	r1, [sp, #4]
 80011a2:	030c      	lsls	r4, r1, #12
 80011a4:	004f      	lsls	r7, r1, #1
 80011a6:	0fce      	lsrs	r6, r1, #31
 80011a8:	0a61      	lsrs	r1, r4, #9
 80011aa:	9c00      	ldr	r4, [sp, #0]
 80011ac:	031d      	lsls	r5, r3, #12
 80011ae:	0f64      	lsrs	r4, r4, #29
 80011b0:	430c      	orrs	r4, r1
 80011b2:	9900      	ldr	r1, [sp, #0]
 80011b4:	9200      	str	r2, [sp, #0]
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	00c8      	lsls	r0, r1, #3
 80011ba:	0059      	lsls	r1, r3, #1
 80011bc:	0d4b      	lsrs	r3, r1, #21
 80011be:	4699      	mov	r9, r3
 80011c0:	9a00      	ldr	r2, [sp, #0]
 80011c2:	9b01      	ldr	r3, [sp, #4]
 80011c4:	0a6d      	lsrs	r5, r5, #9
 80011c6:	0fd9      	lsrs	r1, r3, #31
 80011c8:	0f53      	lsrs	r3, r2, #29
 80011ca:	432b      	orrs	r3, r5
 80011cc:	469a      	mov	sl, r3
 80011ce:	9b00      	ldr	r3, [sp, #0]
 80011d0:	0d7f      	lsrs	r7, r7, #21
 80011d2:	00da      	lsls	r2, r3, #3
 80011d4:	4694      	mov	ip, r2
 80011d6:	464a      	mov	r2, r9
 80011d8:	46b0      	mov	r8, r6
 80011da:	1aba      	subs	r2, r7, r2
 80011dc:	428e      	cmp	r6, r1
 80011de:	d100      	bne.n	80011e2 <__aeabi_dadd+0x52>
 80011e0:	e0b0      	b.n	8001344 <__aeabi_dadd+0x1b4>
 80011e2:	2a00      	cmp	r2, #0
 80011e4:	dc00      	bgt.n	80011e8 <__aeabi_dadd+0x58>
 80011e6:	e078      	b.n	80012da <__aeabi_dadd+0x14a>
 80011e8:	4649      	mov	r1, r9
 80011ea:	2900      	cmp	r1, #0
 80011ec:	d100      	bne.n	80011f0 <__aeabi_dadd+0x60>
 80011ee:	e0e9      	b.n	80013c4 <__aeabi_dadd+0x234>
 80011f0:	49c9      	ldr	r1, [pc, #804]	@ (8001518 <__aeabi_dadd+0x388>)
 80011f2:	428f      	cmp	r7, r1
 80011f4:	d100      	bne.n	80011f8 <__aeabi_dadd+0x68>
 80011f6:	e195      	b.n	8001524 <__aeabi_dadd+0x394>
 80011f8:	2501      	movs	r5, #1
 80011fa:	2a38      	cmp	r2, #56	@ 0x38
 80011fc:	dc16      	bgt.n	800122c <__aeabi_dadd+0x9c>
 80011fe:	2180      	movs	r1, #128	@ 0x80
 8001200:	4653      	mov	r3, sl
 8001202:	0409      	lsls	r1, r1, #16
 8001204:	430b      	orrs	r3, r1
 8001206:	469a      	mov	sl, r3
 8001208:	2a1f      	cmp	r2, #31
 800120a:	dd00      	ble.n	800120e <__aeabi_dadd+0x7e>
 800120c:	e1e7      	b.n	80015de <__aeabi_dadd+0x44e>
 800120e:	2120      	movs	r1, #32
 8001210:	4655      	mov	r5, sl
 8001212:	1a8b      	subs	r3, r1, r2
 8001214:	4661      	mov	r1, ip
 8001216:	409d      	lsls	r5, r3
 8001218:	40d1      	lsrs	r1, r2
 800121a:	430d      	orrs	r5, r1
 800121c:	4661      	mov	r1, ip
 800121e:	4099      	lsls	r1, r3
 8001220:	1e4b      	subs	r3, r1, #1
 8001222:	4199      	sbcs	r1, r3
 8001224:	4653      	mov	r3, sl
 8001226:	40d3      	lsrs	r3, r2
 8001228:	430d      	orrs	r5, r1
 800122a:	1ae4      	subs	r4, r4, r3
 800122c:	1b45      	subs	r5, r0, r5
 800122e:	42a8      	cmp	r0, r5
 8001230:	4180      	sbcs	r0, r0
 8001232:	4240      	negs	r0, r0
 8001234:	1a24      	subs	r4, r4, r0
 8001236:	0223      	lsls	r3, r4, #8
 8001238:	d400      	bmi.n	800123c <__aeabi_dadd+0xac>
 800123a:	e10f      	b.n	800145c <__aeabi_dadd+0x2cc>
 800123c:	0264      	lsls	r4, r4, #9
 800123e:	0a64      	lsrs	r4, r4, #9
 8001240:	2c00      	cmp	r4, #0
 8001242:	d100      	bne.n	8001246 <__aeabi_dadd+0xb6>
 8001244:	e139      	b.n	80014ba <__aeabi_dadd+0x32a>
 8001246:	0020      	movs	r0, r4
 8001248:	f001 fe84 	bl	8002f54 <__clzsi2>
 800124c:	0003      	movs	r3, r0
 800124e:	3b08      	subs	r3, #8
 8001250:	2120      	movs	r1, #32
 8001252:	0028      	movs	r0, r5
 8001254:	1aca      	subs	r2, r1, r3
 8001256:	40d0      	lsrs	r0, r2
 8001258:	409c      	lsls	r4, r3
 800125a:	0002      	movs	r2, r0
 800125c:	409d      	lsls	r5, r3
 800125e:	4322      	orrs	r2, r4
 8001260:	429f      	cmp	r7, r3
 8001262:	dd00      	ble.n	8001266 <__aeabi_dadd+0xd6>
 8001264:	e173      	b.n	800154e <__aeabi_dadd+0x3be>
 8001266:	1bd8      	subs	r0, r3, r7
 8001268:	3001      	adds	r0, #1
 800126a:	1a09      	subs	r1, r1, r0
 800126c:	002c      	movs	r4, r5
 800126e:	408d      	lsls	r5, r1
 8001270:	40c4      	lsrs	r4, r0
 8001272:	1e6b      	subs	r3, r5, #1
 8001274:	419d      	sbcs	r5, r3
 8001276:	0013      	movs	r3, r2
 8001278:	40c2      	lsrs	r2, r0
 800127a:	408b      	lsls	r3, r1
 800127c:	4325      	orrs	r5, r4
 800127e:	2700      	movs	r7, #0
 8001280:	0014      	movs	r4, r2
 8001282:	431d      	orrs	r5, r3
 8001284:	076b      	lsls	r3, r5, #29
 8001286:	d009      	beq.n	800129c <__aeabi_dadd+0x10c>
 8001288:	230f      	movs	r3, #15
 800128a:	402b      	ands	r3, r5
 800128c:	2b04      	cmp	r3, #4
 800128e:	d005      	beq.n	800129c <__aeabi_dadd+0x10c>
 8001290:	1d2b      	adds	r3, r5, #4
 8001292:	42ab      	cmp	r3, r5
 8001294:	41ad      	sbcs	r5, r5
 8001296:	426d      	negs	r5, r5
 8001298:	1964      	adds	r4, r4, r5
 800129a:	001d      	movs	r5, r3
 800129c:	0223      	lsls	r3, r4, #8
 800129e:	d400      	bmi.n	80012a2 <__aeabi_dadd+0x112>
 80012a0:	e12d      	b.n	80014fe <__aeabi_dadd+0x36e>
 80012a2:	4a9d      	ldr	r2, [pc, #628]	@ (8001518 <__aeabi_dadd+0x388>)
 80012a4:	3701      	adds	r7, #1
 80012a6:	4297      	cmp	r7, r2
 80012a8:	d100      	bne.n	80012ac <__aeabi_dadd+0x11c>
 80012aa:	e0d3      	b.n	8001454 <__aeabi_dadd+0x2c4>
 80012ac:	4646      	mov	r6, r8
 80012ae:	499b      	ldr	r1, [pc, #620]	@ (800151c <__aeabi_dadd+0x38c>)
 80012b0:	08ed      	lsrs	r5, r5, #3
 80012b2:	4021      	ands	r1, r4
 80012b4:	074a      	lsls	r2, r1, #29
 80012b6:	432a      	orrs	r2, r5
 80012b8:	057c      	lsls	r4, r7, #21
 80012ba:	024d      	lsls	r5, r1, #9
 80012bc:	0b2d      	lsrs	r5, r5, #12
 80012be:	0d64      	lsrs	r4, r4, #21
 80012c0:	0524      	lsls	r4, r4, #20
 80012c2:	432c      	orrs	r4, r5
 80012c4:	07f6      	lsls	r6, r6, #31
 80012c6:	4334      	orrs	r4, r6
 80012c8:	0010      	movs	r0, r2
 80012ca:	0021      	movs	r1, r4
 80012cc:	b003      	add	sp, #12
 80012ce:	bcf0      	pop	{r4, r5, r6, r7}
 80012d0:	46bb      	mov	fp, r7
 80012d2:	46b2      	mov	sl, r6
 80012d4:	46a9      	mov	r9, r5
 80012d6:	46a0      	mov	r8, r4
 80012d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012da:	2a00      	cmp	r2, #0
 80012dc:	d100      	bne.n	80012e0 <__aeabi_dadd+0x150>
 80012de:	e084      	b.n	80013ea <__aeabi_dadd+0x25a>
 80012e0:	464a      	mov	r2, r9
 80012e2:	1bd2      	subs	r2, r2, r7
 80012e4:	2f00      	cmp	r7, #0
 80012e6:	d000      	beq.n	80012ea <__aeabi_dadd+0x15a>
 80012e8:	e16d      	b.n	80015c6 <__aeabi_dadd+0x436>
 80012ea:	0025      	movs	r5, r4
 80012ec:	4305      	orrs	r5, r0
 80012ee:	d100      	bne.n	80012f2 <__aeabi_dadd+0x162>
 80012f0:	e127      	b.n	8001542 <__aeabi_dadd+0x3b2>
 80012f2:	1e56      	subs	r6, r2, #1
 80012f4:	2a01      	cmp	r2, #1
 80012f6:	d100      	bne.n	80012fa <__aeabi_dadd+0x16a>
 80012f8:	e23b      	b.n	8001772 <__aeabi_dadd+0x5e2>
 80012fa:	4d87      	ldr	r5, [pc, #540]	@ (8001518 <__aeabi_dadd+0x388>)
 80012fc:	42aa      	cmp	r2, r5
 80012fe:	d100      	bne.n	8001302 <__aeabi_dadd+0x172>
 8001300:	e26a      	b.n	80017d8 <__aeabi_dadd+0x648>
 8001302:	2501      	movs	r5, #1
 8001304:	2e38      	cmp	r6, #56	@ 0x38
 8001306:	dc12      	bgt.n	800132e <__aeabi_dadd+0x19e>
 8001308:	0032      	movs	r2, r6
 800130a:	2a1f      	cmp	r2, #31
 800130c:	dd00      	ble.n	8001310 <__aeabi_dadd+0x180>
 800130e:	e1f8      	b.n	8001702 <__aeabi_dadd+0x572>
 8001310:	2620      	movs	r6, #32
 8001312:	0025      	movs	r5, r4
 8001314:	1ab6      	subs	r6, r6, r2
 8001316:	0007      	movs	r7, r0
 8001318:	4653      	mov	r3, sl
 800131a:	40b0      	lsls	r0, r6
 800131c:	40d4      	lsrs	r4, r2
 800131e:	40b5      	lsls	r5, r6
 8001320:	40d7      	lsrs	r7, r2
 8001322:	1e46      	subs	r6, r0, #1
 8001324:	41b0      	sbcs	r0, r6
 8001326:	1b1b      	subs	r3, r3, r4
 8001328:	469a      	mov	sl, r3
 800132a:	433d      	orrs	r5, r7
 800132c:	4305      	orrs	r5, r0
 800132e:	4662      	mov	r2, ip
 8001330:	1b55      	subs	r5, r2, r5
 8001332:	45ac      	cmp	ip, r5
 8001334:	4192      	sbcs	r2, r2
 8001336:	4653      	mov	r3, sl
 8001338:	4252      	negs	r2, r2
 800133a:	000e      	movs	r6, r1
 800133c:	464f      	mov	r7, r9
 800133e:	4688      	mov	r8, r1
 8001340:	1a9c      	subs	r4, r3, r2
 8001342:	e778      	b.n	8001236 <__aeabi_dadd+0xa6>
 8001344:	2a00      	cmp	r2, #0
 8001346:	dc00      	bgt.n	800134a <__aeabi_dadd+0x1ba>
 8001348:	e08e      	b.n	8001468 <__aeabi_dadd+0x2d8>
 800134a:	4649      	mov	r1, r9
 800134c:	2900      	cmp	r1, #0
 800134e:	d175      	bne.n	800143c <__aeabi_dadd+0x2ac>
 8001350:	4661      	mov	r1, ip
 8001352:	4653      	mov	r3, sl
 8001354:	4319      	orrs	r1, r3
 8001356:	d100      	bne.n	800135a <__aeabi_dadd+0x1ca>
 8001358:	e0f6      	b.n	8001548 <__aeabi_dadd+0x3b8>
 800135a:	1e51      	subs	r1, r2, #1
 800135c:	2a01      	cmp	r2, #1
 800135e:	d100      	bne.n	8001362 <__aeabi_dadd+0x1d2>
 8001360:	e191      	b.n	8001686 <__aeabi_dadd+0x4f6>
 8001362:	4d6d      	ldr	r5, [pc, #436]	@ (8001518 <__aeabi_dadd+0x388>)
 8001364:	42aa      	cmp	r2, r5
 8001366:	d100      	bne.n	800136a <__aeabi_dadd+0x1da>
 8001368:	e0dc      	b.n	8001524 <__aeabi_dadd+0x394>
 800136a:	2501      	movs	r5, #1
 800136c:	2938      	cmp	r1, #56	@ 0x38
 800136e:	dc14      	bgt.n	800139a <__aeabi_dadd+0x20a>
 8001370:	000a      	movs	r2, r1
 8001372:	2a1f      	cmp	r2, #31
 8001374:	dd00      	ble.n	8001378 <__aeabi_dadd+0x1e8>
 8001376:	e1a2      	b.n	80016be <__aeabi_dadd+0x52e>
 8001378:	2120      	movs	r1, #32
 800137a:	4653      	mov	r3, sl
 800137c:	1a89      	subs	r1, r1, r2
 800137e:	408b      	lsls	r3, r1
 8001380:	001d      	movs	r5, r3
 8001382:	4663      	mov	r3, ip
 8001384:	40d3      	lsrs	r3, r2
 8001386:	431d      	orrs	r5, r3
 8001388:	4663      	mov	r3, ip
 800138a:	408b      	lsls	r3, r1
 800138c:	0019      	movs	r1, r3
 800138e:	1e4b      	subs	r3, r1, #1
 8001390:	4199      	sbcs	r1, r3
 8001392:	4653      	mov	r3, sl
 8001394:	40d3      	lsrs	r3, r2
 8001396:	430d      	orrs	r5, r1
 8001398:	18e4      	adds	r4, r4, r3
 800139a:	182d      	adds	r5, r5, r0
 800139c:	4285      	cmp	r5, r0
 800139e:	4180      	sbcs	r0, r0
 80013a0:	4240      	negs	r0, r0
 80013a2:	1824      	adds	r4, r4, r0
 80013a4:	0223      	lsls	r3, r4, #8
 80013a6:	d559      	bpl.n	800145c <__aeabi_dadd+0x2cc>
 80013a8:	4b5b      	ldr	r3, [pc, #364]	@ (8001518 <__aeabi_dadd+0x388>)
 80013aa:	3701      	adds	r7, #1
 80013ac:	429f      	cmp	r7, r3
 80013ae:	d051      	beq.n	8001454 <__aeabi_dadd+0x2c4>
 80013b0:	2101      	movs	r1, #1
 80013b2:	4b5a      	ldr	r3, [pc, #360]	@ (800151c <__aeabi_dadd+0x38c>)
 80013b4:	086a      	lsrs	r2, r5, #1
 80013b6:	401c      	ands	r4, r3
 80013b8:	4029      	ands	r1, r5
 80013ba:	430a      	orrs	r2, r1
 80013bc:	07e5      	lsls	r5, r4, #31
 80013be:	4315      	orrs	r5, r2
 80013c0:	0864      	lsrs	r4, r4, #1
 80013c2:	e75f      	b.n	8001284 <__aeabi_dadd+0xf4>
 80013c4:	4661      	mov	r1, ip
 80013c6:	4653      	mov	r3, sl
 80013c8:	4319      	orrs	r1, r3
 80013ca:	d100      	bne.n	80013ce <__aeabi_dadd+0x23e>
 80013cc:	e0bc      	b.n	8001548 <__aeabi_dadd+0x3b8>
 80013ce:	1e51      	subs	r1, r2, #1
 80013d0:	2a01      	cmp	r2, #1
 80013d2:	d100      	bne.n	80013d6 <__aeabi_dadd+0x246>
 80013d4:	e164      	b.n	80016a0 <__aeabi_dadd+0x510>
 80013d6:	4d50      	ldr	r5, [pc, #320]	@ (8001518 <__aeabi_dadd+0x388>)
 80013d8:	42aa      	cmp	r2, r5
 80013da:	d100      	bne.n	80013de <__aeabi_dadd+0x24e>
 80013dc:	e16a      	b.n	80016b4 <__aeabi_dadd+0x524>
 80013de:	2501      	movs	r5, #1
 80013e0:	2938      	cmp	r1, #56	@ 0x38
 80013e2:	dd00      	ble.n	80013e6 <__aeabi_dadd+0x256>
 80013e4:	e722      	b.n	800122c <__aeabi_dadd+0x9c>
 80013e6:	000a      	movs	r2, r1
 80013e8:	e70e      	b.n	8001208 <__aeabi_dadd+0x78>
 80013ea:	4a4d      	ldr	r2, [pc, #308]	@ (8001520 <__aeabi_dadd+0x390>)
 80013ec:	1c7d      	adds	r5, r7, #1
 80013ee:	4215      	tst	r5, r2
 80013f0:	d000      	beq.n	80013f4 <__aeabi_dadd+0x264>
 80013f2:	e0d0      	b.n	8001596 <__aeabi_dadd+0x406>
 80013f4:	0025      	movs	r5, r4
 80013f6:	4662      	mov	r2, ip
 80013f8:	4653      	mov	r3, sl
 80013fa:	4305      	orrs	r5, r0
 80013fc:	431a      	orrs	r2, r3
 80013fe:	2f00      	cmp	r7, #0
 8001400:	d000      	beq.n	8001404 <__aeabi_dadd+0x274>
 8001402:	e137      	b.n	8001674 <__aeabi_dadd+0x4e4>
 8001404:	2d00      	cmp	r5, #0
 8001406:	d100      	bne.n	800140a <__aeabi_dadd+0x27a>
 8001408:	e1a8      	b.n	800175c <__aeabi_dadd+0x5cc>
 800140a:	2a00      	cmp	r2, #0
 800140c:	d100      	bne.n	8001410 <__aeabi_dadd+0x280>
 800140e:	e16a      	b.n	80016e6 <__aeabi_dadd+0x556>
 8001410:	4663      	mov	r3, ip
 8001412:	1ac5      	subs	r5, r0, r3
 8001414:	4653      	mov	r3, sl
 8001416:	1ae2      	subs	r2, r4, r3
 8001418:	42a8      	cmp	r0, r5
 800141a:	419b      	sbcs	r3, r3
 800141c:	425b      	negs	r3, r3
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	021a      	lsls	r2, r3, #8
 8001422:	d400      	bmi.n	8001426 <__aeabi_dadd+0x296>
 8001424:	e203      	b.n	800182e <__aeabi_dadd+0x69e>
 8001426:	4663      	mov	r3, ip
 8001428:	1a1d      	subs	r5, r3, r0
 800142a:	45ac      	cmp	ip, r5
 800142c:	4192      	sbcs	r2, r2
 800142e:	4653      	mov	r3, sl
 8001430:	4252      	negs	r2, r2
 8001432:	1b1c      	subs	r4, r3, r4
 8001434:	000e      	movs	r6, r1
 8001436:	4688      	mov	r8, r1
 8001438:	1aa4      	subs	r4, r4, r2
 800143a:	e723      	b.n	8001284 <__aeabi_dadd+0xf4>
 800143c:	4936      	ldr	r1, [pc, #216]	@ (8001518 <__aeabi_dadd+0x388>)
 800143e:	428f      	cmp	r7, r1
 8001440:	d070      	beq.n	8001524 <__aeabi_dadd+0x394>
 8001442:	2501      	movs	r5, #1
 8001444:	2a38      	cmp	r2, #56	@ 0x38
 8001446:	dca8      	bgt.n	800139a <__aeabi_dadd+0x20a>
 8001448:	2180      	movs	r1, #128	@ 0x80
 800144a:	4653      	mov	r3, sl
 800144c:	0409      	lsls	r1, r1, #16
 800144e:	430b      	orrs	r3, r1
 8001450:	469a      	mov	sl, r3
 8001452:	e78e      	b.n	8001372 <__aeabi_dadd+0x1e2>
 8001454:	003c      	movs	r4, r7
 8001456:	2500      	movs	r5, #0
 8001458:	2200      	movs	r2, #0
 800145a:	e731      	b.n	80012c0 <__aeabi_dadd+0x130>
 800145c:	2307      	movs	r3, #7
 800145e:	402b      	ands	r3, r5
 8001460:	2b00      	cmp	r3, #0
 8001462:	d000      	beq.n	8001466 <__aeabi_dadd+0x2d6>
 8001464:	e710      	b.n	8001288 <__aeabi_dadd+0xf8>
 8001466:	e093      	b.n	8001590 <__aeabi_dadd+0x400>
 8001468:	2a00      	cmp	r2, #0
 800146a:	d074      	beq.n	8001556 <__aeabi_dadd+0x3c6>
 800146c:	464a      	mov	r2, r9
 800146e:	1bd2      	subs	r2, r2, r7
 8001470:	2f00      	cmp	r7, #0
 8001472:	d100      	bne.n	8001476 <__aeabi_dadd+0x2e6>
 8001474:	e0c7      	b.n	8001606 <__aeabi_dadd+0x476>
 8001476:	4928      	ldr	r1, [pc, #160]	@ (8001518 <__aeabi_dadd+0x388>)
 8001478:	4589      	cmp	r9, r1
 800147a:	d100      	bne.n	800147e <__aeabi_dadd+0x2ee>
 800147c:	e185      	b.n	800178a <__aeabi_dadd+0x5fa>
 800147e:	2501      	movs	r5, #1
 8001480:	2a38      	cmp	r2, #56	@ 0x38
 8001482:	dc12      	bgt.n	80014aa <__aeabi_dadd+0x31a>
 8001484:	2180      	movs	r1, #128	@ 0x80
 8001486:	0409      	lsls	r1, r1, #16
 8001488:	430c      	orrs	r4, r1
 800148a:	2a1f      	cmp	r2, #31
 800148c:	dd00      	ble.n	8001490 <__aeabi_dadd+0x300>
 800148e:	e1ab      	b.n	80017e8 <__aeabi_dadd+0x658>
 8001490:	2120      	movs	r1, #32
 8001492:	0025      	movs	r5, r4
 8001494:	1a89      	subs	r1, r1, r2
 8001496:	0007      	movs	r7, r0
 8001498:	4088      	lsls	r0, r1
 800149a:	408d      	lsls	r5, r1
 800149c:	40d7      	lsrs	r7, r2
 800149e:	1e41      	subs	r1, r0, #1
 80014a0:	4188      	sbcs	r0, r1
 80014a2:	40d4      	lsrs	r4, r2
 80014a4:	433d      	orrs	r5, r7
 80014a6:	4305      	orrs	r5, r0
 80014a8:	44a2      	add	sl, r4
 80014aa:	4465      	add	r5, ip
 80014ac:	4565      	cmp	r5, ip
 80014ae:	4192      	sbcs	r2, r2
 80014b0:	4252      	negs	r2, r2
 80014b2:	4452      	add	r2, sl
 80014b4:	0014      	movs	r4, r2
 80014b6:	464f      	mov	r7, r9
 80014b8:	e774      	b.n	80013a4 <__aeabi_dadd+0x214>
 80014ba:	0028      	movs	r0, r5
 80014bc:	f001 fd4a 	bl	8002f54 <__clzsi2>
 80014c0:	0003      	movs	r3, r0
 80014c2:	3318      	adds	r3, #24
 80014c4:	2b1f      	cmp	r3, #31
 80014c6:	dc00      	bgt.n	80014ca <__aeabi_dadd+0x33a>
 80014c8:	e6c2      	b.n	8001250 <__aeabi_dadd+0xc0>
 80014ca:	002a      	movs	r2, r5
 80014cc:	3808      	subs	r0, #8
 80014ce:	4082      	lsls	r2, r0
 80014d0:	429f      	cmp	r7, r3
 80014d2:	dd00      	ble.n	80014d6 <__aeabi_dadd+0x346>
 80014d4:	e0a9      	b.n	800162a <__aeabi_dadd+0x49a>
 80014d6:	1bdb      	subs	r3, r3, r7
 80014d8:	1c58      	adds	r0, r3, #1
 80014da:	281f      	cmp	r0, #31
 80014dc:	dc00      	bgt.n	80014e0 <__aeabi_dadd+0x350>
 80014de:	e1ac      	b.n	800183a <__aeabi_dadd+0x6aa>
 80014e0:	0015      	movs	r5, r2
 80014e2:	3b1f      	subs	r3, #31
 80014e4:	40dd      	lsrs	r5, r3
 80014e6:	2820      	cmp	r0, #32
 80014e8:	d005      	beq.n	80014f6 <__aeabi_dadd+0x366>
 80014ea:	2340      	movs	r3, #64	@ 0x40
 80014ec:	1a1b      	subs	r3, r3, r0
 80014ee:	409a      	lsls	r2, r3
 80014f0:	1e53      	subs	r3, r2, #1
 80014f2:	419a      	sbcs	r2, r3
 80014f4:	4315      	orrs	r5, r2
 80014f6:	2307      	movs	r3, #7
 80014f8:	2700      	movs	r7, #0
 80014fa:	402b      	ands	r3, r5
 80014fc:	e7b0      	b.n	8001460 <__aeabi_dadd+0x2d0>
 80014fe:	08ed      	lsrs	r5, r5, #3
 8001500:	4b05      	ldr	r3, [pc, #20]	@ (8001518 <__aeabi_dadd+0x388>)
 8001502:	0762      	lsls	r2, r4, #29
 8001504:	432a      	orrs	r2, r5
 8001506:	08e4      	lsrs	r4, r4, #3
 8001508:	429f      	cmp	r7, r3
 800150a:	d00f      	beq.n	800152c <__aeabi_dadd+0x39c>
 800150c:	0324      	lsls	r4, r4, #12
 800150e:	0b25      	lsrs	r5, r4, #12
 8001510:	057c      	lsls	r4, r7, #21
 8001512:	0d64      	lsrs	r4, r4, #21
 8001514:	e6d4      	b.n	80012c0 <__aeabi_dadd+0x130>
 8001516:	46c0      	nop			@ (mov r8, r8)
 8001518:	000007ff 	.word	0x000007ff
 800151c:	ff7fffff 	.word	0xff7fffff
 8001520:	000007fe 	.word	0x000007fe
 8001524:	08c0      	lsrs	r0, r0, #3
 8001526:	0762      	lsls	r2, r4, #29
 8001528:	4302      	orrs	r2, r0
 800152a:	08e4      	lsrs	r4, r4, #3
 800152c:	0013      	movs	r3, r2
 800152e:	4323      	orrs	r3, r4
 8001530:	d100      	bne.n	8001534 <__aeabi_dadd+0x3a4>
 8001532:	e186      	b.n	8001842 <__aeabi_dadd+0x6b2>
 8001534:	2580      	movs	r5, #128	@ 0x80
 8001536:	032d      	lsls	r5, r5, #12
 8001538:	4325      	orrs	r5, r4
 800153a:	032d      	lsls	r5, r5, #12
 800153c:	4cc3      	ldr	r4, [pc, #780]	@ (800184c <__aeabi_dadd+0x6bc>)
 800153e:	0b2d      	lsrs	r5, r5, #12
 8001540:	e6be      	b.n	80012c0 <__aeabi_dadd+0x130>
 8001542:	4660      	mov	r0, ip
 8001544:	4654      	mov	r4, sl
 8001546:	000e      	movs	r6, r1
 8001548:	0017      	movs	r7, r2
 800154a:	08c5      	lsrs	r5, r0, #3
 800154c:	e7d8      	b.n	8001500 <__aeabi_dadd+0x370>
 800154e:	4cc0      	ldr	r4, [pc, #768]	@ (8001850 <__aeabi_dadd+0x6c0>)
 8001550:	1aff      	subs	r7, r7, r3
 8001552:	4014      	ands	r4, r2
 8001554:	e696      	b.n	8001284 <__aeabi_dadd+0xf4>
 8001556:	4abf      	ldr	r2, [pc, #764]	@ (8001854 <__aeabi_dadd+0x6c4>)
 8001558:	1c79      	adds	r1, r7, #1
 800155a:	4211      	tst	r1, r2
 800155c:	d16b      	bne.n	8001636 <__aeabi_dadd+0x4a6>
 800155e:	0022      	movs	r2, r4
 8001560:	4302      	orrs	r2, r0
 8001562:	2f00      	cmp	r7, #0
 8001564:	d000      	beq.n	8001568 <__aeabi_dadd+0x3d8>
 8001566:	e0db      	b.n	8001720 <__aeabi_dadd+0x590>
 8001568:	2a00      	cmp	r2, #0
 800156a:	d100      	bne.n	800156e <__aeabi_dadd+0x3de>
 800156c:	e12d      	b.n	80017ca <__aeabi_dadd+0x63a>
 800156e:	4662      	mov	r2, ip
 8001570:	4653      	mov	r3, sl
 8001572:	431a      	orrs	r2, r3
 8001574:	d100      	bne.n	8001578 <__aeabi_dadd+0x3e8>
 8001576:	e0b6      	b.n	80016e6 <__aeabi_dadd+0x556>
 8001578:	4663      	mov	r3, ip
 800157a:	18c5      	adds	r5, r0, r3
 800157c:	4285      	cmp	r5, r0
 800157e:	4180      	sbcs	r0, r0
 8001580:	4454      	add	r4, sl
 8001582:	4240      	negs	r0, r0
 8001584:	1824      	adds	r4, r4, r0
 8001586:	0223      	lsls	r3, r4, #8
 8001588:	d502      	bpl.n	8001590 <__aeabi_dadd+0x400>
 800158a:	000f      	movs	r7, r1
 800158c:	4bb0      	ldr	r3, [pc, #704]	@ (8001850 <__aeabi_dadd+0x6c0>)
 800158e:	401c      	ands	r4, r3
 8001590:	003a      	movs	r2, r7
 8001592:	0028      	movs	r0, r5
 8001594:	e7d8      	b.n	8001548 <__aeabi_dadd+0x3b8>
 8001596:	4662      	mov	r2, ip
 8001598:	1a85      	subs	r5, r0, r2
 800159a:	42a8      	cmp	r0, r5
 800159c:	4192      	sbcs	r2, r2
 800159e:	4653      	mov	r3, sl
 80015a0:	4252      	negs	r2, r2
 80015a2:	4691      	mov	r9, r2
 80015a4:	1ae3      	subs	r3, r4, r3
 80015a6:	001a      	movs	r2, r3
 80015a8:	464b      	mov	r3, r9
 80015aa:	1ad2      	subs	r2, r2, r3
 80015ac:	0013      	movs	r3, r2
 80015ae:	4691      	mov	r9, r2
 80015b0:	021a      	lsls	r2, r3, #8
 80015b2:	d454      	bmi.n	800165e <__aeabi_dadd+0x4ce>
 80015b4:	464a      	mov	r2, r9
 80015b6:	464c      	mov	r4, r9
 80015b8:	432a      	orrs	r2, r5
 80015ba:	d000      	beq.n	80015be <__aeabi_dadd+0x42e>
 80015bc:	e640      	b.n	8001240 <__aeabi_dadd+0xb0>
 80015be:	2600      	movs	r6, #0
 80015c0:	2400      	movs	r4, #0
 80015c2:	2500      	movs	r5, #0
 80015c4:	e67c      	b.n	80012c0 <__aeabi_dadd+0x130>
 80015c6:	4da1      	ldr	r5, [pc, #644]	@ (800184c <__aeabi_dadd+0x6bc>)
 80015c8:	45a9      	cmp	r9, r5
 80015ca:	d100      	bne.n	80015ce <__aeabi_dadd+0x43e>
 80015cc:	e090      	b.n	80016f0 <__aeabi_dadd+0x560>
 80015ce:	2501      	movs	r5, #1
 80015d0:	2a38      	cmp	r2, #56	@ 0x38
 80015d2:	dd00      	ble.n	80015d6 <__aeabi_dadd+0x446>
 80015d4:	e6ab      	b.n	800132e <__aeabi_dadd+0x19e>
 80015d6:	2580      	movs	r5, #128	@ 0x80
 80015d8:	042d      	lsls	r5, r5, #16
 80015da:	432c      	orrs	r4, r5
 80015dc:	e695      	b.n	800130a <__aeabi_dadd+0x17a>
 80015de:	0011      	movs	r1, r2
 80015e0:	4655      	mov	r5, sl
 80015e2:	3920      	subs	r1, #32
 80015e4:	40cd      	lsrs	r5, r1
 80015e6:	46a9      	mov	r9, r5
 80015e8:	2a20      	cmp	r2, #32
 80015ea:	d006      	beq.n	80015fa <__aeabi_dadd+0x46a>
 80015ec:	2140      	movs	r1, #64	@ 0x40
 80015ee:	4653      	mov	r3, sl
 80015f0:	1a8a      	subs	r2, r1, r2
 80015f2:	4093      	lsls	r3, r2
 80015f4:	4662      	mov	r2, ip
 80015f6:	431a      	orrs	r2, r3
 80015f8:	4694      	mov	ip, r2
 80015fa:	4665      	mov	r5, ip
 80015fc:	1e6b      	subs	r3, r5, #1
 80015fe:	419d      	sbcs	r5, r3
 8001600:	464b      	mov	r3, r9
 8001602:	431d      	orrs	r5, r3
 8001604:	e612      	b.n	800122c <__aeabi_dadd+0x9c>
 8001606:	0021      	movs	r1, r4
 8001608:	4301      	orrs	r1, r0
 800160a:	d100      	bne.n	800160e <__aeabi_dadd+0x47e>
 800160c:	e0c4      	b.n	8001798 <__aeabi_dadd+0x608>
 800160e:	1e51      	subs	r1, r2, #1
 8001610:	2a01      	cmp	r2, #1
 8001612:	d100      	bne.n	8001616 <__aeabi_dadd+0x486>
 8001614:	e0fb      	b.n	800180e <__aeabi_dadd+0x67e>
 8001616:	4d8d      	ldr	r5, [pc, #564]	@ (800184c <__aeabi_dadd+0x6bc>)
 8001618:	42aa      	cmp	r2, r5
 800161a:	d100      	bne.n	800161e <__aeabi_dadd+0x48e>
 800161c:	e0b5      	b.n	800178a <__aeabi_dadd+0x5fa>
 800161e:	2501      	movs	r5, #1
 8001620:	2938      	cmp	r1, #56	@ 0x38
 8001622:	dd00      	ble.n	8001626 <__aeabi_dadd+0x496>
 8001624:	e741      	b.n	80014aa <__aeabi_dadd+0x31a>
 8001626:	000a      	movs	r2, r1
 8001628:	e72f      	b.n	800148a <__aeabi_dadd+0x2fa>
 800162a:	4c89      	ldr	r4, [pc, #548]	@ (8001850 <__aeabi_dadd+0x6c0>)
 800162c:	1aff      	subs	r7, r7, r3
 800162e:	4014      	ands	r4, r2
 8001630:	0762      	lsls	r2, r4, #29
 8001632:	08e4      	lsrs	r4, r4, #3
 8001634:	e76a      	b.n	800150c <__aeabi_dadd+0x37c>
 8001636:	4a85      	ldr	r2, [pc, #532]	@ (800184c <__aeabi_dadd+0x6bc>)
 8001638:	4291      	cmp	r1, r2
 800163a:	d100      	bne.n	800163e <__aeabi_dadd+0x4ae>
 800163c:	e0e3      	b.n	8001806 <__aeabi_dadd+0x676>
 800163e:	4663      	mov	r3, ip
 8001640:	18c2      	adds	r2, r0, r3
 8001642:	4282      	cmp	r2, r0
 8001644:	4180      	sbcs	r0, r0
 8001646:	0023      	movs	r3, r4
 8001648:	4240      	negs	r0, r0
 800164a:	4453      	add	r3, sl
 800164c:	181b      	adds	r3, r3, r0
 800164e:	07dd      	lsls	r5, r3, #31
 8001650:	085c      	lsrs	r4, r3, #1
 8001652:	2307      	movs	r3, #7
 8001654:	0852      	lsrs	r2, r2, #1
 8001656:	4315      	orrs	r5, r2
 8001658:	000f      	movs	r7, r1
 800165a:	402b      	ands	r3, r5
 800165c:	e700      	b.n	8001460 <__aeabi_dadd+0x2d0>
 800165e:	4663      	mov	r3, ip
 8001660:	1a1d      	subs	r5, r3, r0
 8001662:	45ac      	cmp	ip, r5
 8001664:	4192      	sbcs	r2, r2
 8001666:	4653      	mov	r3, sl
 8001668:	4252      	negs	r2, r2
 800166a:	1b1c      	subs	r4, r3, r4
 800166c:	000e      	movs	r6, r1
 800166e:	4688      	mov	r8, r1
 8001670:	1aa4      	subs	r4, r4, r2
 8001672:	e5e5      	b.n	8001240 <__aeabi_dadd+0xb0>
 8001674:	2d00      	cmp	r5, #0
 8001676:	d000      	beq.n	800167a <__aeabi_dadd+0x4ea>
 8001678:	e091      	b.n	800179e <__aeabi_dadd+0x60e>
 800167a:	2a00      	cmp	r2, #0
 800167c:	d138      	bne.n	80016f0 <__aeabi_dadd+0x560>
 800167e:	2480      	movs	r4, #128	@ 0x80
 8001680:	2600      	movs	r6, #0
 8001682:	0324      	lsls	r4, r4, #12
 8001684:	e756      	b.n	8001534 <__aeabi_dadd+0x3a4>
 8001686:	4663      	mov	r3, ip
 8001688:	18c5      	adds	r5, r0, r3
 800168a:	4285      	cmp	r5, r0
 800168c:	4180      	sbcs	r0, r0
 800168e:	4454      	add	r4, sl
 8001690:	4240      	negs	r0, r0
 8001692:	1824      	adds	r4, r4, r0
 8001694:	2701      	movs	r7, #1
 8001696:	0223      	lsls	r3, r4, #8
 8001698:	d400      	bmi.n	800169c <__aeabi_dadd+0x50c>
 800169a:	e6df      	b.n	800145c <__aeabi_dadd+0x2cc>
 800169c:	2702      	movs	r7, #2
 800169e:	e687      	b.n	80013b0 <__aeabi_dadd+0x220>
 80016a0:	4663      	mov	r3, ip
 80016a2:	1ac5      	subs	r5, r0, r3
 80016a4:	42a8      	cmp	r0, r5
 80016a6:	4180      	sbcs	r0, r0
 80016a8:	4653      	mov	r3, sl
 80016aa:	4240      	negs	r0, r0
 80016ac:	1ae4      	subs	r4, r4, r3
 80016ae:	2701      	movs	r7, #1
 80016b0:	1a24      	subs	r4, r4, r0
 80016b2:	e5c0      	b.n	8001236 <__aeabi_dadd+0xa6>
 80016b4:	0762      	lsls	r2, r4, #29
 80016b6:	08c0      	lsrs	r0, r0, #3
 80016b8:	4302      	orrs	r2, r0
 80016ba:	08e4      	lsrs	r4, r4, #3
 80016bc:	e736      	b.n	800152c <__aeabi_dadd+0x39c>
 80016be:	0011      	movs	r1, r2
 80016c0:	4653      	mov	r3, sl
 80016c2:	3920      	subs	r1, #32
 80016c4:	40cb      	lsrs	r3, r1
 80016c6:	4699      	mov	r9, r3
 80016c8:	2a20      	cmp	r2, #32
 80016ca:	d006      	beq.n	80016da <__aeabi_dadd+0x54a>
 80016cc:	2140      	movs	r1, #64	@ 0x40
 80016ce:	4653      	mov	r3, sl
 80016d0:	1a8a      	subs	r2, r1, r2
 80016d2:	4093      	lsls	r3, r2
 80016d4:	4662      	mov	r2, ip
 80016d6:	431a      	orrs	r2, r3
 80016d8:	4694      	mov	ip, r2
 80016da:	4665      	mov	r5, ip
 80016dc:	1e6b      	subs	r3, r5, #1
 80016de:	419d      	sbcs	r5, r3
 80016e0:	464b      	mov	r3, r9
 80016e2:	431d      	orrs	r5, r3
 80016e4:	e659      	b.n	800139a <__aeabi_dadd+0x20a>
 80016e6:	0762      	lsls	r2, r4, #29
 80016e8:	08c0      	lsrs	r0, r0, #3
 80016ea:	4302      	orrs	r2, r0
 80016ec:	08e4      	lsrs	r4, r4, #3
 80016ee:	e70d      	b.n	800150c <__aeabi_dadd+0x37c>
 80016f0:	4653      	mov	r3, sl
 80016f2:	075a      	lsls	r2, r3, #29
 80016f4:	4663      	mov	r3, ip
 80016f6:	08d8      	lsrs	r0, r3, #3
 80016f8:	4653      	mov	r3, sl
 80016fa:	000e      	movs	r6, r1
 80016fc:	4302      	orrs	r2, r0
 80016fe:	08dc      	lsrs	r4, r3, #3
 8001700:	e714      	b.n	800152c <__aeabi_dadd+0x39c>
 8001702:	0015      	movs	r5, r2
 8001704:	0026      	movs	r6, r4
 8001706:	3d20      	subs	r5, #32
 8001708:	40ee      	lsrs	r6, r5
 800170a:	2a20      	cmp	r2, #32
 800170c:	d003      	beq.n	8001716 <__aeabi_dadd+0x586>
 800170e:	2540      	movs	r5, #64	@ 0x40
 8001710:	1aaa      	subs	r2, r5, r2
 8001712:	4094      	lsls	r4, r2
 8001714:	4320      	orrs	r0, r4
 8001716:	1e42      	subs	r2, r0, #1
 8001718:	4190      	sbcs	r0, r2
 800171a:	0005      	movs	r5, r0
 800171c:	4335      	orrs	r5, r6
 800171e:	e606      	b.n	800132e <__aeabi_dadd+0x19e>
 8001720:	2a00      	cmp	r2, #0
 8001722:	d07c      	beq.n	800181e <__aeabi_dadd+0x68e>
 8001724:	4662      	mov	r2, ip
 8001726:	4653      	mov	r3, sl
 8001728:	08c0      	lsrs	r0, r0, #3
 800172a:	431a      	orrs	r2, r3
 800172c:	d100      	bne.n	8001730 <__aeabi_dadd+0x5a0>
 800172e:	e6fa      	b.n	8001526 <__aeabi_dadd+0x396>
 8001730:	0762      	lsls	r2, r4, #29
 8001732:	4310      	orrs	r0, r2
 8001734:	2280      	movs	r2, #128	@ 0x80
 8001736:	08e4      	lsrs	r4, r4, #3
 8001738:	0312      	lsls	r2, r2, #12
 800173a:	4214      	tst	r4, r2
 800173c:	d008      	beq.n	8001750 <__aeabi_dadd+0x5c0>
 800173e:	08d9      	lsrs	r1, r3, #3
 8001740:	4211      	tst	r1, r2
 8001742:	d105      	bne.n	8001750 <__aeabi_dadd+0x5c0>
 8001744:	4663      	mov	r3, ip
 8001746:	08d8      	lsrs	r0, r3, #3
 8001748:	4653      	mov	r3, sl
 800174a:	000c      	movs	r4, r1
 800174c:	075b      	lsls	r3, r3, #29
 800174e:	4318      	orrs	r0, r3
 8001750:	0f42      	lsrs	r2, r0, #29
 8001752:	00c0      	lsls	r0, r0, #3
 8001754:	08c0      	lsrs	r0, r0, #3
 8001756:	0752      	lsls	r2, r2, #29
 8001758:	4302      	orrs	r2, r0
 800175a:	e6e7      	b.n	800152c <__aeabi_dadd+0x39c>
 800175c:	2a00      	cmp	r2, #0
 800175e:	d100      	bne.n	8001762 <__aeabi_dadd+0x5d2>
 8001760:	e72d      	b.n	80015be <__aeabi_dadd+0x42e>
 8001762:	4663      	mov	r3, ip
 8001764:	08d8      	lsrs	r0, r3, #3
 8001766:	4653      	mov	r3, sl
 8001768:	075a      	lsls	r2, r3, #29
 800176a:	000e      	movs	r6, r1
 800176c:	4302      	orrs	r2, r0
 800176e:	08dc      	lsrs	r4, r3, #3
 8001770:	e6cc      	b.n	800150c <__aeabi_dadd+0x37c>
 8001772:	4663      	mov	r3, ip
 8001774:	1a1d      	subs	r5, r3, r0
 8001776:	45ac      	cmp	ip, r5
 8001778:	4192      	sbcs	r2, r2
 800177a:	4653      	mov	r3, sl
 800177c:	4252      	negs	r2, r2
 800177e:	1b1c      	subs	r4, r3, r4
 8001780:	000e      	movs	r6, r1
 8001782:	4688      	mov	r8, r1
 8001784:	1aa4      	subs	r4, r4, r2
 8001786:	3701      	adds	r7, #1
 8001788:	e555      	b.n	8001236 <__aeabi_dadd+0xa6>
 800178a:	4663      	mov	r3, ip
 800178c:	08d9      	lsrs	r1, r3, #3
 800178e:	4653      	mov	r3, sl
 8001790:	075a      	lsls	r2, r3, #29
 8001792:	430a      	orrs	r2, r1
 8001794:	08dc      	lsrs	r4, r3, #3
 8001796:	e6c9      	b.n	800152c <__aeabi_dadd+0x39c>
 8001798:	4660      	mov	r0, ip
 800179a:	4654      	mov	r4, sl
 800179c:	e6d4      	b.n	8001548 <__aeabi_dadd+0x3b8>
 800179e:	08c0      	lsrs	r0, r0, #3
 80017a0:	2a00      	cmp	r2, #0
 80017a2:	d100      	bne.n	80017a6 <__aeabi_dadd+0x616>
 80017a4:	e6bf      	b.n	8001526 <__aeabi_dadd+0x396>
 80017a6:	0762      	lsls	r2, r4, #29
 80017a8:	4310      	orrs	r0, r2
 80017aa:	2280      	movs	r2, #128	@ 0x80
 80017ac:	08e4      	lsrs	r4, r4, #3
 80017ae:	0312      	lsls	r2, r2, #12
 80017b0:	4214      	tst	r4, r2
 80017b2:	d0cd      	beq.n	8001750 <__aeabi_dadd+0x5c0>
 80017b4:	08dd      	lsrs	r5, r3, #3
 80017b6:	4215      	tst	r5, r2
 80017b8:	d1ca      	bne.n	8001750 <__aeabi_dadd+0x5c0>
 80017ba:	4663      	mov	r3, ip
 80017bc:	08d8      	lsrs	r0, r3, #3
 80017be:	4653      	mov	r3, sl
 80017c0:	075b      	lsls	r3, r3, #29
 80017c2:	000e      	movs	r6, r1
 80017c4:	002c      	movs	r4, r5
 80017c6:	4318      	orrs	r0, r3
 80017c8:	e7c2      	b.n	8001750 <__aeabi_dadd+0x5c0>
 80017ca:	4663      	mov	r3, ip
 80017cc:	08d9      	lsrs	r1, r3, #3
 80017ce:	4653      	mov	r3, sl
 80017d0:	075a      	lsls	r2, r3, #29
 80017d2:	430a      	orrs	r2, r1
 80017d4:	08dc      	lsrs	r4, r3, #3
 80017d6:	e699      	b.n	800150c <__aeabi_dadd+0x37c>
 80017d8:	4663      	mov	r3, ip
 80017da:	08d8      	lsrs	r0, r3, #3
 80017dc:	4653      	mov	r3, sl
 80017de:	075a      	lsls	r2, r3, #29
 80017e0:	000e      	movs	r6, r1
 80017e2:	4302      	orrs	r2, r0
 80017e4:	08dc      	lsrs	r4, r3, #3
 80017e6:	e6a1      	b.n	800152c <__aeabi_dadd+0x39c>
 80017e8:	0011      	movs	r1, r2
 80017ea:	0027      	movs	r7, r4
 80017ec:	3920      	subs	r1, #32
 80017ee:	40cf      	lsrs	r7, r1
 80017f0:	2a20      	cmp	r2, #32
 80017f2:	d003      	beq.n	80017fc <__aeabi_dadd+0x66c>
 80017f4:	2140      	movs	r1, #64	@ 0x40
 80017f6:	1a8a      	subs	r2, r1, r2
 80017f8:	4094      	lsls	r4, r2
 80017fa:	4320      	orrs	r0, r4
 80017fc:	1e42      	subs	r2, r0, #1
 80017fe:	4190      	sbcs	r0, r2
 8001800:	0005      	movs	r5, r0
 8001802:	433d      	orrs	r5, r7
 8001804:	e651      	b.n	80014aa <__aeabi_dadd+0x31a>
 8001806:	000c      	movs	r4, r1
 8001808:	2500      	movs	r5, #0
 800180a:	2200      	movs	r2, #0
 800180c:	e558      	b.n	80012c0 <__aeabi_dadd+0x130>
 800180e:	4460      	add	r0, ip
 8001810:	4560      	cmp	r0, ip
 8001812:	4192      	sbcs	r2, r2
 8001814:	4454      	add	r4, sl
 8001816:	4252      	negs	r2, r2
 8001818:	0005      	movs	r5, r0
 800181a:	18a4      	adds	r4, r4, r2
 800181c:	e73a      	b.n	8001694 <__aeabi_dadd+0x504>
 800181e:	4653      	mov	r3, sl
 8001820:	075a      	lsls	r2, r3, #29
 8001822:	4663      	mov	r3, ip
 8001824:	08d9      	lsrs	r1, r3, #3
 8001826:	4653      	mov	r3, sl
 8001828:	430a      	orrs	r2, r1
 800182a:	08dc      	lsrs	r4, r3, #3
 800182c:	e67e      	b.n	800152c <__aeabi_dadd+0x39c>
 800182e:	001a      	movs	r2, r3
 8001830:	001c      	movs	r4, r3
 8001832:	432a      	orrs	r2, r5
 8001834:	d000      	beq.n	8001838 <__aeabi_dadd+0x6a8>
 8001836:	e6ab      	b.n	8001590 <__aeabi_dadd+0x400>
 8001838:	e6c1      	b.n	80015be <__aeabi_dadd+0x42e>
 800183a:	2120      	movs	r1, #32
 800183c:	2500      	movs	r5, #0
 800183e:	1a09      	subs	r1, r1, r0
 8001840:	e519      	b.n	8001276 <__aeabi_dadd+0xe6>
 8001842:	2200      	movs	r2, #0
 8001844:	2500      	movs	r5, #0
 8001846:	4c01      	ldr	r4, [pc, #4]	@ (800184c <__aeabi_dadd+0x6bc>)
 8001848:	e53a      	b.n	80012c0 <__aeabi_dadd+0x130>
 800184a:	46c0      	nop			@ (mov r8, r8)
 800184c:	000007ff 	.word	0x000007ff
 8001850:	ff7fffff 	.word	0xff7fffff
 8001854:	000007fe 	.word	0x000007fe

08001858 <__aeabi_ddiv>:
 8001858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800185a:	46de      	mov	lr, fp
 800185c:	4645      	mov	r5, r8
 800185e:	4657      	mov	r7, sl
 8001860:	464e      	mov	r6, r9
 8001862:	b5e0      	push	{r5, r6, r7, lr}
 8001864:	b087      	sub	sp, #28
 8001866:	9200      	str	r2, [sp, #0]
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	030b      	lsls	r3, r1, #12
 800186c:	0b1b      	lsrs	r3, r3, #12
 800186e:	469b      	mov	fp, r3
 8001870:	0fca      	lsrs	r2, r1, #31
 8001872:	004b      	lsls	r3, r1, #1
 8001874:	0004      	movs	r4, r0
 8001876:	4680      	mov	r8, r0
 8001878:	0d5b      	lsrs	r3, r3, #21
 800187a:	9202      	str	r2, [sp, #8]
 800187c:	d100      	bne.n	8001880 <__aeabi_ddiv+0x28>
 800187e:	e16a      	b.n	8001b56 <__aeabi_ddiv+0x2fe>
 8001880:	4ad4      	ldr	r2, [pc, #848]	@ (8001bd4 <__aeabi_ddiv+0x37c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d100      	bne.n	8001888 <__aeabi_ddiv+0x30>
 8001886:	e18c      	b.n	8001ba2 <__aeabi_ddiv+0x34a>
 8001888:	4659      	mov	r1, fp
 800188a:	0f42      	lsrs	r2, r0, #29
 800188c:	00c9      	lsls	r1, r1, #3
 800188e:	430a      	orrs	r2, r1
 8001890:	2180      	movs	r1, #128	@ 0x80
 8001892:	0409      	lsls	r1, r1, #16
 8001894:	4311      	orrs	r1, r2
 8001896:	00c2      	lsls	r2, r0, #3
 8001898:	4690      	mov	r8, r2
 800189a:	4acf      	ldr	r2, [pc, #828]	@ (8001bd8 <__aeabi_ddiv+0x380>)
 800189c:	4689      	mov	r9, r1
 800189e:	4692      	mov	sl, r2
 80018a0:	449a      	add	sl, r3
 80018a2:	2300      	movs	r3, #0
 80018a4:	2400      	movs	r4, #0
 80018a6:	9303      	str	r3, [sp, #12]
 80018a8:	9e00      	ldr	r6, [sp, #0]
 80018aa:	9f01      	ldr	r7, [sp, #4]
 80018ac:	033b      	lsls	r3, r7, #12
 80018ae:	0b1b      	lsrs	r3, r3, #12
 80018b0:	469b      	mov	fp, r3
 80018b2:	007b      	lsls	r3, r7, #1
 80018b4:	0030      	movs	r0, r6
 80018b6:	0d5b      	lsrs	r3, r3, #21
 80018b8:	0ffd      	lsrs	r5, r7, #31
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d100      	bne.n	80018c0 <__aeabi_ddiv+0x68>
 80018be:	e128      	b.n	8001b12 <__aeabi_ddiv+0x2ba>
 80018c0:	4ac4      	ldr	r2, [pc, #784]	@ (8001bd4 <__aeabi_ddiv+0x37c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d100      	bne.n	80018c8 <__aeabi_ddiv+0x70>
 80018c6:	e177      	b.n	8001bb8 <__aeabi_ddiv+0x360>
 80018c8:	4659      	mov	r1, fp
 80018ca:	0f72      	lsrs	r2, r6, #29
 80018cc:	00c9      	lsls	r1, r1, #3
 80018ce:	430a      	orrs	r2, r1
 80018d0:	2180      	movs	r1, #128	@ 0x80
 80018d2:	0409      	lsls	r1, r1, #16
 80018d4:	4311      	orrs	r1, r2
 80018d6:	468b      	mov	fp, r1
 80018d8:	49bf      	ldr	r1, [pc, #764]	@ (8001bd8 <__aeabi_ddiv+0x380>)
 80018da:	00f2      	lsls	r2, r6, #3
 80018dc:	468c      	mov	ip, r1
 80018de:	4651      	mov	r1, sl
 80018e0:	4463      	add	r3, ip
 80018e2:	1acb      	subs	r3, r1, r3
 80018e4:	469a      	mov	sl, r3
 80018e6:	2300      	movs	r3, #0
 80018e8:	9e02      	ldr	r6, [sp, #8]
 80018ea:	406e      	eors	r6, r5
 80018ec:	2c0f      	cmp	r4, #15
 80018ee:	d827      	bhi.n	8001940 <__aeabi_ddiv+0xe8>
 80018f0:	49ba      	ldr	r1, [pc, #744]	@ (8001bdc <__aeabi_ddiv+0x384>)
 80018f2:	00a4      	lsls	r4, r4, #2
 80018f4:	5909      	ldr	r1, [r1, r4]
 80018f6:	468f      	mov	pc, r1
 80018f8:	46cb      	mov	fp, r9
 80018fa:	4642      	mov	r2, r8
 80018fc:	9e02      	ldr	r6, [sp, #8]
 80018fe:	9b03      	ldr	r3, [sp, #12]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d016      	beq.n	8001932 <__aeabi_ddiv+0xda>
 8001904:	2b03      	cmp	r3, #3
 8001906:	d100      	bne.n	800190a <__aeabi_ddiv+0xb2>
 8001908:	e2a6      	b.n	8001e58 <__aeabi_ddiv+0x600>
 800190a:	2b01      	cmp	r3, #1
 800190c:	d000      	beq.n	8001910 <__aeabi_ddiv+0xb8>
 800190e:	e0df      	b.n	8001ad0 <__aeabi_ddiv+0x278>
 8001910:	2200      	movs	r2, #0
 8001912:	2300      	movs	r3, #0
 8001914:	2400      	movs	r4, #0
 8001916:	4690      	mov	r8, r2
 8001918:	051b      	lsls	r3, r3, #20
 800191a:	4323      	orrs	r3, r4
 800191c:	07f6      	lsls	r6, r6, #31
 800191e:	4333      	orrs	r3, r6
 8001920:	4640      	mov	r0, r8
 8001922:	0019      	movs	r1, r3
 8001924:	b007      	add	sp, #28
 8001926:	bcf0      	pop	{r4, r5, r6, r7}
 8001928:	46bb      	mov	fp, r7
 800192a:	46b2      	mov	sl, r6
 800192c:	46a9      	mov	r9, r5
 800192e:	46a0      	mov	r8, r4
 8001930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001932:	2200      	movs	r2, #0
 8001934:	2400      	movs	r4, #0
 8001936:	4690      	mov	r8, r2
 8001938:	4ba6      	ldr	r3, [pc, #664]	@ (8001bd4 <__aeabi_ddiv+0x37c>)
 800193a:	e7ed      	b.n	8001918 <__aeabi_ddiv+0xc0>
 800193c:	002e      	movs	r6, r5
 800193e:	e7df      	b.n	8001900 <__aeabi_ddiv+0xa8>
 8001940:	45cb      	cmp	fp, r9
 8001942:	d200      	bcs.n	8001946 <__aeabi_ddiv+0xee>
 8001944:	e1d4      	b.n	8001cf0 <__aeabi_ddiv+0x498>
 8001946:	d100      	bne.n	800194a <__aeabi_ddiv+0xf2>
 8001948:	e1cf      	b.n	8001cea <__aeabi_ddiv+0x492>
 800194a:	2301      	movs	r3, #1
 800194c:	425b      	negs	r3, r3
 800194e:	469c      	mov	ip, r3
 8001950:	4644      	mov	r4, r8
 8001952:	4648      	mov	r0, r9
 8001954:	2700      	movs	r7, #0
 8001956:	44e2      	add	sl, ip
 8001958:	465b      	mov	r3, fp
 800195a:	0e15      	lsrs	r5, r2, #24
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	431d      	orrs	r5, r3
 8001960:	0c19      	lsrs	r1, r3, #16
 8001962:	042b      	lsls	r3, r5, #16
 8001964:	0212      	lsls	r2, r2, #8
 8001966:	9500      	str	r5, [sp, #0]
 8001968:	0c1d      	lsrs	r5, r3, #16
 800196a:	4691      	mov	r9, r2
 800196c:	9102      	str	r1, [sp, #8]
 800196e:	9503      	str	r5, [sp, #12]
 8001970:	f7fe fc5a 	bl	8000228 <__aeabi_uidivmod>
 8001974:	0002      	movs	r2, r0
 8001976:	436a      	muls	r2, r5
 8001978:	040b      	lsls	r3, r1, #16
 800197a:	0c21      	lsrs	r1, r4, #16
 800197c:	4680      	mov	r8, r0
 800197e:	4319      	orrs	r1, r3
 8001980:	428a      	cmp	r2, r1
 8001982:	d909      	bls.n	8001998 <__aeabi_ddiv+0x140>
 8001984:	9d00      	ldr	r5, [sp, #0]
 8001986:	2301      	movs	r3, #1
 8001988:	46ac      	mov	ip, r5
 800198a:	425b      	negs	r3, r3
 800198c:	4461      	add	r1, ip
 800198e:	469c      	mov	ip, r3
 8001990:	44e0      	add	r8, ip
 8001992:	428d      	cmp	r5, r1
 8001994:	d800      	bhi.n	8001998 <__aeabi_ddiv+0x140>
 8001996:	e1fb      	b.n	8001d90 <__aeabi_ddiv+0x538>
 8001998:	1a88      	subs	r0, r1, r2
 800199a:	9902      	ldr	r1, [sp, #8]
 800199c:	f7fe fc44 	bl	8000228 <__aeabi_uidivmod>
 80019a0:	9a03      	ldr	r2, [sp, #12]
 80019a2:	0424      	lsls	r4, r4, #16
 80019a4:	4342      	muls	r2, r0
 80019a6:	0409      	lsls	r1, r1, #16
 80019a8:	0c24      	lsrs	r4, r4, #16
 80019aa:	0003      	movs	r3, r0
 80019ac:	430c      	orrs	r4, r1
 80019ae:	42a2      	cmp	r2, r4
 80019b0:	d906      	bls.n	80019c0 <__aeabi_ddiv+0x168>
 80019b2:	9900      	ldr	r1, [sp, #0]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	468c      	mov	ip, r1
 80019b8:	4464      	add	r4, ip
 80019ba:	42a1      	cmp	r1, r4
 80019bc:	d800      	bhi.n	80019c0 <__aeabi_ddiv+0x168>
 80019be:	e1e1      	b.n	8001d84 <__aeabi_ddiv+0x52c>
 80019c0:	1aa0      	subs	r0, r4, r2
 80019c2:	4642      	mov	r2, r8
 80019c4:	0412      	lsls	r2, r2, #16
 80019c6:	431a      	orrs	r2, r3
 80019c8:	4693      	mov	fp, r2
 80019ca:	464b      	mov	r3, r9
 80019cc:	4659      	mov	r1, fp
 80019ce:	0c1b      	lsrs	r3, r3, #16
 80019d0:	001d      	movs	r5, r3
 80019d2:	9304      	str	r3, [sp, #16]
 80019d4:	040b      	lsls	r3, r1, #16
 80019d6:	4649      	mov	r1, r9
 80019d8:	0409      	lsls	r1, r1, #16
 80019da:	0c09      	lsrs	r1, r1, #16
 80019dc:	000c      	movs	r4, r1
 80019de:	0c1b      	lsrs	r3, r3, #16
 80019e0:	435c      	muls	r4, r3
 80019e2:	0c12      	lsrs	r2, r2, #16
 80019e4:	436b      	muls	r3, r5
 80019e6:	4688      	mov	r8, r1
 80019e8:	4351      	muls	r1, r2
 80019ea:	436a      	muls	r2, r5
 80019ec:	0c25      	lsrs	r5, r4, #16
 80019ee:	46ac      	mov	ip, r5
 80019f0:	185b      	adds	r3, r3, r1
 80019f2:	4463      	add	r3, ip
 80019f4:	4299      	cmp	r1, r3
 80019f6:	d903      	bls.n	8001a00 <__aeabi_ddiv+0x1a8>
 80019f8:	2180      	movs	r1, #128	@ 0x80
 80019fa:	0249      	lsls	r1, r1, #9
 80019fc:	468c      	mov	ip, r1
 80019fe:	4462      	add	r2, ip
 8001a00:	0c19      	lsrs	r1, r3, #16
 8001a02:	0424      	lsls	r4, r4, #16
 8001a04:	041b      	lsls	r3, r3, #16
 8001a06:	0c24      	lsrs	r4, r4, #16
 8001a08:	188a      	adds	r2, r1, r2
 8001a0a:	191c      	adds	r4, r3, r4
 8001a0c:	4290      	cmp	r0, r2
 8001a0e:	d302      	bcc.n	8001a16 <__aeabi_ddiv+0x1be>
 8001a10:	d116      	bne.n	8001a40 <__aeabi_ddiv+0x1e8>
 8001a12:	42a7      	cmp	r7, r4
 8001a14:	d214      	bcs.n	8001a40 <__aeabi_ddiv+0x1e8>
 8001a16:	465b      	mov	r3, fp
 8001a18:	9d00      	ldr	r5, [sp, #0]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	444f      	add	r7, r9
 8001a1e:	9305      	str	r3, [sp, #20]
 8001a20:	454f      	cmp	r7, r9
 8001a22:	419b      	sbcs	r3, r3
 8001a24:	46ac      	mov	ip, r5
 8001a26:	425b      	negs	r3, r3
 8001a28:	4463      	add	r3, ip
 8001a2a:	18c0      	adds	r0, r0, r3
 8001a2c:	4285      	cmp	r5, r0
 8001a2e:	d300      	bcc.n	8001a32 <__aeabi_ddiv+0x1da>
 8001a30:	e1a1      	b.n	8001d76 <__aeabi_ddiv+0x51e>
 8001a32:	4282      	cmp	r2, r0
 8001a34:	d900      	bls.n	8001a38 <__aeabi_ddiv+0x1e0>
 8001a36:	e1f6      	b.n	8001e26 <__aeabi_ddiv+0x5ce>
 8001a38:	d100      	bne.n	8001a3c <__aeabi_ddiv+0x1e4>
 8001a3a:	e1f1      	b.n	8001e20 <__aeabi_ddiv+0x5c8>
 8001a3c:	9b05      	ldr	r3, [sp, #20]
 8001a3e:	469b      	mov	fp, r3
 8001a40:	1b3c      	subs	r4, r7, r4
 8001a42:	42a7      	cmp	r7, r4
 8001a44:	41bf      	sbcs	r7, r7
 8001a46:	9d00      	ldr	r5, [sp, #0]
 8001a48:	1a80      	subs	r0, r0, r2
 8001a4a:	427f      	negs	r7, r7
 8001a4c:	1bc0      	subs	r0, r0, r7
 8001a4e:	4285      	cmp	r5, r0
 8001a50:	d100      	bne.n	8001a54 <__aeabi_ddiv+0x1fc>
 8001a52:	e1d0      	b.n	8001df6 <__aeabi_ddiv+0x59e>
 8001a54:	9902      	ldr	r1, [sp, #8]
 8001a56:	f7fe fbe7 	bl	8000228 <__aeabi_uidivmod>
 8001a5a:	9a03      	ldr	r2, [sp, #12]
 8001a5c:	040b      	lsls	r3, r1, #16
 8001a5e:	4342      	muls	r2, r0
 8001a60:	0c21      	lsrs	r1, r4, #16
 8001a62:	0007      	movs	r7, r0
 8001a64:	4319      	orrs	r1, r3
 8001a66:	428a      	cmp	r2, r1
 8001a68:	d900      	bls.n	8001a6c <__aeabi_ddiv+0x214>
 8001a6a:	e178      	b.n	8001d5e <__aeabi_ddiv+0x506>
 8001a6c:	1a88      	subs	r0, r1, r2
 8001a6e:	9902      	ldr	r1, [sp, #8]
 8001a70:	f7fe fbda 	bl	8000228 <__aeabi_uidivmod>
 8001a74:	9a03      	ldr	r2, [sp, #12]
 8001a76:	0424      	lsls	r4, r4, #16
 8001a78:	4342      	muls	r2, r0
 8001a7a:	0409      	lsls	r1, r1, #16
 8001a7c:	0c24      	lsrs	r4, r4, #16
 8001a7e:	0003      	movs	r3, r0
 8001a80:	430c      	orrs	r4, r1
 8001a82:	42a2      	cmp	r2, r4
 8001a84:	d900      	bls.n	8001a88 <__aeabi_ddiv+0x230>
 8001a86:	e15d      	b.n	8001d44 <__aeabi_ddiv+0x4ec>
 8001a88:	4641      	mov	r1, r8
 8001a8a:	1aa4      	subs	r4, r4, r2
 8001a8c:	043a      	lsls	r2, r7, #16
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	9d04      	ldr	r5, [sp, #16]
 8001a92:	0413      	lsls	r3, r2, #16
 8001a94:	0c1b      	lsrs	r3, r3, #16
 8001a96:	4359      	muls	r1, r3
 8001a98:	4647      	mov	r7, r8
 8001a9a:	436b      	muls	r3, r5
 8001a9c:	469c      	mov	ip, r3
 8001a9e:	0c10      	lsrs	r0, r2, #16
 8001aa0:	4347      	muls	r7, r0
 8001aa2:	0c0b      	lsrs	r3, r1, #16
 8001aa4:	44bc      	add	ip, r7
 8001aa6:	4463      	add	r3, ip
 8001aa8:	4368      	muls	r0, r5
 8001aaa:	429f      	cmp	r7, r3
 8001aac:	d903      	bls.n	8001ab6 <__aeabi_ddiv+0x25e>
 8001aae:	2580      	movs	r5, #128	@ 0x80
 8001ab0:	026d      	lsls	r5, r5, #9
 8001ab2:	46ac      	mov	ip, r5
 8001ab4:	4460      	add	r0, ip
 8001ab6:	0c1f      	lsrs	r7, r3, #16
 8001ab8:	0409      	lsls	r1, r1, #16
 8001aba:	041b      	lsls	r3, r3, #16
 8001abc:	0c09      	lsrs	r1, r1, #16
 8001abe:	183f      	adds	r7, r7, r0
 8001ac0:	185b      	adds	r3, r3, r1
 8001ac2:	42bc      	cmp	r4, r7
 8001ac4:	d200      	bcs.n	8001ac8 <__aeabi_ddiv+0x270>
 8001ac6:	e102      	b.n	8001cce <__aeabi_ddiv+0x476>
 8001ac8:	d100      	bne.n	8001acc <__aeabi_ddiv+0x274>
 8001aca:	e0fd      	b.n	8001cc8 <__aeabi_ddiv+0x470>
 8001acc:	2301      	movs	r3, #1
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	4b43      	ldr	r3, [pc, #268]	@ (8001be0 <__aeabi_ddiv+0x388>)
 8001ad2:	4453      	add	r3, sl
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	dc00      	bgt.n	8001ada <__aeabi_ddiv+0x282>
 8001ad8:	e0ae      	b.n	8001c38 <__aeabi_ddiv+0x3e0>
 8001ada:	0751      	lsls	r1, r2, #29
 8001adc:	d000      	beq.n	8001ae0 <__aeabi_ddiv+0x288>
 8001ade:	e198      	b.n	8001e12 <__aeabi_ddiv+0x5ba>
 8001ae0:	4659      	mov	r1, fp
 8001ae2:	01c9      	lsls	r1, r1, #7
 8001ae4:	d506      	bpl.n	8001af4 <__aeabi_ddiv+0x29c>
 8001ae6:	4659      	mov	r1, fp
 8001ae8:	4b3e      	ldr	r3, [pc, #248]	@ (8001be4 <__aeabi_ddiv+0x38c>)
 8001aea:	4019      	ands	r1, r3
 8001aec:	2380      	movs	r3, #128	@ 0x80
 8001aee:	468b      	mov	fp, r1
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	4453      	add	r3, sl
 8001af4:	493c      	ldr	r1, [pc, #240]	@ (8001be8 <__aeabi_ddiv+0x390>)
 8001af6:	428b      	cmp	r3, r1
 8001af8:	dd00      	ble.n	8001afc <__aeabi_ddiv+0x2a4>
 8001afa:	e71a      	b.n	8001932 <__aeabi_ddiv+0xda>
 8001afc:	4659      	mov	r1, fp
 8001afe:	08d2      	lsrs	r2, r2, #3
 8001b00:	0749      	lsls	r1, r1, #29
 8001b02:	4311      	orrs	r1, r2
 8001b04:	465a      	mov	r2, fp
 8001b06:	055b      	lsls	r3, r3, #21
 8001b08:	0254      	lsls	r4, r2, #9
 8001b0a:	4688      	mov	r8, r1
 8001b0c:	0b24      	lsrs	r4, r4, #12
 8001b0e:	0d5b      	lsrs	r3, r3, #21
 8001b10:	e702      	b.n	8001918 <__aeabi_ddiv+0xc0>
 8001b12:	465a      	mov	r2, fp
 8001b14:	9b00      	ldr	r3, [sp, #0]
 8001b16:	431a      	orrs	r2, r3
 8001b18:	d100      	bne.n	8001b1c <__aeabi_ddiv+0x2c4>
 8001b1a:	e07e      	b.n	8001c1a <__aeabi_ddiv+0x3c2>
 8001b1c:	465b      	mov	r3, fp
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d100      	bne.n	8001b24 <__aeabi_ddiv+0x2cc>
 8001b22:	e100      	b.n	8001d26 <__aeabi_ddiv+0x4ce>
 8001b24:	4658      	mov	r0, fp
 8001b26:	f001 fa15 	bl	8002f54 <__clzsi2>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	3a0b      	subs	r2, #11
 8001b30:	271d      	movs	r7, #29
 8001b32:	9e00      	ldr	r6, [sp, #0]
 8001b34:	1aba      	subs	r2, r7, r2
 8001b36:	0019      	movs	r1, r3
 8001b38:	4658      	mov	r0, fp
 8001b3a:	40d6      	lsrs	r6, r2
 8001b3c:	3908      	subs	r1, #8
 8001b3e:	4088      	lsls	r0, r1
 8001b40:	0032      	movs	r2, r6
 8001b42:	4302      	orrs	r2, r0
 8001b44:	4693      	mov	fp, r2
 8001b46:	9a00      	ldr	r2, [sp, #0]
 8001b48:	408a      	lsls	r2, r1
 8001b4a:	4928      	ldr	r1, [pc, #160]	@ (8001bec <__aeabi_ddiv+0x394>)
 8001b4c:	4453      	add	r3, sl
 8001b4e:	468a      	mov	sl, r1
 8001b50:	449a      	add	sl, r3
 8001b52:	2300      	movs	r3, #0
 8001b54:	e6c8      	b.n	80018e8 <__aeabi_ddiv+0x90>
 8001b56:	465b      	mov	r3, fp
 8001b58:	4303      	orrs	r3, r0
 8001b5a:	4699      	mov	r9, r3
 8001b5c:	d056      	beq.n	8001c0c <__aeabi_ddiv+0x3b4>
 8001b5e:	465b      	mov	r3, fp
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d100      	bne.n	8001b66 <__aeabi_ddiv+0x30e>
 8001b64:	e0cd      	b.n	8001d02 <__aeabi_ddiv+0x4aa>
 8001b66:	4658      	mov	r0, fp
 8001b68:	f001 f9f4 	bl	8002f54 <__clzsi2>
 8001b6c:	230b      	movs	r3, #11
 8001b6e:	425b      	negs	r3, r3
 8001b70:	469c      	mov	ip, r3
 8001b72:	0002      	movs	r2, r0
 8001b74:	4484      	add	ip, r0
 8001b76:	4666      	mov	r6, ip
 8001b78:	231d      	movs	r3, #29
 8001b7a:	1b9b      	subs	r3, r3, r6
 8001b7c:	0026      	movs	r6, r4
 8001b7e:	0011      	movs	r1, r2
 8001b80:	4658      	mov	r0, fp
 8001b82:	40de      	lsrs	r6, r3
 8001b84:	3908      	subs	r1, #8
 8001b86:	4088      	lsls	r0, r1
 8001b88:	0033      	movs	r3, r6
 8001b8a:	4303      	orrs	r3, r0
 8001b8c:	4699      	mov	r9, r3
 8001b8e:	0023      	movs	r3, r4
 8001b90:	408b      	lsls	r3, r1
 8001b92:	4698      	mov	r8, r3
 8001b94:	4b16      	ldr	r3, [pc, #88]	@ (8001bf0 <__aeabi_ddiv+0x398>)
 8001b96:	2400      	movs	r4, #0
 8001b98:	1a9b      	subs	r3, r3, r2
 8001b9a:	469a      	mov	sl, r3
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9303      	str	r3, [sp, #12]
 8001ba0:	e682      	b.n	80018a8 <__aeabi_ddiv+0x50>
 8001ba2:	465a      	mov	r2, fp
 8001ba4:	4302      	orrs	r2, r0
 8001ba6:	4691      	mov	r9, r2
 8001ba8:	d12a      	bne.n	8001c00 <__aeabi_ddiv+0x3a8>
 8001baa:	2200      	movs	r2, #0
 8001bac:	469a      	mov	sl, r3
 8001bae:	2302      	movs	r3, #2
 8001bb0:	4690      	mov	r8, r2
 8001bb2:	2408      	movs	r4, #8
 8001bb4:	9303      	str	r3, [sp, #12]
 8001bb6:	e677      	b.n	80018a8 <__aeabi_ddiv+0x50>
 8001bb8:	465a      	mov	r2, fp
 8001bba:	9b00      	ldr	r3, [sp, #0]
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf4 <__aeabi_ddiv+0x39c>)
 8001bc0:	469c      	mov	ip, r3
 8001bc2:	44e2      	add	sl, ip
 8001bc4:	2a00      	cmp	r2, #0
 8001bc6:	d117      	bne.n	8001bf8 <__aeabi_ddiv+0x3a0>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	2300      	movs	r3, #0
 8001bce:	469b      	mov	fp, r3
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	e689      	b.n	80018e8 <__aeabi_ddiv+0x90>
 8001bd4:	000007ff 	.word	0x000007ff
 8001bd8:	fffffc01 	.word	0xfffffc01
 8001bdc:	0801ad6c 	.word	0x0801ad6c
 8001be0:	000003ff 	.word	0x000003ff
 8001be4:	feffffff 	.word	0xfeffffff
 8001be8:	000007fe 	.word	0x000007fe
 8001bec:	000003f3 	.word	0x000003f3
 8001bf0:	fffffc0d 	.word	0xfffffc0d
 8001bf4:	fffff801 	.word	0xfffff801
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	0032      	movs	r2, r6
 8001bfc:	431c      	orrs	r4, r3
 8001bfe:	e673      	b.n	80018e8 <__aeabi_ddiv+0x90>
 8001c00:	469a      	mov	sl, r3
 8001c02:	2303      	movs	r3, #3
 8001c04:	46d9      	mov	r9, fp
 8001c06:	240c      	movs	r4, #12
 8001c08:	9303      	str	r3, [sp, #12]
 8001c0a:	e64d      	b.n	80018a8 <__aeabi_ddiv+0x50>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	4698      	mov	r8, r3
 8001c10:	469a      	mov	sl, r3
 8001c12:	3301      	adds	r3, #1
 8001c14:	2404      	movs	r4, #4
 8001c16:	9303      	str	r3, [sp, #12]
 8001c18:	e646      	b.n	80018a8 <__aeabi_ddiv+0x50>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	431c      	orrs	r4, r3
 8001c1e:	2300      	movs	r3, #0
 8001c20:	469b      	mov	fp, r3
 8001c22:	3301      	adds	r3, #1
 8001c24:	e660      	b.n	80018e8 <__aeabi_ddiv+0x90>
 8001c26:	2300      	movs	r3, #0
 8001c28:	2480      	movs	r4, #128	@ 0x80
 8001c2a:	4698      	mov	r8, r3
 8001c2c:	2600      	movs	r6, #0
 8001c2e:	4b92      	ldr	r3, [pc, #584]	@ (8001e78 <__aeabi_ddiv+0x620>)
 8001c30:	0324      	lsls	r4, r4, #12
 8001c32:	e671      	b.n	8001918 <__aeabi_ddiv+0xc0>
 8001c34:	2201      	movs	r2, #1
 8001c36:	4252      	negs	r2, r2
 8001c38:	2101      	movs	r1, #1
 8001c3a:	1ac9      	subs	r1, r1, r3
 8001c3c:	2938      	cmp	r1, #56	@ 0x38
 8001c3e:	dd00      	ble.n	8001c42 <__aeabi_ddiv+0x3ea>
 8001c40:	e666      	b.n	8001910 <__aeabi_ddiv+0xb8>
 8001c42:	291f      	cmp	r1, #31
 8001c44:	dc00      	bgt.n	8001c48 <__aeabi_ddiv+0x3f0>
 8001c46:	e0ab      	b.n	8001da0 <__aeabi_ddiv+0x548>
 8001c48:	201f      	movs	r0, #31
 8001c4a:	4240      	negs	r0, r0
 8001c4c:	1ac3      	subs	r3, r0, r3
 8001c4e:	4658      	mov	r0, fp
 8001c50:	40d8      	lsrs	r0, r3
 8001c52:	0003      	movs	r3, r0
 8001c54:	2920      	cmp	r1, #32
 8001c56:	d004      	beq.n	8001c62 <__aeabi_ddiv+0x40a>
 8001c58:	4658      	mov	r0, fp
 8001c5a:	4988      	ldr	r1, [pc, #544]	@ (8001e7c <__aeabi_ddiv+0x624>)
 8001c5c:	4451      	add	r1, sl
 8001c5e:	4088      	lsls	r0, r1
 8001c60:	4302      	orrs	r2, r0
 8001c62:	1e51      	subs	r1, r2, #1
 8001c64:	418a      	sbcs	r2, r1
 8001c66:	431a      	orrs	r2, r3
 8001c68:	2307      	movs	r3, #7
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	2400      	movs	r4, #0
 8001c6e:	4011      	ands	r1, r2
 8001c70:	4213      	tst	r3, r2
 8001c72:	d00c      	beq.n	8001c8e <__aeabi_ddiv+0x436>
 8001c74:	230f      	movs	r3, #15
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d100      	bne.n	8001c7e <__aeabi_ddiv+0x426>
 8001c7c:	e0f9      	b.n	8001e72 <__aeabi_ddiv+0x61a>
 8001c7e:	1d11      	adds	r1, r2, #4
 8001c80:	4291      	cmp	r1, r2
 8001c82:	419b      	sbcs	r3, r3
 8001c84:	000a      	movs	r2, r1
 8001c86:	425b      	negs	r3, r3
 8001c88:	0759      	lsls	r1, r3, #29
 8001c8a:	025b      	lsls	r3, r3, #9
 8001c8c:	0b1c      	lsrs	r4, r3, #12
 8001c8e:	08d2      	lsrs	r2, r2, #3
 8001c90:	430a      	orrs	r2, r1
 8001c92:	4690      	mov	r8, r2
 8001c94:	2300      	movs	r3, #0
 8001c96:	e63f      	b.n	8001918 <__aeabi_ddiv+0xc0>
 8001c98:	2480      	movs	r4, #128	@ 0x80
 8001c9a:	464b      	mov	r3, r9
 8001c9c:	0324      	lsls	r4, r4, #12
 8001c9e:	4223      	tst	r3, r4
 8001ca0:	d009      	beq.n	8001cb6 <__aeabi_ddiv+0x45e>
 8001ca2:	465b      	mov	r3, fp
 8001ca4:	4223      	tst	r3, r4
 8001ca6:	d106      	bne.n	8001cb6 <__aeabi_ddiv+0x45e>
 8001ca8:	431c      	orrs	r4, r3
 8001caa:	0324      	lsls	r4, r4, #12
 8001cac:	002e      	movs	r6, r5
 8001cae:	4690      	mov	r8, r2
 8001cb0:	4b71      	ldr	r3, [pc, #452]	@ (8001e78 <__aeabi_ddiv+0x620>)
 8001cb2:	0b24      	lsrs	r4, r4, #12
 8001cb4:	e630      	b.n	8001918 <__aeabi_ddiv+0xc0>
 8001cb6:	2480      	movs	r4, #128	@ 0x80
 8001cb8:	464b      	mov	r3, r9
 8001cba:	0324      	lsls	r4, r4, #12
 8001cbc:	431c      	orrs	r4, r3
 8001cbe:	0324      	lsls	r4, r4, #12
 8001cc0:	9e02      	ldr	r6, [sp, #8]
 8001cc2:	4b6d      	ldr	r3, [pc, #436]	@ (8001e78 <__aeabi_ddiv+0x620>)
 8001cc4:	0b24      	lsrs	r4, r4, #12
 8001cc6:	e627      	b.n	8001918 <__aeabi_ddiv+0xc0>
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d100      	bne.n	8001cce <__aeabi_ddiv+0x476>
 8001ccc:	e700      	b.n	8001ad0 <__aeabi_ddiv+0x278>
 8001cce:	9800      	ldr	r0, [sp, #0]
 8001cd0:	1e51      	subs	r1, r2, #1
 8001cd2:	4684      	mov	ip, r0
 8001cd4:	4464      	add	r4, ip
 8001cd6:	4284      	cmp	r4, r0
 8001cd8:	d200      	bcs.n	8001cdc <__aeabi_ddiv+0x484>
 8001cda:	e084      	b.n	8001de6 <__aeabi_ddiv+0x58e>
 8001cdc:	42bc      	cmp	r4, r7
 8001cde:	d200      	bcs.n	8001ce2 <__aeabi_ddiv+0x48a>
 8001ce0:	e0ae      	b.n	8001e40 <__aeabi_ddiv+0x5e8>
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_ddiv+0x48e>
 8001ce4:	e0c1      	b.n	8001e6a <__aeabi_ddiv+0x612>
 8001ce6:	000a      	movs	r2, r1
 8001ce8:	e6f0      	b.n	8001acc <__aeabi_ddiv+0x274>
 8001cea:	4542      	cmp	r2, r8
 8001cec:	d900      	bls.n	8001cf0 <__aeabi_ddiv+0x498>
 8001cee:	e62c      	b.n	800194a <__aeabi_ddiv+0xf2>
 8001cf0:	464b      	mov	r3, r9
 8001cf2:	07dc      	lsls	r4, r3, #31
 8001cf4:	0858      	lsrs	r0, r3, #1
 8001cf6:	4643      	mov	r3, r8
 8001cf8:	085b      	lsrs	r3, r3, #1
 8001cfa:	431c      	orrs	r4, r3
 8001cfc:	4643      	mov	r3, r8
 8001cfe:	07df      	lsls	r7, r3, #31
 8001d00:	e62a      	b.n	8001958 <__aeabi_ddiv+0x100>
 8001d02:	f001 f927 	bl	8002f54 <__clzsi2>
 8001d06:	2315      	movs	r3, #21
 8001d08:	469c      	mov	ip, r3
 8001d0a:	4484      	add	ip, r0
 8001d0c:	0002      	movs	r2, r0
 8001d0e:	4663      	mov	r3, ip
 8001d10:	3220      	adds	r2, #32
 8001d12:	2b1c      	cmp	r3, #28
 8001d14:	dc00      	bgt.n	8001d18 <__aeabi_ddiv+0x4c0>
 8001d16:	e72e      	b.n	8001b76 <__aeabi_ddiv+0x31e>
 8001d18:	0023      	movs	r3, r4
 8001d1a:	3808      	subs	r0, #8
 8001d1c:	4083      	lsls	r3, r0
 8001d1e:	4699      	mov	r9, r3
 8001d20:	2300      	movs	r3, #0
 8001d22:	4698      	mov	r8, r3
 8001d24:	e736      	b.n	8001b94 <__aeabi_ddiv+0x33c>
 8001d26:	f001 f915 	bl	8002f54 <__clzsi2>
 8001d2a:	0002      	movs	r2, r0
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	3215      	adds	r2, #21
 8001d30:	3320      	adds	r3, #32
 8001d32:	2a1c      	cmp	r2, #28
 8001d34:	dc00      	bgt.n	8001d38 <__aeabi_ddiv+0x4e0>
 8001d36:	e6fb      	b.n	8001b30 <__aeabi_ddiv+0x2d8>
 8001d38:	9900      	ldr	r1, [sp, #0]
 8001d3a:	3808      	subs	r0, #8
 8001d3c:	4081      	lsls	r1, r0
 8001d3e:	2200      	movs	r2, #0
 8001d40:	468b      	mov	fp, r1
 8001d42:	e702      	b.n	8001b4a <__aeabi_ddiv+0x2f2>
 8001d44:	9900      	ldr	r1, [sp, #0]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	468c      	mov	ip, r1
 8001d4a:	4464      	add	r4, ip
 8001d4c:	42a1      	cmp	r1, r4
 8001d4e:	d900      	bls.n	8001d52 <__aeabi_ddiv+0x4fa>
 8001d50:	e69a      	b.n	8001a88 <__aeabi_ddiv+0x230>
 8001d52:	42a2      	cmp	r2, r4
 8001d54:	d800      	bhi.n	8001d58 <__aeabi_ddiv+0x500>
 8001d56:	e697      	b.n	8001a88 <__aeabi_ddiv+0x230>
 8001d58:	1e83      	subs	r3, r0, #2
 8001d5a:	4464      	add	r4, ip
 8001d5c:	e694      	b.n	8001a88 <__aeabi_ddiv+0x230>
 8001d5e:	46ac      	mov	ip, r5
 8001d60:	4461      	add	r1, ip
 8001d62:	3f01      	subs	r7, #1
 8001d64:	428d      	cmp	r5, r1
 8001d66:	d900      	bls.n	8001d6a <__aeabi_ddiv+0x512>
 8001d68:	e680      	b.n	8001a6c <__aeabi_ddiv+0x214>
 8001d6a:	428a      	cmp	r2, r1
 8001d6c:	d800      	bhi.n	8001d70 <__aeabi_ddiv+0x518>
 8001d6e:	e67d      	b.n	8001a6c <__aeabi_ddiv+0x214>
 8001d70:	1e87      	subs	r7, r0, #2
 8001d72:	4461      	add	r1, ip
 8001d74:	e67a      	b.n	8001a6c <__aeabi_ddiv+0x214>
 8001d76:	4285      	cmp	r5, r0
 8001d78:	d000      	beq.n	8001d7c <__aeabi_ddiv+0x524>
 8001d7a:	e65f      	b.n	8001a3c <__aeabi_ddiv+0x1e4>
 8001d7c:	45b9      	cmp	r9, r7
 8001d7e:	d900      	bls.n	8001d82 <__aeabi_ddiv+0x52a>
 8001d80:	e65c      	b.n	8001a3c <__aeabi_ddiv+0x1e4>
 8001d82:	e656      	b.n	8001a32 <__aeabi_ddiv+0x1da>
 8001d84:	42a2      	cmp	r2, r4
 8001d86:	d800      	bhi.n	8001d8a <__aeabi_ddiv+0x532>
 8001d88:	e61a      	b.n	80019c0 <__aeabi_ddiv+0x168>
 8001d8a:	1e83      	subs	r3, r0, #2
 8001d8c:	4464      	add	r4, ip
 8001d8e:	e617      	b.n	80019c0 <__aeabi_ddiv+0x168>
 8001d90:	428a      	cmp	r2, r1
 8001d92:	d800      	bhi.n	8001d96 <__aeabi_ddiv+0x53e>
 8001d94:	e600      	b.n	8001998 <__aeabi_ddiv+0x140>
 8001d96:	46ac      	mov	ip, r5
 8001d98:	1e83      	subs	r3, r0, #2
 8001d9a:	4698      	mov	r8, r3
 8001d9c:	4461      	add	r1, ip
 8001d9e:	e5fb      	b.n	8001998 <__aeabi_ddiv+0x140>
 8001da0:	4837      	ldr	r0, [pc, #220]	@ (8001e80 <__aeabi_ddiv+0x628>)
 8001da2:	0014      	movs	r4, r2
 8001da4:	4450      	add	r0, sl
 8001da6:	4082      	lsls	r2, r0
 8001da8:	465b      	mov	r3, fp
 8001daa:	0017      	movs	r7, r2
 8001dac:	4083      	lsls	r3, r0
 8001dae:	40cc      	lsrs	r4, r1
 8001db0:	1e7a      	subs	r2, r7, #1
 8001db2:	4197      	sbcs	r7, r2
 8001db4:	4323      	orrs	r3, r4
 8001db6:	433b      	orrs	r3, r7
 8001db8:	001a      	movs	r2, r3
 8001dba:	465b      	mov	r3, fp
 8001dbc:	40cb      	lsrs	r3, r1
 8001dbe:	0751      	lsls	r1, r2, #29
 8001dc0:	d009      	beq.n	8001dd6 <__aeabi_ddiv+0x57e>
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	4011      	ands	r1, r2
 8001dc6:	2904      	cmp	r1, #4
 8001dc8:	d005      	beq.n	8001dd6 <__aeabi_ddiv+0x57e>
 8001dca:	1d11      	adds	r1, r2, #4
 8001dcc:	4291      	cmp	r1, r2
 8001dce:	4192      	sbcs	r2, r2
 8001dd0:	4252      	negs	r2, r2
 8001dd2:	189b      	adds	r3, r3, r2
 8001dd4:	000a      	movs	r2, r1
 8001dd6:	0219      	lsls	r1, r3, #8
 8001dd8:	d400      	bmi.n	8001ddc <__aeabi_ddiv+0x584>
 8001dda:	e755      	b.n	8001c88 <__aeabi_ddiv+0x430>
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2301      	movs	r3, #1
 8001de0:	2400      	movs	r4, #0
 8001de2:	4690      	mov	r8, r2
 8001de4:	e598      	b.n	8001918 <__aeabi_ddiv+0xc0>
 8001de6:	000a      	movs	r2, r1
 8001de8:	42bc      	cmp	r4, r7
 8001dea:	d000      	beq.n	8001dee <__aeabi_ddiv+0x596>
 8001dec:	e66e      	b.n	8001acc <__aeabi_ddiv+0x274>
 8001dee:	454b      	cmp	r3, r9
 8001df0:	d000      	beq.n	8001df4 <__aeabi_ddiv+0x59c>
 8001df2:	e66b      	b.n	8001acc <__aeabi_ddiv+0x274>
 8001df4:	e66c      	b.n	8001ad0 <__aeabi_ddiv+0x278>
 8001df6:	4b23      	ldr	r3, [pc, #140]	@ (8001e84 <__aeabi_ddiv+0x62c>)
 8001df8:	4a23      	ldr	r2, [pc, #140]	@ (8001e88 <__aeabi_ddiv+0x630>)
 8001dfa:	4453      	add	r3, sl
 8001dfc:	4592      	cmp	sl, r2
 8001dfe:	da00      	bge.n	8001e02 <__aeabi_ddiv+0x5aa>
 8001e00:	e718      	b.n	8001c34 <__aeabi_ddiv+0x3dc>
 8001e02:	2101      	movs	r1, #1
 8001e04:	4249      	negs	r1, r1
 8001e06:	1d0a      	adds	r2, r1, #4
 8001e08:	428a      	cmp	r2, r1
 8001e0a:	4189      	sbcs	r1, r1
 8001e0c:	4249      	negs	r1, r1
 8001e0e:	448b      	add	fp, r1
 8001e10:	e666      	b.n	8001ae0 <__aeabi_ddiv+0x288>
 8001e12:	210f      	movs	r1, #15
 8001e14:	4011      	ands	r1, r2
 8001e16:	2904      	cmp	r1, #4
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x5c4>
 8001e1a:	e661      	b.n	8001ae0 <__aeabi_ddiv+0x288>
 8001e1c:	0011      	movs	r1, r2
 8001e1e:	e7f2      	b.n	8001e06 <__aeabi_ddiv+0x5ae>
 8001e20:	42bc      	cmp	r4, r7
 8001e22:	d800      	bhi.n	8001e26 <__aeabi_ddiv+0x5ce>
 8001e24:	e60a      	b.n	8001a3c <__aeabi_ddiv+0x1e4>
 8001e26:	2302      	movs	r3, #2
 8001e28:	425b      	negs	r3, r3
 8001e2a:	469c      	mov	ip, r3
 8001e2c:	9900      	ldr	r1, [sp, #0]
 8001e2e:	444f      	add	r7, r9
 8001e30:	454f      	cmp	r7, r9
 8001e32:	419b      	sbcs	r3, r3
 8001e34:	44e3      	add	fp, ip
 8001e36:	468c      	mov	ip, r1
 8001e38:	425b      	negs	r3, r3
 8001e3a:	4463      	add	r3, ip
 8001e3c:	18c0      	adds	r0, r0, r3
 8001e3e:	e5ff      	b.n	8001a40 <__aeabi_ddiv+0x1e8>
 8001e40:	4649      	mov	r1, r9
 8001e42:	9d00      	ldr	r5, [sp, #0]
 8001e44:	0048      	lsls	r0, r1, #1
 8001e46:	4548      	cmp	r0, r9
 8001e48:	4189      	sbcs	r1, r1
 8001e4a:	46ac      	mov	ip, r5
 8001e4c:	4249      	negs	r1, r1
 8001e4e:	4461      	add	r1, ip
 8001e50:	4681      	mov	r9, r0
 8001e52:	3a02      	subs	r2, #2
 8001e54:	1864      	adds	r4, r4, r1
 8001e56:	e7c7      	b.n	8001de8 <__aeabi_ddiv+0x590>
 8001e58:	2480      	movs	r4, #128	@ 0x80
 8001e5a:	465b      	mov	r3, fp
 8001e5c:	0324      	lsls	r4, r4, #12
 8001e5e:	431c      	orrs	r4, r3
 8001e60:	0324      	lsls	r4, r4, #12
 8001e62:	4690      	mov	r8, r2
 8001e64:	4b04      	ldr	r3, [pc, #16]	@ (8001e78 <__aeabi_ddiv+0x620>)
 8001e66:	0b24      	lsrs	r4, r4, #12
 8001e68:	e556      	b.n	8001918 <__aeabi_ddiv+0xc0>
 8001e6a:	4599      	cmp	r9, r3
 8001e6c:	d3e8      	bcc.n	8001e40 <__aeabi_ddiv+0x5e8>
 8001e6e:	000a      	movs	r2, r1
 8001e70:	e7bd      	b.n	8001dee <__aeabi_ddiv+0x596>
 8001e72:	2300      	movs	r3, #0
 8001e74:	e708      	b.n	8001c88 <__aeabi_ddiv+0x430>
 8001e76:	46c0      	nop			@ (mov r8, r8)
 8001e78:	000007ff 	.word	0x000007ff
 8001e7c:	0000043e 	.word	0x0000043e
 8001e80:	0000041e 	.word	0x0000041e
 8001e84:	000003ff 	.word	0x000003ff
 8001e88:	fffffc02 	.word	0xfffffc02

08001e8c <__eqdf2>:
 8001e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8e:	4657      	mov	r7, sl
 8001e90:	46de      	mov	lr, fp
 8001e92:	464e      	mov	r6, r9
 8001e94:	4645      	mov	r5, r8
 8001e96:	b5e0      	push	{r5, r6, r7, lr}
 8001e98:	000d      	movs	r5, r1
 8001e9a:	0004      	movs	r4, r0
 8001e9c:	0fe8      	lsrs	r0, r5, #31
 8001e9e:	4683      	mov	fp, r0
 8001ea0:	0309      	lsls	r1, r1, #12
 8001ea2:	0fd8      	lsrs	r0, r3, #31
 8001ea4:	0b09      	lsrs	r1, r1, #12
 8001ea6:	4682      	mov	sl, r0
 8001ea8:	4819      	ldr	r0, [pc, #100]	@ (8001f10 <__eqdf2+0x84>)
 8001eaa:	468c      	mov	ip, r1
 8001eac:	031f      	lsls	r7, r3, #12
 8001eae:	0069      	lsls	r1, r5, #1
 8001eb0:	005e      	lsls	r6, r3, #1
 8001eb2:	0d49      	lsrs	r1, r1, #21
 8001eb4:	0b3f      	lsrs	r7, r7, #12
 8001eb6:	0d76      	lsrs	r6, r6, #21
 8001eb8:	4281      	cmp	r1, r0
 8001eba:	d018      	beq.n	8001eee <__eqdf2+0x62>
 8001ebc:	4286      	cmp	r6, r0
 8001ebe:	d00f      	beq.n	8001ee0 <__eqdf2+0x54>
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	42b1      	cmp	r1, r6
 8001ec4:	d10d      	bne.n	8001ee2 <__eqdf2+0x56>
 8001ec6:	45bc      	cmp	ip, r7
 8001ec8:	d10b      	bne.n	8001ee2 <__eqdf2+0x56>
 8001eca:	4294      	cmp	r4, r2
 8001ecc:	d109      	bne.n	8001ee2 <__eqdf2+0x56>
 8001ece:	45d3      	cmp	fp, sl
 8001ed0:	d01c      	beq.n	8001f0c <__eqdf2+0x80>
 8001ed2:	2900      	cmp	r1, #0
 8001ed4:	d105      	bne.n	8001ee2 <__eqdf2+0x56>
 8001ed6:	4660      	mov	r0, ip
 8001ed8:	4320      	orrs	r0, r4
 8001eda:	1e43      	subs	r3, r0, #1
 8001edc:	4198      	sbcs	r0, r3
 8001ede:	e000      	b.n	8001ee2 <__eqdf2+0x56>
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	bcf0      	pop	{r4, r5, r6, r7}
 8001ee4:	46bb      	mov	fp, r7
 8001ee6:	46b2      	mov	sl, r6
 8001ee8:	46a9      	mov	r9, r5
 8001eea:	46a0      	mov	r8, r4
 8001eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eee:	2001      	movs	r0, #1
 8001ef0:	428e      	cmp	r6, r1
 8001ef2:	d1f6      	bne.n	8001ee2 <__eqdf2+0x56>
 8001ef4:	4661      	mov	r1, ip
 8001ef6:	4339      	orrs	r1, r7
 8001ef8:	000f      	movs	r7, r1
 8001efa:	4317      	orrs	r7, r2
 8001efc:	4327      	orrs	r7, r4
 8001efe:	d1f0      	bne.n	8001ee2 <__eqdf2+0x56>
 8001f00:	465b      	mov	r3, fp
 8001f02:	4652      	mov	r2, sl
 8001f04:	1a98      	subs	r0, r3, r2
 8001f06:	1e43      	subs	r3, r0, #1
 8001f08:	4198      	sbcs	r0, r3
 8001f0a:	e7ea      	b.n	8001ee2 <__eqdf2+0x56>
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	e7e8      	b.n	8001ee2 <__eqdf2+0x56>
 8001f10:	000007ff 	.word	0x000007ff

08001f14 <__gedf2>:
 8001f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f16:	4657      	mov	r7, sl
 8001f18:	464e      	mov	r6, r9
 8001f1a:	4645      	mov	r5, r8
 8001f1c:	46de      	mov	lr, fp
 8001f1e:	b5e0      	push	{r5, r6, r7, lr}
 8001f20:	000d      	movs	r5, r1
 8001f22:	030f      	lsls	r7, r1, #12
 8001f24:	0b39      	lsrs	r1, r7, #12
 8001f26:	b083      	sub	sp, #12
 8001f28:	0004      	movs	r4, r0
 8001f2a:	4680      	mov	r8, r0
 8001f2c:	9101      	str	r1, [sp, #4]
 8001f2e:	0058      	lsls	r0, r3, #1
 8001f30:	0fe9      	lsrs	r1, r5, #31
 8001f32:	4f31      	ldr	r7, [pc, #196]	@ (8001ff8 <__gedf2+0xe4>)
 8001f34:	0d40      	lsrs	r0, r0, #21
 8001f36:	468c      	mov	ip, r1
 8001f38:	006e      	lsls	r6, r5, #1
 8001f3a:	0319      	lsls	r1, r3, #12
 8001f3c:	4682      	mov	sl, r0
 8001f3e:	4691      	mov	r9, r2
 8001f40:	0d76      	lsrs	r6, r6, #21
 8001f42:	0b09      	lsrs	r1, r1, #12
 8001f44:	0fd8      	lsrs	r0, r3, #31
 8001f46:	42be      	cmp	r6, r7
 8001f48:	d01f      	beq.n	8001f8a <__gedf2+0x76>
 8001f4a:	45ba      	cmp	sl, r7
 8001f4c:	d00f      	beq.n	8001f6e <__gedf2+0x5a>
 8001f4e:	2e00      	cmp	r6, #0
 8001f50:	d12f      	bne.n	8001fb2 <__gedf2+0x9e>
 8001f52:	4655      	mov	r5, sl
 8001f54:	9e01      	ldr	r6, [sp, #4]
 8001f56:	4334      	orrs	r4, r6
 8001f58:	2d00      	cmp	r5, #0
 8001f5a:	d127      	bne.n	8001fac <__gedf2+0x98>
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	d03a      	beq.n	8001fd6 <__gedf2+0xc2>
 8001f60:	2c00      	cmp	r4, #0
 8001f62:	d145      	bne.n	8001ff0 <__gedf2+0xdc>
 8001f64:	2800      	cmp	r0, #0
 8001f66:	d11a      	bne.n	8001f9e <__gedf2+0x8a>
 8001f68:	2001      	movs	r0, #1
 8001f6a:	4240      	negs	r0, r0
 8001f6c:	e017      	b.n	8001f9e <__gedf2+0x8a>
 8001f6e:	4311      	orrs	r1, r2
 8001f70:	d13b      	bne.n	8001fea <__gedf2+0xd6>
 8001f72:	2e00      	cmp	r6, #0
 8001f74:	d102      	bne.n	8001f7c <__gedf2+0x68>
 8001f76:	9f01      	ldr	r7, [sp, #4]
 8001f78:	4327      	orrs	r7, r4
 8001f7a:	d0f3      	beq.n	8001f64 <__gedf2+0x50>
 8001f7c:	4584      	cmp	ip, r0
 8001f7e:	d109      	bne.n	8001f94 <__gedf2+0x80>
 8001f80:	4663      	mov	r3, ip
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <__gedf2+0x54>
 8001f86:	4660      	mov	r0, ip
 8001f88:	e009      	b.n	8001f9e <__gedf2+0x8a>
 8001f8a:	9f01      	ldr	r7, [sp, #4]
 8001f8c:	4327      	orrs	r7, r4
 8001f8e:	d12c      	bne.n	8001fea <__gedf2+0xd6>
 8001f90:	45b2      	cmp	sl, r6
 8001f92:	d024      	beq.n	8001fde <__gedf2+0xca>
 8001f94:	4663      	mov	r3, ip
 8001f96:	2002      	movs	r0, #2
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	4018      	ands	r0, r3
 8001f9c:	3801      	subs	r0, #1
 8001f9e:	b003      	add	sp, #12
 8001fa0:	bcf0      	pop	{r4, r5, r6, r7}
 8001fa2:	46bb      	mov	fp, r7
 8001fa4:	46b2      	mov	sl, r6
 8001fa6:	46a9      	mov	r9, r5
 8001fa8:	46a0      	mov	r8, r4
 8001faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fac:	2c00      	cmp	r4, #0
 8001fae:	d0d9      	beq.n	8001f64 <__gedf2+0x50>
 8001fb0:	e7e4      	b.n	8001f7c <__gedf2+0x68>
 8001fb2:	4654      	mov	r4, sl
 8001fb4:	2c00      	cmp	r4, #0
 8001fb6:	d0ed      	beq.n	8001f94 <__gedf2+0x80>
 8001fb8:	4584      	cmp	ip, r0
 8001fba:	d1eb      	bne.n	8001f94 <__gedf2+0x80>
 8001fbc:	4556      	cmp	r6, sl
 8001fbe:	dce9      	bgt.n	8001f94 <__gedf2+0x80>
 8001fc0:	dbde      	blt.n	8001f80 <__gedf2+0x6c>
 8001fc2:	9b01      	ldr	r3, [sp, #4]
 8001fc4:	428b      	cmp	r3, r1
 8001fc6:	d8e5      	bhi.n	8001f94 <__gedf2+0x80>
 8001fc8:	d1da      	bne.n	8001f80 <__gedf2+0x6c>
 8001fca:	45c8      	cmp	r8, r9
 8001fcc:	d8e2      	bhi.n	8001f94 <__gedf2+0x80>
 8001fce:	2000      	movs	r0, #0
 8001fd0:	45c8      	cmp	r8, r9
 8001fd2:	d2e4      	bcs.n	8001f9e <__gedf2+0x8a>
 8001fd4:	e7d4      	b.n	8001f80 <__gedf2+0x6c>
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	2c00      	cmp	r4, #0
 8001fda:	d0e0      	beq.n	8001f9e <__gedf2+0x8a>
 8001fdc:	e7da      	b.n	8001f94 <__gedf2+0x80>
 8001fde:	4311      	orrs	r1, r2
 8001fe0:	d103      	bne.n	8001fea <__gedf2+0xd6>
 8001fe2:	4584      	cmp	ip, r0
 8001fe4:	d1d6      	bne.n	8001f94 <__gedf2+0x80>
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	e7d9      	b.n	8001f9e <__gedf2+0x8a>
 8001fea:	2002      	movs	r0, #2
 8001fec:	4240      	negs	r0, r0
 8001fee:	e7d6      	b.n	8001f9e <__gedf2+0x8a>
 8001ff0:	4584      	cmp	ip, r0
 8001ff2:	d0e6      	beq.n	8001fc2 <__gedf2+0xae>
 8001ff4:	e7ce      	b.n	8001f94 <__gedf2+0x80>
 8001ff6:	46c0      	nop			@ (mov r8, r8)
 8001ff8:	000007ff 	.word	0x000007ff

08001ffc <__ledf2>:
 8001ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ffe:	4657      	mov	r7, sl
 8002000:	464e      	mov	r6, r9
 8002002:	4645      	mov	r5, r8
 8002004:	46de      	mov	lr, fp
 8002006:	b5e0      	push	{r5, r6, r7, lr}
 8002008:	000d      	movs	r5, r1
 800200a:	030f      	lsls	r7, r1, #12
 800200c:	0004      	movs	r4, r0
 800200e:	4680      	mov	r8, r0
 8002010:	0fe8      	lsrs	r0, r5, #31
 8002012:	0b39      	lsrs	r1, r7, #12
 8002014:	4684      	mov	ip, r0
 8002016:	b083      	sub	sp, #12
 8002018:	0058      	lsls	r0, r3, #1
 800201a:	4f30      	ldr	r7, [pc, #192]	@ (80020dc <__ledf2+0xe0>)
 800201c:	0d40      	lsrs	r0, r0, #21
 800201e:	9101      	str	r1, [sp, #4]
 8002020:	031e      	lsls	r6, r3, #12
 8002022:	0069      	lsls	r1, r5, #1
 8002024:	4682      	mov	sl, r0
 8002026:	4691      	mov	r9, r2
 8002028:	0d49      	lsrs	r1, r1, #21
 800202a:	0b36      	lsrs	r6, r6, #12
 800202c:	0fd8      	lsrs	r0, r3, #31
 800202e:	42b9      	cmp	r1, r7
 8002030:	d020      	beq.n	8002074 <__ledf2+0x78>
 8002032:	45ba      	cmp	sl, r7
 8002034:	d00f      	beq.n	8002056 <__ledf2+0x5a>
 8002036:	2900      	cmp	r1, #0
 8002038:	d12b      	bne.n	8002092 <__ledf2+0x96>
 800203a:	9901      	ldr	r1, [sp, #4]
 800203c:	430c      	orrs	r4, r1
 800203e:	4651      	mov	r1, sl
 8002040:	2900      	cmp	r1, #0
 8002042:	d137      	bne.n	80020b4 <__ledf2+0xb8>
 8002044:	4332      	orrs	r2, r6
 8002046:	d038      	beq.n	80020ba <__ledf2+0xbe>
 8002048:	2c00      	cmp	r4, #0
 800204a:	d144      	bne.n	80020d6 <__ledf2+0xda>
 800204c:	2800      	cmp	r0, #0
 800204e:	d119      	bne.n	8002084 <__ledf2+0x88>
 8002050:	2001      	movs	r0, #1
 8002052:	4240      	negs	r0, r0
 8002054:	e016      	b.n	8002084 <__ledf2+0x88>
 8002056:	4316      	orrs	r6, r2
 8002058:	d113      	bne.n	8002082 <__ledf2+0x86>
 800205a:	2900      	cmp	r1, #0
 800205c:	d102      	bne.n	8002064 <__ledf2+0x68>
 800205e:	9f01      	ldr	r7, [sp, #4]
 8002060:	4327      	orrs	r7, r4
 8002062:	d0f3      	beq.n	800204c <__ledf2+0x50>
 8002064:	4584      	cmp	ip, r0
 8002066:	d020      	beq.n	80020aa <__ledf2+0xae>
 8002068:	4663      	mov	r3, ip
 800206a:	2002      	movs	r0, #2
 800206c:	3b01      	subs	r3, #1
 800206e:	4018      	ands	r0, r3
 8002070:	3801      	subs	r0, #1
 8002072:	e007      	b.n	8002084 <__ledf2+0x88>
 8002074:	9f01      	ldr	r7, [sp, #4]
 8002076:	4327      	orrs	r7, r4
 8002078:	d103      	bne.n	8002082 <__ledf2+0x86>
 800207a:	458a      	cmp	sl, r1
 800207c:	d1f4      	bne.n	8002068 <__ledf2+0x6c>
 800207e:	4316      	orrs	r6, r2
 8002080:	d01f      	beq.n	80020c2 <__ledf2+0xc6>
 8002082:	2002      	movs	r0, #2
 8002084:	b003      	add	sp, #12
 8002086:	bcf0      	pop	{r4, r5, r6, r7}
 8002088:	46bb      	mov	fp, r7
 800208a:	46b2      	mov	sl, r6
 800208c:	46a9      	mov	r9, r5
 800208e:	46a0      	mov	r8, r4
 8002090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002092:	4654      	mov	r4, sl
 8002094:	2c00      	cmp	r4, #0
 8002096:	d0e7      	beq.n	8002068 <__ledf2+0x6c>
 8002098:	4584      	cmp	ip, r0
 800209a:	d1e5      	bne.n	8002068 <__ledf2+0x6c>
 800209c:	4551      	cmp	r1, sl
 800209e:	dce3      	bgt.n	8002068 <__ledf2+0x6c>
 80020a0:	db03      	blt.n	80020aa <__ledf2+0xae>
 80020a2:	9b01      	ldr	r3, [sp, #4]
 80020a4:	42b3      	cmp	r3, r6
 80020a6:	d8df      	bhi.n	8002068 <__ledf2+0x6c>
 80020a8:	d00f      	beq.n	80020ca <__ledf2+0xce>
 80020aa:	4663      	mov	r3, ip
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0cf      	beq.n	8002050 <__ledf2+0x54>
 80020b0:	4660      	mov	r0, ip
 80020b2:	e7e7      	b.n	8002084 <__ledf2+0x88>
 80020b4:	2c00      	cmp	r4, #0
 80020b6:	d0c9      	beq.n	800204c <__ledf2+0x50>
 80020b8:	e7d4      	b.n	8002064 <__ledf2+0x68>
 80020ba:	2000      	movs	r0, #0
 80020bc:	2c00      	cmp	r4, #0
 80020be:	d0e1      	beq.n	8002084 <__ledf2+0x88>
 80020c0:	e7d2      	b.n	8002068 <__ledf2+0x6c>
 80020c2:	4584      	cmp	ip, r0
 80020c4:	d1d0      	bne.n	8002068 <__ledf2+0x6c>
 80020c6:	2000      	movs	r0, #0
 80020c8:	e7dc      	b.n	8002084 <__ledf2+0x88>
 80020ca:	45c8      	cmp	r8, r9
 80020cc:	d8cc      	bhi.n	8002068 <__ledf2+0x6c>
 80020ce:	2000      	movs	r0, #0
 80020d0:	45c8      	cmp	r8, r9
 80020d2:	d2d7      	bcs.n	8002084 <__ledf2+0x88>
 80020d4:	e7e9      	b.n	80020aa <__ledf2+0xae>
 80020d6:	4584      	cmp	ip, r0
 80020d8:	d0e3      	beq.n	80020a2 <__ledf2+0xa6>
 80020da:	e7c5      	b.n	8002068 <__ledf2+0x6c>
 80020dc:	000007ff 	.word	0x000007ff

080020e0 <__aeabi_dmul>:
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	4657      	mov	r7, sl
 80020e4:	46de      	mov	lr, fp
 80020e6:	464e      	mov	r6, r9
 80020e8:	4645      	mov	r5, r8
 80020ea:	b5e0      	push	{r5, r6, r7, lr}
 80020ec:	001f      	movs	r7, r3
 80020ee:	030b      	lsls	r3, r1, #12
 80020f0:	0b1b      	lsrs	r3, r3, #12
 80020f2:	0016      	movs	r6, r2
 80020f4:	469a      	mov	sl, r3
 80020f6:	0fca      	lsrs	r2, r1, #31
 80020f8:	004b      	lsls	r3, r1, #1
 80020fa:	0004      	movs	r4, r0
 80020fc:	4693      	mov	fp, r2
 80020fe:	b087      	sub	sp, #28
 8002100:	0d5b      	lsrs	r3, r3, #21
 8002102:	d100      	bne.n	8002106 <__aeabi_dmul+0x26>
 8002104:	e0d5      	b.n	80022b2 <__aeabi_dmul+0x1d2>
 8002106:	4abb      	ldr	r2, [pc, #748]	@ (80023f4 <__aeabi_dmul+0x314>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d100      	bne.n	800210e <__aeabi_dmul+0x2e>
 800210c:	e0f8      	b.n	8002300 <__aeabi_dmul+0x220>
 800210e:	4651      	mov	r1, sl
 8002110:	0f42      	lsrs	r2, r0, #29
 8002112:	00c9      	lsls	r1, r1, #3
 8002114:	430a      	orrs	r2, r1
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	0409      	lsls	r1, r1, #16
 800211a:	4311      	orrs	r1, r2
 800211c:	00c2      	lsls	r2, r0, #3
 800211e:	4691      	mov	r9, r2
 8002120:	4ab5      	ldr	r2, [pc, #724]	@ (80023f8 <__aeabi_dmul+0x318>)
 8002122:	468a      	mov	sl, r1
 8002124:	189d      	adds	r5, r3, r2
 8002126:	2300      	movs	r3, #0
 8002128:	4698      	mov	r8, r3
 800212a:	9302      	str	r3, [sp, #8]
 800212c:	033c      	lsls	r4, r7, #12
 800212e:	007b      	lsls	r3, r7, #1
 8002130:	0ffa      	lsrs	r2, r7, #31
 8002132:	0030      	movs	r0, r6
 8002134:	0b24      	lsrs	r4, r4, #12
 8002136:	0d5b      	lsrs	r3, r3, #21
 8002138:	9200      	str	r2, [sp, #0]
 800213a:	d100      	bne.n	800213e <__aeabi_dmul+0x5e>
 800213c:	e096      	b.n	800226c <__aeabi_dmul+0x18c>
 800213e:	4aad      	ldr	r2, [pc, #692]	@ (80023f4 <__aeabi_dmul+0x314>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d031      	beq.n	80021a8 <__aeabi_dmul+0xc8>
 8002144:	0f72      	lsrs	r2, r6, #29
 8002146:	00e4      	lsls	r4, r4, #3
 8002148:	4322      	orrs	r2, r4
 800214a:	2480      	movs	r4, #128	@ 0x80
 800214c:	0424      	lsls	r4, r4, #16
 800214e:	4314      	orrs	r4, r2
 8002150:	4aa9      	ldr	r2, [pc, #676]	@ (80023f8 <__aeabi_dmul+0x318>)
 8002152:	00f0      	lsls	r0, r6, #3
 8002154:	4694      	mov	ip, r2
 8002156:	4463      	add	r3, ip
 8002158:	195b      	adds	r3, r3, r5
 800215a:	1c5a      	adds	r2, r3, #1
 800215c:	9201      	str	r2, [sp, #4]
 800215e:	4642      	mov	r2, r8
 8002160:	2600      	movs	r6, #0
 8002162:	2a0a      	cmp	r2, #10
 8002164:	dc42      	bgt.n	80021ec <__aeabi_dmul+0x10c>
 8002166:	465a      	mov	r2, fp
 8002168:	9900      	ldr	r1, [sp, #0]
 800216a:	404a      	eors	r2, r1
 800216c:	4693      	mov	fp, r2
 800216e:	4642      	mov	r2, r8
 8002170:	2a02      	cmp	r2, #2
 8002172:	dc32      	bgt.n	80021da <__aeabi_dmul+0xfa>
 8002174:	3a01      	subs	r2, #1
 8002176:	2a01      	cmp	r2, #1
 8002178:	d900      	bls.n	800217c <__aeabi_dmul+0x9c>
 800217a:	e149      	b.n	8002410 <__aeabi_dmul+0x330>
 800217c:	2e02      	cmp	r6, #2
 800217e:	d100      	bne.n	8002182 <__aeabi_dmul+0xa2>
 8002180:	e0ca      	b.n	8002318 <__aeabi_dmul+0x238>
 8002182:	2e01      	cmp	r6, #1
 8002184:	d13d      	bne.n	8002202 <__aeabi_dmul+0x122>
 8002186:	2300      	movs	r3, #0
 8002188:	2400      	movs	r4, #0
 800218a:	2200      	movs	r2, #0
 800218c:	0010      	movs	r0, r2
 800218e:	465a      	mov	r2, fp
 8002190:	051b      	lsls	r3, r3, #20
 8002192:	4323      	orrs	r3, r4
 8002194:	07d2      	lsls	r2, r2, #31
 8002196:	4313      	orrs	r3, r2
 8002198:	0019      	movs	r1, r3
 800219a:	b007      	add	sp, #28
 800219c:	bcf0      	pop	{r4, r5, r6, r7}
 800219e:	46bb      	mov	fp, r7
 80021a0:	46b2      	mov	sl, r6
 80021a2:	46a9      	mov	r9, r5
 80021a4:	46a0      	mov	r8, r4
 80021a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a8:	4b92      	ldr	r3, [pc, #584]	@ (80023f4 <__aeabi_dmul+0x314>)
 80021aa:	4326      	orrs	r6, r4
 80021ac:	18eb      	adds	r3, r5, r3
 80021ae:	2e00      	cmp	r6, #0
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dmul+0xd4>
 80021b2:	e0bb      	b.n	800232c <__aeabi_dmul+0x24c>
 80021b4:	2203      	movs	r2, #3
 80021b6:	4641      	mov	r1, r8
 80021b8:	4311      	orrs	r1, r2
 80021ba:	465a      	mov	r2, fp
 80021bc:	4688      	mov	r8, r1
 80021be:	9900      	ldr	r1, [sp, #0]
 80021c0:	404a      	eors	r2, r1
 80021c2:	2180      	movs	r1, #128	@ 0x80
 80021c4:	0109      	lsls	r1, r1, #4
 80021c6:	468c      	mov	ip, r1
 80021c8:	0029      	movs	r1, r5
 80021ca:	4461      	add	r1, ip
 80021cc:	9101      	str	r1, [sp, #4]
 80021ce:	4641      	mov	r1, r8
 80021d0:	290a      	cmp	r1, #10
 80021d2:	dd00      	ble.n	80021d6 <__aeabi_dmul+0xf6>
 80021d4:	e233      	b.n	800263e <__aeabi_dmul+0x55e>
 80021d6:	4693      	mov	fp, r2
 80021d8:	2603      	movs	r6, #3
 80021da:	4642      	mov	r2, r8
 80021dc:	2701      	movs	r7, #1
 80021de:	4097      	lsls	r7, r2
 80021e0:	21a6      	movs	r1, #166	@ 0xa6
 80021e2:	003a      	movs	r2, r7
 80021e4:	00c9      	lsls	r1, r1, #3
 80021e6:	400a      	ands	r2, r1
 80021e8:	420f      	tst	r7, r1
 80021ea:	d031      	beq.n	8002250 <__aeabi_dmul+0x170>
 80021ec:	9e02      	ldr	r6, [sp, #8]
 80021ee:	2e02      	cmp	r6, #2
 80021f0:	d100      	bne.n	80021f4 <__aeabi_dmul+0x114>
 80021f2:	e235      	b.n	8002660 <__aeabi_dmul+0x580>
 80021f4:	2e03      	cmp	r6, #3
 80021f6:	d100      	bne.n	80021fa <__aeabi_dmul+0x11a>
 80021f8:	e1d2      	b.n	80025a0 <__aeabi_dmul+0x4c0>
 80021fa:	4654      	mov	r4, sl
 80021fc:	4648      	mov	r0, r9
 80021fe:	2e01      	cmp	r6, #1
 8002200:	d0c1      	beq.n	8002186 <__aeabi_dmul+0xa6>
 8002202:	9a01      	ldr	r2, [sp, #4]
 8002204:	4b7d      	ldr	r3, [pc, #500]	@ (80023fc <__aeabi_dmul+0x31c>)
 8002206:	4694      	mov	ip, r2
 8002208:	4463      	add	r3, ip
 800220a:	2b00      	cmp	r3, #0
 800220c:	dc00      	bgt.n	8002210 <__aeabi_dmul+0x130>
 800220e:	e0c0      	b.n	8002392 <__aeabi_dmul+0x2b2>
 8002210:	0742      	lsls	r2, r0, #29
 8002212:	d009      	beq.n	8002228 <__aeabi_dmul+0x148>
 8002214:	220f      	movs	r2, #15
 8002216:	4002      	ands	r2, r0
 8002218:	2a04      	cmp	r2, #4
 800221a:	d005      	beq.n	8002228 <__aeabi_dmul+0x148>
 800221c:	1d02      	adds	r2, r0, #4
 800221e:	4282      	cmp	r2, r0
 8002220:	4180      	sbcs	r0, r0
 8002222:	4240      	negs	r0, r0
 8002224:	1824      	adds	r4, r4, r0
 8002226:	0010      	movs	r0, r2
 8002228:	01e2      	lsls	r2, r4, #7
 800222a:	d506      	bpl.n	800223a <__aeabi_dmul+0x15a>
 800222c:	4b74      	ldr	r3, [pc, #464]	@ (8002400 <__aeabi_dmul+0x320>)
 800222e:	9a01      	ldr	r2, [sp, #4]
 8002230:	401c      	ands	r4, r3
 8002232:	2380      	movs	r3, #128	@ 0x80
 8002234:	4694      	mov	ip, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4463      	add	r3, ip
 800223a:	4a72      	ldr	r2, [pc, #456]	@ (8002404 <__aeabi_dmul+0x324>)
 800223c:	4293      	cmp	r3, r2
 800223e:	dc6b      	bgt.n	8002318 <__aeabi_dmul+0x238>
 8002240:	0762      	lsls	r2, r4, #29
 8002242:	08c0      	lsrs	r0, r0, #3
 8002244:	0264      	lsls	r4, r4, #9
 8002246:	055b      	lsls	r3, r3, #21
 8002248:	4302      	orrs	r2, r0
 800224a:	0b24      	lsrs	r4, r4, #12
 800224c:	0d5b      	lsrs	r3, r3, #21
 800224e:	e79d      	b.n	800218c <__aeabi_dmul+0xac>
 8002250:	2190      	movs	r1, #144	@ 0x90
 8002252:	0089      	lsls	r1, r1, #2
 8002254:	420f      	tst	r7, r1
 8002256:	d163      	bne.n	8002320 <__aeabi_dmul+0x240>
 8002258:	2288      	movs	r2, #136	@ 0x88
 800225a:	423a      	tst	r2, r7
 800225c:	d100      	bne.n	8002260 <__aeabi_dmul+0x180>
 800225e:	e0d7      	b.n	8002410 <__aeabi_dmul+0x330>
 8002260:	9b00      	ldr	r3, [sp, #0]
 8002262:	46a2      	mov	sl, r4
 8002264:	469b      	mov	fp, r3
 8002266:	4681      	mov	r9, r0
 8002268:	9602      	str	r6, [sp, #8]
 800226a:	e7bf      	b.n	80021ec <__aeabi_dmul+0x10c>
 800226c:	0023      	movs	r3, r4
 800226e:	4333      	orrs	r3, r6
 8002270:	d100      	bne.n	8002274 <__aeabi_dmul+0x194>
 8002272:	e07f      	b.n	8002374 <__aeabi_dmul+0x294>
 8002274:	2c00      	cmp	r4, #0
 8002276:	d100      	bne.n	800227a <__aeabi_dmul+0x19a>
 8002278:	e1ad      	b.n	80025d6 <__aeabi_dmul+0x4f6>
 800227a:	0020      	movs	r0, r4
 800227c:	f000 fe6a 	bl	8002f54 <__clzsi2>
 8002280:	0002      	movs	r2, r0
 8002282:	0003      	movs	r3, r0
 8002284:	3a0b      	subs	r2, #11
 8002286:	201d      	movs	r0, #29
 8002288:	0019      	movs	r1, r3
 800228a:	1a82      	subs	r2, r0, r2
 800228c:	0030      	movs	r0, r6
 800228e:	3908      	subs	r1, #8
 8002290:	40d0      	lsrs	r0, r2
 8002292:	408c      	lsls	r4, r1
 8002294:	4304      	orrs	r4, r0
 8002296:	0030      	movs	r0, r6
 8002298:	4088      	lsls	r0, r1
 800229a:	4a5b      	ldr	r2, [pc, #364]	@ (8002408 <__aeabi_dmul+0x328>)
 800229c:	1aeb      	subs	r3, r5, r3
 800229e:	4694      	mov	ip, r2
 80022a0:	4463      	add	r3, ip
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	9201      	str	r2, [sp, #4]
 80022a6:	4642      	mov	r2, r8
 80022a8:	2600      	movs	r6, #0
 80022aa:	2a0a      	cmp	r2, #10
 80022ac:	dc00      	bgt.n	80022b0 <__aeabi_dmul+0x1d0>
 80022ae:	e75a      	b.n	8002166 <__aeabi_dmul+0x86>
 80022b0:	e79c      	b.n	80021ec <__aeabi_dmul+0x10c>
 80022b2:	4653      	mov	r3, sl
 80022b4:	4303      	orrs	r3, r0
 80022b6:	4699      	mov	r9, r3
 80022b8:	d054      	beq.n	8002364 <__aeabi_dmul+0x284>
 80022ba:	4653      	mov	r3, sl
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d100      	bne.n	80022c2 <__aeabi_dmul+0x1e2>
 80022c0:	e177      	b.n	80025b2 <__aeabi_dmul+0x4d2>
 80022c2:	4650      	mov	r0, sl
 80022c4:	f000 fe46 	bl	8002f54 <__clzsi2>
 80022c8:	230b      	movs	r3, #11
 80022ca:	425b      	negs	r3, r3
 80022cc:	469c      	mov	ip, r3
 80022ce:	0002      	movs	r2, r0
 80022d0:	4484      	add	ip, r0
 80022d2:	0011      	movs	r1, r2
 80022d4:	4650      	mov	r0, sl
 80022d6:	3908      	subs	r1, #8
 80022d8:	4088      	lsls	r0, r1
 80022da:	231d      	movs	r3, #29
 80022dc:	4680      	mov	r8, r0
 80022de:	4660      	mov	r0, ip
 80022e0:	1a1b      	subs	r3, r3, r0
 80022e2:	0020      	movs	r0, r4
 80022e4:	40d8      	lsrs	r0, r3
 80022e6:	0003      	movs	r3, r0
 80022e8:	4640      	mov	r0, r8
 80022ea:	4303      	orrs	r3, r0
 80022ec:	469a      	mov	sl, r3
 80022ee:	0023      	movs	r3, r4
 80022f0:	408b      	lsls	r3, r1
 80022f2:	4699      	mov	r9, r3
 80022f4:	2300      	movs	r3, #0
 80022f6:	4d44      	ldr	r5, [pc, #272]	@ (8002408 <__aeabi_dmul+0x328>)
 80022f8:	4698      	mov	r8, r3
 80022fa:	1aad      	subs	r5, r5, r2
 80022fc:	9302      	str	r3, [sp, #8]
 80022fe:	e715      	b.n	800212c <__aeabi_dmul+0x4c>
 8002300:	4652      	mov	r2, sl
 8002302:	4302      	orrs	r2, r0
 8002304:	4691      	mov	r9, r2
 8002306:	d126      	bne.n	8002356 <__aeabi_dmul+0x276>
 8002308:	2200      	movs	r2, #0
 800230a:	001d      	movs	r5, r3
 800230c:	2302      	movs	r3, #2
 800230e:	4692      	mov	sl, r2
 8002310:	3208      	adds	r2, #8
 8002312:	4690      	mov	r8, r2
 8002314:	9302      	str	r3, [sp, #8]
 8002316:	e709      	b.n	800212c <__aeabi_dmul+0x4c>
 8002318:	2400      	movs	r4, #0
 800231a:	2200      	movs	r2, #0
 800231c:	4b35      	ldr	r3, [pc, #212]	@ (80023f4 <__aeabi_dmul+0x314>)
 800231e:	e735      	b.n	800218c <__aeabi_dmul+0xac>
 8002320:	2300      	movs	r3, #0
 8002322:	2480      	movs	r4, #128	@ 0x80
 8002324:	469b      	mov	fp, r3
 8002326:	0324      	lsls	r4, r4, #12
 8002328:	4b32      	ldr	r3, [pc, #200]	@ (80023f4 <__aeabi_dmul+0x314>)
 800232a:	e72f      	b.n	800218c <__aeabi_dmul+0xac>
 800232c:	2202      	movs	r2, #2
 800232e:	4641      	mov	r1, r8
 8002330:	4311      	orrs	r1, r2
 8002332:	2280      	movs	r2, #128	@ 0x80
 8002334:	0112      	lsls	r2, r2, #4
 8002336:	4694      	mov	ip, r2
 8002338:	002a      	movs	r2, r5
 800233a:	4462      	add	r2, ip
 800233c:	4688      	mov	r8, r1
 800233e:	9201      	str	r2, [sp, #4]
 8002340:	290a      	cmp	r1, #10
 8002342:	dd00      	ble.n	8002346 <__aeabi_dmul+0x266>
 8002344:	e752      	b.n	80021ec <__aeabi_dmul+0x10c>
 8002346:	465a      	mov	r2, fp
 8002348:	2000      	movs	r0, #0
 800234a:	9900      	ldr	r1, [sp, #0]
 800234c:	0004      	movs	r4, r0
 800234e:	404a      	eors	r2, r1
 8002350:	4693      	mov	fp, r2
 8002352:	2602      	movs	r6, #2
 8002354:	e70b      	b.n	800216e <__aeabi_dmul+0x8e>
 8002356:	220c      	movs	r2, #12
 8002358:	001d      	movs	r5, r3
 800235a:	2303      	movs	r3, #3
 800235c:	4681      	mov	r9, r0
 800235e:	4690      	mov	r8, r2
 8002360:	9302      	str	r3, [sp, #8]
 8002362:	e6e3      	b.n	800212c <__aeabi_dmul+0x4c>
 8002364:	2300      	movs	r3, #0
 8002366:	469a      	mov	sl, r3
 8002368:	3304      	adds	r3, #4
 800236a:	4698      	mov	r8, r3
 800236c:	3b03      	subs	r3, #3
 800236e:	2500      	movs	r5, #0
 8002370:	9302      	str	r3, [sp, #8]
 8002372:	e6db      	b.n	800212c <__aeabi_dmul+0x4c>
 8002374:	4642      	mov	r2, r8
 8002376:	3301      	adds	r3, #1
 8002378:	431a      	orrs	r2, r3
 800237a:	002b      	movs	r3, r5
 800237c:	4690      	mov	r8, r2
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	9201      	str	r2, [sp, #4]
 8002382:	4642      	mov	r2, r8
 8002384:	2400      	movs	r4, #0
 8002386:	2000      	movs	r0, #0
 8002388:	2601      	movs	r6, #1
 800238a:	2a0a      	cmp	r2, #10
 800238c:	dc00      	bgt.n	8002390 <__aeabi_dmul+0x2b0>
 800238e:	e6ea      	b.n	8002166 <__aeabi_dmul+0x86>
 8002390:	e72c      	b.n	80021ec <__aeabi_dmul+0x10c>
 8002392:	2201      	movs	r2, #1
 8002394:	1ad2      	subs	r2, r2, r3
 8002396:	2a38      	cmp	r2, #56	@ 0x38
 8002398:	dd00      	ble.n	800239c <__aeabi_dmul+0x2bc>
 800239a:	e6f4      	b.n	8002186 <__aeabi_dmul+0xa6>
 800239c:	2a1f      	cmp	r2, #31
 800239e:	dc00      	bgt.n	80023a2 <__aeabi_dmul+0x2c2>
 80023a0:	e12a      	b.n	80025f8 <__aeabi_dmul+0x518>
 80023a2:	211f      	movs	r1, #31
 80023a4:	4249      	negs	r1, r1
 80023a6:	1acb      	subs	r3, r1, r3
 80023a8:	0021      	movs	r1, r4
 80023aa:	40d9      	lsrs	r1, r3
 80023ac:	000b      	movs	r3, r1
 80023ae:	2a20      	cmp	r2, #32
 80023b0:	d005      	beq.n	80023be <__aeabi_dmul+0x2de>
 80023b2:	4a16      	ldr	r2, [pc, #88]	@ (800240c <__aeabi_dmul+0x32c>)
 80023b4:	9d01      	ldr	r5, [sp, #4]
 80023b6:	4694      	mov	ip, r2
 80023b8:	4465      	add	r5, ip
 80023ba:	40ac      	lsls	r4, r5
 80023bc:	4320      	orrs	r0, r4
 80023be:	1e42      	subs	r2, r0, #1
 80023c0:	4190      	sbcs	r0, r2
 80023c2:	4318      	orrs	r0, r3
 80023c4:	2307      	movs	r3, #7
 80023c6:	0019      	movs	r1, r3
 80023c8:	2400      	movs	r4, #0
 80023ca:	4001      	ands	r1, r0
 80023cc:	4203      	tst	r3, r0
 80023ce:	d00c      	beq.n	80023ea <__aeabi_dmul+0x30a>
 80023d0:	230f      	movs	r3, #15
 80023d2:	4003      	ands	r3, r0
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d100      	bne.n	80023da <__aeabi_dmul+0x2fa>
 80023d8:	e140      	b.n	800265c <__aeabi_dmul+0x57c>
 80023da:	1d03      	adds	r3, r0, #4
 80023dc:	4283      	cmp	r3, r0
 80023de:	41a4      	sbcs	r4, r4
 80023e0:	0018      	movs	r0, r3
 80023e2:	4264      	negs	r4, r4
 80023e4:	0761      	lsls	r1, r4, #29
 80023e6:	0264      	lsls	r4, r4, #9
 80023e8:	0b24      	lsrs	r4, r4, #12
 80023ea:	08c2      	lsrs	r2, r0, #3
 80023ec:	2300      	movs	r3, #0
 80023ee:	430a      	orrs	r2, r1
 80023f0:	e6cc      	b.n	800218c <__aeabi_dmul+0xac>
 80023f2:	46c0      	nop			@ (mov r8, r8)
 80023f4:	000007ff 	.word	0x000007ff
 80023f8:	fffffc01 	.word	0xfffffc01
 80023fc:	000003ff 	.word	0x000003ff
 8002400:	feffffff 	.word	0xfeffffff
 8002404:	000007fe 	.word	0x000007fe
 8002408:	fffffc0d 	.word	0xfffffc0d
 800240c:	0000043e 	.word	0x0000043e
 8002410:	4649      	mov	r1, r9
 8002412:	464a      	mov	r2, r9
 8002414:	0409      	lsls	r1, r1, #16
 8002416:	0c09      	lsrs	r1, r1, #16
 8002418:	000d      	movs	r5, r1
 800241a:	0c16      	lsrs	r6, r2, #16
 800241c:	0c02      	lsrs	r2, r0, #16
 800241e:	0400      	lsls	r0, r0, #16
 8002420:	0c00      	lsrs	r0, r0, #16
 8002422:	4345      	muls	r5, r0
 8002424:	46ac      	mov	ip, r5
 8002426:	0005      	movs	r5, r0
 8002428:	4375      	muls	r5, r6
 800242a:	46a8      	mov	r8, r5
 800242c:	0015      	movs	r5, r2
 800242e:	000f      	movs	r7, r1
 8002430:	4375      	muls	r5, r6
 8002432:	9200      	str	r2, [sp, #0]
 8002434:	9502      	str	r5, [sp, #8]
 8002436:	002a      	movs	r2, r5
 8002438:	9d00      	ldr	r5, [sp, #0]
 800243a:	436f      	muls	r7, r5
 800243c:	4665      	mov	r5, ip
 800243e:	0c2d      	lsrs	r5, r5, #16
 8002440:	46a9      	mov	r9, r5
 8002442:	4447      	add	r7, r8
 8002444:	444f      	add	r7, r9
 8002446:	45b8      	cmp	r8, r7
 8002448:	d905      	bls.n	8002456 <__aeabi_dmul+0x376>
 800244a:	0015      	movs	r5, r2
 800244c:	2280      	movs	r2, #128	@ 0x80
 800244e:	0252      	lsls	r2, r2, #9
 8002450:	4690      	mov	r8, r2
 8002452:	4445      	add	r5, r8
 8002454:	9502      	str	r5, [sp, #8]
 8002456:	0c3d      	lsrs	r5, r7, #16
 8002458:	9503      	str	r5, [sp, #12]
 800245a:	4665      	mov	r5, ip
 800245c:	042d      	lsls	r5, r5, #16
 800245e:	043f      	lsls	r7, r7, #16
 8002460:	0c2d      	lsrs	r5, r5, #16
 8002462:	46ac      	mov	ip, r5
 8002464:	003d      	movs	r5, r7
 8002466:	4465      	add	r5, ip
 8002468:	9504      	str	r5, [sp, #16]
 800246a:	0c25      	lsrs	r5, r4, #16
 800246c:	0424      	lsls	r4, r4, #16
 800246e:	0c24      	lsrs	r4, r4, #16
 8002470:	46ac      	mov	ip, r5
 8002472:	0025      	movs	r5, r4
 8002474:	4375      	muls	r5, r6
 8002476:	46a8      	mov	r8, r5
 8002478:	4665      	mov	r5, ip
 800247a:	000f      	movs	r7, r1
 800247c:	4369      	muls	r1, r5
 800247e:	4441      	add	r1, r8
 8002480:	4689      	mov	r9, r1
 8002482:	4367      	muls	r7, r4
 8002484:	0c39      	lsrs	r1, r7, #16
 8002486:	4449      	add	r1, r9
 8002488:	436e      	muls	r6, r5
 800248a:	4588      	cmp	r8, r1
 800248c:	d903      	bls.n	8002496 <__aeabi_dmul+0x3b6>
 800248e:	2280      	movs	r2, #128	@ 0x80
 8002490:	0252      	lsls	r2, r2, #9
 8002492:	4690      	mov	r8, r2
 8002494:	4446      	add	r6, r8
 8002496:	0c0d      	lsrs	r5, r1, #16
 8002498:	46a8      	mov	r8, r5
 800249a:	0035      	movs	r5, r6
 800249c:	4445      	add	r5, r8
 800249e:	9505      	str	r5, [sp, #20]
 80024a0:	9d03      	ldr	r5, [sp, #12]
 80024a2:	043f      	lsls	r7, r7, #16
 80024a4:	46a8      	mov	r8, r5
 80024a6:	0c3f      	lsrs	r7, r7, #16
 80024a8:	0409      	lsls	r1, r1, #16
 80024aa:	19c9      	adds	r1, r1, r7
 80024ac:	4488      	add	r8, r1
 80024ae:	4645      	mov	r5, r8
 80024b0:	9503      	str	r5, [sp, #12]
 80024b2:	4655      	mov	r5, sl
 80024b4:	042e      	lsls	r6, r5, #16
 80024b6:	0c36      	lsrs	r6, r6, #16
 80024b8:	0c2f      	lsrs	r7, r5, #16
 80024ba:	0035      	movs	r5, r6
 80024bc:	4345      	muls	r5, r0
 80024be:	4378      	muls	r0, r7
 80024c0:	4681      	mov	r9, r0
 80024c2:	0038      	movs	r0, r7
 80024c4:	46a8      	mov	r8, r5
 80024c6:	0c2d      	lsrs	r5, r5, #16
 80024c8:	46aa      	mov	sl, r5
 80024ca:	9a00      	ldr	r2, [sp, #0]
 80024cc:	4350      	muls	r0, r2
 80024ce:	4372      	muls	r2, r6
 80024d0:	444a      	add	r2, r9
 80024d2:	4452      	add	r2, sl
 80024d4:	4591      	cmp	r9, r2
 80024d6:	d903      	bls.n	80024e0 <__aeabi_dmul+0x400>
 80024d8:	2580      	movs	r5, #128	@ 0x80
 80024da:	026d      	lsls	r5, r5, #9
 80024dc:	46a9      	mov	r9, r5
 80024de:	4448      	add	r0, r9
 80024e0:	0c15      	lsrs	r5, r2, #16
 80024e2:	46a9      	mov	r9, r5
 80024e4:	4645      	mov	r5, r8
 80024e6:	042d      	lsls	r5, r5, #16
 80024e8:	0c2d      	lsrs	r5, r5, #16
 80024ea:	46a8      	mov	r8, r5
 80024ec:	4665      	mov	r5, ip
 80024ee:	437d      	muls	r5, r7
 80024f0:	0412      	lsls	r2, r2, #16
 80024f2:	4448      	add	r0, r9
 80024f4:	4490      	add	r8, r2
 80024f6:	46a9      	mov	r9, r5
 80024f8:	0032      	movs	r2, r6
 80024fa:	4665      	mov	r5, ip
 80024fc:	4362      	muls	r2, r4
 80024fe:	436e      	muls	r6, r5
 8002500:	437c      	muls	r4, r7
 8002502:	0c17      	lsrs	r7, r2, #16
 8002504:	1936      	adds	r6, r6, r4
 8002506:	19bf      	adds	r7, r7, r6
 8002508:	42bc      	cmp	r4, r7
 800250a:	d903      	bls.n	8002514 <__aeabi_dmul+0x434>
 800250c:	2480      	movs	r4, #128	@ 0x80
 800250e:	0264      	lsls	r4, r4, #9
 8002510:	46a4      	mov	ip, r4
 8002512:	44e1      	add	r9, ip
 8002514:	9c02      	ldr	r4, [sp, #8]
 8002516:	9e03      	ldr	r6, [sp, #12]
 8002518:	46a4      	mov	ip, r4
 800251a:	9d05      	ldr	r5, [sp, #20]
 800251c:	4466      	add	r6, ip
 800251e:	428e      	cmp	r6, r1
 8002520:	4189      	sbcs	r1, r1
 8002522:	46ac      	mov	ip, r5
 8002524:	0412      	lsls	r2, r2, #16
 8002526:	043c      	lsls	r4, r7, #16
 8002528:	0c12      	lsrs	r2, r2, #16
 800252a:	18a2      	adds	r2, r4, r2
 800252c:	4462      	add	r2, ip
 800252e:	4249      	negs	r1, r1
 8002530:	1854      	adds	r4, r2, r1
 8002532:	4446      	add	r6, r8
 8002534:	46a4      	mov	ip, r4
 8002536:	4546      	cmp	r6, r8
 8002538:	41a4      	sbcs	r4, r4
 800253a:	4682      	mov	sl, r0
 800253c:	4264      	negs	r4, r4
 800253e:	46a0      	mov	r8, r4
 8002540:	42aa      	cmp	r2, r5
 8002542:	4192      	sbcs	r2, r2
 8002544:	458c      	cmp	ip, r1
 8002546:	4189      	sbcs	r1, r1
 8002548:	44e2      	add	sl, ip
 800254a:	44d0      	add	r8, sl
 800254c:	4249      	negs	r1, r1
 800254e:	4252      	negs	r2, r2
 8002550:	430a      	orrs	r2, r1
 8002552:	45a0      	cmp	r8, r4
 8002554:	41a4      	sbcs	r4, r4
 8002556:	4582      	cmp	sl, r0
 8002558:	4189      	sbcs	r1, r1
 800255a:	4264      	negs	r4, r4
 800255c:	4249      	negs	r1, r1
 800255e:	430c      	orrs	r4, r1
 8002560:	4641      	mov	r1, r8
 8002562:	0c3f      	lsrs	r7, r7, #16
 8002564:	19d2      	adds	r2, r2, r7
 8002566:	1912      	adds	r2, r2, r4
 8002568:	0dcc      	lsrs	r4, r1, #23
 800256a:	9904      	ldr	r1, [sp, #16]
 800256c:	0270      	lsls	r0, r6, #9
 800256e:	4308      	orrs	r0, r1
 8002570:	1e41      	subs	r1, r0, #1
 8002572:	4188      	sbcs	r0, r1
 8002574:	4641      	mov	r1, r8
 8002576:	444a      	add	r2, r9
 8002578:	0df6      	lsrs	r6, r6, #23
 800257a:	0252      	lsls	r2, r2, #9
 800257c:	4330      	orrs	r0, r6
 800257e:	0249      	lsls	r1, r1, #9
 8002580:	4314      	orrs	r4, r2
 8002582:	4308      	orrs	r0, r1
 8002584:	01d2      	lsls	r2, r2, #7
 8002586:	d535      	bpl.n	80025f4 <__aeabi_dmul+0x514>
 8002588:	2201      	movs	r2, #1
 800258a:	0843      	lsrs	r3, r0, #1
 800258c:	4002      	ands	r2, r0
 800258e:	4313      	orrs	r3, r2
 8002590:	07e0      	lsls	r0, r4, #31
 8002592:	4318      	orrs	r0, r3
 8002594:	0864      	lsrs	r4, r4, #1
 8002596:	e634      	b.n	8002202 <__aeabi_dmul+0x122>
 8002598:	9b00      	ldr	r3, [sp, #0]
 800259a:	46a2      	mov	sl, r4
 800259c:	469b      	mov	fp, r3
 800259e:	4681      	mov	r9, r0
 80025a0:	2480      	movs	r4, #128	@ 0x80
 80025a2:	4653      	mov	r3, sl
 80025a4:	0324      	lsls	r4, r4, #12
 80025a6:	431c      	orrs	r4, r3
 80025a8:	0324      	lsls	r4, r4, #12
 80025aa:	464a      	mov	r2, r9
 80025ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002668 <__aeabi_dmul+0x588>)
 80025ae:	0b24      	lsrs	r4, r4, #12
 80025b0:	e5ec      	b.n	800218c <__aeabi_dmul+0xac>
 80025b2:	f000 fccf 	bl	8002f54 <__clzsi2>
 80025b6:	2315      	movs	r3, #21
 80025b8:	469c      	mov	ip, r3
 80025ba:	4484      	add	ip, r0
 80025bc:	0002      	movs	r2, r0
 80025be:	4663      	mov	r3, ip
 80025c0:	3220      	adds	r2, #32
 80025c2:	2b1c      	cmp	r3, #28
 80025c4:	dc00      	bgt.n	80025c8 <__aeabi_dmul+0x4e8>
 80025c6:	e684      	b.n	80022d2 <__aeabi_dmul+0x1f2>
 80025c8:	2300      	movs	r3, #0
 80025ca:	4699      	mov	r9, r3
 80025cc:	0023      	movs	r3, r4
 80025ce:	3808      	subs	r0, #8
 80025d0:	4083      	lsls	r3, r0
 80025d2:	469a      	mov	sl, r3
 80025d4:	e68e      	b.n	80022f4 <__aeabi_dmul+0x214>
 80025d6:	f000 fcbd 	bl	8002f54 <__clzsi2>
 80025da:	0002      	movs	r2, r0
 80025dc:	0003      	movs	r3, r0
 80025de:	3215      	adds	r2, #21
 80025e0:	3320      	adds	r3, #32
 80025e2:	2a1c      	cmp	r2, #28
 80025e4:	dc00      	bgt.n	80025e8 <__aeabi_dmul+0x508>
 80025e6:	e64e      	b.n	8002286 <__aeabi_dmul+0x1a6>
 80025e8:	0002      	movs	r2, r0
 80025ea:	0034      	movs	r4, r6
 80025ec:	3a08      	subs	r2, #8
 80025ee:	2000      	movs	r0, #0
 80025f0:	4094      	lsls	r4, r2
 80025f2:	e652      	b.n	800229a <__aeabi_dmul+0x1ba>
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	e604      	b.n	8002202 <__aeabi_dmul+0x122>
 80025f8:	4b1c      	ldr	r3, [pc, #112]	@ (800266c <__aeabi_dmul+0x58c>)
 80025fa:	0021      	movs	r1, r4
 80025fc:	469c      	mov	ip, r3
 80025fe:	0003      	movs	r3, r0
 8002600:	9d01      	ldr	r5, [sp, #4]
 8002602:	40d3      	lsrs	r3, r2
 8002604:	4465      	add	r5, ip
 8002606:	40a9      	lsls	r1, r5
 8002608:	4319      	orrs	r1, r3
 800260a:	0003      	movs	r3, r0
 800260c:	40ab      	lsls	r3, r5
 800260e:	1e58      	subs	r0, r3, #1
 8002610:	4183      	sbcs	r3, r0
 8002612:	4319      	orrs	r1, r3
 8002614:	0008      	movs	r0, r1
 8002616:	40d4      	lsrs	r4, r2
 8002618:	074b      	lsls	r3, r1, #29
 800261a:	d009      	beq.n	8002630 <__aeabi_dmul+0x550>
 800261c:	230f      	movs	r3, #15
 800261e:	400b      	ands	r3, r1
 8002620:	2b04      	cmp	r3, #4
 8002622:	d005      	beq.n	8002630 <__aeabi_dmul+0x550>
 8002624:	1d0b      	adds	r3, r1, #4
 8002626:	428b      	cmp	r3, r1
 8002628:	4180      	sbcs	r0, r0
 800262a:	4240      	negs	r0, r0
 800262c:	1824      	adds	r4, r4, r0
 800262e:	0018      	movs	r0, r3
 8002630:	0223      	lsls	r3, r4, #8
 8002632:	d400      	bmi.n	8002636 <__aeabi_dmul+0x556>
 8002634:	e6d6      	b.n	80023e4 <__aeabi_dmul+0x304>
 8002636:	2301      	movs	r3, #1
 8002638:	2400      	movs	r4, #0
 800263a:	2200      	movs	r2, #0
 800263c:	e5a6      	b.n	800218c <__aeabi_dmul+0xac>
 800263e:	290f      	cmp	r1, #15
 8002640:	d1aa      	bne.n	8002598 <__aeabi_dmul+0x4b8>
 8002642:	2380      	movs	r3, #128	@ 0x80
 8002644:	4652      	mov	r2, sl
 8002646:	031b      	lsls	r3, r3, #12
 8002648:	421a      	tst	r2, r3
 800264a:	d0a9      	beq.n	80025a0 <__aeabi_dmul+0x4c0>
 800264c:	421c      	tst	r4, r3
 800264e:	d1a7      	bne.n	80025a0 <__aeabi_dmul+0x4c0>
 8002650:	431c      	orrs	r4, r3
 8002652:	9b00      	ldr	r3, [sp, #0]
 8002654:	0002      	movs	r2, r0
 8002656:	469b      	mov	fp, r3
 8002658:	4b03      	ldr	r3, [pc, #12]	@ (8002668 <__aeabi_dmul+0x588>)
 800265a:	e597      	b.n	800218c <__aeabi_dmul+0xac>
 800265c:	2400      	movs	r4, #0
 800265e:	e6c1      	b.n	80023e4 <__aeabi_dmul+0x304>
 8002660:	2400      	movs	r4, #0
 8002662:	4b01      	ldr	r3, [pc, #4]	@ (8002668 <__aeabi_dmul+0x588>)
 8002664:	0022      	movs	r2, r4
 8002666:	e591      	b.n	800218c <__aeabi_dmul+0xac>
 8002668:	000007ff 	.word	0x000007ff
 800266c:	0000041e 	.word	0x0000041e

08002670 <__aeabi_dsub>:
 8002670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002672:	464e      	mov	r6, r9
 8002674:	4645      	mov	r5, r8
 8002676:	46de      	mov	lr, fp
 8002678:	4657      	mov	r7, sl
 800267a:	b5e0      	push	{r5, r6, r7, lr}
 800267c:	b085      	sub	sp, #20
 800267e:	9000      	str	r0, [sp, #0]
 8002680:	9101      	str	r1, [sp, #4]
 8002682:	030c      	lsls	r4, r1, #12
 8002684:	004f      	lsls	r7, r1, #1
 8002686:	0fce      	lsrs	r6, r1, #31
 8002688:	0a61      	lsrs	r1, r4, #9
 800268a:	9c00      	ldr	r4, [sp, #0]
 800268c:	46b0      	mov	r8, r6
 800268e:	0f64      	lsrs	r4, r4, #29
 8002690:	430c      	orrs	r4, r1
 8002692:	9900      	ldr	r1, [sp, #0]
 8002694:	0d7f      	lsrs	r7, r7, #21
 8002696:	00c8      	lsls	r0, r1, #3
 8002698:	0011      	movs	r1, r2
 800269a:	001a      	movs	r2, r3
 800269c:	031b      	lsls	r3, r3, #12
 800269e:	469c      	mov	ip, r3
 80026a0:	9100      	str	r1, [sp, #0]
 80026a2:	9201      	str	r2, [sp, #4]
 80026a4:	0051      	lsls	r1, r2, #1
 80026a6:	0d4b      	lsrs	r3, r1, #21
 80026a8:	4699      	mov	r9, r3
 80026aa:	9b01      	ldr	r3, [sp, #4]
 80026ac:	9d00      	ldr	r5, [sp, #0]
 80026ae:	0fd9      	lsrs	r1, r3, #31
 80026b0:	4663      	mov	r3, ip
 80026b2:	0f6a      	lsrs	r2, r5, #29
 80026b4:	0a5b      	lsrs	r3, r3, #9
 80026b6:	4313      	orrs	r3, r2
 80026b8:	00ea      	lsls	r2, r5, #3
 80026ba:	4694      	mov	ip, r2
 80026bc:	4693      	mov	fp, r2
 80026be:	4ac1      	ldr	r2, [pc, #772]	@ (80029c4 <__aeabi_dsub+0x354>)
 80026c0:	9003      	str	r0, [sp, #12]
 80026c2:	9302      	str	r3, [sp, #8]
 80026c4:	4591      	cmp	r9, r2
 80026c6:	d100      	bne.n	80026ca <__aeabi_dsub+0x5a>
 80026c8:	e0cd      	b.n	8002866 <__aeabi_dsub+0x1f6>
 80026ca:	2501      	movs	r5, #1
 80026cc:	4069      	eors	r1, r5
 80026ce:	464d      	mov	r5, r9
 80026d0:	1b7d      	subs	r5, r7, r5
 80026d2:	46aa      	mov	sl, r5
 80026d4:	428e      	cmp	r6, r1
 80026d6:	d100      	bne.n	80026da <__aeabi_dsub+0x6a>
 80026d8:	e080      	b.n	80027dc <__aeabi_dsub+0x16c>
 80026da:	2d00      	cmp	r5, #0
 80026dc:	dc00      	bgt.n	80026e0 <__aeabi_dsub+0x70>
 80026de:	e335      	b.n	8002d4c <__aeabi_dsub+0x6dc>
 80026e0:	4649      	mov	r1, r9
 80026e2:	2900      	cmp	r1, #0
 80026e4:	d100      	bne.n	80026e8 <__aeabi_dsub+0x78>
 80026e6:	e0df      	b.n	80028a8 <__aeabi_dsub+0x238>
 80026e8:	4297      	cmp	r7, r2
 80026ea:	d100      	bne.n	80026ee <__aeabi_dsub+0x7e>
 80026ec:	e194      	b.n	8002a18 <__aeabi_dsub+0x3a8>
 80026ee:	4652      	mov	r2, sl
 80026f0:	2501      	movs	r5, #1
 80026f2:	2a38      	cmp	r2, #56	@ 0x38
 80026f4:	dc19      	bgt.n	800272a <__aeabi_dsub+0xba>
 80026f6:	2280      	movs	r2, #128	@ 0x80
 80026f8:	9b02      	ldr	r3, [sp, #8]
 80026fa:	0412      	lsls	r2, r2, #16
 80026fc:	4313      	orrs	r3, r2
 80026fe:	9302      	str	r3, [sp, #8]
 8002700:	4652      	mov	r2, sl
 8002702:	2a1f      	cmp	r2, #31
 8002704:	dd00      	ble.n	8002708 <__aeabi_dsub+0x98>
 8002706:	e1e3      	b.n	8002ad0 <__aeabi_dsub+0x460>
 8002708:	4653      	mov	r3, sl
 800270a:	2220      	movs	r2, #32
 800270c:	4661      	mov	r1, ip
 800270e:	9d02      	ldr	r5, [sp, #8]
 8002710:	1ad2      	subs	r2, r2, r3
 8002712:	4095      	lsls	r5, r2
 8002714:	40d9      	lsrs	r1, r3
 8002716:	430d      	orrs	r5, r1
 8002718:	4661      	mov	r1, ip
 800271a:	4091      	lsls	r1, r2
 800271c:	000a      	movs	r2, r1
 800271e:	1e51      	subs	r1, r2, #1
 8002720:	418a      	sbcs	r2, r1
 8002722:	4315      	orrs	r5, r2
 8002724:	9a02      	ldr	r2, [sp, #8]
 8002726:	40da      	lsrs	r2, r3
 8002728:	1aa4      	subs	r4, r4, r2
 800272a:	1b45      	subs	r5, r0, r5
 800272c:	42a8      	cmp	r0, r5
 800272e:	4180      	sbcs	r0, r0
 8002730:	4240      	negs	r0, r0
 8002732:	1a24      	subs	r4, r4, r0
 8002734:	0223      	lsls	r3, r4, #8
 8002736:	d400      	bmi.n	800273a <__aeabi_dsub+0xca>
 8002738:	e13d      	b.n	80029b6 <__aeabi_dsub+0x346>
 800273a:	0264      	lsls	r4, r4, #9
 800273c:	0a64      	lsrs	r4, r4, #9
 800273e:	2c00      	cmp	r4, #0
 8002740:	d100      	bne.n	8002744 <__aeabi_dsub+0xd4>
 8002742:	e147      	b.n	80029d4 <__aeabi_dsub+0x364>
 8002744:	0020      	movs	r0, r4
 8002746:	f000 fc05 	bl	8002f54 <__clzsi2>
 800274a:	0003      	movs	r3, r0
 800274c:	3b08      	subs	r3, #8
 800274e:	2120      	movs	r1, #32
 8002750:	0028      	movs	r0, r5
 8002752:	1aca      	subs	r2, r1, r3
 8002754:	40d0      	lsrs	r0, r2
 8002756:	409c      	lsls	r4, r3
 8002758:	0002      	movs	r2, r0
 800275a:	409d      	lsls	r5, r3
 800275c:	4322      	orrs	r2, r4
 800275e:	429f      	cmp	r7, r3
 8002760:	dd00      	ble.n	8002764 <__aeabi_dsub+0xf4>
 8002762:	e177      	b.n	8002a54 <__aeabi_dsub+0x3e4>
 8002764:	1bd8      	subs	r0, r3, r7
 8002766:	3001      	adds	r0, #1
 8002768:	1a09      	subs	r1, r1, r0
 800276a:	002c      	movs	r4, r5
 800276c:	408d      	lsls	r5, r1
 800276e:	40c4      	lsrs	r4, r0
 8002770:	1e6b      	subs	r3, r5, #1
 8002772:	419d      	sbcs	r5, r3
 8002774:	0013      	movs	r3, r2
 8002776:	40c2      	lsrs	r2, r0
 8002778:	408b      	lsls	r3, r1
 800277a:	4325      	orrs	r5, r4
 800277c:	2700      	movs	r7, #0
 800277e:	0014      	movs	r4, r2
 8002780:	431d      	orrs	r5, r3
 8002782:	076b      	lsls	r3, r5, #29
 8002784:	d009      	beq.n	800279a <__aeabi_dsub+0x12a>
 8002786:	230f      	movs	r3, #15
 8002788:	402b      	ands	r3, r5
 800278a:	2b04      	cmp	r3, #4
 800278c:	d005      	beq.n	800279a <__aeabi_dsub+0x12a>
 800278e:	1d2b      	adds	r3, r5, #4
 8002790:	42ab      	cmp	r3, r5
 8002792:	41ad      	sbcs	r5, r5
 8002794:	426d      	negs	r5, r5
 8002796:	1964      	adds	r4, r4, r5
 8002798:	001d      	movs	r5, r3
 800279a:	0223      	lsls	r3, r4, #8
 800279c:	d400      	bmi.n	80027a0 <__aeabi_dsub+0x130>
 800279e:	e140      	b.n	8002a22 <__aeabi_dsub+0x3b2>
 80027a0:	4a88      	ldr	r2, [pc, #544]	@ (80029c4 <__aeabi_dsub+0x354>)
 80027a2:	3701      	adds	r7, #1
 80027a4:	4297      	cmp	r7, r2
 80027a6:	d100      	bne.n	80027aa <__aeabi_dsub+0x13a>
 80027a8:	e101      	b.n	80029ae <__aeabi_dsub+0x33e>
 80027aa:	2601      	movs	r6, #1
 80027ac:	4643      	mov	r3, r8
 80027ae:	4986      	ldr	r1, [pc, #536]	@ (80029c8 <__aeabi_dsub+0x358>)
 80027b0:	08ed      	lsrs	r5, r5, #3
 80027b2:	4021      	ands	r1, r4
 80027b4:	074a      	lsls	r2, r1, #29
 80027b6:	432a      	orrs	r2, r5
 80027b8:	057c      	lsls	r4, r7, #21
 80027ba:	024d      	lsls	r5, r1, #9
 80027bc:	0b2d      	lsrs	r5, r5, #12
 80027be:	0d64      	lsrs	r4, r4, #21
 80027c0:	401e      	ands	r6, r3
 80027c2:	0524      	lsls	r4, r4, #20
 80027c4:	432c      	orrs	r4, r5
 80027c6:	07f6      	lsls	r6, r6, #31
 80027c8:	4334      	orrs	r4, r6
 80027ca:	0010      	movs	r0, r2
 80027cc:	0021      	movs	r1, r4
 80027ce:	b005      	add	sp, #20
 80027d0:	bcf0      	pop	{r4, r5, r6, r7}
 80027d2:	46bb      	mov	fp, r7
 80027d4:	46b2      	mov	sl, r6
 80027d6:	46a9      	mov	r9, r5
 80027d8:	46a0      	mov	r8, r4
 80027da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027dc:	2d00      	cmp	r5, #0
 80027de:	dc00      	bgt.n	80027e2 <__aeabi_dsub+0x172>
 80027e0:	e2d0      	b.n	8002d84 <__aeabi_dsub+0x714>
 80027e2:	4649      	mov	r1, r9
 80027e4:	2900      	cmp	r1, #0
 80027e6:	d000      	beq.n	80027ea <__aeabi_dsub+0x17a>
 80027e8:	e0d4      	b.n	8002994 <__aeabi_dsub+0x324>
 80027ea:	4661      	mov	r1, ip
 80027ec:	9b02      	ldr	r3, [sp, #8]
 80027ee:	4319      	orrs	r1, r3
 80027f0:	d100      	bne.n	80027f4 <__aeabi_dsub+0x184>
 80027f2:	e12b      	b.n	8002a4c <__aeabi_dsub+0x3dc>
 80027f4:	1e69      	subs	r1, r5, #1
 80027f6:	2d01      	cmp	r5, #1
 80027f8:	d100      	bne.n	80027fc <__aeabi_dsub+0x18c>
 80027fa:	e1d9      	b.n	8002bb0 <__aeabi_dsub+0x540>
 80027fc:	4295      	cmp	r5, r2
 80027fe:	d100      	bne.n	8002802 <__aeabi_dsub+0x192>
 8002800:	e10a      	b.n	8002a18 <__aeabi_dsub+0x3a8>
 8002802:	2501      	movs	r5, #1
 8002804:	2938      	cmp	r1, #56	@ 0x38
 8002806:	dc17      	bgt.n	8002838 <__aeabi_dsub+0x1c8>
 8002808:	468a      	mov	sl, r1
 800280a:	4653      	mov	r3, sl
 800280c:	2b1f      	cmp	r3, #31
 800280e:	dd00      	ble.n	8002812 <__aeabi_dsub+0x1a2>
 8002810:	e1e7      	b.n	8002be2 <__aeabi_dsub+0x572>
 8002812:	2220      	movs	r2, #32
 8002814:	1ad2      	subs	r2, r2, r3
 8002816:	9b02      	ldr	r3, [sp, #8]
 8002818:	4661      	mov	r1, ip
 800281a:	4093      	lsls	r3, r2
 800281c:	001d      	movs	r5, r3
 800281e:	4653      	mov	r3, sl
 8002820:	40d9      	lsrs	r1, r3
 8002822:	4663      	mov	r3, ip
 8002824:	4093      	lsls	r3, r2
 8002826:	001a      	movs	r2, r3
 8002828:	430d      	orrs	r5, r1
 800282a:	1e51      	subs	r1, r2, #1
 800282c:	418a      	sbcs	r2, r1
 800282e:	4653      	mov	r3, sl
 8002830:	4315      	orrs	r5, r2
 8002832:	9a02      	ldr	r2, [sp, #8]
 8002834:	40da      	lsrs	r2, r3
 8002836:	18a4      	adds	r4, r4, r2
 8002838:	182d      	adds	r5, r5, r0
 800283a:	4285      	cmp	r5, r0
 800283c:	4180      	sbcs	r0, r0
 800283e:	4240      	negs	r0, r0
 8002840:	1824      	adds	r4, r4, r0
 8002842:	0223      	lsls	r3, r4, #8
 8002844:	d400      	bmi.n	8002848 <__aeabi_dsub+0x1d8>
 8002846:	e0b6      	b.n	80029b6 <__aeabi_dsub+0x346>
 8002848:	4b5e      	ldr	r3, [pc, #376]	@ (80029c4 <__aeabi_dsub+0x354>)
 800284a:	3701      	adds	r7, #1
 800284c:	429f      	cmp	r7, r3
 800284e:	d100      	bne.n	8002852 <__aeabi_dsub+0x1e2>
 8002850:	e0ad      	b.n	80029ae <__aeabi_dsub+0x33e>
 8002852:	2101      	movs	r1, #1
 8002854:	4b5c      	ldr	r3, [pc, #368]	@ (80029c8 <__aeabi_dsub+0x358>)
 8002856:	086a      	lsrs	r2, r5, #1
 8002858:	401c      	ands	r4, r3
 800285a:	4029      	ands	r1, r5
 800285c:	430a      	orrs	r2, r1
 800285e:	07e5      	lsls	r5, r4, #31
 8002860:	4315      	orrs	r5, r2
 8002862:	0864      	lsrs	r4, r4, #1
 8002864:	e78d      	b.n	8002782 <__aeabi_dsub+0x112>
 8002866:	4a59      	ldr	r2, [pc, #356]	@ (80029cc <__aeabi_dsub+0x35c>)
 8002868:	9b02      	ldr	r3, [sp, #8]
 800286a:	4692      	mov	sl, r2
 800286c:	4662      	mov	r2, ip
 800286e:	44ba      	add	sl, r7
 8002870:	431a      	orrs	r2, r3
 8002872:	d02c      	beq.n	80028ce <__aeabi_dsub+0x25e>
 8002874:	428e      	cmp	r6, r1
 8002876:	d02e      	beq.n	80028d6 <__aeabi_dsub+0x266>
 8002878:	4652      	mov	r2, sl
 800287a:	2a00      	cmp	r2, #0
 800287c:	d060      	beq.n	8002940 <__aeabi_dsub+0x2d0>
 800287e:	2f00      	cmp	r7, #0
 8002880:	d100      	bne.n	8002884 <__aeabi_dsub+0x214>
 8002882:	e0db      	b.n	8002a3c <__aeabi_dsub+0x3cc>
 8002884:	4663      	mov	r3, ip
 8002886:	000e      	movs	r6, r1
 8002888:	9c02      	ldr	r4, [sp, #8]
 800288a:	08d8      	lsrs	r0, r3, #3
 800288c:	0762      	lsls	r2, r4, #29
 800288e:	4302      	orrs	r2, r0
 8002890:	08e4      	lsrs	r4, r4, #3
 8002892:	0013      	movs	r3, r2
 8002894:	4323      	orrs	r3, r4
 8002896:	d100      	bne.n	800289a <__aeabi_dsub+0x22a>
 8002898:	e254      	b.n	8002d44 <__aeabi_dsub+0x6d4>
 800289a:	2580      	movs	r5, #128	@ 0x80
 800289c:	032d      	lsls	r5, r5, #12
 800289e:	4325      	orrs	r5, r4
 80028a0:	032d      	lsls	r5, r5, #12
 80028a2:	4c48      	ldr	r4, [pc, #288]	@ (80029c4 <__aeabi_dsub+0x354>)
 80028a4:	0b2d      	lsrs	r5, r5, #12
 80028a6:	e78c      	b.n	80027c2 <__aeabi_dsub+0x152>
 80028a8:	4661      	mov	r1, ip
 80028aa:	9b02      	ldr	r3, [sp, #8]
 80028ac:	4319      	orrs	r1, r3
 80028ae:	d100      	bne.n	80028b2 <__aeabi_dsub+0x242>
 80028b0:	e0cc      	b.n	8002a4c <__aeabi_dsub+0x3dc>
 80028b2:	0029      	movs	r1, r5
 80028b4:	3901      	subs	r1, #1
 80028b6:	2d01      	cmp	r5, #1
 80028b8:	d100      	bne.n	80028bc <__aeabi_dsub+0x24c>
 80028ba:	e188      	b.n	8002bce <__aeabi_dsub+0x55e>
 80028bc:	4295      	cmp	r5, r2
 80028be:	d100      	bne.n	80028c2 <__aeabi_dsub+0x252>
 80028c0:	e0aa      	b.n	8002a18 <__aeabi_dsub+0x3a8>
 80028c2:	2501      	movs	r5, #1
 80028c4:	2938      	cmp	r1, #56	@ 0x38
 80028c6:	dd00      	ble.n	80028ca <__aeabi_dsub+0x25a>
 80028c8:	e72f      	b.n	800272a <__aeabi_dsub+0xba>
 80028ca:	468a      	mov	sl, r1
 80028cc:	e718      	b.n	8002700 <__aeabi_dsub+0x90>
 80028ce:	2201      	movs	r2, #1
 80028d0:	4051      	eors	r1, r2
 80028d2:	428e      	cmp	r6, r1
 80028d4:	d1d0      	bne.n	8002878 <__aeabi_dsub+0x208>
 80028d6:	4653      	mov	r3, sl
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d100      	bne.n	80028de <__aeabi_dsub+0x26e>
 80028dc:	e0be      	b.n	8002a5c <__aeabi_dsub+0x3ec>
 80028de:	2f00      	cmp	r7, #0
 80028e0:	d000      	beq.n	80028e4 <__aeabi_dsub+0x274>
 80028e2:	e138      	b.n	8002b56 <__aeabi_dsub+0x4e6>
 80028e4:	46ca      	mov	sl, r9
 80028e6:	0022      	movs	r2, r4
 80028e8:	4302      	orrs	r2, r0
 80028ea:	d100      	bne.n	80028ee <__aeabi_dsub+0x27e>
 80028ec:	e1e2      	b.n	8002cb4 <__aeabi_dsub+0x644>
 80028ee:	4653      	mov	r3, sl
 80028f0:	1e59      	subs	r1, r3, #1
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d100      	bne.n	80028f8 <__aeabi_dsub+0x288>
 80028f6:	e20d      	b.n	8002d14 <__aeabi_dsub+0x6a4>
 80028f8:	4a32      	ldr	r2, [pc, #200]	@ (80029c4 <__aeabi_dsub+0x354>)
 80028fa:	4592      	cmp	sl, r2
 80028fc:	d100      	bne.n	8002900 <__aeabi_dsub+0x290>
 80028fe:	e1d2      	b.n	8002ca6 <__aeabi_dsub+0x636>
 8002900:	2701      	movs	r7, #1
 8002902:	2938      	cmp	r1, #56	@ 0x38
 8002904:	dc13      	bgt.n	800292e <__aeabi_dsub+0x2be>
 8002906:	291f      	cmp	r1, #31
 8002908:	dd00      	ble.n	800290c <__aeabi_dsub+0x29c>
 800290a:	e1ee      	b.n	8002cea <__aeabi_dsub+0x67a>
 800290c:	2220      	movs	r2, #32
 800290e:	9b02      	ldr	r3, [sp, #8]
 8002910:	1a52      	subs	r2, r2, r1
 8002912:	0025      	movs	r5, r4
 8002914:	0007      	movs	r7, r0
 8002916:	469a      	mov	sl, r3
 8002918:	40cc      	lsrs	r4, r1
 800291a:	4090      	lsls	r0, r2
 800291c:	4095      	lsls	r5, r2
 800291e:	40cf      	lsrs	r7, r1
 8002920:	44a2      	add	sl, r4
 8002922:	1e42      	subs	r2, r0, #1
 8002924:	4190      	sbcs	r0, r2
 8002926:	4653      	mov	r3, sl
 8002928:	432f      	orrs	r7, r5
 800292a:	4307      	orrs	r7, r0
 800292c:	9302      	str	r3, [sp, #8]
 800292e:	003d      	movs	r5, r7
 8002930:	4465      	add	r5, ip
 8002932:	4565      	cmp	r5, ip
 8002934:	4192      	sbcs	r2, r2
 8002936:	9b02      	ldr	r3, [sp, #8]
 8002938:	4252      	negs	r2, r2
 800293a:	464f      	mov	r7, r9
 800293c:	18d4      	adds	r4, r2, r3
 800293e:	e780      	b.n	8002842 <__aeabi_dsub+0x1d2>
 8002940:	4a23      	ldr	r2, [pc, #140]	@ (80029d0 <__aeabi_dsub+0x360>)
 8002942:	1c7d      	adds	r5, r7, #1
 8002944:	4215      	tst	r5, r2
 8002946:	d000      	beq.n	800294a <__aeabi_dsub+0x2da>
 8002948:	e0aa      	b.n	8002aa0 <__aeabi_dsub+0x430>
 800294a:	4662      	mov	r2, ip
 800294c:	0025      	movs	r5, r4
 800294e:	9b02      	ldr	r3, [sp, #8]
 8002950:	4305      	orrs	r5, r0
 8002952:	431a      	orrs	r2, r3
 8002954:	2f00      	cmp	r7, #0
 8002956:	d000      	beq.n	800295a <__aeabi_dsub+0x2ea>
 8002958:	e0f5      	b.n	8002b46 <__aeabi_dsub+0x4d6>
 800295a:	2d00      	cmp	r5, #0
 800295c:	d100      	bne.n	8002960 <__aeabi_dsub+0x2f0>
 800295e:	e16b      	b.n	8002c38 <__aeabi_dsub+0x5c8>
 8002960:	2a00      	cmp	r2, #0
 8002962:	d100      	bne.n	8002966 <__aeabi_dsub+0x2f6>
 8002964:	e152      	b.n	8002c0c <__aeabi_dsub+0x59c>
 8002966:	4663      	mov	r3, ip
 8002968:	1ac5      	subs	r5, r0, r3
 800296a:	9b02      	ldr	r3, [sp, #8]
 800296c:	1ae2      	subs	r2, r4, r3
 800296e:	42a8      	cmp	r0, r5
 8002970:	419b      	sbcs	r3, r3
 8002972:	425b      	negs	r3, r3
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	021a      	lsls	r2, r3, #8
 8002978:	d400      	bmi.n	800297c <__aeabi_dsub+0x30c>
 800297a:	e1d5      	b.n	8002d28 <__aeabi_dsub+0x6b8>
 800297c:	4663      	mov	r3, ip
 800297e:	1a1d      	subs	r5, r3, r0
 8002980:	45ac      	cmp	ip, r5
 8002982:	4192      	sbcs	r2, r2
 8002984:	2601      	movs	r6, #1
 8002986:	9b02      	ldr	r3, [sp, #8]
 8002988:	4252      	negs	r2, r2
 800298a:	1b1c      	subs	r4, r3, r4
 800298c:	4688      	mov	r8, r1
 800298e:	1aa4      	subs	r4, r4, r2
 8002990:	400e      	ands	r6, r1
 8002992:	e6f6      	b.n	8002782 <__aeabi_dsub+0x112>
 8002994:	4297      	cmp	r7, r2
 8002996:	d03f      	beq.n	8002a18 <__aeabi_dsub+0x3a8>
 8002998:	4652      	mov	r2, sl
 800299a:	2501      	movs	r5, #1
 800299c:	2a38      	cmp	r2, #56	@ 0x38
 800299e:	dd00      	ble.n	80029a2 <__aeabi_dsub+0x332>
 80029a0:	e74a      	b.n	8002838 <__aeabi_dsub+0x1c8>
 80029a2:	2280      	movs	r2, #128	@ 0x80
 80029a4:	9b02      	ldr	r3, [sp, #8]
 80029a6:	0412      	lsls	r2, r2, #16
 80029a8:	4313      	orrs	r3, r2
 80029aa:	9302      	str	r3, [sp, #8]
 80029ac:	e72d      	b.n	800280a <__aeabi_dsub+0x19a>
 80029ae:	003c      	movs	r4, r7
 80029b0:	2500      	movs	r5, #0
 80029b2:	2200      	movs	r2, #0
 80029b4:	e705      	b.n	80027c2 <__aeabi_dsub+0x152>
 80029b6:	2307      	movs	r3, #7
 80029b8:	402b      	ands	r3, r5
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d000      	beq.n	80029c0 <__aeabi_dsub+0x350>
 80029be:	e6e2      	b.n	8002786 <__aeabi_dsub+0x116>
 80029c0:	e06b      	b.n	8002a9a <__aeabi_dsub+0x42a>
 80029c2:	46c0      	nop			@ (mov r8, r8)
 80029c4:	000007ff 	.word	0x000007ff
 80029c8:	ff7fffff 	.word	0xff7fffff
 80029cc:	fffff801 	.word	0xfffff801
 80029d0:	000007fe 	.word	0x000007fe
 80029d4:	0028      	movs	r0, r5
 80029d6:	f000 fabd 	bl	8002f54 <__clzsi2>
 80029da:	0003      	movs	r3, r0
 80029dc:	3318      	adds	r3, #24
 80029de:	2b1f      	cmp	r3, #31
 80029e0:	dc00      	bgt.n	80029e4 <__aeabi_dsub+0x374>
 80029e2:	e6b4      	b.n	800274e <__aeabi_dsub+0xde>
 80029e4:	002a      	movs	r2, r5
 80029e6:	3808      	subs	r0, #8
 80029e8:	4082      	lsls	r2, r0
 80029ea:	429f      	cmp	r7, r3
 80029ec:	dd00      	ble.n	80029f0 <__aeabi_dsub+0x380>
 80029ee:	e0b9      	b.n	8002b64 <__aeabi_dsub+0x4f4>
 80029f0:	1bdb      	subs	r3, r3, r7
 80029f2:	1c58      	adds	r0, r3, #1
 80029f4:	281f      	cmp	r0, #31
 80029f6:	dc00      	bgt.n	80029fa <__aeabi_dsub+0x38a>
 80029f8:	e1a0      	b.n	8002d3c <__aeabi_dsub+0x6cc>
 80029fa:	0015      	movs	r5, r2
 80029fc:	3b1f      	subs	r3, #31
 80029fe:	40dd      	lsrs	r5, r3
 8002a00:	2820      	cmp	r0, #32
 8002a02:	d005      	beq.n	8002a10 <__aeabi_dsub+0x3a0>
 8002a04:	2340      	movs	r3, #64	@ 0x40
 8002a06:	1a1b      	subs	r3, r3, r0
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	1e53      	subs	r3, r2, #1
 8002a0c:	419a      	sbcs	r2, r3
 8002a0e:	4315      	orrs	r5, r2
 8002a10:	2307      	movs	r3, #7
 8002a12:	2700      	movs	r7, #0
 8002a14:	402b      	ands	r3, r5
 8002a16:	e7d0      	b.n	80029ba <__aeabi_dsub+0x34a>
 8002a18:	08c0      	lsrs	r0, r0, #3
 8002a1a:	0762      	lsls	r2, r4, #29
 8002a1c:	4302      	orrs	r2, r0
 8002a1e:	08e4      	lsrs	r4, r4, #3
 8002a20:	e737      	b.n	8002892 <__aeabi_dsub+0x222>
 8002a22:	08ea      	lsrs	r2, r5, #3
 8002a24:	0763      	lsls	r3, r4, #29
 8002a26:	431a      	orrs	r2, r3
 8002a28:	4bd3      	ldr	r3, [pc, #844]	@ (8002d78 <__aeabi_dsub+0x708>)
 8002a2a:	08e4      	lsrs	r4, r4, #3
 8002a2c:	429f      	cmp	r7, r3
 8002a2e:	d100      	bne.n	8002a32 <__aeabi_dsub+0x3c2>
 8002a30:	e72f      	b.n	8002892 <__aeabi_dsub+0x222>
 8002a32:	0324      	lsls	r4, r4, #12
 8002a34:	0b25      	lsrs	r5, r4, #12
 8002a36:	057c      	lsls	r4, r7, #21
 8002a38:	0d64      	lsrs	r4, r4, #21
 8002a3a:	e6c2      	b.n	80027c2 <__aeabi_dsub+0x152>
 8002a3c:	46ca      	mov	sl, r9
 8002a3e:	0022      	movs	r2, r4
 8002a40:	4302      	orrs	r2, r0
 8002a42:	d158      	bne.n	8002af6 <__aeabi_dsub+0x486>
 8002a44:	4663      	mov	r3, ip
 8002a46:	000e      	movs	r6, r1
 8002a48:	9c02      	ldr	r4, [sp, #8]
 8002a4a:	9303      	str	r3, [sp, #12]
 8002a4c:	9b03      	ldr	r3, [sp, #12]
 8002a4e:	4657      	mov	r7, sl
 8002a50:	08da      	lsrs	r2, r3, #3
 8002a52:	e7e7      	b.n	8002a24 <__aeabi_dsub+0x3b4>
 8002a54:	4cc9      	ldr	r4, [pc, #804]	@ (8002d7c <__aeabi_dsub+0x70c>)
 8002a56:	1aff      	subs	r7, r7, r3
 8002a58:	4014      	ands	r4, r2
 8002a5a:	e692      	b.n	8002782 <__aeabi_dsub+0x112>
 8002a5c:	4dc8      	ldr	r5, [pc, #800]	@ (8002d80 <__aeabi_dsub+0x710>)
 8002a5e:	1c7a      	adds	r2, r7, #1
 8002a60:	422a      	tst	r2, r5
 8002a62:	d000      	beq.n	8002a66 <__aeabi_dsub+0x3f6>
 8002a64:	e084      	b.n	8002b70 <__aeabi_dsub+0x500>
 8002a66:	0022      	movs	r2, r4
 8002a68:	4302      	orrs	r2, r0
 8002a6a:	2f00      	cmp	r7, #0
 8002a6c:	d000      	beq.n	8002a70 <__aeabi_dsub+0x400>
 8002a6e:	e0ef      	b.n	8002c50 <__aeabi_dsub+0x5e0>
 8002a70:	2a00      	cmp	r2, #0
 8002a72:	d100      	bne.n	8002a76 <__aeabi_dsub+0x406>
 8002a74:	e0e5      	b.n	8002c42 <__aeabi_dsub+0x5d2>
 8002a76:	4662      	mov	r2, ip
 8002a78:	9902      	ldr	r1, [sp, #8]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	d100      	bne.n	8002a80 <__aeabi_dsub+0x410>
 8002a7e:	e0c5      	b.n	8002c0c <__aeabi_dsub+0x59c>
 8002a80:	4663      	mov	r3, ip
 8002a82:	18c5      	adds	r5, r0, r3
 8002a84:	468c      	mov	ip, r1
 8002a86:	4285      	cmp	r5, r0
 8002a88:	4180      	sbcs	r0, r0
 8002a8a:	4464      	add	r4, ip
 8002a8c:	4240      	negs	r0, r0
 8002a8e:	1824      	adds	r4, r4, r0
 8002a90:	0223      	lsls	r3, r4, #8
 8002a92:	d502      	bpl.n	8002a9a <__aeabi_dsub+0x42a>
 8002a94:	4bb9      	ldr	r3, [pc, #740]	@ (8002d7c <__aeabi_dsub+0x70c>)
 8002a96:	3701      	adds	r7, #1
 8002a98:	401c      	ands	r4, r3
 8002a9a:	46ba      	mov	sl, r7
 8002a9c:	9503      	str	r5, [sp, #12]
 8002a9e:	e7d5      	b.n	8002a4c <__aeabi_dsub+0x3dc>
 8002aa0:	4662      	mov	r2, ip
 8002aa2:	1a85      	subs	r5, r0, r2
 8002aa4:	42a8      	cmp	r0, r5
 8002aa6:	4192      	sbcs	r2, r2
 8002aa8:	4252      	negs	r2, r2
 8002aaa:	4691      	mov	r9, r2
 8002aac:	9b02      	ldr	r3, [sp, #8]
 8002aae:	1ae3      	subs	r3, r4, r3
 8002ab0:	001a      	movs	r2, r3
 8002ab2:	464b      	mov	r3, r9
 8002ab4:	1ad2      	subs	r2, r2, r3
 8002ab6:	0013      	movs	r3, r2
 8002ab8:	4691      	mov	r9, r2
 8002aba:	021a      	lsls	r2, r3, #8
 8002abc:	d46c      	bmi.n	8002b98 <__aeabi_dsub+0x528>
 8002abe:	464a      	mov	r2, r9
 8002ac0:	464c      	mov	r4, r9
 8002ac2:	432a      	orrs	r2, r5
 8002ac4:	d000      	beq.n	8002ac8 <__aeabi_dsub+0x458>
 8002ac6:	e63a      	b.n	800273e <__aeabi_dsub+0xce>
 8002ac8:	2600      	movs	r6, #0
 8002aca:	2400      	movs	r4, #0
 8002acc:	2500      	movs	r5, #0
 8002ace:	e678      	b.n	80027c2 <__aeabi_dsub+0x152>
 8002ad0:	9902      	ldr	r1, [sp, #8]
 8002ad2:	4653      	mov	r3, sl
 8002ad4:	000d      	movs	r5, r1
 8002ad6:	3a20      	subs	r2, #32
 8002ad8:	40d5      	lsrs	r5, r2
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	d006      	beq.n	8002aec <__aeabi_dsub+0x47c>
 8002ade:	2240      	movs	r2, #64	@ 0x40
 8002ae0:	1ad2      	subs	r2, r2, r3
 8002ae2:	000b      	movs	r3, r1
 8002ae4:	4093      	lsls	r3, r2
 8002ae6:	4662      	mov	r2, ip
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	4693      	mov	fp, r2
 8002aec:	465b      	mov	r3, fp
 8002aee:	1e5a      	subs	r2, r3, #1
 8002af0:	4193      	sbcs	r3, r2
 8002af2:	431d      	orrs	r5, r3
 8002af4:	e619      	b.n	800272a <__aeabi_dsub+0xba>
 8002af6:	4653      	mov	r3, sl
 8002af8:	1e5a      	subs	r2, r3, #1
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d100      	bne.n	8002b00 <__aeabi_dsub+0x490>
 8002afe:	e0c6      	b.n	8002c8e <__aeabi_dsub+0x61e>
 8002b00:	4e9d      	ldr	r6, [pc, #628]	@ (8002d78 <__aeabi_dsub+0x708>)
 8002b02:	45b2      	cmp	sl, r6
 8002b04:	d100      	bne.n	8002b08 <__aeabi_dsub+0x498>
 8002b06:	e6bd      	b.n	8002884 <__aeabi_dsub+0x214>
 8002b08:	4688      	mov	r8, r1
 8002b0a:	000e      	movs	r6, r1
 8002b0c:	2501      	movs	r5, #1
 8002b0e:	2a38      	cmp	r2, #56	@ 0x38
 8002b10:	dc10      	bgt.n	8002b34 <__aeabi_dsub+0x4c4>
 8002b12:	2a1f      	cmp	r2, #31
 8002b14:	dc7f      	bgt.n	8002c16 <__aeabi_dsub+0x5a6>
 8002b16:	2120      	movs	r1, #32
 8002b18:	0025      	movs	r5, r4
 8002b1a:	1a89      	subs	r1, r1, r2
 8002b1c:	0007      	movs	r7, r0
 8002b1e:	4088      	lsls	r0, r1
 8002b20:	408d      	lsls	r5, r1
 8002b22:	40d7      	lsrs	r7, r2
 8002b24:	40d4      	lsrs	r4, r2
 8002b26:	1e41      	subs	r1, r0, #1
 8002b28:	4188      	sbcs	r0, r1
 8002b2a:	9b02      	ldr	r3, [sp, #8]
 8002b2c:	433d      	orrs	r5, r7
 8002b2e:	1b1b      	subs	r3, r3, r4
 8002b30:	4305      	orrs	r5, r0
 8002b32:	9302      	str	r3, [sp, #8]
 8002b34:	4662      	mov	r2, ip
 8002b36:	1b55      	subs	r5, r2, r5
 8002b38:	45ac      	cmp	ip, r5
 8002b3a:	4192      	sbcs	r2, r2
 8002b3c:	9b02      	ldr	r3, [sp, #8]
 8002b3e:	4252      	negs	r2, r2
 8002b40:	464f      	mov	r7, r9
 8002b42:	1a9c      	subs	r4, r3, r2
 8002b44:	e5f6      	b.n	8002734 <__aeabi_dsub+0xc4>
 8002b46:	2d00      	cmp	r5, #0
 8002b48:	d000      	beq.n	8002b4c <__aeabi_dsub+0x4dc>
 8002b4a:	e0b7      	b.n	8002cbc <__aeabi_dsub+0x64c>
 8002b4c:	2a00      	cmp	r2, #0
 8002b4e:	d100      	bne.n	8002b52 <__aeabi_dsub+0x4e2>
 8002b50:	e0f0      	b.n	8002d34 <__aeabi_dsub+0x6c4>
 8002b52:	2601      	movs	r6, #1
 8002b54:	400e      	ands	r6, r1
 8002b56:	4663      	mov	r3, ip
 8002b58:	9802      	ldr	r0, [sp, #8]
 8002b5a:	08d9      	lsrs	r1, r3, #3
 8002b5c:	0742      	lsls	r2, r0, #29
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	08c4      	lsrs	r4, r0, #3
 8002b62:	e696      	b.n	8002892 <__aeabi_dsub+0x222>
 8002b64:	4c85      	ldr	r4, [pc, #532]	@ (8002d7c <__aeabi_dsub+0x70c>)
 8002b66:	1aff      	subs	r7, r7, r3
 8002b68:	4014      	ands	r4, r2
 8002b6a:	0762      	lsls	r2, r4, #29
 8002b6c:	08e4      	lsrs	r4, r4, #3
 8002b6e:	e760      	b.n	8002a32 <__aeabi_dsub+0x3c2>
 8002b70:	4981      	ldr	r1, [pc, #516]	@ (8002d78 <__aeabi_dsub+0x708>)
 8002b72:	428a      	cmp	r2, r1
 8002b74:	d100      	bne.n	8002b78 <__aeabi_dsub+0x508>
 8002b76:	e0c9      	b.n	8002d0c <__aeabi_dsub+0x69c>
 8002b78:	4663      	mov	r3, ip
 8002b7a:	18c1      	adds	r1, r0, r3
 8002b7c:	4281      	cmp	r1, r0
 8002b7e:	4180      	sbcs	r0, r0
 8002b80:	9b02      	ldr	r3, [sp, #8]
 8002b82:	4240      	negs	r0, r0
 8002b84:	18e3      	adds	r3, r4, r3
 8002b86:	181b      	adds	r3, r3, r0
 8002b88:	07dd      	lsls	r5, r3, #31
 8002b8a:	085c      	lsrs	r4, r3, #1
 8002b8c:	2307      	movs	r3, #7
 8002b8e:	0849      	lsrs	r1, r1, #1
 8002b90:	430d      	orrs	r5, r1
 8002b92:	0017      	movs	r7, r2
 8002b94:	402b      	ands	r3, r5
 8002b96:	e710      	b.n	80029ba <__aeabi_dsub+0x34a>
 8002b98:	4663      	mov	r3, ip
 8002b9a:	1a1d      	subs	r5, r3, r0
 8002b9c:	45ac      	cmp	ip, r5
 8002b9e:	4192      	sbcs	r2, r2
 8002ba0:	2601      	movs	r6, #1
 8002ba2:	9b02      	ldr	r3, [sp, #8]
 8002ba4:	4252      	negs	r2, r2
 8002ba6:	1b1c      	subs	r4, r3, r4
 8002ba8:	4688      	mov	r8, r1
 8002baa:	1aa4      	subs	r4, r4, r2
 8002bac:	400e      	ands	r6, r1
 8002bae:	e5c6      	b.n	800273e <__aeabi_dsub+0xce>
 8002bb0:	4663      	mov	r3, ip
 8002bb2:	18c5      	adds	r5, r0, r3
 8002bb4:	9b02      	ldr	r3, [sp, #8]
 8002bb6:	4285      	cmp	r5, r0
 8002bb8:	4180      	sbcs	r0, r0
 8002bba:	469c      	mov	ip, r3
 8002bbc:	4240      	negs	r0, r0
 8002bbe:	4464      	add	r4, ip
 8002bc0:	1824      	adds	r4, r4, r0
 8002bc2:	2701      	movs	r7, #1
 8002bc4:	0223      	lsls	r3, r4, #8
 8002bc6:	d400      	bmi.n	8002bca <__aeabi_dsub+0x55a>
 8002bc8:	e6f5      	b.n	80029b6 <__aeabi_dsub+0x346>
 8002bca:	2702      	movs	r7, #2
 8002bcc:	e641      	b.n	8002852 <__aeabi_dsub+0x1e2>
 8002bce:	4663      	mov	r3, ip
 8002bd0:	1ac5      	subs	r5, r0, r3
 8002bd2:	42a8      	cmp	r0, r5
 8002bd4:	4180      	sbcs	r0, r0
 8002bd6:	9b02      	ldr	r3, [sp, #8]
 8002bd8:	4240      	negs	r0, r0
 8002bda:	1ae4      	subs	r4, r4, r3
 8002bdc:	2701      	movs	r7, #1
 8002bde:	1a24      	subs	r4, r4, r0
 8002be0:	e5a8      	b.n	8002734 <__aeabi_dsub+0xc4>
 8002be2:	9d02      	ldr	r5, [sp, #8]
 8002be4:	4652      	mov	r2, sl
 8002be6:	002b      	movs	r3, r5
 8002be8:	3a20      	subs	r2, #32
 8002bea:	40d3      	lsrs	r3, r2
 8002bec:	0019      	movs	r1, r3
 8002bee:	4653      	mov	r3, sl
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d006      	beq.n	8002c02 <__aeabi_dsub+0x592>
 8002bf4:	2240      	movs	r2, #64	@ 0x40
 8002bf6:	1ad2      	subs	r2, r2, r3
 8002bf8:	002b      	movs	r3, r5
 8002bfa:	4093      	lsls	r3, r2
 8002bfc:	4662      	mov	r2, ip
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	4693      	mov	fp, r2
 8002c02:	465d      	mov	r5, fp
 8002c04:	1e6b      	subs	r3, r5, #1
 8002c06:	419d      	sbcs	r5, r3
 8002c08:	430d      	orrs	r5, r1
 8002c0a:	e615      	b.n	8002838 <__aeabi_dsub+0x1c8>
 8002c0c:	0762      	lsls	r2, r4, #29
 8002c0e:	08c0      	lsrs	r0, r0, #3
 8002c10:	4302      	orrs	r2, r0
 8002c12:	08e4      	lsrs	r4, r4, #3
 8002c14:	e70d      	b.n	8002a32 <__aeabi_dsub+0x3c2>
 8002c16:	0011      	movs	r1, r2
 8002c18:	0027      	movs	r7, r4
 8002c1a:	3920      	subs	r1, #32
 8002c1c:	40cf      	lsrs	r7, r1
 8002c1e:	2a20      	cmp	r2, #32
 8002c20:	d005      	beq.n	8002c2e <__aeabi_dsub+0x5be>
 8002c22:	2140      	movs	r1, #64	@ 0x40
 8002c24:	1a8a      	subs	r2, r1, r2
 8002c26:	4094      	lsls	r4, r2
 8002c28:	0025      	movs	r5, r4
 8002c2a:	4305      	orrs	r5, r0
 8002c2c:	9503      	str	r5, [sp, #12]
 8002c2e:	9d03      	ldr	r5, [sp, #12]
 8002c30:	1e6a      	subs	r2, r5, #1
 8002c32:	4195      	sbcs	r5, r2
 8002c34:	433d      	orrs	r5, r7
 8002c36:	e77d      	b.n	8002b34 <__aeabi_dsub+0x4c4>
 8002c38:	2a00      	cmp	r2, #0
 8002c3a:	d100      	bne.n	8002c3e <__aeabi_dsub+0x5ce>
 8002c3c:	e744      	b.n	8002ac8 <__aeabi_dsub+0x458>
 8002c3e:	2601      	movs	r6, #1
 8002c40:	400e      	ands	r6, r1
 8002c42:	4663      	mov	r3, ip
 8002c44:	08d9      	lsrs	r1, r3, #3
 8002c46:	9b02      	ldr	r3, [sp, #8]
 8002c48:	075a      	lsls	r2, r3, #29
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	08dc      	lsrs	r4, r3, #3
 8002c4e:	e6f0      	b.n	8002a32 <__aeabi_dsub+0x3c2>
 8002c50:	2a00      	cmp	r2, #0
 8002c52:	d028      	beq.n	8002ca6 <__aeabi_dsub+0x636>
 8002c54:	4662      	mov	r2, ip
 8002c56:	9f02      	ldr	r7, [sp, #8]
 8002c58:	08c0      	lsrs	r0, r0, #3
 8002c5a:	433a      	orrs	r2, r7
 8002c5c:	d100      	bne.n	8002c60 <__aeabi_dsub+0x5f0>
 8002c5e:	e6dc      	b.n	8002a1a <__aeabi_dsub+0x3aa>
 8002c60:	0762      	lsls	r2, r4, #29
 8002c62:	4310      	orrs	r0, r2
 8002c64:	2280      	movs	r2, #128	@ 0x80
 8002c66:	08e4      	lsrs	r4, r4, #3
 8002c68:	0312      	lsls	r2, r2, #12
 8002c6a:	4214      	tst	r4, r2
 8002c6c:	d009      	beq.n	8002c82 <__aeabi_dsub+0x612>
 8002c6e:	08fd      	lsrs	r5, r7, #3
 8002c70:	4215      	tst	r5, r2
 8002c72:	d106      	bne.n	8002c82 <__aeabi_dsub+0x612>
 8002c74:	4663      	mov	r3, ip
 8002c76:	2601      	movs	r6, #1
 8002c78:	002c      	movs	r4, r5
 8002c7a:	08d8      	lsrs	r0, r3, #3
 8002c7c:	077b      	lsls	r3, r7, #29
 8002c7e:	4318      	orrs	r0, r3
 8002c80:	400e      	ands	r6, r1
 8002c82:	0f42      	lsrs	r2, r0, #29
 8002c84:	00c0      	lsls	r0, r0, #3
 8002c86:	08c0      	lsrs	r0, r0, #3
 8002c88:	0752      	lsls	r2, r2, #29
 8002c8a:	4302      	orrs	r2, r0
 8002c8c:	e601      	b.n	8002892 <__aeabi_dsub+0x222>
 8002c8e:	4663      	mov	r3, ip
 8002c90:	1a1d      	subs	r5, r3, r0
 8002c92:	45ac      	cmp	ip, r5
 8002c94:	4192      	sbcs	r2, r2
 8002c96:	9b02      	ldr	r3, [sp, #8]
 8002c98:	4252      	negs	r2, r2
 8002c9a:	1b1c      	subs	r4, r3, r4
 8002c9c:	000e      	movs	r6, r1
 8002c9e:	4688      	mov	r8, r1
 8002ca0:	2701      	movs	r7, #1
 8002ca2:	1aa4      	subs	r4, r4, r2
 8002ca4:	e546      	b.n	8002734 <__aeabi_dsub+0xc4>
 8002ca6:	4663      	mov	r3, ip
 8002ca8:	08d9      	lsrs	r1, r3, #3
 8002caa:	9b02      	ldr	r3, [sp, #8]
 8002cac:	075a      	lsls	r2, r3, #29
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	08dc      	lsrs	r4, r3, #3
 8002cb2:	e5ee      	b.n	8002892 <__aeabi_dsub+0x222>
 8002cb4:	4663      	mov	r3, ip
 8002cb6:	9c02      	ldr	r4, [sp, #8]
 8002cb8:	9303      	str	r3, [sp, #12]
 8002cba:	e6c7      	b.n	8002a4c <__aeabi_dsub+0x3dc>
 8002cbc:	08c0      	lsrs	r0, r0, #3
 8002cbe:	2a00      	cmp	r2, #0
 8002cc0:	d100      	bne.n	8002cc4 <__aeabi_dsub+0x654>
 8002cc2:	e6aa      	b.n	8002a1a <__aeabi_dsub+0x3aa>
 8002cc4:	0762      	lsls	r2, r4, #29
 8002cc6:	4310      	orrs	r0, r2
 8002cc8:	2280      	movs	r2, #128	@ 0x80
 8002cca:	08e4      	lsrs	r4, r4, #3
 8002ccc:	0312      	lsls	r2, r2, #12
 8002cce:	4214      	tst	r4, r2
 8002cd0:	d0d7      	beq.n	8002c82 <__aeabi_dsub+0x612>
 8002cd2:	9f02      	ldr	r7, [sp, #8]
 8002cd4:	08fd      	lsrs	r5, r7, #3
 8002cd6:	4215      	tst	r5, r2
 8002cd8:	d1d3      	bne.n	8002c82 <__aeabi_dsub+0x612>
 8002cda:	4663      	mov	r3, ip
 8002cdc:	2601      	movs	r6, #1
 8002cde:	08d8      	lsrs	r0, r3, #3
 8002ce0:	077b      	lsls	r3, r7, #29
 8002ce2:	002c      	movs	r4, r5
 8002ce4:	4318      	orrs	r0, r3
 8002ce6:	400e      	ands	r6, r1
 8002ce8:	e7cb      	b.n	8002c82 <__aeabi_dsub+0x612>
 8002cea:	000a      	movs	r2, r1
 8002cec:	0027      	movs	r7, r4
 8002cee:	3a20      	subs	r2, #32
 8002cf0:	40d7      	lsrs	r7, r2
 8002cf2:	2920      	cmp	r1, #32
 8002cf4:	d005      	beq.n	8002d02 <__aeabi_dsub+0x692>
 8002cf6:	2240      	movs	r2, #64	@ 0x40
 8002cf8:	1a52      	subs	r2, r2, r1
 8002cfa:	4094      	lsls	r4, r2
 8002cfc:	0025      	movs	r5, r4
 8002cfe:	4305      	orrs	r5, r0
 8002d00:	9503      	str	r5, [sp, #12]
 8002d02:	9d03      	ldr	r5, [sp, #12]
 8002d04:	1e6a      	subs	r2, r5, #1
 8002d06:	4195      	sbcs	r5, r2
 8002d08:	432f      	orrs	r7, r5
 8002d0a:	e610      	b.n	800292e <__aeabi_dsub+0x2be>
 8002d0c:	0014      	movs	r4, r2
 8002d0e:	2500      	movs	r5, #0
 8002d10:	2200      	movs	r2, #0
 8002d12:	e556      	b.n	80027c2 <__aeabi_dsub+0x152>
 8002d14:	9b02      	ldr	r3, [sp, #8]
 8002d16:	4460      	add	r0, ip
 8002d18:	4699      	mov	r9, r3
 8002d1a:	4560      	cmp	r0, ip
 8002d1c:	4192      	sbcs	r2, r2
 8002d1e:	444c      	add	r4, r9
 8002d20:	4252      	negs	r2, r2
 8002d22:	0005      	movs	r5, r0
 8002d24:	18a4      	adds	r4, r4, r2
 8002d26:	e74c      	b.n	8002bc2 <__aeabi_dsub+0x552>
 8002d28:	001a      	movs	r2, r3
 8002d2a:	001c      	movs	r4, r3
 8002d2c:	432a      	orrs	r2, r5
 8002d2e:	d000      	beq.n	8002d32 <__aeabi_dsub+0x6c2>
 8002d30:	e6b3      	b.n	8002a9a <__aeabi_dsub+0x42a>
 8002d32:	e6c9      	b.n	8002ac8 <__aeabi_dsub+0x458>
 8002d34:	2480      	movs	r4, #128	@ 0x80
 8002d36:	2600      	movs	r6, #0
 8002d38:	0324      	lsls	r4, r4, #12
 8002d3a:	e5ae      	b.n	800289a <__aeabi_dsub+0x22a>
 8002d3c:	2120      	movs	r1, #32
 8002d3e:	2500      	movs	r5, #0
 8002d40:	1a09      	subs	r1, r1, r0
 8002d42:	e517      	b.n	8002774 <__aeabi_dsub+0x104>
 8002d44:	2200      	movs	r2, #0
 8002d46:	2500      	movs	r5, #0
 8002d48:	4c0b      	ldr	r4, [pc, #44]	@ (8002d78 <__aeabi_dsub+0x708>)
 8002d4a:	e53a      	b.n	80027c2 <__aeabi_dsub+0x152>
 8002d4c:	2d00      	cmp	r5, #0
 8002d4e:	d100      	bne.n	8002d52 <__aeabi_dsub+0x6e2>
 8002d50:	e5f6      	b.n	8002940 <__aeabi_dsub+0x2d0>
 8002d52:	464b      	mov	r3, r9
 8002d54:	1bda      	subs	r2, r3, r7
 8002d56:	4692      	mov	sl, r2
 8002d58:	2f00      	cmp	r7, #0
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x6ee>
 8002d5c:	e66f      	b.n	8002a3e <__aeabi_dsub+0x3ce>
 8002d5e:	2a38      	cmp	r2, #56	@ 0x38
 8002d60:	dc05      	bgt.n	8002d6e <__aeabi_dsub+0x6fe>
 8002d62:	2680      	movs	r6, #128	@ 0x80
 8002d64:	0436      	lsls	r6, r6, #16
 8002d66:	4334      	orrs	r4, r6
 8002d68:	4688      	mov	r8, r1
 8002d6a:	000e      	movs	r6, r1
 8002d6c:	e6d1      	b.n	8002b12 <__aeabi_dsub+0x4a2>
 8002d6e:	4688      	mov	r8, r1
 8002d70:	000e      	movs	r6, r1
 8002d72:	2501      	movs	r5, #1
 8002d74:	e6de      	b.n	8002b34 <__aeabi_dsub+0x4c4>
 8002d76:	46c0      	nop			@ (mov r8, r8)
 8002d78:	000007ff 	.word	0x000007ff
 8002d7c:	ff7fffff 	.word	0xff7fffff
 8002d80:	000007fe 	.word	0x000007fe
 8002d84:	2d00      	cmp	r5, #0
 8002d86:	d100      	bne.n	8002d8a <__aeabi_dsub+0x71a>
 8002d88:	e668      	b.n	8002a5c <__aeabi_dsub+0x3ec>
 8002d8a:	464b      	mov	r3, r9
 8002d8c:	1bd9      	subs	r1, r3, r7
 8002d8e:	2f00      	cmp	r7, #0
 8002d90:	d101      	bne.n	8002d96 <__aeabi_dsub+0x726>
 8002d92:	468a      	mov	sl, r1
 8002d94:	e5a7      	b.n	80028e6 <__aeabi_dsub+0x276>
 8002d96:	2701      	movs	r7, #1
 8002d98:	2938      	cmp	r1, #56	@ 0x38
 8002d9a:	dd00      	ble.n	8002d9e <__aeabi_dsub+0x72e>
 8002d9c:	e5c7      	b.n	800292e <__aeabi_dsub+0x2be>
 8002d9e:	2280      	movs	r2, #128	@ 0x80
 8002da0:	0412      	lsls	r2, r2, #16
 8002da2:	4314      	orrs	r4, r2
 8002da4:	e5af      	b.n	8002906 <__aeabi_dsub+0x296>
 8002da6:	46c0      	nop			@ (mov r8, r8)

08002da8 <__aeabi_d2iz>:
 8002da8:	000b      	movs	r3, r1
 8002daa:	0002      	movs	r2, r0
 8002dac:	b570      	push	{r4, r5, r6, lr}
 8002dae:	4d16      	ldr	r5, [pc, #88]	@ (8002e08 <__aeabi_d2iz+0x60>)
 8002db0:	030c      	lsls	r4, r1, #12
 8002db2:	b082      	sub	sp, #8
 8002db4:	0049      	lsls	r1, r1, #1
 8002db6:	2000      	movs	r0, #0
 8002db8:	9200      	str	r2, [sp, #0]
 8002dba:	9301      	str	r3, [sp, #4]
 8002dbc:	0b24      	lsrs	r4, r4, #12
 8002dbe:	0d49      	lsrs	r1, r1, #21
 8002dc0:	0fde      	lsrs	r6, r3, #31
 8002dc2:	42a9      	cmp	r1, r5
 8002dc4:	dd04      	ble.n	8002dd0 <__aeabi_d2iz+0x28>
 8002dc6:	4811      	ldr	r0, [pc, #68]	@ (8002e0c <__aeabi_d2iz+0x64>)
 8002dc8:	4281      	cmp	r1, r0
 8002dca:	dd03      	ble.n	8002dd4 <__aeabi_d2iz+0x2c>
 8002dcc:	4b10      	ldr	r3, [pc, #64]	@ (8002e10 <__aeabi_d2iz+0x68>)
 8002dce:	18f0      	adds	r0, r6, r3
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd70      	pop	{r4, r5, r6, pc}
 8002dd4:	2080      	movs	r0, #128	@ 0x80
 8002dd6:	0340      	lsls	r0, r0, #13
 8002dd8:	4320      	orrs	r0, r4
 8002dda:	4c0e      	ldr	r4, [pc, #56]	@ (8002e14 <__aeabi_d2iz+0x6c>)
 8002ddc:	1a64      	subs	r4, r4, r1
 8002dde:	2c1f      	cmp	r4, #31
 8002de0:	dd08      	ble.n	8002df4 <__aeabi_d2iz+0x4c>
 8002de2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e18 <__aeabi_d2iz+0x70>)
 8002de4:	1a5b      	subs	r3, r3, r1
 8002de6:	40d8      	lsrs	r0, r3
 8002de8:	0003      	movs	r3, r0
 8002dea:	4258      	negs	r0, r3
 8002dec:	2e00      	cmp	r6, #0
 8002dee:	d1ef      	bne.n	8002dd0 <__aeabi_d2iz+0x28>
 8002df0:	0018      	movs	r0, r3
 8002df2:	e7ed      	b.n	8002dd0 <__aeabi_d2iz+0x28>
 8002df4:	4b09      	ldr	r3, [pc, #36]	@ (8002e1c <__aeabi_d2iz+0x74>)
 8002df6:	9a00      	ldr	r2, [sp, #0]
 8002df8:	469c      	mov	ip, r3
 8002dfa:	0003      	movs	r3, r0
 8002dfc:	4461      	add	r1, ip
 8002dfe:	408b      	lsls	r3, r1
 8002e00:	40e2      	lsrs	r2, r4
 8002e02:	4313      	orrs	r3, r2
 8002e04:	e7f1      	b.n	8002dea <__aeabi_d2iz+0x42>
 8002e06:	46c0      	nop			@ (mov r8, r8)
 8002e08:	000003fe 	.word	0x000003fe
 8002e0c:	0000041d 	.word	0x0000041d
 8002e10:	7fffffff 	.word	0x7fffffff
 8002e14:	00000433 	.word	0x00000433
 8002e18:	00000413 	.word	0x00000413
 8002e1c:	fffffbed 	.word	0xfffffbed

08002e20 <__aeabi_i2d>:
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	2800      	cmp	r0, #0
 8002e24:	d016      	beq.n	8002e54 <__aeabi_i2d+0x34>
 8002e26:	17c3      	asrs	r3, r0, #31
 8002e28:	18c5      	adds	r5, r0, r3
 8002e2a:	405d      	eors	r5, r3
 8002e2c:	0fc4      	lsrs	r4, r0, #31
 8002e2e:	0028      	movs	r0, r5
 8002e30:	f000 f890 	bl	8002f54 <__clzsi2>
 8002e34:	4b10      	ldr	r3, [pc, #64]	@ (8002e78 <__aeabi_i2d+0x58>)
 8002e36:	1a1b      	subs	r3, r3, r0
 8002e38:	055b      	lsls	r3, r3, #21
 8002e3a:	0d5b      	lsrs	r3, r3, #21
 8002e3c:	280a      	cmp	r0, #10
 8002e3e:	dc14      	bgt.n	8002e6a <__aeabi_i2d+0x4a>
 8002e40:	0002      	movs	r2, r0
 8002e42:	002e      	movs	r6, r5
 8002e44:	3215      	adds	r2, #21
 8002e46:	4096      	lsls	r6, r2
 8002e48:	220b      	movs	r2, #11
 8002e4a:	1a12      	subs	r2, r2, r0
 8002e4c:	40d5      	lsrs	r5, r2
 8002e4e:	032d      	lsls	r5, r5, #12
 8002e50:	0b2d      	lsrs	r5, r5, #12
 8002e52:	e003      	b.n	8002e5c <__aeabi_i2d+0x3c>
 8002e54:	2400      	movs	r4, #0
 8002e56:	2300      	movs	r3, #0
 8002e58:	2500      	movs	r5, #0
 8002e5a:	2600      	movs	r6, #0
 8002e5c:	051b      	lsls	r3, r3, #20
 8002e5e:	432b      	orrs	r3, r5
 8002e60:	07e4      	lsls	r4, r4, #31
 8002e62:	4323      	orrs	r3, r4
 8002e64:	0030      	movs	r0, r6
 8002e66:	0019      	movs	r1, r3
 8002e68:	bd70      	pop	{r4, r5, r6, pc}
 8002e6a:	380b      	subs	r0, #11
 8002e6c:	4085      	lsls	r5, r0
 8002e6e:	032d      	lsls	r5, r5, #12
 8002e70:	2600      	movs	r6, #0
 8002e72:	0b2d      	lsrs	r5, r5, #12
 8002e74:	e7f2      	b.n	8002e5c <__aeabi_i2d+0x3c>
 8002e76:	46c0      	nop			@ (mov r8, r8)
 8002e78:	0000041e 	.word	0x0000041e

08002e7c <__aeabi_ui2d>:
 8002e7c:	b510      	push	{r4, lr}
 8002e7e:	1e04      	subs	r4, r0, #0
 8002e80:	d010      	beq.n	8002ea4 <__aeabi_ui2d+0x28>
 8002e82:	f000 f867 	bl	8002f54 <__clzsi2>
 8002e86:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec0 <__aeabi_ui2d+0x44>)
 8002e88:	1a1b      	subs	r3, r3, r0
 8002e8a:	055b      	lsls	r3, r3, #21
 8002e8c:	0d5b      	lsrs	r3, r3, #21
 8002e8e:	280a      	cmp	r0, #10
 8002e90:	dc0f      	bgt.n	8002eb2 <__aeabi_ui2d+0x36>
 8002e92:	220b      	movs	r2, #11
 8002e94:	0021      	movs	r1, r4
 8002e96:	1a12      	subs	r2, r2, r0
 8002e98:	40d1      	lsrs	r1, r2
 8002e9a:	3015      	adds	r0, #21
 8002e9c:	030a      	lsls	r2, r1, #12
 8002e9e:	4084      	lsls	r4, r0
 8002ea0:	0b12      	lsrs	r2, r2, #12
 8002ea2:	e001      	b.n	8002ea8 <__aeabi_ui2d+0x2c>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	051b      	lsls	r3, r3, #20
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	0020      	movs	r0, r4
 8002eae:	0019      	movs	r1, r3
 8002eb0:	bd10      	pop	{r4, pc}
 8002eb2:	0022      	movs	r2, r4
 8002eb4:	380b      	subs	r0, #11
 8002eb6:	4082      	lsls	r2, r0
 8002eb8:	0312      	lsls	r2, r2, #12
 8002eba:	2400      	movs	r4, #0
 8002ebc:	0b12      	lsrs	r2, r2, #12
 8002ebe:	e7f3      	b.n	8002ea8 <__aeabi_ui2d+0x2c>
 8002ec0:	0000041e 	.word	0x0000041e

08002ec4 <__aeabi_f2d>:
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	0242      	lsls	r2, r0, #9
 8002ec8:	0043      	lsls	r3, r0, #1
 8002eca:	0fc4      	lsrs	r4, r0, #31
 8002ecc:	20fe      	movs	r0, #254	@ 0xfe
 8002ece:	0e1b      	lsrs	r3, r3, #24
 8002ed0:	1c59      	adds	r1, r3, #1
 8002ed2:	0a55      	lsrs	r5, r2, #9
 8002ed4:	4208      	tst	r0, r1
 8002ed6:	d00c      	beq.n	8002ef2 <__aeabi_f2d+0x2e>
 8002ed8:	21e0      	movs	r1, #224	@ 0xe0
 8002eda:	0089      	lsls	r1, r1, #2
 8002edc:	468c      	mov	ip, r1
 8002ede:	076d      	lsls	r5, r5, #29
 8002ee0:	0b12      	lsrs	r2, r2, #12
 8002ee2:	4463      	add	r3, ip
 8002ee4:	051b      	lsls	r3, r3, #20
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	07e4      	lsls	r4, r4, #31
 8002eea:	4323      	orrs	r3, r4
 8002eec:	0028      	movs	r0, r5
 8002eee:	0019      	movs	r1, r3
 8002ef0:	bd70      	pop	{r4, r5, r6, pc}
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d114      	bne.n	8002f20 <__aeabi_f2d+0x5c>
 8002ef6:	2d00      	cmp	r5, #0
 8002ef8:	d01b      	beq.n	8002f32 <__aeabi_f2d+0x6e>
 8002efa:	0028      	movs	r0, r5
 8002efc:	f000 f82a 	bl	8002f54 <__clzsi2>
 8002f00:	280a      	cmp	r0, #10
 8002f02:	dc1c      	bgt.n	8002f3e <__aeabi_f2d+0x7a>
 8002f04:	230b      	movs	r3, #11
 8002f06:	002a      	movs	r2, r5
 8002f08:	1a1b      	subs	r3, r3, r0
 8002f0a:	40da      	lsrs	r2, r3
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	3315      	adds	r3, #21
 8002f10:	409d      	lsls	r5, r3
 8002f12:	4b0e      	ldr	r3, [pc, #56]	@ (8002f4c <__aeabi_f2d+0x88>)
 8002f14:	0312      	lsls	r2, r2, #12
 8002f16:	1a1b      	subs	r3, r3, r0
 8002f18:	055b      	lsls	r3, r3, #21
 8002f1a:	0b12      	lsrs	r2, r2, #12
 8002f1c:	0d5b      	lsrs	r3, r3, #21
 8002f1e:	e7e1      	b.n	8002ee4 <__aeabi_f2d+0x20>
 8002f20:	2d00      	cmp	r5, #0
 8002f22:	d009      	beq.n	8002f38 <__aeabi_f2d+0x74>
 8002f24:	0b13      	lsrs	r3, r2, #12
 8002f26:	2280      	movs	r2, #128	@ 0x80
 8002f28:	0312      	lsls	r2, r2, #12
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	076d      	lsls	r5, r5, #29
 8002f2e:	4b08      	ldr	r3, [pc, #32]	@ (8002f50 <__aeabi_f2d+0x8c>)
 8002f30:	e7d8      	b.n	8002ee4 <__aeabi_f2d+0x20>
 8002f32:	2300      	movs	r3, #0
 8002f34:	2200      	movs	r2, #0
 8002f36:	e7d5      	b.n	8002ee4 <__aeabi_f2d+0x20>
 8002f38:	2200      	movs	r2, #0
 8002f3a:	4b05      	ldr	r3, [pc, #20]	@ (8002f50 <__aeabi_f2d+0x8c>)
 8002f3c:	e7d2      	b.n	8002ee4 <__aeabi_f2d+0x20>
 8002f3e:	0003      	movs	r3, r0
 8002f40:	002a      	movs	r2, r5
 8002f42:	3b0b      	subs	r3, #11
 8002f44:	409a      	lsls	r2, r3
 8002f46:	2500      	movs	r5, #0
 8002f48:	e7e3      	b.n	8002f12 <__aeabi_f2d+0x4e>
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	00000389 	.word	0x00000389
 8002f50:	000007ff 	.word	0x000007ff

08002f54 <__clzsi2>:
 8002f54:	211c      	movs	r1, #28
 8002f56:	2301      	movs	r3, #1
 8002f58:	041b      	lsls	r3, r3, #16
 8002f5a:	4298      	cmp	r0, r3
 8002f5c:	d301      	bcc.n	8002f62 <__clzsi2+0xe>
 8002f5e:	0c00      	lsrs	r0, r0, #16
 8002f60:	3910      	subs	r1, #16
 8002f62:	0a1b      	lsrs	r3, r3, #8
 8002f64:	4298      	cmp	r0, r3
 8002f66:	d301      	bcc.n	8002f6c <__clzsi2+0x18>
 8002f68:	0a00      	lsrs	r0, r0, #8
 8002f6a:	3908      	subs	r1, #8
 8002f6c:	091b      	lsrs	r3, r3, #4
 8002f6e:	4298      	cmp	r0, r3
 8002f70:	d301      	bcc.n	8002f76 <__clzsi2+0x22>
 8002f72:	0900      	lsrs	r0, r0, #4
 8002f74:	3904      	subs	r1, #4
 8002f76:	a202      	add	r2, pc, #8	@ (adr r2, 8002f80 <__clzsi2+0x2c>)
 8002f78:	5c10      	ldrb	r0, [r2, r0]
 8002f7a:	1840      	adds	r0, r0, r1
 8002f7c:	4770      	bx	lr
 8002f7e:	46c0      	nop			@ (mov r8, r8)
 8002f80:	02020304 	.word	0x02020304
 8002f84:	01010101 	.word	0x01010101
	...

08002f90 <__clzdi2>:
 8002f90:	b510      	push	{r4, lr}
 8002f92:	2900      	cmp	r1, #0
 8002f94:	d103      	bne.n	8002f9e <__clzdi2+0xe>
 8002f96:	f7ff ffdd 	bl	8002f54 <__clzsi2>
 8002f9a:	3020      	adds	r0, #32
 8002f9c:	e002      	b.n	8002fa4 <__clzdi2+0x14>
 8002f9e:	0008      	movs	r0, r1
 8002fa0:	f7ff ffd8 	bl	8002f54 <__clzsi2>
 8002fa4:	bd10      	pop	{r4, pc}
 8002fa6:	46c0      	nop			@ (mov r8, r8)

08002fa8 <HAL_InitTick>:
  * @brief  don't enable systick
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Return function status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b002      	add	sp, #8
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  HW_RTC_DelayMs(Delay);   /* based on RTC */
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f000 fffd 	bl	8003fc4 <HW_RTC_DelayMs>
}
 8002fca:	46c0      	nop			@ (mov r8, r8)
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b002      	add	sp, #8
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8003014 <HAL_MspInit+0x40>)
 8002fda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8003014 <HAL_MspInit+0x40>)
 8002fde:	2180      	movs	r1, #128	@ 0x80
 8002fe0:	0549      	lsls	r1, r1, #21
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8002fe6:	f013 fdd5 	bl	8016b94 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 8002fea:	f013 fe53 	bl	8016c94 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8002fee:	4b0a      	ldr	r3, [pc, #40]	@ (8003018 <HAL_MspInit+0x44>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	4b09      	ldr	r3, [pc, #36]	@ (8003018 <HAL_MspInit+0x44>)
 8002ff4:	2108      	movs	r1, #8
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	601a      	str	r2, [r3, #0]

  /*In debug mode, e.g. when DBGMCU is activated, Arm core has always clocks
   * And will not wait that the FLACH is ready to be read. It can miss in this
   * case the first instruction. To overcome this issue, the flash remain clcoked during sleep mode
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););
 8002ffa:	4b07      	ldr	r3, [pc, #28]	@ (8003018 <HAL_MspInit+0x44>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4b06      	ldr	r3, [pc, #24]	@ (8003018 <HAL_MspInit+0x44>)
 8003000:	2108      	movs	r1, #8
 8003002:	438a      	bics	r2, r1
 8003004:	601a      	str	r2, [r3, #0]

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8003006:	f013 fe37 	bl	8016c78 <HAL_PWREx_EnableFastWakeUp>
#else
  HAL_PWREx_DisableFastWakeUp();
#endif

  HW_GpioInit();
 800300a:	f000 f8fd 	bl	8003208 <HW_GpioInit>
}
 800300e:	46c0      	nop			@ (mov r8, r8)
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40021000 	.word	0x40021000
 8003018:	40022000 	.word	0x40022000

0800301c <HAL_RTC_MspInit>:
  *        order to modify the RTC Clock source, as consequence RTC registers (including
  *        the backup registers) and RCC_CSR register are set to their reset values.
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 800301c:	b590      	push	{r4, r7, lr}
 800301e:	b09b      	sub	sp, #108	@ 0x6c
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003024:	2430      	movs	r4, #48	@ 0x30
 8003026:	193b      	adds	r3, r7, r4
 8003028:	0018      	movs	r0, r3
 800302a:	2338      	movs	r3, #56	@ 0x38
 800302c:	001a      	movs	r2, r3
 800302e:	2100      	movs	r1, #0
 8003030:	f016 fd4c 	bl	8019acc <memset>
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct = {0};
 8003034:	230c      	movs	r3, #12
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	0018      	movs	r0, r3
 800303a:	2324      	movs	r3, #36	@ 0x24
 800303c:	001a      	movs	r2, r3
 800303e:	2100      	movs	r1, #0
 8003040:	f016 fd44 	bl	8019acc <memset>

  /*##-1- Configue the RTC clock soucre ######################################*/
  /* -a- Enable LSE Oscillator */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 8003044:	193b      	adds	r3, r7, r4
 8003046:	2204      	movs	r2, #4
 8003048:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800304a:	193b      	adds	r3, r7, r4
 800304c:	2200      	movs	r2, #0
 800304e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003050:	193b      	adds	r3, r7, r4
 8003052:	2280      	movs	r2, #128	@ 0x80
 8003054:	0052      	lsls	r2, r2, #1
 8003056:	609a      	str	r2, [r3, #8]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003058:	193b      	adds	r3, r7, r4
 800305a:	0018      	movs	r0, r3
 800305c:	f013 fe28 	bl	8016cb0 <HAL_RCC_OscConfig>
 8003060:	1e03      	subs	r3, r0, #0
 8003062:	d001      	beq.n	8003068 <HAL_RTC_MspInit+0x4c>
  {
    Error_Handler();
 8003064:	f000 fd08 	bl	8003a78 <Error_Handler>
  }

  /* -b- Select LSI as RTC clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003068:	210c      	movs	r1, #12
 800306a:	187b      	adds	r3, r7, r1
 800306c:	2220      	movs	r2, #32
 800306e:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003070:	187b      	adds	r3, r7, r1
 8003072:	2280      	movs	r2, #128	@ 0x80
 8003074:	0252      	lsls	r2, r2, #9
 8003076:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003078:	187b      	adds	r3, r7, r1
 800307a:	0018      	movs	r0, r3
 800307c:	f014 fbce 	bl	801781c <HAL_RCCEx_PeriphCLKConfig>
 8003080:	1e03      	subs	r3, r0, #0
 8003082:	d001      	beq.n	8003088 <HAL_RTC_MspInit+0x6c>
  {
    Error_Handler();
 8003084:	f000 fcf8 	bl	8003a78 <Error_Handler>
  }

  /*##-2- Enable the RTC peripheral Clock ####################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 8003088:	4b09      	ldr	r3, [pc, #36]	@ (80030b0 <HAL_RTC_MspInit+0x94>)
 800308a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800308c:	4b08      	ldr	r3, [pc, #32]	@ (80030b0 <HAL_RTC_MspInit+0x94>)
 800308e:	2180      	movs	r1, #128	@ 0x80
 8003090:	02c9      	lsls	r1, r1, #11
 8003092:	430a      	orrs	r2, r1
 8003094:	651a      	str	r2, [r3, #80]	@ 0x50

  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 8003096:	2200      	movs	r2, #0
 8003098:	2100      	movs	r1, #0
 800309a:	2002      	movs	r0, #2
 800309c:	f013 f99a 	bl	80163d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80030a0:	2002      	movs	r0, #2
 80030a2:	f013 f9ac 	bl	80163fe <HAL_NVIC_EnableIRQ>
}
 80030a6:	46c0      	nop			@ (mov r8, r8)
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b01b      	add	sp, #108	@ 0x6c
 80030ac:	bd90      	pop	{r4, r7, pc}
 80030ae:	46c0      	nop			@ (mov r8, r8)
 80030b0:	40021000 	.word	0x40021000

080030b4 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  TimerIrqHandler();
 80030bc:	f011 ffe8 	bl	8015090 <TimerIrqHandler>
}
 80030c0:	46c0      	nop			@ (mov r8, r8)
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b002      	add	sp, #8
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	0002      	movs	r2, r0
 80030d0:	1dbb      	adds	r3, r7, #6
 80030d2:	801a      	strh	r2, [r3, #0]
  HW_GPIO_IrqHandler(GPIO_Pin);
 80030d4:	1dbb      	adds	r3, r7, #6
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	0018      	movs	r0, r3
 80030da:	f000 fd89 	bl	8003bf0 <HW_GPIO_IrqHandler>
}
 80030de:	46c0      	nop			@ (mov r8, r8)
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b002      	add	sp, #8
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <MSP_GetIRQn>:
  * @brief  Gets IRQ number as a function of the GPIO_Pin.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn(uint16_t GPIO_Pin)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	0002      	movs	r2, r0
 80030ee:	1dbb      	adds	r3, r7, #6
 80030f0:	801a      	strh	r2, [r3, #0]
  switch (GPIO_Pin)
 80030f2:	1dbb      	adds	r3, r7, #6
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d00a      	beq.n	8003110 <MSP_GetIRQn+0x2a>
 80030fa:	dc0b      	bgt.n	8003114 <MSP_GetIRQn+0x2e>
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	dc02      	bgt.n	8003106 <MSP_GetIRQn+0x20>
 8003100:	2b00      	cmp	r3, #0
 8003102:	dc03      	bgt.n	800310c <MSP_GetIRQn+0x26>
 8003104:	e006      	b.n	8003114 <MSP_GetIRQn+0x2e>
 8003106:	2b04      	cmp	r3, #4
 8003108:	d002      	beq.n	8003110 <MSP_GetIRQn+0x2a>
 800310a:	e003      	b.n	8003114 <MSP_GetIRQn+0x2e>
  {
    case GPIO_PIN_0:
    case GPIO_PIN_1:
      return EXTI0_1_IRQn;
 800310c:	2305      	movs	r3, #5
 800310e:	e002      	b.n	8003116 <MSP_GetIRQn+0x30>
    case GPIO_PIN_2:
    case GPIO_PIN_3:
      return EXTI2_3_IRQn;
 8003110:	2306      	movs	r3, #6
 8003112:	e000      	b.n	8003116 <MSP_GetIRQn+0x30>
    case GPIO_PIN_12:
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15:
    default:
      return EXTI4_15_IRQn;
 8003114:	2307      	movs	r3, #7
  }
}
 8003116:	0018      	movs	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	b002      	add	sp, #8
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <HW_Init>:
  * @brief This function initializes the hardware
  * @param None
  * @retval None
  */
void HW_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  if (McuInitialized == false)
 8003124:	4b12      	ldr	r3, [pc, #72]	@ (8003170 <HW_Init+0x50>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2201      	movs	r2, #1
 800312a:	4053      	eors	r3, r2
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d01b      	beq.n	800316a <HW_Init+0x4a>
#if defined( USE_BOOTLOADER )
    /* Set the Vector Table base location at 0x3000 */
    NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
#endif

    HW_AdcInit();
 8003132:	f000 fa51 	bl	80035d8 <HW_AdcInit>

    Radio.IoInit();
 8003136:	4b0f      	ldr	r3, [pc, #60]	@ (8003174 <HW_Init+0x54>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4798      	blx	r3

    HW_SPI_Init();
 800313c:	f001 fa02 	bl	8004544 <HW_SPI_Init>

    HW_RTC_Init();
 8003140:	f000 fde0 	bl	8003d04 <HW_RTC_Init>

    TraceInit();
 8003144:	f012 f988 	bl	8015458 <TraceInit>

    BSP_sensor_Init();
 8003148:	f000 fc36 	bl	80039b8 <BSP_sensor_Init>

    BSP_LED_Init(LED1);
 800314c:	2000      	movs	r0, #0
 800314e:	f001 ff6b 	bl	8005028 <BSP_LED_Init>
    BSP_LED_Init(LED2);
 8003152:	2001      	movs	r0, #1
 8003154:	f001 ff68 	bl	8005028 <BSP_LED_Init>
    BSP_LED_Init(LED3);
 8003158:	2002      	movs	r0, #2
 800315a:	f001 ff65 	bl	8005028 <BSP_LED_Init>
    BSP_LED_Init(LED4);
 800315e:	2003      	movs	r0, #3
 8003160:	f001 ff62 	bl	8005028 <BSP_LED_Init>

    McuInitialized = true;
 8003164:	4b02      	ldr	r3, [pc, #8]	@ (8003170 <HW_Init+0x50>)
 8003166:	2201      	movs	r2, #1
 8003168:	701a      	strb	r2, [r3, #0]
  }
}
 800316a:	46c0      	nop			@ (mov r8, r8)
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	2000019d 	.word	0x2000019d
 8003174:	0801adcc 	.word	0x0801adcc

08003178 <HW_IoInit>:
  * @brief This function Initializes the hardware Ios
  * @param None
  * @retval None
  */
static void HW_IoInit(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  HW_SPI_IoInit();
 800317c:	f001 fa28 	bl	80045d0 <HW_SPI_IoInit>

  Radio.IoInit();
 8003180:	4b03      	ldr	r3, [pc, #12]	@ (8003190 <HW_IoInit+0x18>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4798      	blx	r3

  vcom_IoInit();
 8003186:	f001 fea3 	bl	8004ed0 <vcom_IoInit>
}
 800318a:	46c0      	nop			@ (mov r8, r8)
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	0801adcc 	.word	0x0801adcc

08003194 <HW_IoDeInit>:
  * @brief This function Deinitializes the hardware Ios
  * @param None
  * @retval None
  */
static void HW_IoDeInit(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
  /*  HW_SPI_IoDeInit( );*/
  GPIO_InitTypeDef initStruct = {0};
 800319a:	1d3b      	adds	r3, r7, #4
 800319c:	0018      	movs	r0, r3
 800319e:	2314      	movs	r3, #20
 80031a0:	001a      	movs	r2, r3
 80031a2:	2100      	movs	r1, #0
 80031a4:	f016 fc92 	bl	8019acc <memset>

  initStruct.Mode = GPIO_MODE_ANALOG;
 80031a8:	1d3b      	adds	r3, r7, #4
 80031aa:	2203      	movs	r2, #3
 80031ac:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 80031ae:	1d3b      	adds	r3, r7, #4
 80031b0:	2200      	movs	r2, #0
 80031b2:	609a      	str	r2, [r3, #8]
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 80031b4:	1d3a      	adds	r2, r7, #4
 80031b6:	23a0      	movs	r3, #160	@ 0xa0
 80031b8:	05db      	lsls	r3, r3, #23
 80031ba:	2180      	movs	r1, #128	@ 0x80
 80031bc:	0018      	movs	r0, r3
 80031be:	f000 fc65 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 80031c2:	1d3a      	adds	r2, r7, #4
 80031c4:	23a0      	movs	r3, #160	@ 0xa0
 80031c6:	05db      	lsls	r3, r3, #23
 80031c8:	2140      	movs	r1, #64	@ 0x40
 80031ca:	0018      	movs	r0, r3
 80031cc:	f000 fc5e 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	480b      	ldr	r0, [pc, #44]	@ (8003200 <HW_IoDeInit+0x6c>)
 80031d4:	001a      	movs	r2, r3
 80031d6:	2108      	movs	r1, #8
 80031d8:	f000 fc58 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 80031dc:	1d3a      	adds	r2, r7, #4
 80031de:	2380      	movs	r3, #128	@ 0x80
 80031e0:	0219      	lsls	r1, r3, #8
 80031e2:	23a0      	movs	r3, #160	@ 0xa0
 80031e4:	05db      	lsls	r3, r3, #23
 80031e6:	0018      	movs	r0, r3
 80031e8:	f000 fc50 	bl	8003a8c <HW_GPIO_Init>


  Radio.IoDeInit();
 80031ec:	4b05      	ldr	r3, [pc, #20]	@ (8003204 <HW_IoDeInit+0x70>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	4798      	blx	r3

  vcom_IoDeInit();
 80031f2:	f001 feb9 	bl	8004f68 <vcom_IoDeInit>
}
 80031f6:	46c0      	nop			@ (mov r8, r8)
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b006      	add	sp, #24
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	46c0      	nop			@ (mov r8, r8)
 8003200:	50000400 	.word	0x50000400
 8003204:	0801adcc 	.word	0x0801adcc

08003208 <HW_GpioInit>:


void HW_GpioInit(void)
{
 8003208:	b590      	push	{r4, r7, lr}
 800320a:	b08b      	sub	sp, #44	@ 0x2c
 800320c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320e:	2414      	movs	r4, #20
 8003210:	193b      	adds	r3, r7, r4
 8003212:	0018      	movs	r0, r3
 8003214:	2314      	movs	r3, #20
 8003216:	001a      	movs	r2, r3
 8003218:	2100      	movs	r1, #0
 800321a:	f016 fc57 	bl	8019acc <memset>

  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800321e:	4b38      	ldr	r3, [pc, #224]	@ (8003300 <HW_GpioInit+0xf8>)
 8003220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003222:	4b37      	ldr	r3, [pc, #220]	@ (8003300 <HW_GpioInit+0xf8>)
 8003224:	2101      	movs	r1, #1
 8003226:	430a      	orrs	r2, r1
 8003228:	62da      	str	r2, [r3, #44]	@ 0x2c
 800322a:	4b35      	ldr	r3, [pc, #212]	@ (8003300 <HW_GpioInit+0xf8>)
 800322c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322e:	2201      	movs	r2, #1
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003236:	4b32      	ldr	r3, [pc, #200]	@ (8003300 <HW_GpioInit+0xf8>)
 8003238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800323a:	4b31      	ldr	r3, [pc, #196]	@ (8003300 <HW_GpioInit+0xf8>)
 800323c:	2102      	movs	r1, #2
 800323e:	430a      	orrs	r2, r1
 8003240:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003242:	4b2f      	ldr	r3, [pc, #188]	@ (8003300 <HW_GpioInit+0xf8>)
 8003244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003246:	2202      	movs	r2, #2
 8003248:	4013      	ands	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800324e:	4b2c      	ldr	r3, [pc, #176]	@ (8003300 <HW_GpioInit+0xf8>)
 8003250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003252:	4b2b      	ldr	r3, [pc, #172]	@ (8003300 <HW_GpioInit+0xf8>)
 8003254:	2104      	movs	r1, #4
 8003256:	430a      	orrs	r2, r1
 8003258:	62da      	str	r2, [r3, #44]	@ 0x2c
 800325a:	4b29      	ldr	r3, [pc, #164]	@ (8003300 <HW_GpioInit+0xf8>)
 800325c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325e:	2204      	movs	r2, #4
 8003260:	4013      	ands	r3, r2
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003266:	4b26      	ldr	r3, [pc, #152]	@ (8003300 <HW_GpioInit+0xf8>)
 8003268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800326a:	4b25      	ldr	r3, [pc, #148]	@ (8003300 <HW_GpioInit+0xf8>)
 800326c:	2180      	movs	r1, #128	@ 0x80
 800326e:	430a      	orrs	r2, r1
 8003270:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003272:	4b23      	ldr	r3, [pc, #140]	@ (8003300 <HW_GpioInit+0xf8>)
 8003274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003276:	2280      	movs	r2, #128	@ 0x80
 8003278:	4013      	ands	r3, r2
 800327a:	607b      	str	r3, [r7, #4]
 800327c:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800327e:	193b      	adds	r3, r7, r4
 8003280:	2203      	movs	r2, #3
 8003282:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003284:	193b      	adds	r3, r7, r4
 8003286:	2200      	movs	r2, #0
 8003288:	609a      	str	r2, [r3, #8]
  /* All GPIOs except debug pins (SWCLK and SWD) */
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 800328a:	193b      	adds	r3, r7, r4
 800328c:	4a1d      	ldr	r2, [pc, #116]	@ (8003304 <HW_GpioInit+0xfc>)
 800328e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003290:	193a      	adds	r2, r7, r4
 8003292:	23a0      	movs	r3, #160	@ 0xa0
 8003294:	05db      	lsls	r3, r3, #23
 8003296:	0011      	movs	r1, r2
 8003298:	0018      	movs	r0, r3
 800329a:	f013 fac3 	bl	8016824 <HAL_GPIO_Init>

  /* All GPIOs */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 800329e:	193b      	adds	r3, r7, r4
 80032a0:	4a19      	ldr	r2, [pc, #100]	@ (8003308 <HW_GpioInit+0x100>)
 80032a2:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a4:	193b      	adds	r3, r7, r4
 80032a6:	4a19      	ldr	r2, [pc, #100]	@ (800330c <HW_GpioInit+0x104>)
 80032a8:	0019      	movs	r1, r3
 80032aa:	0010      	movs	r0, r2
 80032ac:	f013 faba 	bl	8016824 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032b0:	193b      	adds	r3, r7, r4
 80032b2:	4a17      	ldr	r2, [pc, #92]	@ (8003310 <HW_GpioInit+0x108>)
 80032b4:	0019      	movs	r1, r3
 80032b6:	0010      	movs	r0, r2
 80032b8:	f013 fab4 	bl	8016824 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80032bc:	193b      	adds	r3, r7, r4
 80032be:	4a15      	ldr	r2, [pc, #84]	@ (8003314 <HW_GpioInit+0x10c>)
 80032c0:	0019      	movs	r1, r3
 80032c2:	0010      	movs	r0, r2
 80032c4:	f013 faae 	bl	8016824 <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
 80032c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003300 <HW_GpioInit+0xf8>)
 80032ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003300 <HW_GpioInit+0xf8>)
 80032ce:	2101      	movs	r1, #1
 80032d0:	438a      	bics	r2, r1
 80032d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 80032d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003300 <HW_GpioInit+0xf8>)
 80032d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032d8:	4b09      	ldr	r3, [pc, #36]	@ (8003300 <HW_GpioInit+0xf8>)
 80032da:	2102      	movs	r1, #2
 80032dc:	438a      	bics	r2, r1
 80032de:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 80032e0:	4b07      	ldr	r3, [pc, #28]	@ (8003300 <HW_GpioInit+0xf8>)
 80032e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032e4:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <HW_GpioInit+0xf8>)
 80032e6:	2104      	movs	r1, #4
 80032e8:	438a      	bics	r2, r1
 80032ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 80032ec:	4b04      	ldr	r3, [pc, #16]	@ (8003300 <HW_GpioInit+0xf8>)
 80032ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032f0:	4b03      	ldr	r3, [pc, #12]	@ (8003300 <HW_GpioInit+0xf8>)
 80032f2:	2180      	movs	r1, #128	@ 0x80
 80032f4:	438a      	bics	r2, r1
 80032f6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80032f8:	46c0      	nop			@ (mov r8, r8)
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b00b      	add	sp, #44	@ 0x2c
 80032fe:	bd90      	pop	{r4, r7, pc}
 8003300:	40021000 	.word	0x40021000
 8003304:	00009fff 	.word	0x00009fff
 8003308:	0000ffff 	.word	0x0000ffff
 800330c:	50000400 	.word	0x50000400
 8003310:	50000800 	.word	0x50000800
 8003314:	50001c00 	.word	0x50001c00

08003318 <SystemClock_Config>:
  *            Flash Latency(WS)              = 1
  * @retval None
  */

void SystemClock_Config(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b094      	sub	sp, #80	@ 0x50
 800331c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800331e:	233c      	movs	r3, #60	@ 0x3c
 8003320:	18fb      	adds	r3, r7, r3
 8003322:	0018      	movs	r0, r3
 8003324:	2314      	movs	r3, #20
 8003326:	001a      	movs	r2, r3
 8003328:	2100      	movs	r1, #0
 800332a:	f016 fbcf 	bl	8019acc <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800332e:	1d3b      	adds	r3, r7, #4
 8003330:	0018      	movs	r0, r3
 8003332:	2338      	movs	r3, #56	@ 0x38
 8003334:	001a      	movs	r2, r3
 8003336:	2100      	movs	r1, #0
 8003338:	f016 fbc8 	bl	8019acc <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 800333c:	1d3b      	adds	r3, r7, #4
 800333e:	2202      	movs	r2, #2
 8003340:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 8003342:	1d3b      	adds	r3, r7, #4
 8003344:	2200      	movs	r2, #0
 8003346:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8003348:	1d3b      	adds	r3, r7, #4
 800334a:	2201      	movs	r2, #1
 800334c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800334e:	1d3b      	adds	r3, r7, #4
 8003350:	2210      	movs	r2, #16
 8003352:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8003354:	1d3b      	adds	r3, r7, #4
 8003356:	2202      	movs	r2, #2
 8003358:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	2200      	movs	r2, #0
 800335e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8003360:	1d3b      	adds	r3, r7, #4
 8003362:	2280      	movs	r2, #128	@ 0x80
 8003364:	0312      	lsls	r2, r2, #12
 8003366:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8003368:	1d3b      	adds	r3, r7, #4
 800336a:	2280      	movs	r2, #128	@ 0x80
 800336c:	0412      	lsls	r2, r2, #16
 800336e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003370:	1d3b      	adds	r3, r7, #4
 8003372:	0018      	movs	r0, r3
 8003374:	f013 fc9c 	bl	8016cb0 <HAL_RCC_OscConfig>
 8003378:	1e03      	subs	r3, r0, #0
 800337a:	d001      	beq.n	8003380 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800337c:	f000 fb7c 	bl	8003a78 <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003380:	4b19      	ldr	r3, [pc, #100]	@ (80033e8 <SystemClock_Config+0xd0>)
 8003382:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003384:	4b18      	ldr	r3, [pc, #96]	@ (80033e8 <SystemClock_Config+0xd0>)
 8003386:	2180      	movs	r1, #128	@ 0x80
 8003388:	0549      	lsls	r1, r1, #21
 800338a:	430a      	orrs	r2, r1
 800338c:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800338e:	4b17      	ldr	r3, [pc, #92]	@ (80033ec <SystemClock_Config+0xd4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a17      	ldr	r2, [pc, #92]	@ (80033f0 <SystemClock_Config+0xd8>)
 8003394:	401a      	ands	r2, r3
 8003396:	4b15      	ldr	r3, [pc, #84]	@ (80033ec <SystemClock_Config+0xd4>)
 8003398:	2180      	movs	r1, #128	@ 0x80
 800339a:	0109      	lsls	r1, r1, #4
 800339c:	430a      	orrs	r2, r1
 800339e:	601a      	str	r2, [r3, #0]

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 80033a0:	46c0      	nop			@ (mov r8, r8)
 80033a2:	4b12      	ldr	r3, [pc, #72]	@ (80033ec <SystemClock_Config+0xd4>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2210      	movs	r2, #16
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b10      	cmp	r3, #16
 80033ac:	d0f9      	beq.n	80033a2 <SystemClock_Config+0x8a>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80033ae:	213c      	movs	r1, #60	@ 0x3c
 80033b0:	187b      	adds	r3, r7, r1
 80033b2:	220f      	movs	r2, #15
 80033b4:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033b6:	187b      	adds	r3, r7, r1
 80033b8:	2203      	movs	r2, #3
 80033ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033bc:	187b      	adds	r3, r7, r1
 80033be:	2200      	movs	r2, #0
 80033c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80033c2:	187b      	adds	r3, r7, r1
 80033c4:	2200      	movs	r2, #0
 80033c6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033c8:	187b      	adds	r3, r7, r1
 80033ca:	2200      	movs	r2, #0
 80033cc:	611a      	str	r2, [r3, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80033ce:	187b      	adds	r3, r7, r1
 80033d0:	2101      	movs	r1, #1
 80033d2:	0018      	movs	r0, r3
 80033d4:	f014 f83c 	bl	8017450 <HAL_RCC_ClockConfig>
 80033d8:	1e03      	subs	r3, r0, #0
 80033da:	d001      	beq.n	80033e0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80033dc:	f000 fb4c 	bl	8003a78 <Error_Handler>
  }
}
 80033e0:	46c0      	nop			@ (mov r8, r8)
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b014      	add	sp, #80	@ 0x50
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40007000 	.word	0x40007000
 80033f0:	ffffe7ff 	.word	0xffffe7ff

080033f4 <HW_GetRandomSeed>:
  * @note based on the device unique ID
  * @param None
  * @retval see
  */
uint32_t HW_GetRandomSeed(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  return ((*(uint32_t *)ID1) ^ (*(uint32_t *)ID2) ^ (*(uint32_t *)ID3));
 80033f8:	4b05      	ldr	r3, [pc, #20]	@ (8003410 <HW_GetRandomSeed+0x1c>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b05      	ldr	r3, [pc, #20]	@ (8003414 <HW_GetRandomSeed+0x20>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	405a      	eors	r2, r3
 8003402:	4b05      	ldr	r3, [pc, #20]	@ (8003418 <HW_GetRandomSeed+0x24>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4053      	eors	r3, r2
}
 8003408:	0018      	movs	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	46c0      	nop			@ (mov r8, r8)
 8003410:	1ff80050 	.word	0x1ff80050
 8003414:	1ff80054 	.word	0x1ff80054
 8003418:	1ff80064 	.word	0x1ff80064

0800341c <HW_GetUniqueId>:
  * @brief This function return a unique ID
  * @param unique ID
  * @retval none
  */
void HW_GetUniqueId(uint8_t *id)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  id[7] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 24;
 8003424:	4b23      	ldr	r3, [pc, #140]	@ (80034b4 <HW_GetUniqueId+0x98>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4b23      	ldr	r3, [pc, #140]	@ (80034b8 <HW_GetUniqueId+0x9c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	18d3      	adds	r3, r2, r3
 800342e:	0e1a      	lsrs	r2, r3, #24
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3307      	adds	r3, #7
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	701a      	strb	r2, [r3, #0]
  id[6] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 16;
 8003438:	4b1e      	ldr	r3, [pc, #120]	@ (80034b4 <HW_GetUniqueId+0x98>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4b1e      	ldr	r3, [pc, #120]	@ (80034b8 <HW_GetUniqueId+0x9c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	18d3      	adds	r3, r2, r3
 8003442:	0c1a      	lsrs	r2, r3, #16
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3306      	adds	r3, #6
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	701a      	strb	r2, [r3, #0]
  id[5] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 8;
 800344c:	4b19      	ldr	r3, [pc, #100]	@ (80034b4 <HW_GetUniqueId+0x98>)
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4b19      	ldr	r3, [pc, #100]	@ (80034b8 <HW_GetUniqueId+0x9c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	18d3      	adds	r3, r2, r3
 8003456:	0a1a      	lsrs	r2, r3, #8
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3305      	adds	r3, #5
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	701a      	strb	r2, [r3, #0]
  id[4] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3));
 8003460:	4b14      	ldr	r3, [pc, #80]	@ (80034b4 <HW_GetUniqueId+0x98>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	b2d9      	uxtb	r1, r3
 8003466:	4b14      	ldr	r3, [pc, #80]	@ (80034b8 <HW_GetUniqueId+0x9c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	b2da      	uxtb	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3304      	adds	r3, #4
 8003470:	188a      	adds	r2, r1, r2
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	701a      	strb	r2, [r3, #0]
  id[3] = ((*(uint32_t *)ID2)) >> 24;
 8003476:	4b11      	ldr	r3, [pc, #68]	@ (80034bc <HW_GetUniqueId+0xa0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	0e1a      	lsrs	r2, r3, #24
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3303      	adds	r3, #3
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	701a      	strb	r2, [r3, #0]
  id[2] = ((*(uint32_t *)ID2)) >> 16;
 8003484:	4b0d      	ldr	r3, [pc, #52]	@ (80034bc <HW_GetUniqueId+0xa0>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	0c1a      	lsrs	r2, r3, #16
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3302      	adds	r3, #2
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	701a      	strb	r2, [r3, #0]
  id[1] = ((*(uint32_t *)ID2)) >> 8;
 8003492:	4b0a      	ldr	r3, [pc, #40]	@ (80034bc <HW_GetUniqueId+0xa0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	0a1a      	lsrs	r2, r3, #8
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3301      	adds	r3, #1
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	701a      	strb	r2, [r3, #0]
  id[0] = ((*(uint32_t *)ID2));
 80034a0:	4b06      	ldr	r3, [pc, #24]	@ (80034bc <HW_GetUniqueId+0xa0>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	701a      	strb	r2, [r3, #0]
}
 80034aa:	46c0      	nop			@ (mov r8, r8)
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b002      	add	sp, #8
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	46c0      	nop			@ (mov r8, r8)
 80034b4:	1ff80050 	.word	0x1ff80050
 80034b8:	1ff80064 	.word	0x1ff80064
 80034bc:	1ff80054 	.word	0x1ff80054

080034c0 <HW_GetTemperatureLevel>:

uint16_t HW_GetTemperatureLevel(void)
{
 80034c0:	b590      	push	{r4, r7, lr}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
  uint16_t measuredLevel = 0;
 80034c6:	1cbb      	adds	r3, r7, #2
 80034c8:	2200      	movs	r2, #0
 80034ca:	801a      	strh	r2, [r3, #0]
  uint32_t batteryLevelmV;
  uint16_t temperatureDegreeC;

  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 80034cc:	1cbc      	adds	r4, r7, #2
 80034ce:	4b25      	ldr	r3, [pc, #148]	@ (8003564 <HW_GetTemperatureLevel+0xa4>)
 80034d0:	0018      	movs	r0, r3
 80034d2:	f000 f8e5 	bl	80036a0 <HW_AdcReadChannel>
 80034d6:	0003      	movs	r3, r0
 80034d8:	8023      	strh	r3, [r4, #0]

  if (measuredLevel == 0)
 80034da:	1cbb      	adds	r3, r7, #2
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d102      	bne.n	80034e8 <HW_GetTemperatureLevel+0x28>
  {
    batteryLevelmV = 0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	607b      	str	r3, [r7, #4]
 80034e6:	e00c      	b.n	8003502 <HW_GetTemperatureLevel+0x42>
  }
  else
  {
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 80034e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003568 <HW_GetTemperatureLevel+0xa8>)
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	001a      	movs	r2, r3
 80034ee:	4b1f      	ldr	r3, [pc, #124]	@ (800356c <HW_GetTemperatureLevel+0xac>)
 80034f0:	435a      	muls	r2, r3
 80034f2:	1cbb      	adds	r3, r7, #2
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	0019      	movs	r1, r3
 80034f8:	0010      	movs	r0, r2
 80034fa:	f7fc fe0f 	bl	800011c <__udivsi3>
 80034fe:	0003      	movs	r3, r0
 8003500:	607b      	str	r3, [r7, #4]
  }
#if 0
  PRINTF("VDDA= %d\n\r", batteryLevelmV);
#endif

  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_TEMPSENSOR);
 8003502:	1cbc      	adds	r4, r7, #2
 8003504:	4b1a      	ldr	r3, [pc, #104]	@ (8003570 <HW_GetTemperatureLevel+0xb0>)
 8003506:	0018      	movs	r0, r3
 8003508:	f000 f8ca 	bl	80036a0 <HW_AdcReadChannel>
 800350c:	0003      	movs	r3, r0
 800350e:	8023      	strh	r3, [r4, #0]

  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 8003510:	1cbb      	adds	r3, r7, #2
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	4353      	muls	r3, r2
 8003518:	4914      	ldr	r1, [pc, #80]	@ (800356c <HW_GetTemperatureLevel+0xac>)
 800351a:	0018      	movs	r0, r3
 800351c:	f7fc fdfe 	bl	800011c <__udivsi3>
 8003520:	0003      	movs	r3, r0
 8003522:	001a      	movs	r2, r3
 8003524:	4b13      	ldr	r3, [pc, #76]	@ (8003574 <HW_GetTemperatureLevel+0xb4>)
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	1ad2      	subs	r2, r2, r3
 800352a:	0013      	movs	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	189b      	adds	r3, r3, r2
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	4a10      	ldr	r2, [pc, #64]	@ (8003578 <HW_GetTemperatureLevel+0xb8>)
 8003536:	8812      	ldrh	r2, [r2, #0]
 8003538:	0011      	movs	r1, r2
 800353a:	4a0e      	ldr	r2, [pc, #56]	@ (8003574 <HW_GetTemperatureLevel+0xb4>)
 800353c:	8812      	ldrh	r2, [r2, #0]
 800353e:	1a8a      	subs	r2, r1, r2
 8003540:	0011      	movs	r1, r2
 8003542:	0018      	movs	r0, r3
 8003544:	f7fc fe74 	bl	8000230 <__divsi3>
 8003548:	0003      	movs	r3, r0
 800354a:	b29a      	uxth	r2, r3
 800354c:	003b      	movs	r3, r7
 800354e:	21f0      	movs	r1, #240	@ 0xf0
 8003550:	0149      	lsls	r1, r1, #5
 8003552:	468c      	mov	ip, r1
 8003554:	4462      	add	r2, ip
 8003556:	801a      	strh	r2, [r3, #0]
    uint16_t temperatureDegreeC_Frac = ((temperatureDegreeC - (temperatureDegreeC_Int << 8)) * 100) >> 8;
    PRINTF("temp= %d, %d,%d\n\r", temperatureDegreeC, temperatureDegreeC_Int, temperatureDegreeC_Frac);
  }
#endif

  return (uint16_t) temperatureDegreeC;
 8003558:	003b      	movs	r3, r7
 800355a:	881b      	ldrh	r3, [r3, #0]
}
 800355c:	0018      	movs	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	b003      	add	sp, #12
 8003562:	bd90      	pop	{r4, r7, pc}
 8003564:	44020000 	.word	0x44020000
 8003568:	1ff80078 	.word	0x1ff80078
 800356c:	00000bb8 	.word	0x00000bb8
 8003570:	48040000 	.word	0x48040000
 8003574:	1ff8007a 	.word	0x1ff8007a
 8003578:	1ff8007e 	.word	0x1ff8007e

0800357c <HW_GetBatteryLevel>:
  * @brief This function return the battery level
  * @param none
  * @retval the battery level in mV
  */
uint16_t HW_GetBatteryLevel(void)
{
 800357c:	b590      	push	{r4, r7, lr}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
  uint16_t measuredLevel = 0;
 8003582:	1cbb      	adds	r3, r7, #2
 8003584:	2200      	movs	r2, #0
 8003586:	801a      	strh	r2, [r3, #0]
  uint32_t batteryLevelmV;

  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 8003588:	1cbc      	adds	r4, r7, #2
 800358a:	4b10      	ldr	r3, [pc, #64]	@ (80035cc <HW_GetBatteryLevel+0x50>)
 800358c:	0018      	movs	r0, r3
 800358e:	f000 f887 	bl	80036a0 <HW_AdcReadChannel>
 8003592:	0003      	movs	r3, r0
 8003594:	8023      	strh	r3, [r4, #0]

  if (measuredLevel == 0)
 8003596:	1cbb      	adds	r3, r7, #2
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d102      	bne.n	80035a4 <HW_GetBatteryLevel+0x28>
  {
    batteryLevelmV = 0;
 800359e:	2300      	movs	r3, #0
 80035a0:	607b      	str	r3, [r7, #4]
 80035a2:	e00c      	b.n	80035be <HW_GetBatteryLevel+0x42>
  }
  else
  {
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 80035a4:	4b0a      	ldr	r3, [pc, #40]	@ (80035d0 <HW_GetBatteryLevel+0x54>)
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	001a      	movs	r2, r3
 80035aa:	4b0a      	ldr	r3, [pc, #40]	@ (80035d4 <HW_GetBatteryLevel+0x58>)
 80035ac:	435a      	muls	r2, r3
 80035ae:	1cbb      	adds	r3, r7, #2
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	0019      	movs	r1, r3
 80035b4:	0010      	movs	r0, r2
 80035b6:	f7fc fdb1 	bl	800011c <__udivsi3>
 80035ba:	0003      	movs	r3, r0
 80035bc:	607b      	str	r3, [r7, #4]
  }

  return batteryLevelmV;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	b29b      	uxth	r3, r3
}
 80035c2:	0018      	movs	r0, r3
 80035c4:	46bd      	mov	sp, r7
 80035c6:	b003      	add	sp, #12
 80035c8:	bd90      	pop	{r4, r7, pc}
 80035ca:	46c0      	nop			@ (mov r8, r8)
 80035cc:	44020000 	.word	0x44020000
 80035d0:	1ff80078 	.word	0x1ff80078
 80035d4:	00000bb8 	.word	0x00000bb8

080035d8 <HW_AdcInit>:
  * @brief This function initializes the ADC
  * @param none
  * @retval none
  */
void HW_AdcInit(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  if (AdcInitialized == false)
 80035dc:	4b24      	ldr	r3, [pc, #144]	@ (8003670 <HW_AdcInit+0x98>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2201      	movs	r2, #1
 80035e2:	4053      	eors	r3, r2
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d03e      	beq.n	8003668 <HW_AdcInit+0x90>
  {
    AdcInitialized = true;
 80035ea:	4b21      	ldr	r3, [pc, #132]	@ (8003670 <HW_AdcInit+0x98>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	701a      	strb	r2, [r3, #0]


    hadc.Instance  = ADC1;
 80035f0:	4b20      	ldr	r3, [pc, #128]	@ (8003674 <HW_AdcInit+0x9c>)
 80035f2:	4a21      	ldr	r2, [pc, #132]	@ (8003678 <HW_AdcInit+0xa0>)
 80035f4:	601a      	str	r2, [r3, #0]

    hadc.Init.OversamplingMode      = DISABLE;
 80035f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003674 <HW_AdcInit+0x9c>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 80035fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003674 <HW_AdcInit+0x9c>)
 80035fe:	2280      	movs	r2, #128	@ 0x80
 8003600:	0612      	lsls	r2, r2, #24
 8003602:	605a      	str	r2, [r3, #4]
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 8003604:	4b1b      	ldr	r3, [pc, #108]	@ (8003674 <HW_AdcInit+0x9c>)
 8003606:	2200      	movs	r2, #0
 8003608:	61da      	str	r2, [r3, #28]
    hadc.Init.LowPowerFrequencyMode = ENABLE;
 800360a:	4b1a      	ldr	r3, [pc, #104]	@ (8003674 <HW_AdcInit+0x9c>)
 800360c:	2201      	movs	r2, #1
 800360e:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc.Init.LowPowerAutoWait      = DISABLE;
 8003610:	4b18      	ldr	r3, [pc, #96]	@ (8003674 <HW_AdcInit+0x9c>)
 8003612:	2200      	movs	r2, #0
 8003614:	619a      	str	r2, [r3, #24]

    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
 8003616:	4b17      	ldr	r3, [pc, #92]	@ (8003674 <HW_AdcInit+0x9c>)
 8003618:	2200      	movs	r2, #0
 800361a:	609a      	str	r2, [r3, #8]
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 800361c:	4b15      	ldr	r3, [pc, #84]	@ (8003674 <HW_AdcInit+0x9c>)
 800361e:	2207      	movs	r2, #7
 8003620:	639a      	str	r2, [r3, #56]	@ 0x38
    hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 8003622:	4b14      	ldr	r3, [pc, #80]	@ (8003674 <HW_AdcInit+0x9c>)
 8003624:	2201      	movs	r2, #1
 8003626:	611a      	str	r2, [r3, #16]
    hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8003628:	4b12      	ldr	r3, [pc, #72]	@ (8003674 <HW_AdcInit+0x9c>)
 800362a:	2200      	movs	r2, #0
 800362c:	60da      	str	r2, [r3, #12]
    hadc.Init.ContinuousConvMode    = DISABLE;
 800362e:	4b11      	ldr	r3, [pc, #68]	@ (8003674 <HW_AdcInit+0x9c>)
 8003630:	2220      	movs	r2, #32
 8003632:	2100      	movs	r1, #0
 8003634:	5499      	strb	r1, [r3, r2]
    hadc.Init.DiscontinuousConvMode = DISABLE;
 8003636:	4b0f      	ldr	r3, [pc, #60]	@ (8003674 <HW_AdcInit+0x9c>)
 8003638:	2221      	movs	r2, #33	@ 0x21
 800363a:	2100      	movs	r1, #0
 800363c:	5499      	strb	r1, [r3, r2]
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800363e:	4b0d      	ldr	r3, [pc, #52]	@ (8003674 <HW_AdcInit+0x9c>)
 8003640:	2200      	movs	r2, #0
 8003642:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8003644:	4b0b      	ldr	r3, [pc, #44]	@ (8003674 <HW_AdcInit+0x9c>)
 8003646:	2204      	movs	r2, #4
 8003648:	615a      	str	r2, [r3, #20]
    hadc.Init.DMAContinuousRequests = DISABLE;
 800364a:	4b0a      	ldr	r3, [pc, #40]	@ (8003674 <HW_AdcInit+0x9c>)
 800364c:	222c      	movs	r2, #44	@ 0x2c
 800364e:	2100      	movs	r1, #0
 8003650:	5499      	strb	r1, [r3, r2]

    ADCCLK_ENABLE();
 8003652:	4b0a      	ldr	r3, [pc, #40]	@ (800367c <HW_AdcInit+0xa4>)
 8003654:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003656:	4b09      	ldr	r3, [pc, #36]	@ (800367c <HW_AdcInit+0xa4>)
 8003658:	2180      	movs	r1, #128	@ 0x80
 800365a:	0089      	lsls	r1, r1, #2
 800365c:	430a      	orrs	r2, r1
 800365e:	635a      	str	r2, [r3, #52]	@ 0x34


    HAL_ADC_Init(&hadc);
 8003660:	4b04      	ldr	r3, [pc, #16]	@ (8003674 <HW_AdcInit+0x9c>)
 8003662:	0018      	movs	r0, r3
 8003664:	f012 f8d6 	bl	8015814 <HAL_ADC_Init>

  }
}
 8003668:	46c0      	nop			@ (mov r8, r8)
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	46c0      	nop			@ (mov r8, r8)
 8003670:	2000019c 	.word	0x2000019c
 8003674:	20000140 	.word	0x20000140
 8003678:	40012400 	.word	0x40012400
 800367c:	40021000 	.word	0x40021000

08003680 <HW_AdcDeInit>:
  * @brief This function De-initializes the ADC
  * @param none
  * @retval none
  */
void HW_AdcDeInit(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  AdcInitialized = false;
 8003684:	4b04      	ldr	r3, [pc, #16]	@ (8003698 <HW_AdcDeInit+0x18>)
 8003686:	2200      	movs	r2, #0
 8003688:	701a      	strb	r2, [r3, #0]
  HAL_ADC_DeInit(&hadc);
 800368a:	4b04      	ldr	r3, [pc, #16]	@ (800369c <HW_AdcDeInit+0x1c>)
 800368c:	0018      	movs	r0, r3
 800368e:	f012 fa35 	bl	8015afc <HAL_ADC_DeInit>
}
 8003692:	46c0      	nop			@ (mov r8, r8)
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	2000019c 	.word	0x2000019c
 800369c:	20000140 	.word	0x20000140

080036a0 <HW_AdcReadChannel>:
  * @brief This function De-initializes the ADC
  * @param Channel
  * @retval Value
  */
uint16_t HW_AdcReadChannel(uint32_t Channel)
{
 80036a0:	b590      	push	{r4, r7, lr}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]

  ADC_ChannelConfTypeDef adcConf = {0};
 80036a8:	230c      	movs	r3, #12
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	0018      	movs	r0, r3
 80036ae:	2308      	movs	r3, #8
 80036b0:	001a      	movs	r2, r3
 80036b2:	2100      	movs	r1, #0
 80036b4:	f016 fa0a 	bl	8019acc <memset>

  uint16_t adcData = 0;
 80036b8:	2316      	movs	r3, #22
 80036ba:	18fb      	adds	r3, r7, r3
 80036bc:	2200      	movs	r2, #0
 80036be:	801a      	strh	r2, [r3, #0]

  HW_AdcInit();
 80036c0:	f7ff ff8a 	bl	80035d8 <HW_AdcInit>

  if (AdcInitialized == true)
 80036c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003780 <HW_AdcReadChannel+0xe0>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d052      	beq.n	8003772 <HW_AdcReadChannel+0xd2>
  {
    /* wait the the Vrefint used by adc is set */
    while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 80036cc:	46c0      	nop			@ (mov r8, r8)
 80036ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003784 <HW_AdcReadChannel+0xe4>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2208      	movs	r2, #8
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d1f9      	bne.n	80036ce <HW_AdcReadChannel+0x2e>

    ADCCLK_ENABLE();
 80036da:	4b2b      	ldr	r3, [pc, #172]	@ (8003788 <HW_AdcReadChannel+0xe8>)
 80036dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036de:	4b2a      	ldr	r3, [pc, #168]	@ (8003788 <HW_AdcReadChannel+0xe8>)
 80036e0:	2180      	movs	r1, #128	@ 0x80
 80036e2:	0089      	lsls	r1, r1, #2
 80036e4:	430a      	orrs	r2, r1
 80036e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /*calibrate ADC if any calibraiton hardware*/
    HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 80036e8:	4b28      	ldr	r3, [pc, #160]	@ (800378c <HW_AdcReadChannel+0xec>)
 80036ea:	2100      	movs	r1, #0
 80036ec:	0018      	movs	r0, r3
 80036ee:	f012 fd53 	bl	8016198 <HAL_ADCEx_Calibration_Start>

    /* Deselects all channels*/
    adcConf.Channel = ADC_CHANNEL_MASK;
 80036f2:	240c      	movs	r4, #12
 80036f4:	193b      	adds	r3, r7, r4
 80036f6:	4a26      	ldr	r2, [pc, #152]	@ (8003790 <HW_AdcReadChannel+0xf0>)
 80036f8:	601a      	str	r2, [r3, #0]
    adcConf.Rank = ADC_RANK_NONE;
 80036fa:	193b      	adds	r3, r7, r4
 80036fc:	4a25      	ldr	r2, [pc, #148]	@ (8003794 <HW_AdcReadChannel+0xf4>)
 80036fe:	605a      	str	r2, [r3, #4]
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 8003700:	193a      	adds	r2, r7, r4
 8003702:	4b22      	ldr	r3, [pc, #136]	@ (800378c <HW_AdcReadChannel+0xec>)
 8003704:	0011      	movs	r1, r2
 8003706:	0018      	movs	r0, r3
 8003708:	f012 fb9a 	bl	8015e40 <HAL_ADC_ConfigChannel>

    /* configure adc channel */
    adcConf.Channel = Channel;
 800370c:	0021      	movs	r1, r4
 800370e:	187b      	adds	r3, r7, r1
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	601a      	str	r2, [r3, #0]
    adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003714:	187b      	adds	r3, r7, r1
 8003716:	2280      	movs	r2, #128	@ 0x80
 8003718:	0152      	lsls	r2, r2, #5
 800371a:	605a      	str	r2, [r3, #4]
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 800371c:	187a      	adds	r2, r7, r1
 800371e:	4b1b      	ldr	r3, [pc, #108]	@ (800378c <HW_AdcReadChannel+0xec>)
 8003720:	0011      	movs	r1, r2
 8003722:	0018      	movs	r0, r3
 8003724:	f012 fb8c 	bl	8015e40 <HAL_ADC_ConfigChannel>

    /* Start the conversion process */
    HAL_ADC_Start(&hadc);
 8003728:	4b18      	ldr	r3, [pc, #96]	@ (800378c <HW_AdcReadChannel+0xec>)
 800372a:	0018      	movs	r0, r3
 800372c:	f012 fa92 	bl	8015c54 <HAL_ADC_Start>

    /* Wait for the end of conversion */
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8003730:	2301      	movs	r3, #1
 8003732:	425a      	negs	r2, r3
 8003734:	4b15      	ldr	r3, [pc, #84]	@ (800378c <HW_AdcReadChannel+0xec>)
 8003736:	0011      	movs	r1, r2
 8003738:	0018      	movs	r0, r3
 800373a:	f012 fadf 	bl	8015cfc <HAL_ADC_PollForConversion>

    /* Get the converted value of regular channel */
    adcData = HAL_ADC_GetValue(&hadc);
 800373e:	4b13      	ldr	r3, [pc, #76]	@ (800378c <HW_AdcReadChannel+0xec>)
 8003740:	0018      	movs	r0, r3
 8003742:	f012 fb71 	bl	8015e28 <HAL_ADC_GetValue>
 8003746:	0002      	movs	r2, r0
 8003748:	2316      	movs	r3, #22
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	801a      	strh	r2, [r3, #0]

    __HAL_ADC_DISABLE(&hadc) ;
 800374e:	4b0f      	ldr	r3, [pc, #60]	@ (800378c <HW_AdcReadChannel+0xec>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	4b0d      	ldr	r3, [pc, #52]	@ (800378c <HW_AdcReadChannel+0xec>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2102      	movs	r1, #2
 800375a:	430a      	orrs	r2, r1
 800375c:	609a      	str	r2, [r3, #8]
 800375e:	4b0b      	ldr	r3, [pc, #44]	@ (800378c <HW_AdcReadChannel+0xec>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2203      	movs	r2, #3
 8003764:	601a      	str	r2, [r3, #0]

    ADCCLK_DISABLE();
 8003766:	4b08      	ldr	r3, [pc, #32]	@ (8003788 <HW_AdcReadChannel+0xe8>)
 8003768:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800376a:	4b07      	ldr	r3, [pc, #28]	@ (8003788 <HW_AdcReadChannel+0xe8>)
 800376c:	490a      	ldr	r1, [pc, #40]	@ (8003798 <HW_AdcReadChannel+0xf8>)
 800376e:	400a      	ands	r2, r1
 8003770:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  return adcData;
 8003772:	2316      	movs	r3, #22
 8003774:	18fb      	adds	r3, r7, r3
 8003776:	881b      	ldrh	r3, [r3, #0]
}
 8003778:	0018      	movs	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	b007      	add	sp, #28
 800377e:	bd90      	pop	{r4, r7, pc}
 8003780:	2000019c 	.word	0x2000019c
 8003784:	40007000 	.word	0x40007000
 8003788:	40021000 	.word	0x40021000
 800378c:	20000140 	.word	0x20000140
 8003790:	0007ffff 	.word	0x0007ffff
 8003794:	00001001 	.word	0x00001001
 8003798:	fffffdff 	.word	0xfffffdff

0800379c <LPM_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void LPM_EnterStopMode(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037a2:	f3ef 8310 	mrs	r3, PRIMASK
 80037a6:	607b      	str	r3, [r7, #4]
  return(result);
 80037a8:	687b      	ldr	r3, [r7, #4]
  BACKUP_PRIMASK();
 80037aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80037ac:	b672      	cpsid	i
}
 80037ae:	46c0      	nop			@ (mov r8, r8)

  DISABLE_IRQ();

  HW_IoDeInit();
 80037b0:	f7ff fcf0 	bl	8003194 <HW_IoDeInit>

  HW_AdcDeInit();
 80037b4:	f7ff ff64 	bl	8003680 <HW_AdcDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 80037b8:	4b09      	ldr	r3, [pc, #36]	@ (80037e0 <LPM_EnterStopMode+0x44>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	4b08      	ldr	r3, [pc, #32]	@ (80037e0 <LPM_EnterStopMode+0x44>)
 80037be:	2104      	movs	r1, #4
 80037c0:	430a      	orrs	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f383 8810 	msr	PRIMASK, r3
}
 80037ce:	46c0      	nop			@ (mov r8, r8)

  RESTORE_PRIMASK();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80037d0:	2101      	movs	r1, #1
 80037d2:	2001      	movs	r0, #1
 80037d4:	f013 fa1c 	bl	8016c10 <HAL_PWR_EnterSTOPMode>
}
 80037d8:	46c0      	nop			@ (mov r8, r8)
 80037da:	46bd      	mov	sp, r7
 80037dc:	b004      	add	sp, #16
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40007000 	.word	0x40007000

080037e4 <LPM_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void LPM_ExitStopMode(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ea:	f3ef 8310 	mrs	r3, PRIMASK
 80037ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80037f0:	68bb      	ldr	r3, [r7, #8]
  /* Disable IRQ while the MCU is not running on HSI */

  BACKUP_PRIMASK();
 80037f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80037f4:	b672      	cpsid	i
}
 80037f6:	46c0      	nop			@ (mov r8, r8)

  DISABLE_IRQ();

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 80037f8:	4b19      	ldr	r3, [pc, #100]	@ (8003860 <LPM_ExitStopMode+0x7c>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4b18      	ldr	r3, [pc, #96]	@ (8003860 <LPM_ExitStopMode+0x7c>)
 80037fe:	2101      	movs	r1, #1
 8003800:	430a      	orrs	r2, r1
 8003802:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 8003804:	46c0      	nop			@ (mov r8, r8)
 8003806:	4b16      	ldr	r3, [pc, #88]	@ (8003860 <LPM_ExitStopMode+0x7c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2204      	movs	r2, #4
 800380c:	4013      	ands	r3, r2
 800380e:	d0fa      	beq.n	8003806 <LPM_ExitStopMode+0x22>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 8003810:	4b13      	ldr	r3, [pc, #76]	@ (8003860 <LPM_ExitStopMode+0x7c>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	4b12      	ldr	r3, [pc, #72]	@ (8003860 <LPM_ExitStopMode+0x7c>)
 8003816:	2180      	movs	r1, #128	@ 0x80
 8003818:	0449      	lsls	r1, r1, #17
 800381a:	430a      	orrs	r2, r1
 800381c:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	4b0f      	ldr	r3, [pc, #60]	@ (8003860 <LPM_ExitStopMode+0x7c>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	2380      	movs	r3, #128	@ 0x80
 8003826:	049b      	lsls	r3, r3, #18
 8003828:	4013      	ands	r3, r2
 800382a:	d0f9      	beq.n	8003820 <LPM_ExitStopMode+0x3c>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 800382c:	4b0c      	ldr	r3, [pc, #48]	@ (8003860 <LPM_ExitStopMode+0x7c>)
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	4b0b      	ldr	r3, [pc, #44]	@ (8003860 <LPM_ExitStopMode+0x7c>)
 8003832:	2103      	movs	r1, #3
 8003834:	430a      	orrs	r2, r1
 8003836:	60da      	str	r2, [r3, #12]

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 8003838:	46c0      	nop			@ (mov r8, r8)
 800383a:	4b09      	ldr	r3, [pc, #36]	@ (8003860 <LPM_ExitStopMode+0x7c>)
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	220c      	movs	r2, #12
 8003840:	4013      	ands	r3, r2
 8003842:	2b0c      	cmp	r3, #12
 8003844:	d1f9      	bne.n	800383a <LPM_ExitStopMode+0x56>

  /*initilizes the peripherals*/
  HW_IoInit();
 8003846:	f7ff fc97 	bl	8003178 <HW_IoInit>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f383 8810 	msr	PRIMASK, r3
}
 8003854:	46c0      	nop			@ (mov r8, r8)

  RESTORE_PRIMASK();
}
 8003856:	46c0      	nop			@ (mov r8, r8)
 8003858:	46bd      	mov	sp, r7
 800385a:	b004      	add	sp, #16
 800385c:	bd80      	pop	{r7, pc}
 800385e:	46c0      	nop			@ (mov r8, r8)
 8003860:	40021000 	.word	0x40021000

08003864 <LPM_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void LPM_EnterSleepMode(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8003868:	2101      	movs	r1, #1
 800386a:	2000      	movs	r0, #0
 800386c:	f013 f9a0 	bl	8016bb0 <HAL_PWR_EnterSLEEPMode>
}
 8003870:	46c0      	nop			@ (mov r8, r8)
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <NMI_Handler>:
  * @param  None
  * @retval None
  */

void NMI_Handler(void)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	af00      	add	r7, sp, #0
}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HardFault_Handler>:
  * @retval None
  */


void HardFault_Handler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  while (1)
  {
    __NOP();
 8003884:	46c0      	nop			@ (mov r8, r8)
 8003886:	e7fd      	b.n	8003884 <HardFault_Handler+0x4>

08003888 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
}
 800388c:	46c0      	nop			@ (mov r8, r8)
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	af00      	add	r7, sp, #0
}
 8003896:	46c0      	nop			@ (mov r8, r8)
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80038a0:	f011 ff78 	bl	8015794 <HAL_IncTick>
}
 80038a4:	46c0      	nop			@ (mov r8, r8)
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <USART2_IRQHandler>:
  */
/*void PPP_IRQHandler(void)
{
}*/
void USARTx_IRQHandler(void)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	af00      	add	r7, sp, #0
  vcom_IRQHandler();
 80038ae:	f001 fa8b 	bl	8004dc8 <vcom_IRQHandler>
}
 80038b2:	46c0      	nop			@ (mov r8, r8)
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <DMA1_Channel4_5_6_7_IRQHandler>:

void USARTx_DMA_TX_IRQHandler(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  vcom_DMA_TX_IRQHandler();
 80038bc:	f001 fa78 	bl	8004db0 <vcom_DMA_TX_IRQHandler>
}
 80038c0:	46c0      	nop			@ (mov r8, r8)
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <RTC_IRQHandler>:

void RTC_IRQHandler(void)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	af00      	add	r7, sp, #0
  HW_RTC_IrqHandler();
 80038ca:	f000 fb47 	bl	8003f5c <HW_RTC_IrqHandler>
}
 80038ce:	46c0      	nop			@ (mov r8, r8)
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80038d8:	2001      	movs	r0, #1
 80038da:	f013 f93f 	bl	8016b5c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80038de:	2002      	movs	r0, #2
 80038e0:	f013 f93c 	bl	8016b5c <HAL_GPIO_EXTI_IRQHandler>
}
 80038e4:	46c0      	nop			@ (mov r8, r8)
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80038ee:	2004      	movs	r0, #4
 80038f0:	f013 f934 	bl	8016b5c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80038f4:	2008      	movs	r0, #8
 80038f6:	f013 f931 	bl	8016b5c <HAL_GPIO_EXTI_IRQHandler>
}
 80038fa:	46c0      	nop			@ (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <EXTI4_15_IRQHandler>:


void EXTI4_15_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003904:	2010      	movs	r0, #16
 8003906:	f013 f929 	bl	8016b5c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800390a:	2020      	movs	r0, #32
 800390c:	f013 f926 	bl	8016b5c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003910:	2040      	movs	r0, #64	@ 0x40
 8003912:	f013 f923 	bl	8016b5c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003916:	2080      	movs	r0, #128	@ 0x80
 8003918:	f013 f920 	bl	8016b5c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800391c:	2380      	movs	r3, #128	@ 0x80
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	0018      	movs	r0, r3
 8003922:	f013 f91b 	bl	8016b5c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003926:	2380      	movs	r3, #128	@ 0x80
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	0018      	movs	r0, r3
 800392c:	f013 f916 	bl	8016b5c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003930:	2380      	movs	r3, #128	@ 0x80
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	0018      	movs	r0, r3
 8003936:	f013 f911 	bl	8016b5c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800393a:	2380      	movs	r3, #128	@ 0x80
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	0018      	movs	r0, r3
 8003940:	f013 f90c 	bl	8016b5c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003944:	2380      	movs	r3, #128	@ 0x80
 8003946:	015b      	lsls	r3, r3, #5
 8003948:	0018      	movs	r0, r3
 800394a:	f013 f907 	bl	8016b5c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800394e:	2380      	movs	r3, #128	@ 0x80
 8003950:	019b      	lsls	r3, r3, #6
 8003952:	0018      	movs	r0, r3
 8003954:	f013 f902 	bl	8016b5c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003958:	2380      	movs	r3, #128	@ 0x80
 800395a:	01db      	lsls	r3, r3, #7
 800395c:	0018      	movs	r0, r3
 800395e:	f013 f8fd 	bl	8016b5c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003962:	2380      	movs	r3, #128	@ 0x80
 8003964:	021b      	lsls	r3, r3, #8
 8003966:	0018      	movs	r0, r3
 8003968:	f013 f8f8 	bl	8016b5c <HAL_GPIO_EXTI_IRQHandler>
}
 800396c:	46c0      	nop			@ (mov r8, r8)
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <BSP_sensor_Read>:
void *TEMPERATURE_handle = NULL;
void *PRESSURE_handle = NULL;
#endif

void BSP_sensor_Read(sensor_t *sensor_data)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  float HUMIDITY_Value = 0;
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = 0;
 8003980:	2300      	movs	r3, #0
 8003982:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	60fb      	str	r3, [r7, #12]
#if defined(SENSOR_ENABLED) || defined (LRWAN_NS1)
  BSP_HUMIDITY_Get_Hum(HUMIDITY_handle, &HUMIDITY_Value);
  BSP_TEMPERATURE_Get_Temp(TEMPERATURE_handle, &TEMPERATURE_Value);
  BSP_PRESSURE_Get_Press(PRESSURE_handle, &PRESSURE_Value);
#endif
  sensor_data->humidity    = HUMIDITY_Value;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a04      	ldr	r2, [pc, #16]	@ (80039b0 <BSP_sensor_Read+0x3c>)
 800399e:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a04      	ldr	r2, [pc, #16]	@ (80039b4 <BSP_sensor_Read+0x40>)
 80039a4:	611a      	str	r2, [r3, #16]
  /* USER CODE END 5 */
}
 80039a6:	46c0      	nop			@ (mov r8, r8)
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b006      	add	sp, #24
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	46c0      	nop			@ (mov r8, r8)
 80039b0:	003e090d 	.word	0x003e090d
 80039b4:	000503ab 	.word	0x000503ab

080039b8 <BSP_sensor_Init>:

void  BSP_sensor_Init(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  BSP_HUMIDITY_Sensor_Enable(HUMIDITY_handle);
  BSP_TEMPERATURE_Sensor_Enable(TEMPERATURE_handle);
  BSP_PRESSURE_Sensor_Enable(PRESSURE_handle);
#endif
  /* USER CODE END 6 */
}
 80039bc:	46c0      	nop			@ (mov r8, r8)
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <DBG_Init>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions ------------------------------------------------------- */

void DBG_Init(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
#ifdef DEBUG
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80039ca:	1d3b      	adds	r3, r7, #4
 80039cc:	0018      	movs	r0, r3
 80039ce:	2314      	movs	r3, #20
 80039d0:	001a      	movs	r2, r3
 80039d2:	2100      	movs	r1, #0
 80039d4:	f016 f87a 	bl	8019acc <memset>

  /* Enable the GPIO_B Clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039d8:	4b25      	ldr	r3, [pc, #148]	@ (8003a70 <DBG_Init+0xac>)
 80039da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039dc:	4b24      	ldr	r3, [pc, #144]	@ (8003a70 <DBG_Init+0xac>)
 80039de:	2102      	movs	r1, #2
 80039e0:	430a      	orrs	r2, r1
 80039e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80039e4:	4b22      	ldr	r3, [pc, #136]	@ (8003a70 <DBG_Init+0xac>)
 80039e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e8:	2202      	movs	r2, #2
 80039ea:	4013      	ands	r3, r2
 80039ec:	603b      	str	r3, [r7, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]

  /* Configure the GPIO pin */
  gpioinitstruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80039f0:	1d3b      	adds	r3, r7, #4
 80039f2:	2201      	movs	r2, #1
 80039f4:	605a      	str	r2, [r3, #4]
  gpioinitstruct.Pull   = GPIO_PULLUP;
 80039f6:	1d3b      	adds	r3, r7, #4
 80039f8:	2201      	movs	r2, #1
 80039fa:	609a      	str	r2, [r3, #8]
  gpioinitstruct.Speed  = GPIO_SPEED_HIGH;
 80039fc:	1d3b      	adds	r3, r7, #4
 80039fe:	2203      	movs	r2, #3
 8003a00:	60da      	str	r2, [r3, #12]

  gpioinitstruct.Pin    = (GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 8003a02:	1d3b      	adds	r3, r7, #4
 8003a04:	22f0      	movs	r2, #240	@ 0xf0
 8003a06:	0212      	lsls	r2, r2, #8
 8003a08:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 8003a0a:	1d3b      	adds	r3, r7, #4
 8003a0c:	4a19      	ldr	r2, [pc, #100]	@ (8003a74 <DBG_Init+0xb0>)
 8003a0e:	0019      	movs	r1, r3
 8003a10:	0010      	movs	r0, r2
 8003a12:	f012 ff07 	bl	8016824 <HAL_GPIO_Init>

  /* Reset debug Pins */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003a16:	2380      	movs	r3, #128	@ 0x80
 8003a18:	015b      	lsls	r3, r3, #5
 8003a1a:	4816      	ldr	r0, [pc, #88]	@ (8003a74 <DBG_Init+0xb0>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	0019      	movs	r1, r3
 8003a20:	f013 f87e 	bl	8016b20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003a24:	2380      	movs	r3, #128	@ 0x80
 8003a26:	019b      	lsls	r3, r3, #6
 8003a28:	4812      	ldr	r0, [pc, #72]	@ (8003a74 <DBG_Init+0xb0>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	0019      	movs	r1, r3
 8003a2e:	f013 f877 	bl	8016b20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8003a32:	2380      	movs	r3, #128	@ 0x80
 8003a34:	01db      	lsls	r3, r3, #7
 8003a36:	480f      	ldr	r0, [pc, #60]	@ (8003a74 <DBG_Init+0xb0>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	0019      	movs	r1, r3
 8003a3c:	f013 f870 	bl	8016b20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8003a40:	2380      	movs	r3, #128	@ 0x80
 8003a42:	021b      	lsls	r3, r3, #8
 8003a44:	480b      	ldr	r0, [pc, #44]	@ (8003a74 <DBG_Init+0xb0>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	0019      	movs	r1, r3
 8003a4a:	f013 f869 	bl	8016b20 <HAL_GPIO_WritePin>

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 8003a4e:	4b08      	ldr	r3, [pc, #32]	@ (8003a70 <DBG_Init+0xac>)
 8003a50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a52:	4b07      	ldr	r3, [pc, #28]	@ (8003a70 <DBG_Init+0xac>)
 8003a54:	2180      	movs	r1, #128	@ 0x80
 8003a56:	03c9      	lsls	r1, r1, #15
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_DBGMCU_EnableDBGSleepMode();
 8003a5c:	f011 feb0 	bl	80157c0 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8003a60:	f011 febc 	bl	80157dc <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8003a64:	f011 fec8 	bl	80157f8 <HAL_DBGMCU_EnableDBGStandbyMode>
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
  __HAL_RCC_DBGMCU_CLK_DISABLE();
#endif
}
 8003a68:	46c0      	nop			@ (mov r8, r8)
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b006      	add	sp, #24
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40021000 	.word	0x40021000
 8003a74:	50000400 	.word	0x50000400

08003a78 <Error_Handler>:

void Error_Handler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  PRINTF("Error_Handler\n\r");
 8003a7c:	4b02      	ldr	r3, [pc, #8]	@ (8003a88 <Error_Handler+0x10>)
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f011 fd00 	bl	8015484 <TraceSend>
  while (1)
 8003a84:	46c0      	nop			@ (mov r8, r8)
 8003a86:	e7fd      	b.n	8003a84 <Error_Handler+0xc>
 8003a88:	0801a66c 	.word	0x0801a66c

08003a8c <HW_GPIO_Init>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] initStruct  GPIO_InitTypeDef intit structure
 * @retval none
 */
void HW_GPIO_Init(GPIO_TypeDef *port, uint16_t GPIO_Pin, GPIO_InitTypeDef *initStruct)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08a      	sub	sp, #40	@ 0x28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	607a      	str	r2, [r7, #4]
 8003a96:	230a      	movs	r3, #10
 8003a98:	18fb      	adds	r3, r7, r3
 8003a9a:	1c0a      	adds	r2, r1, #0
 8003a9c:	801a      	strh	r2, [r3, #0]

  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4a31      	ldr	r2, [pc, #196]	@ (8003b68 <HW_GPIO_Init+0xdc>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d037      	beq.n	8003b16 <HW_GPIO_Init+0x8a>
 8003aa6:	4a30      	ldr	r2, [pc, #192]	@ (8003b68 <HW_GPIO_Init+0xdc>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d841      	bhi.n	8003b30 <HW_GPIO_Init+0xa4>
 8003aac:	4a2f      	ldr	r2, [pc, #188]	@ (8003b6c <HW_GPIO_Init+0xe0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d024      	beq.n	8003afc <HW_GPIO_Init+0x70>
 8003ab2:	4a2e      	ldr	r2, [pc, #184]	@ (8003b6c <HW_GPIO_Init+0xe0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d83b      	bhi.n	8003b30 <HW_GPIO_Init+0xa4>
 8003ab8:	22a0      	movs	r2, #160	@ 0xa0
 8003aba:	05d2      	lsls	r2, r2, #23
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d003      	beq.n	8003ac8 <HW_GPIO_Init+0x3c>
 8003ac0:	4a2b      	ldr	r2, [pc, #172]	@ (8003b70 <HW_GPIO_Init+0xe4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00d      	beq.n	8003ae2 <HW_GPIO_Init+0x56>
 8003ac6:	e033      	b.n	8003b30 <HW_GPIO_Init+0xa4>
 8003ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003acc:	4b29      	ldr	r3, [pc, #164]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003ace:	2101      	movs	r1, #1
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003ad4:	4b27      	ldr	r3, [pc, #156]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad8:	2201      	movs	r2, #1
 8003ada:	4013      	ands	r3, r2
 8003adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae0:	e032      	b.n	8003b48 <HW_GPIO_Init+0xbc>
 8003ae2:	4b24      	ldr	r3, [pc, #144]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ae6:	4b23      	ldr	r3, [pc, #140]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003ae8:	2102      	movs	r1, #2
 8003aea:	430a      	orrs	r2, r1
 8003aec:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003aee:	4b21      	ldr	r3, [pc, #132]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af2:	2202      	movs	r2, #2
 8003af4:	4013      	ands	r3, r2
 8003af6:	623b      	str	r3, [r7, #32]
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	e025      	b.n	8003b48 <HW_GPIO_Init+0xbc>
 8003afc:	4b1d      	ldr	r3, [pc, #116]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b00:	4b1c      	ldr	r3, [pc, #112]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003b02:	2104      	movs	r1, #4
 8003b04:	430a      	orrs	r2, r1
 8003b06:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b08:	4b1a      	ldr	r3, [pc, #104]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0c:	2204      	movs	r2, #4
 8003b0e:	4013      	ands	r3, r2
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	e018      	b.n	8003b48 <HW_GPIO_Init+0xbc>
 8003b16:	4b17      	ldr	r3, [pc, #92]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b1a:	4b16      	ldr	r3, [pc, #88]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003b1c:	2108      	movs	r1, #8
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b22:	4b14      	ldr	r3, [pc, #80]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b26:	2208      	movs	r2, #8
 8003b28:	4013      	ands	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	e00b      	b.n	8003b48 <HW_GPIO_Init+0xbc>
 8003b30:	4b10      	ldr	r3, [pc, #64]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b34:	4b0f      	ldr	r3, [pc, #60]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003b36:	2180      	movs	r1, #128	@ 0x80
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b40:	2280      	movs	r2, #128	@ 0x80
 8003b42:	4013      	ands	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	697b      	ldr	r3, [r7, #20]

  initStruct->Pin = GPIO_Pin ;
 8003b48:	230a      	movs	r3, #10
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	881a      	ldrh	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	601a      	str	r2, [r3, #0]

  HAL_GPIO_Init(port, initStruct);
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	0011      	movs	r1, r2
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f012 fe63 	bl	8016824 <HAL_GPIO_Init>
}
 8003b5e:	46c0      	nop			@ (mov r8, r8)
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b00a      	add	sp, #40	@ 0x28
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	50000c00 	.word	0x50000c00
 8003b6c:	50000800 	.word	0x50000800
 8003b70:	50000400 	.word	0x50000400
 8003b74:	40021000 	.word	0x40021000

08003b78 <HW_GPIO_SetIrq>:
 * @param [IN] prio       NVIC priority (0 is highest)
 * @param [IN] irqHandler  points to the  function to execute
 * @retval none
 */
void HW_GPIO_SetIrq(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t prio,  GpioIrqHandler *irqHandler)
{
 8003b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	607a      	str	r2, [r7, #4]
 8003b82:	603b      	str	r3, [r7, #0]
 8003b84:	250a      	movs	r5, #10
 8003b86:	197b      	adds	r3, r7, r5
 8003b88:	1c0a      	adds	r2, r1, #0
 8003b8a:	801a      	strh	r2, [r3, #0]
  IRQn_Type IRQnb;

  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 8003b8c:	197b      	adds	r3, r7, r5
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	0018      	movs	r0, r3
 8003b92:	f000 f863 	bl	8003c5c <HW_GPIO_GetBitPos>
 8003b96:	0003      	movs	r3, r0
 8003b98:	617b      	str	r3, [r7, #20]

  if (irqHandler != NULL)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01c      	beq.n	8003bda <HW_GPIO_SetIrq+0x62>
  {
    GpioIrq[ BitPos ] = irqHandler;
 8003ba0:	4b12      	ldr	r3, [pc, #72]	@ (8003bec <HW_GPIO_SetIrq+0x74>)
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	0092      	lsls	r2, r2, #2
 8003ba6:	6839      	ldr	r1, [r7, #0]
 8003ba8:	50d1      	str	r1, [r2, r3]

    IRQnb = MSP_GetIRQn(GPIO_Pin);
 8003baa:	2613      	movs	r6, #19
 8003bac:	19bc      	adds	r4, r7, r6
 8003bae:	197b      	adds	r3, r7, r5
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f7ff fa97 	bl	80030e6 <MSP_GetIRQn>
 8003bb8:	0003      	movs	r3, r0
 8003bba:	7023      	strb	r3, [r4, #0]

    HAL_NVIC_SetPriority(IRQnb, prio, 0);
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	19bb      	adds	r3, r7, r6
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	b25b      	sxtb	r3, r3
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	f012 fc04 	bl	80163d4 <HAL_NVIC_SetPriority>

    HAL_NVIC_EnableIRQ(IRQnb);
 8003bcc:	19bb      	adds	r3, r7, r6
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	b25b      	sxtb	r3, r3
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f012 fc13 	bl	80163fe <HAL_NVIC_EnableIRQ>
  }
  else
  {
    GpioIrq[ BitPos ] = NULL;
  }
}
 8003bd8:	e004      	b.n	8003be4 <HW_GPIO_SetIrq+0x6c>
    GpioIrq[ BitPos ] = NULL;
 8003bda:	4b04      	ldr	r3, [pc, #16]	@ (8003bec <HW_GPIO_SetIrq+0x74>)
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	0092      	lsls	r2, r2, #2
 8003be0:	2100      	movs	r1, #0
 8003be2:	50d1      	str	r1, [r2, r3]
}
 8003be4:	46c0      	nop			@ (mov r8, r8)
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b007      	add	sp, #28
 8003bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bec:	200001a0 	.word	0x200001a0

08003bf0 <HW_GPIO_IrqHandler>:
 *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
 *                   All port bits are not necessarily available on all GPIOs.
 * @retval none
 */
void HW_GPIO_IrqHandler(uint16_t GPIO_Pin)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	0002      	movs	r2, r0
 8003bf8:	1dbb      	adds	r3, r7, #6
 8003bfa:	801a      	strh	r2, [r3, #0]
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin);
 8003bfc:	1dbb      	adds	r3, r7, #6
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	0018      	movs	r0, r3
 8003c02:	f000 f82b 	bl	8003c5c <HW_GPIO_GetBitPos>
 8003c06:	0003      	movs	r3, r0
 8003c08:	60fb      	str	r3, [r7, #12]

  if (GpioIrq[ BitPos ]  != NULL)
 8003c0a:	4b08      	ldr	r3, [pc, #32]	@ (8003c2c <HW_GPIO_IrqHandler+0x3c>)
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	0092      	lsls	r2, r2, #2
 8003c10:	58d3      	ldr	r3, [r2, r3]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d005      	beq.n	8003c22 <HW_GPIO_IrqHandler+0x32>
  {
    GpioIrq[ BitPos ](NULL);
 8003c16:	4b05      	ldr	r3, [pc, #20]	@ (8003c2c <HW_GPIO_IrqHandler+0x3c>)
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	0092      	lsls	r2, r2, #2
 8003c1c:	58d3      	ldr	r3, [r2, r3]
 8003c1e:	2000      	movs	r0, #0
 8003c20:	4798      	blx	r3
  }
}
 8003c22:	46c0      	nop			@ (mov r8, r8)
 8003c24:	46bd      	mov	sp, r7
 8003c26:	b004      	add	sp, #16
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	46c0      	nop			@ (mov r8, r8)
 8003c2c:	200001a0 	.word	0x200001a0

08003c30 <HW_GPIO_Write>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] value New GPIO output value
 * @retval none
 */
void HW_GPIO_Write(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,  uint32_t value)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	607a      	str	r2, [r7, #4]
 8003c3a:	200a      	movs	r0, #10
 8003c3c:	183b      	adds	r3, r7, r0
 8003c3e:	1c0a      	adds	r2, r1, #0
 8003c40:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, (GPIO_PinState) value);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	183b      	adds	r3, r7, r0
 8003c48:	8819      	ldrh	r1, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f012 ff67 	bl	8016b20 <HAL_GPIO_WritePin>
}
 8003c52:	46c0      	nop			@ (mov r8, r8)
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b004      	add	sp, #16
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <HW_GPIO_GetBitPos>:
 *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
 *                   All port bits are not necessarily available on all GPIOs.
 * @retval the position of the bit
 */
static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	0002      	movs	r2, r0
 8003c64:	1dbb      	adds	r3, r7, #6
 8003c66:	801a      	strh	r2, [r3, #0]
  uint8_t PinPos = 0;
 8003c68:	210f      	movs	r1, #15
 8003c6a:	187b      	adds	r3, r7, r1
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	701a      	strb	r2, [r3, #0]

  if ((GPIO_Pin & 0xFF00) != 0)
 8003c70:	1dbb      	adds	r3, r7, #6
 8003c72:	881a      	ldrh	r2, [r3, #0]
 8003c74:	23ff      	movs	r3, #255	@ 0xff
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d005      	beq.n	8003c88 <HW_GPIO_GetBitPos+0x2c>
  {
    PinPos |= 0x8;
 8003c7c:	187b      	adds	r3, r7, r1
 8003c7e:	187a      	adds	r2, r7, r1
 8003c80:	7812      	ldrb	r2, [r2, #0]
 8003c82:	2108      	movs	r1, #8
 8003c84:	430a      	orrs	r2, r1
 8003c86:	701a      	strb	r2, [r3, #0]
  }
  if ((GPIO_Pin & 0xF0F0) != 0)
 8003c88:	1dbb      	adds	r3, r7, #6
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	4a14      	ldr	r2, [pc, #80]	@ (8003ce0 <HW_GPIO_GetBitPos+0x84>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d006      	beq.n	8003ca0 <HW_GPIO_GetBitPos+0x44>
  {
    PinPos |= 0x4;
 8003c92:	220f      	movs	r2, #15
 8003c94:	18bb      	adds	r3, r7, r2
 8003c96:	18ba      	adds	r2, r7, r2
 8003c98:	7812      	ldrb	r2, [r2, #0]
 8003c9a:	2104      	movs	r1, #4
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	701a      	strb	r2, [r3, #0]
  }
  if ((GPIO_Pin & 0xCCCC) != 0)
 8003ca0:	1dbb      	adds	r3, r7, #6
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	4a0f      	ldr	r2, [pc, #60]	@ (8003ce4 <HW_GPIO_GetBitPos+0x88>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d006      	beq.n	8003cb8 <HW_GPIO_GetBitPos+0x5c>
  {
    PinPos |= 0x2;
 8003caa:	220f      	movs	r2, #15
 8003cac:	18bb      	adds	r3, r7, r2
 8003cae:	18ba      	adds	r2, r7, r2
 8003cb0:	7812      	ldrb	r2, [r2, #0]
 8003cb2:	2102      	movs	r1, #2
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	701a      	strb	r2, [r3, #0]
  }
  if ((GPIO_Pin & 0xAAAA) != 0)
 8003cb8:	1dbb      	adds	r3, r7, #6
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8003ce8 <HW_GPIO_GetBitPos+0x8c>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d006      	beq.n	8003cd0 <HW_GPIO_GetBitPos+0x74>
  {
    PinPos |= 0x1;
 8003cc2:	220f      	movs	r2, #15
 8003cc4:	18bb      	adds	r3, r7, r2
 8003cc6:	18ba      	adds	r2, r7, r2
 8003cc8:	7812      	ldrb	r2, [r2, #0]
 8003cca:	2101      	movs	r1, #1
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	701a      	strb	r2, [r3, #0]
  }

  return PinPos;
 8003cd0:	230f      	movs	r3, #15
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	781b      	ldrb	r3, [r3, #0]
}
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b004      	add	sp, #16
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	46c0      	nop			@ (mov r8, r8)
 8003ce0:	0000f0f0 	.word	0x0000f0f0
 8003ce4:	0000cccc 	.word	0x0000cccc
 8003ce8:	0000aaaa 	.word	0x0000aaaa

08003cec <LL_RTC_TIME_GetSubSecond>:
  * @rmtoll SSR          SS            LL_RTC_TIME_GetSubSecond
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf8:	041b      	lsls	r3, r3, #16
 8003cfa:	0c1b      	lsrs	r3, r3, #16
}
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b002      	add	sp, #8
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HW_RTC_Init>:
 * @note The timer is based on the RTC
 * @param none
 * @retval none
 */
void HW_RTC_Init(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  if (HW_RTC_Initalized == false)
 8003d08:	4b09      	ldr	r3, [pc, #36]	@ (8003d30 <HW_RTC_Init+0x2c>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	4053      	eors	r3, r2
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d008      	beq.n	8003d28 <HW_RTC_Init+0x24>
  {
    HW_RTC_SetConfig();
 8003d16:	f000 f80d 	bl	8003d34 <HW_RTC_SetConfig>
    HW_RTC_SetAlarmConfig();
 8003d1a:	f000 f997 	bl	800404c <HW_RTC_SetAlarmConfig>
    HW_RTC_SetTimerContext();
 8003d1e:	f000 f973 	bl	8004008 <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 8003d22:	4b03      	ldr	r3, [pc, #12]	@ (8003d30 <HW_RTC_Init+0x2c>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	701a      	strb	r2, [r3, #0]
  }
}
 8003d28:	46c0      	nop			@ (mov r8, r8)
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	46c0      	nop			@ (mov r8, r8)
 8003d30:	200001e0 	.word	0x200001e0

08003d34 <HW_RTC_SetConfig>:
 * @note The timer is based on the RTC
 * @param none
 * @retval none
 */
static void HW_RTC_SetConfig(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  RtcHandle.Instance = RTC;
 8003d3a:	4b27      	ldr	r3, [pc, #156]	@ (8003dd8 <HW_RTC_SetConfig+0xa4>)
 8003d3c:	4a27      	ldr	r2, [pc, #156]	@ (8003ddc <HW_RTC_SetConfig+0xa8>)
 8003d3e:	601a      	str	r2, [r3, #0]

  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 8003d40:	4b25      	ldr	r3, [pc, #148]	@ (8003dd8 <HW_RTC_SetConfig+0xa4>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	605a      	str	r2, [r3, #4]
  RtcHandle.Init.AsynchPrediv = PREDIV_A; /* RTC_ASYNCH_PREDIV; */
 8003d46:	4b24      	ldr	r3, [pc, #144]	@ (8003dd8 <HW_RTC_SetConfig+0xa4>)
 8003d48:	221f      	movs	r2, #31
 8003d4a:	609a      	str	r2, [r3, #8]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 8003d4c:	4b22      	ldr	r3, [pc, #136]	@ (8003dd8 <HW_RTC_SetConfig+0xa4>)
 8003d4e:	4a24      	ldr	r2, [pc, #144]	@ (8003de0 <HW_RTC_SetConfig+0xac>)
 8003d50:	60da      	str	r2, [r3, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT;
 8003d52:	4b21      	ldr	r3, [pc, #132]	@ (8003dd8 <HW_RTC_SetConfig+0xa4>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	611a      	str	r2, [r3, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003d58:	4b1f      	ldr	r3, [pc, #124]	@ (8003dd8 <HW_RTC_SetConfig+0xa4>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	619a      	str	r2, [r3, #24]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd8 <HW_RTC_SetConfig+0xa4>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	61da      	str	r2, [r3, #28]

  HAL_RTC_Init(&RtcHandle);
 8003d64:	4b1c      	ldr	r3, [pc, #112]	@ (8003dd8 <HW_RTC_SetConfig+0xa4>)
 8003d66:	0018      	movs	r0, r3
 8003d68:	f013 feae 	bl	8017ac8 <HAL_RTC_Init>

  /*Monday 1st January 2016*/
  RTC_DateStruct.Year = 0;
 8003d6c:	003b      	movs	r3, r7
 8003d6e:	2200      	movs	r2, #0
 8003d70:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct.Month = RTC_MONTH_JANUARY;
 8003d72:	003b      	movs	r3, r7
 8003d74:	2201      	movs	r2, #1
 8003d76:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct.Date = 1;
 8003d78:	003b      	movs	r3, r7
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 8003d7e:	003b      	movs	r3, r7
 8003d80:	2201      	movs	r2, #1
 8003d82:	701a      	strb	r2, [r3, #0]
  HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct, RTC_FORMAT_BIN);
 8003d84:	0039      	movs	r1, r7
 8003d86:	4b14      	ldr	r3, [pc, #80]	@ (8003dd8 <HW_RTC_SetConfig+0xa4>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f014 f85a 	bl	8017e44 <HAL_RTC_SetDate>

  /*at 0:0:0*/
  RTC_TimeStruct.Hours = 0;
 8003d90:	1d3b      	adds	r3, r7, #4
 8003d92:	2200      	movs	r2, #0
 8003d94:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct.Minutes = 0;
 8003d96:	1d3b      	adds	r3, r7, #4
 8003d98:	2200      	movs	r2, #0
 8003d9a:	705a      	strb	r2, [r3, #1]

  RTC_TimeStruct.Seconds = 0;
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	2200      	movs	r2, #0
 8003da0:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct.TimeFormat = 0;
 8003da2:	1d3b      	adds	r3, r7, #4
 8003da4:	2200      	movs	r2, #0
 8003da6:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct.SubSeconds = 0;
 8003da8:	1d3b      	adds	r3, r7, #4
 8003daa:	2200      	movs	r2, #0
 8003dac:	605a      	str	r2, [r3, #4]
  RTC_TimeStruct.StoreOperation = RTC_DAYLIGHTSAVING_NONE;
 8003dae:	1d3b      	adds	r3, r7, #4
 8003db0:	2200      	movs	r2, #0
 8003db2:	611a      	str	r2, [r3, #16]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 8003db4:	1d3b      	adds	r3, r7, #4
 8003db6:	2200      	movs	r2, #0
 8003db8:	60da      	str	r2, [r3, #12]

  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 8003dba:	1d39      	adds	r1, r7, #4
 8003dbc:	4b06      	ldr	r3, [pc, #24]	@ (8003dd8 <HW_RTC_SetConfig+0xa4>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f013 ff1f 	bl	8017c04 <HAL_RTC_SetTime>

  /*Enable Direct Read of the calendar registers (not through Shadow) */
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 8003dc6:	4b04      	ldr	r3, [pc, #16]	@ (8003dd8 <HW_RTC_SetConfig+0xa4>)
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f014 fbe3 	bl	8018594 <HAL_RTCEx_EnableBypassShadow>
}
 8003dce:	46c0      	nop			@ (mov r8, r8)
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b006      	add	sp, #24
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	46c0      	nop			@ (mov r8, r8)
 8003dd8:	200001e4 	.word	0x200001e4
 8003ddc:	40002800 	.word	0x40002800
 8003de0:	000003ff 	.word	0x000003ff

08003de4 <HW_RTC_GetMinimumTimeout>:
 * @brief returns the wake up time in ticks
 * @param none
 * @retval wake up time in ticks
 */
uint32_t HW_RTC_GetMinimumTimeout(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  return (MIN_ALARM_DELAY);
 8003de8:	2303      	movs	r3, #3
}
 8003dea:	0018      	movs	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HW_RTC_ms2Tick>:
 * @brief converts time in ms to time in ticks
 * @param [IN] time in milliseconds
 * @retval returns time in timer ticks
 */
uint32_t HW_RTC_ms2Tick(TimerTime_t timeMilliSec)
{
 8003df0:	b5b0      	push	{r4, r5, r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /*return( ( timeMicroSec / RTC_ALARM_TIME_BASE ) ); */
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	000a      	movs	r2, r1
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	000b      	movs	r3, r1
 8003e00:	0e51      	lsrs	r1, r2, #25
 8003e02:	01dd      	lsls	r5, r3, #7
 8003e04:	430d      	orrs	r5, r1
 8003e06:	01d4      	lsls	r4, r2, #7
 8003e08:	227d      	movs	r2, #125	@ 0x7d
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	0020      	movs	r0, r4
 8003e0e:	0029      	movs	r1, r5
 8003e10:	f7fc fb72 	bl	80004f8 <__aeabi_uldivmod>
 8003e14:	0002      	movs	r2, r0
 8003e16:	000b      	movs	r3, r1
 8003e18:	0013      	movs	r3, r2
}
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	b002      	add	sp, #8
 8003e20:	bdb0      	pop	{r4, r5, r7, pc}

08003e22 <HW_RTC_Tick2ms>:
 * @brief converts time in ticks to time in ms
 * @param [IN] time in timer ticks
 * @retval returns time in milliseconds
 */
TimerTime_t HW_RTC_Tick2ms(uint32_t tick)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b084      	sub	sp, #16
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  /*return( ( timeMicroSec * RTC_ALARM_TIME_BASE ) ); */
  uint32_t seconds = tick >> N_PREDIV_S;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	0a9b      	lsrs	r3, r3, #10
 8003e2e:	60fb      	str	r3, [r7, #12]
  tick = tick & PREDIV_S;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	059b      	lsls	r3, r3, #22
 8003e34:	0d9b      	lsrs	r3, r3, #22
 8003e36:	607b      	str	r3, [r7, #4]
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	0013      	movs	r3, r2
 8003e3c:	015b      	lsls	r3, r3, #5
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	189b      	adds	r3, r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	0019      	movs	r1, r3
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	0013      	movs	r3, r2
 8003e4c:	015b      	lsls	r3, r3, #5
 8003e4e:	1a9b      	subs	r3, r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	189b      	adds	r3, r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	0a9b      	lsrs	r3, r3, #10
 8003e58:	18cb      	adds	r3, r1, r3
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <HW_RTC_SetAlarm>:
 * @brief Set the alarm
 * @note The alarm is set at now (read in this funtion) + timeout
 * @param timeout Duration of the Timer ticks
 */
void HW_RTC_SetAlarm(uint32_t timeout)
{
 8003e64:	b590      	push	{r4, r7, lr}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 8003e6c:	4b14      	ldr	r3, [pc, #80]	@ (8003ec0 <HW_RTC_SetAlarm+0x5c>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	5e9b      	ldrsh	r3, [r3, r2]
 8003e72:	3303      	adds	r3, #3
 8003e74:	001c      	movs	r4, r3
 8003e76:	f000 f825 	bl	8003ec4 <HW_RTC_GetTimerElapsedTime>
 8003e7a:	0002      	movs	r2, r0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	1a9b      	subs	r3, r3, r2
 8003e80:	429c      	cmp	r4, r3
 8003e82:	d204      	bcs.n	8003e8e <HW_RTC_SetAlarm+0x2a>
  {
    LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 8003e84:	2100      	movs	r1, #0
 8003e86:	2004      	movs	r0, #4
 8003e88:	f010 fc9e 	bl	80147c8 <LPM_SetStopMode>
 8003e8c:	e003      	b.n	8003e96 <HW_RTC_SetAlarm+0x32>
  }
  else
  {
    LPM_SetStopMode(LPM_RTC_Id, LPM_Disable);
 8003e8e:	2101      	movs	r1, #1
 8003e90:	2004      	movs	r0, #4
 8003e92:	f010 fc99 	bl	80147c8 <LPM_SetStopMode>
  }

  /*In case stop mode is required */
  if (LPM_GetMode() == LPM_StopMode)
 8003e96:	f010 fceb 	bl	8014870 <LPM_GetMode>
 8003e9a:	0003      	movs	r3, r0
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d106      	bne.n	8003eae <HW_RTC_SetAlarm+0x4a>
  {
    timeout = timeout -  McuWakeUpTimeCal;
 8003ea0:	4b07      	ldr	r3, [pc, #28]	@ (8003ec0 <HW_RTC_SetAlarm+0x5c>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	5e9b      	ldrsh	r3, [r3, r2]
 8003ea6:	001a      	movs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	1a9b      	subs	r3, r3, r2
 8003eac:	607b      	str	r3, [r7, #4]
  }

  HW_RTC_StartWakeUpAlarm(timeout);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f000 f8d9 	bl	8004068 <HW_RTC_StartWakeUpAlarm>
}
 8003eb6:	46c0      	nop			@ (mov r8, r8)
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	b003      	add	sp, #12
 8003ebc:	bd90      	pop	{r4, r7, pc}
 8003ebe:	46c0      	nop			@ (mov r8, r8)
 8003ec0:	200001e2 	.word	0x200001e2

08003ec4 <HW_RTC_GetTimerElapsedTime>:
 * @brief Get the RTC timer elapsed time since the last Alarm was set
 * @param none
 * @retval RTC Elapsed time in ticks
 */
uint32_t HW_RTC_GetTimerElapsedTime(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b088      	sub	sp, #32
 8003ec8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003eca:	2308      	movs	r3, #8
 8003ecc:	18fa      	adds	r2, r7, r3
 8003ece:	1d3b      	adds	r3, r7, #4
 8003ed0:	0011      	movs	r1, r2
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f000 fa2c 	bl	8004330 <HW_RTC_GetCalendarValue>
 8003ed8:	0002      	movs	r2, r0
 8003eda:	000b      	movs	r3, r1
 8003edc:	0013      	movs	r3, r2
 8003ede:	61fb      	str	r3, [r7, #28]

  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8003ee0:	4b03      	ldr	r3, [pc, #12]	@ (8003ef0 <HW_RTC_GetTimerElapsedTime+0x2c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	1ad3      	subs	r3, r2, r3
}
 8003ee8:	0018      	movs	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b008      	add	sp, #32
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	20000230 	.word	0x20000230

08003ef4 <HW_RTC_GetTimerValue>:
 * @brief Get the RTC timer value
 * @param none
 * @retval RTC Timer value in ticks
 */
uint32_t HW_RTC_GetTimerValue(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003efa:	2308      	movs	r3, #8
 8003efc:	18fa      	adds	r2, r7, r3
 8003efe:	1d3b      	adds	r3, r7, #4
 8003f00:	0011      	movs	r1, r2
 8003f02:	0018      	movs	r0, r3
 8003f04:	f000 fa14 	bl	8004330 <HW_RTC_GetCalendarValue>
 8003f08:	0002      	movs	r2, r0
 8003f0a:	000b      	movs	r3, r1
 8003f0c:	0013      	movs	r3, r2
 8003f0e:	61fb      	str	r3, [r7, #28]

  return (CalendarValue);
 8003f10:	69fb      	ldr	r3, [r7, #28]
}
 8003f12:	0018      	movs	r0, r3
 8003f14:	46bd      	mov	sp, r7
 8003f16:	b008      	add	sp, #32
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <HW_RTC_StopAlarm>:
 * @brief Stop the Alarm
 * @param none
 * @retval none
 */
void HW_RTC_StopAlarm(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 8003f20:	2380      	movs	r3, #128	@ 0x80
 8003f22:	005a      	lsls	r2, r3, #1
 8003f24:	4b0a      	ldr	r3, [pc, #40]	@ (8003f50 <HW_RTC_StopAlarm+0x34>)
 8003f26:	0011      	movs	r1, r2
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f014 f9d3 	bl	80182d4 <HAL_RTC_DeactivateAlarm>
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&RtcHandle, RTC_FLAG_ALRAF);
 8003f2e:	4b08      	ldr	r3, [pc, #32]	@ (8003f50 <HW_RTC_StopAlarm+0x34>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	22ff      	movs	r2, #255	@ 0xff
 8003f36:	401a      	ands	r2, r3
 8003f38:	4b05      	ldr	r3, [pc, #20]	@ (8003f50 <HW_RTC_StopAlarm+0x34>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4905      	ldr	r1, [pc, #20]	@ (8003f54 <HW_RTC_StopAlarm+0x38>)
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	60da      	str	r2, [r3, #12]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003f42:	4b05      	ldr	r3, [pc, #20]	@ (8003f58 <HW_RTC_StopAlarm+0x3c>)
 8003f44:	2280      	movs	r2, #128	@ 0x80
 8003f46:	0292      	lsls	r2, r2, #10
 8003f48:	615a      	str	r2, [r3, #20]
}
 8003f4a:	46c0      	nop			@ (mov r8, r8)
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	200001e4 	.word	0x200001e4
 8003f54:	fffffe7f 	.word	0xfffffe7f
 8003f58:	40010400 	.word	0x40010400

08003f5c <HW_RTC_IrqHandler>:
 * @brief RTC IRQ Handler on the RTC Alarm
 * @param none
 * @retval none
 */
void HW_RTC_IrqHandler(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
  RTC_HandleTypeDef *hrtc = &RtcHandle;
 8003f62:	4b15      	ldr	r3, [pc, #84]	@ (8003fb8 <HW_RTC_IrqHandler+0x5c>)
 8003f64:	607b      	str	r3, [r7, #4]
  /* enable low power at irq*/
  LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 8003f66:	2100      	movs	r1, #0
 8003f68:	2004      	movs	r0, #4
 8003f6a:	f010 fc2d 	bl	80147c8 <LPM_SetStopMode>

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003f6e:	4b13      	ldr	r3, [pc, #76]	@ (8003fbc <HW_RTC_IrqHandler+0x60>)
 8003f70:	2280      	movs	r2, #128	@ 0x80
 8003f72:	0292      	lsls	r2, r2, #10
 8003f74:	615a      	str	r2, [r3, #20]

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	2380      	movs	r3, #128	@ 0x80
 8003f7e:	015b      	lsls	r3, r3, #5
 8003f80:	4013      	ands	r3, r2
 8003f82:	d014      	beq.n	8003fae <HW_RTC_IrqHandler+0x52>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	2380      	movs	r3, #128	@ 0x80
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d00d      	beq.n	8003fae <HW_RTC_IrqHandler+0x52>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	22ff      	movs	r2, #255	@ 0xff
 8003f9a:	401a      	ands	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4907      	ldr	r1, [pc, #28]	@ (8003fc0 <HW_RTC_IrqHandler+0x64>)
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	60da      	str	r2, [r3, #12]
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f7ff f883 	bl	80030b4 <HAL_RTC_AlarmAEventCallback>
    }
  }
}
 8003fae:	46c0      	nop			@ (mov r8, r8)
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	b002      	add	sp, #8
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	46c0      	nop			@ (mov r8, r8)
 8003fb8:	200001e4 	.word	0x200001e4
 8003fbc:	40010400 	.word	0x40010400
 8003fc0:	fffffe7f 	.word	0xfffffe7f

08003fc4 <HW_RTC_DelayMs>:
 * @brief a delay of delay ms by polling RTC
 * @param delay in ms
 * @retval none
 */
void HW_RTC_DelayMs(uint32_t delay)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  TimerTime_t delayValue = 0;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60fb      	str	r3, [r7, #12]
  TimerTime_t timeout = 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60bb      	str	r3, [r7, #8]

  delayValue = HW_RTC_ms2Tick(delay);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f7ff ff0a 	bl	8003df0 <HW_RTC_ms2Tick>
 8003fdc:	0003      	movs	r3, r0
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Wait delay ms */
  timeout = HW_RTC_GetTimerValue();
 8003fe0:	f7ff ff88 	bl	8003ef4 <HW_RTC_GetTimerValue>
 8003fe4:	0003      	movs	r3, r0
 8003fe6:	60bb      	str	r3, [r7, #8]
  while (((HW_RTC_GetTimerValue() - timeout)) < delayValue)
 8003fe8:	e000      	b.n	8003fec <HW_RTC_DelayMs+0x28>
  {
    __NOP();
 8003fea:	46c0      	nop			@ (mov r8, r8)
  while (((HW_RTC_GetTimerValue() - timeout)) < delayValue)
 8003fec:	f7ff ff82 	bl	8003ef4 <HW_RTC_GetTimerValue>
 8003ff0:	0002      	movs	r2, r0
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d8f6      	bhi.n	8003fea <HW_RTC_DelayMs+0x26>
  }
}
 8003ffc:	46c0      	nop			@ (mov r8, r8)
 8003ffe:	46c0      	nop			@ (mov r8, r8)
 8004000:	46bd      	mov	sp, r7
 8004002:	b004      	add	sp, #16
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <HW_RTC_SetTimerContext>:
 * @brief set Time Reference set also the RTC_DateStruct and RTC_TimeStruct
 * @param none
 * @retval Timer Value
 */
uint32_t HW_RTC_SetTimerContext(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  RtcTimerContext.Rtc_Time = (uint32_t) HW_RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 800400c:	4a07      	ldr	r2, [pc, #28]	@ (800402c <HW_RTC_SetTimerContext+0x24>)
 800400e:	4b08      	ldr	r3, [pc, #32]	@ (8004030 <HW_RTC_SetTimerContext+0x28>)
 8004010:	0011      	movs	r1, r2
 8004012:	0018      	movs	r0, r3
 8004014:	f000 f98c 	bl	8004330 <HW_RTC_GetCalendarValue>
 8004018:	0002      	movs	r2, r0
 800401a:	000b      	movs	r3, r1
 800401c:	4b05      	ldr	r3, [pc, #20]	@ (8004034 <HW_RTC_SetTimerContext+0x2c>)
 800401e:	601a      	str	r2, [r3, #0]
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8004020:	4b04      	ldr	r3, [pc, #16]	@ (8004034 <HW_RTC_SetTimerContext+0x2c>)
 8004022:	681b      	ldr	r3, [r3, #0]
}
 8004024:	0018      	movs	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	46c0      	nop			@ (mov r8, r8)
 800402c:	20000234 	.word	0x20000234
 8004030:	20000248 	.word	0x20000248
 8004034:	20000230 	.word	0x20000230

08004038 <HW_RTC_GetTimerContext>:
 * @brief Get the RTC timer Reference
 * @param none
 * @retval Timer Value in  Ticks
 */
uint32_t HW_RTC_GetTimerContext(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  return RtcTimerContext.Rtc_Time;
 800403c:	4b02      	ldr	r3, [pc, #8]	@ (8004048 <HW_RTC_GetTimerContext+0x10>)
 800403e:	681b      	ldr	r3, [r3, #0]
}
 8004040:	0018      	movs	r0, r3
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	46c0      	nop			@ (mov r8, r8)
 8004048:	20000230 	.word	0x20000230

0800404c <HW_RTC_SetAlarmConfig>:
 * @brief configure alarm at init
 * @param none
 * @retval none
 */
static void HW_RTC_SetAlarmConfig(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 8004050:	2380      	movs	r3, #128	@ 0x80
 8004052:	005a      	lsls	r2, r3, #1
 8004054:	4b03      	ldr	r3, [pc, #12]	@ (8004064 <HW_RTC_SetAlarmConfig+0x18>)
 8004056:	0011      	movs	r1, r2
 8004058:	0018      	movs	r0, r3
 800405a:	f014 f93b 	bl	80182d4 <HAL_RTC_DeactivateAlarm>
}
 800405e:	46c0      	nop			@ (mov r8, r8)
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	200001e4 	.word	0x200001e4

08004068 <HW_RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void HW_RTC_StartWakeUpAlarm(uint32_t timeoutValue)
{
 8004068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800406a:	b08d      	sub	sp, #52	@ 0x34
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 8004070:	252e      	movs	r5, #46	@ 0x2e
 8004072:	197b      	adds	r3, r7, r5
 8004074:	2200      	movs	r2, #0
 8004076:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmSeconds = 0;
 8004078:	232c      	movs	r3, #44	@ 0x2c
 800407a:	18fb      	adds	r3, r7, r3
 800407c:	2200      	movs	r2, #0
 800407e:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmMinutes = 0;
 8004080:	232a      	movs	r3, #42	@ 0x2a
 8004082:	18fb      	adds	r3, r7, r3
 8004084:	2200      	movs	r2, #0
 8004086:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmHours = 0;
 8004088:	2328      	movs	r3, #40	@ 0x28
 800408a:	18fb      	adds	r3, r7, r3
 800408c:	2200      	movs	r2, #0
 800408e:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmDays = 0;
 8004090:	2626      	movs	r6, #38	@ 0x26
 8004092:	19bb      	adds	r3, r7, r6
 8004094:	2200      	movs	r2, #0
 8004096:	801a      	strh	r2, [r3, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8004098:	2310      	movs	r3, #16
 800409a:	18fa      	adds	r2, r7, r3
 800409c:	4b9a      	ldr	r3, [pc, #616]	@ (8004308 <HW_RTC_StartWakeUpAlarm+0x2a0>)
 800409e:	3304      	adds	r3, #4
 80040a0:	cb13      	ldmia	r3!, {r0, r1, r4}
 80040a2:	c213      	stmia	r2!, {r0, r1, r4}
 80040a4:	cb03      	ldmia	r3!, {r0, r1}
 80040a6:	c203      	stmia	r2!, {r0, r1}
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 80040a8:	240c      	movs	r4, #12
 80040aa:	193b      	adds	r3, r7, r4
 80040ac:	4a96      	ldr	r2, [pc, #600]	@ (8004308 <HW_RTC_StartWakeUpAlarm+0x2a0>)
 80040ae:	6992      	ldr	r2, [r2, #24]
 80040b0:	601a      	str	r2, [r3, #0]

  HW_RTC_StopAlarm();
 80040b2:	f7ff ff33 	bl	8003f1c <HW_RTC_StopAlarm>

  /*reverse counter */
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 80040b6:	2310      	movs	r3, #16
 80040b8:	18fb      	adds	r3, r7, r3
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	b29a      	uxth	r2, r3
 80040be:	197b      	adds	r3, r7, r5
 80040c0:	4992      	ldr	r1, [pc, #584]	@ (800430c <HW_RTC_StartWakeUpAlarm+0x2a4>)
 80040c2:	1a8a      	subs	r2, r1, r2
 80040c4:	801a      	strh	r2, [r3, #0]
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	059b      	lsls	r3, r3, #22
 80040cc:	0d9b      	lsrs	r3, r3, #22
 80040ce:	b299      	uxth	r1, r3
 80040d0:	197b      	adds	r3, r7, r5
 80040d2:	197a      	adds	r2, r7, r5
 80040d4:	8812      	ldrh	r2, [r2, #0]
 80040d6:	188a      	adds	r2, r1, r2
 80040d8:	801a      	strh	r2, [r3, #0]
  /* convert timeout  to seconds */
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	0a9b      	lsrs	r3, r3, #10
 80040de:	607b      	str	r3, [r7, #4]

  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 80040e0:	193b      	adds	r3, r7, r4
 80040e2:	789a      	ldrb	r2, [r3, #2]
 80040e4:	19bb      	adds	r3, r7, r6
 80040e6:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 80040e8:	e00a      	b.n	8004100 <HW_RTC_StartWakeUpAlarm+0x98>
  {
    timeoutValue -= SECONDS_IN_1DAY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a88      	ldr	r2, [pc, #544]	@ (8004310 <HW_RTC_StartWakeUpAlarm+0x2a8>)
 80040ee:	4694      	mov	ip, r2
 80040f0:	4463      	add	r3, ip
 80040f2:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 80040f4:	2126      	movs	r1, #38	@ 0x26
 80040f6:	187b      	adds	r3, r7, r1
 80040f8:	881a      	ldrh	r2, [r3, #0]
 80040fa:	187b      	adds	r3, r7, r1
 80040fc:	3201      	adds	r2, #1
 80040fe:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a84      	ldr	r2, [pc, #528]	@ (8004314 <HW_RTC_StartWakeUpAlarm+0x2ac>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d8f0      	bhi.n	80040ea <HW_RTC_StartWakeUpAlarm+0x82>
  }

  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8004108:	2310      	movs	r3, #16
 800410a:	18fb      	adds	r3, r7, r3
 800410c:	781a      	ldrb	r2, [r3, #0]
 800410e:	2328      	movs	r3, #40	@ 0x28
 8004110:	18fb      	adds	r3, r7, r3
 8004112:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8004114:	e00a      	b.n	800412c <HW_RTC_StartWakeUpAlarm+0xc4>
  {
    timeoutValue -= SECONDS_IN_1HOUR;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a7f      	ldr	r2, [pc, #508]	@ (8004318 <HW_RTC_StartWakeUpAlarm+0x2b0>)
 800411a:	4694      	mov	ip, r2
 800411c:	4463      	add	r3, ip
 800411e:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 8004120:	2128      	movs	r1, #40	@ 0x28
 8004122:	187b      	adds	r3, r7, r1
 8004124:	881a      	ldrh	r2, [r3, #0]
 8004126:	187b      	adds	r3, r7, r1
 8004128:	3201      	adds	r2, #1
 800412a:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	23e1      	movs	r3, #225	@ 0xe1
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	429a      	cmp	r2, r3
 8004134:	d2ef      	bcs.n	8004116 <HW_RTC_StartWakeUpAlarm+0xae>
  }

  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8004136:	2310      	movs	r3, #16
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	785a      	ldrb	r2, [r3, #1]
 800413c:	232a      	movs	r3, #42	@ 0x2a
 800413e:	18fb      	adds	r3, r7, r3
 8004140:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8004142:	e008      	b.n	8004156 <HW_RTC_StartWakeUpAlarm+0xee>
  {
    timeoutValue -= SECONDS_IN_1MINUTE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3b3c      	subs	r3, #60	@ 0x3c
 8004148:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 800414a:	212a      	movs	r1, #42	@ 0x2a
 800414c:	187b      	adds	r3, r7, r1
 800414e:	881a      	ldrh	r2, [r3, #0]
 8004150:	187b      	adds	r3, r7, r1
 8004152:	3201      	adds	r2, #1
 8004154:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b3b      	cmp	r3, #59	@ 0x3b
 800415a:	d8f3      	bhi.n	8004144 <HW_RTC_StartWakeUpAlarm+0xdc>
  }

  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 800415c:	2310      	movs	r3, #16
 800415e:	18fb      	adds	r3, r7, r3
 8004160:	789b      	ldrb	r3, [r3, #2]
 8004162:	0019      	movs	r1, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	b29a      	uxth	r2, r3
 8004168:	232c      	movs	r3, #44	@ 0x2c
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	188a      	adds	r2, r1, r2
 800416e:	801a      	strh	r2, [r3, #0]

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (PREDIV_S + 1))
 8004170:	e00d      	b.n	800418e <HW_RTC_StartWakeUpAlarm+0x126>
  {
    rtcAlarmSubSeconds -= (PREDIV_S + 1);
 8004172:	222e      	movs	r2, #46	@ 0x2e
 8004174:	18bb      	adds	r3, r7, r2
 8004176:	18ba      	adds	r2, r7, r2
 8004178:	8812      	ldrh	r2, [r2, #0]
 800417a:	4968      	ldr	r1, [pc, #416]	@ (800431c <HW_RTC_StartWakeUpAlarm+0x2b4>)
 800417c:	468c      	mov	ip, r1
 800417e:	4462      	add	r2, ip
 8004180:	801a      	strh	r2, [r3, #0]
    rtcAlarmSeconds++;
 8004182:	212c      	movs	r1, #44	@ 0x2c
 8004184:	187b      	adds	r3, r7, r1
 8004186:	881a      	ldrh	r2, [r3, #0]
 8004188:	187b      	adds	r3, r7, r1
 800418a:	3201      	adds	r2, #1
 800418c:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSubSeconds >= (PREDIV_S + 1))
 800418e:	232e      	movs	r3, #46	@ 0x2e
 8004190:	18fb      	adds	r3, r7, r3
 8004192:	881a      	ldrh	r2, [r3, #0]
 8004194:	2380      	movs	r3, #128	@ 0x80
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	429a      	cmp	r2, r3
 800419a:	d2ea      	bcs.n	8004172 <HW_RTC_StartWakeUpAlarm+0x10a>
  }

  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 800419c:	e00b      	b.n	80041b6 <HW_RTC_StartWakeUpAlarm+0x14e>
  {
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 800419e:	222c      	movs	r2, #44	@ 0x2c
 80041a0:	18bb      	adds	r3, r7, r2
 80041a2:	18ba      	adds	r2, r7, r2
 80041a4:	8812      	ldrh	r2, [r2, #0]
 80041a6:	3a3c      	subs	r2, #60	@ 0x3c
 80041a8:	801a      	strh	r2, [r3, #0]
    rtcAlarmMinutes++;
 80041aa:	212a      	movs	r1, #42	@ 0x2a
 80041ac:	187b      	adds	r3, r7, r1
 80041ae:	881a      	ldrh	r2, [r3, #0]
 80041b0:	187b      	adds	r3, r7, r1
 80041b2:	3201      	adds	r2, #1
 80041b4:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 80041b6:	232c      	movs	r3, #44	@ 0x2c
 80041b8:	18fb      	adds	r3, r7, r3
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	2b3b      	cmp	r3, #59	@ 0x3b
 80041be:	d8ee      	bhi.n	800419e <HW_RTC_StartWakeUpAlarm+0x136>
  }

  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 80041c0:	e00b      	b.n	80041da <HW_RTC_StartWakeUpAlarm+0x172>
  {
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 80041c2:	222a      	movs	r2, #42	@ 0x2a
 80041c4:	18bb      	adds	r3, r7, r2
 80041c6:	18ba      	adds	r2, r7, r2
 80041c8:	8812      	ldrh	r2, [r2, #0]
 80041ca:	3a3c      	subs	r2, #60	@ 0x3c
 80041cc:	801a      	strh	r2, [r3, #0]
    rtcAlarmHours++;
 80041ce:	2128      	movs	r1, #40	@ 0x28
 80041d0:	187b      	adds	r3, r7, r1
 80041d2:	881a      	ldrh	r2, [r3, #0]
 80041d4:	187b      	adds	r3, r7, r1
 80041d6:	3201      	adds	r2, #1
 80041d8:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 80041da:	232a      	movs	r3, #42	@ 0x2a
 80041dc:	18fb      	adds	r3, r7, r3
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	2b3b      	cmp	r3, #59	@ 0x3b
 80041e2:	d8ee      	bhi.n	80041c2 <HW_RTC_StartWakeUpAlarm+0x15a>
  }

  while (rtcAlarmHours >= HOURS_IN_1DAY)
 80041e4:	e00b      	b.n	80041fe <HW_RTC_StartWakeUpAlarm+0x196>
  {
    rtcAlarmHours -= HOURS_IN_1DAY;
 80041e6:	2228      	movs	r2, #40	@ 0x28
 80041e8:	18bb      	adds	r3, r7, r2
 80041ea:	18ba      	adds	r2, r7, r2
 80041ec:	8812      	ldrh	r2, [r2, #0]
 80041ee:	3a18      	subs	r2, #24
 80041f0:	801a      	strh	r2, [r3, #0]
    rtcAlarmDays++;
 80041f2:	2126      	movs	r1, #38	@ 0x26
 80041f4:	187b      	adds	r3, r7, r1
 80041f6:	881a      	ldrh	r2, [r3, #0]
 80041f8:	187b      	adds	r3, r7, r1
 80041fa:	3201      	adds	r2, #1
 80041fc:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 80041fe:	2328      	movs	r3, #40	@ 0x28
 8004200:	18fb      	adds	r3, r7, r3
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	2b17      	cmp	r3, #23
 8004206:	d8ee      	bhi.n	80041e6 <HW_RTC_StartWakeUpAlarm+0x17e>
  }

  if (RTC_DateStruct.Year % 4 == 0)
 8004208:	210c      	movs	r1, #12
 800420a:	187b      	adds	r3, r7, r1
 800420c:	78db      	ldrb	r3, [r3, #3]
 800420e:	2203      	movs	r2, #3
 8004210:	4013      	ands	r3, r2
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d119      	bne.n	800424c <HW_RTC_StartWakeUpAlarm+0x1e4>
  {
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8004218:	187b      	adds	r3, r7, r1
 800421a:	785b      	ldrb	r3, [r3, #1]
 800421c:	3b01      	subs	r3, #1
 800421e:	4a40      	ldr	r2, [pc, #256]	@ (8004320 <HW_RTC_StartWakeUpAlarm+0x2b8>)
 8004220:	5cd3      	ldrb	r3, [r2, r3]
 8004222:	001a      	movs	r2, r3
 8004224:	2426      	movs	r4, #38	@ 0x26
 8004226:	193b      	adds	r3, r7, r4
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	4293      	cmp	r3, r2
 800422c:	d928      	bls.n	8004280 <HW_RTC_StartWakeUpAlarm+0x218>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 800422e:	193b      	adds	r3, r7, r4
 8004230:	8818      	ldrh	r0, [r3, #0]
 8004232:	187b      	adds	r3, r7, r1
 8004234:	785b      	ldrb	r3, [r3, #1]
 8004236:	3b01      	subs	r3, #1
 8004238:	4a39      	ldr	r2, [pc, #228]	@ (8004320 <HW_RTC_StartWakeUpAlarm+0x2b8>)
 800423a:	5cd3      	ldrb	r3, [r2, r3]
 800423c:	0019      	movs	r1, r3
 800423e:	f7fc f8dd 	bl	80003fc <__aeabi_idivmod>
 8004242:	000b      	movs	r3, r1
 8004244:	001a      	movs	r2, r3
 8004246:	193b      	adds	r3, r7, r4
 8004248:	801a      	strh	r2, [r3, #0]
 800424a:	e019      	b.n	8004280 <HW_RTC_StartWakeUpAlarm+0x218>
    }
  }
  else
  {
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800424c:	210c      	movs	r1, #12
 800424e:	187b      	adds	r3, r7, r1
 8004250:	785b      	ldrb	r3, [r3, #1]
 8004252:	3b01      	subs	r3, #1
 8004254:	4a33      	ldr	r2, [pc, #204]	@ (8004324 <HW_RTC_StartWakeUpAlarm+0x2bc>)
 8004256:	5cd3      	ldrb	r3, [r2, r3]
 8004258:	001a      	movs	r2, r3
 800425a:	2426      	movs	r4, #38	@ 0x26
 800425c:	193b      	adds	r3, r7, r4
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	4293      	cmp	r3, r2
 8004262:	d90d      	bls.n	8004280 <HW_RTC_StartWakeUpAlarm+0x218>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8004264:	193b      	adds	r3, r7, r4
 8004266:	8818      	ldrh	r0, [r3, #0]
 8004268:	187b      	adds	r3, r7, r1
 800426a:	785b      	ldrb	r3, [r3, #1]
 800426c:	3b01      	subs	r3, #1
 800426e:	4a2d      	ldr	r2, [pc, #180]	@ (8004324 <HW_RTC_StartWakeUpAlarm+0x2bc>)
 8004270:	5cd3      	ldrb	r3, [r2, r3]
 8004272:	0019      	movs	r1, r3
 8004274:	f7fc f8c2 	bl	80003fc <__aeabi_idivmod>
 8004278:	000b      	movs	r3, r1
 800427a:	001a      	movs	r2, r3
 800427c:	193b      	adds	r3, r7, r4
 800427e:	801a      	strh	r2, [r3, #0]
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 8004280:	232e      	movs	r3, #46	@ 0x2e
 8004282:	18fb      	adds	r3, r7, r3
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	4a21      	ldr	r2, [pc, #132]	@ (800430c <HW_RTC_StartWakeUpAlarm+0x2a4>)
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	001a      	movs	r2, r3
 800428c:	4b26      	ldr	r3, [pc, #152]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 800428e:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK;
 8004290:	4b25      	ldr	r3, [pc, #148]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 8004292:	22a0      	movs	r2, #160	@ 0xa0
 8004294:	0512      	lsls	r2, r2, #20
 8004296:	619a      	str	r2, [r3, #24]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8004298:	232c      	movs	r3, #44	@ 0x2c
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	4b21      	ldr	r3, [pc, #132]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 80042a2:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 80042a4:	232a      	movs	r3, #42	@ 0x2a
 80042a6:	18fb      	adds	r3, r7, r3
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 80042ae:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 80042b0:	2328      	movs	r3, #40	@ 0x28
 80042b2:	18fb      	adds	r3, r7, r3
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 80042ba:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80042bc:	2326      	movs	r3, #38	@ 0x26
 80042be:	18fb      	adds	r3, r7, r3
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	b2d9      	uxtb	r1, r3
 80042c4:	4b18      	ldr	r3, [pc, #96]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 80042c6:	2220      	movs	r2, #32
 80042c8:	5499      	strb	r1, [r3, r2]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80042ca:	2310      	movs	r3, #16
 80042cc:	18fb      	adds	r3, r7, r3
 80042ce:	78da      	ldrb	r2, [r3, #3]
 80042d0:	4b15      	ldr	r3, [pc, #84]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 80042d2:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80042d4:	4b14      	ldr	r3, [pc, #80]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 80042da:	4b13      	ldr	r3, [pc, #76]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 80042dc:	2200      	movs	r2, #0
 80042de:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80042e0:	4b11      	ldr	r3, [pc, #68]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 80042e2:	2280      	movs	r2, #128	@ 0x80
 80042e4:	0052      	lsls	r2, r2, #1
 80042e6:	625a      	str	r2, [r3, #36]	@ 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80042e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80042ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	611a      	str	r2, [r3, #16]

  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80042f4:	490c      	ldr	r1, [pc, #48]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 80042f6:	4b0d      	ldr	r3, [pc, #52]	@ (800432c <HW_RTC_StartWakeUpAlarm+0x2c4>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	0018      	movs	r0, r3
 80042fc:	f013 fe9e 	bl	801803c <HAL_RTC_SetAlarm_IT>
}
 8004300:	46c0      	nop			@ (mov r8, r8)
 8004302:	46bd      	mov	sp, r7
 8004304:	b00d      	add	sp, #52	@ 0x34
 8004306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004308:	20000230 	.word	0x20000230
 800430c:	000003ff 	.word	0x000003ff
 8004310:	fffeae80 	.word	0xfffeae80
 8004314:	0001517f 	.word	0x0001517f
 8004318:	fffff1f0 	.word	0xfffff1f0
 800431c:	fffffc00 	.word	0xfffffc00
 8004320:	0801adb8 	.word	0x0801adb8
 8004324:	0801adac 	.word	0x0801adac
 8004328:	20000208 	.word	0x20000208
 800432c:	200001e4 	.word	0x200001e4

08004330 <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint64_t HW_RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8004330:	b5b0      	push	{r4, r5, r7, lr}
 8004332:	b08c      	sub	sp, #48	@ 0x30
 8004334:	af00      	add	r7, sp, #0
 8004336:	6178      	str	r0, [r7, #20]
 8004338:	6139      	str	r1, [r7, #16]
  uint64_t calendarValue = 0;
 800433a:	2200      	movs	r2, #0
 800433c:	2300      	movs	r3, #0
 800433e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004340:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t first_read;
  uint32_t correction;
  uint32_t seconds;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 8004342:	6939      	ldr	r1, [r7, #16]
 8004344:	4b4a      	ldr	r3, [pc, #296]	@ (8004470 <HW_RTC_GetCalendarValue+0x140>)
 8004346:	2200      	movs	r2, #0
 8004348:	0018      	movs	r0, r3
 800434a:	f013 fd1f 	bl	8017d8c <HAL_RTC_GetTime>

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
 800434e:	4b49      	ldr	r3, [pc, #292]	@ (8004474 <HW_RTC_GetCalendarValue+0x144>)
 8004350:	0018      	movs	r0, r3
 8004352:	f7ff fccb 	bl	8003cec <LL_RTC_TIME_GetSubSecond>
 8004356:	0003      	movs	r3, r0
 8004358:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_RTC_GetDate(&RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN);
 800435a:	6979      	ldr	r1, [r7, #20]
 800435c:	4b44      	ldr	r3, [pc, #272]	@ (8004470 <HW_RTC_GetCalendarValue+0x140>)
 800435e:	2200      	movs	r2, #0
 8004360:	0018      	movs	r0, r3
 8004362:	f013 fe1d 	bl	8017fa0 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 8004366:	6939      	ldr	r1, [r7, #16]
 8004368:	4b41      	ldr	r3, [pc, #260]	@ (8004470 <HW_RTC_GetCalendarValue+0x140>)
 800436a:	2200      	movs	r2, #0
 800436c:	0018      	movs	r0, r3
 800436e:	f013 fd0d 	bl	8017d8c <HAL_RTC_GetTime>

  }
  while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 8004372:	4b40      	ldr	r3, [pc, #256]	@ (8004474 <HW_RTC_GetCalendarValue+0x144>)
 8004374:	0018      	movs	r0, r3
 8004376:	f7ff fcb9 	bl	8003cec <LL_RTC_TIME_GetSubSecond>
 800437a:	0002      	movs	r2, r0
 800437c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437e:	4293      	cmp	r3, r2
 8004380:	d1e5      	bne.n	800434e <HW_RTC_GetCalendarValue+0x1e>

  /* calculte amount of elapsed days since 01/01/2000 */
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	78db      	ldrb	r3, [r3, #3]
 8004386:	001a      	movs	r2, r3
 8004388:	4b3b      	ldr	r3, [pc, #236]	@ (8004478 <HW_RTC_GetCalendarValue+0x148>)
 800438a:	4353      	muls	r3, r2
 800438c:	3303      	adds	r3, #3
 800438e:	089b      	lsrs	r3, r3, #2
 8004390:	623b      	str	r3, [r7, #32]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	78db      	ldrb	r3, [r3, #3]
 8004396:	2203      	movs	r2, #3
 8004398:	4013      	ands	r3, r2
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HW_RTC_GetCalendarValue+0x74>
 80043a0:	4b36      	ldr	r3, [pc, #216]	@ (800447c <HW_RTC_GetCalendarValue+0x14c>)
 80043a2:	e000      	b.n	80043a6 <HW_RTC_GetCalendarValue+0x76>
 80043a4:	4b36      	ldr	r3, [pc, #216]	@ (8004480 <HW_RTC_GetCalendarValue+0x150>)
 80043a6:	61fb      	str	r3, [r7, #28]

  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	785b      	ldrb	r3, [r3, #1]
 80043ac:	1e5a      	subs	r2, r3, #1
 80043ae:	0013      	movs	r3, r2
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	1a9b      	subs	r3, r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	189b      	adds	r3, r3, r2
 80043b8:	3301      	adds	r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	da00      	bge.n	80043c0 <HW_RTC_GetCalendarValue+0x90>
 80043be:	3301      	adds	r3, #1
 80043c0:	105b      	asrs	r3, r3, #1
 80043c2:	0019      	movs	r1, r3
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	785b      	ldrb	r3, [r3, #1]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	40da      	lsrs	r2, r3
 80043d0:	0013      	movs	r3, r2
 80043d2:	2203      	movs	r2, #3
 80043d4:	4013      	ands	r3, r2
 80043d6:	1acb      	subs	r3, r1, r3
 80043d8:	6a3a      	ldr	r2, [r7, #32]
 80043da:	18d3      	adds	r3, r2, r3
 80043dc:	623b      	str	r3, [r7, #32]

  seconds += (RTC_DateStruct->Date - 1);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	789b      	ldrb	r3, [r3, #2]
 80043e2:	001a      	movs	r2, r3
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	18d3      	adds	r3, r2, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	623b      	str	r3, [r7, #32]

  /* convert from days to seconds */
  seconds *= SECONDS_IN_1DAY;
 80043ec:	6a3a      	ldr	r2, [r7, #32]
 80043ee:	0013      	movs	r3, r2
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	189b      	adds	r3, r3, r2
 80043f4:	011a      	lsls	r2, r3, #4
 80043f6:	1ad2      	subs	r2, r2, r3
 80043f8:	0113      	lsls	r3, r2, #4
 80043fa:	1a9b      	subs	r3, r3, r2
 80043fc:	01db      	lsls	r3, r3, #7
 80043fe:	623b      	str	r3, [r7, #32]

  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	789b      	ldrb	r3, [r3, #2]
 8004404:	0019      	movs	r1, r3
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
              ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	001a      	movs	r2, r3
 800440c:	0013      	movs	r3, r2
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	011a      	lsls	r2, r3, #4
 8004414:	1ad2      	subs	r2, r2, r3
 8004416:	0113      	lsls	r3, r2, #4
 8004418:	001a      	movs	r2, r3
 800441a:	0010      	movs	r0, r2
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	785b      	ldrb	r3, [r3, #1]
 8004420:	001a      	movs	r2, r3
 8004422:	0013      	movs	r3, r2
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	1a9b      	subs	r3, r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	18c3      	adds	r3, r0, r3
 800442c:	18cb      	adds	r3, r1, r3
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 800442e:	6a3a      	ldr	r2, [r7, #32]
 8004430:	18d3      	adds	r3, r2, r3
 8004432:	623b      	str	r3, [r7, #32]



  calendarValue = (((uint64_t) seconds) << N_PREDIV_S) + (PREDIV_S - RTC_TimeStruct->SubSeconds);
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	60bb      	str	r3, [r7, #8]
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	0011      	movs	r1, r2
 8004442:	0d8d      	lsrs	r5, r1, #22
 8004444:	0013      	movs	r3, r2
 8004446:	029c      	lsls	r4, r3, #10
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	4a0d      	ldr	r2, [pc, #52]	@ (8004484 <HW_RTC_GetCalendarValue+0x154>)
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	603b      	str	r3, [r7, #0]
 8004452:	2300      	movs	r3, #0
 8004454:	607b      	str	r3, [r7, #4]
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	1912      	adds	r2, r2, r4
 800445c:	416b      	adcs	r3, r5
 800445e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004460:	62fb      	str	r3, [r7, #44]	@ 0x2c

  return (calendarValue);
 8004462:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004466:	0010      	movs	r0, r2
 8004468:	0019      	movs	r1, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	b00c      	add	sp, #48	@ 0x30
 800446e:	bdb0      	pop	{r4, r5, r7, pc}
 8004470:	200001e4 	.word	0x200001e4
 8004474:	40002800 	.word	0x40002800
 8004478:	000005b5 	.word	0x000005b5
 800447c:	00445550 	.word	0x00445550
 8004480:	0099aaa0 	.word	0x0099aaa0
 8004484:	000003ff 	.word	0x000003ff

08004488 <HW_RTC_GetCalendarTime>:
 * \param [IN]   pointer to ms
 *
 * \return uint32_t seconds
 */
uint32_t HW_RTC_GetCalendarTime(uint16_t *mSeconds)
{
 8004488:	b5b0      	push	{r4, r5, r7, lr}
 800448a:	b08c      	sub	sp, #48	@ 0x30
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8004490:	230c      	movs	r3, #12
 8004492:	18fa      	adds	r2, r7, r3
 8004494:	2308      	movs	r3, #8
 8004496:	18fb      	adds	r3, r7, r3
 8004498:	0011      	movs	r1, r2
 800449a:	0018      	movs	r0, r3
 800449c:	f7ff ff48 	bl	8004330 <HW_RTC_GetCalendarValue>
 80044a0:	0002      	movs	r2, r0
 80044a2:	000b      	movs	r3, r1
 80044a4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80044a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);
 80044a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044aa:	059b      	lsls	r3, r3, #22
 80044ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044ae:	0a94      	lsrs	r4, r2, #10
 80044b0:	431c      	orrs	r4, r3
 80044b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b4:	0a9d      	lsrs	r5, r3, #10
 80044b6:	0023      	movs	r3, r4
 80044b8:	627b      	str	r3, [r7, #36]	@ 0x24

  ticks = (uint32_t) calendarValue & PREDIV_S;
 80044ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044bc:	059b      	lsls	r3, r3, #22
 80044be:	0d9b      	lsrs	r3, r3, #22
 80044c0:	623b      	str	r3, [r7, #32]

  *mSeconds = HW_RTC_Tick2ms(ticks);
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	0018      	movs	r0, r3
 80044c6:	f7ff fcac 	bl	8003e22 <HW_RTC_Tick2ms>
 80044ca:	0003      	movs	r3, r0
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	801a      	strh	r2, [r3, #0]

  return seconds;
 80044d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80044d4:	0018      	movs	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	b00c      	add	sp, #48	@ 0x30
 80044da:	bdb0      	pop	{r4, r5, r7, pc}

080044dc <HW_RTC_BKUPWrite>:

void HW_RTC_BKUPWrite(uint32_t Data0, uint32_t Data1)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, Data0);
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	4b07      	ldr	r3, [pc, #28]	@ (8004508 <HW_RTC_BKUPWrite+0x2c>)
 80044ea:	2100      	movs	r1, #0
 80044ec:	0018      	movs	r0, r3
 80044ee:	f014 f827 	bl	8018540 <HAL_RTCEx_BKUPWrite>
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, Data1);
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	4b04      	ldr	r3, [pc, #16]	@ (8004508 <HW_RTC_BKUPWrite+0x2c>)
 80044f6:	2101      	movs	r1, #1
 80044f8:	0018      	movs	r0, r3
 80044fa:	f014 f821 	bl	8018540 <HAL_RTCEx_BKUPWrite>
}
 80044fe:	46c0      	nop			@ (mov r8, r8)
 8004500:	46bd      	mov	sp, r7
 8004502:	b002      	add	sp, #8
 8004504:	bd80      	pop	{r7, pc}
 8004506:	46c0      	nop			@ (mov r8, r8)
 8004508:	200001e4 	.word	0x200001e4

0800450c <HW_RTC_BKUPRead>:

void HW_RTC_BKUPRead(uint32_t *Data0, uint32_t *Data1)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 8004516:	4b0a      	ldr	r3, [pc, #40]	@ (8004540 <HW_RTC_BKUPRead+0x34>)
 8004518:	2100      	movs	r1, #0
 800451a:	0018      	movs	r0, r3
 800451c:	f014 f826 	bl	801856c <HAL_RTCEx_BKUPRead>
 8004520:	0002      	movs	r2, r0
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	601a      	str	r2, [r3, #0]
  *Data1 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1);
 8004526:	4b06      	ldr	r3, [pc, #24]	@ (8004540 <HW_RTC_BKUPRead+0x34>)
 8004528:	2101      	movs	r1, #1
 800452a:	0018      	movs	r0, r3
 800452c:	f014 f81e 	bl	801856c <HAL_RTCEx_BKUPRead>
 8004530:	0002      	movs	r2, r0
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	601a      	str	r2, [r3, #0]
}
 8004536:	46c0      	nop			@ (mov r8, r8)
 8004538:	46bd      	mov	sp, r7
 800453a:	b002      	add	sp, #8
 800453c:	bd80      	pop	{r7, pc}
 800453e:	46c0      	nop			@ (mov r8, r8)
 8004540:	200001e4 	.word	0x200001e4

08004544 <HW_SPI_Init>:
 * @brief Initializes the SPI object and MCU peripheral
 *
 * @param [IN] none
 */
void HW_SPI_Init(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0

  /*##-1- Configure the SPI peripheral */
  /* Set the SPI parameters */

  hspi.Instance = SPI1;
 8004548:	4b1d      	ldr	r3, [pc, #116]	@ (80045c0 <HW_SPI_Init+0x7c>)
 800454a:	4a1e      	ldr	r2, [pc, #120]	@ (80045c4 <HW_SPI_Init+0x80>)
 800454c:	601a      	str	r2, [r3, #0]

  hspi.Init.BaudRatePrescaler = SpiFrequency(10000000);
 800454e:	4b1e      	ldr	r3, [pc, #120]	@ (80045c8 <HW_SPI_Init+0x84>)
 8004550:	0018      	movs	r0, r3
 8004552:	f000 f89b 	bl	800468c <SpiFrequency>
 8004556:	0002      	movs	r2, r0
 8004558:	4b19      	ldr	r3, [pc, #100]	@ (80045c0 <HW_SPI_Init+0x7c>)
 800455a:	61da      	str	r2, [r3, #28]
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 800455c:	4b18      	ldr	r3, [pc, #96]	@ (80045c0 <HW_SPI_Init+0x7c>)
 800455e:	2200      	movs	r2, #0
 8004560:	609a      	str	r2, [r3, #8]
  hspi.Init.Mode           = SPI_MODE_MASTER;
 8004562:	4b17      	ldr	r3, [pc, #92]	@ (80045c0 <HW_SPI_Init+0x7c>)
 8004564:	2282      	movs	r2, #130	@ 0x82
 8004566:	0052      	lsls	r2, r2, #1
 8004568:	605a      	str	r2, [r3, #4]
  hspi.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800456a:	4b15      	ldr	r3, [pc, #84]	@ (80045c0 <HW_SPI_Init+0x7c>)
 800456c:	2200      	movs	r2, #0
 800456e:	611a      	str	r2, [r3, #16]
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8004570:	4b13      	ldr	r3, [pc, #76]	@ (80045c0 <HW_SPI_Init+0x7c>)
 8004572:	2200      	movs	r2, #0
 8004574:	615a      	str	r2, [r3, #20]
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 8004576:	4b12      	ldr	r3, [pc, #72]	@ (80045c0 <HW_SPI_Init+0x7c>)
 8004578:	2200      	movs	r2, #0
 800457a:	60da      	str	r2, [r3, #12]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800457c:	4b10      	ldr	r3, [pc, #64]	@ (80045c0 <HW_SPI_Init+0x7c>)
 800457e:	2200      	movs	r2, #0
 8004580:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8004582:	4b0f      	ldr	r3, [pc, #60]	@ (80045c0 <HW_SPI_Init+0x7c>)
 8004584:	2200      	movs	r2, #0
 8004586:	621a      	str	r2, [r3, #32]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 8004588:	4b0d      	ldr	r3, [pc, #52]	@ (80045c0 <HW_SPI_Init+0x7c>)
 800458a:	2280      	movs	r2, #128	@ 0x80
 800458c:	0092      	lsls	r2, r2, #2
 800458e:	619a      	str	r2, [r3, #24]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 8004590:	4b0b      	ldr	r3, [pc, #44]	@ (80045c0 <HW_SPI_Init+0x7c>)
 8004592:	2200      	movs	r2, #0
 8004594:	625a      	str	r2, [r3, #36]	@ 0x24


  SPI_CLK_ENABLE();
 8004596:	4b0d      	ldr	r3, [pc, #52]	@ (80045cc <HW_SPI_Init+0x88>)
 8004598:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800459a:	4b0c      	ldr	r3, [pc, #48]	@ (80045cc <HW_SPI_Init+0x88>)
 800459c:	2180      	movs	r1, #128	@ 0x80
 800459e:	0149      	lsls	r1, r1, #5
 80045a0:	430a      	orrs	r2, r1
 80045a2:	635a      	str	r2, [r3, #52]	@ 0x34


  if (HAL_SPI_Init(&hspi) != HAL_OK)
 80045a4:	4b06      	ldr	r3, [pc, #24]	@ (80045c0 <HW_SPI_Init+0x7c>)
 80045a6:	0018      	movs	r0, r3
 80045a8:	f014 f828 	bl	80185fc <HAL_SPI_Init>
 80045ac:	1e03      	subs	r3, r0, #0
 80045ae:	d001      	beq.n	80045b4 <HW_SPI_Init+0x70>
  {
    /* Initialization Error */
    Error_Handler();
 80045b0:	f7ff fa62 	bl	8003a78 <Error_Handler>
  }

  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoInit();
 80045b4:	f000 f80c 	bl	80045d0 <HW_SPI_IoInit>
}
 80045b8:	46c0      	nop			@ (mov r8, r8)
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	46c0      	nop			@ (mov r8, r8)
 80045c0:	2000024c 	.word	0x2000024c
 80045c4:	40013000 	.word	0x40013000
 80045c8:	00989680 	.word	0x00989680
 80045cc:	40021000 	.word	0x40021000

080045d0 <HW_SPI_IoInit>:
  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoDeInit();
}

void HW_SPI_IoInit(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 80045d6:	1d3b      	adds	r3, r7, #4
 80045d8:	0018      	movs	r0, r3
 80045da:	2314      	movs	r3, #20
 80045dc:	001a      	movs	r2, r3
 80045de:	2100      	movs	r1, #0
 80045e0:	f015 fa74 	bl	8019acc <memset>


  initStruct.Mode = GPIO_MODE_AF_PP;
 80045e4:	1d3b      	adds	r3, r7, #4
 80045e6:	2202      	movs	r2, #2
 80045e8:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL  ;
 80045ea:	1d3b      	adds	r3, r7, #4
 80045ec:	2200      	movs	r2, #0
 80045ee:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80045f0:	1d3b      	adds	r3, r7, #4
 80045f2:	2203      	movs	r2, #3
 80045f4:	60da      	str	r2, [r3, #12]
  initStruct.Alternate = SPI1_AF ;
 80045f6:	1d3b      	adds	r3, r7, #4
 80045f8:	2200      	movs	r2, #0
 80045fa:	611a      	str	r2, [r3, #16]

  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 80045fc:	1d3b      	adds	r3, r7, #4
 80045fe:	4816      	ldr	r0, [pc, #88]	@ (8004658 <HW_SPI_IoInit+0x88>)
 8004600:	001a      	movs	r2, r3
 8004602:	2108      	movs	r1, #8
 8004604:	f7ff fa42 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 8004608:	1d3a      	adds	r2, r7, #4
 800460a:	23a0      	movs	r3, #160	@ 0xa0
 800460c:	05db      	lsls	r3, r3, #23
 800460e:	2140      	movs	r1, #64	@ 0x40
 8004610:	0018      	movs	r0, r3
 8004612:	f7ff fa3b 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 8004616:	1d3a      	adds	r2, r7, #4
 8004618:	23a0      	movs	r3, #160	@ 0xa0
 800461a:	05db      	lsls	r3, r3, #23
 800461c:	2180      	movs	r1, #128	@ 0x80
 800461e:	0018      	movs	r0, r3
 8004620:	f7ff fa34 	bl	8003a8c <HW_GPIO_Init>

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004624:	1d3b      	adds	r3, r7, #4
 8004626:	2201      	movs	r2, #1
 8004628:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 800462a:	1d3b      	adds	r3, r7, #4
 800462c:	2200      	movs	r2, #0
 800462e:	609a      	str	r2, [r3, #8]

  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 8004630:	1d3a      	adds	r2, r7, #4
 8004632:	2380      	movs	r3, #128	@ 0x80
 8004634:	0219      	lsls	r1, r3, #8
 8004636:	23a0      	movs	r3, #160	@ 0xa0
 8004638:	05db      	lsls	r3, r3, #23
 800463a:	0018      	movs	r0, r3
 800463c:	f7ff fa26 	bl	8003a8c <HW_GPIO_Init>

  HW_GPIO_Write(RADIO_NSS_PORT, RADIO_NSS_PIN, 1);
 8004640:	2380      	movs	r3, #128	@ 0x80
 8004642:	0219      	lsls	r1, r3, #8
 8004644:	23a0      	movs	r3, #160	@ 0xa0
 8004646:	05db      	lsls	r3, r3, #23
 8004648:	2201      	movs	r2, #1
 800464a:	0018      	movs	r0, r3
 800464c:	f7ff faf0 	bl	8003c30 <HW_GPIO_Write>
}
 8004650:	46c0      	nop			@ (mov r8, r8)
 8004652:	46bd      	mov	sp, r7
 8004654:	b006      	add	sp, #24
 8004656:	bd80      	pop	{r7, pc}
 8004658:	50000400 	.word	0x50000400

0800465c <HW_SPI_InOut>:
 *
 * @param [IN] outData Byte to be sent
 * @retval inData      Received byte.
 */
uint16_t HW_SPI_InOut(uint16_t txData)
{
 800465c:	b590      	push	{r4, r7, lr}
 800465e:	b087      	sub	sp, #28
 8004660:	af02      	add	r7, sp, #8
 8004662:	0002      	movs	r2, r0
 8004664:	1dbb      	adds	r3, r7, #6
 8004666:	801a      	strh	r2, [r3, #0]
  uint16_t rxData ;

  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 8004668:	240e      	movs	r4, #14
 800466a:	193a      	adds	r2, r7, r4
 800466c:	1db9      	adds	r1, r7, #6
 800466e:	4806      	ldr	r0, [pc, #24]	@ (8004688 <HW_SPI_InOut+0x2c>)
 8004670:	2301      	movs	r3, #1
 8004672:	425b      	negs	r3, r3
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	2301      	movs	r3, #1
 8004678:	f014 f832 	bl	80186e0 <HAL_SPI_TransmitReceive>

  return rxData;
 800467c:	193b      	adds	r3, r7, r4
 800467e:	881b      	ldrh	r3, [r3, #0]
}
 8004680:	0018      	movs	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	b005      	add	sp, #20
 8004686:	bd90      	pop	{r4, r7, pc}
 8004688:	2000024c 	.word	0x2000024c

0800468c <SpiFrequency>:

/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency(uint32_t hz)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t divisor = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
  uint32_t SysClkTmp = SystemCoreClock;
 8004698:	4b17      	ldr	r3, [pc, #92]	@ (80046f8 <SpiFrequency+0x6c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	613b      	str	r3, [r7, #16]
  uint32_t baudRate;

  while (SysClkTmp > hz)
 800469e:	e008      	b.n	80046b2 <SpiFrequency+0x26>
  {
    divisor++;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	3301      	adds	r3, #1
 80046a4:	617b      	str	r3, [r7, #20]
    SysClkTmp = (SysClkTmp >> 1);
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	085b      	lsrs	r3, r3, #1
 80046aa:	613b      	str	r3, [r7, #16]

    if (divisor >= 7)
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2b06      	cmp	r3, #6
 80046b0:	d804      	bhi.n	80046bc <SpiFrequency+0x30>
  while (SysClkTmp > hz)
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d8f2      	bhi.n	80046a0 <SpiFrequency+0x14>
 80046ba:	e000      	b.n	80046be <SpiFrequency+0x32>
    {
      break;
 80046bc:	46c0      	nop			@ (mov r8, r8)
    }
  }

  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2204      	movs	r2, #4
 80046c2:	4013      	ands	r3, r2
 80046c4:	d101      	bne.n	80046ca <SpiFrequency+0x3e>
 80046c6:	2200      	movs	r2, #0
 80046c8:	e000      	b.n	80046cc <SpiFrequency+0x40>
 80046ca:	2220      	movs	r2, #32
             (((divisor & 0x2) == 0) ? 0x0 : SPI_CR1_BR_1) |
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2102      	movs	r1, #2
 80046d0:	400b      	ands	r3, r1
 80046d2:	d101      	bne.n	80046d8 <SpiFrequency+0x4c>
 80046d4:	2300      	movs	r3, #0
 80046d6:	e000      	b.n	80046da <SpiFrequency+0x4e>
 80046d8:	2310      	movs	r3, #16
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 80046da:	431a      	orrs	r2, r3
             (((divisor & 0x1) == 0) ? 0x0 : SPI_CR1_BR_0);
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2101      	movs	r1, #1
 80046e0:	400b      	ands	r3, r1
 80046e2:	d101      	bne.n	80046e8 <SpiFrequency+0x5c>
 80046e4:	2300      	movs	r3, #0
 80046e6:	e000      	b.n	80046ea <SpiFrequency+0x5e>
 80046e8:	2308      	movs	r3, #8
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]

  return baudRate;
 80046ee:	68fb      	ldr	r3, [r7, #12]
}
 80046f0:	0018      	movs	r0, r3
 80046f2:	46bd      	mov	sp, r7
 80046f4:	b006      	add	sp, #24
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	20000070 	.word	0x20000070

080046fc <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af02      	add	r7, sp, #8
  /* STM32 HAL library initialization*/
  HAL_Init();
 8004702:	f011 f827 	bl	8015754 <HAL_Init>

  /* Configure the system clock*/
  SystemClock_Config();
 8004706:	f7fe fe07 	bl	8003318 <SystemClock_Config>

  /* Configure the debug mode*/
  DBG_Init();
 800470a:	f7ff f95b 	bl	80039c4 <DBG_Init>

  /* Configure the hardware*/
  HW_Init();
 800470e:	f7fe fd07 	bl	8003120 <HW_Init>

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /*Disbale Stand-by mode*/
  LPM_SetOffMode(LPM_APPLI_Id, LPM_Disable);
 8004712:	2101      	movs	r1, #1
 8004714:	2001      	movs	r0, #1
 8004716:	f010 f823 	bl	8014760 <LPM_SetOffMode>

  PRINTF("APP_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__APP_VERSION >> 24), (uint8_t)(__APP_VERSION >> 16), (uint8_t)(__APP_VERSION >> 8), (uint8_t)__APP_VERSION);
 800471a:	481e      	ldr	r0, [pc, #120]	@ (8004794 <main+0x98>)
 800471c:	2300      	movs	r3, #0
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	2300      	movs	r3, #0
 8004722:	2203      	movs	r2, #3
 8004724:	2101      	movs	r1, #1
 8004726:	f010 fead 	bl	8015484 <TraceSend>
  PRINTF("MAC_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__LORA_MAC_VERSION >> 24), (uint8_t)(__LORA_MAC_VERSION >> 16), (uint8_t)(__LORA_MAC_VERSION >> 8), (uint8_t)__LORA_MAC_VERSION);
 800472a:	481b      	ldr	r0, [pc, #108]	@ (8004798 <main+0x9c>)
 800472c:	2300      	movs	r3, #0
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	2302      	movs	r3, #2
 8004732:	2204      	movs	r2, #4
 8004734:	2104      	movs	r1, #4
 8004736:	f010 fea5 	bl	8015484 <TraceSend>

  /* Configure the Lora Stack*/
  LORA_Init(&LoRaMainCallbacks, &LoRaParamInit);
 800473a:	4a18      	ldr	r2, [pc, #96]	@ (800479c <main+0xa0>)
 800473c:	4b18      	ldr	r3, [pc, #96]	@ (80047a0 <main+0xa4>)
 800473e:	0011      	movs	r1, r2
 8004740:	0018      	movs	r0, r3
 8004742:	f00f fcb9 	bl	80140b8 <LORA_Init>

  LORA_Join();
 8004746:	f00f fe55 	bl	80143f4 <LORA_Join>

  LoraStartTx(TX_ON_TIMER) ;
 800474a:	2000      	movs	r0, #0
 800474c:	f000 fa16 	bl	8004b7c <LoraStartTx>

  while (1)
  {
    if (AppProcessRequest == LORA_SET)
 8004750:	4b14      	ldr	r3, [pc, #80]	@ (80047a4 <main+0xa8>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d105      	bne.n	8004764 <main+0x68>
    {
      /*reset notification flag*/
      AppProcessRequest = LORA_RESET;
 8004758:	4b12      	ldr	r3, [pc, #72]	@ (80047a4 <main+0xa8>)
 800475a:	2200      	movs	r2, #0
 800475c:	701a      	strb	r2, [r3, #0]
      /*Send*/
      Send(NULL);
 800475e:	2000      	movs	r0, #0
 8004760:	f000 f836 	bl	80047d0 <Send>
    }
    if (LoraMacProcessRequest == LORA_SET)
 8004764:	4b10      	ldr	r3, [pc, #64]	@ (80047a8 <main+0xac>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d104      	bne.n	8004776 <main+0x7a>
    {
      /*reset notification flag*/
      LoraMacProcessRequest = LORA_RESET;
 800476c:	4b0e      	ldr	r3, [pc, #56]	@ (80047a8 <main+0xac>)
 800476e:	2200      	movs	r2, #0
 8004770:	701a      	strb	r2, [r3, #0]
      LoRaMacProcess();
 8004772:	f006 fa8f 	bl	800ac94 <LoRaMacProcess>
  __ASM volatile ("cpsid i" : : : "memory");
 8004776:	b672      	cpsid	i
}
 8004778:	46c0      	nop			@ (mov r8, r8)
    /*If a flag is set at this point, mcu must not enter low power and must loop*/
    DISABLE_IRQ();

    /* if an interrupt has occurred after DISABLE_IRQ, it is kept pending
     * and cortex will not enter low power anyway  */
    if ((LoraMacProcessRequest != LORA_SET) && (AppProcessRequest != LORA_SET))
 800477a:	4b0b      	ldr	r3, [pc, #44]	@ (80047a8 <main+0xac>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d005      	beq.n	800478e <main+0x92>
 8004782:	4b08      	ldr	r3, [pc, #32]	@ (80047a4 <main+0xa8>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d001      	beq.n	800478e <main+0x92>
    {
#ifndef LOW_POWER_DISABLE
      LPM_EnterLowPower();
 800478a:	f010 f851 	bl	8014830 <LPM_EnterLowPower>
  __ASM volatile ("cpsie i" : : : "memory");
 800478e:	b662      	cpsie	i
}
 8004790:	46c0      	nop			@ (mov r8, r8)
    if (AppProcessRequest == LORA_SET)
 8004792:	e7dd      	b.n	8004750 <main+0x54>
 8004794:	0801a67c 	.word	0x0801a67c
 8004798:	0801a6a0 	.word	0x0801a6a0
 800479c:	2000002c 	.word	0x2000002c
 80047a0:	20000008 	.word	0x20000008
 80047a4:	200002e5 	.word	0x200002e5
 80047a8:	200002e4 	.word	0x200002e4

080047ac <LoraMacProcessNotify>:
  }
}


void LoraMacProcessNotify(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  LoraMacProcessRequest = LORA_SET;
 80047b0:	4b02      	ldr	r3, [pc, #8]	@ (80047bc <LoraMacProcessNotify+0x10>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	701a      	strb	r2, [r3, #0]
}
 80047b6:	46c0      	nop			@ (mov r8, r8)
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	200002e4 	.word	0x200002e4

080047c0 <LORA_HasJoined>:


static void LORA_HasJoined(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
#if( OVER_THE_AIR_ACTIVATION != 0 )
  PRINTF("JOINED\n\r");
#endif
  LORA_RequestClass(LORAWAN_DEFAULT_CLASS);
 80047c4:	2002      	movs	r0, #2
 80047c6:	f00f ff23 	bl	8014610 <LORA_RequestClass>
}
 80047ca:	46c0      	nop			@ (mov r8, r8)
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <Send>:

static void Send(void *context)
{
 80047d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047d2:	b091      	sub	sp, #68	@ 0x44
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  uint16_t pressure = 0;
 80047d8:	233e      	movs	r3, #62	@ 0x3e
 80047da:	18fb      	adds	r3, r7, r3
 80047dc:	2200      	movs	r2, #0
 80047de:	801a      	strh	r2, [r3, #0]
  int16_t temperature = 0;
 80047e0:	233c      	movs	r3, #60	@ 0x3c
 80047e2:	18fb      	adds	r3, r7, r3
 80047e4:	2200      	movs	r2, #0
 80047e6:	801a      	strh	r2, [r3, #0]
  uint16_t humidity = 0;
 80047e8:	233a      	movs	r3, #58	@ 0x3a
 80047ea:	18fb      	adds	r3, r7, r3
 80047ec:	2200      	movs	r2, #0
 80047ee:	801a      	strh	r2, [r3, #0]
  uint8_t batteryLevel;
  sensor_t sensor_data;

  if (LORA_JoinStatus() != LORA_SET)
 80047f0:	f00f fe8a 	bl	8014508 <LORA_JoinStatus>
 80047f4:	0003      	movs	r3, r0
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d002      	beq.n	8004800 <Send+0x30>
  {
    /*Not joined, try again later*/
    LORA_Join();
 80047fa:	f00f fdfb 	bl	80143f4 <LORA_Join>
 80047fe:	e10e      	b.n	8004a1e <Send+0x24e>
    return;
  }

  TVL1(PRINTF("SEND REQUEST\n\r");)
#ifndef CAYENNE_LPP
  int32_t latitude, longitude = 0;
 8004800:	2300      	movs	r3, #0
 8004802:	637b      	str	r3, [r7, #52]	@ 0x34
  uint16_t altitudeGps = 0;
 8004804:	2632      	movs	r6, #50	@ 0x32
 8004806:	19bb      	adds	r3, r7, r6
 8004808:	2200      	movs	r2, #0
 800480a:	801a      	strh	r2, [r3, #0]
#endif

#ifdef USE_B_L072Z_LRWAN1
  TimerInit(&TxLedTimer, OnTimerLedEvent);
 800480c:	4a85      	ldr	r2, [pc, #532]	@ (8004a24 <Send+0x254>)
 800480e:	4b86      	ldr	r3, [pc, #536]	@ (8004a28 <Send+0x258>)
 8004810:	0011      	movs	r1, r2
 8004812:	0018      	movs	r0, r3
 8004814:	f010 fbc5 	bl	8014fa2 <TimerInit>

  TimerSetValue(&TxLedTimer, 200);
 8004818:	4b83      	ldr	r3, [pc, #524]	@ (8004a28 <Send+0x258>)
 800481a:	21c8      	movs	r1, #200	@ 0xc8
 800481c:	0018      	movs	r0, r3
 800481e:	f010 fd3b 	bl	8015298 <TimerSetValue>

  LED_On(LED_RED1) ;
 8004822:	2001      	movs	r0, #1
 8004824:	f000 fc6e 	bl	8005104 <BSP_LED_On>

  TimerStart(&TxLedTimer);
 8004828:	4b7f      	ldr	r3, [pc, #508]	@ (8004a28 <Send+0x258>)
 800482a:	0018      	movs	r0, r3
 800482c:	f010 fbd8 	bl	8014fe0 <TimerStart>
#endif

  BSP_sensor_Read(&sensor_data);
 8004830:	250c      	movs	r5, #12
 8004832:	197b      	adds	r3, r7, r5
 8004834:	0018      	movs	r0, r3
 8004836:	f7ff f89d 	bl	8003974 <BSP_sensor_Read>
  AppData.Buff[i++] = LPP_DATATYPE_DIGITAL_OUTPUT;
  AppData.Buff[i++] = AppLedStateOn;
#endif  /* REGION_XX915 */
#else  /* not CAYENNE_LPP */

  temperature = (int16_t)(sensor_data.temperature * 100);         /* in �C * 100 */
 800483a:	197b      	adds	r3, r7, r5
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	497b      	ldr	r1, [pc, #492]	@ (8004a2c <Send+0x25c>)
 8004840:	1c18      	adds	r0, r3, #0
 8004842:	f7fc f961 	bl	8000b08 <__aeabi_fmul>
 8004846:	1c03      	adds	r3, r0, #0
 8004848:	243c      	movs	r4, #60	@ 0x3c
 800484a:	193c      	adds	r4, r7, r4
 800484c:	1c18      	adds	r0, r3, #0
 800484e:	f7fc fc3d 	bl	80010cc <__aeabi_f2iz>
 8004852:	0003      	movs	r3, r0
 8004854:	8023      	strh	r3, [r4, #0]
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 8004856:	197b      	adds	r3, r7, r5
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4974      	ldr	r1, [pc, #464]	@ (8004a2c <Send+0x25c>)
 800485c:	1c18      	adds	r0, r3, #0
 800485e:	f7fc f953 	bl	8000b08 <__aeabi_fmul>
 8004862:	1c03      	adds	r3, r0, #0
 8004864:	4972      	ldr	r1, [pc, #456]	@ (8004a30 <Send+0x260>)
 8004866:	1c18      	adds	r0, r3, #0
 8004868:	f7fb ff68 	bl	800073c <__aeabi_fdiv>
 800486c:	1c03      	adds	r3, r0, #0
 800486e:	223e      	movs	r2, #62	@ 0x3e
 8004870:	18bc      	adds	r4, r7, r2
 8004872:	1c18      	adds	r0, r3, #0
 8004874:	f7fb fe60 	bl	8000538 <__aeabi_f2uiz>
 8004878:	0003      	movs	r3, r0
 800487a:	8023      	strh	r3, [r4, #0]
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800487c:	197b      	adds	r3, r7, r5
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	496b      	ldr	r1, [pc, #428]	@ (8004a30 <Send+0x260>)
 8004882:	1c18      	adds	r0, r3, #0
 8004884:	f7fc f940 	bl	8000b08 <__aeabi_fmul>
 8004888:	1c03      	adds	r3, r0, #0
 800488a:	213a      	movs	r1, #58	@ 0x3a
 800488c:	187c      	adds	r4, r7, r1
 800488e:	1c18      	adds	r0, r3, #0
 8004890:	f7fb fe52 	bl	8000538 <__aeabi_f2uiz>
 8004894:	0003      	movs	r3, r0
 8004896:	8023      	strh	r3, [r4, #0]
  latitude = sensor_data.latitude;
 8004898:	197b      	adds	r3, r7, r5
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  longitude = sensor_data.longitude;
 800489e:	197b      	adds	r3, r7, r5
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t i = 0;
 80048a4:	2300      	movs	r3, #0
 80048a6:	62bb      	str	r3, [r7, #40]	@ 0x28

  batteryLevel = LORA_GetBatteryLevel();                      /* 1 (very low) to 254 (fully charged) */
 80048a8:	2327      	movs	r3, #39	@ 0x27
 80048aa:	18fc      	adds	r4, r7, r3
 80048ac:	f000 f9e6 	bl	8004c7c <LORA_GetBatteryLevel>
 80048b0:	0003      	movs	r3, r0
 80048b2:	7023      	strb	r3, [r4, #0]

  AppData.Port = LORAWAN_APP_PORT;
 80048b4:	4b5f      	ldr	r3, [pc, #380]	@ (8004a34 <Send+0x264>)
 80048b6:	2202      	movs	r2, #2
 80048b8:	715a      	strb	r2, [r3, #5]
  AppData.Buff[i++] = batteryLevel;
  AppData.Buff[i++] = 0;
  AppData.Buff[i++] = 0;
  AppData.Buff[i++] = 0;
#else  /* not REGION_XX915 */
  AppData.Buff[i++] = AppLedStateOn;
 80048ba:	4b5e      	ldr	r3, [pc, #376]	@ (8004a34 <Send+0x264>)
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c0:	1c59      	adds	r1, r3, #1
 80048c2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80048c4:	18d3      	adds	r3, r2, r3
 80048c6:	4a5c      	ldr	r2, [pc, #368]	@ (8004a38 <Send+0x268>)
 80048c8:	7812      	ldrb	r2, [r2, #0]
 80048ca:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (pressure >> 8) & 0xFF;
 80048cc:	253e      	movs	r5, #62	@ 0x3e
 80048ce:	197b      	adds	r3, r7, r5
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	0a1b      	lsrs	r3, r3, #8
 80048d4:	b298      	uxth	r0, r3
 80048d6:	4b57      	ldr	r3, [pc, #348]	@ (8004a34 <Send+0x264>)
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048dc:	1c59      	adds	r1, r3, #1
 80048de:	62b9      	str	r1, [r7, #40]	@ 0x28
 80048e0:	18d3      	adds	r3, r2, r3
 80048e2:	b2c2      	uxtb	r2, r0
 80048e4:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = pressure & 0xFF;
 80048e6:	4b53      	ldr	r3, [pc, #332]	@ (8004a34 <Send+0x264>)
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ec:	1c59      	adds	r1, r3, #1
 80048ee:	62b9      	str	r1, [r7, #40]	@ 0x28
 80048f0:	18d3      	adds	r3, r2, r3
 80048f2:	197a      	adds	r2, r7, r5
 80048f4:	8812      	ldrh	r2, [r2, #0]
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (temperature >> 8) & 0xFF;
 80048fa:	243c      	movs	r4, #60	@ 0x3c
 80048fc:	193b      	adds	r3, r7, r4
 80048fe:	2000      	movs	r0, #0
 8004900:	5e1b      	ldrsh	r3, [r3, r0]
 8004902:	121b      	asrs	r3, r3, #8
 8004904:	b218      	sxth	r0, r3
 8004906:	4b4b      	ldr	r3, [pc, #300]	@ (8004a34 <Send+0x264>)
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490c:	1c59      	adds	r1, r3, #1
 800490e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004910:	18d3      	adds	r3, r2, r3
 8004912:	b2c2      	uxtb	r2, r0
 8004914:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = temperature & 0xFF;
 8004916:	4b47      	ldr	r3, [pc, #284]	@ (8004a34 <Send+0x264>)
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800491c:	1c59      	adds	r1, r3, #1
 800491e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004920:	18d3      	adds	r3, r2, r3
 8004922:	193a      	adds	r2, r7, r4
 8004924:	8812      	ldrh	r2, [r2, #0]
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (humidity >> 8) & 0xFF;
 800492a:	243a      	movs	r4, #58	@ 0x3a
 800492c:	193b      	adds	r3, r7, r4
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	0a1b      	lsrs	r3, r3, #8
 8004932:	b298      	uxth	r0, r3
 8004934:	4b3f      	ldr	r3, [pc, #252]	@ (8004a34 <Send+0x264>)
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493a:	1c59      	adds	r1, r3, #1
 800493c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800493e:	18d3      	adds	r3, r2, r3
 8004940:	b2c2      	uxtb	r2, r0
 8004942:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = humidity & 0xFF;
 8004944:	4b3b      	ldr	r3, [pc, #236]	@ (8004a34 <Send+0x264>)
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494a:	1c59      	adds	r1, r3, #1
 800494c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800494e:	18d3      	adds	r3, r2, r3
 8004950:	193a      	adds	r2, r7, r4
 8004952:	8812      	ldrh	r2, [r2, #0]
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = batteryLevel;
 8004958:	4b36      	ldr	r3, [pc, #216]	@ (8004a34 <Send+0x264>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495e:	1c59      	adds	r1, r3, #1
 8004960:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004962:	18d3      	adds	r3, r2, r3
 8004964:	2227      	movs	r2, #39	@ 0x27
 8004966:	18ba      	adds	r2, r7, r2
 8004968:	7812      	ldrb	r2, [r2, #0]
 800496a:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (latitude >> 16) & 0xFF;
 800496c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800496e:	1418      	asrs	r0, r3, #16
 8004970:	4b30      	ldr	r3, [pc, #192]	@ (8004a34 <Send+0x264>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004976:	1c59      	adds	r1, r3, #1
 8004978:	62b9      	str	r1, [r7, #40]	@ 0x28
 800497a:	18d3      	adds	r3, r2, r3
 800497c:	b2c2      	uxtb	r2, r0
 800497e:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (latitude >> 8) & 0xFF;
 8004980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004982:	1218      	asrs	r0, r3, #8
 8004984:	4b2b      	ldr	r3, [pc, #172]	@ (8004a34 <Send+0x264>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498a:	1c59      	adds	r1, r3, #1
 800498c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800498e:	18d3      	adds	r3, r2, r3
 8004990:	b2c2      	uxtb	r2, r0
 8004992:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = latitude & 0xFF;
 8004994:	4b27      	ldr	r3, [pc, #156]	@ (8004a34 <Send+0x264>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499a:	1c59      	adds	r1, r3, #1
 800499c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800499e:	18d3      	adds	r3, r2, r3
 80049a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (longitude >> 16) & 0xFF;
 80049a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049a8:	1418      	asrs	r0, r3, #16
 80049aa:	4b22      	ldr	r3, [pc, #136]	@ (8004a34 <Send+0x264>)
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b0:	1c59      	adds	r1, r3, #1
 80049b2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80049b4:	18d3      	adds	r3, r2, r3
 80049b6:	b2c2      	uxtb	r2, r0
 80049b8:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (longitude >> 8) & 0xFF;
 80049ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049bc:	1218      	asrs	r0, r3, #8
 80049be:	4b1d      	ldr	r3, [pc, #116]	@ (8004a34 <Send+0x264>)
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c4:	1c59      	adds	r1, r3, #1
 80049c6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80049c8:	18d3      	adds	r3, r2, r3
 80049ca:	b2c2      	uxtb	r2, r0
 80049cc:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = longitude & 0xFF;
 80049ce:	4b19      	ldr	r3, [pc, #100]	@ (8004a34 <Send+0x264>)
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d4:	1c59      	adds	r1, r3, #1
 80049d6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80049d8:	18d3      	adds	r3, r2, r3
 80049da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (altitudeGps >> 8) & 0xFF;
 80049e0:	19bb      	adds	r3, r7, r6
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	0a1b      	lsrs	r3, r3, #8
 80049e6:	b298      	uxth	r0, r3
 80049e8:	4b12      	ldr	r3, [pc, #72]	@ (8004a34 <Send+0x264>)
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ee:	1c59      	adds	r1, r3, #1
 80049f0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80049f2:	18d3      	adds	r3, r2, r3
 80049f4:	b2c2      	uxtb	r2, r0
 80049f6:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = altitudeGps & 0xFF;
 80049f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004a34 <Send+0x264>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fe:	1c59      	adds	r1, r3, #1
 8004a00:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004a02:	18d3      	adds	r3, r2, r3
 8004a04:	19ba      	adds	r2, r7, r6
 8004a06:	8812      	ldrh	r2, [r2, #0]
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	701a      	strb	r2, [r3, #0]
#endif  /* REGION_XX915 */
#endif  /* CAYENNE_LPP */
  AppData.BuffSize = i;
 8004a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	4b08      	ldr	r3, [pc, #32]	@ (8004a34 <Send+0x264>)
 8004a12:	711a      	strb	r2, [r3, #4]

  LORA_send(&AppData, LORAWAN_DEFAULT_CONFIRM_MSG_STATE);
 8004a14:	4b07      	ldr	r3, [pc, #28]	@ (8004a34 <Send+0x264>)
 8004a16:	2100      	movs	r1, #0
 8004a18:	0018      	movs	r0, r3
 8004a1a:	f00f fd8b 	bl	8014534 <LORA_send>

  /* USER CODE END 3 */
}
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	b011      	add	sp, #68	@ 0x44
 8004a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a24:	08004cf5 	.word	0x08004cf5
 8004a28:	20000300 	.word	0x20000300
 8004a2c:	42c80000 	.word	0x42c80000
 8004a30:	41200000 	.word	0x41200000
 8004a34:	20000000 	.word	0x20000000
 8004a38:	200002e6 	.word	0x200002e6

08004a3c <LORA_RxData>:


static void LORA_RxData(lora_AppData_t *AppData)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 4 */
  PRINTF("PACKET RECEIVED ON PORT %d\n\r", AppData->Port);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	795b      	ldrb	r3, [r3, #5]
 8004a48:	001a      	movs	r2, r3
 8004a4a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b44 <LORA_RxData+0x108>)
 8004a4c:	0011      	movs	r1, r2
 8004a4e:	0018      	movs	r0, r3
 8004a50:	f010 fd18 	bl	8015484 <TraceSend>
  PRINTF("PACKET RECEIVED ON PORT %d\n\r", *AppData->Buff);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	001a      	movs	r2, r3
 8004a5c:	4b39      	ldr	r3, [pc, #228]	@ (8004b44 <LORA_RxData+0x108>)
 8004a5e:	0011      	movs	r1, r2
 8004a60:	0018      	movs	r0, r3
 8004a62:	f010 fd0f 	bl	8015484 <TraceSend>
  switch (AppData->Port)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	795b      	ldrb	r3, [r3, #5]
 8004a6a:	2b63      	cmp	r3, #99	@ 0x63
 8004a6c:	d041      	beq.n	8004af2 <LORA_RxData+0xb6>
 8004a6e:	dc5f      	bgt.n	8004b30 <LORA_RxData+0xf4>
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d01e      	beq.n	8004ab2 <LORA_RxData+0x76>
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d15b      	bne.n	8004b30 <LORA_RxData+0xf4>
  {
    case 3:
      /*this port switches the class*/
      if (AppData->BuffSize == 1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	791b      	ldrb	r3, [r3, #4]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d159      	bne.n	8004b34 <LORA_RxData+0xf8>
      {
        switch (AppData->Buff[0])
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d00d      	beq.n	8004aa6 <LORA_RxData+0x6a>
 8004a8a:	dc10      	bgt.n	8004aae <LORA_RxData+0x72>
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <LORA_RxData+0x5a>
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d004      	beq.n	8004a9e <LORA_RxData+0x62>
          {
            LORA_RequestClass(CLASS_C);
            break;
          }
          default:
            break;
 8004a94:	e00b      	b.n	8004aae <LORA_RxData+0x72>
            LORA_RequestClass(CLASS_A);
 8004a96:	2000      	movs	r0, #0
 8004a98:	f00f fdba 	bl	8014610 <LORA_RequestClass>
            break;
 8004a9c:	e008      	b.n	8004ab0 <LORA_RxData+0x74>
            LORA_RequestClass(CLASS_B);
 8004a9e:	2001      	movs	r0, #1
 8004aa0:	f00f fdb6 	bl	8014610 <LORA_RequestClass>
            break;
 8004aa4:	e004      	b.n	8004ab0 <LORA_RxData+0x74>
            LORA_RequestClass(CLASS_C);
 8004aa6:	2002      	movs	r0, #2
 8004aa8:	f00f fdb2 	bl	8014610 <LORA_RequestClass>
            break;
 8004aac:	e000      	b.n	8004ab0 <LORA_RxData+0x74>
            break;
 8004aae:	46c0      	nop			@ (mov r8, r8)
        }
      }
      break;
 8004ab0:	e040      	b.n	8004b34 <LORA_RxData+0xf8>
    case LORAWAN_APP_PORT:
      if (AppData->BuffSize == 1)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	791b      	ldrb	r3, [r3, #4]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d13e      	bne.n	8004b38 <LORA_RxData+0xfc>
      {
        AppLedStateOn = AppData->Buff[0] & 0x01;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	4b20      	ldr	r3, [pc, #128]	@ (8004b48 <LORA_RxData+0x10c>)
 8004ac8:	701a      	strb	r2, [r3, #0]
        if (AppLedStateOn == RESET)
 8004aca:	4b1f      	ldr	r3, [pc, #124]	@ (8004b48 <LORA_RxData+0x10c>)
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d107      	bne.n	8004ae2 <LORA_RxData+0xa6>
        {
          PRINTF("LED OFF\n\r");
 8004ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8004b4c <LORA_RxData+0x110>)
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f010 fcd5 	bl	8015484 <TraceSend>
          LED_Off(LED_BLUE) ;
 8004ada:	2002      	movs	r0, #2
 8004adc:	f000 fb2e 	bl	800513c <BSP_LED_Off>
        {
          PRINTF("LED ON\n\r");
          LED_On(LED_BLUE) ;
        }
      }
      break;
 8004ae0:	e02a      	b.n	8004b38 <LORA_RxData+0xfc>
          PRINTF("LED ON\n\r");
 8004ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8004b50 <LORA_RxData+0x114>)
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f010 fccd 	bl	8015484 <TraceSend>
          LED_On(LED_BLUE) ;
 8004aea:	2002      	movs	r0, #2
 8004aec:	f000 fb0a 	bl	8005104 <BSP_LED_On>
      break;
 8004af0:	e022      	b.n	8004b38 <LORA_RxData+0xfc>
    case LPP_APP_PORT:
    {
      AppLedStateOn = (AppData->Buff[2] == 100) ?  0x01 : 0x00;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3302      	adds	r3, #2
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	3b64      	subs	r3, #100	@ 0x64
 8004afc:	425a      	negs	r2, r3
 8004afe:	4153      	adcs	r3, r2
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	001a      	movs	r2, r3
 8004b04:	4b10      	ldr	r3, [pc, #64]	@ (8004b48 <LORA_RxData+0x10c>)
 8004b06:	701a      	strb	r2, [r3, #0]
      if (AppLedStateOn == RESET)
 8004b08:	4b0f      	ldr	r3, [pc, #60]	@ (8004b48 <LORA_RxData+0x10c>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d107      	bne.n	8004b20 <LORA_RxData+0xe4>
      {
        PRINTF("LED OFF\n\r");
 8004b10:	4b0e      	ldr	r3, [pc, #56]	@ (8004b4c <LORA_RxData+0x110>)
 8004b12:	0018      	movs	r0, r3
 8004b14:	f010 fcb6 	bl	8015484 <TraceSend>
        LED_Off(LED_BLUE) ;
 8004b18:	2002      	movs	r0, #2
 8004b1a:	f000 fb0f 	bl	800513c <BSP_LED_Off>
      else
      {
        PRINTF("LED ON\n\r");
        LED_On(LED_BLUE) ;
      }
      break;
 8004b1e:	e00c      	b.n	8004b3a <LORA_RxData+0xfe>
        PRINTF("LED ON\n\r");
 8004b20:	4b0b      	ldr	r3, [pc, #44]	@ (8004b50 <LORA_RxData+0x114>)
 8004b22:	0018      	movs	r0, r3
 8004b24:	f010 fcae 	bl	8015484 <TraceSend>
        LED_On(LED_BLUE) ;
 8004b28:	2002      	movs	r0, #2
 8004b2a:	f000 faeb 	bl	8005104 <BSP_LED_On>
      break;
 8004b2e:	e004      	b.n	8004b3a <LORA_RxData+0xfe>
    }
    default:
      break;
 8004b30:	46c0      	nop			@ (mov r8, r8)
 8004b32:	e002      	b.n	8004b3a <LORA_RxData+0xfe>
      break;
 8004b34:	46c0      	nop			@ (mov r8, r8)
 8004b36:	e000      	b.n	8004b3a <LORA_RxData+0xfe>
      break;
 8004b38:	46c0      	nop			@ (mov r8, r8)
  }

  /* USER CODE END 4 */
}
 8004b3a:	46c0      	nop			@ (mov r8, r8)
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	b002      	add	sp, #8
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	46c0      	nop			@ (mov r8, r8)
 8004b44:	0801a6c4 	.word	0x0801a6c4
 8004b48:	200002e6 	.word	0x200002e6
 8004b4c:	0801a6e4 	.word	0x0801a6e4
 8004b50:	0801a6f0 	.word	0x0801a6f0

08004b54 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /*Wait for next tx slot*/
  TimerStart(&TxTimer);
 8004b5c:	4b05      	ldr	r3, [pc, #20]	@ (8004b74 <OnTxTimerEvent+0x20>)
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f010 fa3e 	bl	8014fe0 <TimerStart>

  AppProcessRequest = LORA_SET;
 8004b64:	4b04      	ldr	r3, [pc, #16]	@ (8004b78 <OnTxTimerEvent+0x24>)
 8004b66:	2201      	movs	r2, #1
 8004b68:	701a      	strb	r2, [r3, #0]
}
 8004b6a:	46c0      	nop			@ (mov r8, r8)
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	b002      	add	sp, #8
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	46c0      	nop			@ (mov r8, r8)
 8004b74:	200002e8 	.word	0x200002e8
 8004b78:	200002e5 	.word	0x200002e5

08004b7c <LoraStartTx>:

static void LoraStartTx(TxEventType_t EventType)
{
 8004b7c:	b590      	push	{r4, r7, lr}
 8004b7e:	b089      	sub	sp, #36	@ 0x24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	0002      	movs	r2, r0
 8004b84:	1dfb      	adds	r3, r7, #7
 8004b86:	701a      	strb	r2, [r3, #0]
  if (EventType == TX_ON_TIMER)
 8004b88:	1dfb      	adds	r3, r7, #7
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10f      	bne.n	8004bb0 <LoraStartTx+0x34>
  {
    /* send everytime timer elapses */
    TimerInit(&TxTimer, OnTxTimerEvent);
 8004b90:	4a18      	ldr	r2, [pc, #96]	@ (8004bf4 <LoraStartTx+0x78>)
 8004b92:	4b19      	ldr	r3, [pc, #100]	@ (8004bf8 <LoraStartTx+0x7c>)
 8004b94:	0011      	movs	r1, r2
 8004b96:	0018      	movs	r0, r3
 8004b98:	f010 fa03 	bl	8014fa2 <TimerInit>
    TimerSetValue(&TxTimer,  APP_TX_DUTYCYCLE);
 8004b9c:	4a17      	ldr	r2, [pc, #92]	@ (8004bfc <LoraStartTx+0x80>)
 8004b9e:	4b16      	ldr	r3, [pc, #88]	@ (8004bf8 <LoraStartTx+0x7c>)
 8004ba0:	0011      	movs	r1, r2
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f010 fb78 	bl	8015298 <TimerSetValue>
    OnTxTimerEvent(NULL);
 8004ba8:	2000      	movs	r0, #0
 8004baa:	f7ff ffd3 	bl	8004b54 <OnTxTimerEvent>
    initStruct.Speed = GPIO_SPEED_HIGH;

    HW_GPIO_Init(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, &initStruct);
    HW_GPIO_SetIrq(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, 0, Send);
  }
}
 8004bae:	e01c      	b.n	8004bea <LoraStartTx+0x6e>
    GPIO_InitTypeDef initStruct = {0};
 8004bb0:	240c      	movs	r4, #12
 8004bb2:	193b      	adds	r3, r7, r4
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	2314      	movs	r3, #20
 8004bb8:	001a      	movs	r2, r3
 8004bba:	2100      	movs	r1, #0
 8004bbc:	f014 ff86 	bl	8019acc <memset>
    initStruct.Mode = GPIO_MODE_IT_RISING;
 8004bc0:	193b      	adds	r3, r7, r4
 8004bc2:	4a0f      	ldr	r2, [pc, #60]	@ (8004c00 <LoraStartTx+0x84>)
 8004bc4:	605a      	str	r2, [r3, #4]
    initStruct.Pull = GPIO_PULLUP;
 8004bc6:	193b      	adds	r3, r7, r4
 8004bc8:	2201      	movs	r2, #1
 8004bca:	609a      	str	r2, [r3, #8]
    initStruct.Speed = GPIO_SPEED_HIGH;
 8004bcc:	193b      	adds	r3, r7, r4
 8004bce:	2203      	movs	r2, #3
 8004bd0:	60da      	str	r2, [r3, #12]
    HW_GPIO_Init(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, &initStruct);
 8004bd2:	193b      	adds	r3, r7, r4
 8004bd4:	480b      	ldr	r0, [pc, #44]	@ (8004c04 <LoraStartTx+0x88>)
 8004bd6:	001a      	movs	r2, r3
 8004bd8:	2104      	movs	r1, #4
 8004bda:	f7fe ff57 	bl	8003a8c <HW_GPIO_Init>
    HW_GPIO_SetIrq(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, 0, Send);
 8004bde:	4b0a      	ldr	r3, [pc, #40]	@ (8004c08 <LoraStartTx+0x8c>)
 8004be0:	4808      	ldr	r0, [pc, #32]	@ (8004c04 <LoraStartTx+0x88>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	2104      	movs	r1, #4
 8004be6:	f7fe ffc7 	bl	8003b78 <HW_GPIO_SetIrq>
}
 8004bea:	46c0      	nop			@ (mov r8, r8)
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b009      	add	sp, #36	@ 0x24
 8004bf0:	bd90      	pop	{r4, r7, pc}
 8004bf2:	46c0      	nop			@ (mov r8, r8)
 8004bf4:	08004b55 	.word	0x08004b55
 8004bf8:	200002e8 	.word	0x200002e8
 8004bfc:	000493e0 	.word	0x000493e0
 8004c00:	10110000 	.word	0x10110000
 8004c04:	50000400 	.word	0x50000400
 8004c08:	080047d1 	.word	0x080047d1

08004c0c <LORA_ConfirmClass>:

static void LORA_ConfirmClass(DeviceClass_t Class)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	0002      	movs	r2, r0
 8004c14:	1dfb      	adds	r3, r7, #7
 8004c16:	701a      	strb	r2, [r3, #0]
  PRINTF("switch to class %c done\n\r", "ABC"[Class]);
 8004c18:	1dfb      	adds	r3, r7, #7
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8004c4c <LORA_ConfirmClass+0x40>)
 8004c1e:	5cd3      	ldrb	r3, [r2, r3]
 8004c20:	001a      	movs	r2, r3
 8004c22:	4b0b      	ldr	r3, [pc, #44]	@ (8004c50 <LORA_ConfirmClass+0x44>)
 8004c24:	0011      	movs	r1, r2
 8004c26:	0018      	movs	r0, r3
 8004c28:	f010 fc2c 	bl	8015484 <TraceSend>

  /*Optionnal*/
  /*informs the server that switch has occurred ASAP*/
  AppData.BuffSize = 0;
 8004c2c:	4b09      	ldr	r3, [pc, #36]	@ (8004c54 <LORA_ConfirmClass+0x48>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	711a      	strb	r2, [r3, #4]
  AppData.Port = LORAWAN_APP_PORT;
 8004c32:	4b08      	ldr	r3, [pc, #32]	@ (8004c54 <LORA_ConfirmClass+0x48>)
 8004c34:	2202      	movs	r2, #2
 8004c36:	715a      	strb	r2, [r3, #5]

  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
 8004c38:	4b06      	ldr	r3, [pc, #24]	@ (8004c54 <LORA_ConfirmClass+0x48>)
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f00f fc79 	bl	8014534 <LORA_send>
}
 8004c42:	46c0      	nop			@ (mov r8, r8)
 8004c44:	46bd      	mov	sp, r7
 8004c46:	b002      	add	sp, #8
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	46c0      	nop			@ (mov r8, r8)
 8004c4c:	0801a718 	.word	0x0801a718
 8004c50:	0801a6fc 	.word	0x0801a6fc
 8004c54:	20000000 	.word	0x20000000

08004c58 <LORA_TxNeeded>:

static void LORA_TxNeeded(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  AppData.BuffSize = 0;
 8004c5c:	4b06      	ldr	r3, [pc, #24]	@ (8004c78 <LORA_TxNeeded+0x20>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	711a      	strb	r2, [r3, #4]
  AppData.Port = LORAWAN_APP_PORT;
 8004c62:	4b05      	ldr	r3, [pc, #20]	@ (8004c78 <LORA_TxNeeded+0x20>)
 8004c64:	2202      	movs	r2, #2
 8004c66:	715a      	strb	r2, [r3, #5]

  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
 8004c68:	4b03      	ldr	r3, [pc, #12]	@ (8004c78 <LORA_TxNeeded+0x20>)
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	f00f fc61 	bl	8014534 <LORA_send>
}
 8004c72:	46c0      	nop			@ (mov r8, r8)
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20000000 	.word	0x20000000

08004c7c <LORA_GetBatteryLevel>:
  * @brief This function return the battery level
  * @param none
  * @retval the battery level  1 (very low) to 254 (fully charged)
  */
uint8_t LORA_GetBatteryLevel(void)
{
 8004c7c:	b590      	push	{r4, r7, lr}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
  uint16_t batteryLevelmV;
  uint8_t batteryLevel = 0;
 8004c82:	1dfb      	adds	r3, r7, #7
 8004c84:	2200      	movs	r2, #0
 8004c86:	701a      	strb	r2, [r3, #0]

  batteryLevelmV = HW_GetBatteryLevel();
 8004c88:	1d3c      	adds	r4, r7, #4
 8004c8a:	f7fe fc77 	bl	800357c <HW_GetBatteryLevel>
 8004c8e:	0003      	movs	r3, r0
 8004c90:	8023      	strh	r3, [r4, #0]


  /* Convert batterey level from mV to linea scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8004c92:	1d3b      	adds	r3, r7, #4
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	4a15      	ldr	r2, [pc, #84]	@ (8004cec <LORA_GetBatteryLevel+0x70>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d903      	bls.n	8004ca4 <LORA_GetBatteryLevel+0x28>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8004c9c:	1dfb      	adds	r3, r7, #7
 8004c9e:	22fe      	movs	r2, #254	@ 0xfe
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	e01d      	b.n	8004ce0 <LORA_GetBatteryLevel+0x64>
  }
  else if (batteryLevelmV < VDD_MIN)
 8004ca4:	1d3b      	adds	r3, r7, #4
 8004ca6:	881a      	ldrh	r2, [r3, #0]
 8004ca8:	23e1      	movs	r3, #225	@ 0xe1
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d203      	bcs.n	8004cb8 <LORA_GetBatteryLevel+0x3c>
  {
    batteryLevel = 0;
 8004cb0:	1dfb      	adds	r3, r7, #7
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	701a      	strb	r2, [r3, #0]
 8004cb6:	e013      	b.n	8004ce0 <LORA_GetBatteryLevel+0x64>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8004cb8:	1d3b      	adds	r3, r7, #4
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	4a0c      	ldr	r2, [pc, #48]	@ (8004cf0 <LORA_GetBatteryLevel+0x74>)
 8004cbe:	4694      	mov	ip, r2
 8004cc0:	4463      	add	r3, ip
 8004cc2:	001a      	movs	r2, r3
 8004cc4:	0013      	movs	r3, r2
 8004cc6:	01db      	lsls	r3, r3, #7
 8004cc8:	1a9b      	subs	r3, r3, r2
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	001a      	movs	r2, r3
 8004cce:	2396      	movs	r3, #150	@ 0x96
 8004cd0:	00d9      	lsls	r1, r3, #3
 8004cd2:	0010      	movs	r0, r2
 8004cd4:	f7fb fa22 	bl	800011c <__udivsi3>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	001a      	movs	r2, r3
 8004cdc:	1dfb      	adds	r3, r7, #7
 8004cde:	701a      	strb	r2, [r3, #0]
  }

  return batteryLevel;
 8004ce0:	1dfb      	adds	r3, r7, #7
 8004ce2:	781b      	ldrb	r3, [r3, #0]
}
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	b003      	add	sp, #12
 8004cea:	bd90      	pop	{r4, r7, pc}
 8004cec:	00000bb8 	.word	0x00000bb8
 8004cf0:	fffff8f8 	.word	0xfffff8f8

08004cf4 <OnTimerLedEvent>:

#ifdef USE_B_L072Z_LRWAN1
static void OnTimerLedEvent(void *context)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  LED_Off(LED_RED1) ;
 8004cfc:	2001      	movs	r0, #1
 8004cfe:	f000 fa1d 	bl	800513c <BSP_LED_Off>
}
 8004d02:	46c0      	nop			@ (mov r8, r8)
 8004d04:	46bd      	mov	sp, r7
 8004d06:	b002      	add	sp, #8
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <vcom_Init>:

static void (*TxCpltCallback)(void);
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void vcom_Init(void (*TxCb)(void))
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]

  /*Record Tx complete for DMA*/
  TxCpltCallback = TxCb;
 8004d14:	4b12      	ldr	r3, [pc, #72]	@ (8004d60 <vcom_Init+0x54>)
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	601a      	str	r2, [r3, #0]
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;
 8004d1a:	4b12      	ldr	r3, [pc, #72]	@ (8004d64 <vcom_Init+0x58>)
 8004d1c:	4a12      	ldr	r2, [pc, #72]	@ (8004d68 <vcom_Init+0x5c>)
 8004d1e:	601a      	str	r2, [r3, #0]

  UartHandle.Init.BaudRate   = 115200;
 8004d20:	4b10      	ldr	r3, [pc, #64]	@ (8004d64 <vcom_Init+0x58>)
 8004d22:	22e1      	movs	r2, #225	@ 0xe1
 8004d24:	0252      	lsls	r2, r2, #9
 8004d26:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8004d28:	4b0e      	ldr	r3, [pc, #56]	@ (8004d64 <vcom_Init+0x58>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8004d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d64 <vcom_Init+0x58>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8004d34:	4b0b      	ldr	r3, [pc, #44]	@ (8004d64 <vcom_Init+0x58>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8004d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d64 <vcom_Init+0x58>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX;
 8004d40:	4b08      	ldr	r3, [pc, #32]	@ (8004d64 <vcom_Init+0x58>)
 8004d42:	2208      	movs	r2, #8
 8004d44:	615a      	str	r2, [r3, #20]

  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8004d46:	4b07      	ldr	r3, [pc, #28]	@ (8004d64 <vcom_Init+0x58>)
 8004d48:	0018      	movs	r0, r3
 8004d4a:	f013 ff33 	bl	8018bb4 <HAL_UART_Init>
 8004d4e:	1e03      	subs	r3, r0, #0
 8004d50:	d001      	beq.n	8004d56 <vcom_Init+0x4a>
  {
    /* Initialization Error */
    Error_Handler();
 8004d52:	f7fe fe91 	bl	8003a78 <Error_Handler>
  }
}
 8004d56:	46c0      	nop			@ (mov r8, r8)
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	b002      	add	sp, #8
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	46c0      	nop			@ (mov r8, r8)
 8004d60:	20000398 	.word	0x20000398
 8004d64:	20000318 	.word	0x20000318
 8004d68:	40004400 	.word	0x40004400

08004d6c <vcom_Trace>:

void vcom_Trace(uint8_t *p_data, uint16_t size)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	000a      	movs	r2, r1
 8004d76:	1cbb      	adds	r3, r7, #2
 8004d78:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 8004d7a:	1cbb      	adds	r3, r7, #2
 8004d7c:	881a      	ldrh	r2, [r3, #0]
 8004d7e:	6879      	ldr	r1, [r7, #4]
 8004d80:	4b03      	ldr	r3, [pc, #12]	@ (8004d90 <vcom_Trace+0x24>)
 8004d82:	0018      	movs	r0, r3
 8004d84:	f013 ff6a 	bl	8018c5c <HAL_UART_Transmit_DMA>
}
 8004d88:	46c0      	nop			@ (mov r8, r8)
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	b002      	add	sp, #8
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	20000318 	.word	0x20000318

08004d94 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* buffer transmission complete*/
  TxCpltCallback();
 8004d9c:	4b03      	ldr	r3, [pc, #12]	@ (8004dac <HAL_UART_TxCpltCallback+0x18>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4798      	blx	r3
}
 8004da2:	46c0      	nop			@ (mov r8, r8)
 8004da4:	46bd      	mov	sp, r7
 8004da6:	b002      	add	sp, #8
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	46c0      	nop			@ (mov r8, r8)
 8004dac:	20000398 	.word	0x20000398

08004db0 <vcom_DMA_TX_IRQHandler>:

void vcom_DMA_TX_IRQHandler(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(UartHandle.hdmatx);
 8004db4:	4b03      	ldr	r3, [pc, #12]	@ (8004dc4 <vcom_DMA_TX_IRQHandler+0x14>)
 8004db6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004db8:	0018      	movs	r0, r3
 8004dba:	f011 fc56 	bl	801666a <HAL_DMA_IRQHandler>
}
 8004dbe:	46c0      	nop			@ (mov r8, r8)
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	20000318 	.word	0x20000318

08004dc8 <vcom_IRQHandler>:

void vcom_IRQHandler(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UartHandle);
 8004dcc:	4b03      	ldr	r3, [pc, #12]	@ (8004ddc <vcom_IRQHandler+0x14>)
 8004dce:	0018      	movs	r0, r3
 8004dd0:	f013 ffd4 	bl	8018d7c <HAL_UART_IRQHandler>
}
 8004dd4:	46c0      	nop			@ (mov r8, r8)
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	46c0      	nop			@ (mov r8, r8)
 8004ddc:	20000318 	.word	0x20000318

08004de0 <HAL_UART_MspInit>:
{
  HAL_UART_DeInit(&UartHandle);
}

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USARTx)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a34      	ldr	r2, [pc, #208]	@ (8004ec0 <HAL_UART_MspInit+0xe0>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d161      	bne.n	8004eb6 <HAL_UART_MspInit+0xd6>
    static DMA_HandleTypeDef hdma_tx;


    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 8004df2:	4b34      	ldr	r3, [pc, #208]	@ (8004ec4 <HAL_UART_MspInit+0xe4>)
 8004df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004df6:	4b33      	ldr	r3, [pc, #204]	@ (8004ec4 <HAL_UART_MspInit+0xe4>)
 8004df8:	2101      	movs	r1, #1
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004dfe:	4b31      	ldr	r3, [pc, #196]	@ (8004ec4 <HAL_UART_MspInit+0xe4>)
 8004e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e02:	2201      	movs	r2, #1
 8004e04:	4013      	ands	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	697b      	ldr	r3, [r7, #20]
    USARTx_RX_GPIO_CLK_ENABLE();
 8004e0a:	4b2e      	ldr	r3, [pc, #184]	@ (8004ec4 <HAL_UART_MspInit+0xe4>)
 8004e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8004ec4 <HAL_UART_MspInit+0xe4>)
 8004e10:	2101      	movs	r1, #1
 8004e12:	430a      	orrs	r2, r1
 8004e14:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004e16:	4b2b      	ldr	r3, [pc, #172]	@ (8004ec4 <HAL_UART_MspInit+0xe4>)
 8004e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
 8004e20:	693b      	ldr	r3, [r7, #16]

    /* Enable USARTx clock */
    USARTx_CLK_ENABLE();
 8004e22:	4b28      	ldr	r3, [pc, #160]	@ (8004ec4 <HAL_UART_MspInit+0xe4>)
 8004e24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e26:	4b27      	ldr	r3, [pc, #156]	@ (8004ec4 <HAL_UART_MspInit+0xe4>)
 8004e28:	2180      	movs	r1, #128	@ 0x80
 8004e2a:	0289      	lsls	r1, r1, #10
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable DMA clock */
    DMAx_CLK_ENABLE();
 8004e30:	4b24      	ldr	r3, [pc, #144]	@ (8004ec4 <HAL_UART_MspInit+0xe4>)
 8004e32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e34:	4b23      	ldr	r3, [pc, #140]	@ (8004ec4 <HAL_UART_MspInit+0xe4>)
 8004e36:	2101      	movs	r1, #1
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e3c:	4b21      	ldr	r3, [pc, #132]	@ (8004ec4 <HAL_UART_MspInit+0xe4>)
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e40:	2201      	movs	r2, #1
 8004e42:	4013      	ands	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	68fb      	ldr	r3, [r7, #12]

    /*##-2- Configure peripheral GPIO ##########################################*/
    /* UART  pin configuration  */
    vcom_IoInit();
 8004e48:	f000 f842 	bl	8004ed0 <vcom_IoInit>

    /*##-3- Configure the DMA ##################################################*/
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8004e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec8 <HAL_UART_MspInit+0xe8>)
 8004e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8004ecc <HAL_UART_MspInit+0xec>)
 8004e50:	601a      	str	r2, [r3, #0]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8004e52:	4b1d      	ldr	r3, [pc, #116]	@ (8004ec8 <HAL_UART_MspInit+0xe8>)
 8004e54:	2210      	movs	r2, #16
 8004e56:	609a      	str	r2, [r3, #8]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004e58:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec8 <HAL_UART_MspInit+0xe8>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	60da      	str	r2, [r3, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8004e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec8 <HAL_UART_MspInit+0xe8>)
 8004e60:	2280      	movs	r2, #128	@ 0x80
 8004e62:	611a      	str	r2, [r3, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e64:	4b18      	ldr	r3, [pc, #96]	@ (8004ec8 <HAL_UART_MspInit+0xe8>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	615a      	str	r2, [r3, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8004e6a:	4b17      	ldr	r3, [pc, #92]	@ (8004ec8 <HAL_UART_MspInit+0xe8>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	619a      	str	r2, [r3, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 8004e70:	4b15      	ldr	r3, [pc, #84]	@ (8004ec8 <HAL_UART_MspInit+0xe8>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	61da      	str	r2, [r3, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8004e76:	4b14      	ldr	r3, [pc, #80]	@ (8004ec8 <HAL_UART_MspInit+0xe8>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	621a      	str	r2, [r3, #32]
#ifndef STM32L152xE
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8004e7c:	4b12      	ldr	r3, [pc, #72]	@ (8004ec8 <HAL_UART_MspInit+0xe8>)
 8004e7e:	2204      	movs	r2, #4
 8004e80:	605a      	str	r2, [r3, #4]
#endif
    HAL_DMA_Init(&hdma_tx);
 8004e82:	4b11      	ldr	r3, [pc, #68]	@ (8004ec8 <HAL_UART_MspInit+0xe8>)
 8004e84:	0018      	movs	r0, r3
 8004e86:	f011 facb 	bl	8016420 <HAL_DMA_Init>

    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a0e      	ldr	r2, [pc, #56]	@ (8004ec8 <HAL_UART_MspInit+0xe8>)
 8004e8e:	669a      	str	r2, [r3, #104]	@ 0x68
 8004e90:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec8 <HAL_UART_MspInit+0xe8>)
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	629a      	str	r2, [r3, #40]	@ 0x28

    /*##-4- Configure the NVIC for DMA #########################################*/
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8004e96:	2201      	movs	r2, #1
 8004e98:	2100      	movs	r1, #0
 8004e9a:	200b      	movs	r0, #11
 8004e9c:	f011 fa9a 	bl	80163d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8004ea0:	200b      	movs	r0, #11
 8004ea2:	f011 faac 	bl	80163fe <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	201c      	movs	r0, #28
 8004eac:	f011 fa92 	bl	80163d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8004eb0:	201c      	movs	r0, #28
 8004eb2:	f011 faa4 	bl	80163fe <HAL_NVIC_EnableIRQ>
  }
}
 8004eb6:	46c0      	nop			@ (mov r8, r8)
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	b006      	add	sp, #24
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	46c0      	nop			@ (mov r8, r8)
 8004ec0:	40004400 	.word	0x40004400
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	2000039c 	.word	0x2000039c
 8004ecc:	40020080 	.word	0x40020080

08004ed0 <vcom_IoInit>:
  /*##-4- Disable the NVIC for DMA ###########################################*/
  HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
}

void vcom_IoInit(void)
{
 8004ed0:	b590      	push	{r4, r7, lr}
 8004ed2:	b089      	sub	sp, #36	@ 0x24
 8004ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8004ed6:	240c      	movs	r4, #12
 8004ed8:	193b      	adds	r3, r7, r4
 8004eda:	0018      	movs	r0, r3
 8004edc:	2314      	movs	r3, #20
 8004ede:	001a      	movs	r2, r3
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	f014 fdf3 	bl	8019acc <memset>
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8004ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8004f64 <vcom_IoInit+0x94>)
 8004ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eea:	4b1e      	ldr	r3, [pc, #120]	@ (8004f64 <vcom_IoInit+0x94>)
 8004eec:	2101      	movs	r1, #1
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004ef2:	4b1c      	ldr	r3, [pc, #112]	@ (8004f64 <vcom_IoInit+0x94>)
 8004ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	4013      	ands	r3, r2
 8004efa:	60bb      	str	r3, [r7, #8]
 8004efc:	68bb      	ldr	r3, [r7, #8]
  USARTx_RX_GPIO_CLK_ENABLE();
 8004efe:	4b19      	ldr	r3, [pc, #100]	@ (8004f64 <vcom_IoInit+0x94>)
 8004f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f02:	4b18      	ldr	r3, [pc, #96]	@ (8004f64 <vcom_IoInit+0x94>)
 8004f04:	2101      	movs	r1, #1
 8004f06:	430a      	orrs	r2, r1
 8004f08:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004f0a:	4b16      	ldr	r3, [pc, #88]	@ (8004f64 <vcom_IoInit+0x94>)
 8004f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0e:	2201      	movs	r2, #1
 8004f10:	4013      	ands	r3, r2
 8004f12:	607b      	str	r3, [r7, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8004f16:	193b      	adds	r3, r7, r4
 8004f18:	2204      	movs	r2, #4
 8004f1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004f1c:	193b      	adds	r3, r7, r4
 8004f1e:	2202      	movs	r2, #2
 8004f20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004f22:	193b      	adds	r3, r7, r4
 8004f24:	2200      	movs	r2, #0
 8004f26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8004f28:	193b      	adds	r3, r7, r4
 8004f2a:	2203      	movs	r2, #3
 8004f2c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8004f2e:	193b      	adds	r3, r7, r4
 8004f30:	2204      	movs	r2, #4
 8004f32:	611a      	str	r2, [r3, #16]

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8004f34:	193a      	adds	r2, r7, r4
 8004f36:	23a0      	movs	r3, #160	@ 0xa0
 8004f38:	05db      	lsls	r3, r3, #23
 8004f3a:	0011      	movs	r1, r2
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f011 fc71 	bl	8016824 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8004f42:	193b      	adds	r3, r7, r4
 8004f44:	2208      	movs	r2, #8
 8004f46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8004f48:	193b      	adds	r3, r7, r4
 8004f4a:	2204      	movs	r2, #4
 8004f4c:	611a      	str	r2, [r3, #16]

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8004f4e:	193a      	adds	r2, r7, r4
 8004f50:	23a0      	movs	r3, #160	@ 0xa0
 8004f52:	05db      	lsls	r3, r3, #23
 8004f54:	0011      	movs	r1, r2
 8004f56:	0018      	movs	r0, r3
 8004f58:	f011 fc64 	bl	8016824 <HAL_GPIO_Init>
}
 8004f5c:	46c0      	nop			@ (mov r8, r8)
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	b009      	add	sp, #36	@ 0x24
 8004f62:	bd90      	pop	{r4, r7, pc}
 8004f64:	40021000 	.word	0x40021000

08004f68 <vcom_IoDeInit>:

void vcom_IoDeInit(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8004f6e:	1d3b      	adds	r3, r7, #4
 8004f70:	0018      	movs	r0, r3
 8004f72:	2314      	movs	r3, #20
 8004f74:	001a      	movs	r2, r3
 8004f76:	2100      	movs	r1, #0
 8004f78:	f014 fda8 	bl	8019acc <memset>

  USARTx_TX_GPIO_CLK_ENABLE();
 8004f7c:	4b14      	ldr	r3, [pc, #80]	@ (8004fd0 <vcom_IoDeInit+0x68>)
 8004f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f80:	4b13      	ldr	r3, [pc, #76]	@ (8004fd0 <vcom_IoDeInit+0x68>)
 8004f82:	2101      	movs	r1, #1
 8004f84:	430a      	orrs	r2, r1
 8004f86:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004f88:	4b11      	ldr	r3, [pc, #68]	@ (8004fd0 <vcom_IoDeInit+0x68>)
 8004f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	4013      	ands	r3, r2
 8004f90:	603b      	str	r3, [r7, #0]
 8004f92:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8004f94:	1d3b      	adds	r3, r7, #4
 8004f96:	2203      	movs	r2, #3
 8004f98:	605a      	str	r2, [r3, #4]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004f9a:	1d3b      	adds	r3, r7, #4
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	609a      	str	r2, [r3, #8]

  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
 8004fa0:	1d3b      	adds	r3, r7, #4
 8004fa2:	2204      	movs	r2, #4
 8004fa4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 8004fa6:	1d3a      	adds	r2, r7, #4
 8004fa8:	23a0      	movs	r3, #160	@ 0xa0
 8004faa:	05db      	lsls	r3, r3, #23
 8004fac:	0011      	movs	r1, r2
 8004fae:	0018      	movs	r0, r3
 8004fb0:	f011 fc38 	bl	8016824 <HAL_GPIO_Init>

  GPIO_InitStructure.Pin =  USARTx_RX_PIN ;
 8004fb4:	1d3b      	adds	r3, r7, #4
 8004fb6:	2208      	movs	r2, #8
 8004fb8:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStructure);
 8004fba:	1d3a      	adds	r2, r7, #4
 8004fbc:	23a0      	movs	r3, #160	@ 0xa0
 8004fbe:	05db      	lsls	r3, r3, #23
 8004fc0:	0011      	movs	r1, r2
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	f011 fc2e 	bl	8016824 <HAL_GPIO_Init>
}
 8004fc8:	46c0      	nop			@ (mov r8, r8)
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	b006      	add	sp, #24
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40021000 	.word	0x40021000

08004fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004fd4:	480d      	ldr	r0, [pc, #52]	@ (800500c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004fd6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8004fd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004fda:	e003      	b.n	8004fe4 <LoopCopyDataInit>

08004fdc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8005010 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8004fde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004fe0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004fe2:	3104      	adds	r1, #4

08004fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8004fe4:	480b      	ldr	r0, [pc, #44]	@ (8005014 <LoopForever+0xa>)
  ldr  r3, =_edata
 8004fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8005018 <LoopForever+0xe>)
  adds  r2, r0, r1
 8004fe8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004fea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004fec:	d3f6      	bcc.n	8004fdc <CopyDataInit>
  ldr  r2, =_sbss
 8004fee:	4a0b      	ldr	r2, [pc, #44]	@ (800501c <LoopForever+0x12>)
  b  LoopFillZerobss
 8004ff0:	e002      	b.n	8004ff8 <LoopFillZerobss>

08004ff2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8004ff2:	2300      	movs	r3, #0
  str  r3, [r2]
 8004ff4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ff6:	3204      	adds	r2, #4

08004ff8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8004ff8:	4b09      	ldr	r3, [pc, #36]	@ (8005020 <LoopForever+0x16>)
  cmp  r2, r3
 8004ffa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004ffc:	d3f9      	bcc.n	8004ff2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004ffe:	f002 fe6b 	bl	8007cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005002:	f014 fd6b 	bl	8019adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005006:	f7ff fb79 	bl	80046fc <main>

0800500a <LoopForever>:

LoopForever:
    b LoopForever
 800500a:	e7fe      	b.n	800500a <LoopForever>
   ldr   r0, =_estack
 800500c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8005010:	0801b708 	.word	0x0801b708
  ldr  r0, =_sdata
 8005014:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005018:	20000124 	.word	0x20000124
  ldr  r2, =_sbss
 800501c:	20000124 	.word	0x20000124
  ldr  r3, = _ebss
 8005020:	20001648 	.word	0x20001648

08005024 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005024:	e7fe      	b.n	8005024 <ADC1_COMP_IRQHandler>
	...

08005028 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b08c      	sub	sp, #48	@ 0x30
 800502c:	af00      	add	r7, sp, #0
 800502e:	0002      	movs	r2, r0
 8005030:	1dfb      	adds	r3, r7, #7
 8005032:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE( Led );
 8005034:	1dfb      	adds	r3, r7, #7
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b03      	cmp	r3, #3
 800503a:	d02f      	beq.n	800509c <BSP_LED_Init+0x74>
 800503c:	dc3b      	bgt.n	80050b6 <BSP_LED_Init+0x8e>
 800503e:	2b02      	cmp	r3, #2
 8005040:	d01f      	beq.n	8005082 <BSP_LED_Init+0x5a>
 8005042:	dc38      	bgt.n	80050b6 <BSP_LED_Init+0x8e>
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <BSP_LED_Init+0x26>
 8005048:	2b01      	cmp	r3, #1
 800504a:	d00d      	beq.n	8005068 <BSP_LED_Init+0x40>
 800504c:	e033      	b.n	80050b6 <BSP_LED_Init+0x8e>
 800504e:	4b2a      	ldr	r3, [pc, #168]	@ (80050f8 <BSP_LED_Init+0xd0>)
 8005050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005052:	4b29      	ldr	r3, [pc, #164]	@ (80050f8 <BSP_LED_Init+0xd0>)
 8005054:	2102      	movs	r1, #2
 8005056:	430a      	orrs	r2, r1
 8005058:	62da      	str	r2, [r3, #44]	@ 0x2c
 800505a:	4b27      	ldr	r3, [pc, #156]	@ (80050f8 <BSP_LED_Init+0xd0>)
 800505c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505e:	2202      	movs	r2, #2
 8005060:	4013      	ands	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	e026      	b.n	80050b6 <BSP_LED_Init+0x8e>
 8005068:	4b23      	ldr	r3, [pc, #140]	@ (80050f8 <BSP_LED_Init+0xd0>)
 800506a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800506c:	4b22      	ldr	r3, [pc, #136]	@ (80050f8 <BSP_LED_Init+0xd0>)
 800506e:	2101      	movs	r1, #1
 8005070:	430a      	orrs	r2, r1
 8005072:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005074:	4b20      	ldr	r3, [pc, #128]	@ (80050f8 <BSP_LED_Init+0xd0>)
 8005076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005078:	2201      	movs	r2, #1
 800507a:	4013      	ands	r3, r2
 800507c:	617b      	str	r3, [r7, #20]
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	e019      	b.n	80050b6 <BSP_LED_Init+0x8e>
 8005082:	4b1d      	ldr	r3, [pc, #116]	@ (80050f8 <BSP_LED_Init+0xd0>)
 8005084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005086:	4b1c      	ldr	r3, [pc, #112]	@ (80050f8 <BSP_LED_Init+0xd0>)
 8005088:	2102      	movs	r1, #2
 800508a:	430a      	orrs	r2, r1
 800508c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800508e:	4b1a      	ldr	r3, [pc, #104]	@ (80050f8 <BSP_LED_Init+0xd0>)
 8005090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005092:	2202      	movs	r2, #2
 8005094:	4013      	ands	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	e00c      	b.n	80050b6 <BSP_LED_Init+0x8e>
 800509c:	4b16      	ldr	r3, [pc, #88]	@ (80050f8 <BSP_LED_Init+0xd0>)
 800509e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050a0:	4b15      	ldr	r3, [pc, #84]	@ (80050f8 <BSP_LED_Init+0xd0>)
 80050a2:	2102      	movs	r1, #2
 80050a4:	430a      	orrs	r2, r1
 80050a6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80050a8:	4b13      	ldr	r3, [pc, #76]	@ (80050f8 <BSP_LED_Init+0xd0>)
 80050aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ac:	2202      	movs	r2, #2
 80050ae:	4013      	ands	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	46c0      	nop			@ (mov r8, r8)

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80050b6:	1dfb      	adds	r3, r7, #7
 80050b8:	781a      	ldrb	r2, [r3, #0]
 80050ba:	4b10      	ldr	r3, [pc, #64]	@ (80050fc <BSP_LED_Init+0xd4>)
 80050bc:	0052      	lsls	r2, r2, #1
 80050be:	5ad3      	ldrh	r3, [r2, r3]
 80050c0:	001a      	movs	r2, r3
 80050c2:	211c      	movs	r1, #28
 80050c4:	187b      	adds	r3, r7, r1
 80050c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050c8:	187b      	adds	r3, r7, r1
 80050ca:	2201      	movs	r2, #1
 80050cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ce:	187b      	adds	r3, r7, r1
 80050d0:	2200      	movs	r2, #0
 80050d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050d4:	187b      	adds	r3, r7, r1
 80050d6:	2203      	movs	r2, #3
 80050d8:	60da      	str	r2, [r3, #12]
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80050da:	1dfb      	adds	r3, r7, #7
 80050dc:	781a      	ldrb	r2, [r3, #0]
 80050de:	4b08      	ldr	r3, [pc, #32]	@ (8005100 <BSP_LED_Init+0xd8>)
 80050e0:	0092      	lsls	r2, r2, #2
 80050e2:	58d3      	ldr	r3, [r2, r3]
 80050e4:	187a      	adds	r2, r7, r1
 80050e6:	0011      	movs	r1, r2
 80050e8:	0018      	movs	r0, r3
 80050ea:	f011 fb9b 	bl	8016824 <HAL_GPIO_Init>
}
 80050ee:	46c0      	nop			@ (mov r8, r8)
 80050f0:	46bd      	mov	sp, r7
 80050f2:	b00c      	add	sp, #48	@ 0x30
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	46c0      	nop			@ (mov r8, r8)
 80050f8:	40021000 	.word	0x40021000
 80050fc:	0801adc4 	.word	0x0801adc4
 8005100:	20000030 	.word	0x20000030

08005104 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	0002      	movs	r2, r0
 800510c:	1dfb      	adds	r3, r7, #7
 800510e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8005110:	1dfb      	adds	r3, r7, #7
 8005112:	781a      	ldrb	r2, [r3, #0]
 8005114:	4b07      	ldr	r3, [pc, #28]	@ (8005134 <BSP_LED_On+0x30>)
 8005116:	0092      	lsls	r2, r2, #2
 8005118:	58d0      	ldr	r0, [r2, r3]
 800511a:	1dfb      	adds	r3, r7, #7
 800511c:	781a      	ldrb	r2, [r3, #0]
 800511e:	4b06      	ldr	r3, [pc, #24]	@ (8005138 <BSP_LED_On+0x34>)
 8005120:	0052      	lsls	r2, r2, #1
 8005122:	5ad3      	ldrh	r3, [r2, r3]
 8005124:	2201      	movs	r2, #1
 8005126:	0019      	movs	r1, r3
 8005128:	f011 fcfa 	bl	8016b20 <HAL_GPIO_WritePin>
}
 800512c:	46c0      	nop			@ (mov r8, r8)
 800512e:	46bd      	mov	sp, r7
 8005130:	b002      	add	sp, #8
 8005132:	bd80      	pop	{r7, pc}
 8005134:	20000030 	.word	0x20000030
 8005138:	0801adc4 	.word	0x0801adc4

0800513c <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	0002      	movs	r2, r0
 8005144:	1dfb      	adds	r3, r7, #7
 8005146:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8005148:	1dfb      	adds	r3, r7, #7
 800514a:	781a      	ldrb	r2, [r3, #0]
 800514c:	4b07      	ldr	r3, [pc, #28]	@ (800516c <BSP_LED_Off+0x30>)
 800514e:	0092      	lsls	r2, r2, #2
 8005150:	58d0      	ldr	r0, [r2, r3]
 8005152:	1dfb      	adds	r3, r7, #7
 8005154:	781a      	ldrb	r2, [r3, #0]
 8005156:	4b06      	ldr	r3, [pc, #24]	@ (8005170 <BSP_LED_Off+0x34>)
 8005158:	0052      	lsls	r2, r2, #1
 800515a:	5ad3      	ldrh	r3, [r2, r3]
 800515c:	2200      	movs	r2, #0
 800515e:	0019      	movs	r1, r3
 8005160:	f011 fcde 	bl	8016b20 <HAL_GPIO_WritePin>
}
 8005164:	46c0      	nop			@ (mov r8, r8)
 8005166:	46bd      	mov	sp, r7
 8005168:	b002      	add	sp, #8
 800516a:	bd80      	pop	{r7, pc}
 800516c:	20000030 	.word	0x20000030
 8005170:	0801adc4 	.word	0x0801adc4

08005174 <SX1276GetWakeTime>:
    SX1276SetPublicNetwork,
    SX1276GetWakeupTime
};

uint32_t SX1276GetWakeTime( void )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  return  BOARD_WAKEUP_TIME;
 8005178:	2305      	movs	r3, #5
}
 800517a:	0018      	movs	r0, r3
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <SX1276SetXO>:

void SX1276SetXO( uint8_t state )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	0002      	movs	r2, r0
 8005188:	1dfb      	adds	r3, r7, #7
 800518a:	701a      	strb	r2, [r3, #0]

  if (state == SET )
 800518c:	1dfb      	adds	r3, r7, #7
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d10b      	bne.n	80051ac <SX1276SetXO+0x2c>
  {
    TCXO_ON(); 
 8005194:	2380      	movs	r3, #128	@ 0x80
 8005196:	0159      	lsls	r1, r3, #5
 8005198:	23a0      	movs	r3, #160	@ 0xa0
 800519a:	05db      	lsls	r3, r3, #23
 800519c:	2201      	movs	r2, #1
 800519e:	0018      	movs	r0, r3
 80051a0:	f7fe fd46 	bl	8003c30 <HW_GPIO_Write>
    
    DelayMs( BOARD_WAKEUP_TIME ); //start up time of TCXO
 80051a4:	2005      	movs	r0, #5
 80051a6:	f7fd ff08 	bl	8002fba <HAL_Delay>
  }
  else
  {
    TCXO_OFF(); 
  }
}
 80051aa:	e007      	b.n	80051bc <SX1276SetXO+0x3c>
    TCXO_OFF(); 
 80051ac:	2380      	movs	r3, #128	@ 0x80
 80051ae:	0159      	lsls	r1, r3, #5
 80051b0:	23a0      	movs	r3, #160	@ 0xa0
 80051b2:	05db      	lsls	r3, r3, #23
 80051b4:	2200      	movs	r2, #0
 80051b6:	0018      	movs	r0, r3
 80051b8:	f7fe fd3a 	bl	8003c30 <HW_GPIO_Write>
}
 80051bc:	46c0      	nop			@ (mov r8, r8)
 80051be:	46bd      	mov	sp, r7
 80051c0:	b002      	add	sp, #8
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <SX1276IoInit>:
void SX1276IoInit( void )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 80051ca:	1d3b      	adds	r3, r7, #4
 80051cc:	0018      	movs	r0, r3
 80051ce:	2314      	movs	r3, #20
 80051d0:	001a      	movs	r2, r3
 80051d2:	2100      	movs	r1, #0
 80051d4:	f014 fc7a 	bl	8019acc <memset>
  
  SX1276BoardInit( &BoardCallbacks );
 80051d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005248 <SX1276IoInit+0x84>)
 80051da:	0018      	movs	r0, r3
 80051dc:	f000 fa68 	bl	80056b0 <SX1276BoardInit>
  
  initStruct.Mode =GPIO_MODE_IT_RISING;
 80051e0:	1d3b      	adds	r3, r7, #4
 80051e2:	4a1a      	ldr	r2, [pc, #104]	@ (800524c <SX1276IoInit+0x88>)
 80051e4:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLDOWN;
 80051e6:	1d3b      	adds	r3, r7, #4
 80051e8:	2202      	movs	r2, #2
 80051ea:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80051ec:	1d3b      	adds	r3, r7, #4
 80051ee:	2203      	movs	r2, #3
 80051f0:	60da      	str	r2, [r3, #12]

  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80051f2:	1d3b      	adds	r3, r7, #4
 80051f4:	4816      	ldr	r0, [pc, #88]	@ (8005250 <SX1276IoInit+0x8c>)
 80051f6:	001a      	movs	r2, r3
 80051f8:	2110      	movs	r1, #16
 80051fa:	f7fe fc47 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 80051fe:	1d3b      	adds	r3, r7, #4
 8005200:	4813      	ldr	r0, [pc, #76]	@ (8005250 <SX1276IoInit+0x8c>)
 8005202:	001a      	movs	r2, r3
 8005204:	2102      	movs	r1, #2
 8005206:	f7fe fc41 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 800520a:	1d3b      	adds	r3, r7, #4
 800520c:	4810      	ldr	r0, [pc, #64]	@ (8005250 <SX1276IoInit+0x8c>)
 800520e:	001a      	movs	r2, r3
 8005210:	2101      	movs	r1, #1
 8005212:	f7fe fc3b 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8005216:	1d3a      	adds	r2, r7, #4
 8005218:	2380      	movs	r3, #128	@ 0x80
 800521a:	019b      	lsls	r3, r3, #6
 800521c:	480d      	ldr	r0, [pc, #52]	@ (8005254 <SX1276IoInit+0x90>)
 800521e:	0019      	movs	r1, r3
 8005220:	f7fe fc34 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_4_PORT, RADIO_DIO_4_PIN, &initStruct );
#endif
#ifdef RADIO_DIO_5
  HW_GPIO_Init( RADIO_DIO_5_PORT, RADIO_DIO_5_PIN, &initStruct );
#endif
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8005224:	1d3b      	adds	r3, r7, #4
 8005226:	2201      	movs	r2, #1
 8005228:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;  
 800522a:	1d3b      	adds	r3, r7, #4
 800522c:	2200      	movs	r2, #0
 800522e:	609a      	str	r2, [r3, #8]
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 8005230:	1d3a      	adds	r2, r7, #4
 8005232:	2380      	movs	r3, #128	@ 0x80
 8005234:	0159      	lsls	r1, r3, #5
 8005236:	23a0      	movs	r3, #160	@ 0xa0
 8005238:	05db      	lsls	r3, r3, #23
 800523a:	0018      	movs	r0, r3
 800523c:	f7fe fc26 	bl	8003a8c <HW_GPIO_Init>
}
 8005240:	46c0      	nop			@ (mov r8, r8)
 8005242:	46bd      	mov	sp, r7
 8005244:	b006      	add	sp, #24
 8005246:	bd80      	pop	{r7, pc}
 8005248:	20000040 	.word	0x20000040
 800524c:	10110000 	.word	0x10110000
 8005250:	50000400 	.word	0x50000400
 8005254:	50000800 	.word	0x50000800

08005258 <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4810      	ldr	r0, [pc, #64]	@ (80052a8 <SX1276IoIrqInit+0x50>)
 8005266:	2200      	movs	r2, #0
 8005268:	2110      	movs	r1, #16
 800526a:	f7fe fc85 	bl	8003b78 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	3304      	adds	r3, #4
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	480c      	ldr	r0, [pc, #48]	@ (80052a8 <SX1276IoIrqInit+0x50>)
 8005276:	2200      	movs	r2, #0
 8005278:	2102      	movs	r1, #2
 800527a:	f7fe fc7d 	bl	8003b78 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	3308      	adds	r3, #8
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4808      	ldr	r0, [pc, #32]	@ (80052a8 <SX1276IoIrqInit+0x50>)
 8005286:	2200      	movs	r2, #0
 8005288:	2101      	movs	r1, #1
 800528a:	f7fe fc75 	bl	8003b78 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	330c      	adds	r3, #12
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2280      	movs	r2, #128	@ 0x80
 8005296:	0191      	lsls	r1, r2, #6
 8005298:	4804      	ldr	r0, [pc, #16]	@ (80052ac <SX1276IoIrqInit+0x54>)
 800529a:	2200      	movs	r2, #0
 800529c:	f7fe fc6c 	bl	8003b78 <HW_GPIO_SetIrq>
}
 80052a0:	46c0      	nop			@ (mov r8, r8)
 80052a2:	46bd      	mov	sp, r7
 80052a4:	b002      	add	sp, #8
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	50000400 	.word	0x50000400
 80052ac:	50000800 	.word	0x50000800

080052b0 <SX1276IoDeInit>:

void SX1276IoDeInit( void )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 80052b6:	1d3b      	adds	r3, r7, #4
 80052b8:	0018      	movs	r0, r3
 80052ba:	2314      	movs	r3, #20
 80052bc:	001a      	movs	r2, r3
 80052be:	2100      	movs	r1, #0
 80052c0:	f014 fc04 	bl	8019acc <memset>

  initStruct.Mode = GPIO_MODE_IT_RISING ; //GPIO_MODE_ANALOG;
 80052c4:	1d3b      	adds	r3, r7, #4
 80052c6:	4a11      	ldr	r2, [pc, #68]	@ (800530c <SX1276IoDeInit+0x5c>)
 80052c8:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLDOWN;
 80052ca:	1d3b      	adds	r3, r7, #4
 80052cc:	2202      	movs	r2, #2
 80052ce:	609a      	str	r2, [r3, #8]
  
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80052d0:	1d3b      	adds	r3, r7, #4
 80052d2:	480f      	ldr	r0, [pc, #60]	@ (8005310 <SX1276IoDeInit+0x60>)
 80052d4:	001a      	movs	r2, r3
 80052d6:	2110      	movs	r1, #16
 80052d8:	f7fe fbd8 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 80052dc:	1d3b      	adds	r3, r7, #4
 80052de:	480c      	ldr	r0, [pc, #48]	@ (8005310 <SX1276IoDeInit+0x60>)
 80052e0:	001a      	movs	r2, r3
 80052e2:	2102      	movs	r1, #2
 80052e4:	f7fe fbd2 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 80052e8:	1d3b      	adds	r3, r7, #4
 80052ea:	4809      	ldr	r0, [pc, #36]	@ (8005310 <SX1276IoDeInit+0x60>)
 80052ec:	001a      	movs	r2, r3
 80052ee:	2101      	movs	r1, #1
 80052f0:	f7fe fbcc 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 80052f4:	1d3a      	adds	r2, r7, #4
 80052f6:	2380      	movs	r3, #128	@ 0x80
 80052f8:	019b      	lsls	r3, r3, #6
 80052fa:	4806      	ldr	r0, [pc, #24]	@ (8005314 <SX1276IoDeInit+0x64>)
 80052fc:	0019      	movs	r1, r3
 80052fe:	f7fe fbc5 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_4_PORT, RADIO_DIO_4_PIN, &initStruct );
#endif
#ifdef RADIO_DIO_5
  HW_GPIO_Init( RADIO_DIO_5_PORT, RADIO_DIO_5_PIN, &initStruct );
#endif
}
 8005302:	46c0      	nop			@ (mov r8, r8)
 8005304:	46bd      	mov	sp, r7
 8005306:	b006      	add	sp, #24
 8005308:	bd80      	pop	{r7, pc}
 800530a:	46c0      	nop			@ (mov r8, r8)
 800530c:	10110000 	.word	0x10110000
 8005310:	50000400 	.word	0x50000400
 8005314:	50000800 	.word	0x50000800

08005318 <SX1276SetRfTxPower>:

void SX1276SetRfTxPower( int8_t power )
{
 8005318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	0002      	movs	r2, r0
 8005320:	1dfb      	adds	r3, r7, #7
 8005322:	701a      	strb	r2, [r3, #0]
    uint8_t paConfig = 0;
 8005324:	250f      	movs	r5, #15
 8005326:	197b      	adds	r3, r7, r5
 8005328:	2200      	movs	r2, #0
 800532a:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 800532c:	260e      	movs	r6, #14
 800532e:	19bb      	adds	r3, r7, r6
 8005330:	2200      	movs	r2, #0
 8005332:	701a      	strb	r2, [r3, #0]

    paConfig = SX1276Read( REG_PACONFIG );
 8005334:	197c      	adds	r4, r7, r5
 8005336:	2009      	movs	r0, #9
 8005338:	f001 fed0 	bl	80070dc <SX1276Read>
 800533c:	0003      	movs	r3, r0
 800533e:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 8005340:	19bc      	adds	r4, r7, r6
 8005342:	204d      	movs	r0, #77	@ 0x4d
 8005344:	f001 feca 	bl	80070dc <SX1276Read>
 8005348:	0003      	movs	r3, r0
 800534a:	7023      	strb	r3, [r4, #0]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 800534c:	197b      	adds	r3, r7, r5
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	b25b      	sxtb	r3, r3
 8005352:	227f      	movs	r2, #127	@ 0x7f
 8005354:	4013      	ands	r3, r2
 8005356:	b25c      	sxtb	r4, r3
 8005358:	1dfb      	adds	r3, r7, #7
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	b25b      	sxtb	r3, r3
 800535e:	0018      	movs	r0, r3
 8005360:	f000 f8ba 	bl	80054d8 <SX1276GetPaSelect>
 8005364:	0003      	movs	r3, r0
 8005366:	b25b      	sxtb	r3, r3
 8005368:	4323      	orrs	r3, r4
 800536a:	b25a      	sxtb	r2, r3
 800536c:	197b      	adds	r3, r7, r5
 800536e:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8005370:	197b      	adds	r3, r7, r5
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	b25b      	sxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	da66      	bge.n	8005448 <SX1276SetRfTxPower+0x130>
    {
        if( power > 17 )
 800537a:	1dfb      	adds	r3, r7, #7
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	b25b      	sxtb	r3, r3
 8005380:	2b11      	cmp	r3, #17
 8005382:	dd06      	ble.n	8005392 <SX1276SetRfTxPower+0x7a>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8005384:	19bb      	adds	r3, r7, r6
 8005386:	19ba      	adds	r2, r7, r6
 8005388:	7812      	ldrb	r2, [r2, #0]
 800538a:	2107      	movs	r1, #7
 800538c:	430a      	orrs	r2, r1
 800538e:	701a      	strb	r2, [r3, #0]
 8005390:	e00b      	b.n	80053aa <SX1276SetRfTxPower+0x92>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8005392:	210e      	movs	r1, #14
 8005394:	187b      	adds	r3, r7, r1
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	b25b      	sxtb	r3, r3
 800539a:	2207      	movs	r2, #7
 800539c:	4393      	bics	r3, r2
 800539e:	b25b      	sxtb	r3, r3
 80053a0:	2204      	movs	r2, #4
 80053a2:	4313      	orrs	r3, r2
 80053a4:	b25a      	sxtb	r2, r3
 80053a6:	187b      	adds	r3, r7, r1
 80053a8:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 80053aa:	230e      	movs	r3, #14
 80053ac:	18fb      	adds	r3, r7, r3
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2207      	movs	r2, #7
 80053b2:	4013      	ands	r3, r2
 80053b4:	2b07      	cmp	r3, #7
 80053b6:	d123      	bne.n	8005400 <SX1276SetRfTxPower+0xe8>
        {
            if( power < 5 )
 80053b8:	1dfb      	adds	r3, r7, #7
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	b25b      	sxtb	r3, r3
 80053be:	2b04      	cmp	r3, #4
 80053c0:	dc02      	bgt.n	80053c8 <SX1276SetRfTxPower+0xb0>
            {
                power = 5;
 80053c2:	1dfb      	adds	r3, r7, #7
 80053c4:	2205      	movs	r2, #5
 80053c6:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 80053c8:	1dfb      	adds	r3, r7, #7
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	b25b      	sxtb	r3, r3
 80053ce:	2b14      	cmp	r3, #20
 80053d0:	dd02      	ble.n	80053d8 <SX1276SetRfTxPower+0xc0>
            {
                power = 20;
 80053d2:	1dfb      	adds	r3, r7, #7
 80053d4:	2214      	movs	r2, #20
 80053d6:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 80053d8:	200f      	movs	r0, #15
 80053da:	183b      	adds	r3, r7, r0
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	b25b      	sxtb	r3, r3
 80053e0:	220f      	movs	r2, #15
 80053e2:	4393      	bics	r3, r2
 80053e4:	b25a      	sxtb	r2, r3
 80053e6:	1dfb      	adds	r3, r7, #7
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	3b05      	subs	r3, #5
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	b25b      	sxtb	r3, r3
 80053f0:	210f      	movs	r1, #15
 80053f2:	400b      	ands	r3, r1
 80053f4:	b25b      	sxtb	r3, r3
 80053f6:	4313      	orrs	r3, r2
 80053f8:	b25a      	sxtb	r2, r3
 80053fa:	183b      	adds	r3, r7, r0
 80053fc:	701a      	strb	r2, [r3, #0]
 80053fe:	e059      	b.n	80054b4 <SX1276SetRfTxPower+0x19c>
        }
        else
        {
            if( power < 2 )
 8005400:	1dfb      	adds	r3, r7, #7
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	b25b      	sxtb	r3, r3
 8005406:	2b01      	cmp	r3, #1
 8005408:	dc02      	bgt.n	8005410 <SX1276SetRfTxPower+0xf8>
            {
                power = 2;
 800540a:	1dfb      	adds	r3, r7, #7
 800540c:	2202      	movs	r2, #2
 800540e:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 8005410:	1dfb      	adds	r3, r7, #7
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	b25b      	sxtb	r3, r3
 8005416:	2b11      	cmp	r3, #17
 8005418:	dd02      	ble.n	8005420 <SX1276SetRfTxPower+0x108>
            {
                power = 17;
 800541a:	1dfb      	adds	r3, r7, #7
 800541c:	2211      	movs	r2, #17
 800541e:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8005420:	200f      	movs	r0, #15
 8005422:	183b      	adds	r3, r7, r0
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	b25b      	sxtb	r3, r3
 8005428:	220f      	movs	r2, #15
 800542a:	4393      	bics	r3, r2
 800542c:	b25a      	sxtb	r2, r3
 800542e:	1dfb      	adds	r3, r7, #7
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	3b02      	subs	r3, #2
 8005434:	b2db      	uxtb	r3, r3
 8005436:	b25b      	sxtb	r3, r3
 8005438:	210f      	movs	r1, #15
 800543a:	400b      	ands	r3, r1
 800543c:	b25b      	sxtb	r3, r3
 800543e:	4313      	orrs	r3, r2
 8005440:	b25a      	sxtb	r2, r3
 8005442:	183b      	adds	r3, r7, r0
 8005444:	701a      	strb	r2, [r3, #0]
 8005446:	e035      	b.n	80054b4 <SX1276SetRfTxPower+0x19c>
        }
    }
    else
    {
        if( power > 0 )
 8005448:	1dfb      	adds	r3, r7, #7
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	b25b      	sxtb	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	dd18      	ble.n	8005484 <SX1276SetRfTxPower+0x16c>
        {
            if( power > 15 )
 8005452:	1dfb      	adds	r3, r7, #7
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	b25b      	sxtb	r3, r3
 8005458:	2b0f      	cmp	r3, #15
 800545a:	dd02      	ble.n	8005462 <SX1276SetRfTxPower+0x14a>
            {
                power = 15;
 800545c:	1dfb      	adds	r3, r7, #7
 800545e:	220f      	movs	r2, #15
 8005460:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 8005462:	210f      	movs	r1, #15
 8005464:	187b      	adds	r3, r7, r1
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	b25b      	sxtb	r3, r3
 800546a:	227f      	movs	r2, #127	@ 0x7f
 800546c:	4393      	bics	r3, r2
 800546e:	b25b      	sxtb	r3, r3
 8005470:	2270      	movs	r2, #112	@ 0x70
 8005472:	4313      	orrs	r3, r2
 8005474:	b25a      	sxtb	r2, r3
 8005476:	1dfb      	adds	r3, r7, #7
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	4313      	orrs	r3, r2
 800547c:	b25a      	sxtb	r2, r3
 800547e:	187b      	adds	r3, r7, r1
 8005480:	701a      	strb	r2, [r3, #0]
 8005482:	e017      	b.n	80054b4 <SX1276SetRfTxPower+0x19c>
        }
        else
        {
            if( power < -4 )
 8005484:	1dfb      	adds	r3, r7, #7
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	b25b      	sxtb	r3, r3
 800548a:	3304      	adds	r3, #4
 800548c:	da02      	bge.n	8005494 <SX1276SetRfTxPower+0x17c>
            {
                power = -4;
 800548e:	1dfb      	adds	r3, r7, #7
 8005490:	22fc      	movs	r2, #252	@ 0xfc
 8005492:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 8005494:	210f      	movs	r1, #15
 8005496:	187b      	adds	r3, r7, r1
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	b25b      	sxtb	r3, r3
 800549c:	227f      	movs	r2, #127	@ 0x7f
 800549e:	4393      	bics	r3, r2
 80054a0:	b25a      	sxtb	r2, r3
 80054a2:	1dfb      	adds	r3, r7, #7
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	3304      	adds	r3, #4
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	b25b      	sxtb	r3, r3
 80054ac:	4313      	orrs	r3, r2
 80054ae:	b25a      	sxtb	r2, r3
 80054b0:	187b      	adds	r3, r7, r1
 80054b2:	701a      	strb	r2, [r3, #0]
        }
    }
    SX1276Write( REG_PACONFIG, paConfig );
 80054b4:	230f      	movs	r3, #15
 80054b6:	18fb      	adds	r3, r7, r3
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	0019      	movs	r1, r3
 80054bc:	2009      	movs	r0, #9
 80054be:	f001 fdf9 	bl	80070b4 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 80054c2:	230e      	movs	r3, #14
 80054c4:	18fb      	adds	r3, r7, r3
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	0019      	movs	r1, r3
 80054ca:	204d      	movs	r0, #77	@ 0x4d
 80054cc:	f001 fdf2 	bl	80070b4 <SX1276Write>
}
 80054d0:	46c0      	nop			@ (mov r8, r8)
 80054d2:	46bd      	mov	sp, r7
 80054d4:	b005      	add	sp, #20
 80054d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054d8 <SX1276GetPaSelect>:

uint8_t SX1276GetPaSelect( int8_t power )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	0002      	movs	r2, r0
 80054e0:	1dfb      	adds	r3, r7, #7
 80054e2:	701a      	strb	r2, [r3, #0]
    if (power >14)
 80054e4:	1dfb      	adds	r3, r7, #7
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	b25b      	sxtb	r3, r3
 80054ea:	2b0e      	cmp	r3, #14
 80054ec:	dd01      	ble.n	80054f2 <SX1276GetPaSelect+0x1a>
    {
        return RF_PACONFIG_PASELECT_PABOOST;
 80054ee:	2380      	movs	r3, #128	@ 0x80
 80054f0:	e000      	b.n	80054f4 <SX1276GetPaSelect+0x1c>
    }
    else
    {
        return RF_PACONFIG_PASELECT_RFO;
 80054f2:	2300      	movs	r3, #0
    }
}
 80054f4:	0018      	movs	r0, r3
 80054f6:	46bd      	mov	sp, r7
 80054f8:	b002      	add	sp, #8
 80054fa:	bd80      	pop	{r7, pc}

080054fc <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	0002      	movs	r2, r0
 8005504:	1dfb      	adds	r3, r7, #7
 8005506:	701a      	strb	r2, [r3, #0]
    if( status == false )
 8005508:	1dfb      	adds	r3, r7, #7
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2201      	movs	r2, #1
 800550e:	4053      	eors	r3, r2
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <SX1276SetAntSwLowPower+0x20>
    {
      SX1276AntSwInit( );
 8005516:	f000 f807 	bl	8005528 <SX1276AntSwInit>
    }
    else 
    {
      SX1276AntSwDeInit( );
    }
}
 800551a:	e001      	b.n	8005520 <SX1276SetAntSwLowPower+0x24>
      SX1276AntSwDeInit( );
 800551c:	f000 f844 	bl	80055a8 <SX1276AntSwDeInit>
}
 8005520:	46c0      	nop			@ (mov r8, r8)
 8005522:	46bd      	mov	sp, r7
 8005524:	b002      	add	sp, #8
 8005526:	bd80      	pop	{r7, pc}

08005528 <SX1276AntSwInit>:

static void SX1276AntSwInit( void )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 800552e:	1d3b      	adds	r3, r7, #4
 8005530:	0018      	movs	r0, r3
 8005532:	2314      	movs	r3, #20
 8005534:	001a      	movs	r2, r3
 8005536:	2100      	movs	r1, #0
 8005538:	f014 fac8 	bl	8019acc <memset>

  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 800553c:	1d3b      	adds	r3, r7, #4
 800553e:	2201      	movs	r2, #1
 8005540:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL; 
 8005542:	1d3b      	adds	r3, r7, #4
 8005544:	2200      	movs	r2, #0
 8005546:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8005548:	1d3b      	adds	r3, r7, #4
 800554a:	2203      	movs	r2, #3
 800554c:	60da      	str	r2, [r3, #12]
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 800554e:	1d3a      	adds	r2, r7, #4
 8005550:	23a0      	movs	r3, #160	@ 0xa0
 8005552:	05db      	lsls	r3, r3, #23
 8005554:	2102      	movs	r1, #2
 8005556:	0018      	movs	r0, r3
 8005558:	f7fe fa98 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 800555c:	23a0      	movs	r3, #160	@ 0xa0
 800555e:	05db      	lsls	r3, r3, #23
 8005560:	2200      	movs	r2, #0
 8005562:	2102      	movs	r1, #2
 8005564:	0018      	movs	r0, r3
 8005566:	f7fe fb63 	bl	8003c30 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 800556a:	1d3b      	adds	r3, r7, #4
 800556c:	480d      	ldr	r0, [pc, #52]	@ (80055a4 <SX1276AntSwInit+0x7c>)
 800556e:	001a      	movs	r2, r3
 8005570:	2102      	movs	r1, #2
 8005572:	f7fe fa8b 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 8005576:	4b0b      	ldr	r3, [pc, #44]	@ (80055a4 <SX1276AntSwInit+0x7c>)
 8005578:	2200      	movs	r2, #0
 800557a:	2102      	movs	r1, #2
 800557c:	0018      	movs	r0, r3
 800557e:	f7fe fb57 	bl	8003c30 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 8005582:	1d3b      	adds	r3, r7, #4
 8005584:	4807      	ldr	r0, [pc, #28]	@ (80055a4 <SX1276AntSwInit+0x7c>)
 8005586:	001a      	movs	r2, r3
 8005588:	2104      	movs	r1, #4
 800558a:	f7fe fa7f 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 800558e:	4b05      	ldr	r3, [pc, #20]	@ (80055a4 <SX1276AntSwInit+0x7c>)
 8005590:	2200      	movs	r2, #0
 8005592:	2104      	movs	r1, #4
 8005594:	0018      	movs	r0, r3
 8005596:	f7fe fb4b 	bl	8003c30 <HW_GPIO_Write>
}
 800559a:	46c0      	nop			@ (mov r8, r8)
 800559c:	46bd      	mov	sp, r7
 800559e:	b006      	add	sp, #24
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	46c0      	nop			@ (mov r8, r8)
 80055a4:	50000800 	.word	0x50000800

080055a8 <SX1276AntSwDeInit>:

static void SX1276AntSwDeInit( void )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 80055ae:	1d3b      	adds	r3, r7, #4
 80055b0:	0018      	movs	r0, r3
 80055b2:	2314      	movs	r3, #20
 80055b4:	001a      	movs	r2, r3
 80055b6:	2100      	movs	r1, #0
 80055b8:	f014 fa88 	bl	8019acc <memset>

  initStruct.Mode = GPIO_MODE_ANALOG ;
 80055bc:	1d3b      	adds	r3, r7, #4
 80055be:	2203      	movs	r2, #3
 80055c0:	605a      	str	r2, [r3, #4]
  
  initStruct.Pull = GPIO_NOPULL;
 80055c2:	1d3b      	adds	r3, r7, #4
 80055c4:	2200      	movs	r2, #0
 80055c6:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80055c8:	1d3b      	adds	r3, r7, #4
 80055ca:	2203      	movs	r2, #3
 80055cc:	60da      	str	r2, [r3, #12]

  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 80055ce:	1d3a      	adds	r2, r7, #4
 80055d0:	23a0      	movs	r3, #160	@ 0xa0
 80055d2:	05db      	lsls	r3, r3, #23
 80055d4:	2102      	movs	r1, #2
 80055d6:	0018      	movs	r0, r3
 80055d8:	f7fe fa58 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 80055dc:	23a0      	movs	r3, #160	@ 0xa0
 80055de:	05db      	lsls	r3, r3, #23
 80055e0:	2200      	movs	r2, #0
 80055e2:	2102      	movs	r1, #2
 80055e4:	0018      	movs	r0, r3
 80055e6:	f7fe fb23 	bl	8003c30 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 80055ea:	1d3b      	adds	r3, r7, #4
 80055ec:	480d      	ldr	r0, [pc, #52]	@ (8005624 <SX1276AntSwDeInit+0x7c>)
 80055ee:	001a      	movs	r2, r3
 80055f0:	2102      	movs	r1, #2
 80055f2:	f7fe fa4b 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 80055f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005624 <SX1276AntSwDeInit+0x7c>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	2102      	movs	r1, #2
 80055fc:	0018      	movs	r0, r3
 80055fe:	f7fe fb17 	bl	8003c30 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 8005602:	1d3b      	adds	r3, r7, #4
 8005604:	4807      	ldr	r0, [pc, #28]	@ (8005624 <SX1276AntSwDeInit+0x7c>)
 8005606:	001a      	movs	r2, r3
 8005608:	2104      	movs	r1, #4
 800560a:	f7fe fa3f 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 800560e:	4b05      	ldr	r3, [pc, #20]	@ (8005624 <SX1276AntSwDeInit+0x7c>)
 8005610:	2200      	movs	r2, #0
 8005612:	2104      	movs	r1, #4
 8005614:	0018      	movs	r0, r3
 8005616:	f7fe fb0b 	bl	8003c30 <HW_GPIO_Write>
}
 800561a:	46c0      	nop			@ (mov r8, r8)
 800561c:	46bd      	mov	sp, r7
 800561e:	b006      	add	sp, #24
 8005620:	bd80      	pop	{r7, pc}
 8005622:	46c0      	nop			@ (mov r8, r8)
 8005624:	50000800 	.word	0x50000800

08005628 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 8005628:	b5b0      	push	{r4, r5, r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	0002      	movs	r2, r0
 8005630:	1dfb      	adds	r3, r7, #7
 8005632:	701a      	strb	r2, [r3, #0]
 uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 8005634:	250f      	movs	r5, #15
 8005636:	197c      	adds	r4, r7, r5
 8005638:	2009      	movs	r0, #9
 800563a:	f001 fd4f 	bl	80070dc <SX1276Read>
 800563e:	0003      	movs	r3, r0
 8005640:	7023      	strb	r3, [r4, #0]
    switch( opMode )
 8005642:	1dfb      	adds	r3, r7, #7
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	2b03      	cmp	r3, #3
 8005648:	d115      	bne.n	8005676 <SX1276SetAntSw+0x4e>
    {
    case RFLR_OPMODE_TRANSMITTER:
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800564a:	197b      	adds	r3, r7, r5
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	b25b      	sxtb	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	da06      	bge.n	8005662 <SX1276SetAntSw+0x3a>
      {
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 1 );
 8005654:	4b0f      	ldr	r3, [pc, #60]	@ (8005694 <SX1276SetAntSw+0x6c>)
 8005656:	2201      	movs	r2, #1
 8005658:	2102      	movs	r1, #2
 800565a:	0018      	movs	r0, r3
 800565c:	f7fe fae8 	bl	8003c30 <HW_GPIO_Write>
 8005660:	e005      	b.n	800566e <SX1276SetAntSw+0x46>
      }
      else
      {
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 1 );
 8005662:	4b0c      	ldr	r3, [pc, #48]	@ (8005694 <SX1276SetAntSw+0x6c>)
 8005664:	2201      	movs	r2, #1
 8005666:	2104      	movs	r1, #4
 8005668:	0018      	movs	r0, r3
 800566a:	f7fe fae1 	bl	8003c30 <HW_GPIO_Write>
      }
      SX1276.RxTx = 1;
 800566e:	4b0a      	ldr	r3, [pc, #40]	@ (8005698 <SX1276SetAntSw+0x70>)
 8005670:	2201      	movs	r2, #1
 8005672:	701a      	strb	r2, [r3, #0]
        break;
 8005674:	e00a      	b.n	800568c <SX1276SetAntSw+0x64>
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
     SX1276.RxTx = 0;
 8005676:	4b08      	ldr	r3, [pc, #32]	@ (8005698 <SX1276SetAntSw+0x70>)
 8005678:	2200      	movs	r2, #0
 800567a:	701a      	strb	r2, [r3, #0]
     HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 800567c:	23a0      	movs	r3, #160	@ 0xa0
 800567e:	05db      	lsls	r3, r3, #23
 8005680:	2201      	movs	r2, #1
 8005682:	2102      	movs	r1, #2
 8005684:	0018      	movs	r0, r3
 8005686:	f7fe fad3 	bl	8003c30 <HW_GPIO_Write>
     break;
 800568a:	46c0      	nop			@ (mov r8, r8)
    }
}
 800568c:	46c0      	nop			@ (mov r8, r8)
 800568e:	46bd      	mov	sp, r7
 8005690:	b004      	add	sp, #16
 8005692:	bdb0      	pop	{r4, r5, r7, pc}
 8005694:	50000800 	.word	0x50000800
 8005698:	200004ec 	.word	0x200004ec

0800569c <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 80056a4:	2301      	movs	r3, #1
}
 80056a6:	0018      	movs	r0, r3
 80056a8:	46bd      	mov	sp, r7
 80056aa:	b002      	add	sp, #8
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <SX1276BoardInit>:

/*
 * Radio driver functions implementation
 */
void SX1276BoardInit( LoRaBoardCallback_t *callbacks )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
    LoRaBoardCallbacks =callbacks;
 80056b8:	4b03      	ldr	r3, [pc, #12]	@ (80056c8 <SX1276BoardInit+0x18>)
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	601a      	str	r2, [r3, #0]
}
 80056be:	46c0      	nop			@ (mov r8, r8)
 80056c0:	46bd      	mov	sp, r7
 80056c2:	b002      	add	sp, #8
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	46c0      	nop			@ (mov r8, r8)
 80056c8:	200004e8 	.word	0x200004e8

080056cc <SX1276Init>:

uint32_t SX1276Init( RadioEvents_t *events )
{
 80056cc:	b590      	push	{r4, r7, lr}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 80056d4:	4b33      	ldr	r3, [pc, #204]	@ (80057a4 <SX1276Init+0xd8>)
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 80056da:	4a33      	ldr	r2, [pc, #204]	@ (80057a8 <SX1276Init+0xdc>)
 80056dc:	4b33      	ldr	r3, [pc, #204]	@ (80057ac <SX1276Init+0xe0>)
 80056de:	0011      	movs	r1, r2
 80056e0:	0018      	movs	r0, r3
 80056e2:	f00f fc5e 	bl	8014fa2 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 80056e6:	4a30      	ldr	r2, [pc, #192]	@ (80057a8 <SX1276Init+0xdc>)
 80056e8:	4b31      	ldr	r3, [pc, #196]	@ (80057b0 <SX1276Init+0xe4>)
 80056ea:	0011      	movs	r1, r2
 80056ec:	0018      	movs	r0, r3
 80056ee:	f00f fc58 	bl	8014fa2 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 80056f2:	4a2d      	ldr	r2, [pc, #180]	@ (80057a8 <SX1276Init+0xdc>)
 80056f4:	4b2f      	ldr	r3, [pc, #188]	@ (80057b4 <SX1276Init+0xe8>)
 80056f6:	0011      	movs	r1, r2
 80056f8:	0018      	movs	r0, r3
 80056fa:	f00f fc52 	bl	8014fa2 <TimerInit>

    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 80056fe:	4b2e      	ldr	r3, [pc, #184]	@ (80057b8 <SX1276Init+0xec>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2001      	movs	r0, #1
 8005706:	4798      	blx	r3

    SX1276Reset( );
 8005708:	f001 fbf6 	bl	8006ef8 <SX1276Reset>

    RxChainCalibration( );
 800570c:	f000 f93c 	bl	8005988 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8005710:	2000      	movs	r0, #0
 8005712:	f001 fc25 	bl	8006f60 <SX1276SetOpMode>

    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 8005716:	4b28      	ldr	r3, [pc, #160]	@ (80057b8 <SX1276Init+0xec>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	4a27      	ldr	r2, [pc, #156]	@ (80057bc <SX1276Init+0xf0>)
 800571e:	0010      	movs	r0, r2
 8005720:	4798      	blx	r3

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8005722:	230f      	movs	r3, #15
 8005724:	18fb      	adds	r3, r7, r3
 8005726:	2200      	movs	r2, #0
 8005728:	701a      	strb	r2, [r3, #0]
 800572a:	e025      	b.n	8005778 <SX1276Init+0xac>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 800572c:	240f      	movs	r4, #15
 800572e:	193b      	adds	r3, r7, r4
 8005730:	781a      	ldrb	r2, [r3, #0]
 8005732:	4923      	ldr	r1, [pc, #140]	@ (80057c0 <SX1276Init+0xf4>)
 8005734:	0013      	movs	r3, r2
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	189b      	adds	r3, r3, r2
 800573a:	5c5b      	ldrb	r3, [r3, r1]
 800573c:	0018      	movs	r0, r3
 800573e:	f001 fc5f 	bl	8007000 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8005742:	193b      	adds	r3, r7, r4
 8005744:	781a      	ldrb	r2, [r3, #0]
 8005746:	491e      	ldr	r1, [pc, #120]	@ (80057c0 <SX1276Init+0xf4>)
 8005748:	0013      	movs	r3, r2
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	189b      	adds	r3, r3, r2
 800574e:	18cb      	adds	r3, r1, r3
 8005750:	3301      	adds	r3, #1
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	0018      	movs	r0, r3
 8005756:	193b      	adds	r3, r7, r4
 8005758:	781a      	ldrb	r2, [r3, #0]
 800575a:	4919      	ldr	r1, [pc, #100]	@ (80057c0 <SX1276Init+0xf4>)
 800575c:	0013      	movs	r3, r2
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	189b      	adds	r3, r3, r2
 8005762:	18cb      	adds	r3, r1, r3
 8005764:	3302      	adds	r3, #2
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	0019      	movs	r1, r3
 800576a:	f001 fca3 	bl	80070b4 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800576e:	193b      	adds	r3, r7, r4
 8005770:	781a      	ldrb	r2, [r3, #0]
 8005772:	193b      	adds	r3, r7, r4
 8005774:	3201      	adds	r2, #1
 8005776:	701a      	strb	r2, [r3, #0]
 8005778:	230f      	movs	r3, #15
 800577a:	18fb      	adds	r3, r7, r3
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b0f      	cmp	r3, #15
 8005780:	d9d4      	bls.n	800572c <SX1276Init+0x60>
    }

    SX1276SetModem( MODEM_FSK );
 8005782:	2000      	movs	r0, #0
 8005784:	f001 fc3c 	bl	8007000 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 8005788:	4b0e      	ldr	r3, [pc, #56]	@ (80057c4 <SX1276Init+0xf8>)
 800578a:	2200      	movs	r2, #0
 800578c:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 800578e:	4b0a      	ldr	r3, [pc, #40]	@ (80057b8 <SX1276Init+0xec>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	4798      	blx	r3
 8005796:	0003      	movs	r3, r0
 8005798:	3302      	adds	r3, #2
}
 800579a:	0018      	movs	r0, r3
 800579c:	46bd      	mov	sp, r7
 800579e:	b005      	add	sp, #20
 80057a0:	bd90      	pop	{r4, r7, pc}
 80057a2:	46c0      	nop			@ (mov r8, r8)
 80057a4:	200003e4 	.word	0x200003e4
 80057a8:	0800731d 	.word	0x0800731d
 80057ac:	20000554 	.word	0x20000554
 80057b0:	2000056c 	.word	0x2000056c
 80057b4:	20000584 	.word	0x20000584
 80057b8:	200004e8 	.word	0x200004e8
 80057bc:	20000058 	.word	0x20000058
 80057c0:	0801ae40 	.word	0x0801ae40
 80057c4:	200004ec 	.word	0x200004ec

080057c8 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 80057cc:	4b02      	ldr	r3, [pc, #8]	@ (80057d8 <SX1276GetStatus+0x10>)
 80057ce:	791b      	ldrb	r3, [r3, #4]
}
 80057d0:	0018      	movs	r0, r3
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	46c0      	nop			@ (mov r8, r8)
 80057d8:	200004ec 	.word	0x200004ec

080057dc <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 80057dc:	b590      	push	{r4, r7, lr}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
    uint32_t channel;

    SX1276.Settings.Channel = freq;
 80057e4:	4b1d      	ldr	r3, [pc, #116]	@ (800585c <SX1276SetChannel+0x80>)
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	609a      	str	r2, [r3, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	491c      	ldr	r1, [pc, #112]	@ (8005860 <SX1276SetChannel+0x84>)
 80057ee:	0018      	movs	r0, r3
 80057f0:	f7fa fc94 	bl	800011c <__udivsi3>
 80057f4:	0003      	movs	r3, r0
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	6979      	ldr	r1, [r7, #20]
 80057fa:	000b      	movs	r3, r1
 80057fc:	015b      	lsls	r3, r3, #5
 80057fe:	1a5b      	subs	r3, r3, r1
 8005800:	019a      	lsls	r2, r3, #6
 8005802:	1ad2      	subs	r2, r2, r3
 8005804:	00d2      	lsls	r2, r2, #3
 8005806:	1853      	adds	r3, r2, r1
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	613b      	str	r3, [r7, #16]
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	021c      	lsls	r4, r3, #8
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	021b      	lsls	r3, r3, #8
 8005816:	4a13      	ldr	r2, [pc, #76]	@ (8005864 <SX1276SetChannel+0x88>)
 8005818:	4694      	mov	ip, r2
 800581a:	4463      	add	r3, ip
 800581c:	4910      	ldr	r1, [pc, #64]	@ (8005860 <SX1276SetChannel+0x84>)
 800581e:	0018      	movs	r0, r3
 8005820:	f7fa fc7c 	bl	800011c <__udivsi3>
 8005824:	0003      	movs	r3, r0
 8005826:	18e3      	adds	r3, r4, r3
 8005828:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	0c1b      	lsrs	r3, r3, #16
 800582e:	b2db      	uxtb	r3, r3
 8005830:	0019      	movs	r1, r3
 8005832:	2006      	movs	r0, #6
 8005834:	f001 fc3e 	bl	80070b4 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	0a1b      	lsrs	r3, r3, #8
 800583c:	b2db      	uxtb	r3, r3
 800583e:	0019      	movs	r1, r3
 8005840:	2007      	movs	r0, #7
 8005842:	f001 fc37 	bl	80070b4 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	b2db      	uxtb	r3, r3
 800584a:	0019      	movs	r1, r3
 800584c:	2008      	movs	r0, #8
 800584e:	f001 fc31 	bl	80070b4 <SX1276Write>
}
 8005852:	46c0      	nop			@ (mov r8, r8)
 8005854:	46bd      	mov	sp, r7
 8005856:	b007      	add	sp, #28
 8005858:	bd90      	pop	{r4, r7, pc}
 800585a:	46c0      	nop			@ (mov r8, r8)
 800585c:	200004ec 	.word	0x200004ec
 8005860:	00003d09 	.word	0x00003d09
 8005864:	00001e84 	.word	0x00001e84

08005868 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8005868:	b5b0      	push	{r4, r5, r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	60b9      	str	r1, [r7, #8]
 8005870:	0011      	movs	r1, r2
 8005872:	607b      	str	r3, [r7, #4]
 8005874:	230f      	movs	r3, #15
 8005876:	18fb      	adds	r3, r7, r3
 8005878:	1c02      	adds	r2, r0, #0
 800587a:	701a      	strb	r2, [r3, #0]
 800587c:	230c      	movs	r3, #12
 800587e:	18fb      	adds	r3, r7, r3
 8005880:	1c0a      	adds	r2, r1, #0
 8005882:	801a      	strh	r2, [r3, #0]
    bool status = true;
 8005884:	2317      	movs	r3, #23
 8005886:	18fb      	adds	r3, r7, r3
 8005888:	2201      	movs	r2, #1
 800588a:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 800588c:	2314      	movs	r3, #20
 800588e:	18fb      	adds	r3, r7, r3
 8005890:	2200      	movs	r2, #0
 8005892:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
 8005894:	2300      	movs	r3, #0
 8005896:	613b      	str	r3, [r7, #16]

    if( SX1276GetStatus( ) != RF_IDLE )
 8005898:	f7ff ff96 	bl	80057c8 <SX1276GetStatus>
 800589c:	1e03      	subs	r3, r0, #0
 800589e:	d001      	beq.n	80058a4 <SX1276IsChannelFree+0x3c>
    {
        return false;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e039      	b.n	8005918 <SX1276IsChannelFree+0xb0>
    }

    SX1276SetModem( modem );
 80058a4:	230f      	movs	r3, #15
 80058a6:	18fb      	adds	r3, r7, r3
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	0018      	movs	r0, r3
 80058ac:	f001 fba8 	bl	8007000 <SX1276SetModem>

    SX1276SetChannel( freq );
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	0018      	movs	r0, r3
 80058b4:	f7ff ff92 	bl	80057dc <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80058b8:	2005      	movs	r0, #5
 80058ba:	f001 fb51 	bl	8006f60 <SX1276SetOpMode>

    DelayMs( 1 );
 80058be:	2001      	movs	r0, #1
 80058c0:	f7fd fb7b 	bl	8002fba <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80058c4:	f00f fd0d 	bl	80152e2 <TimerGetCurrentTime>
 80058c8:	0003      	movs	r3, r0
 80058ca:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80058cc:	e017      	b.n	80058fe <SX1276IsChannelFree+0x96>
    {
        rssi = SX1276ReadRssi( modem );
 80058ce:	2514      	movs	r5, #20
 80058d0:	197c      	adds	r4, r7, r5
 80058d2:	230f      	movs	r3, #15
 80058d4:	18fb      	adds	r3, r7, r3
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	0018      	movs	r0, r3
 80058da:	f001 fac5 	bl	8006e68 <SX1276ReadRssi>
 80058de:	0003      	movs	r3, r0
 80058e0:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
 80058e2:	197a      	adds	r2, r7, r5
 80058e4:	230c      	movs	r3, #12
 80058e6:	18fb      	adds	r3, r7, r3
 80058e8:	2100      	movs	r1, #0
 80058ea:	5e52      	ldrsh	r2, [r2, r1]
 80058ec:	2100      	movs	r1, #0
 80058ee:	5e5b      	ldrsh	r3, [r3, r1]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	dd04      	ble.n	80058fe <SX1276IsChannelFree+0x96>
        {
            status = false;
 80058f4:	2317      	movs	r3, #23
 80058f6:	18fb      	adds	r3, r7, r3
 80058f8:	2200      	movs	r2, #0
 80058fa:	701a      	strb	r2, [r3, #0]
            break;
 80058fc:	e007      	b.n	800590e <SX1276IsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	0018      	movs	r0, r3
 8005902:	f00f fcfe 	bl	8015302 <TimerGetElapsedTime>
 8005906:	0002      	movs	r2, r0
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4293      	cmp	r3, r2
 800590c:	d8df      	bhi.n	80058ce <SX1276IsChannelFree+0x66>
        }
    }
    SX1276SetSleep( );
 800590e:	f000 ffcd 	bl	80068ac <SX1276SetSleep>
    return status;
 8005912:	2317      	movs	r3, #23
 8005914:	18fb      	adds	r3, r7, r3
 8005916:	781b      	ldrb	r3, [r3, #0]
}
 8005918:	0018      	movs	r0, r3
 800591a:	46bd      	mov	sp, r7
 800591c:	b006      	add	sp, #24
 800591e:	bdb0      	pop	{r4, r5, r7, pc}

08005920 <SX1276Random>:

uint32_t SX1276Random( void )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 8005926:	2300      	movs	r3, #0
 8005928:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 800592a:	2001      	movs	r0, #1
 800592c:	f001 fb68 	bl	8007000 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8005930:	21ff      	movs	r1, #255	@ 0xff
 8005932:	2011      	movs	r0, #17
 8005934:	f001 fbbe 	bl	80070b4 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8005938:	2005      	movs	r0, #5
 800593a:	f001 fb11 	bl	8006f60 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 800593e:	1dfb      	adds	r3, r7, #7
 8005940:	2200      	movs	r2, #0
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	e015      	b.n	8005972 <SX1276Random+0x52>
    {
        DelayMs( 1 );
 8005946:	2001      	movs	r0, #1
 8005948:	f7fd fb37 	bl	8002fba <HAL_Delay>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800594c:	202c      	movs	r0, #44	@ 0x2c
 800594e:	f001 fbc5 	bl	80070dc <SX1276Read>
 8005952:	0003      	movs	r3, r0
 8005954:	001a      	movs	r2, r3
 8005956:	2301      	movs	r3, #1
 8005958:	401a      	ands	r2, r3
 800595a:	1dfb      	adds	r3, r7, #7
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	409a      	lsls	r2, r3
 8005960:	0013      	movs	r3, r2
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	4313      	orrs	r3, r2
 8005966:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 8005968:	1dfb      	adds	r3, r7, #7
 800596a:	781a      	ldrb	r2, [r3, #0]
 800596c:	1dfb      	adds	r3, r7, #7
 800596e:	3201      	adds	r2, #1
 8005970:	701a      	strb	r2, [r3, #0]
 8005972:	1dfb      	adds	r3, r7, #7
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	2b1f      	cmp	r3, #31
 8005978:	d9e5      	bls.n	8005946 <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 800597a:	f000 ff97 	bl	80068ac <SX1276SetSleep>

    return rnd;
 800597e:	683b      	ldr	r3, [r7, #0]
}
 8005980:	0018      	movs	r0, r3
 8005982:	46bd      	mov	sp, r7
 8005984:	b002      	add	sp, #8
 8005986:	bd80      	pop	{r7, pc}

08005988 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
void RxChainCalibration( void )
{
 8005988:	b590      	push	{r4, r7, lr}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800598e:	2317      	movs	r3, #23
 8005990:	18fc      	adds	r4, r7, r3
 8005992:	2009      	movs	r0, #9
 8005994:	f001 fba2 	bl	80070dc <SX1276Read>
 8005998:	0003      	movs	r3, r0
 800599a:	7023      	strb	r3, [r4, #0]

    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800599c:	2006      	movs	r0, #6
 800599e:	f001 fb9d 	bl	80070dc <SX1276Read>
 80059a2:	0003      	movs	r3, r0
 80059a4:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80059a6:	2007      	movs	r0, #7
 80059a8:	f001 fb98 	bl	80070dc <SX1276Read>
 80059ac:	0003      	movs	r3, r0
 80059ae:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80059b0:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 80059b2:	2008      	movs	r0, #8
 80059b4:	f001 fb92 	bl	80070dc <SX1276Read>
 80059b8:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80059ba:	4323      	orrs	r3, r4
 80059bc:	613b      	str	r3, [r7, #16]

    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	0a1b      	lsrs	r3, r3, #8
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	021b      	lsls	r3, r3, #8
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	60bb      	str	r3, [r7, #8]
 80059ce:	68f9      	ldr	r1, [r7, #12]
 80059d0:	000b      	movs	r3, r1
 80059d2:	015b      	lsls	r3, r3, #5
 80059d4:	1a5b      	subs	r3, r3, r1
 80059d6:	019a      	lsls	r2, r3, #6
 80059d8:	1ad2      	subs	r2, r2, r3
 80059da:	00d2      	lsls	r2, r2, #3
 80059dc:	1850      	adds	r0, r2, r1
 80059de:	68b9      	ldr	r1, [r7, #8]
 80059e0:	000b      	movs	r3, r1
 80059e2:	015b      	lsls	r3, r3, #5
 80059e4:	1a5b      	subs	r3, r3, r1
 80059e6:	019a      	lsls	r2, r3, #6
 80059e8:	1ad2      	subs	r2, r2, r3
 80059ea:	00d2      	lsls	r2, r2, #3
 80059ec:	1853      	adds	r3, r2, r1
 80059ee:	3380      	adds	r3, #128	@ 0x80
 80059f0:	0a1b      	lsrs	r3, r3, #8
 80059f2:	18c3      	adds	r3, r0, r3
 80059f4:	607b      	str	r3, [r7, #4]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 80059f6:	2100      	movs	r1, #0
 80059f8:	2009      	movs	r0, #9
 80059fa:	f001 fb5b 	bl	80070b4 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80059fe:	203b      	movs	r0, #59	@ 0x3b
 8005a00:	f001 fb6c 	bl	80070dc <SX1276Read>
 8005a04:	0003      	movs	r3, r0
 8005a06:	001a      	movs	r2, r3
 8005a08:	2340      	movs	r3, #64	@ 0x40
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	0019      	movs	r1, r3
 8005a10:	203b      	movs	r0, #59	@ 0x3b
 8005a12:	f001 fb4f 	bl	80070b4 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8005a16:	46c0      	nop			@ (mov r8, r8)
 8005a18:	203b      	movs	r0, #59	@ 0x3b
 8005a1a:	f001 fb5f 	bl	80070dc <SX1276Read>
 8005a1e:	0003      	movs	r3, r0
 8005a20:	001a      	movs	r2, r3
 8005a22:	2320      	movs	r3, #32
 8005a24:	4013      	ands	r3, r2
 8005a26:	2b20      	cmp	r3, #32
 8005a28:	d0f6      	beq.n	8005a18 <RxChainCalibration+0x90>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 8005a2a:	4b14      	ldr	r3, [pc, #80]	@ (8005a7c <RxChainCalibration+0xf4>)
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	f7ff fed5 	bl	80057dc <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8005a32:	203b      	movs	r0, #59	@ 0x3b
 8005a34:	f001 fb52 	bl	80070dc <SX1276Read>
 8005a38:	0003      	movs	r3, r0
 8005a3a:	001a      	movs	r2, r3
 8005a3c:	2340      	movs	r3, #64	@ 0x40
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	0019      	movs	r1, r3
 8005a44:	203b      	movs	r0, #59	@ 0x3b
 8005a46:	f001 fb35 	bl	80070b4 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8005a4a:	46c0      	nop			@ (mov r8, r8)
 8005a4c:	203b      	movs	r0, #59	@ 0x3b
 8005a4e:	f001 fb45 	bl	80070dc <SX1276Read>
 8005a52:	0003      	movs	r3, r0
 8005a54:	001a      	movs	r2, r3
 8005a56:	2320      	movs	r3, #32
 8005a58:	4013      	ands	r3, r2
 8005a5a:	2b20      	cmp	r3, #32
 8005a5c:	d0f6      	beq.n	8005a4c <RxChainCalibration+0xc4>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8005a5e:	2317      	movs	r3, #23
 8005a60:	18fb      	adds	r3, r7, r3
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	0019      	movs	r1, r3
 8005a66:	2009      	movs	r0, #9
 8005a68:	f001 fb24 	bl	80070b4 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	0018      	movs	r0, r3
 8005a70:	f7ff feb4 	bl	80057dc <SX1276SetChannel>
}
 8005a74:	46c0      	nop			@ (mov r8, r8)
 8005a76:	46bd      	mov	sp, r7
 8005a78:	b007      	add	sp, #28
 8005a7a:	bd90      	pop	{r4, r7, pc}
 8005a7c:	33bca100 	.word	0x33bca100

08005a80 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8005a88:	230f      	movs	r3, #15
 8005a8a:	18fb      	adds	r3, r7, r3
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	e01f      	b.n	8005ad2 <GetFskBandwidthRegValue+0x52>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8005a92:	210f      	movs	r1, #15
 8005a94:	187b      	adds	r3, r7, r1
 8005a96:	781a      	ldrb	r2, [r3, #0]
 8005a98:	4b13      	ldr	r3, [pc, #76]	@ (8005ae8 <GetFskBandwidthRegValue+0x68>)
 8005a9a:	00d2      	lsls	r2, r2, #3
 8005a9c:	58d3      	ldr	r3, [r2, r3]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d310      	bcc.n	8005ac6 <GetFskBandwidthRegValue+0x46>
 8005aa4:	187b      	adds	r3, r7, r1
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8005ae8 <GetFskBandwidthRegValue+0x68>)
 8005aac:	00d2      	lsls	r2, r2, #3
 8005aae:	58d3      	ldr	r3, [r2, r3]
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d207      	bcs.n	8005ac6 <GetFskBandwidthRegValue+0x46>
        {
            return FskBandwidths[i].RegValue;
 8005ab6:	187b      	adds	r3, r7, r1
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	4a0b      	ldr	r2, [pc, #44]	@ (8005ae8 <GetFskBandwidthRegValue+0x68>)
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	18d3      	adds	r3, r2, r3
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	e00c      	b.n	8005ae0 <GetFskBandwidthRegValue+0x60>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8005ac6:	210f      	movs	r1, #15
 8005ac8:	187b      	adds	r3, r7, r1
 8005aca:	781a      	ldrb	r2, [r3, #0]
 8005acc:	187b      	adds	r3, r7, r1
 8005ace:	3201      	adds	r2, #1
 8005ad0:	701a      	strb	r2, [r3, #0]
 8005ad2:	230f      	movs	r3, #15
 8005ad4:	18fb      	adds	r3, r7, r3
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b14      	cmp	r3, #20
 8005ada:	d9da      	bls.n	8005a92 <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8005adc:	46c0      	nop			@ (mov r8, r8)
 8005ade:	e7fd      	b.n	8005adc <GetFskBandwidthRegValue+0x5c>
}
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	b004      	add	sp, #16
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	0801ae70 	.word	0x0801ae70

08005aec <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8005aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60b9      	str	r1, [r7, #8]
 8005af4:	607a      	str	r2, [r7, #4]
 8005af6:	0019      	movs	r1, r3
 8005af8:	240f      	movs	r4, #15
 8005afa:	193b      	adds	r3, r7, r4
 8005afc:	1c02      	adds	r2, r0, #0
 8005afe:	701a      	strb	r2, [r3, #0]
 8005b00:	230e      	movs	r3, #14
 8005b02:	18fb      	adds	r3, r7, r3
 8005b04:	1c0a      	adds	r2, r1, #0
 8005b06:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8005b08:	193b      	adds	r3, r7, r4
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	f001 fa77 	bl	8007000 <SX1276SetModem>

    switch( modem )
 8005b12:	193b      	adds	r3, r7, r4
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <SX1276SetRxConfig+0x36>
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d100      	bne.n	8005b20 <SX1276SetRxConfig+0x34>
 8005b1e:	e0ef      	b.n	8005d00 <SX1276SetRxConfig+0x214>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8005b20:	e252      	b.n	8005fc8 <SX1276SetRxConfig+0x4dc>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8005b22:	4bb1      	ldr	r3, [pc, #708]	@ (8005de8 <SX1276SetRxConfig+0x2fc>)
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8005b28:	4baf      	ldr	r3, [pc, #700]	@ (8005de8 <SX1276SetRxConfig+0x2fc>)
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8005b2e:	4bae      	ldr	r3, [pc, #696]	@ (8005de8 <SX1276SetRxConfig+0x2fc>)
 8005b30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b32:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8005b34:	4bac      	ldr	r3, [pc, #688]	@ (8005de8 <SX1276SetRxConfig+0x2fc>)
 8005b36:	222c      	movs	r2, #44	@ 0x2c
 8005b38:	2508      	movs	r5, #8
 8005b3a:	1952      	adds	r2, r2, r5
 8005b3c:	19d2      	adds	r2, r2, r7
 8005b3e:	2122      	movs	r1, #34	@ 0x22
 8005b40:	7812      	ldrb	r2, [r2, #0]
 8005b42:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8005b44:	4ba8      	ldr	r3, [pc, #672]	@ (8005de8 <SX1276SetRxConfig+0x2fc>)
 8005b46:	2130      	movs	r1, #48	@ 0x30
 8005b48:	194a      	adds	r2, r1, r5
 8005b4a:	19d2      	adds	r2, r2, r7
 8005b4c:	2123      	movs	r1, #35	@ 0x23
 8005b4e:	7812      	ldrb	r2, [r2, #0]
 8005b50:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8005b52:	4ba5      	ldr	r3, [pc, #660]	@ (8005de8 <SX1276SetRxConfig+0x2fc>)
 8005b54:	2034      	movs	r0, #52	@ 0x34
 8005b56:	1942      	adds	r2, r0, r5
 8005b58:	19d2      	adds	r2, r2, r7
 8005b5a:	2124      	movs	r1, #36	@ 0x24
 8005b5c:	7812      	ldrb	r2, [r2, #0]
 8005b5e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8005b60:	4ba1      	ldr	r3, [pc, #644]	@ (8005de8 <SX1276SetRxConfig+0x2fc>)
 8005b62:	2220      	movs	r2, #32
 8005b64:	2020      	movs	r0, #32
 8005b66:	1814      	adds	r4, r2, r0
 8005b68:	197a      	adds	r2, r7, r5
 8005b6a:	18a2      	adds	r2, r4, r2
 8005b6c:	2125      	movs	r1, #37	@ 0x25
 8005b6e:	7812      	ldrb	r2, [r2, #0]
 8005b70:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8005b72:	4b9d      	ldr	r3, [pc, #628]	@ (8005de8 <SX1276SetRxConfig+0x2fc>)
 8005b74:	2224      	movs	r2, #36	@ 0x24
 8005b76:	1810      	adds	r0, r2, r0
 8005b78:	002c      	movs	r4, r5
 8005b7a:	193a      	adds	r2, r7, r4
 8005b7c:	1882      	adds	r2, r0, r2
 8005b7e:	2126      	movs	r1, #38	@ 0x26
 8005b80:	7812      	ldrb	r2, [r2, #0]
 8005b82:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8005b84:	4b98      	ldr	r3, [pc, #608]	@ (8005de8 <SX1276SetRxConfig+0x2fc>)
 8005b86:	2624      	movs	r6, #36	@ 0x24
 8005b88:	1932      	adds	r2, r6, r4
 8005b8a:	19d2      	adds	r2, r2, r7
 8005b8c:	8812      	ldrh	r2, [r2, #0]
 8005b8e:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8005b90:	2328      	movs	r3, #40	@ 0x28
 8005b92:	191b      	adds	r3, r3, r4
 8005b94:	19db      	adds	r3, r3, r7
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	0018      	movs	r0, r3
 8005b9a:	f7fd f941 	bl	8002e20 <__aeabi_i2d>
 8005b9e:	0004      	movs	r4, r0
 8005ba0:	000d      	movs	r5, r1
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fd f96a 	bl	8002e7c <__aeabi_ui2d>
 8005ba8:	0002      	movs	r2, r0
 8005baa:	000b      	movs	r3, r1
 8005bac:	2000      	movs	r0, #0
 8005bae:	498f      	ldr	r1, [pc, #572]	@ (8005dec <SX1276SetRxConfig+0x300>)
 8005bb0:	f7fb fe52 	bl	8001858 <__aeabi_ddiv>
 8005bb4:	0002      	movs	r2, r0
 8005bb6:	000b      	movs	r3, r1
 8005bb8:	0010      	movs	r0, r2
 8005bba:	0019      	movs	r1, r3
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	4b8c      	ldr	r3, [pc, #560]	@ (8005df0 <SX1276SetRxConfig+0x304>)
 8005bc0:	f7fc fa8e 	bl	80020e0 <__aeabi_dmul>
 8005bc4:	0002      	movs	r2, r0
 8005bc6:	000b      	movs	r3, r1
 8005bc8:	0020      	movs	r0, r4
 8005bca:	0029      	movs	r1, r5
 8005bcc:	f7fc fa88 	bl	80020e0 <__aeabi_dmul>
 8005bd0:	0002      	movs	r2, r0
 8005bd2:	000b      	movs	r3, r1
 8005bd4:	0010      	movs	r0, r2
 8005bd6:	0019      	movs	r1, r3
 8005bd8:	2200      	movs	r2, #0
 8005bda:	4b86      	ldr	r3, [pc, #536]	@ (8005df4 <SX1276SetRxConfig+0x308>)
 8005bdc:	f7fc fa80 	bl	80020e0 <__aeabi_dmul>
 8005be0:	0002      	movs	r2, r0
 8005be2:	000b      	movs	r3, r1
 8005be4:	0010      	movs	r0, r2
 8005be6:	0019      	movs	r1, r3
 8005be8:	f7fa fcbe 	bl	8000568 <__aeabi_d2uiz>
 8005bec:	0002      	movs	r2, r0
 8005bee:	4b7e      	ldr	r3, [pc, #504]	@ (8005de8 <SX1276SetRxConfig+0x2fc>)
 8005bf0:	62da      	str	r2, [r3, #44]	@ 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fd f942 	bl	8002e7c <__aeabi_ui2d>
 8005bf8:	0002      	movs	r2, r0
 8005bfa:	000b      	movs	r3, r1
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	497e      	ldr	r1, [pc, #504]	@ (8005df8 <SX1276SetRxConfig+0x30c>)
 8005c00:	f7fb fe2a 	bl	8001858 <__aeabi_ddiv>
 8005c04:	0002      	movs	r2, r0
 8005c06:	000b      	movs	r3, r1
 8005c08:	0010      	movs	r0, r2
 8005c0a:	0019      	movs	r1, r3
 8005c0c:	f7fa fcac 	bl	8000568 <__aeabi_d2uiz>
 8005c10:	0003      	movs	r3, r0
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	0a1b      	lsrs	r3, r3, #8
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	0019      	movs	r1, r3
 8005c1e:	2002      	movs	r0, #2
 8005c20:	f001 fa48 	bl	80070b4 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	0019      	movs	r1, r3
 8005c2a:	2003      	movs	r0, #3
 8005c2c:	f001 fa42 	bl	80070b4 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	0018      	movs	r0, r3
 8005c34:	f7ff ff24 	bl	8005a80 <GetFskBandwidthRegValue>
 8005c38:	0003      	movs	r3, r0
 8005c3a:	0019      	movs	r1, r3
 8005c3c:	2012      	movs	r0, #18
 8005c3e:	f001 fa39 	bl	80070b4 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8005c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c44:	0018      	movs	r0, r3
 8005c46:	f7ff ff1b 	bl	8005a80 <GetFskBandwidthRegValue>
 8005c4a:	0003      	movs	r3, r0
 8005c4c:	0019      	movs	r1, r3
 8005c4e:	2013      	movs	r0, #19
 8005c50:	f001 fa30 	bl	80070b4 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8005c54:	2408      	movs	r4, #8
 8005c56:	1933      	adds	r3, r6, r4
 8005c58:	19db      	adds	r3, r3, r7
 8005c5a:	881b      	ldrh	r3, [r3, #0]
 8005c5c:	0a1b      	lsrs	r3, r3, #8
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	0019      	movs	r1, r3
 8005c64:	2025      	movs	r0, #37	@ 0x25
 8005c66:	f001 fa25 	bl	80070b4 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8005c6a:	1933      	adds	r3, r6, r4
 8005c6c:	19db      	adds	r3, r3, r7
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	0019      	movs	r1, r3
 8005c74:	2026      	movs	r0, #38	@ 0x26
 8005c76:	f001 fa1d 	bl	80070b4 <SX1276Write>
            if( fixLen == 1 )
 8005c7a:	222c      	movs	r2, #44	@ 0x2c
 8005c7c:	1913      	adds	r3, r2, r4
 8005c7e:	19db      	adds	r3, r3, r7
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d008      	beq.n	8005c98 <SX1276SetRxConfig+0x1ac>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8005c86:	2130      	movs	r1, #48	@ 0x30
 8005c88:	190b      	adds	r3, r1, r4
 8005c8a:	19db      	adds	r3, r3, r7
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	0019      	movs	r1, r3
 8005c90:	2032      	movs	r0, #50	@ 0x32
 8005c92:	f001 fa0f 	bl	80070b4 <SX1276Write>
 8005c96:	e003      	b.n	8005ca0 <SX1276SetRxConfig+0x1b4>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8005c98:	21ff      	movs	r1, #255	@ 0xff
 8005c9a:	2032      	movs	r0, #50	@ 0x32
 8005c9c:	f001 fa0a 	bl	80070b4 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8005ca0:	2030      	movs	r0, #48	@ 0x30
 8005ca2:	f001 fa1b 	bl	80070dc <SX1276Read>
 8005ca6:	0003      	movs	r3, r0
 8005ca8:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8005caa:	226f      	movs	r2, #111	@ 0x6f
 8005cac:	4013      	ands	r3, r2
 8005cae:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8005cb0:	232c      	movs	r3, #44	@ 0x2c
 8005cb2:	2108      	movs	r1, #8
 8005cb4:	185b      	adds	r3, r3, r1
 8005cb6:	19db      	adds	r3, r3, r7
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <SX1276SetRxConfig+0x1d6>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	e001      	b.n	8005cc6 <SX1276SetRxConfig+0x1da>
 8005cc2:	2380      	movs	r3, #128	@ 0x80
 8005cc4:	425b      	negs	r3, r3
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8005cca:	2334      	movs	r3, #52	@ 0x34
 8005ccc:	2108      	movs	r1, #8
 8005cce:	185b      	adds	r3, r3, r1
 8005cd0:	19db      	adds	r3, r3, r7
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8005cd6:	b25b      	sxtb	r3, r3
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	0019      	movs	r1, r3
 8005ce0:	2030      	movs	r0, #48	@ 0x30
 8005ce2:	f001 f9e7 	bl	80070b4 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8005ce6:	2031      	movs	r0, #49	@ 0x31
 8005ce8:	f001 f9f8 	bl	80070dc <SX1276Read>
 8005cec:	0003      	movs	r3, r0
 8005cee:	001a      	movs	r2, r3
 8005cf0:	2340      	movs	r3, #64	@ 0x40
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	0019      	movs	r1, r3
 8005cf8:	2031      	movs	r0, #49	@ 0x31
 8005cfa:	f001 f9db 	bl	80070b4 <SX1276Write>
        break;
 8005cfe:	e163      	b.n	8005fc8 <SX1276SetRxConfig+0x4dc>
            if( bandwidth > 2 )
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d901      	bls.n	8005d0a <SX1276SetRxConfig+0x21e>
                while( 1 );
 8005d06:	46c0      	nop			@ (mov r8, r8)
 8005d08:	e7fd      	b.n	8005d06 <SX1276SetRxConfig+0x21a>
            bandwidth += 7;
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	3307      	adds	r3, #7
 8005d0e:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8005d10:	4b35      	ldr	r3, [pc, #212]	@ (8005de8 <SX1276SetRxConfig+0x2fc>)
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	645a      	str	r2, [r3, #68]	@ 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8005d16:	4b34      	ldr	r3, [pc, #208]	@ (8005de8 <SX1276SetRxConfig+0x2fc>)
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	649a      	str	r2, [r3, #72]	@ 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8005d1c:	4b32      	ldr	r3, [pc, #200]	@ (8005de8 <SX1276SetRxConfig+0x2fc>)
 8005d1e:	220e      	movs	r2, #14
 8005d20:	18ba      	adds	r2, r7, r2
 8005d22:	214d      	movs	r1, #77	@ 0x4d
 8005d24:	7812      	ldrb	r2, [r2, #0]
 8005d26:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8005d28:	4b2f      	ldr	r3, [pc, #188]	@ (8005de8 <SX1276SetRxConfig+0x2fc>)
 8005d2a:	2224      	movs	r2, #36	@ 0x24
 8005d2c:	2008      	movs	r0, #8
 8005d2e:	1812      	adds	r2, r2, r0
 8005d30:	19d2      	adds	r2, r2, r7
 8005d32:	214e      	movs	r1, #78	@ 0x4e
 8005d34:	8812      	ldrh	r2, [r2, #0]
 8005d36:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8005d38:	4b2b      	ldr	r3, [pc, #172]	@ (8005de8 <SX1276SetRxConfig+0x2fc>)
 8005d3a:	222c      	movs	r2, #44	@ 0x2c
 8005d3c:	1812      	adds	r2, r2, r0
 8005d3e:	19d2      	adds	r2, r2, r7
 8005d40:	2150      	movs	r1, #80	@ 0x50
 8005d42:	7812      	ldrb	r2, [r2, #0]
 8005d44:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8005d46:	4b28      	ldr	r3, [pc, #160]	@ (8005de8 <SX1276SetRxConfig+0x2fc>)
 8005d48:	2230      	movs	r2, #48	@ 0x30
 8005d4a:	1812      	adds	r2, r2, r0
 8005d4c:	19d2      	adds	r2, r2, r7
 8005d4e:	2151      	movs	r1, #81	@ 0x51
 8005d50:	7812      	ldrb	r2, [r2, #0]
 8005d52:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8005d54:	4b24      	ldr	r3, [pc, #144]	@ (8005de8 <SX1276SetRxConfig+0x2fc>)
 8005d56:	2234      	movs	r2, #52	@ 0x34
 8005d58:	1812      	adds	r2, r2, r0
 8005d5a:	19d2      	adds	r2, r2, r7
 8005d5c:	2152      	movs	r1, #82	@ 0x52
 8005d5e:	7812      	ldrb	r2, [r2, #0]
 8005d60:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8005d62:	4b21      	ldr	r3, [pc, #132]	@ (8005de8 <SX1276SetRxConfig+0x2fc>)
 8005d64:	2238      	movs	r2, #56	@ 0x38
 8005d66:	1812      	adds	r2, r2, r0
 8005d68:	19d2      	adds	r2, r2, r7
 8005d6a:	2153      	movs	r1, #83	@ 0x53
 8005d6c:	7812      	ldrb	r2, [r2, #0]
 8005d6e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8005d70:	4b1d      	ldr	r3, [pc, #116]	@ (8005de8 <SX1276SetRxConfig+0x2fc>)
 8005d72:	223c      	movs	r2, #60	@ 0x3c
 8005d74:	1812      	adds	r2, r2, r0
 8005d76:	19d2      	adds	r2, r2, r7
 8005d78:	2154      	movs	r1, #84	@ 0x54
 8005d7a:	7812      	ldrb	r2, [r2, #0]
 8005d7c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8005d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8005de8 <SX1276SetRxConfig+0x2fc>)
 8005d80:	2220      	movs	r2, #32
 8005d82:	2020      	movs	r0, #32
 8005d84:	1812      	adds	r2, r2, r0
 8005d86:	2108      	movs	r1, #8
 8005d88:	468c      	mov	ip, r1
 8005d8a:	44bc      	add	ip, r7
 8005d8c:	4462      	add	r2, ip
 8005d8e:	2155      	movs	r1, #85	@ 0x55
 8005d90:	7812      	ldrb	r2, [r2, #0]
 8005d92:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8005d94:	4b14      	ldr	r3, [pc, #80]	@ (8005de8 <SX1276SetRxConfig+0x2fc>)
 8005d96:	2224      	movs	r2, #36	@ 0x24
 8005d98:	1812      	adds	r2, r2, r0
 8005d9a:	2108      	movs	r1, #8
 8005d9c:	468c      	mov	ip, r1
 8005d9e:	44bc      	add	ip, r7
 8005da0:	4462      	add	r2, ip
 8005da2:	2156      	movs	r1, #86	@ 0x56
 8005da4:	7812      	ldrb	r2, [r2, #0]
 8005da6:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b0c      	cmp	r3, #12
 8005dac:	d902      	bls.n	8005db4 <SX1276SetRxConfig+0x2c8>
                datarate = 12;
 8005dae:	230c      	movs	r3, #12
 8005db0:	607b      	str	r3, [r7, #4]
 8005db2:	e004      	b.n	8005dbe <SX1276SetRxConfig+0x2d2>
            else if( datarate < 6 )
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b05      	cmp	r3, #5
 8005db8:	d801      	bhi.n	8005dbe <SX1276SetRxConfig+0x2d2>
                datarate = 6;
 8005dba:	2306      	movs	r3, #6
 8005dbc:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b07      	cmp	r3, #7
 8005dc2:	d105      	bne.n	8005dd0 <SX1276SetRxConfig+0x2e4>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b0b      	cmp	r3, #11
 8005dc8:	d008      	beq.n	8005ddc <SX1276SetRxConfig+0x2f0>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b0c      	cmp	r3, #12
 8005dce:	d005      	beq.n	8005ddc <SX1276SetRxConfig+0x2f0>
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2b08      	cmp	r3, #8
 8005dd4:	d112      	bne.n	8005dfc <SX1276SetRxConfig+0x310>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b0c      	cmp	r3, #12
 8005dda:	d10f      	bne.n	8005dfc <SX1276SetRxConfig+0x310>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8005ddc:	4b02      	ldr	r3, [pc, #8]	@ (8005de8 <SX1276SetRxConfig+0x2fc>)
 8005dde:	224c      	movs	r2, #76	@ 0x4c
 8005de0:	2101      	movs	r1, #1
 8005de2:	5499      	strb	r1, [r3, r2]
 8005de4:	e00e      	b.n	8005e04 <SX1276SetRxConfig+0x318>
 8005de6:	46c0      	nop			@ (mov r8, r8)
 8005de8:	200004ec 	.word	0x200004ec
 8005dec:	3ff00000 	.word	0x3ff00000
 8005df0:	40200000 	.word	0x40200000
 8005df4:	408f4000 	.word	0x408f4000
 8005df8:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8005dfc:	4b74      	ldr	r3, [pc, #464]	@ (8005fd0 <SX1276SetRxConfig+0x4e4>)
 8005dfe:	224c      	movs	r2, #76	@ 0x4c
 8005e00:	2100      	movs	r1, #0
 8005e02:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8005e04:	201d      	movs	r0, #29
 8005e06:	f001 f969 	bl	80070dc <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	011b      	lsls	r3, r3, #4
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	230e      	movs	r3, #14
 8005e14:	18fb      	adds	r3, r7, r3
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	18db      	adds	r3, r3, r3
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8005e20:	242c      	movs	r4, #44	@ 0x2c
 8005e22:	2608      	movs	r6, #8
 8005e24:	19a3      	adds	r3, r4, r6
 8005e26:	19db      	adds	r3, r3, r7
 8005e28:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8005e2e:	0019      	movs	r1, r3
 8005e30:	201d      	movs	r0, #29
 8005e32:	f001 f93f 	bl	80070b4 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8005e36:	201e      	movs	r0, #30
 8005e38:	f001 f950 	bl	80070dc <SX1276Read>
 8005e3c:	0003      	movs	r3, r0
 8005e3e:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8005e40:	2308      	movs	r3, #8
 8005e42:	4013      	ands	r3, r2
 8005e44:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8005e52:	2334      	movs	r3, #52	@ 0x34
 8005e54:	199b      	adds	r3, r3, r6
 8005e56:	19db      	adds	r3, r3, r7
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8005e62:	2528      	movs	r5, #40	@ 0x28
 8005e64:	19ab      	adds	r3, r5, r6
 8005e66:	19db      	adds	r3, r3, r7
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	0a1b      	lsrs	r3, r3, #8
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2103      	movs	r1, #3
 8005e72:	400b      	ands	r3, r1
 8005e74:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8005e76:	4313      	orrs	r3, r2
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	0019      	movs	r1, r3
 8005e7c:	201e      	movs	r0, #30
 8005e7e:	f001 f919 	bl	80070b4 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8005e82:	2026      	movs	r0, #38	@ 0x26
 8005e84:	f001 f92a 	bl	80070dc <SX1276Read>
 8005e88:	0003      	movs	r3, r0
 8005e8a:	b25b      	sxtb	r3, r3
 8005e8c:	2208      	movs	r2, #8
 8005e8e:	4393      	bics	r3, r2
 8005e90:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8005e92:	4b4f      	ldr	r3, [pc, #316]	@ (8005fd0 <SX1276SetRxConfig+0x4e4>)
 8005e94:	214c      	movs	r1, #76	@ 0x4c
 8005e96:	5c5b      	ldrb	r3, [r3, r1]
 8005e98:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8005e9a:	b25b      	sxtb	r3, r3
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	0019      	movs	r1, r3
 8005ea4:	2026      	movs	r0, #38	@ 0x26
 8005ea6:	f001 f905 	bl	80070b4 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8005eaa:	19ab      	adds	r3, r5, r6
 8005eac:	19db      	adds	r3, r3, r7
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	0019      	movs	r1, r3
 8005eb4:	201f      	movs	r0, #31
 8005eb6:	f001 f8fd 	bl	80070b4 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8005eba:	2524      	movs	r5, #36	@ 0x24
 8005ebc:	19ab      	adds	r3, r5, r6
 8005ebe:	19db      	adds	r3, r3, r7
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	0a1b      	lsrs	r3, r3, #8
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	0019      	movs	r1, r3
 8005eca:	2020      	movs	r0, #32
 8005ecc:	f001 f8f2 	bl	80070b4 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8005ed0:	19ab      	adds	r3, r5, r6
 8005ed2:	19db      	adds	r3, r3, r7
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	0019      	movs	r1, r3
 8005eda:	2021      	movs	r0, #33	@ 0x21
 8005edc:	f001 f8ea 	bl	80070b4 <SX1276Write>
            if( fixLen == 1 )
 8005ee0:	19a3      	adds	r3, r4, r6
 8005ee2:	19db      	adds	r3, r3, r7
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d007      	beq.n	8005efa <SX1276SetRxConfig+0x40e>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8005eea:	2330      	movs	r3, #48	@ 0x30
 8005eec:	199b      	adds	r3, r3, r6
 8005eee:	19db      	adds	r3, r3, r7
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	0019      	movs	r1, r3
 8005ef4:	2022      	movs	r0, #34	@ 0x22
 8005ef6:	f001 f8dd 	bl	80070b4 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005efa:	4b35      	ldr	r3, [pc, #212]	@ (8005fd0 <SX1276SetRxConfig+0x4e4>)
 8005efc:	2253      	movs	r2, #83	@ 0x53
 8005efe:	5c9b      	ldrb	r3, [r3, r2]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d013      	beq.n	8005f2c <SX1276SetRxConfig+0x440>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8005f04:	2044      	movs	r0, #68	@ 0x44
 8005f06:	f001 f8e9 	bl	80070dc <SX1276Read>
 8005f0a:	0003      	movs	r3, r0
 8005f0c:	001a      	movs	r2, r3
 8005f0e:	2380      	movs	r3, #128	@ 0x80
 8005f10:	425b      	negs	r3, r3
 8005f12:	4313      	orrs	r3, r2
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	0019      	movs	r1, r3
 8005f18:	2044      	movs	r0, #68	@ 0x44
 8005f1a:	f001 f8cb 	bl	80070b4 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8005f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8005fd0 <SX1276SetRxConfig+0x4e4>)
 8005f20:	2254      	movs	r2, #84	@ 0x54
 8005f22:	5c9b      	ldrb	r3, [r3, r2]
 8005f24:	0019      	movs	r1, r3
 8005f26:	2024      	movs	r0, #36	@ 0x24
 8005f28:	f001 f8c4 	bl	80070b4 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	2b09      	cmp	r3, #9
 8005f30:	d10d      	bne.n	8005f4e <SX1276SetRxConfig+0x462>
 8005f32:	4b27      	ldr	r3, [pc, #156]	@ (8005fd0 <SX1276SetRxConfig+0x4e4>)
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	4a27      	ldr	r2, [pc, #156]	@ (8005fd4 <SX1276SetRxConfig+0x4e8>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d908      	bls.n	8005f4e <SX1276SetRxConfig+0x462>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8005f3c:	2102      	movs	r1, #2
 8005f3e:	2036      	movs	r0, #54	@ 0x36
 8005f40:	f001 f8b8 	bl	80070b4 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8005f44:	2164      	movs	r1, #100	@ 0x64
 8005f46:	203a      	movs	r0, #58	@ 0x3a
 8005f48:	f001 f8b4 	bl	80070b4 <SX1276Write>
 8005f4c:	e00f      	b.n	8005f6e <SX1276SetRxConfig+0x482>
            else if( bandwidth == 9 )
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	2b09      	cmp	r3, #9
 8005f52:	d108      	bne.n	8005f66 <SX1276SetRxConfig+0x47a>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8005f54:	2102      	movs	r1, #2
 8005f56:	2036      	movs	r0, #54	@ 0x36
 8005f58:	f001 f8ac 	bl	80070b4 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8005f5c:	217f      	movs	r1, #127	@ 0x7f
 8005f5e:	203a      	movs	r0, #58	@ 0x3a
 8005f60:	f001 f8a8 	bl	80070b4 <SX1276Write>
 8005f64:	e003      	b.n	8005f6e <SX1276SetRxConfig+0x482>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8005f66:	2103      	movs	r1, #3
 8005f68:	2036      	movs	r0, #54	@ 0x36
 8005f6a:	f001 f8a3 	bl	80070b4 <SX1276Write>
            if( datarate == 6 )
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b06      	cmp	r3, #6
 8005f72:	d114      	bne.n	8005f9e <SX1276SetRxConfig+0x4b2>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8005f74:	2031      	movs	r0, #49	@ 0x31
 8005f76:	f001 f8b1 	bl	80070dc <SX1276Read>
 8005f7a:	0003      	movs	r3, r0
 8005f7c:	b25b      	sxtb	r3, r3
 8005f7e:	2207      	movs	r2, #7
 8005f80:	4393      	bics	r3, r2
 8005f82:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8005f84:	2205      	movs	r2, #5
 8005f86:	4313      	orrs	r3, r2
 8005f88:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	0019      	movs	r1, r3
 8005f8e:	2031      	movs	r0, #49	@ 0x31
 8005f90:	f001 f890 	bl	80070b4 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8005f94:	210c      	movs	r1, #12
 8005f96:	2037      	movs	r0, #55	@ 0x37
 8005f98:	f001 f88c 	bl	80070b4 <SX1276Write>
        break;
 8005f9c:	e013      	b.n	8005fc6 <SX1276SetRxConfig+0x4da>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8005f9e:	2031      	movs	r0, #49	@ 0x31
 8005fa0:	f001 f89c 	bl	80070dc <SX1276Read>
 8005fa4:	0003      	movs	r3, r0
 8005fa6:	b25b      	sxtb	r3, r3
 8005fa8:	2207      	movs	r2, #7
 8005faa:	4393      	bics	r3, r2
 8005fac:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8005fae:	2203      	movs	r2, #3
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	0019      	movs	r1, r3
 8005fb8:	2031      	movs	r0, #49	@ 0x31
 8005fba:	f001 f87b 	bl	80070b4 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8005fbe:	210a      	movs	r1, #10
 8005fc0:	2037      	movs	r0, #55	@ 0x37
 8005fc2:	f001 f877 	bl	80070b4 <SX1276Write>
        break;
 8005fc6:	46c0      	nop			@ (mov r8, r8)
}
 8005fc8:	46c0      	nop			@ (mov r8, r8)
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	b005      	add	sp, #20
 8005fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fd0:	200004ec 	.word	0x200004ec
 8005fd4:	1f4add40 	.word	0x1f4add40

08005fd8 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8005fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60ba      	str	r2, [r7, #8]
 8005fe0:	607b      	str	r3, [r7, #4]
 8005fe2:	240f      	movs	r4, #15
 8005fe4:	193b      	adds	r3, r7, r4
 8005fe6:	1c02      	adds	r2, r0, #0
 8005fe8:	701a      	strb	r2, [r3, #0]
 8005fea:	250e      	movs	r5, #14
 8005fec:	197b      	adds	r3, r7, r5
 8005fee:	1c0a      	adds	r2, r1, #0
 8005ff0:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8005ff2:	193b      	adds	r3, r7, r4
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	0018      	movs	r0, r3
 8005ff8:	f001 f802 	bl	8007000 <SX1276SetModem>

    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 8005ffc:	4ba6      	ldr	r3, [pc, #664]	@ (8006298 <SX1276SetTxConfig+0x2c0>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	197a      	adds	r2, r7, r5
 8006004:	7812      	ldrb	r2, [r2, #0]
 8006006:	b252      	sxtb	r2, r2
 8006008:	0010      	movs	r0, r2
 800600a:	4798      	blx	r3

    switch( modem )
 800600c:	193b      	adds	r3, r7, r4
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <SX1276SetTxConfig+0x44>
 8006014:	2b01      	cmp	r3, #1
 8006016:	d100      	bne.n	800601a <SX1276SetTxConfig+0x42>
 8006018:	e0c1      	b.n	800619e <SX1276SetTxConfig+0x1c6>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 800601a:	e1f9      	b.n	8006410 <SX1276SetTxConfig+0x438>
            SX1276.Settings.Fsk.Power = power;
 800601c:	4b9f      	ldr	r3, [pc, #636]	@ (800629c <SX1276SetTxConfig+0x2c4>)
 800601e:	220e      	movs	r2, #14
 8006020:	18ba      	adds	r2, r7, r2
 8006022:	7812      	ldrb	r2, [r2, #0]
 8006024:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 8006026:	4b9d      	ldr	r3, [pc, #628]	@ (800629c <SX1276SetTxConfig+0x2c4>)
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800602c:	4b9b      	ldr	r3, [pc, #620]	@ (800629c <SX1276SetTxConfig+0x2c4>)
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8006032:	4b9a      	ldr	r3, [pc, #616]	@ (800629c <SX1276SetTxConfig+0x2c4>)
 8006034:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006036:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8006038:	4b98      	ldr	r3, [pc, #608]	@ (800629c <SX1276SetTxConfig+0x2c4>)
 800603a:	2420      	movs	r4, #32
 800603c:	2608      	movs	r6, #8
 800603e:	19a2      	adds	r2, r4, r6
 8006040:	2108      	movs	r1, #8
 8006042:	468c      	mov	ip, r1
 8006044:	44bc      	add	ip, r7
 8006046:	4462      	add	r2, ip
 8006048:	8812      	ldrh	r2, [r2, #0]
 800604a:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800604c:	4b93      	ldr	r3, [pc, #588]	@ (800629c <SX1276SetTxConfig+0x2c4>)
 800604e:	2524      	movs	r5, #36	@ 0x24
 8006050:	19aa      	adds	r2, r5, r6
 8006052:	2108      	movs	r1, #8
 8006054:	468c      	mov	ip, r1
 8006056:	44bc      	add	ip, r7
 8006058:	4462      	add	r2, ip
 800605a:	2122      	movs	r1, #34	@ 0x22
 800605c:	7812      	ldrb	r2, [r2, #0]
 800605e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8006060:	4b8e      	ldr	r3, [pc, #568]	@ (800629c <SX1276SetTxConfig+0x2c4>)
 8006062:	2228      	movs	r2, #40	@ 0x28
 8006064:	1992      	adds	r2, r2, r6
 8006066:	2108      	movs	r1, #8
 8006068:	468c      	mov	ip, r1
 800606a:	44bc      	add	ip, r7
 800606c:	4462      	add	r2, ip
 800606e:	2124      	movs	r1, #36	@ 0x24
 8006070:	7812      	ldrb	r2, [r2, #0]
 8006072:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8006074:	4b89      	ldr	r3, [pc, #548]	@ (800629c <SX1276SetTxConfig+0x2c4>)
 8006076:	2234      	movs	r2, #52	@ 0x34
 8006078:	1992      	adds	r2, r2, r6
 800607a:	2108      	movs	r1, #8
 800607c:	468c      	mov	ip, r1
 800607e:	44bc      	add	ip, r7
 8006080:	4462      	add	r2, ip
 8006082:	2125      	movs	r1, #37	@ 0x25
 8006084:	7812      	ldrb	r2, [r2, #0]
 8006086:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8006088:	4b84      	ldr	r3, [pc, #528]	@ (800629c <SX1276SetTxConfig+0x2c4>)
 800608a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800608c:	629a      	str	r2, [r3, #40]	@ 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 800608e:	68b8      	ldr	r0, [r7, #8]
 8006090:	f7fc fef4 	bl	8002e7c <__aeabi_ui2d>
 8006094:	2200      	movs	r2, #0
 8006096:	4b82      	ldr	r3, [pc, #520]	@ (80062a0 <SX1276SetTxConfig+0x2c8>)
 8006098:	f7fb fbde 	bl	8001858 <__aeabi_ddiv>
 800609c:	0002      	movs	r2, r0
 800609e:	000b      	movs	r3, r1
 80060a0:	0010      	movs	r0, r2
 80060a2:	0019      	movs	r1, r3
 80060a4:	f7fa fa60 	bl	8000568 <__aeabi_d2uiz>
 80060a8:	0003      	movs	r3, r0
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	0a1b      	lsrs	r3, r3, #8
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	0019      	movs	r1, r3
 80060b6:	2004      	movs	r0, #4
 80060b8:	f000 fffc 	bl	80070b4 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	0019      	movs	r1, r3
 80060c2:	2005      	movs	r0, #5
 80060c4:	f000 fff6 	bl	80070b4 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80060c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060ca:	f7fc fed7 	bl	8002e7c <__aeabi_ui2d>
 80060ce:	0002      	movs	r2, r0
 80060d0:	000b      	movs	r3, r1
 80060d2:	2000      	movs	r0, #0
 80060d4:	4973      	ldr	r1, [pc, #460]	@ (80062a4 <SX1276SetTxConfig+0x2cc>)
 80060d6:	f7fb fbbf 	bl	8001858 <__aeabi_ddiv>
 80060da:	0002      	movs	r2, r0
 80060dc:	000b      	movs	r3, r1
 80060de:	0010      	movs	r0, r2
 80060e0:	0019      	movs	r1, r3
 80060e2:	f7fa fa41 	bl	8000568 <__aeabi_d2uiz>
 80060e6:	0003      	movs	r3, r0
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	62bb      	str	r3, [r7, #40]	@ 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80060ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ee:	0a1b      	lsrs	r3, r3, #8
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	0019      	movs	r1, r3
 80060f4:	2002      	movs	r0, #2
 80060f6:	f000 ffdd 	bl	80070b4 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80060fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	0019      	movs	r1, r3
 8006100:	2003      	movs	r0, #3
 8006102:	f000 ffd7 	bl	80070b4 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8006106:	19a3      	adds	r3, r4, r6
 8006108:	2208      	movs	r2, #8
 800610a:	4694      	mov	ip, r2
 800610c:	44bc      	add	ip, r7
 800610e:	4463      	add	r3, ip
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	0a1b      	lsrs	r3, r3, #8
 8006114:	b29b      	uxth	r3, r3
 8006116:	b2db      	uxtb	r3, r3
 8006118:	0019      	movs	r1, r3
 800611a:	2025      	movs	r0, #37	@ 0x25
 800611c:	f000 ffca 	bl	80070b4 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8006120:	19a3      	adds	r3, r4, r6
 8006122:	2208      	movs	r2, #8
 8006124:	4694      	mov	ip, r2
 8006126:	44bc      	add	ip, r7
 8006128:	4463      	add	r3, ip
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	b2db      	uxtb	r3, r3
 800612e:	0019      	movs	r1, r3
 8006130:	2026      	movs	r0, #38	@ 0x26
 8006132:	f000 ffbf 	bl	80070b4 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8006136:	2030      	movs	r0, #48	@ 0x30
 8006138:	f000 ffd0 	bl	80070dc <SX1276Read>
 800613c:	0003      	movs	r3, r0
 800613e:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8006140:	226f      	movs	r2, #111	@ 0x6f
 8006142:	4013      	ands	r3, r2
 8006144:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8006146:	19ab      	adds	r3, r5, r6
 8006148:	2108      	movs	r1, #8
 800614a:	468c      	mov	ip, r1
 800614c:	44bc      	add	ip, r7
 800614e:	4463      	add	r3, ip
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <SX1276SetTxConfig+0x182>
 8006156:	2300      	movs	r3, #0
 8006158:	e001      	b.n	800615e <SX1276SetTxConfig+0x186>
 800615a:	2380      	movs	r3, #128	@ 0x80
 800615c:	425b      	negs	r3, r3
 800615e:	4313      	orrs	r3, r2
 8006160:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8006162:	2328      	movs	r3, #40	@ 0x28
 8006164:	2108      	movs	r1, #8
 8006166:	185b      	adds	r3, r3, r1
 8006168:	2108      	movs	r1, #8
 800616a:	468c      	mov	ip, r1
 800616c:	44bc      	add	ip, r7
 800616e:	4463      	add	r3, ip
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8006174:	b25b      	sxtb	r3, r3
 8006176:	4313      	orrs	r3, r2
 8006178:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 800617a:	b2db      	uxtb	r3, r3
 800617c:	0019      	movs	r1, r3
 800617e:	2030      	movs	r0, #48	@ 0x30
 8006180:	f000 ff98 	bl	80070b4 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8006184:	2031      	movs	r0, #49	@ 0x31
 8006186:	f000 ffa9 	bl	80070dc <SX1276Read>
 800618a:	0003      	movs	r3, r0
 800618c:	001a      	movs	r2, r3
 800618e:	2340      	movs	r3, #64	@ 0x40
 8006190:	4313      	orrs	r3, r2
 8006192:	b2db      	uxtb	r3, r3
 8006194:	0019      	movs	r1, r3
 8006196:	2031      	movs	r0, #49	@ 0x31
 8006198:	f000 ff8c 	bl	80070b4 <SX1276Write>
        break;
 800619c:	e138      	b.n	8006410 <SX1276SetTxConfig+0x438>
            SX1276.Settings.LoRa.Power = power;
 800619e:	4b3f      	ldr	r3, [pc, #252]	@ (800629c <SX1276SetTxConfig+0x2c4>)
 80061a0:	220e      	movs	r2, #14
 80061a2:	18ba      	adds	r2, r7, r2
 80061a4:	2140      	movs	r1, #64	@ 0x40
 80061a6:	7812      	ldrb	r2, [r2, #0]
 80061a8:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d901      	bls.n	80061b4 <SX1276SetTxConfig+0x1dc>
                while( 1 );
 80061b0:	46c0      	nop			@ (mov r8, r8)
 80061b2:	e7fd      	b.n	80061b0 <SX1276SetTxConfig+0x1d8>
            bandwidth += 7;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	3307      	adds	r3, #7
 80061b8:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80061ba:	4b38      	ldr	r3, [pc, #224]	@ (800629c <SX1276SetTxConfig+0x2c4>)
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	645a      	str	r2, [r3, #68]	@ 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 80061c0:	4b36      	ldr	r3, [pc, #216]	@ (800629c <SX1276SetTxConfig+0x2c4>)
 80061c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061c4:	649a      	str	r2, [r3, #72]	@ 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 80061c6:	4b35      	ldr	r3, [pc, #212]	@ (800629c <SX1276SetTxConfig+0x2c4>)
 80061c8:	221c      	movs	r2, #28
 80061ca:	2008      	movs	r0, #8
 80061cc:	1812      	adds	r2, r2, r0
 80061ce:	2108      	movs	r1, #8
 80061d0:	468c      	mov	ip, r1
 80061d2:	44bc      	add	ip, r7
 80061d4:	4462      	add	r2, ip
 80061d6:	214d      	movs	r1, #77	@ 0x4d
 80061d8:	7812      	ldrb	r2, [r2, #0]
 80061da:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80061dc:	4b2f      	ldr	r3, [pc, #188]	@ (800629c <SX1276SetTxConfig+0x2c4>)
 80061de:	2220      	movs	r2, #32
 80061e0:	1812      	adds	r2, r2, r0
 80061e2:	2108      	movs	r1, #8
 80061e4:	468c      	mov	ip, r1
 80061e6:	44bc      	add	ip, r7
 80061e8:	4462      	add	r2, ip
 80061ea:	214e      	movs	r1, #78	@ 0x4e
 80061ec:	8812      	ldrh	r2, [r2, #0]
 80061ee:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 80061f0:	4b2a      	ldr	r3, [pc, #168]	@ (800629c <SX1276SetTxConfig+0x2c4>)
 80061f2:	2224      	movs	r2, #36	@ 0x24
 80061f4:	1812      	adds	r2, r2, r0
 80061f6:	2108      	movs	r1, #8
 80061f8:	468c      	mov	ip, r1
 80061fa:	44bc      	add	ip, r7
 80061fc:	4462      	add	r2, ip
 80061fe:	2150      	movs	r1, #80	@ 0x50
 8006200:	7812      	ldrb	r2, [r2, #0]
 8006202:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8006204:	4b25      	ldr	r3, [pc, #148]	@ (800629c <SX1276SetTxConfig+0x2c4>)
 8006206:	222c      	movs	r2, #44	@ 0x2c
 8006208:	1812      	adds	r2, r2, r0
 800620a:	2108      	movs	r1, #8
 800620c:	468c      	mov	ip, r1
 800620e:	44bc      	add	ip, r7
 8006210:	4462      	add	r2, ip
 8006212:	2153      	movs	r1, #83	@ 0x53
 8006214:	7812      	ldrb	r2, [r2, #0]
 8006216:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8006218:	4b20      	ldr	r3, [pc, #128]	@ (800629c <SX1276SetTxConfig+0x2c4>)
 800621a:	2230      	movs	r2, #48	@ 0x30
 800621c:	1812      	adds	r2, r2, r0
 800621e:	2108      	movs	r1, #8
 8006220:	468c      	mov	ip, r1
 8006222:	44bc      	add	ip, r7
 8006224:	4462      	add	r2, ip
 8006226:	2154      	movs	r1, #84	@ 0x54
 8006228:	7812      	ldrb	r2, [r2, #0]
 800622a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800622c:	4b1b      	ldr	r3, [pc, #108]	@ (800629c <SX1276SetTxConfig+0x2c4>)
 800622e:	2228      	movs	r2, #40	@ 0x28
 8006230:	1812      	adds	r2, r2, r0
 8006232:	2108      	movs	r1, #8
 8006234:	468c      	mov	ip, r1
 8006236:	44bc      	add	ip, r7
 8006238:	4462      	add	r2, ip
 800623a:	2152      	movs	r1, #82	@ 0x52
 800623c:	7812      	ldrb	r2, [r2, #0]
 800623e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8006240:	4b16      	ldr	r3, [pc, #88]	@ (800629c <SX1276SetTxConfig+0x2c4>)
 8006242:	2234      	movs	r2, #52	@ 0x34
 8006244:	1812      	adds	r2, r2, r0
 8006246:	2108      	movs	r1, #8
 8006248:	468c      	mov	ip, r1
 800624a:	44bc      	add	ip, r7
 800624c:	4462      	add	r2, ip
 800624e:	2155      	movs	r1, #85	@ 0x55
 8006250:	7812      	ldrb	r2, [r2, #0]
 8006252:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8006254:	4b11      	ldr	r3, [pc, #68]	@ (800629c <SX1276SetTxConfig+0x2c4>)
 8006256:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006258:	659a      	str	r2, [r3, #88]	@ 0x58
            if( datarate > 12 )
 800625a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800625c:	2b0c      	cmp	r3, #12
 800625e:	d902      	bls.n	8006266 <SX1276SetTxConfig+0x28e>
                datarate = 12;
 8006260:	230c      	movs	r3, #12
 8006262:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006264:	e004      	b.n	8006270 <SX1276SetTxConfig+0x298>
            else if( datarate < 6 )
 8006266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006268:	2b05      	cmp	r3, #5
 800626a:	d801      	bhi.n	8006270 <SX1276SetTxConfig+0x298>
                datarate = 6;
 800626c:	2306      	movs	r3, #6
 800626e:	62bb      	str	r3, [r7, #40]	@ 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b07      	cmp	r3, #7
 8006274:	d105      	bne.n	8006282 <SX1276SetTxConfig+0x2aa>
 8006276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006278:	2b0b      	cmp	r3, #11
 800627a:	d008      	beq.n	800628e <SX1276SetTxConfig+0x2b6>
 800627c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627e:	2b0c      	cmp	r3, #12
 8006280:	d005      	beq.n	800628e <SX1276SetTxConfig+0x2b6>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b08      	cmp	r3, #8
 8006286:	d10f      	bne.n	80062a8 <SX1276SetTxConfig+0x2d0>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8006288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628a:	2b0c      	cmp	r3, #12
 800628c:	d10c      	bne.n	80062a8 <SX1276SetTxConfig+0x2d0>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800628e:	4b03      	ldr	r3, [pc, #12]	@ (800629c <SX1276SetTxConfig+0x2c4>)
 8006290:	224c      	movs	r2, #76	@ 0x4c
 8006292:	2101      	movs	r1, #1
 8006294:	5499      	strb	r1, [r3, r2]
 8006296:	e00b      	b.n	80062b0 <SX1276SetTxConfig+0x2d8>
 8006298:	200004e8 	.word	0x200004e8
 800629c:	200004ec 	.word	0x200004ec
 80062a0:	404e8480 	.word	0x404e8480
 80062a4:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80062a8:	4b5b      	ldr	r3, [pc, #364]	@ (8006418 <SX1276SetTxConfig+0x440>)
 80062aa:	224c      	movs	r2, #76	@ 0x4c
 80062ac:	2100      	movs	r1, #0
 80062ae:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80062b0:	4b59      	ldr	r3, [pc, #356]	@ (8006418 <SX1276SetTxConfig+0x440>)
 80062b2:	2253      	movs	r2, #83	@ 0x53
 80062b4:	5c9b      	ldrb	r3, [r3, r2]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d013      	beq.n	80062e2 <SX1276SetTxConfig+0x30a>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80062ba:	2044      	movs	r0, #68	@ 0x44
 80062bc:	f000 ff0e 	bl	80070dc <SX1276Read>
 80062c0:	0003      	movs	r3, r0
 80062c2:	001a      	movs	r2, r3
 80062c4:	2380      	movs	r3, #128	@ 0x80
 80062c6:	425b      	negs	r3, r3
 80062c8:	4313      	orrs	r3, r2
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	0019      	movs	r1, r3
 80062ce:	2044      	movs	r0, #68	@ 0x44
 80062d0:	f000 fef0 	bl	80070b4 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80062d4:	4b50      	ldr	r3, [pc, #320]	@ (8006418 <SX1276SetTxConfig+0x440>)
 80062d6:	2254      	movs	r2, #84	@ 0x54
 80062d8:	5c9b      	ldrb	r3, [r3, r2]
 80062da:	0019      	movs	r1, r3
 80062dc:	2024      	movs	r0, #36	@ 0x24
 80062de:	f000 fee9 	bl	80070b4 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80062e2:	201d      	movs	r0, #29
 80062e4:	f000 fefa 	bl	80070dc <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	011b      	lsls	r3, r3, #4
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	231c      	movs	r3, #28
 80062f2:	2508      	movs	r5, #8
 80062f4:	195b      	adds	r3, r3, r5
 80062f6:	2108      	movs	r1, #8
 80062f8:	468c      	mov	ip, r1
 80062fa:	44bc      	add	ip, r7
 80062fc:	4463      	add	r3, ip
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	18db      	adds	r3, r3, r3
 8006302:	b2db      	uxtb	r3, r3
 8006304:	4313      	orrs	r3, r2
 8006306:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8006308:	2324      	movs	r3, #36	@ 0x24
 800630a:	195b      	adds	r3, r3, r5
 800630c:	2108      	movs	r1, #8
 800630e:	468c      	mov	ip, r1
 8006310:	44bc      	add	ip, r7
 8006312:	4463      	add	r3, ip
 8006314:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8006316:	4313      	orrs	r3, r2
 8006318:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800631a:	0019      	movs	r1, r3
 800631c:	201d      	movs	r0, #29
 800631e:	f000 fec9 	bl	80070b4 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8006322:	201e      	movs	r0, #30
 8006324:	f000 feda 	bl	80070dc <SX1276Read>
 8006328:	0003      	movs	r3, r0
 800632a:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 800632c:	230b      	movs	r3, #11
 800632e:	4013      	ands	r3, r2
 8006330:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8006332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006334:	b2db      	uxtb	r3, r3
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 800633a:	4313      	orrs	r3, r2
 800633c:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800633e:	2328      	movs	r3, #40	@ 0x28
 8006340:	195b      	adds	r3, r3, r5
 8006342:	2108      	movs	r1, #8
 8006344:	468c      	mov	ip, r1
 8006346:	44bc      	add	ip, r7
 8006348:	4463      	add	r3, ip
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8006350:	4313      	orrs	r3, r2
 8006352:	b2db      	uxtb	r3, r3
 8006354:	0019      	movs	r1, r3
 8006356:	201e      	movs	r0, #30
 8006358:	f000 feac 	bl	80070b4 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800635c:	2026      	movs	r0, #38	@ 0x26
 800635e:	f000 febd 	bl	80070dc <SX1276Read>
 8006362:	0003      	movs	r3, r0
 8006364:	b25b      	sxtb	r3, r3
 8006366:	2208      	movs	r2, #8
 8006368:	4393      	bics	r3, r2
 800636a:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800636c:	4b2a      	ldr	r3, [pc, #168]	@ (8006418 <SX1276SetTxConfig+0x440>)
 800636e:	214c      	movs	r1, #76	@ 0x4c
 8006370:	5c5b      	ldrb	r3, [r3, r1]
 8006372:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8006374:	b25b      	sxtb	r3, r3
 8006376:	4313      	orrs	r3, r2
 8006378:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800637a:	b2db      	uxtb	r3, r3
 800637c:	0019      	movs	r1, r3
 800637e:	2026      	movs	r0, #38	@ 0x26
 8006380:	f000 fe98 	bl	80070b4 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8006384:	2420      	movs	r4, #32
 8006386:	1963      	adds	r3, r4, r5
 8006388:	2208      	movs	r2, #8
 800638a:	4694      	mov	ip, r2
 800638c:	44bc      	add	ip, r7
 800638e:	4463      	add	r3, ip
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	0a1b      	lsrs	r3, r3, #8
 8006394:	b29b      	uxth	r3, r3
 8006396:	b2db      	uxtb	r3, r3
 8006398:	0019      	movs	r1, r3
 800639a:	2020      	movs	r0, #32
 800639c:	f000 fe8a 	bl	80070b4 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 80063a0:	1963      	adds	r3, r4, r5
 80063a2:	2208      	movs	r2, #8
 80063a4:	4694      	mov	ip, r2
 80063a6:	44bc      	add	ip, r7
 80063a8:	4463      	add	r3, ip
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	0019      	movs	r1, r3
 80063b0:	2021      	movs	r0, #33	@ 0x21
 80063b2:	f000 fe7f 	bl	80070b4 <SX1276Write>
            if( datarate == 6 )
 80063b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b8:	2b06      	cmp	r3, #6
 80063ba:	d114      	bne.n	80063e6 <SX1276SetTxConfig+0x40e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80063bc:	2031      	movs	r0, #49	@ 0x31
 80063be:	f000 fe8d 	bl	80070dc <SX1276Read>
 80063c2:	0003      	movs	r3, r0
 80063c4:	b25b      	sxtb	r3, r3
 80063c6:	2207      	movs	r2, #7
 80063c8:	4393      	bics	r3, r2
 80063ca:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80063cc:	2205      	movs	r2, #5
 80063ce:	4313      	orrs	r3, r2
 80063d0:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	0019      	movs	r1, r3
 80063d6:	2031      	movs	r0, #49	@ 0x31
 80063d8:	f000 fe6c 	bl	80070b4 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80063dc:	210c      	movs	r1, #12
 80063de:	2037      	movs	r0, #55	@ 0x37
 80063e0:	f000 fe68 	bl	80070b4 <SX1276Write>
        break;
 80063e4:	e013      	b.n	800640e <SX1276SetTxConfig+0x436>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80063e6:	2031      	movs	r0, #49	@ 0x31
 80063e8:	f000 fe78 	bl	80070dc <SX1276Read>
 80063ec:	0003      	movs	r3, r0
 80063ee:	b25b      	sxtb	r3, r3
 80063f0:	2207      	movs	r2, #7
 80063f2:	4393      	bics	r3, r2
 80063f4:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80063f6:	2203      	movs	r2, #3
 80063f8:	4313      	orrs	r3, r2
 80063fa:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	0019      	movs	r1, r3
 8006400:	2031      	movs	r0, #49	@ 0x31
 8006402:	f000 fe57 	bl	80070b4 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8006406:	210a      	movs	r1, #10
 8006408:	2037      	movs	r0, #55	@ 0x37
 800640a:	f000 fe53 	bl	80070b4 <SX1276Write>
        break;
 800640e:	46c0      	nop			@ (mov r8, r8)
}
 8006410:	46c0      	nop			@ (mov r8, r8)
 8006412:	46bd      	mov	sp, r7
 8006414:	b005      	add	sp, #20
 8006416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006418:	200004ec 	.word	0x200004ec

0800641c <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 800641c:	b5b0      	push	{r4, r5, r7, lr}
 800641e:	b094      	sub	sp, #80	@ 0x50
 8006420:	af00      	add	r7, sp, #0
 8006422:	0002      	movs	r2, r0
 8006424:	1dfb      	adds	r3, r7, #7
 8006426:	701a      	strb	r2, [r3, #0]
 8006428:	1dbb      	adds	r3, r7, #6
 800642a:	1c0a      	adds	r2, r1, #0
 800642c:	701a      	strb	r2, [r3, #0]
    uint32_t airTime = 0;
 800642e:	2300      	movs	r3, #0
 8006430:	64fb      	str	r3, [r7, #76]	@ 0x4c

    switch( modem )
 8006432:	1dfb      	adds	r3, r7, #7
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <SX1276GetTimeOnAir+0x26>
 800643a:	2b01      	cmp	r3, #1
 800643c:	d100      	bne.n	8006440 <SX1276GetTimeOnAir+0x24>
 800643e:	e080      	b.n	8006542 <SX1276GetTimeOnAir+0x126>
 8006440:	e15c      	b.n	80066fc <SX1276GetTimeOnAir+0x2e0>
    {
    case MODEM_FSK:
        {
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8006442:	4bb1      	ldr	r3, [pc, #708]	@ (8006708 <SX1276GetTimeOnAir+0x2ec>)
 8006444:	8c1b      	ldrh	r3, [r3, #32]
 8006446:	001c      	movs	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8006448:	2027      	movs	r0, #39	@ 0x27
 800644a:	f000 fe47 	bl	80070dc <SX1276Read>
 800644e:	0003      	movs	r3, r0
 8006450:	001a      	movs	r2, r3
 8006452:	23f8      	movs	r3, #248	@ 0xf8
 8006454:	439a      	bics	r2, r3
 8006456:	0013      	movs	r3, r2
 8006458:	3301      	adds	r3, #1
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800645a:	18e3      	adds	r3, r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800645c:	0018      	movs	r0, r3
 800645e:	f7fc fcdf 	bl	8002e20 <__aeabi_i2d>
 8006462:	0002      	movs	r2, r0
 8006464:	000b      	movs	r3, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8006466:	49a8      	ldr	r1, [pc, #672]	@ (8006708 <SX1276GetTimeOnAir+0x2ec>)
 8006468:	2022      	movs	r0, #34	@ 0x22
 800646a:	5c09      	ldrb	r1, [r1, r0]
 800646c:	2900      	cmp	r1, #0
 800646e:	d002      	beq.n	8006476 <SX1276GetTimeOnAir+0x5a>
 8006470:	2000      	movs	r0, #0
 8006472:	2100      	movs	r1, #0
 8006474:	e001      	b.n	800647a <SX1276GetTimeOnAir+0x5e>
 8006476:	2000      	movs	r0, #0
 8006478:	49a4      	ldr	r1, [pc, #656]	@ (800670c <SX1276GetTimeOnAir+0x2f0>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800647a:	f7fa fe89 	bl	8001190 <__aeabi_dadd>
 800647e:	0002      	movs	r2, r0
 8006480:	000b      	movs	r3, r1
 8006482:	0014      	movs	r4, r2
 8006484:	001d      	movs	r5, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8006486:	2030      	movs	r0, #48	@ 0x30
 8006488:	f000 fe28 	bl	80070dc <SX1276Read>
 800648c:	0003      	movs	r3, r0
 800648e:	001a      	movs	r2, r3
 8006490:	23f9      	movs	r3, #249	@ 0xf9
 8006492:	439a      	bics	r2, r3
 8006494:	1e13      	subs	r3, r2, #0
 8006496:	d002      	beq.n	800649e <SX1276GetTimeOnAir+0x82>
 8006498:	2000      	movs	r0, #0
 800649a:	499c      	ldr	r1, [pc, #624]	@ (800670c <SX1276GetTimeOnAir+0x2f0>)
 800649c:	e001      	b.n	80064a2 <SX1276GetTimeOnAir+0x86>
 800649e:	2000      	movs	r0, #0
 80064a0:	2100      	movs	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80064a2:	0022      	movs	r2, r4
 80064a4:	002b      	movs	r3, r5
 80064a6:	f7fa fe73 	bl	8001190 <__aeabi_dadd>
 80064aa:	0002      	movs	r2, r0
 80064ac:	000b      	movs	r3, r1
 80064ae:	0014      	movs	r4, r2
 80064b0:	001d      	movs	r5, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80064b2:	1dbb      	adds	r3, r7, #6
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	0018      	movs	r0, r3
 80064b8:	f7fc fcb2 	bl	8002e20 <__aeabi_i2d>
 80064bc:	0002      	movs	r2, r0
 80064be:	000b      	movs	r3, r1
 80064c0:	0020      	movs	r0, r4
 80064c2:	0029      	movs	r1, r5
 80064c4:	f7fa fe64 	bl	8001190 <__aeabi_dadd>
 80064c8:	0002      	movs	r2, r0
 80064ca:	000b      	movs	r3, r1
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80064cc:	498e      	ldr	r1, [pc, #568]	@ (8006708 <SX1276GetTimeOnAir+0x2ec>)
 80064ce:	2024      	movs	r0, #36	@ 0x24
 80064d0:	5c09      	ldrb	r1, [r1, r0]
 80064d2:	2900      	cmp	r1, #0
 80064d4:	d003      	beq.n	80064de <SX1276GetTimeOnAir+0xc2>
 80064d6:	2000      	movs	r0, #0
 80064d8:	2180      	movs	r1, #128	@ 0x80
 80064da:	05c9      	lsls	r1, r1, #23
 80064dc:	e001      	b.n	80064e2 <SX1276GetTimeOnAir+0xc6>
 80064de:	2000      	movs	r0, #0
 80064e0:	2100      	movs	r1, #0
                                     pktLen +
 80064e2:	f7fa fe55 	bl	8001190 <__aeabi_dadd>
 80064e6:	0002      	movs	r2, r0
 80064e8:	000b      	movs	r3, r1
 80064ea:	0010      	movs	r0, r2
 80064ec:	0019      	movs	r1, r3
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80064ee:	2200      	movs	r2, #0
 80064f0:	4b87      	ldr	r3, [pc, #540]	@ (8006710 <SX1276GetTimeOnAir+0x2f4>)
 80064f2:	f7fb fdf5 	bl	80020e0 <__aeabi_dmul>
 80064f6:	0002      	movs	r2, r0
 80064f8:	000b      	movs	r3, r1
 80064fa:	0014      	movs	r4, r2
 80064fc:	001d      	movs	r5, r3
                                     SX1276.Settings.Fsk.Datarate ) * 1000 );
 80064fe:	4b82      	ldr	r3, [pc, #520]	@ (8006708 <SX1276GetTimeOnAir+0x2ec>)
 8006500:	69db      	ldr	r3, [r3, #28]
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8006502:	0018      	movs	r0, r3
 8006504:	f7fc fcba 	bl	8002e7c <__aeabi_ui2d>
 8006508:	0002      	movs	r2, r0
 800650a:	000b      	movs	r3, r1
 800650c:	0020      	movs	r0, r4
 800650e:	0029      	movs	r1, r5
 8006510:	f7fb f9a2 	bl	8001858 <__aeabi_ddiv>
 8006514:	0002      	movs	r2, r0
 8006516:	000b      	movs	r3, r1
 8006518:	0010      	movs	r0, r2
 800651a:	0019      	movs	r1, r3
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800651c:	2200      	movs	r2, #0
 800651e:	4b7d      	ldr	r3, [pc, #500]	@ (8006714 <SX1276GetTimeOnAir+0x2f8>)
 8006520:	f7fb fdde 	bl	80020e0 <__aeabi_dmul>
 8006524:	0002      	movs	r2, r0
 8006526:	000b      	movs	r3, r1
 8006528:	0010      	movs	r0, r2
 800652a:	0019      	movs	r1, r3
 800652c:	f014 f83a 	bl	801a5a4 <round>
 8006530:	0002      	movs	r2, r0
 8006532:	000b      	movs	r3, r1
 8006534:	0010      	movs	r0, r2
 8006536:	0019      	movs	r1, r3
 8006538:	f7fa f816 	bl	8000568 <__aeabi_d2uiz>
 800653c:	0003      	movs	r3, r0
 800653e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        break;
 8006540:	e0dc      	b.n	80066fc <SX1276GetTimeOnAir+0x2e0>
    case MODEM_LORA:
        {
            double bw = 0.0;
 8006542:	2200      	movs	r2, #0
 8006544:	2300      	movs	r3, #0
 8006546:	643a      	str	r2, [r7, #64]	@ 0x40
 8006548:	647b      	str	r3, [r7, #68]	@ 0x44
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 800654a:	4b6f      	ldr	r3, [pc, #444]	@ (8006708 <SX1276GetTimeOnAir+0x2ec>)
 800654c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800654e:	2b09      	cmp	r3, #9
 8006550:	d00f      	beq.n	8006572 <SX1276GetTimeOnAir+0x156>
 8006552:	d813      	bhi.n	800657c <SX1276GetTimeOnAir+0x160>
 8006554:	2b07      	cmp	r3, #7
 8006556:	d002      	beq.n	800655e <SX1276GetTimeOnAir+0x142>
 8006558:	2b08      	cmp	r3, #8
 800655a:	d005      	beq.n	8006568 <SX1276GetTimeOnAir+0x14c>
 800655c:	e00e      	b.n	800657c <SX1276GetTimeOnAir+0x160>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 62500;
            //    break;
            case 7: // 125 kHz
                bw = 125000;
 800655e:	2200      	movs	r2, #0
 8006560:	4b6d      	ldr	r3, [pc, #436]	@ (8006718 <SX1276GetTimeOnAir+0x2fc>)
 8006562:	643a      	str	r2, [r7, #64]	@ 0x40
 8006564:	647b      	str	r3, [r7, #68]	@ 0x44
                break;
 8006566:	e009      	b.n	800657c <SX1276GetTimeOnAir+0x160>
            case 8: // 250 kHz
                bw = 250000;
 8006568:	2200      	movs	r2, #0
 800656a:	4b6c      	ldr	r3, [pc, #432]	@ (800671c <SX1276GetTimeOnAir+0x300>)
 800656c:	643a      	str	r2, [r7, #64]	@ 0x40
 800656e:	647b      	str	r3, [r7, #68]	@ 0x44
                break;
 8006570:	e004      	b.n	800657c <SX1276GetTimeOnAir+0x160>
            case 9: // 500 kHz
                bw = 500000;
 8006572:	2200      	movs	r2, #0
 8006574:	4b6a      	ldr	r3, [pc, #424]	@ (8006720 <SX1276GetTimeOnAir+0x304>)
 8006576:	643a      	str	r2, [r7, #64]	@ 0x40
 8006578:	647b      	str	r3, [r7, #68]	@ 0x44
                break;
 800657a:	46c0      	nop			@ (mov r8, r8)
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 800657c:	4b62      	ldr	r3, [pc, #392]	@ (8006708 <SX1276GetTimeOnAir+0x2ec>)
 800657e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006580:	2201      	movs	r2, #1
 8006582:	409a      	lsls	r2, r3
 8006584:	0013      	movs	r3, r2
 8006586:	0018      	movs	r0, r3
 8006588:	f7fc fc4a 	bl	8002e20 <__aeabi_i2d>
 800658c:	0002      	movs	r2, r0
 800658e:	000b      	movs	r3, r1
 8006590:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8006592:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006594:	f7fb f960 	bl	8001858 <__aeabi_ddiv>
 8006598:	0002      	movs	r2, r0
 800659a:	000b      	movs	r3, r1
 800659c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800659e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            double ts = 1 / rs;
 80065a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065a4:	2000      	movs	r0, #0
 80065a6:	4959      	ldr	r1, [pc, #356]	@ (800670c <SX1276GetTimeOnAir+0x2f0>)
 80065a8:	f7fb f956 	bl	8001858 <__aeabi_ddiv>
 80065ac:	0002      	movs	r2, r0
 80065ae:	000b      	movs	r3, r1
 80065b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80065b2:	637b      	str	r3, [r7, #52]	@ 0x34
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 80065b4:	4b54      	ldr	r3, [pc, #336]	@ (8006708 <SX1276GetTimeOnAir+0x2ec>)
 80065b6:	224e      	movs	r2, #78	@ 0x4e
 80065b8:	5a9b      	ldrh	r3, [r3, r2]
 80065ba:	0018      	movs	r0, r3
 80065bc:	f7fc fc30 	bl	8002e20 <__aeabi_i2d>
 80065c0:	2200      	movs	r2, #0
 80065c2:	4b58      	ldr	r3, [pc, #352]	@ (8006724 <SX1276GetTimeOnAir+0x308>)
 80065c4:	f7fa fde4 	bl	8001190 <__aeabi_dadd>
 80065c8:	0002      	movs	r2, r0
 80065ca:	000b      	movs	r3, r1
 80065cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065ce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80065d0:	f7fb fd86 	bl	80020e0 <__aeabi_dmul>
 80065d4:	0002      	movs	r2, r0
 80065d6:	000b      	movs	r3, r1
 80065d8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80065da:	62fb      	str	r3, [r7, #44]	@ 0x2c
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80065dc:	1dbb      	adds	r3, r7, #6
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	00db      	lsls	r3, r3, #3
 80065e2:	001a      	movs	r2, r3
 80065e4:	4b48      	ldr	r3, [pc, #288]	@ (8006708 <SX1276GetTimeOnAir+0x2ec>)
 80065e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 80065ec:	4a46      	ldr	r2, [pc, #280]	@ (8006708 <SX1276GetTimeOnAir+0x2ec>)
 80065ee:	2152      	movs	r1, #82	@ 0x52
 80065f0:	5c52      	ldrb	r2, [r2, r1]
 80065f2:	0112      	lsls	r2, r2, #4
 80065f4:	189a      	adds	r2, r3, r2
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 80065f6:	4b44      	ldr	r3, [pc, #272]	@ (8006708 <SX1276GetTimeOnAir+0x2ec>)
 80065f8:	2150      	movs	r1, #80	@ 0x50
 80065fa:	5c5b      	ldrb	r3, [r3, r1]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <SX1276GetTimeOnAir+0x1e8>
 8006600:	2314      	movs	r3, #20
 8006602:	e000      	b.n	8006606 <SX1276GetTimeOnAir+0x1ea>
 8006604:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800660a:	0018      	movs	r0, r3
 800660c:	f7fc fc36 	bl	8002e7c <__aeabi_ui2d>
 8006610:	0004      	movs	r4, r0
 8006612:	000d      	movs	r5, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8006614:	4b3c      	ldr	r3, [pc, #240]	@ (8006708 <SX1276GetTimeOnAir+0x2ec>)
 8006616:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8006618:	4b3b      	ldr	r3, [pc, #236]	@ (8006708 <SX1276GetTimeOnAir+0x2ec>)
 800661a:	214c      	movs	r1, #76	@ 0x4c
 800661c:	5c5b      	ldrb	r3, [r3, r1]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <SX1276GetTimeOnAir+0x20a>
 8006622:	2302      	movs	r3, #2
 8006624:	e000      	b.n	8006628 <SX1276GetTimeOnAir+0x20c>
 8006626:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	0018      	movs	r0, r3
 800662e:	f7fc fc25 	bl	8002e7c <__aeabi_ui2d>
 8006632:	0002      	movs	r2, r0
 8006634:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8006636:	0020      	movs	r0, r4
 8006638:	0029      	movs	r1, r5
 800663a:	f7fb f90d 	bl	8001858 <__aeabi_ddiv>
 800663e:	0002      	movs	r2, r0
 8006640:	000b      	movs	r3, r1
 8006642:	0010      	movs	r0, r2
 8006644:	0019      	movs	r1, r3
 8006646:	f013 feb9 	bl	801a3bc <ceil>
 800664a:	0004      	movs	r4, r0
 800664c:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 800664e:	4b2e      	ldr	r3, [pc, #184]	@ (8006708 <SX1276GetTimeOnAir+0x2ec>)
 8006650:	224d      	movs	r2, #77	@ 0x4d
 8006652:	5c9b      	ldrb	r3, [r3, r2]
 8006654:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8006656:	0018      	movs	r0, r3
 8006658:	f7fc fbe2 	bl	8002e20 <__aeabi_i2d>
 800665c:	0002      	movs	r2, r0
 800665e:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8006660:	0020      	movs	r0, r4
 8006662:	0029      	movs	r1, r5
 8006664:	f7fb fd3c 	bl	80020e0 <__aeabi_dmul>
 8006668:	0002      	movs	r2, r0
 800666a:	000b      	movs	r3, r1
 800666c:	623a      	str	r2, [r7, #32]
 800666e:	627b      	str	r3, [r7, #36]	@ 0x24
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8006670:	2200      	movs	r2, #0
 8006672:	2300      	movs	r3, #0
 8006674:	6a38      	ldr	r0, [r7, #32]
 8006676:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006678:	f7f9 fef0 	bl	800045c <__aeabi_dcmpgt>
 800667c:	1e03      	subs	r3, r0, #0
 800667e:	d002      	beq.n	8006686 <SX1276GetTimeOnAir+0x26a>
 8006680:	6a38      	ldr	r0, [r7, #32]
 8006682:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006684:	e001      	b.n	800668a <SX1276GetTimeOnAir+0x26e>
 8006686:	2000      	movs	r0, #0
 8006688:	2100      	movs	r1, #0
 800668a:	2200      	movs	r2, #0
 800668c:	4b20      	ldr	r3, [pc, #128]	@ (8006710 <SX1276GetTimeOnAir+0x2f4>)
 800668e:	f7fa fd7f 	bl	8001190 <__aeabi_dadd>
 8006692:	0002      	movs	r2, r0
 8006694:	000b      	movs	r3, r1
 8006696:	61ba      	str	r2, [r7, #24]
 8006698:	61fb      	str	r3, [r7, #28]
            double tPayload = nPayload * ts;
 800669a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800669c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800669e:	69b8      	ldr	r0, [r7, #24]
 80066a0:	69f9      	ldr	r1, [r7, #28]
 80066a2:	f7fb fd1d 	bl	80020e0 <__aeabi_dmul>
 80066a6:	0002      	movs	r2, r0
 80066a8:	000b      	movs	r3, r1
 80066aa:	613a      	str	r2, [r7, #16]
 80066ac:	617b      	str	r3, [r7, #20]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066b6:	f7fa fd6b 	bl	8001190 <__aeabi_dadd>
 80066ba:	0002      	movs	r2, r0
 80066bc:	000b      	movs	r3, r1
 80066be:	60ba      	str	r2, [r7, #8]
 80066c0:	60fb      	str	r3, [r7, #12]
            // return ms secs
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 80066c2:	2200      	movs	r2, #0
 80066c4:	4b13      	ldr	r3, [pc, #76]	@ (8006714 <SX1276GetTimeOnAir+0x2f8>)
 80066c6:	68b8      	ldr	r0, [r7, #8]
 80066c8:	68f9      	ldr	r1, [r7, #12]
 80066ca:	f7fb fd09 	bl	80020e0 <__aeabi_dmul>
 80066ce:	0002      	movs	r2, r0
 80066d0:	000b      	movs	r3, r1
 80066d2:	0010      	movs	r0, r2
 80066d4:	0019      	movs	r1, r3
 80066d6:	4a14      	ldr	r2, [pc, #80]	@ (8006728 <SX1276GetTimeOnAir+0x30c>)
 80066d8:	4b14      	ldr	r3, [pc, #80]	@ (800672c <SX1276GetTimeOnAir+0x310>)
 80066da:	f7fa fd59 	bl	8001190 <__aeabi_dadd>
 80066de:	0002      	movs	r2, r0
 80066e0:	000b      	movs	r3, r1
 80066e2:	0010      	movs	r0, r2
 80066e4:	0019      	movs	r1, r3
 80066e6:	f013 fee1 	bl	801a4ac <floor>
 80066ea:	0002      	movs	r2, r0
 80066ec:	000b      	movs	r3, r1
 80066ee:	0010      	movs	r0, r2
 80066f0:	0019      	movs	r1, r3
 80066f2:	f7f9 ff39 	bl	8000568 <__aeabi_d2uiz>
 80066f6:	0003      	movs	r3, r0
 80066f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        break;
 80066fa:	46c0      	nop			@ (mov r8, r8)
    }
    return airTime;
 80066fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80066fe:	0018      	movs	r0, r3
 8006700:	46bd      	mov	sp, r7
 8006702:	b014      	add	sp, #80	@ 0x50
 8006704:	bdb0      	pop	{r4, r5, r7, pc}
 8006706:	46c0      	nop			@ (mov r8, r8)
 8006708:	200004ec 	.word	0x200004ec
 800670c:	3ff00000 	.word	0x3ff00000
 8006710:	40200000 	.word	0x40200000
 8006714:	408f4000 	.word	0x408f4000
 8006718:	40fe8480 	.word	0x40fe8480
 800671c:	410e8480 	.word	0x410e8480
 8006720:	411e8480 	.word	0x411e8480
 8006724:	40110000 	.word	0x40110000
 8006728:	d916872b 	.word	0xd916872b
 800672c:	3feff7ce 	.word	0x3feff7ce

08006730 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	000a      	movs	r2, r1
 800673a:	1cfb      	adds	r3, r7, #3
 800673c:	701a      	strb	r2, [r3, #0]
    uint32_t txTimeout = 0;
 800673e:	2300      	movs	r3, #0
 8006740:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 8006742:	4b58      	ldr	r3, [pc, #352]	@ (80068a4 <SX1276Send+0x174>)
 8006744:	795b      	ldrb	r3, [r3, #5]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <SX1276Send+0x20>
 800674a:	2b01      	cmp	r3, #1
 800674c:	d04b      	beq.n	80067e6 <SX1276Send+0xb6>
 800674e:	e0a1      	b.n	8006894 <SX1276Send+0x164>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006750:	4b54      	ldr	r3, [pc, #336]	@ (80068a4 <SX1276Send+0x174>)
 8006752:	2200      	movs	r2, #0
 8006754:	879a      	strh	r2, [r3, #60]	@ 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 8006756:	1cfb      	adds	r3, r7, #3
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	001a      	movs	r2, r3
 800675c:	4b51      	ldr	r3, [pc, #324]	@ (80068a4 <SX1276Send+0x174>)
 800675e:	875a      	strh	r2, [r3, #58]	@ 0x3a

            if( SX1276.Settings.Fsk.FixLen == false )
 8006760:	4b50      	ldr	r3, [pc, #320]	@ (80068a4 <SX1276Send+0x174>)
 8006762:	2222      	movs	r2, #34	@ 0x22
 8006764:	5c9b      	ldrb	r3, [r3, r2]
 8006766:	2201      	movs	r2, #1
 8006768:	4053      	eors	r3, r2
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b00      	cmp	r3, #0
 800676e:	d005      	beq.n	800677c <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8006770:	1cfb      	adds	r3, r7, #3
 8006772:	2101      	movs	r1, #1
 8006774:	0018      	movs	r0, r3
 8006776:	f000 fd4a 	bl	800720e <SX1276WriteFifo>
 800677a:	e005      	b.n	8006788 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 800677c:	1cfb      	adds	r3, r7, #3
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	0019      	movs	r1, r3
 8006782:	2032      	movs	r0, #50	@ 0x32
 8006784:	f000 fc96 	bl	80070b4 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 8006788:	1cfb      	adds	r3, r7, #3
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d009      	beq.n	80067a4 <SX1276Send+0x74>
 8006790:	1cfb      	adds	r3, r7, #3
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	2b40      	cmp	r3, #64	@ 0x40
 8006796:	d805      	bhi.n	80067a4 <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8006798:	1cfb      	adds	r3, r7, #3
 800679a:	7819      	ldrb	r1, [r3, #0]
 800679c:	4b41      	ldr	r3, [pc, #260]	@ (80068a4 <SX1276Send+0x174>)
 800679e:	223f      	movs	r2, #63	@ 0x3f
 80067a0:	5499      	strb	r1, [r3, r2]
 80067a2:	e00b      	b.n	80067bc <SX1276Send+0x8c>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 80067a4:	1cfb      	adds	r3, r7, #3
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	001a      	movs	r2, r3
 80067aa:	6879      	ldr	r1, [r7, #4]
 80067ac:	4b3e      	ldr	r3, [pc, #248]	@ (80068a8 <SX1276Send+0x178>)
 80067ae:	0018      	movs	r0, r3
 80067b0:	f00e ff72 	bl	8015698 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 80067b4:	4b3b      	ldr	r3, [pc, #236]	@ (80068a4 <SX1276Send+0x174>)
 80067b6:	223f      	movs	r2, #63	@ 0x3f
 80067b8:	2120      	movs	r1, #32
 80067ba:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 80067bc:	4b39      	ldr	r3, [pc, #228]	@ (80068a4 <SX1276Send+0x174>)
 80067be:	223f      	movs	r2, #63	@ 0x3f
 80067c0:	5c9a      	ldrb	r2, [r3, r2]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	0011      	movs	r1, r2
 80067c6:	0018      	movs	r0, r3
 80067c8:	f000 fd21 	bl	800720e <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80067cc:	4b35      	ldr	r3, [pc, #212]	@ (80068a4 <SX1276Send+0x174>)
 80067ce:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80067d0:	4a34      	ldr	r2, [pc, #208]	@ (80068a4 <SX1276Send+0x174>)
 80067d2:	213f      	movs	r1, #63	@ 0x3f
 80067d4:	5c52      	ldrb	r2, [r2, r1]
 80067d6:	189b      	adds	r3, r3, r2
 80067d8:	b29a      	uxth	r2, r3
 80067da:	4b32      	ldr	r3, [pc, #200]	@ (80068a4 <SX1276Send+0x174>)
 80067dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 80067de:	4b31      	ldr	r3, [pc, #196]	@ (80068a4 <SX1276Send+0x174>)
 80067e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80067e4:	e056      	b.n	8006894 <SX1276Send+0x164>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 80067e6:	4b2f      	ldr	r3, [pc, #188]	@ (80068a4 <SX1276Send+0x174>)
 80067e8:	2255      	movs	r2, #85	@ 0x55
 80067ea:	5c9b      	ldrb	r3, [r3, r2]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d011      	beq.n	8006814 <SX1276Send+0xe4>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 80067f0:	2033      	movs	r0, #51	@ 0x33
 80067f2:	f000 fc73 	bl	80070dc <SX1276Read>
 80067f6:	0003      	movs	r3, r0
 80067f8:	001a      	movs	r2, r3
 80067fa:	2341      	movs	r3, #65	@ 0x41
 80067fc:	439a      	bics	r2, r3
 80067fe:	0013      	movs	r3, r2
 8006800:	b2db      	uxtb	r3, r3
 8006802:	0019      	movs	r1, r3
 8006804:	2033      	movs	r0, #51	@ 0x33
 8006806:	f000 fc55 	bl	80070b4 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800680a:	2119      	movs	r1, #25
 800680c:	203b      	movs	r0, #59	@ 0x3b
 800680e:	f000 fc51 	bl	80070b4 <SX1276Write>
 8006812:	e013      	b.n	800683c <SX1276Send+0x10c>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8006814:	2033      	movs	r0, #51	@ 0x33
 8006816:	f000 fc61 	bl	80070dc <SX1276Read>
 800681a:	0003      	movs	r3, r0
 800681c:	b25b      	sxtb	r3, r3
 800681e:	2241      	movs	r2, #65	@ 0x41
 8006820:	4393      	bics	r3, r2
 8006822:	b25b      	sxtb	r3, r3
 8006824:	2201      	movs	r2, #1
 8006826:	4313      	orrs	r3, r2
 8006828:	b25b      	sxtb	r3, r3
 800682a:	b2db      	uxtb	r3, r3
 800682c:	0019      	movs	r1, r3
 800682e:	2033      	movs	r0, #51	@ 0x33
 8006830:	f000 fc40 	bl	80070b4 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8006834:	211d      	movs	r1, #29
 8006836:	203b      	movs	r0, #59	@ 0x3b
 8006838:	f000 fc3c 	bl	80070b4 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 800683c:	1cfb      	adds	r3, r7, #3
 800683e:	7819      	ldrb	r1, [r3, #0]
 8006840:	4b18      	ldr	r3, [pc, #96]	@ (80068a4 <SX1276Send+0x174>)
 8006842:	2264      	movs	r2, #100	@ 0x64
 8006844:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8006846:	1cfb      	adds	r3, r7, #3
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	0019      	movs	r1, r3
 800684c:	2022      	movs	r0, #34	@ 0x22
 800684e:	f000 fc31 	bl	80070b4 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8006852:	2100      	movs	r1, #0
 8006854:	200e      	movs	r0, #14
 8006856:	f000 fc2d 	bl	80070b4 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800685a:	2100      	movs	r1, #0
 800685c:	200d      	movs	r0, #13
 800685e:	f000 fc29 	bl	80070b4 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8006862:	2001      	movs	r0, #1
 8006864:	f000 fc3a 	bl	80070dc <SX1276Read>
 8006868:	0003      	movs	r3, r0
 800686a:	001a      	movs	r2, r3
 800686c:	23f8      	movs	r3, #248	@ 0xf8
 800686e:	439a      	bics	r2, r3
 8006870:	1e13      	subs	r3, r2, #0
 8006872:	d104      	bne.n	800687e <SX1276Send+0x14e>
            {
                SX1276SetStby( );
 8006874:	f000 f840 	bl	80068f8 <SX1276SetStby>
                DelayMs( 1 );
 8006878:	2001      	movs	r0, #1
 800687a:	f7fc fb9e 	bl	8002fba <HAL_Delay>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 800687e:	1cfb      	adds	r3, r7, #3
 8006880:	781a      	ldrb	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	0011      	movs	r1, r2
 8006886:	0018      	movs	r0, r3
 8006888:	f000 fcc1 	bl	800720e <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 800688c:	4b05      	ldr	r3, [pc, #20]	@ (80068a4 <SX1276Send+0x174>)
 800688e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006890:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006892:	46c0      	nop			@ (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	0018      	movs	r0, r3
 8006898:	f000 f9dc 	bl	8006c54 <SX1276SetTx>
}
 800689c:	46c0      	nop			@ (mov r8, r8)
 800689e:	46bd      	mov	sp, r7
 80068a0:	b004      	add	sp, #16
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	200004ec 	.word	0x200004ec
 80068a8:	200003e8 	.word	0x200003e8

080068ac <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 80068b0:	4b0c      	ldr	r3, [pc, #48]	@ (80068e4 <SX1276SetSleep+0x38>)
 80068b2:	0018      	movs	r0, r3
 80068b4:	f00e fc72 	bl	801519c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80068b8:	4b0b      	ldr	r3, [pc, #44]	@ (80068e8 <SX1276SetSleep+0x3c>)
 80068ba:	0018      	movs	r0, r3
 80068bc:	f00e fc6e 	bl	801519c <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80068c0:	4b0a      	ldr	r3, [pc, #40]	@ (80068ec <SX1276SetSleep+0x40>)
 80068c2:	0018      	movs	r0, r3
 80068c4:	f00e fc6a 	bl	801519c <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80068c8:	2000      	movs	r0, #0
 80068ca:	f000 fb49 	bl	8006f60 <SX1276SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    LoRaBoardCallbacks->SX1276BoardSetXO( RESET );
 80068ce:	4b08      	ldr	r3, [pc, #32]	@ (80068f0 <SX1276SetSleep+0x44>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2000      	movs	r0, #0
 80068d6:	4798      	blx	r3

    SX1276.Settings.State = RF_IDLE;
 80068d8:	4b06      	ldr	r3, [pc, #24]	@ (80068f4 <SX1276SetSleep+0x48>)
 80068da:	2200      	movs	r2, #0
 80068dc:	711a      	strb	r2, [r3, #4]
}
 80068de:	46c0      	nop			@ (mov r8, r8)
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	2000056c 	.word	0x2000056c
 80068e8:	20000554 	.word	0x20000554
 80068ec:	20000584 	.word	0x20000584
 80068f0:	200004e8 	.word	0x200004e8
 80068f4:	200004ec 	.word	0x200004ec

080068f8 <SX1276SetStby>:

void SX1276SetStby( void )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 80068fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006928 <SX1276SetStby+0x30>)
 80068fe:	0018      	movs	r0, r3
 8006900:	f00e fc4c 	bl	801519c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8006904:	4b09      	ldr	r3, [pc, #36]	@ (800692c <SX1276SetStby+0x34>)
 8006906:	0018      	movs	r0, r3
 8006908:	f00e fc48 	bl	801519c <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 800690c:	4b08      	ldr	r3, [pc, #32]	@ (8006930 <SX1276SetStby+0x38>)
 800690e:	0018      	movs	r0, r3
 8006910:	f00e fc44 	bl	801519c <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8006914:	2001      	movs	r0, #1
 8006916:	f000 fb23 	bl	8006f60 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800691a:	4b06      	ldr	r3, [pc, #24]	@ (8006934 <SX1276SetStby+0x3c>)
 800691c:	2200      	movs	r2, #0
 800691e:	711a      	strb	r2, [r3, #4]
}
 8006920:	46c0      	nop			@ (mov r8, r8)
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	46c0      	nop			@ (mov r8, r8)
 8006928:	2000056c 	.word	0x2000056c
 800692c:	20000554 	.word	0x20000554
 8006930:	20000584 	.word	0x20000584
 8006934:	200004ec 	.word	0x200004ec

08006938 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 8006940:	230f      	movs	r3, #15
 8006942:	18fb      	adds	r3, r7, r3
 8006944:	2200      	movs	r2, #0
 8006946:	701a      	strb	r2, [r3, #0]
    TimerStop( &TxTimeoutTimer );
 8006948:	4bb6      	ldr	r3, [pc, #728]	@ (8006c24 <SX1276SetRx+0x2ec>)
 800694a:	0018      	movs	r0, r3
 800694c:	f00e fc26 	bl	801519c <TimerStop>

    switch( SX1276.Settings.Modem )
 8006950:	4bb5      	ldr	r3, [pc, #724]	@ (8006c28 <SX1276SetRx+0x2f0>)
 8006952:	795b      	ldrb	r3, [r3, #5]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <SX1276SetRx+0x26>
 8006958:	2b01      	cmp	r3, #1
 800695a:	d041      	beq.n	80069e0 <SX1276SetRx+0xa8>
 800695c:	e127      	b.n	8006bae <SX1276SetRx+0x276>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800695e:	230f      	movs	r3, #15
 8006960:	18fb      	adds	r3, r7, r3
 8006962:	4ab1      	ldr	r2, [pc, #708]	@ (8006c28 <SX1276SetRx+0x2f0>)
 8006964:	2126      	movs	r1, #38	@ 0x26
 8006966:	5c52      	ldrb	r2, [r2, r1]
 8006968:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800696a:	2040      	movs	r0, #64	@ 0x40
 800696c:	f000 fbb6 	bl	80070dc <SX1276Read>
 8006970:	0003      	movs	r3, r0
 8006972:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8006974:	2203      	movs	r2, #3
 8006976:	4013      	ands	r3, r2
 8006978:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 800697a:	220c      	movs	r2, #12
 800697c:	4313      	orrs	r3, r2
 800697e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8006980:	b2db      	uxtb	r3, r3
 8006982:	0019      	movs	r1, r3
 8006984:	2040      	movs	r0, #64	@ 0x40
 8006986:	f000 fb95 	bl	80070b4 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800698a:	2041      	movs	r0, #65	@ 0x41
 800698c:	f000 fba6 	bl	80070dc <SX1276Read>
 8006990:	0003      	movs	r3, r0
 8006992:	001a      	movs	r2, r3
 8006994:	233f      	movs	r3, #63	@ 0x3f
 8006996:	425b      	negs	r3, r3
 8006998:	4313      	orrs	r3, r2
 800699a:	b2db      	uxtb	r3, r3
 800699c:	0019      	movs	r1, r3
 800699e:	2041      	movs	r0, #65	@ 0x41
 80069a0:	f000 fb88 	bl	80070b4 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 80069a4:	2035      	movs	r0, #53	@ 0x35
 80069a6:	f000 fb99 	bl	80070dc <SX1276Read>
 80069aa:	0003      	movs	r3, r0
 80069ac:	001a      	movs	r2, r3
 80069ae:	233f      	movs	r3, #63	@ 0x3f
 80069b0:	4013      	ands	r3, r2
 80069b2:	b2d9      	uxtb	r1, r3
 80069b4:	4b9c      	ldr	r3, [pc, #624]	@ (8006c28 <SX1276SetRx+0x2f0>)
 80069b6:	223e      	movs	r2, #62	@ 0x3e
 80069b8:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 80069ba:	211e      	movs	r1, #30
 80069bc:	200d      	movs	r0, #13
 80069be:	f000 fb79 	bl	80070b4 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80069c2:	4b99      	ldr	r3, [pc, #612]	@ (8006c28 <SX1276SetRx+0x2f0>)
 80069c4:	2230      	movs	r2, #48	@ 0x30
 80069c6:	2100      	movs	r1, #0
 80069c8:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80069ca:	4b97      	ldr	r3, [pc, #604]	@ (8006c28 <SX1276SetRx+0x2f0>)
 80069cc:	2231      	movs	r2, #49	@ 0x31
 80069ce:	2100      	movs	r1, #0
 80069d0:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80069d2:	4b95      	ldr	r3, [pc, #596]	@ (8006c28 <SX1276SetRx+0x2f0>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 80069d8:	4b93      	ldr	r3, [pc, #588]	@ (8006c28 <SX1276SetRx+0x2f0>)
 80069da:	2200      	movs	r2, #0
 80069dc:	875a      	strh	r2, [r3, #58]	@ 0x3a
        }
        break;
 80069de:	e0e6      	b.n	8006bae <SX1276SetRx+0x276>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 80069e0:	4b91      	ldr	r3, [pc, #580]	@ (8006c28 <SX1276SetRx+0x2f0>)
 80069e2:	2255      	movs	r2, #85	@ 0x55
 80069e4:	5c9b      	ldrb	r3, [r3, r2]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d010      	beq.n	8006a0c <SX1276SetRx+0xd4>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 80069ea:	2033      	movs	r0, #51	@ 0x33
 80069ec:	f000 fb76 	bl	80070dc <SX1276Read>
 80069f0:	0003      	movs	r3, r0
 80069f2:	001a      	movs	r2, r3
 80069f4:	2341      	movs	r3, #65	@ 0x41
 80069f6:	4313      	orrs	r3, r2
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	0019      	movs	r1, r3
 80069fc:	2033      	movs	r0, #51	@ 0x33
 80069fe:	f000 fb59 	bl	80070b4 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8006a02:	2119      	movs	r1, #25
 8006a04:	203b      	movs	r0, #59	@ 0x3b
 8006a06:	f000 fb55 	bl	80070b4 <SX1276Write>
 8006a0a:	e013      	b.n	8006a34 <SX1276SetRx+0xfc>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8006a0c:	2033      	movs	r0, #51	@ 0x33
 8006a0e:	f000 fb65 	bl	80070dc <SX1276Read>
 8006a12:	0003      	movs	r3, r0
 8006a14:	b25b      	sxtb	r3, r3
 8006a16:	2241      	movs	r2, #65	@ 0x41
 8006a18:	4393      	bics	r3, r2
 8006a1a:	b25b      	sxtb	r3, r3
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	b25b      	sxtb	r3, r3
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	0019      	movs	r1, r3
 8006a26:	2033      	movs	r0, #51	@ 0x33
 8006a28:	f000 fb44 	bl	80070b4 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8006a2c:	211d      	movs	r1, #29
 8006a2e:	203b      	movs	r0, #59	@ 0x3b
 8006a30:	f000 fb40 	bl	80070b4 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8006a34:	4b7c      	ldr	r3, [pc, #496]	@ (8006c28 <SX1276SetRx+0x2f0>)
 8006a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a38:	2b08      	cmp	r3, #8
 8006a3a:	d900      	bls.n	8006a3e <SX1276SetRx+0x106>
 8006a3c:	e075      	b.n	8006b2a <SX1276SetRx+0x1f2>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8006a3e:	2031      	movs	r0, #49	@ 0x31
 8006a40:	f000 fb4c 	bl	80070dc <SX1276Read>
 8006a44:	0003      	movs	r3, r0
 8006a46:	001a      	movs	r2, r3
 8006a48:	237f      	movs	r3, #127	@ 0x7f
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	0019      	movs	r1, r3
 8006a50:	2031      	movs	r0, #49	@ 0x31
 8006a52:	f000 fb2f 	bl	80070b4 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8006a56:	2100      	movs	r1, #0
 8006a58:	2030      	movs	r0, #48	@ 0x30
 8006a5a:	f000 fb2b 	bl	80070b4 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8006a5e:	4b72      	ldr	r3, [pc, #456]	@ (8006c28 <SX1276SetRx+0x2f0>)
 8006a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a62:	2b08      	cmp	r3, #8
 8006a64:	d86e      	bhi.n	8006b44 <SX1276SetRx+0x20c>
 8006a66:	009a      	lsls	r2, r3, #2
 8006a68:	4b70      	ldr	r3, [pc, #448]	@ (8006c2c <SX1276SetRx+0x2f4>)
 8006a6a:	18d3      	adds	r3, r2, r3
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8006a70:	2148      	movs	r1, #72	@ 0x48
 8006a72:	202f      	movs	r0, #47	@ 0x2f
 8006a74:	f000 fb1e 	bl	80070b4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8006a78:	4b6b      	ldr	r3, [pc, #428]	@ (8006c28 <SX1276SetRx+0x2f0>)
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	4a6c      	ldr	r2, [pc, #432]	@ (8006c30 <SX1276SetRx+0x2f8>)
 8006a7e:	4694      	mov	ip, r2
 8006a80:	4463      	add	r3, ip
 8006a82:	0018      	movs	r0, r3
 8006a84:	f7fe feaa 	bl	80057dc <SX1276SetChannel>
                    break;
 8006a88:	e05c      	b.n	8006b44 <SX1276SetRx+0x20c>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006a8a:	2144      	movs	r1, #68	@ 0x44
 8006a8c:	202f      	movs	r0, #47	@ 0x2f
 8006a8e:	f000 fb11 	bl	80070b4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8006a92:	4b65      	ldr	r3, [pc, #404]	@ (8006c28 <SX1276SetRx+0x2f0>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	4a67      	ldr	r2, [pc, #412]	@ (8006c34 <SX1276SetRx+0x2fc>)
 8006a98:	4694      	mov	ip, r2
 8006a9a:	4463      	add	r3, ip
 8006a9c:	0018      	movs	r0, r3
 8006a9e:	f7fe fe9d 	bl	80057dc <SX1276SetChannel>
                    break;
 8006aa2:	e04f      	b.n	8006b44 <SX1276SetRx+0x20c>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006aa4:	2144      	movs	r1, #68	@ 0x44
 8006aa6:	202f      	movs	r0, #47	@ 0x2f
 8006aa8:	f000 fb04 	bl	80070b4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8006aac:	4b5e      	ldr	r3, [pc, #376]	@ (8006c28 <SX1276SetRx+0x2f0>)
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	4a61      	ldr	r2, [pc, #388]	@ (8006c38 <SX1276SetRx+0x300>)
 8006ab2:	4694      	mov	ip, r2
 8006ab4:	4463      	add	r3, ip
 8006ab6:	0018      	movs	r0, r3
 8006ab8:	f7fe fe90 	bl	80057dc <SX1276SetChannel>
                    break;
 8006abc:	e042      	b.n	8006b44 <SX1276SetRx+0x20c>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006abe:	2144      	movs	r1, #68	@ 0x44
 8006ac0:	202f      	movs	r0, #47	@ 0x2f
 8006ac2:	f000 faf7 	bl	80070b4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8006ac6:	4b58      	ldr	r3, [pc, #352]	@ (8006c28 <SX1276SetRx+0x2f0>)
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	4a5c      	ldr	r2, [pc, #368]	@ (8006c3c <SX1276SetRx+0x304>)
 8006acc:	4694      	mov	ip, r2
 8006ace:	4463      	add	r3, ip
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	f7fe fe83 	bl	80057dc <SX1276SetChannel>
                    break;
 8006ad6:	e035      	b.n	8006b44 <SX1276SetRx+0x20c>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006ad8:	2144      	movs	r1, #68	@ 0x44
 8006ada:	202f      	movs	r0, #47	@ 0x2f
 8006adc:	f000 faea 	bl	80070b4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8006ae0:	4b51      	ldr	r3, [pc, #324]	@ (8006c28 <SX1276SetRx+0x2f0>)
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	4a56      	ldr	r2, [pc, #344]	@ (8006c40 <SX1276SetRx+0x308>)
 8006ae6:	4694      	mov	ip, r2
 8006ae8:	4463      	add	r3, ip
 8006aea:	0018      	movs	r0, r3
 8006aec:	f7fe fe76 	bl	80057dc <SX1276SetChannel>
                    break;
 8006af0:	e028      	b.n	8006b44 <SX1276SetRx+0x20c>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006af2:	2144      	movs	r1, #68	@ 0x44
 8006af4:	202f      	movs	r0, #47	@ 0x2f
 8006af6:	f000 fadd 	bl	80070b4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8006afa:	4b4b      	ldr	r3, [pc, #300]	@ (8006c28 <SX1276SetRx+0x2f0>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	4a51      	ldr	r2, [pc, #324]	@ (8006c44 <SX1276SetRx+0x30c>)
 8006b00:	4694      	mov	ip, r2
 8006b02:	4463      	add	r3, ip
 8006b04:	0018      	movs	r0, r3
 8006b06:	f7fe fe69 	bl	80057dc <SX1276SetChannel>
                    break;
 8006b0a:	e01b      	b.n	8006b44 <SX1276SetRx+0x20c>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8006b0c:	2140      	movs	r1, #64	@ 0x40
 8006b0e:	202f      	movs	r0, #47	@ 0x2f
 8006b10:	f000 fad0 	bl	80070b4 <SX1276Write>
                    break;
 8006b14:	e016      	b.n	8006b44 <SX1276SetRx+0x20c>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8006b16:	2140      	movs	r1, #64	@ 0x40
 8006b18:	202f      	movs	r0, #47	@ 0x2f
 8006b1a:	f000 facb 	bl	80070b4 <SX1276Write>
                    break;
 8006b1e:	e011      	b.n	8006b44 <SX1276SetRx+0x20c>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8006b20:	2140      	movs	r1, #64	@ 0x40
 8006b22:	202f      	movs	r0, #47	@ 0x2f
 8006b24:	f000 fac6 	bl	80070b4 <SX1276Write>
                    break;
 8006b28:	e00c      	b.n	8006b44 <SX1276SetRx+0x20c>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8006b2a:	2031      	movs	r0, #49	@ 0x31
 8006b2c:	f000 fad6 	bl	80070dc <SX1276Read>
 8006b30:	0003      	movs	r3, r0
 8006b32:	001a      	movs	r2, r3
 8006b34:	2380      	movs	r3, #128	@ 0x80
 8006b36:	425b      	negs	r3, r3
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	0019      	movs	r1, r3
 8006b3e:	2031      	movs	r0, #49	@ 0x31
 8006b40:	f000 fab8 	bl	80070b4 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8006b44:	230f      	movs	r3, #15
 8006b46:	18fb      	adds	r3, r7, r3
 8006b48:	4a37      	ldr	r2, [pc, #220]	@ (8006c28 <SX1276SetRx+0x2f0>)
 8006b4a:	2156      	movs	r1, #86	@ 0x56
 8006b4c:	5c52      	ldrb	r2, [r2, r1]
 8006b4e:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006b50:	4b35      	ldr	r3, [pc, #212]	@ (8006c28 <SX1276SetRx+0x2f0>)
 8006b52:	2253      	movs	r2, #83	@ 0x53
 8006b54:	5c9b      	ldrb	r3, [r3, r2]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d010      	beq.n	8006b7c <SX1276SetRx+0x244>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8006b5a:	211d      	movs	r1, #29
 8006b5c:	2011      	movs	r0, #17
 8006b5e:	f000 faa9 	bl	80070b4 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8006b62:	2040      	movs	r0, #64	@ 0x40
 8006b64:	f000 faba 	bl	80070dc <SX1276Read>
 8006b68:	0003      	movs	r3, r0
 8006b6a:	001a      	movs	r2, r3
 8006b6c:	2333      	movs	r3, #51	@ 0x33
 8006b6e:	4013      	ands	r3, r2
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	0019      	movs	r1, r3
 8006b74:	2040      	movs	r0, #64	@ 0x40
 8006b76:	f000 fa9d 	bl	80070b4 <SX1276Write>
 8006b7a:	e00f      	b.n	8006b9c <SX1276SetRx+0x264>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8006b7c:	211f      	movs	r1, #31
 8006b7e:	2011      	movs	r0, #17
 8006b80:	f000 fa98 	bl	80070b4 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8006b84:	2040      	movs	r0, #64	@ 0x40
 8006b86:	f000 faa9 	bl	80070dc <SX1276Read>
 8006b8a:	0003      	movs	r3, r0
 8006b8c:	001a      	movs	r2, r3
 8006b8e:	233f      	movs	r3, #63	@ 0x3f
 8006b90:	4013      	ands	r3, r2
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	0019      	movs	r1, r3
 8006b96:	2040      	movs	r0, #64	@ 0x40
 8006b98:	f000 fa8c 	bl	80070b4 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	200f      	movs	r0, #15
 8006ba0:	f000 fa88 	bl	80070b4 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	200d      	movs	r0, #13
 8006ba8:	f000 fa84 	bl	80070b4 <SX1276Write>
        }
        break;
 8006bac:	46c0      	nop			@ (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8006bae:	2380      	movs	r3, #128	@ 0x80
 8006bb0:	005a      	lsls	r2, r3, #1
 8006bb2:	4b25      	ldr	r3, [pc, #148]	@ (8006c48 <SX1276SetRx+0x310>)
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	0018      	movs	r0, r3
 8006bb8:	f012 ff88 	bl	8019acc <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 8006bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8006c28 <SX1276SetRx+0x2f0>)
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d009      	beq.n	8006bdc <SX1276SetRx+0x2a4>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	4b20      	ldr	r3, [pc, #128]	@ (8006c4c <SX1276SetRx+0x314>)
 8006bcc:	0011      	movs	r1, r2
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f00e fb62 	bl	8015298 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8006bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8006c4c <SX1276SetRx+0x314>)
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	f00e fa02 	bl	8014fe0 <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 8006bdc:	4b12      	ldr	r3, [pc, #72]	@ (8006c28 <SX1276SetRx+0x2f0>)
 8006bde:	795b      	ldrb	r3, [r3, #5]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10e      	bne.n	8006c02 <SX1276SetRx+0x2ca>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8006be4:	2005      	movs	r0, #5
 8006be6:	f000 f9bb 	bl	8006f60 <SX1276SetOpMode>

        TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8006bea:	4b0f      	ldr	r3, [pc, #60]	@ (8006c28 <SX1276SetRx+0x2f0>)
 8006bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bee:	4b18      	ldr	r3, [pc, #96]	@ (8006c50 <SX1276SetRx+0x318>)
 8006bf0:	0011      	movs	r1, r2
 8006bf2:	0018      	movs	r0, r3
 8006bf4:	f00e fb50 	bl	8015298 <TimerSetValue>
        TimerStart( &RxTimeoutSyncWord );
 8006bf8:	4b15      	ldr	r3, [pc, #84]	@ (8006c50 <SX1276SetRx+0x318>)
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	f00e f9f0 	bl	8014fe0 <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 8006c00:	e00b      	b.n	8006c1a <SX1276SetRx+0x2e2>
        if( rxContinuous == true )
 8006c02:	230f      	movs	r3, #15
 8006c04:	18fb      	adds	r3, r7, r3
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d003      	beq.n	8006c14 <SX1276SetRx+0x2dc>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8006c0c:	2005      	movs	r0, #5
 8006c0e:	f000 f9a7 	bl	8006f60 <SX1276SetOpMode>
}
 8006c12:	e002      	b.n	8006c1a <SX1276SetRx+0x2e2>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8006c14:	2006      	movs	r0, #6
 8006c16:	f000 f9a3 	bl	8006f60 <SX1276SetOpMode>
}
 8006c1a:	46c0      	nop			@ (mov r8, r8)
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	b004      	add	sp, #16
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	46c0      	nop			@ (mov r8, r8)
 8006c24:	20000554 	.word	0x20000554
 8006c28:	200004ec 	.word	0x200004ec
 8006c2c:	0801af20 	.word	0x0801af20
 8006c30:	00001e82 	.word	0x00001e82
 8006c34:	000028b4 	.word	0x000028b4
 8006c38:	00003d04 	.word	0x00003d04
 8006c3c:	0000515e 	.word	0x0000515e
 8006c40:	00007a12 	.word	0x00007a12
 8006c44:	0000a2c6 	.word	0x0000a2c6
 8006c48:	200003e8 	.word	0x200003e8
 8006c4c:	2000056c 	.word	0x2000056c
 8006c50:	20000584 	.word	0x20000584

08006c54 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 8006c5c:	4b3a      	ldr	r3, [pc, #232]	@ (8006d48 <SX1276SetTx+0xf4>)
 8006c5e:	0018      	movs	r0, r3
 8006c60:	f00e fa9c 	bl	801519c <TimerStop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	4b39      	ldr	r3, [pc, #228]	@ (8006d4c <SX1276SetTx+0xf8>)
 8006c68:	0011      	movs	r1, r2
 8006c6a:	0018      	movs	r0, r3
 8006c6c:	f00e fb14 	bl	8015298 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 8006c70:	4b37      	ldr	r3, [pc, #220]	@ (8006d50 <SX1276SetTx+0xfc>)
 8006c72:	795b      	ldrb	r3, [r3, #5]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d002      	beq.n	8006c7e <SX1276SetTx+0x2a>
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d028      	beq.n	8006cce <SX1276SetTx+0x7a>
 8006c7c:	e056      	b.n	8006d2c <SX1276SetTx+0xd8>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8006c7e:	2040      	movs	r0, #64	@ 0x40
 8006c80:	f000 fa2c 	bl	80070dc <SX1276Read>
 8006c84:	0003      	movs	r3, r0
 8006c86:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 8006c88:	2203      	movs	r2, #3
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 8006c8e:	2210      	movs	r2, #16
 8006c90:	4313      	orrs	r3, r2
 8006c92:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	0019      	movs	r1, r3
 8006c98:	2040      	movs	r0, #64	@ 0x40
 8006c9a:	f000 fa0b 	bl	80070b4 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8006c9e:	2041      	movs	r0, #65	@ 0x41
 8006ca0:	f000 fa1c 	bl	80070dc <SX1276Read>
 8006ca4:	0003      	movs	r3, r0
 8006ca6:	001a      	movs	r2, r3
 8006ca8:	233e      	movs	r3, #62	@ 0x3e
 8006caa:	4013      	ands	r3, r2
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	0019      	movs	r1, r3
 8006cb0:	2041      	movs	r0, #65	@ 0x41
 8006cb2:	f000 f9ff 	bl	80070b4 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8006cb6:	2035      	movs	r0, #53	@ 0x35
 8006cb8:	f000 fa10 	bl	80070dc <SX1276Read>
 8006cbc:	0003      	movs	r3, r0
 8006cbe:	001a      	movs	r2, r3
 8006cc0:	233f      	movs	r3, #63	@ 0x3f
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	b2d9      	uxtb	r1, r3
 8006cc6:	4b22      	ldr	r3, [pc, #136]	@ (8006d50 <SX1276SetTx+0xfc>)
 8006cc8:	223e      	movs	r2, #62	@ 0x3e
 8006cca:	5499      	strb	r1, [r3, r2]
        }
        break;
 8006ccc:	e02e      	b.n	8006d2c <SX1276SetTx+0xd8>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006cce:	4b20      	ldr	r3, [pc, #128]	@ (8006d50 <SX1276SetTx+0xfc>)
 8006cd0:	2253      	movs	r2, #83	@ 0x53
 8006cd2:	5c9b      	ldrb	r3, [r3, r2]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d014      	beq.n	8006d02 <SX1276SetTx+0xae>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8006cd8:	21f5      	movs	r1, #245	@ 0xf5
 8006cda:	2011      	movs	r0, #17
 8006cdc:	f000 f9ea 	bl	80070b4 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8006ce0:	2040      	movs	r0, #64	@ 0x40
 8006ce2:	f000 f9fb 	bl	80070dc <SX1276Read>
 8006ce6:	0003      	movs	r3, r0
 8006ce8:	b25b      	sxtb	r3, r3
 8006cea:	2233      	movs	r2, #51	@ 0x33
 8006cec:	4013      	ands	r3, r2
 8006cee:	b25b      	sxtb	r3, r3
 8006cf0:	2240      	movs	r2, #64	@ 0x40
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	b25b      	sxtb	r3, r3
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	0019      	movs	r1, r3
 8006cfa:	2040      	movs	r0, #64	@ 0x40
 8006cfc:	f000 f9da 	bl	80070b4 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 8006d00:	e013      	b.n	8006d2a <SX1276SetTx+0xd6>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8006d02:	21f7      	movs	r1, #247	@ 0xf7
 8006d04:	2011      	movs	r0, #17
 8006d06:	f000 f9d5 	bl	80070b4 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8006d0a:	2040      	movs	r0, #64	@ 0x40
 8006d0c:	f000 f9e6 	bl	80070dc <SX1276Read>
 8006d10:	0003      	movs	r3, r0
 8006d12:	b25b      	sxtb	r3, r3
 8006d14:	223f      	movs	r2, #63	@ 0x3f
 8006d16:	4013      	ands	r3, r2
 8006d18:	b25b      	sxtb	r3, r3
 8006d1a:	2240      	movs	r2, #64	@ 0x40
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	b25b      	sxtb	r3, r3
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	0019      	movs	r1, r3
 8006d24:	2040      	movs	r0, #64	@ 0x40
 8006d26:	f000 f9c5 	bl	80070b4 <SX1276Write>
        break;
 8006d2a:	46c0      	nop			@ (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 8006d2c:	4b08      	ldr	r3, [pc, #32]	@ (8006d50 <SX1276SetTx+0xfc>)
 8006d2e:	2202      	movs	r2, #2
 8006d30:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8006d32:	4b06      	ldr	r3, [pc, #24]	@ (8006d4c <SX1276SetTx+0xf8>)
 8006d34:	0018      	movs	r0, r3
 8006d36:	f00e f953 	bl	8014fe0 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8006d3a:	2003      	movs	r0, #3
 8006d3c:	f000 f910 	bl	8006f60 <SX1276SetOpMode>
}
 8006d40:	46c0      	nop			@ (mov r8, r8)
 8006d42:	46bd      	mov	sp, r7
 8006d44:	b002      	add	sp, #8
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	2000056c 	.word	0x2000056c
 8006d4c:	20000554 	.word	0x20000554
 8006d50:	200004ec 	.word	0x200004ec

08006d54 <SX1276StartCad>:

void SX1276StartCad( void )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 8006d58:	4b11      	ldr	r3, [pc, #68]	@ (8006da0 <SX1276StartCad+0x4c>)
 8006d5a:	795b      	ldrb	r3, [r3, #5]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d01a      	beq.n	8006d96 <SX1276StartCad+0x42>
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d000      	beq.n	8006d66 <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 8006d64:	e018      	b.n	8006d98 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8006d66:	21fa      	movs	r1, #250	@ 0xfa
 8006d68:	2011      	movs	r0, #17
 8006d6a:	f000 f9a3 	bl	80070b4 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8006d6e:	2040      	movs	r0, #64	@ 0x40
 8006d70:	f000 f9b4 	bl	80070dc <SX1276Read>
 8006d74:	0003      	movs	r3, r0
 8006d76:	001a      	movs	r2, r3
 8006d78:	2303      	movs	r3, #3
 8006d7a:	439a      	bics	r2, r3
 8006d7c:	0013      	movs	r3, r2
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	0019      	movs	r1, r3
 8006d82:	2040      	movs	r0, #64	@ 0x40
 8006d84:	f000 f996 	bl	80070b4 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8006d88:	4b05      	ldr	r3, [pc, #20]	@ (8006da0 <SX1276StartCad+0x4c>)
 8006d8a:	2203      	movs	r2, #3
 8006d8c:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8006d8e:	2007      	movs	r0, #7
 8006d90:	f000 f8e6 	bl	8006f60 <SX1276SetOpMode>
        break;
 8006d94:	e000      	b.n	8006d98 <SX1276StartCad+0x44>
        break;
 8006d96:	46c0      	nop			@ (mov r8, r8)
    }
}
 8006d98:	46c0      	nop			@ (mov r8, r8)
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	46c0      	nop			@ (mov r8, r8)
 8006da0:	200004ec 	.word	0x200004ec

08006da4 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b08e      	sub	sp, #56	@ 0x38
 8006da8:	af0a      	add	r7, sp, #40	@ 0x28
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	0008      	movs	r0, r1
 8006dae:	0011      	movs	r1, r2
 8006db0:	1cfb      	adds	r3, r7, #3
 8006db2:	1c02      	adds	r2, r0, #0
 8006db4:	701a      	strb	r2, [r3, #0]
 8006db6:	003b      	movs	r3, r7
 8006db8:	1c0a      	adds	r2, r1, #0
 8006dba:	801a      	strh	r2, [r3, #0]
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8006dbc:	003b      	movs	r3, r7
 8006dbe:	881a      	ldrh	r2, [r3, #0]
 8006dc0:	0013      	movs	r3, r2
 8006dc2:	015b      	lsls	r3, r3, #5
 8006dc4:	1a9b      	subs	r3, r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	189b      	adds	r3, r3, r2
 8006dca:	00db      	lsls	r3, r3, #3
 8006dcc:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	0018      	movs	r0, r3
 8006dd2:	f7fe fd03 	bl	80057dc <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8006dd6:	1cfb      	adds	r3, r7, #3
 8006dd8:	2100      	movs	r1, #0
 8006dda:	5659      	ldrsb	r1, [r3, r1]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	9308      	str	r3, [sp, #32]
 8006de0:	2300      	movs	r3, #0
 8006de2:	9307      	str	r3, [sp, #28]
 8006de4:	2300      	movs	r3, #0
 8006de6:	9306      	str	r3, [sp, #24]
 8006de8:	2300      	movs	r3, #0
 8006dea:	9305      	str	r3, [sp, #20]
 8006dec:	2300      	movs	r3, #0
 8006dee:	9304      	str	r3, [sp, #16]
 8006df0:	2300      	movs	r3, #0
 8006df2:	9303      	str	r3, [sp, #12]
 8006df4:	2305      	movs	r3, #5
 8006df6:	9302      	str	r3, [sp, #8]
 8006df8:	2300      	movs	r3, #0
 8006dfa:	9301      	str	r3, [sp, #4]
 8006dfc:	2396      	movs	r3, #150	@ 0x96
 8006dfe:	015b      	lsls	r3, r3, #5
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	2300      	movs	r3, #0
 8006e04:	2200      	movs	r2, #0
 8006e06:	2000      	movs	r0, #0
 8006e08:	f7ff f8e6 	bl	8005fd8 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8006e0c:	2031      	movs	r0, #49	@ 0x31
 8006e0e:	f000 f965 	bl	80070dc <SX1276Read>
 8006e12:	0003      	movs	r3, r0
 8006e14:	001a      	movs	r2, r3
 8006e16:	2340      	movs	r3, #64	@ 0x40
 8006e18:	439a      	bics	r2, r3
 8006e1a:	0013      	movs	r3, r2
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	0019      	movs	r1, r3
 8006e20:	2031      	movs	r0, #49	@ 0x31
 8006e22:	f000 f947 	bl	80070b4 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8006e26:	21f0      	movs	r1, #240	@ 0xf0
 8006e28:	2040      	movs	r0, #64	@ 0x40
 8006e2a:	f000 f943 	bl	80070b4 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8006e2e:	21a0      	movs	r1, #160	@ 0xa0
 8006e30:	2041      	movs	r0, #65	@ 0x41
 8006e32:	f000 f93f 	bl	80070b4 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	4b09      	ldr	r3, [pc, #36]	@ (8006e60 <SX1276SetTxContinuousWave+0xbc>)
 8006e3a:	0011      	movs	r1, r2
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	f00e fa2b 	bl	8015298 <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING;
 8006e42:	4b08      	ldr	r3, [pc, #32]	@ (8006e64 <SX1276SetTxContinuousWave+0xc0>)
 8006e44:	2202      	movs	r2, #2
 8006e46:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8006e48:	4b05      	ldr	r3, [pc, #20]	@ (8006e60 <SX1276SetTxContinuousWave+0xbc>)
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	f00e f8c8 	bl	8014fe0 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8006e50:	2003      	movs	r0, #3
 8006e52:	f000 f885 	bl	8006f60 <SX1276SetOpMode>
}
 8006e56:	46c0      	nop			@ (mov r8, r8)
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	b004      	add	sp, #16
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	46c0      	nop			@ (mov r8, r8)
 8006e60:	20000554 	.word	0x20000554
 8006e64:	200004ec 	.word	0x200004ec

08006e68 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	0002      	movs	r2, r0
 8006e70:	1dfb      	adds	r3, r7, #7
 8006e72:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 8006e74:	230e      	movs	r3, #14
 8006e76:	18fb      	adds	r3, r7, r3
 8006e78:	2200      	movs	r2, #0
 8006e7a:	801a      	strh	r2, [r3, #0]

    switch( modem )
 8006e7c:	1dfb      	adds	r3, r7, #7
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <SX1276ReadRssi+0x22>
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d00c      	beq.n	8006ea2 <SX1276ReadRssi+0x3a>
 8006e88:	e024      	b.n	8006ed4 <SX1276ReadRssi+0x6c>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8006e8a:	2011      	movs	r0, #17
 8006e8c:	f000 f926 	bl	80070dc <SX1276Read>
 8006e90:	0003      	movs	r3, r0
 8006e92:	085b      	lsrs	r3, r3, #1
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	425b      	negs	r3, r3
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	230e      	movs	r3, #14
 8006e9c:	18fb      	adds	r3, r7, r3
 8006e9e:	801a      	strh	r2, [r3, #0]
        break;
 8006ea0:	e01e      	b.n	8006ee0 <SX1276ReadRssi+0x78>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006ea2:	4b13      	ldr	r3, [pc, #76]	@ (8006ef0 <SX1276ReadRssi+0x88>)
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	4a13      	ldr	r2, [pc, #76]	@ (8006ef4 <SX1276ReadRssi+0x8c>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d909      	bls.n	8006ec0 <SX1276ReadRssi+0x58>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8006eac:	201b      	movs	r0, #27
 8006eae:	f000 f915 	bl	80070dc <SX1276Read>
 8006eb2:	0003      	movs	r3, r0
 8006eb4:	3b9d      	subs	r3, #157	@ 0x9d
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	230e      	movs	r3, #14
 8006eba:	18fb      	adds	r3, r7, r3
 8006ebc:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 8006ebe:	e00f      	b.n	8006ee0 <SX1276ReadRssi+0x78>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8006ec0:	201b      	movs	r0, #27
 8006ec2:	f000 f90b 	bl	80070dc <SX1276Read>
 8006ec6:	0003      	movs	r3, r0
 8006ec8:	3ba4      	subs	r3, #164	@ 0xa4
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	230e      	movs	r3, #14
 8006ece:	18fb      	adds	r3, r7, r3
 8006ed0:	801a      	strh	r2, [r3, #0]
        break;
 8006ed2:	e005      	b.n	8006ee0 <SX1276ReadRssi+0x78>
    default:
        rssi = -1;
 8006ed4:	230e      	movs	r3, #14
 8006ed6:	18fb      	adds	r3, r7, r3
 8006ed8:	2201      	movs	r2, #1
 8006eda:	4252      	negs	r2, r2
 8006edc:	801a      	strh	r2, [r3, #0]
        break;
 8006ede:	46c0      	nop			@ (mov r8, r8)
    }
    return rssi;
 8006ee0:	230e      	movs	r3, #14
 8006ee2:	18fb      	adds	r3, r7, r3
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	5e9b      	ldrsh	r3, [r3, r2]
}
 8006ee8:	0018      	movs	r0, r3
 8006eea:	46bd      	mov	sp, r7
 8006eec:	b004      	add	sp, #16
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	200004ec 	.word	0x200004ec
 8006ef4:	1f4add40 	.word	0x1f4add40

08006ef8 <SX1276Reset>:

void SX1276Reset( void )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initStruct = { 0 };
 8006efe:	1d3b      	adds	r3, r7, #4
 8006f00:	0018      	movs	r0, r3
 8006f02:	2314      	movs	r3, #20
 8006f04:	001a      	movs	r2, r3
 8006f06:	2100      	movs	r1, #0
 8006f08:	f012 fde0 	bl	8019acc <memset>

    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8006f0c:	1d3b      	adds	r3, r7, #4
 8006f0e:	2201      	movs	r2, #1
 8006f10:	605a      	str	r2, [r3, #4]
    initStruct.Pull = GPIO_NOPULL;
 8006f12:	1d3b      	adds	r3, r7, #4
 8006f14:	2200      	movs	r2, #0
 8006f16:	609a      	str	r2, [r3, #8]
    initStruct.Speed = GPIO_SPEED_HIGH;
 8006f18:	1d3b      	adds	r3, r7, #4
 8006f1a:	2203      	movs	r2, #3
 8006f1c:	60da      	str	r2, [r3, #12]

    // Set RESET pin to 0
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8006f1e:	1d3b      	adds	r3, r7, #4
 8006f20:	480e      	ldr	r0, [pc, #56]	@ (8006f5c <SX1276Reset+0x64>)
 8006f22:	001a      	movs	r2, r3
 8006f24:	2101      	movs	r1, #1
 8006f26:	f7fc fdb1 	bl	8003a8c <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 8006f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8006f5c <SX1276Reset+0x64>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2101      	movs	r1, #1
 8006f30:	0018      	movs	r0, r3
 8006f32:	f7fc fe7d 	bl	8003c30 <HW_GPIO_Write>

    // Wait 1 ms
    DelayMs( 1 );
 8006f36:	2001      	movs	r0, #1
 8006f38:	f7fc f83f 	bl	8002fba <HAL_Delay>

    // Configure RESET as input
    initStruct.Mode = GPIO_NOPULL;
 8006f3c:	1d3b      	adds	r3, r7, #4
 8006f3e:	2200      	movs	r2, #0
 8006f40:	605a      	str	r2, [r3, #4]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8006f42:	1d3b      	adds	r3, r7, #4
 8006f44:	4805      	ldr	r0, [pc, #20]	@ (8006f5c <SX1276Reset+0x64>)
 8006f46:	001a      	movs	r2, r3
 8006f48:	2101      	movs	r1, #1
 8006f4a:	f7fc fd9f 	bl	8003a8c <HW_GPIO_Init>

    // Wait 6 ms
    DelayMs( 6 );
 8006f4e:	2006      	movs	r0, #6
 8006f50:	f7fc f833 	bl	8002fba <HAL_Delay>
}
 8006f54:	46c0      	nop			@ (mov r8, r8)
 8006f56:	46bd      	mov	sp, r7
 8006f58:	b006      	add	sp, #24
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	50000800 	.word	0x50000800

08006f60 <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	0002      	movs	r2, r0
 8006f68:	1dfb      	adds	r3, r7, #7
 8006f6a:	701a      	strb	r2, [r3, #0]
    if( opMode == RF_OPMODE_SLEEP )
 8006f6c:	1dfb      	adds	r3, r7, #7
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d11c      	bne.n	8006fae <SX1276SetOpMode+0x4e>
    {
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8006f74:	2001      	movs	r0, #1
 8006f76:	f000 f8b1 	bl	80070dc <SX1276Read>
 8006f7a:	0003      	movs	r3, r0
 8006f7c:	b25b      	sxtb	r3, r3
 8006f7e:	2207      	movs	r2, #7
 8006f80:	4393      	bics	r3, r2
 8006f82:	b25a      	sxtb	r2, r3
 8006f84:	1dfb      	adds	r3, r7, #7
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	b25b      	sxtb	r3, r3
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	b25b      	sxtb	r3, r3
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	0019      	movs	r1, r3
 8006f92:	2001      	movs	r0, #1
 8006f94:	f000 f88e 	bl	80070b4 <SX1276Write>
      
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 8006f98:	4b18      	ldr	r3, [pc, #96]	@ (8006ffc <SX1276SetOpMode+0x9c>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	2001      	movs	r0, #1
 8006fa0:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 8006fa2:	4b16      	ldr	r3, [pc, #88]	@ (8006ffc <SX1276SetOpMode+0x9c>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2000      	movs	r0, #0
 8006faa:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
      
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 8006fac:	e022      	b.n	8006ff4 <SX1276SetOpMode+0x94>
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 8006fae:	4b13      	ldr	r3, [pc, #76]	@ (8006ffc <SX1276SetOpMode+0x9c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2001      	movs	r0, #1
 8006fb6:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 8006fb8:	4b10      	ldr	r3, [pc, #64]	@ (8006ffc <SX1276SetOpMode+0x9c>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 8006fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8006ffc <SX1276SetOpMode+0x9c>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	1dfa      	adds	r2, r7, #7
 8006fca:	7812      	ldrb	r2, [r2, #0]
 8006fcc:	0010      	movs	r0, r2
 8006fce:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8006fd0:	2001      	movs	r0, #1
 8006fd2:	f000 f883 	bl	80070dc <SX1276Read>
 8006fd6:	0003      	movs	r3, r0
 8006fd8:	b25b      	sxtb	r3, r3
 8006fda:	2207      	movs	r2, #7
 8006fdc:	4393      	bics	r3, r2
 8006fde:	b25a      	sxtb	r2, r3
 8006fe0:	1dfb      	adds	r3, r7, #7
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	b25b      	sxtb	r3, r3
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	b25b      	sxtb	r3, r3
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	0019      	movs	r1, r3
 8006fee:	2001      	movs	r0, #1
 8006ff0:	f000 f860 	bl	80070b4 <SX1276Write>
}
 8006ff4:	46c0      	nop			@ (mov r8, r8)
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	b002      	add	sp, #8
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	200004e8 	.word	0x200004e8

08007000 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	0002      	movs	r2, r0
 8007008:	1dfb      	adds	r3, r7, #7
 800700a:	701a      	strb	r2, [r3, #0]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 800700c:	2001      	movs	r0, #1
 800700e:	f000 f865 	bl	80070dc <SX1276Read>
 8007012:	0003      	movs	r3, r0
 8007014:	b25b      	sxtb	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	da03      	bge.n	8007022 <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 800701a:	4b25      	ldr	r3, [pc, #148]	@ (80070b0 <SX1276SetModem+0xb0>)
 800701c:	2201      	movs	r2, #1
 800701e:	715a      	strb	r2, [r3, #5]
 8007020:	e002      	b.n	8007028 <SX1276SetModem+0x28>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 8007022:	4b23      	ldr	r3, [pc, #140]	@ (80070b0 <SX1276SetModem+0xb0>)
 8007024:	2200      	movs	r2, #0
 8007026:	715a      	strb	r2, [r3, #5]
    }

    if( SX1276.Settings.Modem == modem )
 8007028:	4b21      	ldr	r3, [pc, #132]	@ (80070b0 <SX1276SetModem+0xb0>)
 800702a:	795b      	ldrb	r3, [r3, #5]
 800702c:	1dfa      	adds	r2, r7, #7
 800702e:	7812      	ldrb	r2, [r2, #0]
 8007030:	429a      	cmp	r2, r3
 8007032:	d038      	beq.n	80070a6 <SX1276SetModem+0xa6>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 8007034:	4b1e      	ldr	r3, [pc, #120]	@ (80070b0 <SX1276SetModem+0xb0>)
 8007036:	1dfa      	adds	r2, r7, #7
 8007038:	7812      	ldrb	r2, [r2, #0]
 800703a:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 800703c:	4b1c      	ldr	r3, [pc, #112]	@ (80070b0 <SX1276SetModem+0xb0>)
 800703e:	795b      	ldrb	r3, [r3, #5]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d017      	beq.n	8007074 <SX1276SetModem+0x74>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8007044:	2000      	movs	r0, #0
 8007046:	f7ff ff8b 	bl	8006f60 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 800704a:	2001      	movs	r0, #1
 800704c:	f000 f846 	bl	80070dc <SX1276Read>
 8007050:	0003      	movs	r3, r0
 8007052:	001a      	movs	r2, r3
 8007054:	237f      	movs	r3, #127	@ 0x7f
 8007056:	4013      	ands	r3, r2
 8007058:	b2db      	uxtb	r3, r3
 800705a:	0019      	movs	r1, r3
 800705c:	2001      	movs	r0, #1
 800705e:	f000 f829 	bl	80070b4 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8007062:	2100      	movs	r1, #0
 8007064:	2040      	movs	r0, #64	@ 0x40
 8007066:	f000 f825 	bl	80070b4 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 800706a:	2130      	movs	r1, #48	@ 0x30
 800706c:	2041      	movs	r0, #65	@ 0x41
 800706e:	f000 f821 	bl	80070b4 <SX1276Write>
        break;
 8007072:	e019      	b.n	80070a8 <SX1276SetModem+0xa8>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8007074:	2000      	movs	r0, #0
 8007076:	f7ff ff73 	bl	8006f60 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 800707a:	2001      	movs	r0, #1
 800707c:	f000 f82e 	bl	80070dc <SX1276Read>
 8007080:	0003      	movs	r3, r0
 8007082:	001a      	movs	r2, r3
 8007084:	2380      	movs	r3, #128	@ 0x80
 8007086:	425b      	negs	r3, r3
 8007088:	4313      	orrs	r3, r2
 800708a:	b2db      	uxtb	r3, r3
 800708c:	0019      	movs	r1, r3
 800708e:	2001      	movs	r0, #1
 8007090:	f000 f810 	bl	80070b4 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8007094:	2100      	movs	r1, #0
 8007096:	2040      	movs	r0, #64	@ 0x40
 8007098:	f000 f80c 	bl	80070b4 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800709c:	2100      	movs	r1, #0
 800709e:	2041      	movs	r0, #65	@ 0x41
 80070a0:	f000 f808 	bl	80070b4 <SX1276Write>
        break;
 80070a4:	e000      	b.n	80070a8 <SX1276SetModem+0xa8>
        return;
 80070a6:	46c0      	nop			@ (mov r8, r8)
    }
}
 80070a8:	46bd      	mov	sp, r7
 80070aa:	b002      	add	sp, #8
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	46c0      	nop			@ (mov r8, r8)
 80070b0:	200004ec 	.word	0x200004ec

080070b4 <SX1276Write>:

void SX1276Write( uint16_t addr, uint8_t data )
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	0002      	movs	r2, r0
 80070bc:	1dbb      	adds	r3, r7, #6
 80070be:	801a      	strh	r2, [r3, #0]
 80070c0:	1d7b      	adds	r3, r7, #5
 80070c2:	1c0a      	adds	r2, r1, #0
 80070c4:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( addr, &data, 1 );
 80070c6:	1d79      	adds	r1, r7, #5
 80070c8:	1dbb      	adds	r3, r7, #6
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	2201      	movs	r2, #1
 80070ce:	0018      	movs	r0, r3
 80070d0:	f000 f818 	bl	8007104 <SX1276WriteBuffer>
}
 80070d4:	46c0      	nop			@ (mov r8, r8)
 80070d6:	46bd      	mov	sp, r7
 80070d8:	b002      	add	sp, #8
 80070da:	bd80      	pop	{r7, pc}

080070dc <SX1276Read>:

uint8_t SX1276Read( uint16_t addr )
{
 80070dc:	b590      	push	{r4, r7, lr}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	0002      	movs	r2, r0
 80070e4:	1dbb      	adds	r3, r7, #6
 80070e6:	801a      	strh	r2, [r3, #0]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 80070e8:	240f      	movs	r4, #15
 80070ea:	1939      	adds	r1, r7, r4
 80070ec:	1dbb      	adds	r3, r7, #6
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	2201      	movs	r2, #1
 80070f2:	0018      	movs	r0, r3
 80070f4:	f000 f847 	bl	8007186 <SX1276ReadBuffer>
    return data;
 80070f8:	193b      	adds	r3, r7, r4
 80070fa:	781b      	ldrb	r3, [r3, #0]
}
 80070fc:	0018      	movs	r0, r3
 80070fe:	46bd      	mov	sp, r7
 8007100:	b005      	add	sp, #20
 8007102:	bd90      	pop	{r4, r7, pc}

08007104 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8007104:	b590      	push	{r4, r7, lr}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6039      	str	r1, [r7, #0]
 800710c:	0011      	movs	r1, r2
 800710e:	1dbb      	adds	r3, r7, #6
 8007110:	1c02      	adds	r2, r0, #0
 8007112:	801a      	strh	r2, [r3, #0]
 8007114:	1d7b      	adds	r3, r7, #5
 8007116:	1c0a      	adds	r2, r1, #0
 8007118:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 800711a:	2380      	movs	r3, #128	@ 0x80
 800711c:	0219      	lsls	r1, r3, #8
 800711e:	23a0      	movs	r3, #160	@ 0xa0
 8007120:	05db      	lsls	r3, r3, #23
 8007122:	2200      	movs	r2, #0
 8007124:	0018      	movs	r0, r3
 8007126:	f7fc fd83 	bl	8003c30 <HW_GPIO_Write>

    HW_SPI_InOut( addr | 0x80 );
 800712a:	1dbb      	adds	r3, r7, #6
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	2280      	movs	r2, #128	@ 0x80
 8007130:	4313      	orrs	r3, r2
 8007132:	b29b      	uxth	r3, r3
 8007134:	0018      	movs	r0, r3
 8007136:	f7fd fa91 	bl	800465c <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 800713a:	230f      	movs	r3, #15
 800713c:	18fb      	adds	r3, r7, r3
 800713e:	2200      	movs	r2, #0
 8007140:	701a      	strb	r2, [r3, #0]
 8007142:	e00d      	b.n	8007160 <SX1276WriteBuffer+0x5c>
    {
        HW_SPI_InOut( buffer[i] );
 8007144:	240f      	movs	r4, #15
 8007146:	193b      	adds	r3, r7, r4
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	18d3      	adds	r3, r2, r3
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	0018      	movs	r0, r3
 8007152:	f7fd fa83 	bl	800465c <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8007156:	193b      	adds	r3, r7, r4
 8007158:	781a      	ldrb	r2, [r3, #0]
 800715a:	193b      	adds	r3, r7, r4
 800715c:	3201      	adds	r2, #1
 800715e:	701a      	strb	r2, [r3, #0]
 8007160:	230f      	movs	r3, #15
 8007162:	18fa      	adds	r2, r7, r3
 8007164:	1d7b      	adds	r3, r7, #5
 8007166:	7812      	ldrb	r2, [r2, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	429a      	cmp	r2, r3
 800716c:	d3ea      	bcc.n	8007144 <SX1276WriteBuffer+0x40>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 800716e:	2380      	movs	r3, #128	@ 0x80
 8007170:	0219      	lsls	r1, r3, #8
 8007172:	23a0      	movs	r3, #160	@ 0xa0
 8007174:	05db      	lsls	r3, r3, #23
 8007176:	2201      	movs	r2, #1
 8007178:	0018      	movs	r0, r3
 800717a:	f7fc fd59 	bl	8003c30 <HW_GPIO_Write>
}
 800717e:	46c0      	nop			@ (mov r8, r8)
 8007180:	46bd      	mov	sp, r7
 8007182:	b005      	add	sp, #20
 8007184:	bd90      	pop	{r4, r7, pc}

08007186 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b084      	sub	sp, #16
 800718a:	af00      	add	r7, sp, #0
 800718c:	6039      	str	r1, [r7, #0]
 800718e:	0011      	movs	r1, r2
 8007190:	1dbb      	adds	r3, r7, #6
 8007192:	1c02      	adds	r2, r0, #0
 8007194:	801a      	strh	r2, [r3, #0]
 8007196:	1d7b      	adds	r3, r7, #5
 8007198:	1c0a      	adds	r2, r1, #0
 800719a:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 800719c:	2380      	movs	r3, #128	@ 0x80
 800719e:	0219      	lsls	r1, r3, #8
 80071a0:	23a0      	movs	r3, #160	@ 0xa0
 80071a2:	05db      	lsls	r3, r3, #23
 80071a4:	2200      	movs	r2, #0
 80071a6:	0018      	movs	r0, r3
 80071a8:	f7fc fd42 	bl	8003c30 <HW_GPIO_Write>

    HW_SPI_InOut( addr & 0x7F );
 80071ac:	1dbb      	adds	r3, r7, #6
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	227f      	movs	r2, #127	@ 0x7f
 80071b2:	4013      	ands	r3, r2
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	0018      	movs	r0, r3
 80071b8:	f7fd fa50 	bl	800465c <HW_SPI_InOut>

    for( i = 0; i < size; i++ )
 80071bc:	230f      	movs	r3, #15
 80071be:	18fb      	adds	r3, r7, r3
 80071c0:	2200      	movs	r2, #0
 80071c2:	701a      	strb	r2, [r3, #0]
 80071c4:	e010      	b.n	80071e8 <SX1276ReadBuffer+0x62>
    {
        buffer[i] = HW_SPI_InOut( 0 );
 80071c6:	2000      	movs	r0, #0
 80071c8:	f7fd fa48 	bl	800465c <HW_SPI_InOut>
 80071cc:	0003      	movs	r3, r0
 80071ce:	0019      	movs	r1, r3
 80071d0:	200f      	movs	r0, #15
 80071d2:	183b      	adds	r3, r7, r0
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	18d3      	adds	r3, r2, r3
 80071da:	b2ca      	uxtb	r2, r1
 80071dc:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80071de:	183b      	adds	r3, r7, r0
 80071e0:	781a      	ldrb	r2, [r3, #0]
 80071e2:	183b      	adds	r3, r7, r0
 80071e4:	3201      	adds	r2, #1
 80071e6:	701a      	strb	r2, [r3, #0]
 80071e8:	230f      	movs	r3, #15
 80071ea:	18fa      	adds	r2, r7, r3
 80071ec:	1d7b      	adds	r3, r7, #5
 80071ee:	7812      	ldrb	r2, [r2, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d3e7      	bcc.n	80071c6 <SX1276ReadBuffer+0x40>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 80071f6:	2380      	movs	r3, #128	@ 0x80
 80071f8:	0219      	lsls	r1, r3, #8
 80071fa:	23a0      	movs	r3, #160	@ 0xa0
 80071fc:	05db      	lsls	r3, r3, #23
 80071fe:	2201      	movs	r2, #1
 8007200:	0018      	movs	r0, r3
 8007202:	f7fc fd15 	bl	8003c30 <HW_GPIO_Write>
}
 8007206:	46c0      	nop			@ (mov r8, r8)
 8007208:	46bd      	mov	sp, r7
 800720a:	b004      	add	sp, #16
 800720c:	bd80      	pop	{r7, pc}

0800720e <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b082      	sub	sp, #8
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	000a      	movs	r2, r1
 8007218:	1cfb      	adds	r3, r7, #3
 800721a:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( 0, buffer, size );
 800721c:	1cfb      	adds	r3, r7, #3
 800721e:	781a      	ldrb	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	0019      	movs	r1, r3
 8007224:	2000      	movs	r0, #0
 8007226:	f7ff ff6d 	bl	8007104 <SX1276WriteBuffer>
}
 800722a:	46c0      	nop			@ (mov r8, r8)
 800722c:	46bd      	mov	sp, r7
 800722e:	b002      	add	sp, #8
 8007230:	bd80      	pop	{r7, pc}

08007232 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b082      	sub	sp, #8
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	000a      	movs	r2, r1
 800723c:	1cfb      	adds	r3, r7, #3
 800723e:	701a      	strb	r2, [r3, #0]
    SX1276ReadBuffer( 0, buffer, size );
 8007240:	1cfb      	adds	r3, r7, #3
 8007242:	781a      	ldrb	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	0019      	movs	r1, r3
 8007248:	2000      	movs	r0, #0
 800724a:	f7ff ff9c 	bl	8007186 <SX1276ReadBuffer>
}
 800724e:	46c0      	nop			@ (mov r8, r8)
 8007250:	46bd      	mov	sp, r7
 8007252:	b002      	add	sp, #8
 8007254:	bd80      	pop	{r7, pc}
	...

08007258 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	0002      	movs	r2, r0
 8007260:	1dfb      	adds	r3, r7, #7
 8007262:	701a      	strb	r2, [r3, #0]
 8007264:	1dbb      	adds	r3, r7, #6
 8007266:	1c0a      	adds	r2, r1, #0
 8007268:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 800726a:	1dfb      	adds	r3, r7, #7
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	0018      	movs	r0, r3
 8007270:	f7ff fec6 	bl	8007000 <SX1276SetModem>

    switch( modem )
 8007274:	1dfb      	adds	r3, r7, #7
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <SX1276SetMaxPayloadLength+0x2a>
 800727c:	2b01      	cmp	r3, #1
 800727e:	d00f      	beq.n	80072a0 <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 8007280:	e016      	b.n	80072b0 <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 8007282:	4b0d      	ldr	r3, [pc, #52]	@ (80072b8 <SX1276SetMaxPayloadLength+0x60>)
 8007284:	2222      	movs	r2, #34	@ 0x22
 8007286:	5c9b      	ldrb	r3, [r3, r2]
 8007288:	2201      	movs	r2, #1
 800728a:	4053      	eors	r3, r2
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00d      	beq.n	80072ae <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8007292:	1dbb      	adds	r3, r7, #6
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	0019      	movs	r1, r3
 8007298:	2032      	movs	r0, #50	@ 0x32
 800729a:	f7ff ff0b 	bl	80070b4 <SX1276Write>
        break;
 800729e:	e006      	b.n	80072ae <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 80072a0:	1dbb      	adds	r3, r7, #6
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	0019      	movs	r1, r3
 80072a6:	2023      	movs	r0, #35	@ 0x23
 80072a8:	f7ff ff04 	bl	80070b4 <SX1276Write>
        break;
 80072ac:	e000      	b.n	80072b0 <SX1276SetMaxPayloadLength+0x58>
        break;
 80072ae:	46c0      	nop			@ (mov r8, r8)
}
 80072b0:	46c0      	nop			@ (mov r8, r8)
 80072b2:	46bd      	mov	sp, r7
 80072b4:	b002      	add	sp, #8
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	200004ec 	.word	0x200004ec

080072bc <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	0002      	movs	r2, r0
 80072c4:	1dfb      	adds	r3, r7, #7
 80072c6:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( MODEM_LORA );
 80072c8:	2001      	movs	r0, #1
 80072ca:	f7ff fe99 	bl	8007000 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 80072ce:	4b0b      	ldr	r3, [pc, #44]	@ (80072fc <SX1276SetPublicNetwork+0x40>)
 80072d0:	1dfa      	adds	r2, r7, #7
 80072d2:	215c      	movs	r1, #92	@ 0x5c
 80072d4:	7812      	ldrb	r2, [r2, #0]
 80072d6:	545a      	strb	r2, [r3, r1]
    if( enable == true )
 80072d8:	1dfb      	adds	r3, r7, #7
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d004      	beq.n	80072ea <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 80072e0:	2134      	movs	r1, #52	@ 0x34
 80072e2:	2039      	movs	r0, #57	@ 0x39
 80072e4:	f7ff fee6 	bl	80070b4 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 80072e8:	e003      	b.n	80072f2 <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 80072ea:	2112      	movs	r1, #18
 80072ec:	2039      	movs	r0, #57	@ 0x39
 80072ee:	f7ff fee1 	bl	80070b4 <SX1276Write>
}
 80072f2:	46c0      	nop			@ (mov r8, r8)
 80072f4:	46bd      	mov	sp, r7
 80072f6:	b002      	add	sp, #8
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	46c0      	nop			@ (mov r8, r8)
 80072fc:	200004ec 	.word	0x200004ec

08007300 <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	af00      	add	r7, sp, #0
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8007304:	4b04      	ldr	r3, [pc, #16]	@ (8007318 <SX1276GetWakeupTime+0x18>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	4798      	blx	r3
 800730c:	0003      	movs	r3, r0
 800730e:	3302      	adds	r3, #2
}
 8007310:	0018      	movs	r0, r3
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	46c0      	nop			@ (mov r8, r8)
 8007318:	200004e8 	.word	0x200004e8

0800731c <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void* context )
{
 800731c:	b590      	push	{r4, r7, lr}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 8007324:	4b51      	ldr	r3, [pc, #324]	@ (800746c <SX1276OnTimeoutIrq+0x150>)
 8007326:	791b      	ldrb	r3, [r3, #4]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d002      	beq.n	8007332 <SX1276OnTimeoutIrq+0x16>
 800732c:	2b02      	cmp	r3, #2
 800732e:	d045      	beq.n	80073bc <SX1276OnTimeoutIrq+0xa0>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 8007330:	e098      	b.n	8007464 <SX1276OnTimeoutIrq+0x148>
        if( SX1276.Settings.Modem == MODEM_FSK )
 8007332:	4b4e      	ldr	r3, [pc, #312]	@ (800746c <SX1276OnTimeoutIrq+0x150>)
 8007334:	795b      	ldrb	r3, [r3, #5]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d132      	bne.n	80073a0 <SX1276OnTimeoutIrq+0x84>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800733a:	4b4c      	ldr	r3, [pc, #304]	@ (800746c <SX1276OnTimeoutIrq+0x150>)
 800733c:	2230      	movs	r2, #48	@ 0x30
 800733e:	2100      	movs	r1, #0
 8007340:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8007342:	4b4a      	ldr	r3, [pc, #296]	@ (800746c <SX1276OnTimeoutIrq+0x150>)
 8007344:	2231      	movs	r2, #49	@ 0x31
 8007346:	2100      	movs	r1, #0
 8007348:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800734a:	4b48      	ldr	r3, [pc, #288]	@ (800746c <SX1276OnTimeoutIrq+0x150>)
 800734c:	2200      	movs	r2, #0
 800734e:	879a      	strh	r2, [r3, #60]	@ 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8007350:	4b46      	ldr	r3, [pc, #280]	@ (800746c <SX1276OnTimeoutIrq+0x150>)
 8007352:	2200      	movs	r2, #0
 8007354:	875a      	strh	r2, [r3, #58]	@ 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8007356:	210b      	movs	r1, #11
 8007358:	203e      	movs	r0, #62	@ 0x3e
 800735a:	f7ff feab 	bl	80070b4 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800735e:	2110      	movs	r1, #16
 8007360:	203f      	movs	r0, #63	@ 0x3f
 8007362:	f7ff fea7 	bl	80070b4 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8007366:	4b41      	ldr	r3, [pc, #260]	@ (800746c <SX1276OnTimeoutIrq+0x150>)
 8007368:	2226      	movs	r2, #38	@ 0x26
 800736a:	5c9b      	ldrb	r3, [r3, r2]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d010      	beq.n	8007392 <SX1276OnTimeoutIrq+0x76>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8007370:	200d      	movs	r0, #13
 8007372:	f7ff feb3 	bl	80070dc <SX1276Read>
 8007376:	0003      	movs	r3, r0
 8007378:	001a      	movs	r2, r3
 800737a:	2340      	movs	r3, #64	@ 0x40
 800737c:	4313      	orrs	r3, r2
 800737e:	b2db      	uxtb	r3, r3
 8007380:	0019      	movs	r1, r3
 8007382:	200d      	movs	r0, #13
 8007384:	f7ff fe96 	bl	80070b4 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 8007388:	4b39      	ldr	r3, [pc, #228]	@ (8007470 <SX1276OnTimeoutIrq+0x154>)
 800738a:	0018      	movs	r0, r3
 800738c:	f00d fe28 	bl	8014fe0 <TimerStart>
 8007390:	e006      	b.n	80073a0 <SX1276OnTimeoutIrq+0x84>
                SX1276.Settings.State = RF_IDLE;
 8007392:	4b36      	ldr	r3, [pc, #216]	@ (800746c <SX1276OnTimeoutIrq+0x150>)
 8007394:	2200      	movs	r2, #0
 8007396:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 8007398:	4b35      	ldr	r3, [pc, #212]	@ (8007470 <SX1276OnTimeoutIrq+0x154>)
 800739a:	0018      	movs	r0, r3
 800739c:	f00d fefe 	bl	801519c <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80073a0:	4b34      	ldr	r3, [pc, #208]	@ (8007474 <SX1276OnTimeoutIrq+0x158>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d05a      	beq.n	800745e <SX1276OnTimeoutIrq+0x142>
 80073a8:	4b32      	ldr	r3, [pc, #200]	@ (8007474 <SX1276OnTimeoutIrq+0x158>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d055      	beq.n	800745e <SX1276OnTimeoutIrq+0x142>
            RadioEvents->RxTimeout( );
 80073b2:	4b30      	ldr	r3, [pc, #192]	@ (8007474 <SX1276OnTimeoutIrq+0x158>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	4798      	blx	r3
        break;
 80073ba:	e050      	b.n	800745e <SX1276OnTimeoutIrq+0x142>
        SX1276Reset( );
 80073bc:	f7ff fd9c 	bl	8006ef8 <SX1276Reset>
        RxChainCalibration( );
 80073c0:	f7fe fae2 	bl	8005988 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 80073c4:	2000      	movs	r0, #0
 80073c6:	f7ff fdcb 	bl	8006f60 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80073ca:	230f      	movs	r3, #15
 80073cc:	18fb      	adds	r3, r7, r3
 80073ce:	2200      	movs	r2, #0
 80073d0:	701a      	strb	r2, [r3, #0]
 80073d2:	e025      	b.n	8007420 <SX1276OnTimeoutIrq+0x104>
            SX1276SetModem( RadioRegsInit[i].Modem );
 80073d4:	240f      	movs	r4, #15
 80073d6:	193b      	adds	r3, r7, r4
 80073d8:	781a      	ldrb	r2, [r3, #0]
 80073da:	4927      	ldr	r1, [pc, #156]	@ (8007478 <SX1276OnTimeoutIrq+0x15c>)
 80073dc:	0013      	movs	r3, r2
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	189b      	adds	r3, r3, r2
 80073e2:	5c5b      	ldrb	r3, [r3, r1]
 80073e4:	0018      	movs	r0, r3
 80073e6:	f7ff fe0b 	bl	8007000 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80073ea:	193b      	adds	r3, r7, r4
 80073ec:	781a      	ldrb	r2, [r3, #0]
 80073ee:	4922      	ldr	r1, [pc, #136]	@ (8007478 <SX1276OnTimeoutIrq+0x15c>)
 80073f0:	0013      	movs	r3, r2
 80073f2:	005b      	lsls	r3, r3, #1
 80073f4:	189b      	adds	r3, r3, r2
 80073f6:	18cb      	adds	r3, r1, r3
 80073f8:	3301      	adds	r3, #1
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	0018      	movs	r0, r3
 80073fe:	193b      	adds	r3, r7, r4
 8007400:	781a      	ldrb	r2, [r3, #0]
 8007402:	491d      	ldr	r1, [pc, #116]	@ (8007478 <SX1276OnTimeoutIrq+0x15c>)
 8007404:	0013      	movs	r3, r2
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	189b      	adds	r3, r3, r2
 800740a:	18cb      	adds	r3, r1, r3
 800740c:	3302      	adds	r3, #2
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	0019      	movs	r1, r3
 8007412:	f7ff fe4f 	bl	80070b4 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8007416:	193b      	adds	r3, r7, r4
 8007418:	781a      	ldrb	r2, [r3, #0]
 800741a:	193b      	adds	r3, r7, r4
 800741c:	3201      	adds	r2, #1
 800741e:	701a      	strb	r2, [r3, #0]
 8007420:	230f      	movs	r3, #15
 8007422:	18fb      	adds	r3, r7, r3
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	2b0f      	cmp	r3, #15
 8007428:	d9d4      	bls.n	80073d4 <SX1276OnTimeoutIrq+0xb8>
        SX1276SetModem( MODEM_FSK );
 800742a:	2000      	movs	r0, #0
 800742c:	f7ff fde8 	bl	8007000 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8007430:	4b0e      	ldr	r3, [pc, #56]	@ (800746c <SX1276OnTimeoutIrq+0x150>)
 8007432:	225c      	movs	r2, #92	@ 0x5c
 8007434:	5c9b      	ldrb	r3, [r3, r2]
 8007436:	0018      	movs	r0, r3
 8007438:	f7ff ff40 	bl	80072bc <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 800743c:	4b0b      	ldr	r3, [pc, #44]	@ (800746c <SX1276OnTimeoutIrq+0x150>)
 800743e:	2200      	movs	r2, #0
 8007440:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8007442:	4b0c      	ldr	r3, [pc, #48]	@ (8007474 <SX1276OnTimeoutIrq+0x158>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00b      	beq.n	8007462 <SX1276OnTimeoutIrq+0x146>
 800744a:	4b0a      	ldr	r3, [pc, #40]	@ (8007474 <SX1276OnTimeoutIrq+0x158>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d006      	beq.n	8007462 <SX1276OnTimeoutIrq+0x146>
            RadioEvents->TxTimeout( );
 8007454:	4b07      	ldr	r3, [pc, #28]	@ (8007474 <SX1276OnTimeoutIrq+0x158>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	4798      	blx	r3
        break;
 800745c:	e001      	b.n	8007462 <SX1276OnTimeoutIrq+0x146>
        break;
 800745e:	46c0      	nop			@ (mov r8, r8)
 8007460:	e000      	b.n	8007464 <SX1276OnTimeoutIrq+0x148>
        break;
 8007462:	46c0      	nop			@ (mov r8, r8)
    }
}
 8007464:	46c0      	nop			@ (mov r8, r8)
 8007466:	46bd      	mov	sp, r7
 8007468:	b005      	add	sp, #20
 800746a:	bd90      	pop	{r4, r7, pc}
 800746c:	200004ec 	.word	0x200004ec
 8007470:	20000584 	.word	0x20000584
 8007474:	200003e4 	.word	0x200003e4
 8007478:	0801ae40 	.word	0x0801ae40

0800747c <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void* context )
{
 800747c:	b5b0      	push	{r4, r5, r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
    volatile uint8_t irqFlags = 0;
 8007484:	230d      	movs	r3, #13
 8007486:	18fb      	adds	r3, r7, r3
 8007488:	2200      	movs	r2, #0
 800748a:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 800748c:	4bca      	ldr	r3, [pc, #808]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 800748e:	791b      	ldrb	r3, [r3, #4]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d003      	beq.n	800749c <SX1276OnDio0Irq+0x20>
 8007494:	2b02      	cmp	r3, #2
 8007496:	d100      	bne.n	800749a <SX1276OnDio0Irq+0x1e>
 8007498:	e1f2      	b.n	8007880 <SX1276OnDio0Irq+0x404>
                }
                break;
            }
            break;
        default:
            break;
 800749a:	e20f      	b.n	80078bc <SX1276OnDio0Irq+0x440>
            switch( SX1276.Settings.Modem )
 800749c:	4bc6      	ldr	r3, [pc, #792]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 800749e:	795b      	ldrb	r3, [r3, #5]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d003      	beq.n	80074ac <SX1276OnDio0Irq+0x30>
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d100      	bne.n	80074aa <SX1276OnDio0Irq+0x2e>
 80074a8:	e0eb      	b.n	8007682 <SX1276OnDio0Irq+0x206>
                break;
 80074aa:	e1e8      	b.n	800787e <SX1276OnDio0Irq+0x402>
                if( SX1276.Settings.Fsk.CrcOn == true )
 80074ac:	4bc2      	ldr	r3, [pc, #776]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 80074ae:	2224      	movs	r2, #36	@ 0x24
 80074b0:	5c9b      	ldrb	r3, [r3, r2]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d057      	beq.n	8007566 <SX1276OnDio0Irq+0xea>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 80074b6:	203f      	movs	r0, #63	@ 0x3f
 80074b8:	f7ff fe10 	bl	80070dc <SX1276Read>
 80074bc:	0003      	movs	r3, r0
 80074be:	001a      	movs	r2, r3
 80074c0:	210d      	movs	r1, #13
 80074c2:	187b      	adds	r3, r7, r1
 80074c4:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 80074c6:	187b      	adds	r3, r7, r1
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	001a      	movs	r2, r3
 80074ce:	2302      	movs	r3, #2
 80074d0:	4013      	ands	r3, r2
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d047      	beq.n	8007566 <SX1276OnDio0Irq+0xea>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80074d6:	210b      	movs	r1, #11
 80074d8:	203e      	movs	r0, #62	@ 0x3e
 80074da:	f7ff fdeb 	bl	80070b4 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80074de:	2110      	movs	r1, #16
 80074e0:	203f      	movs	r0, #63	@ 0x3f
 80074e2:	f7ff fde7 	bl	80070b4 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 80074e6:	4bb5      	ldr	r3, [pc, #724]	@ (80077bc <SX1276OnDio0Irq+0x340>)
 80074e8:	0018      	movs	r0, r3
 80074ea:	f00d fe57 	bl	801519c <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 80074ee:	4bb2      	ldr	r3, [pc, #712]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 80074f0:	2226      	movs	r2, #38	@ 0x26
 80074f2:	5c9b      	ldrb	r3, [r3, r2]
 80074f4:	2201      	movs	r2, #1
 80074f6:	4053      	eors	r3, r2
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d007      	beq.n	800750e <SX1276OnDio0Irq+0x92>
                            TimerStop( &RxTimeoutSyncWord );
 80074fe:	4bb0      	ldr	r3, [pc, #704]	@ (80077c0 <SX1276OnDio0Irq+0x344>)
 8007500:	0018      	movs	r0, r3
 8007502:	f00d fe4b 	bl	801519c <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8007506:	4bac      	ldr	r3, [pc, #688]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 8007508:	2200      	movs	r2, #0
 800750a:	711a      	strb	r2, [r3, #4]
 800750c:	e00f      	b.n	800752e <SX1276OnDio0Irq+0xb2>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800750e:	200d      	movs	r0, #13
 8007510:	f7ff fde4 	bl	80070dc <SX1276Read>
 8007514:	0003      	movs	r3, r0
 8007516:	001a      	movs	r2, r3
 8007518:	2340      	movs	r3, #64	@ 0x40
 800751a:	4313      	orrs	r3, r2
 800751c:	b2db      	uxtb	r3, r3
 800751e:	0019      	movs	r1, r3
 8007520:	200d      	movs	r0, #13
 8007522:	f7ff fdc7 	bl	80070b4 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 8007526:	4ba6      	ldr	r3, [pc, #664]	@ (80077c0 <SX1276OnDio0Irq+0x344>)
 8007528:	0018      	movs	r0, r3
 800752a:	f00d fd59 	bl	8014fe0 <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800752e:	4ba5      	ldr	r3, [pc, #660]	@ (80077c4 <SX1276OnDio0Irq+0x348>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d008      	beq.n	8007548 <SX1276OnDio0Irq+0xcc>
 8007536:	4ba3      	ldr	r3, [pc, #652]	@ (80077c4 <SX1276OnDio0Irq+0x348>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d003      	beq.n	8007548 <SX1276OnDio0Irq+0xcc>
                            RadioEvents->RxError( );
 8007540:	4ba0      	ldr	r3, [pc, #640]	@ (80077c4 <SX1276OnDio0Irq+0x348>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8007548:	4b9b      	ldr	r3, [pc, #620]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 800754a:	2230      	movs	r2, #48	@ 0x30
 800754c:	2100      	movs	r1, #0
 800754e:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8007550:	4b99      	ldr	r3, [pc, #612]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 8007552:	2231      	movs	r2, #49	@ 0x31
 8007554:	2100      	movs	r1, #0
 8007556:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8007558:	4b97      	ldr	r3, [pc, #604]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 800755a:	2200      	movs	r2, #0
 800755c:	879a      	strh	r2, [r3, #60]	@ 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 800755e:	4b96      	ldr	r3, [pc, #600]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 8007560:	2200      	movs	r2, #0
 8007562:	875a      	strh	r2, [r3, #58]	@ 0x3a
                        break;
 8007564:	e18b      	b.n	800787e <SX1276OnDio0Irq+0x402>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8007566:	4b94      	ldr	r3, [pc, #592]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 8007568:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800756a:	2b00      	cmp	r3, #0
 800756c:	d12d      	bne.n	80075ca <SX1276OnDio0Irq+0x14e>
 800756e:	4b92      	ldr	r3, [pc, #584]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 8007570:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8007572:	2b00      	cmp	r3, #0
 8007574:	d129      	bne.n	80075ca <SX1276OnDio0Irq+0x14e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8007576:	4b90      	ldr	r3, [pc, #576]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 8007578:	2222      	movs	r2, #34	@ 0x22
 800757a:	5c9b      	ldrb	r3, [r3, r2]
 800757c:	2201      	movs	r2, #1
 800757e:	4053      	eors	r3, r2
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d005      	beq.n	8007592 <SX1276OnDio0Irq+0x116>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8007586:	4b90      	ldr	r3, [pc, #576]	@ (80077c8 <SX1276OnDio0Irq+0x34c>)
 8007588:	2101      	movs	r1, #1
 800758a:	0018      	movs	r0, r3
 800758c:	f7ff fe51 	bl	8007232 <SX1276ReadFifo>
 8007590:	e006      	b.n	80075a0 <SX1276OnDio0Irq+0x124>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8007592:	2032      	movs	r0, #50	@ 0x32
 8007594:	f7ff fda2 	bl	80070dc <SX1276Read>
 8007598:	0003      	movs	r3, r0
 800759a:	001a      	movs	r2, r3
 800759c:	4b86      	ldr	r3, [pc, #536]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 800759e:	875a      	strh	r2, [r3, #58]	@ 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80075a0:	4b85      	ldr	r3, [pc, #532]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 80075a2:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80075a4:	001a      	movs	r2, r3
 80075a6:	4b89      	ldr	r3, [pc, #548]	@ (80077cc <SX1276OnDio0Irq+0x350>)
 80075a8:	18d0      	adds	r0, r2, r3
 80075aa:	4b83      	ldr	r3, [pc, #524]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 80075ac:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	4b81      	ldr	r3, [pc, #516]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 80075b2:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	0019      	movs	r1, r3
 80075bc:	f7ff fe39 	bl	8007232 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80075c0:	4b7d      	ldr	r3, [pc, #500]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 80075c2:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 80075c4:	4b7c      	ldr	r3, [pc, #496]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 80075c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80075c8:	e013      	b.n	80075f2 <SX1276OnDio0Irq+0x176>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80075ca:	4b7b      	ldr	r3, [pc, #492]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 80075cc:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80075ce:	001a      	movs	r2, r3
 80075d0:	4b7e      	ldr	r3, [pc, #504]	@ (80077cc <SX1276OnDio0Irq+0x350>)
 80075d2:	18d0      	adds	r0, r2, r3
 80075d4:	4b78      	ldr	r3, [pc, #480]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 80075d6:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	4b77      	ldr	r3, [pc, #476]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 80075dc:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	0019      	movs	r1, r3
 80075e6:	f7ff fe24 	bl	8007232 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80075ea:	4b73      	ldr	r3, [pc, #460]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 80075ec:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 80075ee:	4b72      	ldr	r3, [pc, #456]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 80075f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
                TimerStop( &RxTimeoutTimer );
 80075f2:	4b72      	ldr	r3, [pc, #456]	@ (80077bc <SX1276OnDio0Irq+0x340>)
 80075f4:	0018      	movs	r0, r3
 80075f6:	f00d fdd1 	bl	801519c <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 80075fa:	4b6f      	ldr	r3, [pc, #444]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 80075fc:	2226      	movs	r2, #38	@ 0x26
 80075fe:	5c9b      	ldrb	r3, [r3, r2]
 8007600:	2201      	movs	r2, #1
 8007602:	4053      	eors	r3, r2
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d007      	beq.n	800761a <SX1276OnDio0Irq+0x19e>
                    SX1276.Settings.State = RF_IDLE;
 800760a:	4b6b      	ldr	r3, [pc, #428]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 800760c:	2200      	movs	r2, #0
 800760e:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8007610:	4b6b      	ldr	r3, [pc, #428]	@ (80077c0 <SX1276OnDio0Irq+0x344>)
 8007612:	0018      	movs	r0, r3
 8007614:	f00d fdc2 	bl	801519c <TimerStop>
 8007618:	e00f      	b.n	800763a <SX1276OnDio0Irq+0x1be>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800761a:	200d      	movs	r0, #13
 800761c:	f7ff fd5e 	bl	80070dc <SX1276Read>
 8007620:	0003      	movs	r3, r0
 8007622:	001a      	movs	r2, r3
 8007624:	2340      	movs	r3, #64	@ 0x40
 8007626:	4313      	orrs	r3, r2
 8007628:	b2db      	uxtb	r3, r3
 800762a:	0019      	movs	r1, r3
 800762c:	200d      	movs	r0, #13
 800762e:	f7ff fd41 	bl	80070b4 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 8007632:	4b63      	ldr	r3, [pc, #396]	@ (80077c0 <SX1276OnDio0Irq+0x344>)
 8007634:	0018      	movs	r0, r3
 8007636:	f00d fcd3 	bl	8014fe0 <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800763a:	4b62      	ldr	r3, [pc, #392]	@ (80077c4 <SX1276OnDio0Irq+0x348>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d010      	beq.n	8007664 <SX1276OnDio0Irq+0x1e8>
 8007642:	4b60      	ldr	r3, [pc, #384]	@ (80077c4 <SX1276OnDio0Irq+0x348>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00b      	beq.n	8007664 <SX1276OnDio0Irq+0x1e8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 800764c:	4b5d      	ldr	r3, [pc, #372]	@ (80077c4 <SX1276OnDio0Irq+0x348>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689c      	ldr	r4, [r3, #8]
 8007652:	4b59      	ldr	r3, [pc, #356]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 8007654:	8f59      	ldrh	r1, [r3, #58]	@ 0x3a
 8007656:	4b58      	ldr	r3, [pc, #352]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 8007658:	2232      	movs	r2, #50	@ 0x32
 800765a:	569b      	ldrsb	r3, [r3, r2]
 800765c:	001a      	movs	r2, r3
 800765e:	485b      	ldr	r0, [pc, #364]	@ (80077cc <SX1276OnDio0Irq+0x350>)
 8007660:	2300      	movs	r3, #0
 8007662:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8007664:	4b54      	ldr	r3, [pc, #336]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 8007666:	2230      	movs	r2, #48	@ 0x30
 8007668:	2100      	movs	r1, #0
 800766a:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800766c:	4b52      	ldr	r3, [pc, #328]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 800766e:	2231      	movs	r2, #49	@ 0x31
 8007670:	2100      	movs	r1, #0
 8007672:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8007674:	4b50      	ldr	r3, [pc, #320]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 8007676:	2200      	movs	r2, #0
 8007678:	879a      	strh	r2, [r3, #60]	@ 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 800767a:	4b4f      	ldr	r3, [pc, #316]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 800767c:	2200      	movs	r2, #0
 800767e:	875a      	strh	r2, [r3, #58]	@ 0x3a
                break;
 8007680:	e0fd      	b.n	800787e <SX1276OnDio0Irq+0x402>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8007682:	2140      	movs	r1, #64	@ 0x40
 8007684:	2012      	movs	r0, #18
 8007686:	f7ff fd15 	bl	80070b4 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800768a:	2012      	movs	r0, #18
 800768c:	f7ff fd26 	bl	80070dc <SX1276Read>
 8007690:	0003      	movs	r3, r0
 8007692:	001a      	movs	r2, r3
 8007694:	210d      	movs	r1, #13
 8007696:	187b      	adds	r3, r7, r1
 8007698:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800769a:	187b      	adds	r3, r7, r1
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	001a      	movs	r2, r3
 80076a2:	2320      	movs	r3, #32
 80076a4:	4013      	ands	r3, r2
 80076a6:	2b20      	cmp	r3, #32
 80076a8:	d122      	bne.n	80076f0 <SX1276OnDio0Irq+0x274>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 80076aa:	2120      	movs	r1, #32
 80076ac:	2012      	movs	r0, #18
 80076ae:	f7ff fd01 	bl	80070b4 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 80076b2:	4b41      	ldr	r3, [pc, #260]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 80076b4:	2256      	movs	r2, #86	@ 0x56
 80076b6:	5c9b      	ldrb	r3, [r3, r2]
 80076b8:	2201      	movs	r2, #1
 80076ba:	4053      	eors	r3, r2
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d002      	beq.n	80076c8 <SX1276OnDio0Irq+0x24c>
                            SX1276.Settings.State = RF_IDLE;
 80076c2:	4b3d      	ldr	r3, [pc, #244]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 80076c8:	4b3c      	ldr	r3, [pc, #240]	@ (80077bc <SX1276OnDio0Irq+0x340>)
 80076ca:	0018      	movs	r0, r3
 80076cc:	f00d fd66 	bl	801519c <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80076d0:	4b3c      	ldr	r3, [pc, #240]	@ (80077c4 <SX1276OnDio0Irq+0x348>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d100      	bne.n	80076da <SX1276OnDio0Irq+0x25e>
 80076d8:	e0ce      	b.n	8007878 <SX1276OnDio0Irq+0x3fc>
 80076da:	4b3a      	ldr	r3, [pc, #232]	@ (80077c4 <SX1276OnDio0Irq+0x348>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d100      	bne.n	80076e6 <SX1276OnDio0Irq+0x26a>
 80076e4:	e0c8      	b.n	8007878 <SX1276OnDio0Irq+0x3fc>
                            RadioEvents->RxError( );
 80076e6:	4b37      	ldr	r3, [pc, #220]	@ (80077c4 <SX1276OnDio0Irq+0x348>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	4798      	blx	r3
                        break;
 80076ee:	e0c3      	b.n	8007878 <SX1276OnDio0Irq+0x3fc>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 80076f0:	2019      	movs	r0, #25
 80076f2:	f7ff fcf3 	bl	80070dc <SX1276Read>
 80076f6:	0003      	movs	r3, r0
 80076f8:	b25b      	sxtb	r3, r3
 80076fa:	3302      	adds	r3, #2
 80076fc:	109b      	asrs	r3, r3, #2
 80076fe:	b259      	sxtb	r1, r3
 8007700:	4b2d      	ldr	r3, [pc, #180]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 8007702:	2260      	movs	r2, #96	@ 0x60
 8007704:	5499      	strb	r1, [r3, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8007706:	201a      	movs	r0, #26
 8007708:	f7ff fce8 	bl	80070dc <SX1276Read>
 800770c:	0003      	movs	r3, r0
 800770e:	001a      	movs	r2, r3
 8007710:	210e      	movs	r1, #14
 8007712:	187b      	adds	r3, r7, r1
 8007714:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8007716:	4b28      	ldr	r3, [pc, #160]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 8007718:	2260      	movs	r2, #96	@ 0x60
 800771a:	569b      	ldrsb	r3, [r3, r2]
 800771c:	2b00      	cmp	r3, #0
 800771e:	da33      	bge.n	8007788 <SX1276OnDio0Irq+0x30c>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8007720:	4b25      	ldr	r3, [pc, #148]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	4a2a      	ldr	r2, [pc, #168]	@ (80077d0 <SX1276OnDio0Irq+0x354>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d916      	bls.n	8007758 <SX1276OnDio0Irq+0x2dc>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800772a:	187b      	adds	r3, r7, r1
 800772c:	2200      	movs	r2, #0
 800772e:	5e9b      	ldrsh	r3, [r3, r2]
 8007730:	111b      	asrs	r3, r3, #4
 8007732:	b21b      	sxth	r3, r3
 8007734:	b29a      	uxth	r2, r3
 8007736:	187b      	adds	r3, r7, r1
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	18d3      	adds	r3, r2, r3
 800773c:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 800773e:	4b1e      	ldr	r3, [pc, #120]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 8007740:	2160      	movs	r1, #96	@ 0x60
 8007742:	565b      	ldrsb	r3, [r3, r1]
 8007744:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8007746:	18d3      	adds	r3, r2, r3
 8007748:	b29b      	uxth	r3, r3
 800774a:	3b9d      	subs	r3, #157	@ 0x9d
 800774c:	b29b      	uxth	r3, r3
 800774e:	b219      	sxth	r1, r3
 8007750:	4b19      	ldr	r3, [pc, #100]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 8007752:	2262      	movs	r2, #98	@ 0x62
 8007754:	5299      	strh	r1, [r3, r2]
 8007756:	e04e      	b.n	80077f6 <SX1276OnDio0Irq+0x37a>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8007758:	210e      	movs	r1, #14
 800775a:	187b      	adds	r3, r7, r1
 800775c:	2200      	movs	r2, #0
 800775e:	5e9b      	ldrsh	r3, [r3, r2]
 8007760:	111b      	asrs	r3, r3, #4
 8007762:	b21b      	sxth	r3, r3
 8007764:	b29a      	uxth	r2, r3
 8007766:	187b      	adds	r3, r7, r1
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	18d3      	adds	r3, r2, r3
 800776c:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 800776e:	4b12      	ldr	r3, [pc, #72]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 8007770:	2160      	movs	r1, #96	@ 0x60
 8007772:	565b      	ldrsb	r3, [r3, r1]
 8007774:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8007776:	18d3      	adds	r3, r2, r3
 8007778:	b29b      	uxth	r3, r3
 800777a:	3ba4      	subs	r3, #164	@ 0xa4
 800777c:	b29b      	uxth	r3, r3
 800777e:	b219      	sxth	r1, r3
 8007780:	4b0d      	ldr	r3, [pc, #52]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 8007782:	2262      	movs	r2, #98	@ 0x62
 8007784:	5299      	strh	r1, [r3, r2]
 8007786:	e036      	b.n	80077f6 <SX1276OnDio0Irq+0x37a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8007788:	4b0b      	ldr	r3, [pc, #44]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	4a10      	ldr	r2, [pc, #64]	@ (80077d0 <SX1276OnDio0Irq+0x354>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d920      	bls.n	80077d4 <SX1276OnDio0Irq+0x358>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8007792:	210e      	movs	r1, #14
 8007794:	187b      	adds	r3, r7, r1
 8007796:	2200      	movs	r2, #0
 8007798:	5e9b      	ldrsh	r3, [r3, r2]
 800779a:	111b      	asrs	r3, r3, #4
 800779c:	b21b      	sxth	r3, r3
 800779e:	b29a      	uxth	r2, r3
 80077a0:	187b      	adds	r3, r7, r1
 80077a2:	881b      	ldrh	r3, [r3, #0]
 80077a4:	18d3      	adds	r3, r2, r3
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	3b9d      	subs	r3, #157	@ 0x9d
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	b219      	sxth	r1, r3
 80077ae:	4b02      	ldr	r3, [pc, #8]	@ (80077b8 <SX1276OnDio0Irq+0x33c>)
 80077b0:	2262      	movs	r2, #98	@ 0x62
 80077b2:	5299      	strh	r1, [r3, r2]
 80077b4:	e01f      	b.n	80077f6 <SX1276OnDio0Irq+0x37a>
 80077b6:	46c0      	nop			@ (mov r8, r8)
 80077b8:	200004ec 	.word	0x200004ec
 80077bc:	2000056c 	.word	0x2000056c
 80077c0:	20000584 	.word	0x20000584
 80077c4:	200003e4 	.word	0x200003e4
 80077c8:	20000526 	.word	0x20000526
 80077cc:	200003e8 	.word	0x200003e8
 80077d0:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80077d4:	210e      	movs	r1, #14
 80077d6:	187b      	adds	r3, r7, r1
 80077d8:	2200      	movs	r2, #0
 80077da:	5e9b      	ldrsh	r3, [r3, r2]
 80077dc:	111b      	asrs	r3, r3, #4
 80077de:	b21b      	sxth	r3, r3
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	187b      	adds	r3, r7, r1
 80077e4:	881b      	ldrh	r3, [r3, #0]
 80077e6:	18d3      	adds	r3, r2, r3
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	3ba4      	subs	r3, #164	@ 0xa4
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	b219      	sxth	r1, r3
 80077f0:	4b34      	ldr	r3, [pc, #208]	@ (80078c4 <SX1276OnDio0Irq+0x448>)
 80077f2:	2262      	movs	r2, #98	@ 0x62
 80077f4:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 80077f6:	2013      	movs	r0, #19
 80077f8:	f7ff fc70 	bl	80070dc <SX1276Read>
 80077fc:	0003      	movs	r3, r0
 80077fe:	0019      	movs	r1, r3
 8007800:	4b30      	ldr	r3, [pc, #192]	@ (80078c4 <SX1276OnDio0Irq+0x448>)
 8007802:	2264      	movs	r2, #100	@ 0x64
 8007804:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8007806:	2010      	movs	r0, #16
 8007808:	f7ff fc68 	bl	80070dc <SX1276Read>
 800780c:	0003      	movs	r3, r0
 800780e:	0019      	movs	r1, r3
 8007810:	200d      	movs	r0, #13
 8007812:	f7ff fc4f 	bl	80070b4 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 8007816:	4b2b      	ldr	r3, [pc, #172]	@ (80078c4 <SX1276OnDio0Irq+0x448>)
 8007818:	2264      	movs	r2, #100	@ 0x64
 800781a:	5c9a      	ldrb	r2, [r3, r2]
 800781c:	4b2a      	ldr	r3, [pc, #168]	@ (80078c8 <SX1276OnDio0Irq+0x44c>)
 800781e:	0011      	movs	r1, r2
 8007820:	0018      	movs	r0, r3
 8007822:	f7ff fd06 	bl	8007232 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8007826:	4b27      	ldr	r3, [pc, #156]	@ (80078c4 <SX1276OnDio0Irq+0x448>)
 8007828:	2256      	movs	r2, #86	@ 0x56
 800782a:	5c9b      	ldrb	r3, [r3, r2]
 800782c:	2201      	movs	r2, #1
 800782e:	4053      	eors	r3, r2
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d002      	beq.n	800783c <SX1276OnDio0Irq+0x3c0>
                        SX1276.Settings.State = RF_IDLE;
 8007836:	4b23      	ldr	r3, [pc, #140]	@ (80078c4 <SX1276OnDio0Irq+0x448>)
 8007838:	2200      	movs	r2, #0
 800783a:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 800783c:	4b23      	ldr	r3, [pc, #140]	@ (80078cc <SX1276OnDio0Irq+0x450>)
 800783e:	0018      	movs	r0, r3
 8007840:	f00d fcac 	bl	801519c <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8007844:	4b22      	ldr	r3, [pc, #136]	@ (80078d0 <SX1276OnDio0Irq+0x454>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d017      	beq.n	800787c <SX1276OnDio0Irq+0x400>
 800784c:	4b20      	ldr	r3, [pc, #128]	@ (80078d0 <SX1276OnDio0Irq+0x454>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d012      	beq.n	800787c <SX1276OnDio0Irq+0x400>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8007856:	4b1e      	ldr	r3, [pc, #120]	@ (80078d0 <SX1276OnDio0Irq+0x454>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	689c      	ldr	r4, [r3, #8]
 800785c:	4b19      	ldr	r3, [pc, #100]	@ (80078c4 <SX1276OnDio0Irq+0x448>)
 800785e:	2264      	movs	r2, #100	@ 0x64
 8007860:	5c9b      	ldrb	r3, [r3, r2]
 8007862:	001d      	movs	r5, r3
 8007864:	4b17      	ldr	r3, [pc, #92]	@ (80078c4 <SX1276OnDio0Irq+0x448>)
 8007866:	2262      	movs	r2, #98	@ 0x62
 8007868:	5e9a      	ldrsh	r2, [r3, r2]
 800786a:	4b16      	ldr	r3, [pc, #88]	@ (80078c4 <SX1276OnDio0Irq+0x448>)
 800786c:	2160      	movs	r1, #96	@ 0x60
 800786e:	565b      	ldrsb	r3, [r3, r1]
 8007870:	4815      	ldr	r0, [pc, #84]	@ (80078c8 <SX1276OnDio0Irq+0x44c>)
 8007872:	0029      	movs	r1, r5
 8007874:	47a0      	blx	r4
                break;
 8007876:	e001      	b.n	800787c <SX1276OnDio0Irq+0x400>
                        break;
 8007878:	46c0      	nop			@ (mov r8, r8)
 800787a:	e01f      	b.n	80078bc <SX1276OnDio0Irq+0x440>
                break;
 800787c:	46c0      	nop			@ (mov r8, r8)
            break;
 800787e:	e01d      	b.n	80078bc <SX1276OnDio0Irq+0x440>
            TimerStop( &TxTimeoutTimer );
 8007880:	4b14      	ldr	r3, [pc, #80]	@ (80078d4 <SX1276OnDio0Irq+0x458>)
 8007882:	0018      	movs	r0, r3
 8007884:	f00d fc8a 	bl	801519c <TimerStop>
            switch( SX1276.Settings.Modem )
 8007888:	4b0e      	ldr	r3, [pc, #56]	@ (80078c4 <SX1276OnDio0Irq+0x448>)
 800788a:	795b      	ldrb	r3, [r3, #5]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d103      	bne.n	8007898 <SX1276OnDio0Irq+0x41c>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8007890:	2108      	movs	r1, #8
 8007892:	2012      	movs	r0, #18
 8007894:	f7ff fc0e 	bl	80070b4 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8007898:	4b0a      	ldr	r3, [pc, #40]	@ (80078c4 <SX1276OnDio0Irq+0x448>)
 800789a:	2200      	movs	r2, #0
 800789c:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800789e:	4b0c      	ldr	r3, [pc, #48]	@ (80078d0 <SX1276OnDio0Irq+0x454>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d008      	beq.n	80078b8 <SX1276OnDio0Irq+0x43c>
 80078a6:	4b0a      	ldr	r3, [pc, #40]	@ (80078d0 <SX1276OnDio0Irq+0x454>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d003      	beq.n	80078b8 <SX1276OnDio0Irq+0x43c>
                    RadioEvents->TxDone( );
 80078b0:	4b07      	ldr	r3, [pc, #28]	@ (80078d0 <SX1276OnDio0Irq+0x454>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4798      	blx	r3
                break;
 80078b8:	46c0      	nop			@ (mov r8, r8)
            break;
 80078ba:	46c0      	nop			@ (mov r8, r8)
    }
}
 80078bc:	46c0      	nop			@ (mov r8, r8)
 80078be:	46bd      	mov	sp, r7
 80078c0:	b004      	add	sp, #16
 80078c2:	bdb0      	pop	{r4, r5, r7, pc}
 80078c4:	200004ec 	.word	0x200004ec
 80078c8:	200003e8 	.word	0x200003e8
 80078cc:	2000056c 	.word	0x2000056c
 80078d0:	200003e4 	.word	0x200003e4
 80078d4:	20000554 	.word	0x20000554

080078d8 <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void* context )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 80078e0:	4b61      	ldr	r3, [pc, #388]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 80078e2:	791b      	ldrb	r3, [r3, #4]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d003      	beq.n	80078f0 <SX1276OnDio1Irq+0x18>
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d100      	bne.n	80078ee <SX1276OnDio1Irq+0x16>
 80078ec:	e07c      	b.n	80079e8 <SX1276OnDio1Irq+0x110>
            default:
                break;
            }
            break;
        default:
            break;
 80078ee:	e0b7      	b.n	8007a60 <SX1276OnDio1Irq+0x188>
            switch( SX1276.Settings.Modem )
 80078f0:	4b5d      	ldr	r3, [pc, #372]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 80078f2:	795b      	ldrb	r3, [r3, #5]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d002      	beq.n	80078fe <SX1276OnDio1Irq+0x26>
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d05b      	beq.n	80079b4 <SX1276OnDio1Irq+0xdc>
                break;
 80078fc:	e073      	b.n	80079e6 <SX1276OnDio1Irq+0x10e>
                TimerStop( &RxTimeoutSyncWord );
 80078fe:	4b5b      	ldr	r3, [pc, #364]	@ (8007a6c <SX1276OnDio1Irq+0x194>)
 8007900:	0018      	movs	r0, r3
 8007902:	f00d fc4b 	bl	801519c <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8007906:	4b58      	ldr	r3, [pc, #352]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 8007908:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800790a:	2b00      	cmp	r3, #0
 800790c:	d118      	bne.n	8007940 <SX1276OnDio1Irq+0x68>
 800790e:	4b56      	ldr	r3, [pc, #344]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 8007910:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8007912:	2b00      	cmp	r3, #0
 8007914:	d114      	bne.n	8007940 <SX1276OnDio1Irq+0x68>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8007916:	4b54      	ldr	r3, [pc, #336]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 8007918:	2222      	movs	r2, #34	@ 0x22
 800791a:	5c9b      	ldrb	r3, [r3, r2]
 800791c:	2201      	movs	r2, #1
 800791e:	4053      	eors	r3, r2
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d005      	beq.n	8007932 <SX1276OnDio1Irq+0x5a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8007926:	4b52      	ldr	r3, [pc, #328]	@ (8007a70 <SX1276OnDio1Irq+0x198>)
 8007928:	2101      	movs	r1, #1
 800792a:	0018      	movs	r0, r3
 800792c:	f7ff fc81 	bl	8007232 <SX1276ReadFifo>
 8007930:	e006      	b.n	8007940 <SX1276OnDio1Irq+0x68>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8007932:	2032      	movs	r0, #50	@ 0x32
 8007934:	f7ff fbd2 	bl	80070dc <SX1276Read>
 8007938:	0003      	movs	r3, r0
 800793a:	001a      	movs	r2, r3
 800793c:	4b4a      	ldr	r3, [pc, #296]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 800793e:	875a      	strh	r2, [r3, #58]	@ 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8007940:	4b49      	ldr	r3, [pc, #292]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 8007942:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8007944:	001a      	movs	r2, r3
 8007946:	4b48      	ldr	r3, [pc, #288]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 8007948:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	4a46      	ldr	r2, [pc, #280]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 800794e:	213e      	movs	r1, #62	@ 0x3e
 8007950:	5c52      	ldrb	r2, [r2, r1]
 8007952:	4293      	cmp	r3, r2
 8007954:	db19      	blt.n	800798a <SX1276OnDio1Irq+0xb2>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8007956:	4b44      	ldr	r3, [pc, #272]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 8007958:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800795a:	001a      	movs	r2, r3
 800795c:	4b45      	ldr	r3, [pc, #276]	@ (8007a74 <SX1276OnDio1Irq+0x19c>)
 800795e:	18d2      	adds	r2, r2, r3
 8007960:	4b41      	ldr	r3, [pc, #260]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 8007962:	213e      	movs	r1, #62	@ 0x3e
 8007964:	5c5b      	ldrb	r3, [r3, r1]
 8007966:	3b01      	subs	r3, #1
 8007968:	b2db      	uxtb	r3, r3
 800796a:	0019      	movs	r1, r3
 800796c:	0010      	movs	r0, r2
 800796e:	f7ff fc60 	bl	8007232 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8007972:	4b3d      	ldr	r3, [pc, #244]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 8007974:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8007976:	4a3c      	ldr	r2, [pc, #240]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 8007978:	213e      	movs	r1, #62	@ 0x3e
 800797a:	5c52      	ldrb	r2, [r2, r1]
 800797c:	189b      	adds	r3, r3, r2
 800797e:	b29b      	uxth	r3, r3
 8007980:	3b01      	subs	r3, #1
 8007982:	b29a      	uxth	r2, r3
 8007984:	4b38      	ldr	r3, [pc, #224]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 8007986:	879a      	strh	r2, [r3, #60]	@ 0x3c
                break;
 8007988:	e02d      	b.n	80079e6 <SX1276OnDio1Irq+0x10e>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800798a:	4b37      	ldr	r3, [pc, #220]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 800798c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800798e:	001a      	movs	r2, r3
 8007990:	4b38      	ldr	r3, [pc, #224]	@ (8007a74 <SX1276OnDio1Irq+0x19c>)
 8007992:	18d0      	adds	r0, r2, r3
 8007994:	4b34      	ldr	r3, [pc, #208]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 8007996:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8007998:	b2da      	uxtb	r2, r3
 800799a:	4b33      	ldr	r3, [pc, #204]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 800799c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	0019      	movs	r1, r3
 80079a6:	f7ff fc44 	bl	8007232 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80079aa:	4b2f      	ldr	r3, [pc, #188]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 80079ac:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 80079ae:	4b2e      	ldr	r3, [pc, #184]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 80079b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
                break;
 80079b2:	e018      	b.n	80079e6 <SX1276OnDio1Irq+0x10e>
                TimerStop( &RxTimeoutTimer );
 80079b4:	4b30      	ldr	r3, [pc, #192]	@ (8007a78 <SX1276OnDio1Irq+0x1a0>)
 80079b6:	0018      	movs	r0, r3
 80079b8:	f00d fbf0 	bl	801519c <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 80079bc:	2180      	movs	r1, #128	@ 0x80
 80079be:	2012      	movs	r0, #18
 80079c0:	f7ff fb78 	bl	80070b4 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80079c4:	4b28      	ldr	r3, [pc, #160]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 80079c6:	2200      	movs	r2, #0
 80079c8:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80079ca:	4b2c      	ldr	r3, [pc, #176]	@ (8007a7c <SX1276OnDio1Irq+0x1a4>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d008      	beq.n	80079e4 <SX1276OnDio1Irq+0x10c>
 80079d2:	4b2a      	ldr	r3, [pc, #168]	@ (8007a7c <SX1276OnDio1Irq+0x1a4>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d003      	beq.n	80079e4 <SX1276OnDio1Irq+0x10c>
                    RadioEvents->RxTimeout( );
 80079dc:	4b27      	ldr	r3, [pc, #156]	@ (8007a7c <SX1276OnDio1Irq+0x1a4>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	4798      	blx	r3
                break;
 80079e4:	46c0      	nop			@ (mov r8, r8)
            break;
 80079e6:	e03b      	b.n	8007a60 <SX1276OnDio1Irq+0x188>
            switch( SX1276.Settings.Modem )
 80079e8:	4b1f      	ldr	r3, [pc, #124]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 80079ea:	795b      	ldrb	r3, [r3, #5]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d135      	bne.n	8007a5c <SX1276OnDio1Irq+0x184>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80079f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 80079f2:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80079f4:	001a      	movs	r2, r3
 80079f6:	4b1c      	ldr	r3, [pc, #112]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 80079f8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	4a1a      	ldr	r2, [pc, #104]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 80079fe:	213f      	movs	r1, #63	@ 0x3f
 8007a00:	5c52      	ldrb	r2, [r2, r1]
 8007a02:	4293      	cmp	r3, r2
 8007a04:	dd15      	ble.n	8007a32 <SX1276OnDio1Irq+0x15a>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8007a06:	4b18      	ldr	r3, [pc, #96]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 8007a08:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8007a0a:	001a      	movs	r2, r3
 8007a0c:	4b19      	ldr	r3, [pc, #100]	@ (8007a74 <SX1276OnDio1Irq+0x19c>)
 8007a0e:	18d2      	adds	r2, r2, r3
 8007a10:	4b15      	ldr	r3, [pc, #84]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 8007a12:	213f      	movs	r1, #63	@ 0x3f
 8007a14:	5c5b      	ldrb	r3, [r3, r1]
 8007a16:	0019      	movs	r1, r3
 8007a18:	0010      	movs	r0, r2
 8007a1a:	f7ff fbf8 	bl	800720e <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8007a1e:	4b12      	ldr	r3, [pc, #72]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 8007a20:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8007a22:	4a11      	ldr	r2, [pc, #68]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 8007a24:	213f      	movs	r1, #63	@ 0x3f
 8007a26:	5c52      	ldrb	r2, [r2, r1]
 8007a28:	189b      	adds	r3, r3, r2
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 8007a2e:	879a      	strh	r2, [r3, #60]	@ 0x3c
                break;
 8007a30:	e015      	b.n	8007a5e <SX1276OnDio1Irq+0x186>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8007a32:	4b0d      	ldr	r3, [pc, #52]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 8007a34:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8007a36:	001a      	movs	r2, r3
 8007a38:	4b0e      	ldr	r3, [pc, #56]	@ (8007a74 <SX1276OnDio1Irq+0x19c>)
 8007a3a:	18d0      	adds	r0, r2, r3
 8007a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 8007a3e:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	4b09      	ldr	r3, [pc, #36]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 8007a44:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	0019      	movs	r1, r3
 8007a4e:	f7ff fbde 	bl	800720e <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8007a52:	4b05      	ldr	r3, [pc, #20]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 8007a54:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 8007a56:	4b04      	ldr	r3, [pc, #16]	@ (8007a68 <SX1276OnDio1Irq+0x190>)
 8007a58:	879a      	strh	r2, [r3, #60]	@ 0x3c
                break;
 8007a5a:	e000      	b.n	8007a5e <SX1276OnDio1Irq+0x186>
                break;
 8007a5c:	46c0      	nop			@ (mov r8, r8)
            break;
 8007a5e:	46c0      	nop			@ (mov r8, r8)
    }
}
 8007a60:	46c0      	nop			@ (mov r8, r8)
 8007a62:	46bd      	mov	sp, r7
 8007a64:	b002      	add	sp, #8
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	200004ec 	.word	0x200004ec
 8007a6c:	20000584 	.word	0x20000584
 8007a70:	20000526 	.word	0x20000526
 8007a74:	200003e8 	.word	0x200003e8
 8007a78:	2000056c 	.word	0x2000056c
 8007a7c:	200003e4 	.word	0x200003e4

08007a80 <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void* context )
{
 8007a80:	b590      	push	{r4, r7, lr}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
    uint32_t afcChannel = 0;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	617b      	str	r3, [r7, #20]

    switch( SX1276.Settings.State )
 8007a8c:	4b5d      	ldr	r3, [pc, #372]	@ (8007c04 <SX1276OnDio2Irq+0x184>)
 8007a8e:	791b      	ldrb	r3, [r3, #4]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d003      	beq.n	8007a9c <SX1276OnDio2Irq+0x1c>
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d100      	bne.n	8007a9a <SX1276OnDio2Irq+0x1a>
 8007a98:	e083      	b.n	8007ba2 <SX1276OnDio2Irq+0x122>
            default:
                break;
            }
            break;
        default:
            break;
 8007a9a:	e0ae      	b.n	8007bfa <SX1276OnDio2Irq+0x17a>
            switch( SX1276.Settings.Modem )
 8007a9c:	4b59      	ldr	r3, [pc, #356]	@ (8007c04 <SX1276OnDio2Irq+0x184>)
 8007a9e:	795b      	ldrb	r3, [r3, #5]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d002      	beq.n	8007aaa <SX1276OnDio2Irq+0x2a>
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d058      	beq.n	8007b5a <SX1276OnDio2Irq+0xda>
                break;
 8007aa8:	e07a      	b.n	8007ba0 <SX1276OnDio2Irq+0x120>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8007aaa:	4b56      	ldr	r3, [pc, #344]	@ (8007c04 <SX1276OnDio2Irq+0x184>)
 8007aac:	2230      	movs	r2, #48	@ 0x30
 8007aae:	2101      	movs	r1, #1
 8007ab0:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8007ab2:	4b54      	ldr	r3, [pc, #336]	@ (8007c04 <SX1276OnDio2Irq+0x184>)
 8007ab4:	2230      	movs	r2, #48	@ 0x30
 8007ab6:	5c9b      	ldrb	r3, [r3, r2]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d16e      	bne.n	8007b9a <SX1276OnDio2Irq+0x11a>
 8007abc:	4b51      	ldr	r3, [pc, #324]	@ (8007c04 <SX1276OnDio2Irq+0x184>)
 8007abe:	2231      	movs	r2, #49	@ 0x31
 8007ac0:	5c9b      	ldrb	r3, [r3, r2]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d169      	bne.n	8007b9a <SX1276OnDio2Irq+0x11a>
                    TimerStop( &RxTimeoutSyncWord );
 8007ac6:	4b50      	ldr	r3, [pc, #320]	@ (8007c08 <SX1276OnDio2Irq+0x188>)
 8007ac8:	0018      	movs	r0, r3
 8007aca:	f00d fb67 	bl	801519c <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8007ace:	4b4d      	ldr	r3, [pc, #308]	@ (8007c04 <SX1276OnDio2Irq+0x184>)
 8007ad0:	2231      	movs	r2, #49	@ 0x31
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8007ad6:	2011      	movs	r0, #17
 8007ad8:	f7ff fb00 	bl	80070dc <SX1276Read>
 8007adc:	0003      	movs	r3, r0
 8007ade:	085b      	lsrs	r3, r3, #1
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	425b      	negs	r3, r3
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	b259      	sxtb	r1, r3
 8007ae8:	4b46      	ldr	r3, [pc, #280]	@ (8007c04 <SX1276OnDio2Irq+0x184>)
 8007aea:	2232      	movs	r2, #50	@ 0x32
 8007aec:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8007aee:	201b      	movs	r0, #27
 8007af0:	f7ff faf4 	bl	80070dc <SX1276Read>
 8007af4:	0003      	movs	r3, r0
 8007af6:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8007af8:	201c      	movs	r0, #28
 8007afa:	f7ff faef 	bl	80070dc <SX1276Read>
 8007afe:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8007b00:	4323      	orrs	r3, r4
 8007b02:	617b      	str	r3, [r7, #20]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	0a1b      	lsrs	r3, r3, #8
 8007b08:	613b      	str	r3, [r7, #16]
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	021b      	lsls	r3, r3, #8
 8007b0e:	697a      	ldr	r2, [r7, #20]
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	60fb      	str	r3, [r7, #12]
 8007b14:	6939      	ldr	r1, [r7, #16]
 8007b16:	000b      	movs	r3, r1
 8007b18:	015b      	lsls	r3, r3, #5
 8007b1a:	1a5b      	subs	r3, r3, r1
 8007b1c:	019a      	lsls	r2, r3, #6
 8007b1e:	1ad2      	subs	r2, r2, r3
 8007b20:	00d2      	lsls	r2, r2, #3
 8007b22:	1850      	adds	r0, r2, r1
 8007b24:	68f9      	ldr	r1, [r7, #12]
 8007b26:	000b      	movs	r3, r1
 8007b28:	015b      	lsls	r3, r3, #5
 8007b2a:	1a5b      	subs	r3, r3, r1
 8007b2c:	019a      	lsls	r2, r3, #6
 8007b2e:	1ad2      	subs	r2, r2, r3
 8007b30:	00d2      	lsls	r2, r2, #3
 8007b32:	1853      	adds	r3, r2, r1
 8007b34:	3380      	adds	r3, #128	@ 0x80
 8007b36:	0a1b      	lsrs	r3, r3, #8
 8007b38:	18c3      	adds	r3, r0, r3
 8007b3a:	001a      	movs	r2, r3
 8007b3c:	4b31      	ldr	r3, [pc, #196]	@ (8007c04 <SX1276OnDio2Irq+0x184>)
 8007b3e:	635a      	str	r2, [r3, #52]	@ 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8007b40:	200c      	movs	r0, #12
 8007b42:	f7ff facb 	bl	80070dc <SX1276Read>
 8007b46:	0003      	movs	r3, r0
 8007b48:	095b      	lsrs	r3, r3, #5
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2207      	movs	r2, #7
 8007b4e:	4013      	ands	r3, r2
 8007b50:	b2d9      	uxtb	r1, r3
 8007b52:	4b2c      	ldr	r3, [pc, #176]	@ (8007c04 <SX1276OnDio2Irq+0x184>)
 8007b54:	2238      	movs	r2, #56	@ 0x38
 8007b56:	5499      	strb	r1, [r3, r2]
                break;
 8007b58:	e01f      	b.n	8007b9a <SX1276OnDio2Irq+0x11a>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8007b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8007c04 <SX1276OnDio2Irq+0x184>)
 8007b5c:	2253      	movs	r2, #83	@ 0x53
 8007b5e:	5c9b      	ldrb	r3, [r3, r2]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d01c      	beq.n	8007b9e <SX1276OnDio2Irq+0x11e>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8007b64:	2102      	movs	r1, #2
 8007b66:	2012      	movs	r0, #18
 8007b68:	f7ff faa4 	bl	80070b4 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8007b6c:	4b27      	ldr	r3, [pc, #156]	@ (8007c0c <SX1276OnDio2Irq+0x18c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d014      	beq.n	8007b9e <SX1276OnDio2Irq+0x11e>
 8007b74:	4b25      	ldr	r3, [pc, #148]	@ (8007c0c <SX1276OnDio2Irq+0x18c>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00f      	beq.n	8007b9e <SX1276OnDio2Irq+0x11e>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8007b7e:	4b23      	ldr	r3, [pc, #140]	@ (8007c0c <SX1276OnDio2Irq+0x18c>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	695c      	ldr	r4, [r3, #20]
 8007b84:	201c      	movs	r0, #28
 8007b86:	f7ff faa9 	bl	80070dc <SX1276Read>
 8007b8a:	0003      	movs	r3, r0
 8007b8c:	001a      	movs	r2, r3
 8007b8e:	233f      	movs	r3, #63	@ 0x3f
 8007b90:	4013      	ands	r3, r2
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	0018      	movs	r0, r3
 8007b96:	47a0      	blx	r4
                break;
 8007b98:	e001      	b.n	8007b9e <SX1276OnDio2Irq+0x11e>
                break;
 8007b9a:	46c0      	nop			@ (mov r8, r8)
 8007b9c:	e02d      	b.n	8007bfa <SX1276OnDio2Irq+0x17a>
                break;
 8007b9e:	46c0      	nop			@ (mov r8, r8)
            break;
 8007ba0:	e02b      	b.n	8007bfa <SX1276OnDio2Irq+0x17a>
            switch( SX1276.Settings.Modem )
 8007ba2:	4b18      	ldr	r3, [pc, #96]	@ (8007c04 <SX1276OnDio2Irq+0x184>)
 8007ba4:	795b      	ldrb	r3, [r3, #5]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d021      	beq.n	8007bee <SX1276OnDio2Irq+0x16e>
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d121      	bne.n	8007bf2 <SX1276OnDio2Irq+0x172>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8007bae:	4b15      	ldr	r3, [pc, #84]	@ (8007c04 <SX1276OnDio2Irq+0x184>)
 8007bb0:	2253      	movs	r2, #83	@ 0x53
 8007bb2:	5c9b      	ldrb	r3, [r3, r2]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01e      	beq.n	8007bf6 <SX1276OnDio2Irq+0x176>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8007bb8:	2102      	movs	r1, #2
 8007bba:	2012      	movs	r0, #18
 8007bbc:	f7ff fa7a 	bl	80070b4 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8007bc0:	4b12      	ldr	r3, [pc, #72]	@ (8007c0c <SX1276OnDio2Irq+0x18c>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d016      	beq.n	8007bf6 <SX1276OnDio2Irq+0x176>
 8007bc8:	4b10      	ldr	r3, [pc, #64]	@ (8007c0c <SX1276OnDio2Irq+0x18c>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d011      	beq.n	8007bf6 <SX1276OnDio2Irq+0x176>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8007bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8007c0c <SX1276OnDio2Irq+0x18c>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	695c      	ldr	r4, [r3, #20]
 8007bd8:	201c      	movs	r0, #28
 8007bda:	f7ff fa7f 	bl	80070dc <SX1276Read>
 8007bde:	0003      	movs	r3, r0
 8007be0:	001a      	movs	r2, r3
 8007be2:	233f      	movs	r3, #63	@ 0x3f
 8007be4:	4013      	ands	r3, r2
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	0018      	movs	r0, r3
 8007bea:	47a0      	blx	r4
                break;
 8007bec:	e003      	b.n	8007bf6 <SX1276OnDio2Irq+0x176>
                break;
 8007bee:	46c0      	nop			@ (mov r8, r8)
 8007bf0:	e002      	b.n	8007bf8 <SX1276OnDio2Irq+0x178>
                break;
 8007bf2:	46c0      	nop			@ (mov r8, r8)
 8007bf4:	e000      	b.n	8007bf8 <SX1276OnDio2Irq+0x178>
                break;
 8007bf6:	46c0      	nop			@ (mov r8, r8)
            break;
 8007bf8:	46c0      	nop			@ (mov r8, r8)
    }
}
 8007bfa:	46c0      	nop			@ (mov r8, r8)
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	b007      	add	sp, #28
 8007c00:	bd90      	pop	{r4, r7, pc}
 8007c02:	46c0      	nop			@ (mov r8, r8)
 8007c04:	200004ec 	.word	0x200004ec
 8007c08:	20000584 	.word	0x20000584
 8007c0c:	200003e4 	.word	0x200003e4

08007c10 <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void* context )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 8007c18:	4b1e      	ldr	r3, [pc, #120]	@ (8007c94 <SX1276OnDio3Irq+0x84>)
 8007c1a:	795b      	ldrb	r3, [r3, #5]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d031      	beq.n	8007c84 <SX1276OnDio3Irq+0x74>
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d000      	beq.n	8007c26 <SX1276OnDio3Irq+0x16>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 8007c24:	e031      	b.n	8007c8a <SX1276OnDio3Irq+0x7a>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8007c26:	2012      	movs	r0, #18
 8007c28:	f7ff fa58 	bl	80070dc <SX1276Read>
 8007c2c:	0003      	movs	r3, r0
 8007c2e:	001a      	movs	r2, r3
 8007c30:	2301      	movs	r3, #1
 8007c32:	4013      	ands	r3, r2
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d112      	bne.n	8007c5e <SX1276OnDio3Irq+0x4e>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8007c38:	2105      	movs	r1, #5
 8007c3a:	2012      	movs	r0, #18
 8007c3c:	f7ff fa3a 	bl	80070b4 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007c40:	4b15      	ldr	r3, [pc, #84]	@ (8007c98 <SX1276OnDio3Irq+0x88>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d01f      	beq.n	8007c88 <SX1276OnDio3Irq+0x78>
 8007c48:	4b13      	ldr	r3, [pc, #76]	@ (8007c98 <SX1276OnDio3Irq+0x88>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d01a      	beq.n	8007c88 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( true );
 8007c52:	4b11      	ldr	r3, [pc, #68]	@ (8007c98 <SX1276OnDio3Irq+0x88>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	2001      	movs	r0, #1
 8007c5a:	4798      	blx	r3
        break;
 8007c5c:	e014      	b.n	8007c88 <SX1276OnDio3Irq+0x78>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8007c5e:	2104      	movs	r1, #4
 8007c60:	2012      	movs	r0, #18
 8007c62:	f7ff fa27 	bl	80070b4 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007c66:	4b0c      	ldr	r3, [pc, #48]	@ (8007c98 <SX1276OnDio3Irq+0x88>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00c      	beq.n	8007c88 <SX1276OnDio3Irq+0x78>
 8007c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8007c98 <SX1276OnDio3Irq+0x88>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d007      	beq.n	8007c88 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( false );
 8007c78:	4b07      	ldr	r3, [pc, #28]	@ (8007c98 <SX1276OnDio3Irq+0x88>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	2000      	movs	r0, #0
 8007c80:	4798      	blx	r3
        break;
 8007c82:	e001      	b.n	8007c88 <SX1276OnDio3Irq+0x78>
        break;
 8007c84:	46c0      	nop			@ (mov r8, r8)
 8007c86:	e000      	b.n	8007c8a <SX1276OnDio3Irq+0x7a>
        break;
 8007c88:	46c0      	nop			@ (mov r8, r8)
    }
}
 8007c8a:	46c0      	nop			@ (mov r8, r8)
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	b002      	add	sp, #8
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	46c0      	nop			@ (mov r8, r8)
 8007c94:	200004ec 	.word	0x200004ec
 8007c98:	200003e4 	.word	0x200003e4

08007c9c <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void* context )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 8007ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8007cd4 <SX1276OnDio4Irq+0x38>)
 8007ca6:	795b      	ldrb	r3, [r3, #5]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d002      	beq.n	8007cb2 <SX1276OnDio4Irq+0x16>
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d00a      	beq.n	8007cc6 <SX1276OnDio4Irq+0x2a>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 8007cb0:	e00c      	b.n	8007ccc <SX1276OnDio4Irq+0x30>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8007cb2:	4b08      	ldr	r3, [pc, #32]	@ (8007cd4 <SX1276OnDio4Irq+0x38>)
 8007cb4:	2230      	movs	r2, #48	@ 0x30
 8007cb6:	5c9b      	ldrb	r3, [r3, r2]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d106      	bne.n	8007cca <SX1276OnDio4Irq+0x2e>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8007cbc:	4b05      	ldr	r3, [pc, #20]	@ (8007cd4 <SX1276OnDio4Irq+0x38>)
 8007cbe:	2230      	movs	r2, #48	@ 0x30
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	5499      	strb	r1, [r3, r2]
        break;
 8007cc4:	e001      	b.n	8007cca <SX1276OnDio4Irq+0x2e>
        break;
 8007cc6:	46c0      	nop			@ (mov r8, r8)
 8007cc8:	e000      	b.n	8007ccc <SX1276OnDio4Irq+0x30>
        break;
 8007cca:	46c0      	nop			@ (mov r8, r8)
    }
}
 8007ccc:	46c0      	nop			@ (mov r8, r8)
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	b002      	add	sp, #8
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	200004ec 	.word	0x200004ec

08007cd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8007cdc:	4b17      	ldr	r3, [pc, #92]	@ (8007d3c <SystemInit+0x64>)
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	4b16      	ldr	r3, [pc, #88]	@ (8007d3c <SystemInit+0x64>)
 8007ce2:	2180      	movs	r1, #128	@ 0x80
 8007ce4:	0049      	lsls	r1, r1, #1
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8007cea:	4b14      	ldr	r3, [pc, #80]	@ (8007d3c <SystemInit+0x64>)
 8007cec:	68da      	ldr	r2, [r3, #12]
 8007cee:	4b13      	ldr	r3, [pc, #76]	@ (8007d3c <SystemInit+0x64>)
 8007cf0:	4913      	ldr	r1, [pc, #76]	@ (8007d40 <SystemInit+0x68>)
 8007cf2:	400a      	ands	r2, r1
 8007cf4:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8007cf6:	4b11      	ldr	r3, [pc, #68]	@ (8007d3c <SystemInit+0x64>)
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	4b10      	ldr	r3, [pc, #64]	@ (8007d3c <SystemInit+0x64>)
 8007cfc:	4911      	ldr	r1, [pc, #68]	@ (8007d44 <SystemInit+0x6c>)
 8007cfe:	400a      	ands	r2, r1
 8007d00:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8007d02:	4b0e      	ldr	r3, [pc, #56]	@ (8007d3c <SystemInit+0x64>)
 8007d04:	689a      	ldr	r2, [r3, #8]
 8007d06:	4b0d      	ldr	r3, [pc, #52]	@ (8007d3c <SystemInit+0x64>)
 8007d08:	2101      	movs	r1, #1
 8007d0a:	438a      	bics	r2, r1
 8007d0c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8007d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8007d3c <SystemInit+0x64>)
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	4b0a      	ldr	r3, [pc, #40]	@ (8007d3c <SystemInit+0x64>)
 8007d14:	490c      	ldr	r1, [pc, #48]	@ (8007d48 <SystemInit+0x70>)
 8007d16:	400a      	ands	r2, r1
 8007d18:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8007d1a:	4b08      	ldr	r3, [pc, #32]	@ (8007d3c <SystemInit+0x64>)
 8007d1c:	68da      	ldr	r2, [r3, #12]
 8007d1e:	4b07      	ldr	r3, [pc, #28]	@ (8007d3c <SystemInit+0x64>)
 8007d20:	490a      	ldr	r1, [pc, #40]	@ (8007d4c <SystemInit+0x74>)
 8007d22:	400a      	ands	r2, r1
 8007d24:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8007d26:	4b05      	ldr	r3, [pc, #20]	@ (8007d3c <SystemInit+0x64>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007d2c:	4b08      	ldr	r3, [pc, #32]	@ (8007d50 <SystemInit+0x78>)
 8007d2e:	2280      	movs	r2, #128	@ 0x80
 8007d30:	0512      	lsls	r2, r2, #20
 8007d32:	609a      	str	r2, [r3, #8]
#endif
}
 8007d34:	46c0      	nop			@ (mov r8, r8)
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	46c0      	nop			@ (mov r8, r8)
 8007d3c:	40021000 	.word	0x40021000
 8007d40:	88ff400c 	.word	0x88ff400c
 8007d44:	fef6fff6 	.word	0xfef6fff6
 8007d48:	fffbffff 	.word	0xfffbffff
 8007d4c:	ff02ffff 	.word	0xff02ffff
 8007d50:	e000ed00 	.word	0xe000ed00

08007d54 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	781a      	ldrb	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	7852      	ldrb	r2, [r2, #1]
 8007d6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3302      	adds	r3, #2
 8007d74:	683a      	ldr	r2, [r7, #0]
 8007d76:	7892      	ldrb	r2, [r2, #2]
 8007d78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	3303      	adds	r3, #3
 8007d7e:	683a      	ldr	r2, [r7, #0]
 8007d80:	78d2      	ldrb	r2, [r2, #3]
 8007d82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	3304      	adds	r3, #4
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	7912      	ldrb	r2, [r2, #4]
 8007d8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	3305      	adds	r3, #5
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	7952      	ldrb	r2, [r2, #5]
 8007d96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	3306      	adds	r3, #6
 8007d9c:	683a      	ldr	r2, [r7, #0]
 8007d9e:	7992      	ldrb	r2, [r2, #6]
 8007da0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	3307      	adds	r3, #7
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	79d2      	ldrb	r2, [r2, #7]
 8007daa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	3308      	adds	r3, #8
 8007db0:	683a      	ldr	r2, [r7, #0]
 8007db2:	7a12      	ldrb	r2, [r2, #8]
 8007db4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	3309      	adds	r3, #9
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	7a52      	ldrb	r2, [r2, #9]
 8007dbe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	330a      	adds	r3, #10
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	7a92      	ldrb	r2, [r2, #10]
 8007dc8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	330b      	adds	r3, #11
 8007dce:	683a      	ldr	r2, [r7, #0]
 8007dd0:	7ad2      	ldrb	r2, [r2, #11]
 8007dd2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	330c      	adds	r3, #12
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	7b12      	ldrb	r2, [r2, #12]
 8007ddc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	330d      	adds	r3, #13
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	7b52      	ldrb	r2, [r2, #13]
 8007de6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	330e      	adds	r3, #14
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	7b92      	ldrb	r2, [r2, #14]
 8007df0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	330f      	adds	r3, #15
 8007df6:	683a      	ldr	r2, [r7, #0]
 8007df8:	7bd2      	ldrb	r2, [r2, #15]
 8007dfa:	701a      	strb	r2, [r3, #0]
#endif
}
 8007dfc:	46c0      	nop			@ (mov r8, r8)
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	b002      	add	sp, #8
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	1dfb      	adds	r3, r7, #7
 8007e10:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 8007e12:	e007      	b.n	8007e24 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	1c53      	adds	r3, r2, #1
 8007e18:	60bb      	str	r3, [r7, #8]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	1c59      	adds	r1, r3, #1
 8007e1e:	60f9      	str	r1, [r7, #12]
 8007e20:	7812      	ldrb	r2, [r2, #0]
 8007e22:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 8007e24:	1dfb      	adds	r3, r7, #7
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	1dfa      	adds	r2, r7, #7
 8007e2a:	1e59      	subs	r1, r3, #1
 8007e2c:	7011      	strb	r1, [r2, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1f0      	bne.n	8007e14 <copy_block_nn+0x10>
}
 8007e32:	46c0      	nop			@ (mov r8, r8)
 8007e34:	46c0      	nop			@ (mov r8, r8)
 8007e36:	46bd      	mov	sp, r7
 8007e38:	b004      	add	sp, #16
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <xor_block>:

static void xor_block( void *d, const void *s )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	781a      	ldrb	r2, [r3, #0]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	4053      	eors	r3, r2
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	7819      	ldrb	r1, [r3, #0]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	781a      	ldrb	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	3301      	adds	r3, #1
 8007e66:	404a      	eors	r2, r1
 8007e68:	b2d2      	uxtb	r2, r2
 8007e6a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	3302      	adds	r3, #2
 8007e70:	7819      	ldrb	r1, [r3, #0]
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	3302      	adds	r3, #2
 8007e76:	781a      	ldrb	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	3302      	adds	r3, #2
 8007e7c:	404a      	eors	r2, r1
 8007e7e:	b2d2      	uxtb	r2, r2
 8007e80:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	3303      	adds	r3, #3
 8007e86:	7819      	ldrb	r1, [r3, #0]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	3303      	adds	r3, #3
 8007e8c:	781a      	ldrb	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	3303      	adds	r3, #3
 8007e92:	404a      	eors	r2, r1
 8007e94:	b2d2      	uxtb	r2, r2
 8007e96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	7819      	ldrb	r1, [r3, #0]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	781a      	ldrb	r2, [r3, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	3304      	adds	r3, #4
 8007ea8:	404a      	eors	r2, r1
 8007eaa:	b2d2      	uxtb	r2, r2
 8007eac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	3305      	adds	r3, #5
 8007eb2:	7819      	ldrb	r1, [r3, #0]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	3305      	adds	r3, #5
 8007eb8:	781a      	ldrb	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	3305      	adds	r3, #5
 8007ebe:	404a      	eors	r2, r1
 8007ec0:	b2d2      	uxtb	r2, r2
 8007ec2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	3306      	adds	r3, #6
 8007ec8:	7819      	ldrb	r1, [r3, #0]
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	3306      	adds	r3, #6
 8007ece:	781a      	ldrb	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	3306      	adds	r3, #6
 8007ed4:	404a      	eors	r2, r1
 8007ed6:	b2d2      	uxtb	r2, r2
 8007ed8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	3307      	adds	r3, #7
 8007ede:	7819      	ldrb	r1, [r3, #0]
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	3307      	adds	r3, #7
 8007ee4:	781a      	ldrb	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	3307      	adds	r3, #7
 8007eea:	404a      	eors	r2, r1
 8007eec:	b2d2      	uxtb	r2, r2
 8007eee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3308      	adds	r3, #8
 8007ef4:	7819      	ldrb	r1, [r3, #0]
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	3308      	adds	r3, #8
 8007efa:	781a      	ldrb	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	3308      	adds	r3, #8
 8007f00:	404a      	eors	r2, r1
 8007f02:	b2d2      	uxtb	r2, r2
 8007f04:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	3309      	adds	r3, #9
 8007f0a:	7819      	ldrb	r1, [r3, #0]
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	3309      	adds	r3, #9
 8007f10:	781a      	ldrb	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	3309      	adds	r3, #9
 8007f16:	404a      	eors	r2, r1
 8007f18:	b2d2      	uxtb	r2, r2
 8007f1a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	330a      	adds	r3, #10
 8007f20:	7819      	ldrb	r1, [r3, #0]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	330a      	adds	r3, #10
 8007f26:	781a      	ldrb	r2, [r3, #0]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	330a      	adds	r3, #10
 8007f2c:	404a      	eors	r2, r1
 8007f2e:	b2d2      	uxtb	r2, r2
 8007f30:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	330b      	adds	r3, #11
 8007f36:	7819      	ldrb	r1, [r3, #0]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	330b      	adds	r3, #11
 8007f3c:	781a      	ldrb	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	330b      	adds	r3, #11
 8007f42:	404a      	eors	r2, r1
 8007f44:	b2d2      	uxtb	r2, r2
 8007f46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	330c      	adds	r3, #12
 8007f4c:	7819      	ldrb	r1, [r3, #0]
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	330c      	adds	r3, #12
 8007f52:	781a      	ldrb	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	330c      	adds	r3, #12
 8007f58:	404a      	eors	r2, r1
 8007f5a:	b2d2      	uxtb	r2, r2
 8007f5c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	330d      	adds	r3, #13
 8007f62:	7819      	ldrb	r1, [r3, #0]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	330d      	adds	r3, #13
 8007f68:	781a      	ldrb	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	330d      	adds	r3, #13
 8007f6e:	404a      	eors	r2, r1
 8007f70:	b2d2      	uxtb	r2, r2
 8007f72:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	330e      	adds	r3, #14
 8007f78:	7819      	ldrb	r1, [r3, #0]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	330e      	adds	r3, #14
 8007f7e:	781a      	ldrb	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	330e      	adds	r3, #14
 8007f84:	404a      	eors	r2, r1
 8007f86:	b2d2      	uxtb	r2, r2
 8007f88:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	330f      	adds	r3, #15
 8007f8e:	7819      	ldrb	r1, [r3, #0]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	330f      	adds	r3, #15
 8007f94:	781a      	ldrb	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	330f      	adds	r3, #15
 8007f9a:	404a      	eors	r2, r1
 8007f9c:	b2d2      	uxtb	r2, r2
 8007f9e:	701a      	strb	r2, [r3, #0]
#endif
}
 8007fa0:	46c0      	nop			@ (mov r8, r8)
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	b002      	add	sp, #8
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	781a      	ldrb	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	4053      	eors	r3, r2
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	7819      	ldrb	r1, [r3, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	781a      	ldrb	r2, [r3, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	404a      	eors	r2, r1
 8007fd6:	b2d2      	uxtb	r2, r2
 8007fd8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	3302      	adds	r3, #2
 8007fde:	7819      	ldrb	r1, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	3302      	adds	r3, #2
 8007fe4:	781a      	ldrb	r2, [r3, #0]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	3302      	adds	r3, #2
 8007fea:	404a      	eors	r2, r1
 8007fec:	b2d2      	uxtb	r2, r2
 8007fee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	3303      	adds	r3, #3
 8007ff4:	7819      	ldrb	r1, [r3, #0]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	3303      	adds	r3, #3
 8007ffa:	781a      	ldrb	r2, [r3, #0]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	3303      	adds	r3, #3
 8008000:	404a      	eors	r2, r1
 8008002:	b2d2      	uxtb	r2, r2
 8008004:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	3304      	adds	r3, #4
 800800a:	7819      	ldrb	r1, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3304      	adds	r3, #4
 8008010:	781a      	ldrb	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	3304      	adds	r3, #4
 8008016:	404a      	eors	r2, r1
 8008018:	b2d2      	uxtb	r2, r2
 800801a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	3305      	adds	r3, #5
 8008020:	7819      	ldrb	r1, [r3, #0]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	3305      	adds	r3, #5
 8008026:	781a      	ldrb	r2, [r3, #0]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	3305      	adds	r3, #5
 800802c:	404a      	eors	r2, r1
 800802e:	b2d2      	uxtb	r2, r2
 8008030:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	3306      	adds	r3, #6
 8008036:	7819      	ldrb	r1, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	3306      	adds	r3, #6
 800803c:	781a      	ldrb	r2, [r3, #0]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	3306      	adds	r3, #6
 8008042:	404a      	eors	r2, r1
 8008044:	b2d2      	uxtb	r2, r2
 8008046:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	3307      	adds	r3, #7
 800804c:	7819      	ldrb	r1, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	3307      	adds	r3, #7
 8008052:	781a      	ldrb	r2, [r3, #0]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	3307      	adds	r3, #7
 8008058:	404a      	eors	r2, r1
 800805a:	b2d2      	uxtb	r2, r2
 800805c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	3308      	adds	r3, #8
 8008062:	7819      	ldrb	r1, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	3308      	adds	r3, #8
 8008068:	781a      	ldrb	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3308      	adds	r3, #8
 800806e:	404a      	eors	r2, r1
 8008070:	b2d2      	uxtb	r2, r2
 8008072:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	3309      	adds	r3, #9
 8008078:	7819      	ldrb	r1, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	3309      	adds	r3, #9
 800807e:	781a      	ldrb	r2, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	3309      	adds	r3, #9
 8008084:	404a      	eors	r2, r1
 8008086:	b2d2      	uxtb	r2, r2
 8008088:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	330a      	adds	r3, #10
 800808e:	7819      	ldrb	r1, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	330a      	adds	r3, #10
 8008094:	781a      	ldrb	r2, [r3, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	330a      	adds	r3, #10
 800809a:	404a      	eors	r2, r1
 800809c:	b2d2      	uxtb	r2, r2
 800809e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	330b      	adds	r3, #11
 80080a4:	7819      	ldrb	r1, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	330b      	adds	r3, #11
 80080aa:	781a      	ldrb	r2, [r3, #0]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	330b      	adds	r3, #11
 80080b0:	404a      	eors	r2, r1
 80080b2:	b2d2      	uxtb	r2, r2
 80080b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	330c      	adds	r3, #12
 80080ba:	7819      	ldrb	r1, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	330c      	adds	r3, #12
 80080c0:	781a      	ldrb	r2, [r3, #0]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	330c      	adds	r3, #12
 80080c6:	404a      	eors	r2, r1
 80080c8:	b2d2      	uxtb	r2, r2
 80080ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	330d      	adds	r3, #13
 80080d0:	7819      	ldrb	r1, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	330d      	adds	r3, #13
 80080d6:	781a      	ldrb	r2, [r3, #0]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	330d      	adds	r3, #13
 80080dc:	404a      	eors	r2, r1
 80080de:	b2d2      	uxtb	r2, r2
 80080e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	330e      	adds	r3, #14
 80080e6:	7819      	ldrb	r1, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	330e      	adds	r3, #14
 80080ec:	781a      	ldrb	r2, [r3, #0]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	330e      	adds	r3, #14
 80080f2:	404a      	eors	r2, r1
 80080f4:	b2d2      	uxtb	r2, r2
 80080f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	330f      	adds	r3, #15
 80080fc:	7819      	ldrb	r1, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	330f      	adds	r3, #15
 8008102:	781a      	ldrb	r2, [r3, #0]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	330f      	adds	r3, #15
 8008108:	404a      	eors	r2, r1
 800810a:	b2d2      	uxtb	r2, r2
 800810c:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800810e:	46c0      	nop			@ (mov r8, r8)
 8008110:	46bd      	mov	sp, r7
 8008112:	b004      	add	sp, #16
 8008114:	bd80      	pop	{r7, pc}

08008116 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b082      	sub	sp, #8
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	0011      	movs	r1, r2
 8008126:	0018      	movs	r0, r3
 8008128:	f7ff fe88 	bl	8007e3c <xor_block>
}
 800812c:	46c0      	nop			@ (mov r8, r8)
 800812e:	46bd      	mov	sp, r7
 8008130:	b002      	add	sp, #8
 8008132:	bd80      	pop	{r7, pc}

08008134 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	001a      	movs	r2, r3
 8008142:	4b4c      	ldr	r3, [pc, #304]	@ (8008274 <shift_sub_rows+0x140>)
 8008144:	5c9a      	ldrb	r2, [r3, r2]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	701a      	strb	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	3304      	adds	r3, #4
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	0019      	movs	r1, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	3304      	adds	r3, #4
 8008156:	4a47      	ldr	r2, [pc, #284]	@ (8008274 <shift_sub_rows+0x140>)
 8008158:	5c52      	ldrb	r2, [r2, r1]
 800815a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	3308      	adds	r3, #8
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	0019      	movs	r1, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	3308      	adds	r3, #8
 8008168:	4a42      	ldr	r2, [pc, #264]	@ (8008274 <shift_sub_rows+0x140>)
 800816a:	5c52      	ldrb	r2, [r2, r1]
 800816c:	701a      	strb	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	330c      	adds	r3, #12
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	0019      	movs	r1, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	330c      	adds	r3, #12
 800817a:	4a3e      	ldr	r2, [pc, #248]	@ (8008274 <shift_sub_rows+0x140>)
 800817c:	5c52      	ldrb	r2, [r2, r1]
 800817e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8008180:	200f      	movs	r0, #15
 8008182:	183b      	adds	r3, r7, r0
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	7852      	ldrb	r2, [r2, #1]
 8008188:	701a      	strb	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	3305      	adds	r3, #5
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	0019      	movs	r1, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	3301      	adds	r3, #1
 8008196:	4a37      	ldr	r2, [pc, #220]	@ (8008274 <shift_sub_rows+0x140>)
 8008198:	5c52      	ldrb	r2, [r2, r1]
 800819a:	701a      	strb	r2, [r3, #0]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	3309      	adds	r3, #9
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	0019      	movs	r1, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3305      	adds	r3, #5
 80081a8:	4a32      	ldr	r2, [pc, #200]	@ (8008274 <shift_sub_rows+0x140>)
 80081aa:	5c52      	ldrb	r2, [r2, r1]
 80081ac:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	330d      	adds	r3, #13
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	0019      	movs	r1, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	3309      	adds	r3, #9
 80081ba:	4a2e      	ldr	r2, [pc, #184]	@ (8008274 <shift_sub_rows+0x140>)
 80081bc:	5c52      	ldrb	r2, [r2, r1]
 80081be:	701a      	strb	r2, [r3, #0]
 80081c0:	183b      	adds	r3, r7, r0
 80081c2:	781a      	ldrb	r2, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	330d      	adds	r3, #13
 80081c8:	492a      	ldr	r1, [pc, #168]	@ (8008274 <shift_sub_rows+0x140>)
 80081ca:	5c8a      	ldrb	r2, [r1, r2]
 80081cc:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 80081ce:	183b      	adds	r3, r7, r0
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	7892      	ldrb	r2, [r2, #2]
 80081d4:	701a      	strb	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	330a      	adds	r3, #10
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	0019      	movs	r1, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	3302      	adds	r3, #2
 80081e2:	4a24      	ldr	r2, [pc, #144]	@ (8008274 <shift_sub_rows+0x140>)
 80081e4:	5c52      	ldrb	r2, [r2, r1]
 80081e6:	701a      	strb	r2, [r3, #0]
 80081e8:	183b      	adds	r3, r7, r0
 80081ea:	781a      	ldrb	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	330a      	adds	r3, #10
 80081f0:	4920      	ldr	r1, [pc, #128]	@ (8008274 <shift_sub_rows+0x140>)
 80081f2:	5c8a      	ldrb	r2, [r1, r2]
 80081f4:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 80081f6:	183b      	adds	r3, r7, r0
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	7992      	ldrb	r2, [r2, #6]
 80081fc:	701a      	strb	r2, [r3, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	330e      	adds	r3, #14
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	0019      	movs	r1, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	3306      	adds	r3, #6
 800820a:	4a1a      	ldr	r2, [pc, #104]	@ (8008274 <shift_sub_rows+0x140>)
 800820c:	5c52      	ldrb	r2, [r2, r1]
 800820e:	701a      	strb	r2, [r3, #0]
 8008210:	183b      	adds	r3, r7, r0
 8008212:	781a      	ldrb	r2, [r3, #0]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	330e      	adds	r3, #14
 8008218:	4916      	ldr	r1, [pc, #88]	@ (8008274 <shift_sub_rows+0x140>)
 800821a:	5c8a      	ldrb	r2, [r1, r2]
 800821c:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800821e:	183b      	adds	r3, r7, r0
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	7bd2      	ldrb	r2, [r2, #15]
 8008224:	701a      	strb	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	330b      	adds	r3, #11
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	0019      	movs	r1, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	330f      	adds	r3, #15
 8008232:	4a10      	ldr	r2, [pc, #64]	@ (8008274 <shift_sub_rows+0x140>)
 8008234:	5c52      	ldrb	r2, [r2, r1]
 8008236:	701a      	strb	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	3307      	adds	r3, #7
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	0019      	movs	r1, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	330b      	adds	r3, #11
 8008244:	4a0b      	ldr	r2, [pc, #44]	@ (8008274 <shift_sub_rows+0x140>)
 8008246:	5c52      	ldrb	r2, [r2, r1]
 8008248:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	3303      	adds	r3, #3
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	0019      	movs	r1, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	3307      	adds	r3, #7
 8008256:	4a07      	ldr	r2, [pc, #28]	@ (8008274 <shift_sub_rows+0x140>)
 8008258:	5c52      	ldrb	r2, [r2, r1]
 800825a:	701a      	strb	r2, [r3, #0]
 800825c:	183b      	adds	r3, r7, r0
 800825e:	781a      	ldrb	r2, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	3303      	adds	r3, #3
 8008264:	4903      	ldr	r1, [pc, #12]	@ (8008274 <shift_sub_rows+0x140>)
 8008266:	5c8a      	ldrb	r2, [r1, r2]
 8008268:	701a      	strb	r2, [r3, #0]
}
 800826a:	46c0      	nop			@ (mov r8, r8)
 800826c:	46bd      	mov	sp, r7
 800826e:	b004      	add	sp, #16
 8008270:	bd80      	pop	{r7, pc}
 8008272:	46c0      	nop			@ (mov r8, r8)
 8008274:	0801af68 	.word	0x0801af68

08008278 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8008278:	b590      	push	{r4, r7, lr}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	2408      	movs	r4, #8
 8008284:	193b      	adds	r3, r7, r4
 8008286:	0011      	movs	r1, r2
 8008288:	0018      	movs	r0, r3
 800828a:	f7ff fd63 	bl	8007d54 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800828e:	0020      	movs	r0, r4
 8008290:	183b      	adds	r3, r7, r0
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	001a      	movs	r2, r3
 8008296:	4be8      	ldr	r3, [pc, #928]	@ (8008638 <mix_sub_columns+0x3c0>)
 8008298:	5c9a      	ldrb	r2, [r3, r2]
 800829a:	183b      	adds	r3, r7, r0
 800829c:	795b      	ldrb	r3, [r3, #5]
 800829e:	0019      	movs	r1, r3
 80082a0:	4be6      	ldr	r3, [pc, #920]	@ (800863c <mix_sub_columns+0x3c4>)
 80082a2:	5c5b      	ldrb	r3, [r3, r1]
 80082a4:	4053      	eors	r3, r2
 80082a6:	b2da      	uxtb	r2, r3
 80082a8:	183b      	adds	r3, r7, r0
 80082aa:	7a9b      	ldrb	r3, [r3, #10]
 80082ac:	0019      	movs	r1, r3
 80082ae:	4be4      	ldr	r3, [pc, #912]	@ (8008640 <mix_sub_columns+0x3c8>)
 80082b0:	5c5b      	ldrb	r3, [r3, r1]
 80082b2:	4053      	eors	r3, r2
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	183b      	adds	r3, r7, r0
 80082b8:	7bdb      	ldrb	r3, [r3, #15]
 80082ba:	0019      	movs	r1, r3
 80082bc:	4be0      	ldr	r3, [pc, #896]	@ (8008640 <mix_sub_columns+0x3c8>)
 80082be:	5c5b      	ldrb	r3, [r3, r1]
 80082c0:	4053      	eors	r3, r2
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80082c8:	183b      	adds	r3, r7, r0
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	001a      	movs	r2, r3
 80082ce:	4bdc      	ldr	r3, [pc, #880]	@ (8008640 <mix_sub_columns+0x3c8>)
 80082d0:	5c9a      	ldrb	r2, [r3, r2]
 80082d2:	183b      	adds	r3, r7, r0
 80082d4:	795b      	ldrb	r3, [r3, #5]
 80082d6:	0019      	movs	r1, r3
 80082d8:	4bd7      	ldr	r3, [pc, #860]	@ (8008638 <mix_sub_columns+0x3c0>)
 80082da:	5c5b      	ldrb	r3, [r3, r1]
 80082dc:	4053      	eors	r3, r2
 80082de:	b2da      	uxtb	r2, r3
 80082e0:	183b      	adds	r3, r7, r0
 80082e2:	7a9b      	ldrb	r3, [r3, #10]
 80082e4:	0019      	movs	r1, r3
 80082e6:	4bd5      	ldr	r3, [pc, #852]	@ (800863c <mix_sub_columns+0x3c4>)
 80082e8:	5c5b      	ldrb	r3, [r3, r1]
 80082ea:	4053      	eors	r3, r2
 80082ec:	b2d9      	uxtb	r1, r3
 80082ee:	183b      	adds	r3, r7, r0
 80082f0:	7bdb      	ldrb	r3, [r3, #15]
 80082f2:	001a      	movs	r2, r3
 80082f4:	4bd2      	ldr	r3, [pc, #840]	@ (8008640 <mix_sub_columns+0x3c8>)
 80082f6:	5c9a      	ldrb	r2, [r3, r2]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	3301      	adds	r3, #1
 80082fc:	404a      	eors	r2, r1
 80082fe:	b2d2      	uxtb	r2, r2
 8008300:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8008302:	183b      	adds	r3, r7, r0
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	001a      	movs	r2, r3
 8008308:	4bcd      	ldr	r3, [pc, #820]	@ (8008640 <mix_sub_columns+0x3c8>)
 800830a:	5c9a      	ldrb	r2, [r3, r2]
 800830c:	183b      	adds	r3, r7, r0
 800830e:	795b      	ldrb	r3, [r3, #5]
 8008310:	0019      	movs	r1, r3
 8008312:	4bcb      	ldr	r3, [pc, #812]	@ (8008640 <mix_sub_columns+0x3c8>)
 8008314:	5c5b      	ldrb	r3, [r3, r1]
 8008316:	4053      	eors	r3, r2
 8008318:	b2da      	uxtb	r2, r3
 800831a:	183b      	adds	r3, r7, r0
 800831c:	7a9b      	ldrb	r3, [r3, #10]
 800831e:	0019      	movs	r1, r3
 8008320:	4bc5      	ldr	r3, [pc, #788]	@ (8008638 <mix_sub_columns+0x3c0>)
 8008322:	5c5b      	ldrb	r3, [r3, r1]
 8008324:	4053      	eors	r3, r2
 8008326:	b2d9      	uxtb	r1, r3
 8008328:	183b      	adds	r3, r7, r0
 800832a:	7bdb      	ldrb	r3, [r3, #15]
 800832c:	001a      	movs	r2, r3
 800832e:	4bc3      	ldr	r3, [pc, #780]	@ (800863c <mix_sub_columns+0x3c4>)
 8008330:	5c9a      	ldrb	r2, [r3, r2]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	3302      	adds	r3, #2
 8008336:	404a      	eors	r2, r1
 8008338:	b2d2      	uxtb	r2, r2
 800833a:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800833c:	183b      	adds	r3, r7, r0
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	001a      	movs	r2, r3
 8008342:	4bbe      	ldr	r3, [pc, #760]	@ (800863c <mix_sub_columns+0x3c4>)
 8008344:	5c9a      	ldrb	r2, [r3, r2]
 8008346:	183b      	adds	r3, r7, r0
 8008348:	795b      	ldrb	r3, [r3, #5]
 800834a:	0019      	movs	r1, r3
 800834c:	4bbc      	ldr	r3, [pc, #752]	@ (8008640 <mix_sub_columns+0x3c8>)
 800834e:	5c5b      	ldrb	r3, [r3, r1]
 8008350:	4053      	eors	r3, r2
 8008352:	b2da      	uxtb	r2, r3
 8008354:	183b      	adds	r3, r7, r0
 8008356:	7a9b      	ldrb	r3, [r3, #10]
 8008358:	0019      	movs	r1, r3
 800835a:	4bb9      	ldr	r3, [pc, #740]	@ (8008640 <mix_sub_columns+0x3c8>)
 800835c:	5c5b      	ldrb	r3, [r3, r1]
 800835e:	4053      	eors	r3, r2
 8008360:	b2d9      	uxtb	r1, r3
 8008362:	183b      	adds	r3, r7, r0
 8008364:	7bdb      	ldrb	r3, [r3, #15]
 8008366:	001a      	movs	r2, r3
 8008368:	4bb3      	ldr	r3, [pc, #716]	@ (8008638 <mix_sub_columns+0x3c0>)
 800836a:	5c9a      	ldrb	r2, [r3, r2]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	3303      	adds	r3, #3
 8008370:	404a      	eors	r2, r1
 8008372:	b2d2      	uxtb	r2, r2
 8008374:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8008376:	183b      	adds	r3, r7, r0
 8008378:	791b      	ldrb	r3, [r3, #4]
 800837a:	001a      	movs	r2, r3
 800837c:	4bae      	ldr	r3, [pc, #696]	@ (8008638 <mix_sub_columns+0x3c0>)
 800837e:	5c9a      	ldrb	r2, [r3, r2]
 8008380:	183b      	adds	r3, r7, r0
 8008382:	7a5b      	ldrb	r3, [r3, #9]
 8008384:	0019      	movs	r1, r3
 8008386:	4bad      	ldr	r3, [pc, #692]	@ (800863c <mix_sub_columns+0x3c4>)
 8008388:	5c5b      	ldrb	r3, [r3, r1]
 800838a:	4053      	eors	r3, r2
 800838c:	b2da      	uxtb	r2, r3
 800838e:	183b      	adds	r3, r7, r0
 8008390:	7b9b      	ldrb	r3, [r3, #14]
 8008392:	0019      	movs	r1, r3
 8008394:	4baa      	ldr	r3, [pc, #680]	@ (8008640 <mix_sub_columns+0x3c8>)
 8008396:	5c5b      	ldrb	r3, [r3, r1]
 8008398:	4053      	eors	r3, r2
 800839a:	b2d9      	uxtb	r1, r3
 800839c:	183b      	adds	r3, r7, r0
 800839e:	78db      	ldrb	r3, [r3, #3]
 80083a0:	001a      	movs	r2, r3
 80083a2:	4ba7      	ldr	r3, [pc, #668]	@ (8008640 <mix_sub_columns+0x3c8>)
 80083a4:	5c9a      	ldrb	r2, [r3, r2]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	3304      	adds	r3, #4
 80083aa:	404a      	eors	r2, r1
 80083ac:	b2d2      	uxtb	r2, r2
 80083ae:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 80083b0:	183b      	adds	r3, r7, r0
 80083b2:	791b      	ldrb	r3, [r3, #4]
 80083b4:	001a      	movs	r2, r3
 80083b6:	4ba2      	ldr	r3, [pc, #648]	@ (8008640 <mix_sub_columns+0x3c8>)
 80083b8:	5c9a      	ldrb	r2, [r3, r2]
 80083ba:	183b      	adds	r3, r7, r0
 80083bc:	7a5b      	ldrb	r3, [r3, #9]
 80083be:	0019      	movs	r1, r3
 80083c0:	4b9d      	ldr	r3, [pc, #628]	@ (8008638 <mix_sub_columns+0x3c0>)
 80083c2:	5c5b      	ldrb	r3, [r3, r1]
 80083c4:	4053      	eors	r3, r2
 80083c6:	b2da      	uxtb	r2, r3
 80083c8:	183b      	adds	r3, r7, r0
 80083ca:	7b9b      	ldrb	r3, [r3, #14]
 80083cc:	0019      	movs	r1, r3
 80083ce:	4b9b      	ldr	r3, [pc, #620]	@ (800863c <mix_sub_columns+0x3c4>)
 80083d0:	5c5b      	ldrb	r3, [r3, r1]
 80083d2:	4053      	eors	r3, r2
 80083d4:	b2d9      	uxtb	r1, r3
 80083d6:	183b      	adds	r3, r7, r0
 80083d8:	78db      	ldrb	r3, [r3, #3]
 80083da:	001a      	movs	r2, r3
 80083dc:	4b98      	ldr	r3, [pc, #608]	@ (8008640 <mix_sub_columns+0x3c8>)
 80083de:	5c9a      	ldrb	r2, [r3, r2]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	3305      	adds	r3, #5
 80083e4:	404a      	eors	r2, r1
 80083e6:	b2d2      	uxtb	r2, r2
 80083e8:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80083ea:	183b      	adds	r3, r7, r0
 80083ec:	791b      	ldrb	r3, [r3, #4]
 80083ee:	001a      	movs	r2, r3
 80083f0:	4b93      	ldr	r3, [pc, #588]	@ (8008640 <mix_sub_columns+0x3c8>)
 80083f2:	5c9a      	ldrb	r2, [r3, r2]
 80083f4:	183b      	adds	r3, r7, r0
 80083f6:	7a5b      	ldrb	r3, [r3, #9]
 80083f8:	0019      	movs	r1, r3
 80083fa:	4b91      	ldr	r3, [pc, #580]	@ (8008640 <mix_sub_columns+0x3c8>)
 80083fc:	5c5b      	ldrb	r3, [r3, r1]
 80083fe:	4053      	eors	r3, r2
 8008400:	b2da      	uxtb	r2, r3
 8008402:	183b      	adds	r3, r7, r0
 8008404:	7b9b      	ldrb	r3, [r3, #14]
 8008406:	0019      	movs	r1, r3
 8008408:	4b8b      	ldr	r3, [pc, #556]	@ (8008638 <mix_sub_columns+0x3c0>)
 800840a:	5c5b      	ldrb	r3, [r3, r1]
 800840c:	4053      	eors	r3, r2
 800840e:	b2d9      	uxtb	r1, r3
 8008410:	183b      	adds	r3, r7, r0
 8008412:	78db      	ldrb	r3, [r3, #3]
 8008414:	001a      	movs	r2, r3
 8008416:	4b89      	ldr	r3, [pc, #548]	@ (800863c <mix_sub_columns+0x3c4>)
 8008418:	5c9a      	ldrb	r2, [r3, r2]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	3306      	adds	r3, #6
 800841e:	404a      	eors	r2, r1
 8008420:	b2d2      	uxtb	r2, r2
 8008422:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8008424:	183b      	adds	r3, r7, r0
 8008426:	791b      	ldrb	r3, [r3, #4]
 8008428:	001a      	movs	r2, r3
 800842a:	4b84      	ldr	r3, [pc, #528]	@ (800863c <mix_sub_columns+0x3c4>)
 800842c:	5c9a      	ldrb	r2, [r3, r2]
 800842e:	183b      	adds	r3, r7, r0
 8008430:	7a5b      	ldrb	r3, [r3, #9]
 8008432:	0019      	movs	r1, r3
 8008434:	4b82      	ldr	r3, [pc, #520]	@ (8008640 <mix_sub_columns+0x3c8>)
 8008436:	5c5b      	ldrb	r3, [r3, r1]
 8008438:	4053      	eors	r3, r2
 800843a:	b2da      	uxtb	r2, r3
 800843c:	183b      	adds	r3, r7, r0
 800843e:	7b9b      	ldrb	r3, [r3, #14]
 8008440:	0019      	movs	r1, r3
 8008442:	4b7f      	ldr	r3, [pc, #508]	@ (8008640 <mix_sub_columns+0x3c8>)
 8008444:	5c5b      	ldrb	r3, [r3, r1]
 8008446:	4053      	eors	r3, r2
 8008448:	b2d9      	uxtb	r1, r3
 800844a:	183b      	adds	r3, r7, r0
 800844c:	78db      	ldrb	r3, [r3, #3]
 800844e:	001a      	movs	r2, r3
 8008450:	4b79      	ldr	r3, [pc, #484]	@ (8008638 <mix_sub_columns+0x3c0>)
 8008452:	5c9a      	ldrb	r2, [r3, r2]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	3307      	adds	r3, #7
 8008458:	404a      	eors	r2, r1
 800845a:	b2d2      	uxtb	r2, r2
 800845c:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800845e:	183b      	adds	r3, r7, r0
 8008460:	7a1b      	ldrb	r3, [r3, #8]
 8008462:	001a      	movs	r2, r3
 8008464:	4b74      	ldr	r3, [pc, #464]	@ (8008638 <mix_sub_columns+0x3c0>)
 8008466:	5c9a      	ldrb	r2, [r3, r2]
 8008468:	183b      	adds	r3, r7, r0
 800846a:	7b5b      	ldrb	r3, [r3, #13]
 800846c:	0019      	movs	r1, r3
 800846e:	4b73      	ldr	r3, [pc, #460]	@ (800863c <mix_sub_columns+0x3c4>)
 8008470:	5c5b      	ldrb	r3, [r3, r1]
 8008472:	4053      	eors	r3, r2
 8008474:	b2da      	uxtb	r2, r3
 8008476:	183b      	adds	r3, r7, r0
 8008478:	789b      	ldrb	r3, [r3, #2]
 800847a:	0019      	movs	r1, r3
 800847c:	4b70      	ldr	r3, [pc, #448]	@ (8008640 <mix_sub_columns+0x3c8>)
 800847e:	5c5b      	ldrb	r3, [r3, r1]
 8008480:	4053      	eors	r3, r2
 8008482:	b2d9      	uxtb	r1, r3
 8008484:	183b      	adds	r3, r7, r0
 8008486:	79db      	ldrb	r3, [r3, #7]
 8008488:	001a      	movs	r2, r3
 800848a:	4b6d      	ldr	r3, [pc, #436]	@ (8008640 <mix_sub_columns+0x3c8>)
 800848c:	5c9a      	ldrb	r2, [r3, r2]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	3308      	adds	r3, #8
 8008492:	404a      	eors	r2, r1
 8008494:	b2d2      	uxtb	r2, r2
 8008496:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8008498:	183b      	adds	r3, r7, r0
 800849a:	7a1b      	ldrb	r3, [r3, #8]
 800849c:	001a      	movs	r2, r3
 800849e:	4b68      	ldr	r3, [pc, #416]	@ (8008640 <mix_sub_columns+0x3c8>)
 80084a0:	5c9a      	ldrb	r2, [r3, r2]
 80084a2:	183b      	adds	r3, r7, r0
 80084a4:	7b5b      	ldrb	r3, [r3, #13]
 80084a6:	0019      	movs	r1, r3
 80084a8:	4b63      	ldr	r3, [pc, #396]	@ (8008638 <mix_sub_columns+0x3c0>)
 80084aa:	5c5b      	ldrb	r3, [r3, r1]
 80084ac:	4053      	eors	r3, r2
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	183b      	adds	r3, r7, r0
 80084b2:	789b      	ldrb	r3, [r3, #2]
 80084b4:	0019      	movs	r1, r3
 80084b6:	4b61      	ldr	r3, [pc, #388]	@ (800863c <mix_sub_columns+0x3c4>)
 80084b8:	5c5b      	ldrb	r3, [r3, r1]
 80084ba:	4053      	eors	r3, r2
 80084bc:	b2d9      	uxtb	r1, r3
 80084be:	183b      	adds	r3, r7, r0
 80084c0:	79db      	ldrb	r3, [r3, #7]
 80084c2:	001a      	movs	r2, r3
 80084c4:	4b5e      	ldr	r3, [pc, #376]	@ (8008640 <mix_sub_columns+0x3c8>)
 80084c6:	5c9a      	ldrb	r2, [r3, r2]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	3309      	adds	r3, #9
 80084cc:	404a      	eors	r2, r1
 80084ce:	b2d2      	uxtb	r2, r2
 80084d0:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 80084d2:	183b      	adds	r3, r7, r0
 80084d4:	7a1b      	ldrb	r3, [r3, #8]
 80084d6:	001a      	movs	r2, r3
 80084d8:	4b59      	ldr	r3, [pc, #356]	@ (8008640 <mix_sub_columns+0x3c8>)
 80084da:	5c9a      	ldrb	r2, [r3, r2]
 80084dc:	183b      	adds	r3, r7, r0
 80084de:	7b5b      	ldrb	r3, [r3, #13]
 80084e0:	0019      	movs	r1, r3
 80084e2:	4b57      	ldr	r3, [pc, #348]	@ (8008640 <mix_sub_columns+0x3c8>)
 80084e4:	5c5b      	ldrb	r3, [r3, r1]
 80084e6:	4053      	eors	r3, r2
 80084e8:	b2da      	uxtb	r2, r3
 80084ea:	183b      	adds	r3, r7, r0
 80084ec:	789b      	ldrb	r3, [r3, #2]
 80084ee:	0019      	movs	r1, r3
 80084f0:	4b51      	ldr	r3, [pc, #324]	@ (8008638 <mix_sub_columns+0x3c0>)
 80084f2:	5c5b      	ldrb	r3, [r3, r1]
 80084f4:	4053      	eors	r3, r2
 80084f6:	b2d9      	uxtb	r1, r3
 80084f8:	183b      	adds	r3, r7, r0
 80084fa:	79db      	ldrb	r3, [r3, #7]
 80084fc:	001a      	movs	r2, r3
 80084fe:	4b4f      	ldr	r3, [pc, #316]	@ (800863c <mix_sub_columns+0x3c4>)
 8008500:	5c9a      	ldrb	r2, [r3, r2]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	330a      	adds	r3, #10
 8008506:	404a      	eors	r2, r1
 8008508:	b2d2      	uxtb	r2, r2
 800850a:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800850c:	183b      	adds	r3, r7, r0
 800850e:	7a1b      	ldrb	r3, [r3, #8]
 8008510:	001a      	movs	r2, r3
 8008512:	4b4a      	ldr	r3, [pc, #296]	@ (800863c <mix_sub_columns+0x3c4>)
 8008514:	5c9a      	ldrb	r2, [r3, r2]
 8008516:	183b      	adds	r3, r7, r0
 8008518:	7b5b      	ldrb	r3, [r3, #13]
 800851a:	0019      	movs	r1, r3
 800851c:	4b48      	ldr	r3, [pc, #288]	@ (8008640 <mix_sub_columns+0x3c8>)
 800851e:	5c5b      	ldrb	r3, [r3, r1]
 8008520:	4053      	eors	r3, r2
 8008522:	b2da      	uxtb	r2, r3
 8008524:	183b      	adds	r3, r7, r0
 8008526:	789b      	ldrb	r3, [r3, #2]
 8008528:	0019      	movs	r1, r3
 800852a:	4b45      	ldr	r3, [pc, #276]	@ (8008640 <mix_sub_columns+0x3c8>)
 800852c:	5c5b      	ldrb	r3, [r3, r1]
 800852e:	4053      	eors	r3, r2
 8008530:	b2d9      	uxtb	r1, r3
 8008532:	183b      	adds	r3, r7, r0
 8008534:	79db      	ldrb	r3, [r3, #7]
 8008536:	001a      	movs	r2, r3
 8008538:	4b3f      	ldr	r3, [pc, #252]	@ (8008638 <mix_sub_columns+0x3c0>)
 800853a:	5c9a      	ldrb	r2, [r3, r2]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	330b      	adds	r3, #11
 8008540:	404a      	eors	r2, r1
 8008542:	b2d2      	uxtb	r2, r2
 8008544:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8008546:	183b      	adds	r3, r7, r0
 8008548:	7b1b      	ldrb	r3, [r3, #12]
 800854a:	001a      	movs	r2, r3
 800854c:	4b3a      	ldr	r3, [pc, #232]	@ (8008638 <mix_sub_columns+0x3c0>)
 800854e:	5c9a      	ldrb	r2, [r3, r2]
 8008550:	183b      	adds	r3, r7, r0
 8008552:	785b      	ldrb	r3, [r3, #1]
 8008554:	0019      	movs	r1, r3
 8008556:	4b39      	ldr	r3, [pc, #228]	@ (800863c <mix_sub_columns+0x3c4>)
 8008558:	5c5b      	ldrb	r3, [r3, r1]
 800855a:	4053      	eors	r3, r2
 800855c:	b2da      	uxtb	r2, r3
 800855e:	183b      	adds	r3, r7, r0
 8008560:	799b      	ldrb	r3, [r3, #6]
 8008562:	0019      	movs	r1, r3
 8008564:	4b36      	ldr	r3, [pc, #216]	@ (8008640 <mix_sub_columns+0x3c8>)
 8008566:	5c5b      	ldrb	r3, [r3, r1]
 8008568:	4053      	eors	r3, r2
 800856a:	b2d9      	uxtb	r1, r3
 800856c:	183b      	adds	r3, r7, r0
 800856e:	7adb      	ldrb	r3, [r3, #11]
 8008570:	001a      	movs	r2, r3
 8008572:	4b33      	ldr	r3, [pc, #204]	@ (8008640 <mix_sub_columns+0x3c8>)
 8008574:	5c9a      	ldrb	r2, [r3, r2]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	330c      	adds	r3, #12
 800857a:	404a      	eors	r2, r1
 800857c:	b2d2      	uxtb	r2, r2
 800857e:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8008580:	183b      	adds	r3, r7, r0
 8008582:	7b1b      	ldrb	r3, [r3, #12]
 8008584:	001a      	movs	r2, r3
 8008586:	4b2e      	ldr	r3, [pc, #184]	@ (8008640 <mix_sub_columns+0x3c8>)
 8008588:	5c9a      	ldrb	r2, [r3, r2]
 800858a:	183b      	adds	r3, r7, r0
 800858c:	785b      	ldrb	r3, [r3, #1]
 800858e:	0019      	movs	r1, r3
 8008590:	4b29      	ldr	r3, [pc, #164]	@ (8008638 <mix_sub_columns+0x3c0>)
 8008592:	5c5b      	ldrb	r3, [r3, r1]
 8008594:	4053      	eors	r3, r2
 8008596:	b2da      	uxtb	r2, r3
 8008598:	183b      	adds	r3, r7, r0
 800859a:	799b      	ldrb	r3, [r3, #6]
 800859c:	0019      	movs	r1, r3
 800859e:	4b27      	ldr	r3, [pc, #156]	@ (800863c <mix_sub_columns+0x3c4>)
 80085a0:	5c5b      	ldrb	r3, [r3, r1]
 80085a2:	4053      	eors	r3, r2
 80085a4:	b2d9      	uxtb	r1, r3
 80085a6:	183b      	adds	r3, r7, r0
 80085a8:	7adb      	ldrb	r3, [r3, #11]
 80085aa:	001a      	movs	r2, r3
 80085ac:	4b24      	ldr	r3, [pc, #144]	@ (8008640 <mix_sub_columns+0x3c8>)
 80085ae:	5c9a      	ldrb	r2, [r3, r2]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	330d      	adds	r3, #13
 80085b4:	404a      	eors	r2, r1
 80085b6:	b2d2      	uxtb	r2, r2
 80085b8:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80085ba:	183b      	adds	r3, r7, r0
 80085bc:	7b1b      	ldrb	r3, [r3, #12]
 80085be:	001a      	movs	r2, r3
 80085c0:	4b1f      	ldr	r3, [pc, #124]	@ (8008640 <mix_sub_columns+0x3c8>)
 80085c2:	5c9a      	ldrb	r2, [r3, r2]
 80085c4:	183b      	adds	r3, r7, r0
 80085c6:	785b      	ldrb	r3, [r3, #1]
 80085c8:	0019      	movs	r1, r3
 80085ca:	4b1d      	ldr	r3, [pc, #116]	@ (8008640 <mix_sub_columns+0x3c8>)
 80085cc:	5c5b      	ldrb	r3, [r3, r1]
 80085ce:	4053      	eors	r3, r2
 80085d0:	b2da      	uxtb	r2, r3
 80085d2:	183b      	adds	r3, r7, r0
 80085d4:	799b      	ldrb	r3, [r3, #6]
 80085d6:	0019      	movs	r1, r3
 80085d8:	4b17      	ldr	r3, [pc, #92]	@ (8008638 <mix_sub_columns+0x3c0>)
 80085da:	5c5b      	ldrb	r3, [r3, r1]
 80085dc:	4053      	eors	r3, r2
 80085de:	b2d9      	uxtb	r1, r3
 80085e0:	183b      	adds	r3, r7, r0
 80085e2:	7adb      	ldrb	r3, [r3, #11]
 80085e4:	001a      	movs	r2, r3
 80085e6:	4b15      	ldr	r3, [pc, #84]	@ (800863c <mix_sub_columns+0x3c4>)
 80085e8:	5c9a      	ldrb	r2, [r3, r2]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	330e      	adds	r3, #14
 80085ee:	404a      	eors	r2, r1
 80085f0:	b2d2      	uxtb	r2, r2
 80085f2:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80085f4:	183b      	adds	r3, r7, r0
 80085f6:	7b1b      	ldrb	r3, [r3, #12]
 80085f8:	001a      	movs	r2, r3
 80085fa:	4b10      	ldr	r3, [pc, #64]	@ (800863c <mix_sub_columns+0x3c4>)
 80085fc:	5c9a      	ldrb	r2, [r3, r2]
 80085fe:	183b      	adds	r3, r7, r0
 8008600:	785b      	ldrb	r3, [r3, #1]
 8008602:	0019      	movs	r1, r3
 8008604:	4b0e      	ldr	r3, [pc, #56]	@ (8008640 <mix_sub_columns+0x3c8>)
 8008606:	5c5b      	ldrb	r3, [r3, r1]
 8008608:	4053      	eors	r3, r2
 800860a:	b2da      	uxtb	r2, r3
 800860c:	183b      	adds	r3, r7, r0
 800860e:	799b      	ldrb	r3, [r3, #6]
 8008610:	0019      	movs	r1, r3
 8008612:	4b0b      	ldr	r3, [pc, #44]	@ (8008640 <mix_sub_columns+0x3c8>)
 8008614:	5c5b      	ldrb	r3, [r3, r1]
 8008616:	4053      	eors	r3, r2
 8008618:	b2d9      	uxtb	r1, r3
 800861a:	183b      	adds	r3, r7, r0
 800861c:	7adb      	ldrb	r3, [r3, #11]
 800861e:	001a      	movs	r2, r3
 8008620:	4b05      	ldr	r3, [pc, #20]	@ (8008638 <mix_sub_columns+0x3c0>)
 8008622:	5c9a      	ldrb	r2, [r3, r2]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	330f      	adds	r3, #15
 8008628:	404a      	eors	r2, r1
 800862a:	b2d2      	uxtb	r2, r2
 800862c:	701a      	strb	r2, [r3, #0]
  }
 800862e:	46c0      	nop			@ (mov r8, r8)
 8008630:	46bd      	mov	sp, r7
 8008632:	b007      	add	sp, #28
 8008634:	bd90      	pop	{r4, r7, pc}
 8008636:	46c0      	nop			@ (mov r8, r8)
 8008638:	0801b068 	.word	0x0801b068
 800863c:	0801b168 	.word	0x0801b168
 8008640:	0801af68 	.word	0x0801af68

08008644 <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 8008644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008646:	b087      	sub	sp, #28
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	607a      	str	r2, [r7, #4]
 800864e:	200b      	movs	r0, #11
 8008650:	183b      	adds	r3, r7, r0
 8008652:	1c0a      	adds	r2, r1, #0
 8008654:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
 8008656:	183b      	adds	r3, r7, r0
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	3b10      	subs	r3, #16
 800865c:	2210      	movs	r2, #16
 800865e:	429a      	cmp	r2, r3
 8008660:	4192      	sbcs	r2, r2
 8008662:	4252      	negs	r2, r2
 8008664:	b2d2      	uxtb	r2, r2
 8008666:	2a00      	cmp	r2, #0
 8008668:	d109      	bne.n	800867e <aes_set_key+0x3a>
 800866a:	4a92      	ldr	r2, [pc, #584]	@ (80088b4 <aes_set_key+0x270>)
 800866c:	40da      	lsrs	r2, r3
 800866e:	0013      	movs	r3, r2
 8008670:	2201      	movs	r2, #1
 8008672:	4013      	ands	r3, r2
 8008674:	1e5a      	subs	r2, r3, #1
 8008676:	4193      	sbcs	r3, r2
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d105      	bne.n	800868a <aes_set_key+0x46>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	22f0      	movs	r2, #240	@ 0xf0
 8008682:	2100      	movs	r1, #0
 8008684:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
 8008686:	23ff      	movs	r3, #255	@ 0xff
 8008688:	e10f      	b.n	80088aa <aes_set_key+0x266>
        break;
 800868a:	46c0      	nop			@ (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	240b      	movs	r4, #11
 8008690:	193b      	adds	r3, r7, r4
 8008692:	781a      	ldrb	r2, [r3, #0]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	0019      	movs	r1, r3
 8008698:	f7ff fbb4 	bl	8007e04 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800869c:	0020      	movs	r0, r4
 800869e:	183b      	adds	r3, r7, r0
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	331c      	adds	r3, #28
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	2111      	movs	r1, #17
 80086a8:	187b      	adds	r3, r7, r1
 80086aa:	0092      	lsls	r2, r2, #2
 80086ac:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
 80086ae:	187b      	adds	r3, r7, r1
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	091b      	lsrs	r3, r3, #4
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	3b01      	subs	r3, #1
 80086b8:	b2d9      	uxtb	r1, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	22f0      	movs	r2, #240	@ 0xf0
 80086be:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80086c0:	2317      	movs	r3, #23
 80086c2:	18fb      	adds	r3, r7, r3
 80086c4:	183a      	adds	r2, r7, r0
 80086c6:	7812      	ldrb	r2, [r2, #0]
 80086c8:	701a      	strb	r2, [r3, #0]
 80086ca:	2316      	movs	r3, #22
 80086cc:	18fb      	adds	r3, r7, r3
 80086ce:	2201      	movs	r2, #1
 80086d0:	701a      	strb	r2, [r3, #0]
 80086d2:	e0e0      	b.n	8008896 <aes_set_key+0x252>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 80086d4:	2017      	movs	r0, #23
 80086d6:	183b      	adds	r3, r7, r0
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	1f1a      	subs	r2, r3, #4
 80086dc:	2415      	movs	r4, #21
 80086de:	193b      	adds	r3, r7, r4
 80086e0:	6879      	ldr	r1, [r7, #4]
 80086e2:	5c8a      	ldrb	r2, [r1, r2]
 80086e4:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
 80086e6:	183b      	adds	r3, r7, r0
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	1eda      	subs	r2, r3, #3
 80086ec:	2514      	movs	r5, #20
 80086ee:	197b      	adds	r3, r7, r5
 80086f0:	6879      	ldr	r1, [r7, #4]
 80086f2:	5c8a      	ldrb	r2, [r1, r2]
 80086f4:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 80086f6:	183b      	adds	r3, r7, r0
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	1e9a      	subs	r2, r3, #2
 80086fc:	2613      	movs	r6, #19
 80086fe:	19bb      	adds	r3, r7, r6
 8008700:	6879      	ldr	r1, [r7, #4]
 8008702:	5c8a      	ldrb	r2, [r1, r2]
 8008704:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
 8008706:	183b      	adds	r3, r7, r0
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	1e5a      	subs	r2, r3, #1
 800870c:	2312      	movs	r3, #18
 800870e:	18fb      	adds	r3, r7, r3
 8008710:	6879      	ldr	r1, [r7, #4]
 8008712:	5c8a      	ldrb	r2, [r1, r2]
 8008714:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
 8008716:	183a      	adds	r2, r7, r0
 8008718:	210b      	movs	r1, #11
 800871a:	187b      	adds	r3, r7, r1
 800871c:	7812      	ldrb	r2, [r2, #0]
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	0019      	movs	r1, r3
 8008722:	0010      	movs	r0, r2
 8008724:	f7f7 fd80 	bl	8000228 <__aeabi_uidivmod>
 8008728:	000b      	movs	r3, r1
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2b00      	cmp	r3, #0
 800872e:	d13b      	bne.n	80087a8 <aes_set_key+0x164>
        {
            tt = t0;
 8008730:	2210      	movs	r2, #16
 8008732:	18bb      	adds	r3, r7, r2
 8008734:	193a      	adds	r2, r7, r4
 8008736:	7812      	ldrb	r2, [r2, #0]
 8008738:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
 800873a:	197b      	adds	r3, r7, r5
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	4a5e      	ldr	r2, [pc, #376]	@ (80088b8 <aes_set_key+0x274>)
 8008740:	5cd1      	ldrb	r1, [r2, r3]
 8008742:	193b      	adds	r3, r7, r4
 8008744:	2016      	movs	r0, #22
 8008746:	183a      	adds	r2, r7, r0
 8008748:	7812      	ldrb	r2, [r2, #0]
 800874a:	404a      	eors	r2, r1
 800874c:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
 800874e:	19bb      	adds	r3, r7, r6
 8008750:	781a      	ldrb	r2, [r3, #0]
 8008752:	197b      	adds	r3, r7, r5
 8008754:	4958      	ldr	r1, [pc, #352]	@ (80088b8 <aes_set_key+0x274>)
 8008756:	5c8a      	ldrb	r2, [r1, r2]
 8008758:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
 800875a:	2412      	movs	r4, #18
 800875c:	193b      	adds	r3, r7, r4
 800875e:	781a      	ldrb	r2, [r3, #0]
 8008760:	19bb      	adds	r3, r7, r6
 8008762:	4955      	ldr	r1, [pc, #340]	@ (80088b8 <aes_set_key+0x274>)
 8008764:	5c8a      	ldrb	r2, [r1, r2]
 8008766:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
 8008768:	2210      	movs	r2, #16
 800876a:	18bb      	adds	r3, r7, r2
 800876c:	781a      	ldrb	r2, [r3, #0]
 800876e:	193b      	adds	r3, r7, r4
 8008770:	4951      	ldr	r1, [pc, #324]	@ (80088b8 <aes_set_key+0x274>)
 8008772:	5c8a      	ldrb	r2, [r1, r2]
 8008774:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
 8008776:	183b      	adds	r3, r7, r0
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	005b      	lsls	r3, r3, #1
 800877c:	b25a      	sxtb	r2, r3
 800877e:	0004      	movs	r4, r0
 8008780:	183b      	adds	r3, r7, r0
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	09db      	lsrs	r3, r3, #7
 8008786:	b2db      	uxtb	r3, r3
 8008788:	1c19      	adds	r1, r3, #0
 800878a:	1c0b      	adds	r3, r1, #0
 800878c:	18db      	adds	r3, r3, r3
 800878e:	185b      	adds	r3, r3, r1
 8008790:	1c19      	adds	r1, r3, #0
 8008792:	00c8      	lsls	r0, r1, #3
 8008794:	1c19      	adds	r1, r3, #0
 8008796:	1c03      	adds	r3, r0, #0
 8008798:	18cb      	adds	r3, r1, r3
 800879a:	b2db      	uxtb	r3, r3
 800879c:	b25b      	sxtb	r3, r3
 800879e:	4053      	eors	r3, r2
 80087a0:	b25a      	sxtb	r2, r3
 80087a2:	193b      	adds	r3, r7, r4
 80087a4:	701a      	strb	r2, [r3, #0]
 80087a6:	e02d      	b.n	8008804 <aes_set_key+0x1c0>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 80087a8:	210b      	movs	r1, #11
 80087aa:	187b      	adds	r3, r7, r1
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	2b18      	cmp	r3, #24
 80087b0:	d928      	bls.n	8008804 <aes_set_key+0x1c0>
 80087b2:	2317      	movs	r3, #23
 80087b4:	18fa      	adds	r2, r7, r3
 80087b6:	187b      	adds	r3, r7, r1
 80087b8:	7812      	ldrb	r2, [r2, #0]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	0019      	movs	r1, r3
 80087be:	0010      	movs	r0, r2
 80087c0:	f7f7 fd32 	bl	8000228 <__aeabi_uidivmod>
 80087c4:	000b      	movs	r3, r1
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	2b10      	cmp	r3, #16
 80087ca:	d11b      	bne.n	8008804 <aes_set_key+0x1c0>
        {
            t0 = s_box(t0);
 80087cc:	2115      	movs	r1, #21
 80087ce:	187b      	adds	r3, r7, r1
 80087d0:	781a      	ldrb	r2, [r3, #0]
 80087d2:	187b      	adds	r3, r7, r1
 80087d4:	4938      	ldr	r1, [pc, #224]	@ (80088b8 <aes_set_key+0x274>)
 80087d6:	5c8a      	ldrb	r2, [r1, r2]
 80087d8:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
 80087da:	2114      	movs	r1, #20
 80087dc:	187b      	adds	r3, r7, r1
 80087de:	781a      	ldrb	r2, [r3, #0]
 80087e0:	187b      	adds	r3, r7, r1
 80087e2:	4935      	ldr	r1, [pc, #212]	@ (80088b8 <aes_set_key+0x274>)
 80087e4:	5c8a      	ldrb	r2, [r1, r2]
 80087e6:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
 80087e8:	2113      	movs	r1, #19
 80087ea:	187b      	adds	r3, r7, r1
 80087ec:	781a      	ldrb	r2, [r3, #0]
 80087ee:	187b      	adds	r3, r7, r1
 80087f0:	4931      	ldr	r1, [pc, #196]	@ (80088b8 <aes_set_key+0x274>)
 80087f2:	5c8a      	ldrb	r2, [r1, r2]
 80087f4:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
 80087f6:	2112      	movs	r1, #18
 80087f8:	187b      	adds	r3, r7, r1
 80087fa:	781a      	ldrb	r2, [r3, #0]
 80087fc:	187b      	adds	r3, r7, r1
 80087fe:	492e      	ldr	r1, [pc, #184]	@ (80088b8 <aes_set_key+0x274>)
 8008800:	5c8a      	ldrb	r2, [r1, r2]
 8008802:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
 8008804:	2410      	movs	r4, #16
 8008806:	193b      	adds	r3, r7, r4
 8008808:	2017      	movs	r0, #23
 800880a:	1839      	adds	r1, r7, r0
 800880c:	220b      	movs	r2, #11
 800880e:	18ba      	adds	r2, r7, r2
 8008810:	7809      	ldrb	r1, [r1, #0]
 8008812:	7812      	ldrb	r2, [r2, #0]
 8008814:	1a8a      	subs	r2, r1, r2
 8008816:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8008818:	193b      	adds	r3, r7, r4
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	5cd1      	ldrb	r1, [r2, r3]
 8008820:	183b      	adds	r3, r7, r0
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	2215      	movs	r2, #21
 8008826:	18ba      	adds	r2, r7, r2
 8008828:	7812      	ldrb	r2, [r2, #0]
 800882a:	404a      	eors	r2, r1
 800882c:	b2d1      	uxtb	r1, r2
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8008832:	193b      	adds	r3, r7, r4
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	3301      	adds	r3, #1
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	5cd1      	ldrb	r1, [r2, r3]
 800883c:	183b      	adds	r3, r7, r0
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	3301      	adds	r3, #1
 8008842:	2214      	movs	r2, #20
 8008844:	18ba      	adds	r2, r7, r2
 8008846:	7812      	ldrb	r2, [r2, #0]
 8008848:	404a      	eors	r2, r1
 800884a:	b2d1      	uxtb	r1, r2
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8008850:	193b      	adds	r3, r7, r4
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	3302      	adds	r3, #2
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	5cd1      	ldrb	r1, [r2, r3]
 800885a:	183b      	adds	r3, r7, r0
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	3302      	adds	r3, #2
 8008860:	2213      	movs	r2, #19
 8008862:	18ba      	adds	r2, r7, r2
 8008864:	7812      	ldrb	r2, [r2, #0]
 8008866:	404a      	eors	r2, r1
 8008868:	b2d1      	uxtb	r1, r2
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800886e:	193b      	adds	r3, r7, r4
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	3303      	adds	r3, #3
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	5cd1      	ldrb	r1, [r2, r3]
 8008878:	183b      	adds	r3, r7, r0
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	3303      	adds	r3, #3
 800887e:	2212      	movs	r2, #18
 8008880:	18ba      	adds	r2, r7, r2
 8008882:	7812      	ldrb	r2, [r2, #0]
 8008884:	404a      	eors	r2, r1
 8008886:	b2d1      	uxtb	r1, r2
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800888c:	183b      	adds	r3, r7, r0
 800888e:	183a      	adds	r2, r7, r0
 8008890:	7812      	ldrb	r2, [r2, #0]
 8008892:	3204      	adds	r2, #4
 8008894:	701a      	strb	r2, [r3, #0]
 8008896:	2317      	movs	r3, #23
 8008898:	18fa      	adds	r2, r7, r3
 800889a:	2311      	movs	r3, #17
 800889c:	18fb      	adds	r3, r7, r3
 800889e:	7812      	ldrb	r2, [r2, #0]
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d200      	bcs.n	80088a8 <aes_set_key+0x264>
 80088a6:	e715      	b.n	80086d4 <aes_set_key+0x90>
    }
    return 0;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	0018      	movs	r0, r3
 80088ac:	46bd      	mov	sp, r7
 80088ae:	b007      	add	sp, #28
 80088b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088b2:	46c0      	nop			@ (mov r8, r8)
 80088b4:	00010101 	.word	0x00010101
 80088b8:	0801af68 	.word	0x0801af68

080088bc <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 80088bc:	b5b0      	push	{r4, r5, r7, lr}
 80088be:	b08a      	sub	sp, #40	@ 0x28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	22f0      	movs	r2, #240	@ 0xf0
 80088cc:	5c9b      	ldrb	r3, [r3, r2]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d039      	beq.n	8008946 <aes_encrypt+0x8a>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	68f9      	ldr	r1, [r7, #12]
 80088d6:	2314      	movs	r3, #20
 80088d8:	18fb      	adds	r3, r7, r3
 80088da:	0018      	movs	r0, r3
 80088dc:	f7ff fb64 	bl	8007fa8 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 80088e0:	2327      	movs	r3, #39	@ 0x27
 80088e2:	18fb      	adds	r3, r7, r3
 80088e4:	2201      	movs	r2, #1
 80088e6:	701a      	strb	r2, [r3, #0]
 80088e8:	e014      	b.n	8008914 <aes_encrypt+0x58>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 80088ea:	2514      	movs	r5, #20
 80088ec:	197b      	adds	r3, r7, r5
 80088ee:	0018      	movs	r0, r3
 80088f0:	f7ff fcc2 	bl	8008278 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2427      	movs	r4, #39	@ 0x27
 80088f8:	193a      	adds	r2, r7, r4
 80088fa:	7812      	ldrb	r2, [r2, #0]
 80088fc:	0112      	lsls	r2, r2, #4
 80088fe:	189a      	adds	r2, r3, r2
 8008900:	197b      	adds	r3, r7, r5
 8008902:	0011      	movs	r1, r2
 8008904:	0018      	movs	r0, r3
 8008906:	f7ff fc06 	bl	8008116 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800890a:	193b      	adds	r3, r7, r4
 800890c:	193a      	adds	r2, r7, r4
 800890e:	7812      	ldrb	r2, [r2, #0]
 8008910:	3201      	adds	r2, #1
 8008912:	701a      	strb	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	22f0      	movs	r2, #240	@ 0xf0
 8008918:	5c9b      	ldrb	r3, [r3, r2]
 800891a:	2427      	movs	r4, #39	@ 0x27
 800891c:	193a      	adds	r2, r7, r4
 800891e:	7812      	ldrb	r2, [r2, #0]
 8008920:	429a      	cmp	r2, r3
 8008922:	d3e2      	bcc.n	80088ea <aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8008924:	2514      	movs	r5, #20
 8008926:	197b      	adds	r3, r7, r5
 8008928:	0018      	movs	r0, r3
 800892a:	f7ff fc03 	bl	8008134 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	193a      	adds	r2, r7, r4
 8008932:	7812      	ldrb	r2, [r2, #0]
 8008934:	0112      	lsls	r2, r2, #4
 8008936:	189a      	adds	r2, r3, r2
 8008938:	1979      	adds	r1, r7, r5
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	0018      	movs	r0, r3
 800893e:	f7ff fb33 	bl	8007fa8 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8008942:	2300      	movs	r3, #0
 8008944:	e000      	b.n	8008948 <aes_encrypt+0x8c>
        return ( uint8_t )-1;
 8008946:	23ff      	movs	r3, #255	@ 0xff
}
 8008948:	0018      	movs	r0, r3
 800894a:	46bd      	mov	sp, r7
 800894c:	b00a      	add	sp, #40	@ 0x28
 800894e:	bdb0      	pop	{r4, r5, r7, pc}

08008950 <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
            memset1(ctx->X, 0, sizeof ctx->X);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	33f1      	adds	r3, #241	@ 0xf1
 800895c:	2210      	movs	r2, #16
 800895e:	2100      	movs	r1, #0
 8008960:	0018      	movs	r0, r3
 8008962:	f00c fed7 	bl	8015714 <memset1>
            ctx->M_n = 0;
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	238a      	movs	r3, #138	@ 0x8a
 800896a:	005b      	lsls	r3, r3, #1
 800896c:	2100      	movs	r1, #0
 800896e:	50d1      	str	r1, [r2, r3]
        memset1(ctx->rijndael.ksch, '\0', 240);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	22f0      	movs	r2, #240	@ 0xf0
 8008974:	2100      	movs	r1, #0
 8008976:	0018      	movs	r0, r3
 8008978:	f00c fecc 	bl	8015714 <memset1>
}
 800897c:	46c0      	nop			@ (mov r8, r8)
 800897e:	46bd      	mov	sp, r7
 8008980:	b002      	add	sp, #8
 8008982:	bd80      	pop	{r7, pc}

08008984 <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	2110      	movs	r1, #16
 8008994:	0018      	movs	r0, r3
 8008996:	f7ff fe55 	bl	8008644 <aes_set_key>
}
 800899a:	46c0      	nop			@ (mov r8, r8)
 800899c:	46bd      	mov	sp, r7
 800899e:	b002      	add	sp, #8
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <AES_CMAC_Update>:
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
 80089a2:	b590      	push	{r4, r7, lr}
 80089a4:	b08d      	sub	sp, #52	@ 0x34
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	60f8      	str	r0, [r7, #12]
 80089aa:	60b9      	str	r1, [r7, #8]
 80089ac:	607a      	str	r2, [r7, #4]
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	238a      	movs	r3, #138	@ 0x8a
 80089b2:	005b      	lsls	r3, r3, #1
 80089b4:	58d3      	ldr	r3, [r2, r3]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d100      	bne.n	80089bc <AES_CMAC_Update+0x1a>
 80089ba:	e097      	b.n	8008aec <AES_CMAC_Update+0x14a>
                  mlen = MIN(16 - ctx->M_n, len);
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	238a      	movs	r3, #138	@ 0x8a
 80089c0:	005b      	lsls	r3, r3, #1
 80089c2:	58d3      	ldr	r3, [r2, r3]
 80089c4:	2210      	movs	r2, #16
 80089c6:	1ad2      	subs	r2, r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d900      	bls.n	80089d0 <AES_CMAC_Update+0x2e>
 80089ce:	0013      	movs	r3, r2
 80089d0:	627b      	str	r3, [r7, #36]	@ 0x24
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	1c9a      	adds	r2, r3, #2
 80089d6:	32ff      	adds	r2, #255	@ 0xff
 80089d8:	68f9      	ldr	r1, [r7, #12]
 80089da:	238a      	movs	r3, #138	@ 0x8a
 80089dc:	005b      	lsls	r3, r3, #1
 80089de:	58cb      	ldr	r3, [r1, r3]
 80089e0:	18d3      	adds	r3, r2, r3
 80089e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089e4:	b292      	uxth	r2, r2
 80089e6:	68b9      	ldr	r1, [r7, #8]
 80089e8:	0018      	movs	r0, r3
 80089ea:	f00c fe55 	bl	8015698 <memcpy1>
                    ctx->M_n += mlen;
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	238a      	movs	r3, #138	@ 0x8a
 80089f2:	005b      	lsls	r3, r3, #1
 80089f4:	58d2      	ldr	r2, [r2, r3]
 80089f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f8:	18d1      	adds	r1, r2, r3
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	238a      	movs	r3, #138	@ 0x8a
 80089fe:	005b      	lsls	r3, r3, #1
 8008a00:	50d1      	str	r1, [r2, r3]
                    if (ctx->M_n < 16 || len == mlen)
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	238a      	movs	r3, #138	@ 0x8a
 8008a06:	005b      	lsls	r3, r3, #1
 8008a08:	58d3      	ldr	r3, [r2, r3]
 8008a0a:	2b0f      	cmp	r3, #15
 8008a0c:	d800      	bhi.n	8008a10 <AES_CMAC_Update+0x6e>
 8008a0e:	e07f      	b.n	8008b10 <AES_CMAC_Update+0x16e>
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d100      	bne.n	8008a1a <AES_CMAC_Update+0x78>
 8008a18:	e07a      	b.n	8008b10 <AES_CMAC_Update+0x16e>
                            return;
                   XOR(ctx->M_last, ctx->X);
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a1e:	e018      	b.n	8008a52 <AES_CMAC_Update+0xb0>
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	21f1      	movs	r1, #241	@ 0xf1
 8008a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a26:	18d3      	adds	r3, r2, r3
 8008a28:	185b      	adds	r3, r3, r1
 8008a2a:	781a      	ldrb	r2, [r3, #0]
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	2302      	movs	r3, #2
 8008a30:	33ff      	adds	r3, #255	@ 0xff
 8008a32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a34:	1841      	adds	r1, r0, r1
 8008a36:	18cb      	adds	r3, r1, r3
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	4053      	eors	r3, r2
 8008a3c:	b2d8      	uxtb	r0, r3
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	21f1      	movs	r1, #241	@ 0xf1
 8008a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a44:	18d3      	adds	r3, r2, r3
 8008a46:	185b      	adds	r3, r3, r1
 8008a48:	1c02      	adds	r2, r0, #0
 8008a4a:	701a      	strb	r2, [r3, #0]
 8008a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a4e:	3301      	adds	r3, #1
 8008a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a54:	2b0f      	cmp	r3, #15
 8008a56:	dde3      	ble.n	8008a20 <AES_CMAC_Update+0x7e>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	33f1      	adds	r3, #241	@ 0xf1
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	33f1      	adds	r3, #241	@ 0xf1
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	0019      	movs	r1, r3
 8008a66:	f7ff ff29 	bl	80088bc <aes_encrypt>
                    data += mlen;
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6e:	18d3      	adds	r3, r2, r3
 8008a70:	60bb      	str	r3, [r7, #8]
                    len -= mlen;
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	607b      	str	r3, [r7, #4]
            }
            while (len > 16) {      /* not last block */
 8008a7a:	e037      	b.n	8008aec <AES_CMAC_Update+0x14a>

                    XOR(data, ctx->X);
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a80:	e015      	b.n	8008aae <AES_CMAC_Update+0x10c>
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	21f1      	movs	r1, #241	@ 0xf1
 8008a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a88:	18d3      	adds	r3, r2, r3
 8008a8a:	185b      	adds	r3, r3, r1
 8008a8c:	781a      	ldrb	r2, [r3, #0]
 8008a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a90:	68b9      	ldr	r1, [r7, #8]
 8008a92:	18cb      	adds	r3, r1, r3
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	4053      	eors	r3, r2
 8008a98:	b2d8      	uxtb	r0, r3
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	21f1      	movs	r1, #241	@ 0xf1
 8008a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa0:	18d3      	adds	r3, r2, r3
 8008aa2:	185b      	adds	r3, r3, r1
 8008aa4:	1c02      	adds	r2, r0, #0
 8008aa6:	701a      	strb	r2, [r3, #0]
 8008aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aaa:	3301      	adds	r3, #1
 8008aac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab0:	2b0f      	cmp	r3, #15
 8008ab2:	dde6      	ble.n	8008a82 <AES_CMAC_Update+0xe0>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	33f1      	adds	r3, #241	@ 0xf1
 8008ab8:	0019      	movs	r1, r3
 8008aba:	2414      	movs	r4, #20
 8008abc:	193b      	adds	r3, r7, r4
 8008abe:	2210      	movs	r2, #16
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	f00c fde9 	bl	8015698 <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	1939      	adds	r1, r7, r4
 8008aca:	193b      	adds	r3, r7, r4
 8008acc:	0018      	movs	r0, r3
 8008ace:	f7ff fef5 	bl	80088bc <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	33f1      	adds	r3, #241	@ 0xf1
 8008ad6:	1939      	adds	r1, r7, r4
 8008ad8:	2210      	movs	r2, #16
 8008ada:	0018      	movs	r0, r3
 8008adc:	f00c fddc 	bl	8015698 <memcpy1>

                    data += 16;
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	3310      	adds	r3, #16
 8008ae4:	60bb      	str	r3, [r7, #8]
                    len -= 16;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	3b10      	subs	r3, #16
 8008aea:	607b      	str	r3, [r7, #4]
            while (len > 16) {      /* not last block */
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b10      	cmp	r3, #16
 8008af0:	d8c4      	bhi.n	8008a7c <AES_CMAC_Update+0xda>
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	3302      	adds	r3, #2
 8008af6:	33ff      	adds	r3, #255	@ 0xff
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	b292      	uxth	r2, r2
 8008afc:	68b9      	ldr	r1, [r7, #8]
 8008afe:	0018      	movs	r0, r3
 8008b00:	f00c fdca 	bl	8015698 <memcpy1>
            ctx->M_n = len;
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	238a      	movs	r3, #138	@ 0x8a
 8008b08:	005b      	lsls	r3, r3, #1
 8008b0a:	6879      	ldr	r1, [r7, #4]
 8008b0c:	50d1      	str	r1, [r2, r3]
 8008b0e:	e000      	b.n	8008b12 <AES_CMAC_Update+0x170>
                            return;
 8008b10:	46c0      	nop			@ (mov r8, r8)
}
 8008b12:	46bd      	mov	sp, r7
 8008b14:	b00d      	add	sp, #52	@ 0x34
 8008b16:	bd90      	pop	{r4, r7, pc}

08008b18 <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 8008b18:	b590      	push	{r4, r7, lr}
 8008b1a:	b093      	sub	sp, #76	@ 0x4c
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 8008b22:	241c      	movs	r4, #28
 8008b24:	193b      	adds	r3, r7, r4
 8008b26:	2210      	movs	r2, #16
 8008b28:	2100      	movs	r1, #0
 8008b2a:	0018      	movs	r0, r3
 8008b2c:	f00c fdf2 	bl	8015714 <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	1939      	adds	r1, r7, r4
 8008b34:	193b      	adds	r3, r7, r4
 8008b36:	0018      	movs	r0, r3
 8008b38:	f7ff fec0 	bl	80088bc <aes_encrypt>

            if (K[0] & 0x80) {
 8008b3c:	193b      	adds	r3, r7, r4
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	b25b      	sxtb	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	da2e      	bge.n	8008ba4 <AES_CMAC_Final+0x8c>
                    LSHIFT(K, K);
 8008b46:	2300      	movs	r3, #0
 8008b48:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b4a:	e018      	b.n	8008b7e <AES_CMAC_Final+0x66>
 8008b4c:	201c      	movs	r0, #28
 8008b4e:	183a      	adds	r2, r7, r0
 8008b50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b52:	18d3      	adds	r3, r2, r3
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	005b      	lsls	r3, r3, #1
 8008b58:	b25a      	sxtb	r2, r3
 8008b5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	1839      	adds	r1, r7, r0
 8008b60:	5ccb      	ldrb	r3, [r1, r3]
 8008b62:	09db      	lsrs	r3, r3, #7
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	b25b      	sxtb	r3, r3
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	b25b      	sxtb	r3, r3
 8008b6c:	b2d9      	uxtb	r1, r3
 8008b6e:	183a      	adds	r2, r7, r0
 8008b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b72:	18d3      	adds	r3, r2, r3
 8008b74:	1c0a      	adds	r2, r1, #0
 8008b76:	701a      	strb	r2, [r3, #0]
 8008b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b80:	2b0e      	cmp	r3, #14
 8008b82:	dde3      	ble.n	8008b4c <AES_CMAC_Final+0x34>
 8008b84:	211c      	movs	r1, #28
 8008b86:	187b      	adds	r3, r7, r1
 8008b88:	7bdb      	ldrb	r3, [r3, #15]
 8008b8a:	18db      	adds	r3, r3, r3
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	187b      	adds	r3, r7, r1
 8008b90:	73da      	strb	r2, [r3, #15]
                   K[15] ^= 0x87;
 8008b92:	187b      	adds	r3, r7, r1
 8008b94:	7bdb      	ldrb	r3, [r3, #15]
 8008b96:	2279      	movs	r2, #121	@ 0x79
 8008b98:	4252      	negs	r2, r2
 8008b9a:	4053      	eors	r3, r2
 8008b9c:	b2da      	uxtb	r2, r3
 8008b9e:	187b      	adds	r3, r7, r1
 8008ba0:	73da      	strb	r2, [r3, #15]
 8008ba2:	e025      	b.n	8008bf0 <AES_CMAC_Final+0xd8>
            } else
                    LSHIFT(K, K);
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ba8:	e018      	b.n	8008bdc <AES_CMAC_Final+0xc4>
 8008baa:	201c      	movs	r0, #28
 8008bac:	183a      	adds	r2, r7, r0
 8008bae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bb0:	18d3      	adds	r3, r2, r3
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	b25a      	sxtb	r2, r3
 8008bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bba:	3301      	adds	r3, #1
 8008bbc:	1839      	adds	r1, r7, r0
 8008bbe:	5ccb      	ldrb	r3, [r1, r3]
 8008bc0:	09db      	lsrs	r3, r3, #7
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	b25b      	sxtb	r3, r3
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	b25b      	sxtb	r3, r3
 8008bca:	b2d9      	uxtb	r1, r3
 8008bcc:	183a      	adds	r2, r7, r0
 8008bce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bd0:	18d3      	adds	r3, r2, r3
 8008bd2:	1c0a      	adds	r2, r1, #0
 8008bd4:	701a      	strb	r2, [r3, #0]
 8008bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bd8:	3301      	adds	r3, #1
 8008bda:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bde:	2b0e      	cmp	r3, #14
 8008be0:	dde3      	ble.n	8008baa <AES_CMAC_Final+0x92>
 8008be2:	211c      	movs	r1, #28
 8008be4:	187b      	adds	r3, r7, r1
 8008be6:	7bdb      	ldrb	r3, [r3, #15]
 8008be8:	18db      	adds	r3, r3, r3
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	187b      	adds	r3, r7, r1
 8008bee:	73da      	strb	r2, [r3, #15]


            if (ctx->M_n == 16) {
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	238a      	movs	r3, #138	@ 0x8a
 8008bf4:	005b      	lsls	r3, r3, #1
 8008bf6:	58d3      	ldr	r3, [r2, r3]
 8008bf8:	2b10      	cmp	r3, #16
 8008bfa:	d11f      	bne.n	8008c3c <AES_CMAC_Final+0x124>
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c00:	e018      	b.n	8008c34 <AES_CMAC_Final+0x11c>
 8008c02:	6839      	ldr	r1, [r7, #0]
 8008c04:	2302      	movs	r3, #2
 8008c06:	33ff      	adds	r3, #255	@ 0xff
 8008c08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008c0a:	188a      	adds	r2, r1, r2
 8008c0c:	18d3      	adds	r3, r2, r3
 8008c0e:	781a      	ldrb	r2, [r3, #0]
 8008c10:	231c      	movs	r3, #28
 8008c12:	18f9      	adds	r1, r7, r3
 8008c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c16:	18cb      	adds	r3, r1, r3
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	4053      	eors	r3, r2
 8008c1c:	b2d8      	uxtb	r0, r3
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	2302      	movs	r3, #2
 8008c22:	33ff      	adds	r3, #255	@ 0xff
 8008c24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008c26:	188a      	adds	r2, r1, r2
 8008c28:	18d3      	adds	r3, r2, r3
 8008c2a:	1c02      	adds	r2, r0, #0
 8008c2c:	701a      	strb	r2, [r3, #0]
 8008c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c30:	3301      	adds	r3, #1
 8008c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c36:	2b0f      	cmp	r3, #15
 8008c38:	dde3      	ble.n	8008c02 <AES_CMAC_Final+0xea>
 8008c3a:	e09f      	b.n	8008d7c <AES_CMAC_Final+0x264>

           } else {
                   /* generate subkey K2 */
                  if (K[0] & 0x80) {
 8008c3c:	231c      	movs	r3, #28
 8008c3e:	18fb      	adds	r3, r7, r3
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	b25b      	sxtb	r3, r3
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	da2e      	bge.n	8008ca6 <AES_CMAC_Final+0x18e>
                          LSHIFT(K, K);
 8008c48:	2300      	movs	r3, #0
 8008c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c4c:	e018      	b.n	8008c80 <AES_CMAC_Final+0x168>
 8008c4e:	201c      	movs	r0, #28
 8008c50:	183a      	adds	r2, r7, r0
 8008c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c54:	18d3      	adds	r3, r2, r3
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	005b      	lsls	r3, r3, #1
 8008c5a:	b25a      	sxtb	r2, r3
 8008c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5e:	3301      	adds	r3, #1
 8008c60:	1839      	adds	r1, r7, r0
 8008c62:	5ccb      	ldrb	r3, [r1, r3]
 8008c64:	09db      	lsrs	r3, r3, #7
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	b25b      	sxtb	r3, r3
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	b25b      	sxtb	r3, r3
 8008c6e:	b2d9      	uxtb	r1, r3
 8008c70:	183a      	adds	r2, r7, r0
 8008c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c74:	18d3      	adds	r3, r2, r3
 8008c76:	1c0a      	adds	r2, r1, #0
 8008c78:	701a      	strb	r2, [r3, #0]
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c82:	2b0e      	cmp	r3, #14
 8008c84:	dde3      	ble.n	8008c4e <AES_CMAC_Final+0x136>
 8008c86:	211c      	movs	r1, #28
 8008c88:	187b      	adds	r3, r7, r1
 8008c8a:	7bdb      	ldrb	r3, [r3, #15]
 8008c8c:	18db      	adds	r3, r3, r3
 8008c8e:	b2da      	uxtb	r2, r3
 8008c90:	187b      	adds	r3, r7, r1
 8008c92:	73da      	strb	r2, [r3, #15]
                          K[15] ^= 0x87;
 8008c94:	187b      	adds	r3, r7, r1
 8008c96:	7bdb      	ldrb	r3, [r3, #15]
 8008c98:	2279      	movs	r2, #121	@ 0x79
 8008c9a:	4252      	negs	r2, r2
 8008c9c:	4053      	eors	r3, r2
 8008c9e:	b2da      	uxtb	r2, r3
 8008ca0:	187b      	adds	r3, r7, r1
 8008ca2:	73da      	strb	r2, [r3, #15]
 8008ca4:	e025      	b.n	8008cf2 <AES_CMAC_Final+0x1da>
                  } else
                           LSHIFT(K, K);
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008caa:	e018      	b.n	8008cde <AES_CMAC_Final+0x1c6>
 8008cac:	201c      	movs	r0, #28
 8008cae:	183a      	adds	r2, r7, r0
 8008cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cb2:	18d3      	adds	r3, r2, r3
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	005b      	lsls	r3, r3, #1
 8008cb8:	b25a      	sxtb	r2, r3
 8008cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	1839      	adds	r1, r7, r0
 8008cc0:	5ccb      	ldrb	r3, [r1, r3]
 8008cc2:	09db      	lsrs	r3, r3, #7
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	b25b      	sxtb	r3, r3
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	b25b      	sxtb	r3, r3
 8008ccc:	b2d9      	uxtb	r1, r3
 8008cce:	183a      	adds	r2, r7, r0
 8008cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cd2:	18d3      	adds	r3, r2, r3
 8008cd4:	1c0a      	adds	r2, r1, #0
 8008cd6:	701a      	strb	r2, [r3, #0]
 8008cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cda:	3301      	adds	r3, #1
 8008cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ce0:	2b0e      	cmp	r3, #14
 8008ce2:	dde3      	ble.n	8008cac <AES_CMAC_Final+0x194>
 8008ce4:	211c      	movs	r1, #28
 8008ce6:	187b      	adds	r3, r7, r1
 8008ce8:	7bdb      	ldrb	r3, [r3, #15]
 8008cea:	18db      	adds	r3, r3, r3
 8008cec:	b2da      	uxtb	r2, r3
 8008cee:	187b      	adds	r3, r7, r1
 8008cf0:	73da      	strb	r2, [r3, #15]

                   /* padding(M_last) */
                   ctx->M_last[ctx->M_n] = 0x80;
 8008cf2:	683a      	ldr	r2, [r7, #0]
 8008cf4:	238a      	movs	r3, #138	@ 0x8a
 8008cf6:	005b      	lsls	r3, r3, #1
 8008cf8:	58d2      	ldr	r2, [r2, r3]
 8008cfa:	6839      	ldr	r1, [r7, #0]
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	33ff      	adds	r3, #255	@ 0xff
 8008d00:	188a      	adds	r2, r1, r2
 8008d02:	18d3      	adds	r3, r2, r3
 8008d04:	2280      	movs	r2, #128	@ 0x80
 8008d06:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
 8008d08:	e00a      	b.n	8008d20 <AES_CMAC_Final+0x208>
                         ctx->M_last[ctx->M_n] = 0;
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	238a      	movs	r3, #138	@ 0x8a
 8008d0e:	005b      	lsls	r3, r3, #1
 8008d10:	58d2      	ldr	r2, [r2, r3]
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	2302      	movs	r3, #2
 8008d16:	33ff      	adds	r3, #255	@ 0xff
 8008d18:	188a      	adds	r2, r1, r2
 8008d1a:	18d3      	adds	r3, r2, r3
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
 8008d20:	683a      	ldr	r2, [r7, #0]
 8008d22:	238a      	movs	r3, #138	@ 0x8a
 8008d24:	005b      	lsls	r3, r3, #1
 8008d26:	58d3      	ldr	r3, [r2, r3]
 8008d28:	1c59      	adds	r1, r3, #1
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	238a      	movs	r3, #138	@ 0x8a
 8008d2e:	005b      	lsls	r3, r3, #1
 8008d30:	50d1      	str	r1, [r2, r3]
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	238a      	movs	r3, #138	@ 0x8a
 8008d36:	005b      	lsls	r3, r3, #1
 8008d38:	58d3      	ldr	r3, [r2, r3]
 8008d3a:	2b0f      	cmp	r3, #15
 8008d3c:	d9e5      	bls.n	8008d0a <AES_CMAC_Final+0x1f2>
   
                  XOR(K, ctx->M_last);
 8008d3e:	2300      	movs	r3, #0
 8008d40:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d42:	e018      	b.n	8008d76 <AES_CMAC_Final+0x25e>
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	2302      	movs	r3, #2
 8008d48:	33ff      	adds	r3, #255	@ 0xff
 8008d4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d4c:	188a      	adds	r2, r1, r2
 8008d4e:	18d3      	adds	r3, r2, r3
 8008d50:	781a      	ldrb	r2, [r3, #0]
 8008d52:	231c      	movs	r3, #28
 8008d54:	18f9      	adds	r1, r7, r3
 8008d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d58:	18cb      	adds	r3, r1, r3
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	4053      	eors	r3, r2
 8008d5e:	b2d8      	uxtb	r0, r3
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	2302      	movs	r3, #2
 8008d64:	33ff      	adds	r3, #255	@ 0xff
 8008d66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d68:	188a      	adds	r2, r1, r2
 8008d6a:	18d3      	adds	r3, r2, r3
 8008d6c:	1c02      	adds	r2, r0, #0
 8008d6e:	701a      	strb	r2, [r3, #0]
 8008d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d72:	3301      	adds	r3, #1
 8008d74:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d78:	2b0f      	cmp	r3, #15
 8008d7a:	dde3      	ble.n	8008d44 <AES_CMAC_Final+0x22c>


           }
           XOR(ctx->M_last, ctx->X);
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d80:	e018      	b.n	8008db4 <AES_CMAC_Final+0x29c>
 8008d82:	683a      	ldr	r2, [r7, #0]
 8008d84:	21f1      	movs	r1, #241	@ 0xf1
 8008d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d88:	18d3      	adds	r3, r2, r3
 8008d8a:	185b      	adds	r3, r3, r1
 8008d8c:	781a      	ldrb	r2, [r3, #0]
 8008d8e:	6838      	ldr	r0, [r7, #0]
 8008d90:	2302      	movs	r3, #2
 8008d92:	33ff      	adds	r3, #255	@ 0xff
 8008d94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d96:	1841      	adds	r1, r0, r1
 8008d98:	18cb      	adds	r3, r1, r3
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	4053      	eors	r3, r2
 8008d9e:	b2d8      	uxtb	r0, r3
 8008da0:	683a      	ldr	r2, [r7, #0]
 8008da2:	21f1      	movs	r1, #241	@ 0xf1
 8008da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da6:	18d3      	adds	r3, r2, r3
 8008da8:	185b      	adds	r3, r3, r1
 8008daa:	1c02      	adds	r2, r0, #0
 8008dac:	701a      	strb	r2, [r3, #0]
 8008dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db0:	3301      	adds	r3, #1
 8008db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db6:	2b0f      	cmp	r3, #15
 8008db8:	dde3      	ble.n	8008d82 <AES_CMAC_Final+0x26a>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	33f1      	adds	r3, #241	@ 0xf1
 8008dbe:	0019      	movs	r1, r3
 8008dc0:	240c      	movs	r4, #12
 8008dc2:	193b      	adds	r3, r7, r4
 8008dc4:	2210      	movs	r2, #16
 8008dc6:	0018      	movs	r0, r3
 8008dc8:	f00c fc66 	bl	8015698 <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 8008dcc:	683a      	ldr	r2, [r7, #0]
 8008dce:	6879      	ldr	r1, [r7, #4]
 8008dd0:	193b      	adds	r3, r7, r4
 8008dd2:	0018      	movs	r0, r3
 8008dd4:	f7ff fd72 	bl	80088bc <aes_encrypt>
           memset1(K, 0, sizeof K);
 8008dd8:	231c      	movs	r3, #28
 8008dda:	18fb      	adds	r3, r7, r3
 8008ddc:	2210      	movs	r2, #16
 8008dde:	2100      	movs	r1, #0
 8008de0:	0018      	movs	r0, r3
 8008de2:	f00c fc97 	bl	8015714 <memset1>

}
 8008de6:	46c0      	nop			@ (mov r8, r8)
 8008de8:	46bd      	mov	sp, r7
 8008dea:	b013      	add	sp, #76	@ 0x4c
 8008dec:	bd90      	pop	{r4, r7, pc}
	...

08008df0 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 8008df0:	b590      	push	{r4, r7, lr}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	0002      	movs	r2, r0
 8008df8:	6039      	str	r1, [r7, #0]
 8008dfa:	1dfb      	adds	r3, r7, #7
 8008dfc:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8008dfe:	230f      	movs	r3, #15
 8008e00:	18fb      	adds	r3, r7, r3
 8008e02:	2200      	movs	r2, #0
 8008e04:	701a      	strb	r2, [r3, #0]
 8008e06:	e024      	b.n	8008e52 <GetKeyByID+0x62>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8008e08:	240f      	movs	r4, #15
 8008e0a:	193b      	adds	r3, r7, r4
 8008e0c:	781a      	ldrb	r2, [r3, #0]
 8008e0e:	4816      	ldr	r0, [pc, #88]	@ (8008e68 <GetKeyByID+0x78>)
 8008e10:	238b      	movs	r3, #139	@ 0x8b
 8008e12:	0099      	lsls	r1, r3, #2
 8008e14:	0013      	movs	r3, r2
 8008e16:	011b      	lsls	r3, r3, #4
 8008e18:	189b      	adds	r3, r3, r2
 8008e1a:	18c3      	adds	r3, r0, r3
 8008e1c:	185b      	adds	r3, r3, r1
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	1dfa      	adds	r2, r7, #7
 8008e22:	7812      	ldrb	r2, [r2, #0]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d10e      	bne.n	8008e46 <GetKeyByID+0x56>
        {
            *keyItem = &( SeNvmCtx.KeyList[i] );
 8008e28:	193b      	adds	r3, r7, r4
 8008e2a:	781a      	ldrb	r2, [r3, #0]
 8008e2c:	0013      	movs	r3, r2
 8008e2e:	011b      	lsls	r3, r3, #4
 8008e30:	189b      	adds	r3, r3, r2
 8008e32:	228a      	movs	r2, #138	@ 0x8a
 8008e34:	0092      	lsls	r2, r2, #2
 8008e36:	189a      	adds	r2, r3, r2
 8008e38:	4b0b      	ldr	r3, [pc, #44]	@ (8008e68 <GetKeyByID+0x78>)
 8008e3a:	18d3      	adds	r3, r2, r3
 8008e3c:	1d1a      	adds	r2, r3, #4
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 8008e42:	2300      	movs	r3, #0
 8008e44:	e00b      	b.n	8008e5e <GetKeyByID+0x6e>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8008e46:	210f      	movs	r1, #15
 8008e48:	187b      	adds	r3, r7, r1
 8008e4a:	781a      	ldrb	r2, [r3, #0]
 8008e4c:	187b      	adds	r3, r7, r1
 8008e4e:	3201      	adds	r2, #1
 8008e50:	701a      	strb	r2, [r3, #0]
 8008e52:	230f      	movs	r3, #15
 8008e54:	18fb      	adds	r3, r7, r3
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	2b17      	cmp	r3, #23
 8008e5a:	d9d5      	bls.n	8008e08 <GetKeyByID+0x18>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8008e5c:	2303      	movs	r3, #3
}
 8008e5e:	0018      	movs	r0, r3
 8008e60:	46bd      	mov	sp, r7
 8008e62:	b005      	add	sp, #20
 8008e64:	bd90      	pop	{r4, r7, pc}
 8008e66:	46c0      	nop			@ (mov r8, r8)
 8008e68:	2000059c 	.word	0x2000059c

08008e6c <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	af00      	add	r7, sp, #0
    return;
 8008e70:	46c0      	nop			@ (mov r8, r8)
}
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
	...

08008e78 <ComputeCmac>:
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8008e78:	b5b0      	push	{r4, r5, r7, lr}
 8008e7a:	b08a      	sub	sp, #40	@ 0x28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	0019      	movs	r1, r3
 8008e84:	1dbb      	adds	r3, r7, #6
 8008e86:	801a      	strh	r2, [r3, #0]
 8008e88:	1d7b      	adds	r3, r7, #5
 8008e8a:	1c0a      	adds	r2, r1, #0
 8008e8c:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d002      	beq.n	8008e9a <ComputeCmac+0x22>
 8008e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d101      	bne.n	8008e9e <ComputeCmac+0x26>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8008e9a:	2302      	movs	r3, #2
 8008e9c:	e045      	b.n	8008f2a <ComputeCmac+0xb2>
    }

    uint8_t Cmac[16];

    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 8008e9e:	4b25      	ldr	r3, [pc, #148]	@ (8008f34 <ComputeCmac+0xbc>)
 8008ea0:	0018      	movs	r0, r3
 8008ea2:	f7ff fd55 	bl	8008950 <AES_CMAC_Init>

    Key_t* keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8008ea6:	2527      	movs	r5, #39	@ 0x27
 8008ea8:	197c      	adds	r4, r7, r5
 8008eaa:	2310      	movs	r3, #16
 8008eac:	18fa      	adds	r2, r7, r3
 8008eae:	1d7b      	adds	r3, r7, #5
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	0011      	movs	r1, r2
 8008eb4:	0018      	movs	r0, r3
 8008eb6:	f7ff ff9b 	bl	8008df0 <GetKeyByID>
 8008eba:	0003      	movs	r3, r0
 8008ebc:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 8008ebe:	197b      	adds	r3, r7, r5
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d12e      	bne.n	8008f24 <ComputeCmac+0xac>
    {
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	1c5a      	adds	r2, r3, #1
 8008eca:	4b1a      	ldr	r3, [pc, #104]	@ (8008f34 <ComputeCmac+0xbc>)
 8008ecc:	0011      	movs	r1, r2
 8008ece:	0018      	movs	r0, r3
 8008ed0:	f7ff fd58 	bl	8008984 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d005      	beq.n	8008ee6 <ComputeCmac+0x6e>
        {
            AES_CMAC_Update( SeNvmCtx.AesCmacCtx, micBxBuffer, 16 );
 8008eda:	68f9      	ldr	r1, [r7, #12]
 8008edc:	4b15      	ldr	r3, [pc, #84]	@ (8008f34 <ComputeCmac+0xbc>)
 8008ede:	2210      	movs	r2, #16
 8008ee0:	0018      	movs	r0, r3
 8008ee2:	f7ff fd5e 	bl	80089a2 <AES_CMAC_Update>
        }

        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
 8008ee6:	1dbb      	adds	r3, r7, #6
 8008ee8:	881a      	ldrh	r2, [r3, #0]
 8008eea:	68b9      	ldr	r1, [r7, #8]
 8008eec:	4b11      	ldr	r3, [pc, #68]	@ (8008f34 <ComputeCmac+0xbc>)
 8008eee:	0018      	movs	r0, r3
 8008ef0:	f7ff fd57 	bl	80089a2 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
 8008ef4:	4a0f      	ldr	r2, [pc, #60]	@ (8008f34 <ComputeCmac+0xbc>)
 8008ef6:	2414      	movs	r4, #20
 8008ef8:	193b      	adds	r3, r7, r4
 8008efa:	0011      	movs	r1, r2
 8008efc:	0018      	movs	r0, r3
 8008efe:	f7ff fe0b 	bl	8008b18 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
 8008f02:	0021      	movs	r1, r4
 8008f04:	187b      	adds	r3, r7, r1
 8008f06:	78db      	ldrb	r3, [r3, #3]
 8008f08:	061a      	lsls	r2, r3, #24
 8008f0a:	187b      	adds	r3, r7, r1
 8008f0c:	789b      	ldrb	r3, [r3, #2]
 8008f0e:	041b      	lsls	r3, r3, #16
 8008f10:	431a      	orrs	r2, r3
 8008f12:	187b      	adds	r3, r7, r1
 8008f14:	785b      	ldrb	r3, [r3, #1]
 8008f16:	021b      	lsls	r3, r3, #8
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	187a      	adds	r2, r7, r1
 8008f1c:	7812      	ldrb	r2, [r2, #0]
 8008f1e:	431a      	orrs	r2, r3
 8008f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f22:	601a      	str	r2, [r3, #0]
    }

    return retval;
 8008f24:	2327      	movs	r3, #39	@ 0x27
 8008f26:	18fb      	adds	r3, r7, r3
 8008f28:	781b      	ldrb	r3, [r3, #0]
}
 8008f2a:	0018      	movs	r0, r3
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	b00a      	add	sp, #40	@ 0x28
 8008f30:	bdb0      	pop	{r4, r5, r7, pc}
 8008f32:	46c0      	nop			@ (mov r8, r8)
 8008f34:	200006b0 	.word	0x200006b0

08008f38 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( SecureElementNvmEvent seNvmCtxChanged )
{
 8008f38:	b5b0      	push	{r4, r5, r7, lr}
 8008f3a:	b088      	sub	sp, #32
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
    uint8_t itr = 0;
 8008f40:	241f      	movs	r4, #31
 8008f42:	193b      	adds	r3, r7, r4
 8008f44:	2200      	movs	r2, #0
 8008f46:	701a      	strb	r2, [r3, #0]
    uint8_t zeroKey[16] = { 0 };
 8008f48:	250c      	movs	r5, #12
 8008f4a:	197b      	adds	r3, r7, r5
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	601a      	str	r2, [r3, #0]
 8008f50:	3304      	adds	r3, #4
 8008f52:	220c      	movs	r2, #12
 8008f54:	2100      	movs	r1, #0
 8008f56:	0018      	movs	r0, r3
 8008f58:	f010 fdb8 	bl	8019acc <memset>

    // Initialize with defaults
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 8008f5c:	193b      	adds	r3, r7, r4
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	193a      	adds	r2, r7, r4
 8008f62:	1c59      	adds	r1, r3, #1
 8008f64:	7011      	strb	r1, [r2, #0]
 8008f66:	0018      	movs	r0, r3
 8008f68:	49d0      	ldr	r1, [pc, #832]	@ (80092ac <SecureElementInit+0x374>)
 8008f6a:	238b      	movs	r3, #139	@ 0x8b
 8008f6c:	009a      	lsls	r2, r3, #2
 8008f6e:	0003      	movs	r3, r0
 8008f70:	011b      	lsls	r3, r3, #4
 8008f72:	181b      	adds	r3, r3, r0
 8008f74:	18cb      	adds	r3, r1, r3
 8008f76:	189b      	adds	r3, r3, r2
 8008f78:	2200      	movs	r2, #0
 8008f7a:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = GEN_APP_KEY;
 8008f7c:	193b      	adds	r3, r7, r4
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	193a      	adds	r2, r7, r4
 8008f82:	1c59      	adds	r1, r3, #1
 8008f84:	7011      	strb	r1, [r2, #0]
 8008f86:	0018      	movs	r0, r3
 8008f88:	49c8      	ldr	r1, [pc, #800]	@ (80092ac <SecureElementInit+0x374>)
 8008f8a:	238b      	movs	r3, #139	@ 0x8b
 8008f8c:	009a      	lsls	r2, r3, #2
 8008f8e:	0003      	movs	r3, r0
 8008f90:	011b      	lsls	r3, r3, #4
 8008f92:	181b      	adds	r3, r3, r0
 8008f94:	18cb      	adds	r3, r1, r3
 8008f96:	189b      	adds	r3, r3, r2
 8008f98:	2201      	movs	r2, #1
 8008f9a:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_KEY;
 8008f9c:	193b      	adds	r3, r7, r4
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	193a      	adds	r2, r7, r4
 8008fa2:	1c59      	adds	r1, r3, #1
 8008fa4:	7011      	strb	r1, [r2, #0]
 8008fa6:	0018      	movs	r0, r3
 8008fa8:	49c0      	ldr	r1, [pc, #768]	@ (80092ac <SecureElementInit+0x374>)
 8008faa:	238b      	movs	r3, #139	@ 0x8b
 8008fac:	009a      	lsls	r2, r3, #2
 8008fae:	0003      	movs	r3, r0
 8008fb0:	011b      	lsls	r3, r3, #4
 8008fb2:	181b      	adds	r3, r3, r0
 8008fb4:	18cb      	adds	r3, r1, r3
 8008fb6:	189b      	adds	r3, r3, r2
 8008fb8:	2202      	movs	r2, #2
 8008fba:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_INT_KEY;
 8008fbc:	193b      	adds	r3, r7, r4
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	193a      	adds	r2, r7, r4
 8008fc2:	1c59      	adds	r1, r3, #1
 8008fc4:	7011      	strb	r1, [r2, #0]
 8008fc6:	0018      	movs	r0, r3
 8008fc8:	49b8      	ldr	r1, [pc, #736]	@ (80092ac <SecureElementInit+0x374>)
 8008fca:	238b      	movs	r3, #139	@ 0x8b
 8008fcc:	009a      	lsls	r2, r3, #2
 8008fce:	0003      	movs	r3, r0
 8008fd0:	011b      	lsls	r3, r3, #4
 8008fd2:	181b      	adds	r3, r3, r0
 8008fd4:	18cb      	adds	r3, r1, r3
 8008fd6:	189b      	adds	r3, r3, r2
 8008fd8:	2203      	movs	r2, #3
 8008fda:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_ENC_KEY;
 8008fdc:	193b      	adds	r3, r7, r4
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	193a      	adds	r2, r7, r4
 8008fe2:	1c59      	adds	r1, r3, #1
 8008fe4:	7011      	strb	r1, [r2, #0]
 8008fe6:	0018      	movs	r0, r3
 8008fe8:	49b0      	ldr	r1, [pc, #704]	@ (80092ac <SecureElementInit+0x374>)
 8008fea:	238b      	movs	r3, #139	@ 0x8b
 8008fec:	009a      	lsls	r2, r3, #2
 8008fee:	0003      	movs	r3, r0
 8008ff0:	011b      	lsls	r3, r3, #4
 8008ff2:	181b      	adds	r3, r3, r0
 8008ff4:	18cb      	adds	r3, r1, r3
 8008ff6:	189b      	adds	r3, r3, r2
 8008ff8:	2204      	movs	r2, #4
 8008ffa:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = F_NWK_S_INT_KEY;
 8008ffc:	193b      	adds	r3, r7, r4
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	193a      	adds	r2, r7, r4
 8009002:	1c59      	adds	r1, r3, #1
 8009004:	7011      	strb	r1, [r2, #0]
 8009006:	0018      	movs	r0, r3
 8009008:	49a8      	ldr	r1, [pc, #672]	@ (80092ac <SecureElementInit+0x374>)
 800900a:	238b      	movs	r3, #139	@ 0x8b
 800900c:	009a      	lsls	r2, r3, #2
 800900e:	0003      	movs	r3, r0
 8009010:	011b      	lsls	r3, r3, #4
 8009012:	181b      	adds	r3, r3, r0
 8009014:	18cb      	adds	r3, r1, r3
 8009016:	189b      	adds	r3, r3, r2
 8009018:	2205      	movs	r2, #5
 800901a:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = S_NWK_S_INT_KEY;
 800901c:	193b      	adds	r3, r7, r4
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	193a      	adds	r2, r7, r4
 8009022:	1c59      	adds	r1, r3, #1
 8009024:	7011      	strb	r1, [r2, #0]
 8009026:	0018      	movs	r0, r3
 8009028:	49a0      	ldr	r1, [pc, #640]	@ (80092ac <SecureElementInit+0x374>)
 800902a:	238b      	movs	r3, #139	@ 0x8b
 800902c:	009a      	lsls	r2, r3, #2
 800902e:	0003      	movs	r3, r0
 8009030:	011b      	lsls	r3, r3, #4
 8009032:	181b      	adds	r3, r3, r0
 8009034:	18cb      	adds	r3, r1, r3
 8009036:	189b      	adds	r3, r3, r2
 8009038:	2206      	movs	r2, #6
 800903a:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_S_ENC_KEY;
 800903c:	193b      	adds	r3, r7, r4
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	193a      	adds	r2, r7, r4
 8009042:	1c59      	adds	r1, r3, #1
 8009044:	7011      	strb	r1, [r2, #0]
 8009046:	0018      	movs	r0, r3
 8009048:	4998      	ldr	r1, [pc, #608]	@ (80092ac <SecureElementInit+0x374>)
 800904a:	238b      	movs	r3, #139	@ 0x8b
 800904c:	009a      	lsls	r2, r3, #2
 800904e:	0003      	movs	r3, r0
 8009050:	011b      	lsls	r3, r3, #4
 8009052:	181b      	adds	r3, r3, r0
 8009054:	18cb      	adds	r3, r1, r3
 8009056:	189b      	adds	r3, r3, r2
 8009058:	2207      	movs	r2, #7
 800905a:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = APP_S_KEY;
 800905c:	193b      	adds	r3, r7, r4
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	193a      	adds	r2, r7, r4
 8009062:	1c59      	adds	r1, r3, #1
 8009064:	7011      	strb	r1, [r2, #0]
 8009066:	0018      	movs	r0, r3
 8009068:	4990      	ldr	r1, [pc, #576]	@ (80092ac <SecureElementInit+0x374>)
 800906a:	238b      	movs	r3, #139	@ 0x8b
 800906c:	009a      	lsls	r2, r3, #2
 800906e:	0003      	movs	r3, r0
 8009070:	011b      	lsls	r3, r3, #4
 8009072:	181b      	adds	r3, r3, r0
 8009074:	18cb      	adds	r3, r1, r3
 8009076:	189b      	adds	r3, r3, r2
 8009078:	2208      	movs	r2, #8
 800907a:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_ROOT_KEY;
 800907c:	193b      	adds	r3, r7, r4
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	193a      	adds	r2, r7, r4
 8009082:	1c59      	adds	r1, r3, #1
 8009084:	7011      	strb	r1, [r2, #0]
 8009086:	0018      	movs	r0, r3
 8009088:	4988      	ldr	r1, [pc, #544]	@ (80092ac <SecureElementInit+0x374>)
 800908a:	238b      	movs	r3, #139	@ 0x8b
 800908c:	009a      	lsls	r2, r3, #2
 800908e:	0003      	movs	r3, r0
 8009090:	011b      	lsls	r3, r3, #4
 8009092:	181b      	adds	r3, r3, r0
 8009094:	18cb      	adds	r3, r1, r3
 8009096:	189b      	adds	r3, r3, r2
 8009098:	2209      	movs	r2, #9
 800909a:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KE_KEY;
 800909c:	193b      	adds	r3, r7, r4
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	193a      	adds	r2, r7, r4
 80090a2:	1c59      	adds	r1, r3, #1
 80090a4:	7011      	strb	r1, [r2, #0]
 80090a6:	0018      	movs	r0, r3
 80090a8:	4980      	ldr	r1, [pc, #512]	@ (80092ac <SecureElementInit+0x374>)
 80090aa:	238b      	movs	r3, #139	@ 0x8b
 80090ac:	009a      	lsls	r2, r3, #2
 80090ae:	0003      	movs	r3, r0
 80090b0:	011b      	lsls	r3, r3, #4
 80090b2:	181b      	adds	r3, r3, r0
 80090b4:	18cb      	adds	r3, r1, r3
 80090b6:	189b      	adds	r3, r3, r2
 80090b8:	227f      	movs	r2, #127	@ 0x7f
 80090ba:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_0;
 80090bc:	193b      	adds	r3, r7, r4
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	193a      	adds	r2, r7, r4
 80090c2:	1c59      	adds	r1, r3, #1
 80090c4:	7011      	strb	r1, [r2, #0]
 80090c6:	0018      	movs	r0, r3
 80090c8:	4978      	ldr	r1, [pc, #480]	@ (80092ac <SecureElementInit+0x374>)
 80090ca:	238b      	movs	r3, #139	@ 0x8b
 80090cc:	009a      	lsls	r2, r3, #2
 80090ce:	0003      	movs	r3, r0
 80090d0:	011b      	lsls	r3, r3, #4
 80090d2:	181b      	adds	r3, r3, r0
 80090d4:	18cb      	adds	r3, r1, r3
 80090d6:	189b      	adds	r3, r3, r2
 80090d8:	2280      	movs	r2, #128	@ 0x80
 80090da:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_0;
 80090dc:	193b      	adds	r3, r7, r4
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	193a      	adds	r2, r7, r4
 80090e2:	1c59      	adds	r1, r3, #1
 80090e4:	7011      	strb	r1, [r2, #0]
 80090e6:	0018      	movs	r0, r3
 80090e8:	4970      	ldr	r1, [pc, #448]	@ (80092ac <SecureElementInit+0x374>)
 80090ea:	238b      	movs	r3, #139	@ 0x8b
 80090ec:	009a      	lsls	r2, r3, #2
 80090ee:	0003      	movs	r3, r0
 80090f0:	011b      	lsls	r3, r3, #4
 80090f2:	181b      	adds	r3, r3, r0
 80090f4:	18cb      	adds	r3, r1, r3
 80090f6:	189b      	adds	r3, r3, r2
 80090f8:	2281      	movs	r2, #129	@ 0x81
 80090fa:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_0;
 80090fc:	193b      	adds	r3, r7, r4
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	193a      	adds	r2, r7, r4
 8009102:	1c59      	adds	r1, r3, #1
 8009104:	7011      	strb	r1, [r2, #0]
 8009106:	0018      	movs	r0, r3
 8009108:	4968      	ldr	r1, [pc, #416]	@ (80092ac <SecureElementInit+0x374>)
 800910a:	238b      	movs	r3, #139	@ 0x8b
 800910c:	009a      	lsls	r2, r3, #2
 800910e:	0003      	movs	r3, r0
 8009110:	011b      	lsls	r3, r3, #4
 8009112:	181b      	adds	r3, r3, r0
 8009114:	18cb      	adds	r3, r1, r3
 8009116:	189b      	adds	r3, r3, r2
 8009118:	2282      	movs	r2, #130	@ 0x82
 800911a:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_1;
 800911c:	193b      	adds	r3, r7, r4
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	193a      	adds	r2, r7, r4
 8009122:	1c59      	adds	r1, r3, #1
 8009124:	7011      	strb	r1, [r2, #0]
 8009126:	0018      	movs	r0, r3
 8009128:	4960      	ldr	r1, [pc, #384]	@ (80092ac <SecureElementInit+0x374>)
 800912a:	238b      	movs	r3, #139	@ 0x8b
 800912c:	009a      	lsls	r2, r3, #2
 800912e:	0003      	movs	r3, r0
 8009130:	011b      	lsls	r3, r3, #4
 8009132:	181b      	adds	r3, r3, r0
 8009134:	18cb      	adds	r3, r1, r3
 8009136:	189b      	adds	r3, r3, r2
 8009138:	2283      	movs	r2, #131	@ 0x83
 800913a:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_1;
 800913c:	193b      	adds	r3, r7, r4
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	193a      	adds	r2, r7, r4
 8009142:	1c59      	adds	r1, r3, #1
 8009144:	7011      	strb	r1, [r2, #0]
 8009146:	0018      	movs	r0, r3
 8009148:	4958      	ldr	r1, [pc, #352]	@ (80092ac <SecureElementInit+0x374>)
 800914a:	238b      	movs	r3, #139	@ 0x8b
 800914c:	009a      	lsls	r2, r3, #2
 800914e:	0003      	movs	r3, r0
 8009150:	011b      	lsls	r3, r3, #4
 8009152:	181b      	adds	r3, r3, r0
 8009154:	18cb      	adds	r3, r1, r3
 8009156:	189b      	adds	r3, r3, r2
 8009158:	2284      	movs	r2, #132	@ 0x84
 800915a:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_1;
 800915c:	193b      	adds	r3, r7, r4
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	193a      	adds	r2, r7, r4
 8009162:	1c59      	adds	r1, r3, #1
 8009164:	7011      	strb	r1, [r2, #0]
 8009166:	0018      	movs	r0, r3
 8009168:	4950      	ldr	r1, [pc, #320]	@ (80092ac <SecureElementInit+0x374>)
 800916a:	238b      	movs	r3, #139	@ 0x8b
 800916c:	009a      	lsls	r2, r3, #2
 800916e:	0003      	movs	r3, r0
 8009170:	011b      	lsls	r3, r3, #4
 8009172:	181b      	adds	r3, r3, r0
 8009174:	18cb      	adds	r3, r1, r3
 8009176:	189b      	adds	r3, r3, r2
 8009178:	2285      	movs	r2, #133	@ 0x85
 800917a:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_2;
 800917c:	193b      	adds	r3, r7, r4
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	193a      	adds	r2, r7, r4
 8009182:	1c59      	adds	r1, r3, #1
 8009184:	7011      	strb	r1, [r2, #0]
 8009186:	0018      	movs	r0, r3
 8009188:	4948      	ldr	r1, [pc, #288]	@ (80092ac <SecureElementInit+0x374>)
 800918a:	238b      	movs	r3, #139	@ 0x8b
 800918c:	009a      	lsls	r2, r3, #2
 800918e:	0003      	movs	r3, r0
 8009190:	011b      	lsls	r3, r3, #4
 8009192:	181b      	adds	r3, r3, r0
 8009194:	18cb      	adds	r3, r1, r3
 8009196:	189b      	adds	r3, r3, r2
 8009198:	2286      	movs	r2, #134	@ 0x86
 800919a:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_2;
 800919c:	193b      	adds	r3, r7, r4
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	193a      	adds	r2, r7, r4
 80091a2:	1c59      	adds	r1, r3, #1
 80091a4:	7011      	strb	r1, [r2, #0]
 80091a6:	0018      	movs	r0, r3
 80091a8:	4940      	ldr	r1, [pc, #256]	@ (80092ac <SecureElementInit+0x374>)
 80091aa:	238b      	movs	r3, #139	@ 0x8b
 80091ac:	009a      	lsls	r2, r3, #2
 80091ae:	0003      	movs	r3, r0
 80091b0:	011b      	lsls	r3, r3, #4
 80091b2:	181b      	adds	r3, r3, r0
 80091b4:	18cb      	adds	r3, r1, r3
 80091b6:	189b      	adds	r3, r3, r2
 80091b8:	2287      	movs	r2, #135	@ 0x87
 80091ba:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_2;
 80091bc:	193b      	adds	r3, r7, r4
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	193a      	adds	r2, r7, r4
 80091c2:	1c59      	adds	r1, r3, #1
 80091c4:	7011      	strb	r1, [r2, #0]
 80091c6:	0018      	movs	r0, r3
 80091c8:	4938      	ldr	r1, [pc, #224]	@ (80092ac <SecureElementInit+0x374>)
 80091ca:	238b      	movs	r3, #139	@ 0x8b
 80091cc:	009a      	lsls	r2, r3, #2
 80091ce:	0003      	movs	r3, r0
 80091d0:	011b      	lsls	r3, r3, #4
 80091d2:	181b      	adds	r3, r3, r0
 80091d4:	18cb      	adds	r3, r1, r3
 80091d6:	189b      	adds	r3, r3, r2
 80091d8:	2288      	movs	r2, #136	@ 0x88
 80091da:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_3;
 80091dc:	193b      	adds	r3, r7, r4
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	193a      	adds	r2, r7, r4
 80091e2:	1c59      	adds	r1, r3, #1
 80091e4:	7011      	strb	r1, [r2, #0]
 80091e6:	0018      	movs	r0, r3
 80091e8:	4930      	ldr	r1, [pc, #192]	@ (80092ac <SecureElementInit+0x374>)
 80091ea:	238b      	movs	r3, #139	@ 0x8b
 80091ec:	009a      	lsls	r2, r3, #2
 80091ee:	0003      	movs	r3, r0
 80091f0:	011b      	lsls	r3, r3, #4
 80091f2:	181b      	adds	r3, r3, r0
 80091f4:	18cb      	adds	r3, r1, r3
 80091f6:	189b      	adds	r3, r3, r2
 80091f8:	2289      	movs	r2, #137	@ 0x89
 80091fa:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_3;
 80091fc:	193b      	adds	r3, r7, r4
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	193a      	adds	r2, r7, r4
 8009202:	1c59      	adds	r1, r3, #1
 8009204:	7011      	strb	r1, [r2, #0]
 8009206:	0018      	movs	r0, r3
 8009208:	4928      	ldr	r1, [pc, #160]	@ (80092ac <SecureElementInit+0x374>)
 800920a:	238b      	movs	r3, #139	@ 0x8b
 800920c:	009a      	lsls	r2, r3, #2
 800920e:	0003      	movs	r3, r0
 8009210:	011b      	lsls	r3, r3, #4
 8009212:	181b      	adds	r3, r3, r0
 8009214:	18cb      	adds	r3, r1, r3
 8009216:	189b      	adds	r3, r3, r2
 8009218:	228a      	movs	r2, #138	@ 0x8a
 800921a:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
 800921c:	193b      	adds	r3, r7, r4
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	193a      	adds	r2, r7, r4
 8009222:	1c59      	adds	r1, r3, #1
 8009224:	7011      	strb	r1, [r2, #0]
 8009226:	0018      	movs	r0, r3
 8009228:	4920      	ldr	r1, [pc, #128]	@ (80092ac <SecureElementInit+0x374>)
 800922a:	238b      	movs	r3, #139	@ 0x8b
 800922c:	009a      	lsls	r2, r3, #2
 800922e:	0003      	movs	r3, r0
 8009230:	011b      	lsls	r3, r3, #4
 8009232:	181b      	adds	r3, r3, r0
 8009234:	18cb      	adds	r3, r1, r3
 8009236:	189b      	adds	r3, r3, r2
 8009238:	228b      	movs	r2, #139	@ 0x8b
 800923a:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;
 800923c:	193b      	adds	r3, r7, r4
 800923e:	781a      	ldrb	r2, [r3, #0]
 8009240:	481a      	ldr	r0, [pc, #104]	@ (80092ac <SecureElementInit+0x374>)
 8009242:	238b      	movs	r3, #139	@ 0x8b
 8009244:	0099      	lsls	r1, r3, #2
 8009246:	0013      	movs	r3, r2
 8009248:	011b      	lsls	r3, r3, #4
 800924a:	189b      	adds	r3, r3, r2
 800924c:	18c3      	adds	r3, r0, r3
 800924e:	185b      	adds	r3, r3, r1
 8009250:	228c      	movs	r2, #140	@ 0x8c
 8009252:	701a      	strb	r2, [r3, #0]

    // Set standard keys
    memcpy1( SeNvmCtx.KeyList[itr].KeyValue, zeroKey, KEY_SIZE );
 8009254:	193b      	adds	r3, r7, r4
 8009256:	781a      	ldrb	r2, [r3, #0]
 8009258:	0013      	movs	r3, r2
 800925a:	011b      	lsls	r3, r3, #4
 800925c:	189b      	adds	r3, r3, r2
 800925e:	228a      	movs	r2, #138	@ 0x8a
 8009260:	0092      	lsls	r2, r2, #2
 8009262:	189a      	adds	r2, r3, r2
 8009264:	4b11      	ldr	r3, [pc, #68]	@ (80092ac <SecureElementInit+0x374>)
 8009266:	18d3      	adds	r3, r2, r3
 8009268:	3305      	adds	r3, #5
 800926a:	1979      	adds	r1, r7, r5
 800926c:	2210      	movs	r2, #16
 800926e:	0018      	movs	r0, r3
 8009270:	f00c fa12 	bl	8015698 <memcpy1>

    memset1( SeNvmCtx.DevEui, 0, SE_EUI_SIZE );
 8009274:	4b0d      	ldr	r3, [pc, #52]	@ (80092ac <SecureElementInit+0x374>)
 8009276:	2210      	movs	r2, #16
 8009278:	2100      	movs	r1, #0
 800927a:	0018      	movs	r0, r3
 800927c:	f00c fa4a 	bl	8015714 <memset1>
    memset1( SeNvmCtx.JoinEui, 0, SE_EUI_SIZE );
 8009280:	4b0b      	ldr	r3, [pc, #44]	@ (80092b0 <SecureElementInit+0x378>)
 8009282:	2210      	movs	r2, #16
 8009284:	2100      	movs	r1, #0
 8009286:	0018      	movs	r0, r3
 8009288:	f00c fa44 	bl	8015714 <memset1>

    // Assign callback
    if( seNvmCtxChanged != 0 )
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d003      	beq.n	800929a <SecureElementInit+0x362>
    {
        SeNvmCtxChanged = seNvmCtxChanged;
 8009292:	4b08      	ldr	r3, [pc, #32]	@ (80092b4 <SecureElementInit+0x37c>)
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	601a      	str	r2, [r3, #0]
 8009298:	e002      	b.n	80092a0 <SecureElementInit+0x368>
    }
    else
    {
        SeNvmCtxChanged = DummyCB;
 800929a:	4b06      	ldr	r3, [pc, #24]	@ (80092b4 <SecureElementInit+0x37c>)
 800929c:	4a06      	ldr	r2, [pc, #24]	@ (80092b8 <SecureElementInit+0x380>)
 800929e:	601a      	str	r2, [r3, #0]
    }

    return SECURE_ELEMENT_SUCCESS;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	0018      	movs	r0, r3
 80092a4:	46bd      	mov	sp, r7
 80092a6:	b008      	add	sp, #32
 80092a8:	bdb0      	pop	{r4, r5, r7, pc}
 80092aa:	46c0      	nop			@ (mov r8, r8)
 80092ac:	2000059c 	.word	0x2000059c
 80092b0:	200005ac 	.word	0x200005ac
 80092b4:	20000960 	.word	0x20000960
 80092b8:	08008e6d 	.word	0x08008e6d

080092bc <SecureElementRestoreNvmCtx>:

SecureElementStatus_t SecureElementRestoreNvmCtx( void* seNvmCtx )
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
    // Restore nvm context
    if( seNvmCtx != 0 )
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d008      	beq.n	80092dc <SecureElementRestoreNvmCtx+0x20>
    {
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
 80092ca:	23f1      	movs	r3, #241	@ 0xf1
 80092cc:	009a      	lsls	r2, r3, #2
 80092ce:	6879      	ldr	r1, [r7, #4]
 80092d0:	4b05      	ldr	r3, [pc, #20]	@ (80092e8 <SecureElementRestoreNvmCtx+0x2c>)
 80092d2:	0018      	movs	r0, r3
 80092d4:	f00c f9e0 	bl	8015698 <memcpy1>
        return SECURE_ELEMENT_SUCCESS;
 80092d8:	2300      	movs	r3, #0
 80092da:	e000      	b.n	80092de <SecureElementRestoreNvmCtx+0x22>
    }
    else
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80092dc:	2302      	movs	r3, #2
    }
}
 80092de:	0018      	movs	r0, r3
 80092e0:	46bd      	mov	sp, r7
 80092e2:	b002      	add	sp, #8
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	46c0      	nop			@ (mov r8, r8)
 80092e8:	2000059c 	.word	0x2000059c

080092ec <SecureElementGetNvmCtx>:

void* SecureElementGetNvmCtx( size_t* seNvmCtxSize )
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
    *seNvmCtxSize = sizeof( SeNvmCtx );
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	22f1      	movs	r2, #241	@ 0xf1
 80092f8:	0092      	lsls	r2, r2, #2
 80092fa:	601a      	str	r2, [r3, #0]
    return &SeNvmCtx;
 80092fc:	4b02      	ldr	r3, [pc, #8]	@ (8009308 <SecureElementGetNvmCtx+0x1c>)
}
 80092fe:	0018      	movs	r0, r3
 8009300:	46bd      	mov	sp, r7
 8009302:	b002      	add	sp, #8
 8009304:	bd80      	pop	{r7, pc}
 8009306:	46c0      	nop			@ (mov r8, r8)
 8009308:	2000059c 	.word	0x2000059c

0800930c <SecureElementSetKey>:

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800930c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800930e:	b089      	sub	sp, #36	@ 0x24
 8009310:	af00      	add	r7, sp, #0
 8009312:	0002      	movs	r2, r0
 8009314:	6039      	str	r1, [r7, #0]
 8009316:	1dfb      	adds	r3, r7, #7
 8009318:	701a      	strb	r2, [r3, #0]
    if( key == NULL )
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d101      	bne.n	8009324 <SecureElementSetKey+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8009320:	2302      	movs	r3, #2
 8009322:	e074      	b.n	800940e <SecureElementSetKey+0x102>
    }

    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8009324:	231f      	movs	r3, #31
 8009326:	18fb      	adds	r3, r7, r3
 8009328:	2200      	movs	r2, #0
 800932a:	701a      	strb	r2, [r3, #0]
 800932c:	e069      	b.n	8009402 <SecureElementSetKey+0xf6>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 800932e:	231f      	movs	r3, #31
 8009330:	18fb      	adds	r3, r7, r3
 8009332:	781a      	ldrb	r2, [r3, #0]
 8009334:	4838      	ldr	r0, [pc, #224]	@ (8009418 <SecureElementSetKey+0x10c>)
 8009336:	238b      	movs	r3, #139	@ 0x8b
 8009338:	0099      	lsls	r1, r3, #2
 800933a:	0013      	movs	r3, r2
 800933c:	011b      	lsls	r3, r3, #4
 800933e:	189b      	adds	r3, r3, r2
 8009340:	18c3      	adds	r3, r0, r3
 8009342:	185b      	adds	r3, r3, r1
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	1dfa      	adds	r2, r7, #7
 8009348:	7812      	ldrb	r2, [r2, #0]
 800934a:	429a      	cmp	r2, r3
 800934c:	d153      	bne.n	80093f6 <SecureElementSetKey+0xea>
        {
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 800934e:	1dfb      	adds	r3, r7, #7
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	2b80      	cmp	r3, #128	@ 0x80
 8009354:	d00b      	beq.n	800936e <SecureElementSetKey+0x62>
 8009356:	1dfb      	adds	r3, r7, #7
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	2b83      	cmp	r3, #131	@ 0x83
 800935c:	d007      	beq.n	800936e <SecureElementSetKey+0x62>
 800935e:	1dfb      	adds	r3, r7, #7
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	2b86      	cmp	r3, #134	@ 0x86
 8009364:	d003      	beq.n	800936e <SecureElementSetKey+0x62>
 8009366:	1dfb      	adds	r3, r7, #7
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	2b89      	cmp	r3, #137	@ 0x89
 800936c:	d12d      	bne.n	80093ca <SecureElementSetKey+0xbe>
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800936e:	251e      	movs	r5, #30
 8009370:	197b      	adds	r3, r7, r5
 8009372:	2206      	movs	r2, #6
 8009374:	701a      	strb	r2, [r3, #0]
                uint8_t decryptedKey[16] = { 0 };
 8009376:	260c      	movs	r6, #12
 8009378:	19bb      	adds	r3, r7, r6
 800937a:	2200      	movs	r2, #0
 800937c:	601a      	str	r2, [r3, #0]
 800937e:	3304      	adds	r3, #4
 8009380:	220c      	movs	r2, #12
 8009382:	2100      	movs	r1, #0
 8009384:	0018      	movs	r0, r3
 8009386:	f010 fba1 	bl	8019acc <memset>

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800938a:	197c      	adds	r4, r7, r5
 800938c:	19bb      	adds	r3, r7, r6
 800938e:	6838      	ldr	r0, [r7, #0]
 8009390:	227f      	movs	r2, #127	@ 0x7f
 8009392:	2110      	movs	r1, #16
 8009394:	f000 f8a6 	bl	80094e4 <SecureElementAesEncrypt>
 8009398:	0003      	movs	r3, r0
 800939a:	7023      	strb	r3, [r4, #0]

                memcpy1( SeNvmCtx.KeyList[i].KeyValue, decryptedKey, KEY_SIZE );
 800939c:	231f      	movs	r3, #31
 800939e:	18fb      	adds	r3, r7, r3
 80093a0:	781a      	ldrb	r2, [r3, #0]
 80093a2:	0013      	movs	r3, r2
 80093a4:	011b      	lsls	r3, r3, #4
 80093a6:	189b      	adds	r3, r3, r2
 80093a8:	228a      	movs	r2, #138	@ 0x8a
 80093aa:	0092      	lsls	r2, r2, #2
 80093ac:	189a      	adds	r2, r3, r2
 80093ae:	4b1a      	ldr	r3, [pc, #104]	@ (8009418 <SecureElementSetKey+0x10c>)
 80093b0:	18d3      	adds	r3, r2, r3
 80093b2:	3305      	adds	r3, #5
 80093b4:	19b9      	adds	r1, r7, r6
 80093b6:	2210      	movs	r2, #16
 80093b8:	0018      	movs	r0, r3
 80093ba:	f00c f96d 	bl	8015698 <memcpy1>
                SeNvmCtxChanged( );
 80093be:	4b17      	ldr	r3, [pc, #92]	@ (800941c <SecureElementSetKey+0x110>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4798      	blx	r3

                return retval;
 80093c4:	197b      	adds	r3, r7, r5
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	e021      	b.n	800940e <SecureElementSetKey+0x102>
            }
            else
            {
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
 80093ca:	231f      	movs	r3, #31
 80093cc:	18fb      	adds	r3, r7, r3
 80093ce:	781a      	ldrb	r2, [r3, #0]
 80093d0:	0013      	movs	r3, r2
 80093d2:	011b      	lsls	r3, r3, #4
 80093d4:	189b      	adds	r3, r3, r2
 80093d6:	228a      	movs	r2, #138	@ 0x8a
 80093d8:	0092      	lsls	r2, r2, #2
 80093da:	189a      	adds	r2, r3, r2
 80093dc:	4b0e      	ldr	r3, [pc, #56]	@ (8009418 <SecureElementSetKey+0x10c>)
 80093de:	18d3      	adds	r3, r2, r3
 80093e0:	3305      	adds	r3, #5
 80093e2:	6839      	ldr	r1, [r7, #0]
 80093e4:	2210      	movs	r2, #16
 80093e6:	0018      	movs	r0, r3
 80093e8:	f00c f956 	bl	8015698 <memcpy1>
                SeNvmCtxChanged( );
 80093ec:	4b0b      	ldr	r3, [pc, #44]	@ (800941c <SecureElementSetKey+0x110>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
 80093f2:	2300      	movs	r3, #0
 80093f4:	e00b      	b.n	800940e <SecureElementSetKey+0x102>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80093f6:	211f      	movs	r1, #31
 80093f8:	187b      	adds	r3, r7, r1
 80093fa:	781a      	ldrb	r2, [r3, #0]
 80093fc:	187b      	adds	r3, r7, r1
 80093fe:	3201      	adds	r2, #1
 8009400:	701a      	strb	r2, [r3, #0]
 8009402:	231f      	movs	r3, #31
 8009404:	18fb      	adds	r3, r7, r3
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	2b17      	cmp	r3, #23
 800940a:	d990      	bls.n	800932e <SecureElementSetKey+0x22>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800940c:	2303      	movs	r3, #3
}
 800940e:	0018      	movs	r0, r3
 8009410:	46bd      	mov	sp, r7
 8009412:	b009      	add	sp, #36	@ 0x24
 8009414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009416:	46c0      	nop			@ (mov r8, r8)
 8009418:	2000059c 	.word	0x2000059c
 800941c:	20000960 	.word	0x20000960

08009420 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8009420:	b590      	push	{r4, r7, lr}
 8009422:	b087      	sub	sp, #28
 8009424:	af02      	add	r7, sp, #8
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	0019      	movs	r1, r3
 800942c:	1dbb      	adds	r3, r7, #6
 800942e:	801a      	strh	r2, [r3, #0]
 8009430:	1d7b      	adds	r3, r7, #5
 8009432:	1c0a      	adds	r2, r1, #0
 8009434:	701a      	strb	r2, [r3, #0]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8009436:	1d7b      	adds	r3, r7, #5
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	2b7e      	cmp	r3, #126	@ 0x7e
 800943c:	d901      	bls.n	8009442 <SecureElementComputeAesCmac+0x22>
    {
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800943e:	2303      	movs	r3, #3
 8009440:	e00b      	b.n	800945a <SecureElementComputeAesCmac+0x3a>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8009442:	1d7b      	adds	r3, r7, #5
 8009444:	781c      	ldrb	r4, [r3, #0]
 8009446:	1dbb      	adds	r3, r7, #6
 8009448:	881a      	ldrh	r2, [r3, #0]
 800944a:	68b9      	ldr	r1, [r7, #8]
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	9300      	str	r3, [sp, #0]
 8009452:	0023      	movs	r3, r4
 8009454:	f7ff fd10 	bl	8008e78 <ComputeCmac>
 8009458:	0003      	movs	r3, r0
}
 800945a:	0018      	movs	r0, r3
 800945c:	46bd      	mov	sp, r7
 800945e:	b005      	add	sp, #20
 8009460:	bd90      	pop	{r4, r7, pc}

08009462 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
 8009462:	b5b0      	push	{r4, r5, r7, lr}
 8009464:	b088      	sub	sp, #32
 8009466:	af02      	add	r7, sp, #8
 8009468:	60f8      	str	r0, [r7, #12]
 800946a:	0008      	movs	r0, r1
 800946c:	607a      	str	r2, [r7, #4]
 800946e:	0019      	movs	r1, r3
 8009470:	230a      	movs	r3, #10
 8009472:	18fb      	adds	r3, r7, r3
 8009474:	1c02      	adds	r2, r0, #0
 8009476:	801a      	strh	r2, [r3, #0]
 8009478:	2309      	movs	r3, #9
 800947a:	18fb      	adds	r3, r7, r3
 800947c:	1c0a      	adds	r2, r1, #0
 800947e:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL )
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d101      	bne.n	800948a <SecureElementVerifyAesCmac+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8009486:	2302      	movs	r3, #2
 8009488:	e028      	b.n	80094dc <SecureElementVerifyAesCmac+0x7a>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800948a:	2517      	movs	r5, #23
 800948c:	197b      	adds	r3, r7, r5
 800948e:	2206      	movs	r2, #6
 8009490:	701a      	strb	r2, [r3, #0]
    uint32_t compCmac = 0;
 8009492:	2300      	movs	r3, #0
 8009494:	613b      	str	r3, [r7, #16]
    retval = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8009496:	197c      	adds	r4, r7, r5
 8009498:	2309      	movs	r3, #9
 800949a:	18fb      	adds	r3, r7, r3
 800949c:	7818      	ldrb	r0, [r3, #0]
 800949e:	230a      	movs	r3, #10
 80094a0:	18fb      	adds	r3, r7, r3
 80094a2:	881a      	ldrh	r2, [r3, #0]
 80094a4:	68f9      	ldr	r1, [r7, #12]
 80094a6:	2310      	movs	r3, #16
 80094a8:	18fb      	adds	r3, r7, r3
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	0003      	movs	r3, r0
 80094ae:	2000      	movs	r0, #0
 80094b0:	f7ff fce2 	bl	8008e78 <ComputeCmac>
 80094b4:	0003      	movs	r3, r0
 80094b6:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 80094b8:	197b      	adds	r3, r7, r5
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d002      	beq.n	80094c6 <SecureElementVerifyAesCmac+0x64>
    {
        return retval;
 80094c0:	197b      	adds	r3, r7, r5
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	e00a      	b.n	80094dc <SecureElementVerifyAesCmac+0x7a>
    }

    if( expectedCmac != compCmac )
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d003      	beq.n	80094d6 <SecureElementVerifyAesCmac+0x74>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 80094ce:	2317      	movs	r3, #23
 80094d0:	18fb      	adds	r3, r7, r3
 80094d2:	2201      	movs	r2, #1
 80094d4:	701a      	strb	r2, [r3, #0]
    }

    return retval;
 80094d6:	2317      	movs	r3, #23
 80094d8:	18fb      	adds	r3, r7, r3
 80094da:	781b      	ldrb	r3, [r3, #0]
}
 80094dc:	0018      	movs	r0, r3
 80094de:	46bd      	mov	sp, r7
 80094e0:	b006      	add	sp, #24
 80094e2:	bdb0      	pop	{r4, r5, r7, pc}

080094e4 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
 80094e4:	b5b0      	push	{r4, r5, r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	0008      	movs	r0, r1
 80094ee:	0011      	movs	r1, r2
 80094f0:	607b      	str	r3, [r7, #4]
 80094f2:	230a      	movs	r3, #10
 80094f4:	18fb      	adds	r3, r7, r3
 80094f6:	1c02      	adds	r2, r0, #0
 80094f8:	801a      	strh	r2, [r3, #0]
 80094fa:	2309      	movs	r3, #9
 80094fc:	18fb      	adds	r3, r7, r3
 80094fe:	1c0a      	adds	r2, r1, #0
 8009500:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL || encBuffer == NULL )
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d002      	beq.n	800950e <SecureElementAesEncrypt+0x2a>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d101      	bne.n	8009512 <SecureElementAesEncrypt+0x2e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800950e:	2302      	movs	r3, #2
 8009510:	e04c      	b.n	80095ac <SecureElementAesEncrypt+0xc8>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 8009512:	230a      	movs	r3, #10
 8009514:	18fb      	adds	r3, r7, r3
 8009516:	881b      	ldrh	r3, [r3, #0]
 8009518:	220f      	movs	r2, #15
 800951a:	4013      	ands	r3, r2
 800951c:	b29b      	uxth	r3, r3
 800951e:	2b00      	cmp	r3, #0
 8009520:	d001      	beq.n	8009526 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8009522:	2305      	movs	r3, #5
 8009524:	e042      	b.n	80095ac <SecureElementAesEncrypt+0xc8>
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
 8009526:	4b23      	ldr	r3, [pc, #140]	@ (80095b4 <SecureElementAesEncrypt+0xd0>)
 8009528:	22f0      	movs	r2, #240	@ 0xf0
 800952a:	2100      	movs	r1, #0
 800952c:	0018      	movs	r0, r3
 800952e:	f00c f8f1 	bl	8015714 <memset1>

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8009532:	2516      	movs	r5, #22
 8009534:	197c      	adds	r4, r7, r5
 8009536:	2310      	movs	r3, #16
 8009538:	18fa      	adds	r2, r7, r3
 800953a:	2309      	movs	r3, #9
 800953c:	18fb      	adds	r3, r7, r3
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	0011      	movs	r1, r2
 8009542:	0018      	movs	r0, r3
 8009544:	f7ff fc54 	bl	8008df0 <GetKeyByID>
 8009548:	0003      	movs	r3, r0
 800954a:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 800954c:	197b      	adds	r3, r7, r5
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d128      	bne.n	80095a6 <SecureElementAesEncrypt+0xc2>
    {
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	3301      	adds	r3, #1
 8009558:	4a16      	ldr	r2, [pc, #88]	@ (80095b4 <SecureElementAesEncrypt+0xd0>)
 800955a:	2110      	movs	r1, #16
 800955c:	0018      	movs	r0, r3
 800955e:	f7ff f871 	bl	8008644 <aes_set_key>

        uint8_t block = 0;
 8009562:	2317      	movs	r3, #23
 8009564:	18fb      	adds	r3, r7, r3
 8009566:	2200      	movs	r2, #0
 8009568:	701a      	strb	r2, [r3, #0]

        while( size != 0 )
 800956a:	e017      	b.n	800959c <SecureElementAesEncrypt+0xb8>
        {
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 800956c:	2417      	movs	r4, #23
 800956e:	193b      	adds	r3, r7, r4
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	18d0      	adds	r0, r2, r3
 8009576:	193b      	adds	r3, r7, r4
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	18d3      	adds	r3, r2, r3
 800957e:	4a0d      	ldr	r2, [pc, #52]	@ (80095b4 <SecureElementAesEncrypt+0xd0>)
 8009580:	0019      	movs	r1, r3
 8009582:	f7ff f99b 	bl	80088bc <aes_encrypt>
            block = block + 16;
 8009586:	193b      	adds	r3, r7, r4
 8009588:	193a      	adds	r2, r7, r4
 800958a:	7812      	ldrb	r2, [r2, #0]
 800958c:	3210      	adds	r2, #16
 800958e:	701a      	strb	r2, [r3, #0]
            size = size - 16;
 8009590:	220a      	movs	r2, #10
 8009592:	18bb      	adds	r3, r7, r2
 8009594:	18ba      	adds	r2, r7, r2
 8009596:	8812      	ldrh	r2, [r2, #0]
 8009598:	3a10      	subs	r2, #16
 800959a:	801a      	strh	r2, [r3, #0]
        while( size != 0 )
 800959c:	230a      	movs	r3, #10
 800959e:	18fb      	adds	r3, r7, r3
 80095a0:	881b      	ldrh	r3, [r3, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d1e2      	bne.n	800956c <SecureElementAesEncrypt+0x88>
        }
    }
    return retval;
 80095a6:	2316      	movs	r3, #22
 80095a8:	18fb      	adds	r3, r7, r3
 80095aa:	781b      	ldrb	r3, [r3, #0]
}
 80095ac:	0018      	movs	r0, r3
 80095ae:	46bd      	mov	sp, r7
 80095b0:	b006      	add	sp, #24
 80095b2:	bdb0      	pop	{r4, r5, r7, pc}
 80095b4:	200005bc 	.word	0x200005bc

080095b8 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
 80095b8:	b5b0      	push	{r4, r5, r7, lr}
 80095ba:	b08a      	sub	sp, #40	@ 0x28
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	0019      	movs	r1, r3
 80095c4:	1dfb      	adds	r3, r7, #7
 80095c6:	701a      	strb	r2, [r3, #0]
 80095c8:	1dbb      	adds	r3, r7, #6
 80095ca:	1c0a      	adds	r2, r1, #0
 80095cc:	701a      	strb	r2, [r3, #0]
    if( input == NULL )
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d101      	bne.n	80095d8 <SecureElementDeriveAndStoreKey+0x20>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80095d4:	2302      	movs	r3, #2
 80095d6:	e048      	b.n	800966a <SecureElementDeriveAndStoreKey+0xb2>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80095d8:	2327      	movs	r3, #39	@ 0x27
 80095da:	18fb      	adds	r3, r7, r3
 80095dc:	2206      	movs	r2, #6
 80095de:	701a      	strb	r2, [r3, #0]
    uint8_t key[16] = { 0 };
 80095e0:	2314      	movs	r3, #20
 80095e2:	18fb      	adds	r3, r7, r3
 80095e4:	2200      	movs	r2, #0
 80095e6:	601a      	str	r2, [r3, #0]
 80095e8:	3304      	adds	r3, #4
 80095ea:	220c      	movs	r2, #12
 80095ec:	2100      	movs	r1, #0
 80095ee:	0018      	movs	r0, r3
 80095f0:	f010 fa6c 	bl	8019acc <memset>

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
 80095f4:	1dbb      	adds	r3, r7, #6
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80095fa:	d10e      	bne.n	800961a <SecureElementDeriveAndStoreKey+0x62>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 80095fc:	1dfb      	adds	r3, r7, #7
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d104      	bne.n	800960e <SecureElementDeriveAndStoreKey+0x56>
 8009604:	230c      	movs	r3, #12
 8009606:	18fb      	adds	r3, r7, r3
 8009608:	789b      	ldrb	r3, [r3, #2]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d003      	beq.n	8009616 <SecureElementDeriveAndStoreKey+0x5e>
 800960e:	1dfb      	adds	r3, r7, #7
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	2b02      	cmp	r3, #2
 8009614:	d101      	bne.n	800961a <SecureElementDeriveAndStoreKey+0x62>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8009616:	2303      	movs	r3, #3
 8009618:	e027      	b.n	800966a <SecureElementDeriveAndStoreKey+0xb2>
        }
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800961a:	2527      	movs	r5, #39	@ 0x27
 800961c:	197c      	adds	r4, r7, r5
 800961e:	2314      	movs	r3, #20
 8009620:	18f9      	adds	r1, r7, r3
 8009622:	1dfb      	adds	r3, r7, #7
 8009624:	781a      	ldrb	r2, [r3, #0]
 8009626:	68b8      	ldr	r0, [r7, #8]
 8009628:	000b      	movs	r3, r1
 800962a:	2110      	movs	r1, #16
 800962c:	f7ff ff5a 	bl	80094e4 <SecureElementAesEncrypt>
 8009630:	0003      	movs	r3, r0
 8009632:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8009634:	197b      	adds	r3, r7, r5
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d002      	beq.n	8009642 <SecureElementDeriveAndStoreKey+0x8a>
    {
        return retval;
 800963c:	197b      	adds	r3, r7, r5
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	e013      	b.n	800966a <SecureElementDeriveAndStoreKey+0xb2>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 8009642:	2527      	movs	r5, #39	@ 0x27
 8009644:	197c      	adds	r4, r7, r5
 8009646:	2314      	movs	r3, #20
 8009648:	18fa      	adds	r2, r7, r3
 800964a:	1dbb      	adds	r3, r7, #6
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	0011      	movs	r1, r2
 8009650:	0018      	movs	r0, r3
 8009652:	f7ff fe5b 	bl	800930c <SecureElementSetKey>
 8009656:	0003      	movs	r3, r0
 8009658:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800965a:	197b      	adds	r3, r7, r5
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d002      	beq.n	8009668 <SecureElementDeriveAndStoreKey+0xb0>
    {
        return retval;
 8009662:	197b      	adds	r3, r7, r5
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	e000      	b.n	800966a <SecureElementDeriveAndStoreKey+0xb2>
    }

    return SECURE_ELEMENT_SUCCESS;
 8009668:	2300      	movs	r3, #0
}
 800966a:	0018      	movs	r0, r3
 800966c:	46bd      	mov	sp, r7
 800966e:	b00a      	add	sp, #40	@ 0x28
 8009670:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009674 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d101      	bne.n	8009686 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8009682:	2302      	movs	r3, #2
 8009684:	e006      	b.n	8009694 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random( );
 8009686:	4b05      	ldr	r3, [pc, #20]	@ (800969c <SecureElementRandomNumber+0x28>)
 8009688:	69db      	ldr	r3, [r3, #28]
 800968a:	4798      	blx	r3
 800968c:	0002      	movs	r2, r0
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 8009692:	2300      	movs	r3, #0
}
 8009694:	0018      	movs	r0, r3
 8009696:	46bd      	mov	sp, r7
 8009698:	b002      	add	sp, #8
 800969a:	bd80      	pop	{r7, pc}
 800969c:	0801adcc 	.word	0x0801adcc

080096a0 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d101      	bne.n	80096b2 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80096ae:	2302      	movs	r3, #2
 80096b0:	e009      	b.n	80096c6 <SecureElementSetDevEui+0x26>
    }
    memcpy1( SeNvmCtx.DevEui, devEui, SE_EUI_SIZE );
 80096b2:	6879      	ldr	r1, [r7, #4]
 80096b4:	4b06      	ldr	r3, [pc, #24]	@ (80096d0 <SecureElementSetDevEui+0x30>)
 80096b6:	2210      	movs	r2, #16
 80096b8:	0018      	movs	r0, r3
 80096ba:	f00b ffed 	bl	8015698 <memcpy1>
    SeNvmCtxChanged( );
 80096be:	4b05      	ldr	r3, [pc, #20]	@ (80096d4 <SecureElementSetDevEui+0x34>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	0018      	movs	r0, r3
 80096c8:	46bd      	mov	sp, r7
 80096ca:	b002      	add	sp, #8
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	46c0      	nop			@ (mov r8, r8)
 80096d0:	2000059c 	.word	0x2000059c
 80096d4:	20000960 	.word	0x20000960

080096d8 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	af00      	add	r7, sp, #0
    return SeNvmCtx.DevEui;
 80096dc:	4b01      	ldr	r3, [pc, #4]	@ (80096e4 <SecureElementGetDevEui+0xc>)
}
 80096de:	0018      	movs	r0, r3
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	2000059c 	.word	0x2000059c

080096e8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d101      	bne.n	80096fa <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80096f6:	2302      	movs	r3, #2
 80096f8:	e009      	b.n	800970e <SecureElementSetJoinEui+0x26>
    }
    memcpy1( SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE );
 80096fa:	6879      	ldr	r1, [r7, #4]
 80096fc:	4b06      	ldr	r3, [pc, #24]	@ (8009718 <SecureElementSetJoinEui+0x30>)
 80096fe:	2210      	movs	r2, #16
 8009700:	0018      	movs	r0, r3
 8009702:	f00b ffc9 	bl	8015698 <memcpy1>
    SeNvmCtxChanged( );
 8009706:	4b05      	ldr	r3, [pc, #20]	@ (800971c <SecureElementSetJoinEui+0x34>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 800970c:	2300      	movs	r3, #0
}
 800970e:	0018      	movs	r0, r3
 8009710:	46bd      	mov	sp, r7
 8009712:	b002      	add	sp, #8
 8009714:	bd80      	pop	{r7, pc}
 8009716:	46c0      	nop			@ (mov r8, r8)
 8009718:	200005ac 	.word	0x200005ac
 800971c:	20000960 	.word	0x20000960

08009720 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 8009720:	b580      	push	{r7, lr}
 8009722:	af00      	add	r7, sp, #0
    return SeNvmCtx.JoinEui;
 8009724:	4b01      	ldr	r3, [pc, #4]	@ (800972c <SecureElementGetJoinEui+0xc>)
}
 8009726:	0018      	movs	r0, r3
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	200005ac 	.word	0x200005ac

08009730 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 8009730:	b5b0      	push	{r4, r5, r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8009736:	f00b fdd4 	bl	80152e2 <TimerGetCurrentTime>
 800973a:	0002      	movs	r2, r0
 800973c:	4b1e      	ldr	r3, [pc, #120]	@ (80097b8 <OnRadioTxDone+0x88>)
 800973e:	601a      	str	r2, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8009740:	4d1e      	ldr	r5, [pc, #120]	@ (80097bc <OnRadioTxDone+0x8c>)
 8009742:	23ce      	movs	r3, #206	@ 0xce
 8009744:	009c      	lsls	r4, r3, #2
 8009746:	003b      	movs	r3, r7
 8009748:	0018      	movs	r0, r3
 800974a:	f00b fbd7 	bl	8014efc <SysTimeGet>
 800974e:	003a      	movs	r2, r7
 8009750:	192b      	adds	r3, r5, r4
 8009752:	ca03      	ldmia	r2!, {r0, r1}
 8009754:	c303      	stmia	r3!, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 8009756:	4b1a      	ldr	r3, [pc, #104]	@ (80097c0 <OnRadioTxDone+0x90>)
 8009758:	781a      	ldrb	r2, [r3, #0]
 800975a:	2110      	movs	r1, #16
 800975c:	430a      	orrs	r2, r1
 800975e:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009760:	4a16      	ldr	r2, [pc, #88]	@ (80097bc <OnRadioTxDone+0x8c>)
 8009762:	23d2      	movs	r3, #210	@ 0xd2
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	58d3      	ldr	r3, [r2, r3]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00c      	beq.n	8009786 <OnRadioTxDone+0x56>
 800976c:	4a13      	ldr	r2, [pc, #76]	@ (80097bc <OnRadioTxDone+0x8c>)
 800976e:	23d2      	movs	r3, #210	@ 0xd2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	58d3      	ldr	r3, [r2, r3]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d005      	beq.n	8009786 <OnRadioTxDone+0x56>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800977a:	4a10      	ldr	r2, [pc, #64]	@ (80097bc <OnRadioTxDone+0x8c>)
 800977c:	23d2      	movs	r3, #210	@ 0xd2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	58d3      	ldr	r3, [r2, r3]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY txDone\n\r" );
 8009786:	2408      	movs	r4, #8
 8009788:	193b      	adds	r3, r7, r4
 800978a:	0018      	movs	r0, r3
 800978c:	f00b fbee 	bl	8014f6c <SysTimeGetMcuTime>
 8009790:	0022      	movs	r2, r4
 8009792:	18bb      	adds	r3, r7, r2
 8009794:	6819      	ldr	r1, [r3, #0]
 8009796:	18bb      	adds	r3, r7, r2
 8009798:	2204      	movs	r2, #4
 800979a:	5e9b      	ldrsh	r3, [r3, r2]
 800979c:	001a      	movs	r2, r3
 800979e:	4b09      	ldr	r3, [pc, #36]	@ (80097c4 <OnRadioTxDone+0x94>)
 80097a0:	0018      	movs	r0, r3
 80097a2:	f00b fe6f 	bl	8015484 <TraceSend>
 80097a6:	4b08      	ldr	r3, [pc, #32]	@ (80097c8 <OnRadioTxDone+0x98>)
 80097a8:	0018      	movs	r0, r3
 80097aa:	f00b fe6b 	bl	8015484 <TraceSend>
#endif
}
 80097ae:	46c0      	nop			@ (mov r8, r8)
 80097b0:	46bd      	mov	sp, r7
 80097b2:	b004      	add	sp, #16
 80097b4:	bdb0      	pop	{r4, r5, r7, pc}
 80097b6:	46c0      	nop			@ (mov r8, r8)
 80097b8:	20001004 	.word	0x20001004
 80097bc:	20000964 	.word	0x20000964
 80097c0:	20001000 	.word	0x20001000
 80097c4:	0801a71c 	.word	0x0801a71c
 80097c8:	0801a728 	.word	0x0801a728

080097cc <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 80097cc:	b5b0      	push	{r4, r5, r7, lr}
 80097ce:	b086      	sub	sp, #24
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	000c      	movs	r4, r1
 80097d6:	0010      	movs	r0, r2
 80097d8:	0019      	movs	r1, r3
 80097da:	250a      	movs	r5, #10
 80097dc:	197b      	adds	r3, r7, r5
 80097de:	1c22      	adds	r2, r4, #0
 80097e0:	801a      	strh	r2, [r3, #0]
 80097e2:	2408      	movs	r4, #8
 80097e4:	193b      	adds	r3, r7, r4
 80097e6:	1c02      	adds	r2, r0, #0
 80097e8:	801a      	strh	r2, [r3, #0]
 80097ea:	1dfb      	adds	r3, r7, #7
 80097ec:	1c0a      	adds	r2, r1, #0
 80097ee:	701a      	strb	r2, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80097f0:	f00b fd77 	bl	80152e2 <TimerGetCurrentTime>
 80097f4:	0002      	movs	r2, r0
 80097f6:	4b20      	ldr	r3, [pc, #128]	@ (8009878 <OnRadioRxDone+0xac>)
 80097f8:	601a      	str	r2, [r3, #0]
    RxDoneParams.Payload = payload;
 80097fa:	4b1f      	ldr	r3, [pc, #124]	@ (8009878 <OnRadioRxDone+0xac>)
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	605a      	str	r2, [r3, #4]
    RxDoneParams.Size = size;
 8009800:	4b1d      	ldr	r3, [pc, #116]	@ (8009878 <OnRadioRxDone+0xac>)
 8009802:	197a      	adds	r2, r7, r5
 8009804:	8812      	ldrh	r2, [r2, #0]
 8009806:	811a      	strh	r2, [r3, #8]
    RxDoneParams.Rssi = rssi;
 8009808:	4b1b      	ldr	r3, [pc, #108]	@ (8009878 <OnRadioRxDone+0xac>)
 800980a:	193a      	adds	r2, r7, r4
 800980c:	8812      	ldrh	r2, [r2, #0]
 800980e:	815a      	strh	r2, [r3, #10]
    RxDoneParams.Snr = snr;
 8009810:	4b19      	ldr	r3, [pc, #100]	@ (8009878 <OnRadioRxDone+0xac>)
 8009812:	1dfa      	adds	r2, r7, #7
 8009814:	7812      	ldrb	r2, [r2, #0]
 8009816:	731a      	strb	r2, [r3, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 8009818:	4b18      	ldr	r3, [pc, #96]	@ (800987c <OnRadioRxDone+0xb0>)
 800981a:	781a      	ldrb	r2, [r3, #0]
 800981c:	2108      	movs	r1, #8
 800981e:	430a      	orrs	r2, r1
 8009820:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009822:	4a17      	ldr	r2, [pc, #92]	@ (8009880 <OnRadioRxDone+0xb4>)
 8009824:	23d2      	movs	r3, #210	@ 0xd2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	58d3      	ldr	r3, [r2, r3]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00c      	beq.n	8009848 <OnRadioRxDone+0x7c>
 800982e:	4a14      	ldr	r2, [pc, #80]	@ (8009880 <OnRadioRxDone+0xb4>)
 8009830:	23d2      	movs	r3, #210	@ 0xd2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	58d3      	ldr	r3, [r2, r3]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d005      	beq.n	8009848 <OnRadioRxDone+0x7c>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800983c:	4a10      	ldr	r2, [pc, #64]	@ (8009880 <OnRadioRxDone+0xb4>)
 800983e:	23d2      	movs	r3, #210	@ 0xd2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	58d3      	ldr	r3, [r2, r3]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY rxDone\n\r" );
 8009848:	2410      	movs	r4, #16
 800984a:	193b      	adds	r3, r7, r4
 800984c:	0018      	movs	r0, r3
 800984e:	f00b fb8d 	bl	8014f6c <SysTimeGetMcuTime>
 8009852:	0022      	movs	r2, r4
 8009854:	18bb      	adds	r3, r7, r2
 8009856:	6819      	ldr	r1, [r3, #0]
 8009858:	18bb      	adds	r3, r7, r2
 800985a:	2204      	movs	r2, #4
 800985c:	5e9b      	ldrsh	r3, [r3, r2]
 800985e:	001a      	movs	r2, r3
 8009860:	4b08      	ldr	r3, [pc, #32]	@ (8009884 <OnRadioRxDone+0xb8>)
 8009862:	0018      	movs	r0, r3
 8009864:	f00b fe0e 	bl	8015484 <TraceSend>
 8009868:	4b07      	ldr	r3, [pc, #28]	@ (8009888 <OnRadioRxDone+0xbc>)
 800986a:	0018      	movs	r0, r3
 800986c:	f00b fe0a 	bl	8015484 <TraceSend>
#endif
}
 8009870:	46c0      	nop			@ (mov r8, r8)
 8009872:	46bd      	mov	sp, r7
 8009874:	b006      	add	sp, #24
 8009876:	bdb0      	pop	{r4, r5, r7, pc}
 8009878:	20001008 	.word	0x20001008
 800987c:	20001000 	.word	0x20001000
 8009880:	20000964 	.word	0x20000964
 8009884:	0801a71c 	.word	0x0801a71c
 8009888:	0801a738 	.word	0x0801a738

0800988c <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8009892:	4b17      	ldr	r3, [pc, #92]	@ (80098f0 <OnRadioTxTimeout+0x64>)
 8009894:	781a      	ldrb	r2, [r3, #0]
 8009896:	2104      	movs	r1, #4
 8009898:	430a      	orrs	r2, r1
 800989a:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800989c:	4a15      	ldr	r2, [pc, #84]	@ (80098f4 <OnRadioTxTimeout+0x68>)
 800989e:	23d2      	movs	r3, #210	@ 0xd2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	58d3      	ldr	r3, [r2, r3]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00c      	beq.n	80098c2 <OnRadioTxTimeout+0x36>
 80098a8:	4a12      	ldr	r2, [pc, #72]	@ (80098f4 <OnRadioTxTimeout+0x68>)
 80098aa:	23d2      	movs	r3, #210	@ 0xd2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	58d3      	ldr	r3, [r2, r3]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d005      	beq.n	80098c2 <OnRadioTxTimeout+0x36>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80098b6:	4a0f      	ldr	r2, [pc, #60]	@ (80098f4 <OnRadioTxTimeout+0x68>)
 80098b8:	23d2      	movs	r3, #210	@ 0xd2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	58d3      	ldr	r3, [r2, r3]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY txTimeOut\n\r" );
 80098c2:	003b      	movs	r3, r7
 80098c4:	0018      	movs	r0, r3
 80098c6:	f00b fb51 	bl	8014f6c <SysTimeGetMcuTime>
 80098ca:	003b      	movs	r3, r7
 80098cc:	6819      	ldr	r1, [r3, #0]
 80098ce:	003b      	movs	r3, r7
 80098d0:	2204      	movs	r2, #4
 80098d2:	5e9b      	ldrsh	r3, [r3, r2]
 80098d4:	001a      	movs	r2, r3
 80098d6:	4b08      	ldr	r3, [pc, #32]	@ (80098f8 <OnRadioTxTimeout+0x6c>)
 80098d8:	0018      	movs	r0, r3
 80098da:	f00b fdd3 	bl	8015484 <TraceSend>
 80098de:	4b07      	ldr	r3, [pc, #28]	@ (80098fc <OnRadioTxTimeout+0x70>)
 80098e0:	0018      	movs	r0, r3
 80098e2:	f00b fdcf 	bl	8015484 <TraceSend>
#endif
}
 80098e6:	46c0      	nop			@ (mov r8, r8)
 80098e8:	46bd      	mov	sp, r7
 80098ea:	b002      	add	sp, #8
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	46c0      	nop			@ (mov r8, r8)
 80098f0:	20001000 	.word	0x20001000
 80098f4:	20000964 	.word	0x20000964
 80098f8:	0801a71c 	.word	0x0801a71c
 80098fc:	0801a748 	.word	0x0801a748

08009900 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8009900:	b580      	push	{r7, lr}
 8009902:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 8009904:	4b0d      	ldr	r3, [pc, #52]	@ (800993c <OnRadioRxError+0x3c>)
 8009906:	781a      	ldrb	r2, [r3, #0]
 8009908:	2102      	movs	r1, #2
 800990a:	430a      	orrs	r2, r1
 800990c:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800990e:	4a0c      	ldr	r2, [pc, #48]	@ (8009940 <OnRadioRxError+0x40>)
 8009910:	23d2      	movs	r3, #210	@ 0xd2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	58d3      	ldr	r3, [r2, r3]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00c      	beq.n	8009934 <OnRadioRxError+0x34>
 800991a:	4a09      	ldr	r2, [pc, #36]	@ (8009940 <OnRadioRxError+0x40>)
 800991c:	23d2      	movs	r3, #210	@ 0xd2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	58d3      	ldr	r3, [r2, r3]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d005      	beq.n	8009934 <OnRadioRxError+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009928:	4a05      	ldr	r2, [pc, #20]	@ (8009940 <OnRadioRxError+0x40>)
 800992a:	23d2      	movs	r3, #210	@ 0xd2
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	58d3      	ldr	r3, [r2, r3]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	4798      	blx	r3
    }
}
 8009934:	46c0      	nop			@ (mov r8, r8)
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	46c0      	nop			@ (mov r8, r8)
 800993c:	20001000 	.word	0x20001000
 8009940:	20000964 	.word	0x20000964

08009944 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800994a:	4b17      	ldr	r3, [pc, #92]	@ (80099a8 <OnRadioRxTimeout+0x64>)
 800994c:	781a      	ldrb	r2, [r3, #0]
 800994e:	2101      	movs	r1, #1
 8009950:	430a      	orrs	r2, r1
 8009952:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009954:	4a15      	ldr	r2, [pc, #84]	@ (80099ac <OnRadioRxTimeout+0x68>)
 8009956:	23d2      	movs	r3, #210	@ 0xd2
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	58d3      	ldr	r3, [r2, r3]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d00c      	beq.n	800997a <OnRadioRxTimeout+0x36>
 8009960:	4a12      	ldr	r2, [pc, #72]	@ (80099ac <OnRadioRxTimeout+0x68>)
 8009962:	23d2      	movs	r3, #210	@ 0xd2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	58d3      	ldr	r3, [r2, r3]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d005      	beq.n	800997a <OnRadioRxTimeout+0x36>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800996e:	4a0f      	ldr	r2, [pc, #60]	@ (80099ac <OnRadioRxTimeout+0x68>)
 8009970:	23d2      	movs	r3, #210	@ 0xd2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	58d3      	ldr	r3, [r2, r3]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY rxTimeOut\n\r" );
 800997a:	003b      	movs	r3, r7
 800997c:	0018      	movs	r0, r3
 800997e:	f00b faf5 	bl	8014f6c <SysTimeGetMcuTime>
 8009982:	003b      	movs	r3, r7
 8009984:	6819      	ldr	r1, [r3, #0]
 8009986:	003b      	movs	r3, r7
 8009988:	2204      	movs	r2, #4
 800998a:	5e9b      	ldrsh	r3, [r3, r2]
 800998c:	001a      	movs	r2, r3
 800998e:	4b08      	ldr	r3, [pc, #32]	@ (80099b0 <OnRadioRxTimeout+0x6c>)
 8009990:	0018      	movs	r0, r3
 8009992:	f00b fd77 	bl	8015484 <TraceSend>
 8009996:	4b07      	ldr	r3, [pc, #28]	@ (80099b4 <OnRadioRxTimeout+0x70>)
 8009998:	0018      	movs	r0, r3
 800999a:	f00b fd73 	bl	8015484 <TraceSend>
#endif
}
 800999e:	46c0      	nop			@ (mov r8, r8)
 80099a0:	46bd      	mov	sp, r7
 80099a2:	b002      	add	sp, #8
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	46c0      	nop			@ (mov r8, r8)
 80099a8:	20001000 	.word	0x20001000
 80099ac:	20000964 	.word	0x20000964
 80099b0:	0801a71c 	.word	0x0801a71c
 80099b4:	0801a758 	.word	0x0801a758

080099b8 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80099bc:	4b0a      	ldr	r3, [pc, #40]	@ (80099e8 <UpdateRxSlotIdleState+0x30>)
 80099be:	4a0b      	ldr	r2, [pc, #44]	@ (80099ec <UpdateRxSlotIdleState+0x34>)
 80099c0:	589b      	ldr	r3, [r3, r2]
 80099c2:	22f0      	movs	r2, #240	@ 0xf0
 80099c4:	5c9b      	ldrb	r3, [r3, r2]
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	d005      	beq.n	80099d6 <UpdateRxSlotIdleState+0x1e>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 80099ca:	4a07      	ldr	r2, [pc, #28]	@ (80099e8 <UpdateRxSlotIdleState+0x30>)
 80099cc:	2390      	movs	r3, #144	@ 0x90
 80099ce:	00db      	lsls	r3, r3, #3
 80099d0:	2106      	movs	r1, #6
 80099d2:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 80099d4:	e004      	b.n	80099e0 <UpdateRxSlotIdleState+0x28>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 80099d6:	4a04      	ldr	r2, [pc, #16]	@ (80099e8 <UpdateRxSlotIdleState+0x30>)
 80099d8:	2390      	movs	r3, #144	@ 0x90
 80099da:	00db      	lsls	r3, r3, #3
 80099dc:	2102      	movs	r1, #2
 80099de:	54d1      	strb	r1, [r2, r3]
}
 80099e0:	46c0      	nop			@ (mov r8, r8)
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	46c0      	nop			@ (mov r8, r8)
 80099e8:	20000964 	.word	0x20000964
 80099ec:	00000484 	.word	0x00000484

080099f0 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80099f6:	4b4a      	ldr	r3, [pc, #296]	@ (8009b20 <ProcessRadioTxDone+0x130>)
 80099f8:	4a4a      	ldr	r2, [pc, #296]	@ (8009b24 <ProcessRadioTxDone+0x134>)
 80099fa:	589b      	ldr	r3, [r3, r2]
 80099fc:	22f0      	movs	r2, #240	@ 0xf0
 80099fe:	5c9b      	ldrb	r3, [r3, r2]
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d002      	beq.n	8009a0a <ProcessRadioTxDone+0x1a>
    {
        Radio.Sleep( );
 8009a04:	4b48      	ldr	r3, [pc, #288]	@ (8009b28 <ProcessRadioTxDone+0x138>)
 8009a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a08:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8009a0a:	4a45      	ldr	r2, [pc, #276]	@ (8009b20 <ProcessRadioTxDone+0x130>)
 8009a0c:	23ec      	movs	r3, #236	@ 0xec
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	58d2      	ldr	r2, [r2, r3]
 8009a12:	4b46      	ldr	r3, [pc, #280]	@ (8009b2c <ProcessRadioTxDone+0x13c>)
 8009a14:	0011      	movs	r1, r2
 8009a16:	0018      	movs	r0, r3
 8009a18:	f00b fc3e 	bl	8015298 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8009a1c:	4b43      	ldr	r3, [pc, #268]	@ (8009b2c <ProcessRadioTxDone+0x13c>)
 8009a1e:	0018      	movs	r0, r3
 8009a20:	f00b fade 	bl	8014fe0 <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8009a24:	4a3e      	ldr	r2, [pc, #248]	@ (8009b20 <ProcessRadioTxDone+0x130>)
 8009a26:	23ed      	movs	r3, #237	@ 0xed
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	58d2      	ldr	r2, [r2, r3]
 8009a2c:	4b40      	ldr	r3, [pc, #256]	@ (8009b30 <ProcessRadioTxDone+0x140>)
 8009a2e:	0011      	movs	r1, r2
 8009a30:	0018      	movs	r0, r3
 8009a32:	f00b fc31 	bl	8015298 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8009a36:	4b3e      	ldr	r3, [pc, #248]	@ (8009b30 <ProcessRadioTxDone+0x140>)
 8009a38:	0018      	movs	r0, r3
 8009a3a:	f00b fad1 	bl	8014fe0 <TimerStart>

    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8009a3e:	4b38      	ldr	r3, [pc, #224]	@ (8009b20 <ProcessRadioTxDone+0x130>)
 8009a40:	4a38      	ldr	r2, [pc, #224]	@ (8009b24 <ProcessRadioTxDone+0x134>)
 8009a42:	589b      	ldr	r3, [r3, r2]
 8009a44:	22f0      	movs	r2, #240	@ 0xf0
 8009a46:	5c9b      	ldrb	r3, [r3, r2]
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	d004      	beq.n	8009a56 <ProcessRadioTxDone+0x66>
 8009a4c:	4b34      	ldr	r3, [pc, #208]	@ (8009b20 <ProcessRadioTxDone+0x130>)
 8009a4e:	4a39      	ldr	r2, [pc, #228]	@ (8009b34 <ProcessRadioTxDone+0x144>)
 8009a50:	5c9b      	ldrb	r3, [r3, r2]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d021      	beq.n	8009a9a <ProcessRadioTxDone+0xaa>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8009a56:	210c      	movs	r1, #12
 8009a58:	187b      	adds	r3, r7, r1
 8009a5a:	2216      	movs	r2, #22
 8009a5c:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009a5e:	4b30      	ldr	r3, [pc, #192]	@ (8009b20 <ProcessRadioTxDone+0x130>)
 8009a60:	4a30      	ldr	r2, [pc, #192]	@ (8009b24 <ProcessRadioTxDone+0x134>)
 8009a62:	589b      	ldr	r3, [r3, r2]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	187a      	adds	r2, r7, r1
 8009a68:	0011      	movs	r1, r2
 8009a6a:	0018      	movs	r0, r3
 8009a6c:	f007 fdbb 	bl	80115e6 <RegionGetPhyParam>
 8009a70:	0003      	movs	r3, r0
 8009a72:	001a      	movs	r2, r3
 8009a74:	2108      	movs	r1, #8
 8009a76:	187b      	adds	r3, r7, r1
 8009a78:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8009a7a:	4a29      	ldr	r2, [pc, #164]	@ (8009b20 <ProcessRadioTxDone+0x130>)
 8009a7c:	23ed      	movs	r3, #237	@ 0xed
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	58d2      	ldr	r2, [r2, r3]
 8009a82:	187b      	adds	r3, r7, r1
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	18d2      	adds	r2, r2, r3
 8009a88:	4b2b      	ldr	r3, [pc, #172]	@ (8009b38 <ProcessRadioTxDone+0x148>)
 8009a8a:	0011      	movs	r1, r2
 8009a8c:	0018      	movs	r0, r3
 8009a8e:	f00b fc03 	bl	8015298 <TimerSetValue>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8009a92:	4b29      	ldr	r3, [pc, #164]	@ (8009b38 <ProcessRadioTxDone+0x148>)
 8009a94:	0018      	movs	r0, r3
 8009a96:	f00b faa3 	bl	8014fe0 <TimerStart>
    }

    // Store last Tx channel
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 8009a9a:	4b21      	ldr	r3, [pc, #132]	@ (8009b20 <ProcessRadioTxDone+0x130>)
 8009a9c:	4a21      	ldr	r2, [pc, #132]	@ (8009b24 <ProcessRadioTxDone+0x134>)
 8009a9e:	589a      	ldr	r2, [r3, r2]
 8009aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8009b20 <ProcessRadioTxDone+0x130>)
 8009aa2:	4926      	ldr	r1, [pc, #152]	@ (8009b3c <ProcessRadioTxDone+0x14c>)
 8009aa4:	5c59      	ldrb	r1, [r3, r1]
 8009aa6:	239f      	movs	r3, #159	@ 0x9f
 8009aa8:	005b      	lsls	r3, r3, #1
 8009aaa:	54d1      	strb	r1, [r2, r3]
    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 8009aac:	4b1c      	ldr	r3, [pc, #112]	@ (8009b20 <ProcessRadioTxDone+0x130>)
 8009aae:	4a23      	ldr	r2, [pc, #140]	@ (8009b3c <ProcessRadioTxDone+0x14c>)
 8009ab0:	5c9a      	ldrb	r2, [r3, r2]
 8009ab2:	003b      	movs	r3, r7
 8009ab4:	701a      	strb	r2, [r3, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8009ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8009b20 <ProcessRadioTxDone+0x130>)
 8009ab8:	4a1a      	ldr	r2, [pc, #104]	@ (8009b24 <ProcessRadioTxDone+0x134>)
 8009aba:	589a      	ldr	r2, [r3, r2]
 8009abc:	23ea      	movs	r3, #234	@ 0xea
 8009abe:	005b      	lsls	r3, r3, #1
 8009ac0:	5cd3      	ldrb	r3, [r2, r3]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d103      	bne.n	8009ace <ProcessRadioTxDone+0xde>
    {
        txDone.Joined  = false;
 8009ac6:	003b      	movs	r3, r7
 8009ac8:	2200      	movs	r2, #0
 8009aca:	705a      	strb	r2, [r3, #1]
 8009acc:	e002      	b.n	8009ad4 <ProcessRadioTxDone+0xe4>
    }
    else
    {
        txDone.Joined  = true;
 8009ace:	003b      	movs	r3, r7
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	705a      	strb	r2, [r3, #1]
    }
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8009ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8009b40 <ProcessRadioTxDone+0x150>)
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	003b      	movs	r3, r7
 8009ada:	605a      	str	r2, [r3, #4]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 8009adc:	4b10      	ldr	r3, [pc, #64]	@ (8009b20 <ProcessRadioTxDone+0x130>)
 8009ade:	4a11      	ldr	r2, [pc, #68]	@ (8009b24 <ProcessRadioTxDone+0x134>)
 8009ae0:	589b      	ldr	r3, [r3, r2]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	003a      	movs	r2, r7
 8009ae6:	0011      	movs	r1, r2
 8009ae8:	0018      	movs	r0, r3
 8009aea:	f007 fda3 	bl	8011634 <RegionSetBandTxDone>
    // Update Aggregated last tx done time
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 8009aee:	4b0c      	ldr	r3, [pc, #48]	@ (8009b20 <ProcessRadioTxDone+0x130>)
 8009af0:	4a0c      	ldr	r2, [pc, #48]	@ (8009b24 <ProcessRadioTxDone+0x134>)
 8009af2:	589a      	ldr	r2, [r3, r2]
 8009af4:	4b12      	ldr	r3, [pc, #72]	@ (8009b40 <ProcessRadioTxDone+0x150>)
 8009af6:	6819      	ldr	r1, [r3, #0]
 8009af8:	23e2      	movs	r3, #226	@ 0xe2
 8009afa:	005b      	lsls	r3, r3, #1
 8009afc:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NodeAckRequested == false )
 8009afe:	4b08      	ldr	r3, [pc, #32]	@ (8009b20 <ProcessRadioTxDone+0x130>)
 8009b00:	4a0c      	ldr	r2, [pc, #48]	@ (8009b34 <ProcessRadioTxDone+0x144>)
 8009b02:	5c9b      	ldrb	r3, [r3, r2]
 8009b04:	2201      	movs	r2, #1
 8009b06:	4053      	eors	r3, r2
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d003      	beq.n	8009b16 <ProcessRadioTxDone+0x126>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009b0e:	4b04      	ldr	r3, [pc, #16]	@ (8009b20 <ProcessRadioTxDone+0x130>)
 8009b10:	4a0c      	ldr	r2, [pc, #48]	@ (8009b44 <ProcessRadioTxDone+0x154>)
 8009b12:	2100      	movs	r1, #0
 8009b14:	5499      	strb	r1, [r3, r2]
    }
}
 8009b16:	46c0      	nop			@ (mov r8, r8)
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	b004      	add	sp, #16
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	46c0      	nop			@ (mov r8, r8)
 8009b20:	20000964 	.word	0x20000964
 8009b24:	00000484 	.word	0x00000484
 8009b28:	0801adcc 	.word	0x0801adcc
 8009b2c:	20000ce4 	.word	0x20000ce4
 8009b30:	20000cfc 	.word	0x20000cfc
 8009b34:	00000414 	.word	0x00000414
 8009b38:	20000d5c 	.word	0x20000d5c
 8009b3c:	00000415 	.word	0x00000415
 8009b40:	20001004 	.word	0x20001004
 8009b44:	0000043d 	.word	0x0000043d

08009b48 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8009b4c:	4a11      	ldr	r2, [pc, #68]	@ (8009b94 <PrepareRxDoneAbort+0x4c>)
 8009b4e:	23d0      	movs	r3, #208	@ 0xd0
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	58d3      	ldr	r3, [r2, r3]
 8009b54:	2280      	movs	r2, #128	@ 0x80
 8009b56:	431a      	orrs	r2, r3
 8009b58:	0011      	movs	r1, r2
 8009b5a:	4a0e      	ldr	r2, [pc, #56]	@ (8009b94 <PrepareRxDoneAbort+0x4c>)
 8009b5c:	23d0      	movs	r3, #208	@ 0xd0
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NodeAckRequested == true )
 8009b62:	4b0c      	ldr	r3, [pc, #48]	@ (8009b94 <PrepareRxDoneAbort+0x4c>)
 8009b64:	4a0c      	ldr	r2, [pc, #48]	@ (8009b98 <PrepareRxDoneAbort+0x50>)
 8009b66:	5c9b      	ldrb	r3, [r3, r2]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d002      	beq.n	8009b72 <PrepareRxDoneAbort+0x2a>
    {
        OnAckTimeoutTimerEvent( NULL );
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	f001 f9bb 	bl	800aee8 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8009b72:	4b08      	ldr	r3, [pc, #32]	@ (8009b94 <PrepareRxDoneAbort+0x4c>)
 8009b74:	4a09      	ldr	r2, [pc, #36]	@ (8009b9c <PrepareRxDoneAbort+0x54>)
 8009b76:	5c99      	ldrb	r1, [r3, r2]
 8009b78:	2002      	movs	r0, #2
 8009b7a:	4301      	orrs	r1, r0
 8009b7c:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009b7e:	4b05      	ldr	r3, [pc, #20]	@ (8009b94 <PrepareRxDoneAbort+0x4c>)
 8009b80:	4a06      	ldr	r2, [pc, #24]	@ (8009b9c <PrepareRxDoneAbort+0x54>)
 8009b82:	5c99      	ldrb	r1, [r3, r2]
 8009b84:	2020      	movs	r0, #32
 8009b86:	4301      	orrs	r1, r0
 8009b88:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 8009b8a:	f7ff ff15 	bl	80099b8 <UpdateRxSlotIdleState>
}
 8009b8e:	46c0      	nop			@ (mov r8, r8)
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	20000964 	.word	0x20000964
 8009b98:	00000414 	.word	0x00000414
 8009b9c:	00000481 	.word	0x00000481

08009ba0 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8009ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ba2:	b0a7      	sub	sp, #156	@ 0x9c
 8009ba4:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8009ba6:	2380      	movs	r3, #128	@ 0x80
 8009ba8:	18fb      	adds	r3, r7, r3
 8009baa:	2213      	movs	r2, #19
 8009bac:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 8009bae:	4bdd      	ldr	r3, [pc, #884]	@ (8009f24 <ProcessRadioRxDone+0x384>)
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint16_t size = RxDoneParams.Size;
 8009bb4:	267a      	movs	r6, #122	@ 0x7a
 8009bb6:	19bb      	adds	r3, r7, r6
 8009bb8:	4ada      	ldr	r2, [pc, #872]	@ (8009f24 <ProcessRadioRxDone+0x384>)
 8009bba:	8912      	ldrh	r2, [r2, #8]
 8009bbc:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
 8009bbe:	2478      	movs	r4, #120	@ 0x78
 8009bc0:	193b      	adds	r3, r7, r4
 8009bc2:	4ad8      	ldr	r2, [pc, #864]	@ (8009f24 <ProcessRadioRxDone+0x384>)
 8009bc4:	8952      	ldrh	r2, [r2, #10]
 8009bc6:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
 8009bc8:	2577      	movs	r5, #119	@ 0x77
 8009bca:	197b      	adds	r3, r7, r5
 8009bcc:	4ad5      	ldr	r2, [pc, #852]	@ (8009f24 <ProcessRadioRxDone+0x384>)
 8009bce:	7b12      	ldrb	r2, [r2, #12]
 8009bd0:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
 8009bd2:	2376      	movs	r3, #118	@ 0x76
 8009bd4:	18fb      	adds	r3, r7, r3
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	60bb      	str	r3, [r7, #8]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8009bde:	4bd2      	ldr	r3, [pc, #840]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009be0:	4ad2      	ldr	r2, [pc, #840]	@ (8009f2c <ProcessRadioRxDone+0x38c>)
 8009be2:	589b      	ldr	r3, [r3, r2]
 8009be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009be6:	2284      	movs	r2, #132	@ 0x84
 8009be8:	18ba      	adds	r2, r7, r2
 8009bea:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
 8009bec:	2383      	movs	r3, #131	@ 0x83
 8009bee:	18fb      	adds	r3, r7, r3
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8009bf4:	2382      	movs	r3, #130	@ 0x82
 8009bf6:	18fb      	adds	r3, r7, r3
 8009bf8:	2204      	movs	r2, #4
 8009bfa:	701a      	strb	r2, [r3, #0]
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 8009bfc:	4aca      	ldr	r2, [pc, #808]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009bfe:	2388      	movs	r3, #136	@ 0x88
 8009c00:	00db      	lsls	r3, r3, #3
 8009c02:	2100      	movs	r1, #0
 8009c04:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 8009c06:	4bc8      	ldr	r3, [pc, #800]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009c08:	193a      	adds	r2, r7, r4
 8009c0a:	49c9      	ldr	r1, [pc, #804]	@ (8009f30 <ProcessRadioRxDone+0x390>)
 8009c0c:	8812      	ldrh	r2, [r2, #0]
 8009c0e:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
 8009c10:	4bc5      	ldr	r3, [pc, #788]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009c12:	197a      	adds	r2, r7, r5
 8009c14:	49c7      	ldr	r1, [pc, #796]	@ (8009f34 <ProcessRadioRxDone+0x394>)
 8009c16:	7812      	ldrb	r2, [r2, #0]
 8009c18:	545a      	strb	r2, [r3, r1]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 8009c1a:	4ac3      	ldr	r2, [pc, #780]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009c1c:	2390      	movs	r3, #144	@ 0x90
 8009c1e:	00db      	lsls	r3, r3, #3
 8009c20:	5cd1      	ldrb	r1, [r2, r3]
 8009c22:	4bc1      	ldr	r3, [pc, #772]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009c24:	4ac4      	ldr	r2, [pc, #784]	@ (8009f38 <ProcessRadioRxDone+0x398>)
 8009c26:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
 8009c28:	4bbf      	ldr	r3, [pc, #764]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009c2a:	4ac4      	ldr	r2, [pc, #784]	@ (8009f3c <ProcessRadioRxDone+0x39c>)
 8009c2c:	2100      	movs	r1, #0
 8009c2e:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
 8009c30:	4bbd      	ldr	r3, [pc, #756]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009c32:	4ac3      	ldr	r2, [pc, #780]	@ (8009f40 <ProcessRadioRxDone+0x3a0>)
 8009c34:	2100      	movs	r1, #0
 8009c36:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
 8009c38:	4bbb      	ldr	r3, [pc, #748]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009c3a:	4ac2      	ldr	r2, [pc, #776]	@ (8009f44 <ProcessRadioRxDone+0x3a4>)
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 8009c40:	4bb9      	ldr	r3, [pc, #740]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009c42:	4ac1      	ldr	r2, [pc, #772]	@ (8009f48 <ProcessRadioRxDone+0x3a8>)
 8009c44:	2100      	movs	r1, #0
 8009c46:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 8009c48:	4ab7      	ldr	r2, [pc, #732]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009c4a:	2385      	movs	r3, #133	@ 0x85
 8009c4c:	00db      	lsls	r3, r3, #3
 8009c4e:	2100      	movs	r1, #0
 8009c50:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxData = false;
 8009c52:	4bb5      	ldr	r3, [pc, #724]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009c54:	4abd      	ldr	r2, [pc, #756]	@ (8009f4c <ProcessRadioRxDone+0x3ac>)
 8009c56:	2100      	movs	r1, #0
 8009c58:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
 8009c5a:	4bb3      	ldr	r3, [pc, #716]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009c5c:	4abc      	ldr	r2, [pc, #752]	@ (8009f50 <ProcessRadioRxDone+0x3b0>)
 8009c5e:	2100      	movs	r1, #0
 8009c60:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8009c62:	4ab1      	ldr	r2, [pc, #708]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009c64:	2386      	movs	r3, #134	@ 0x86
 8009c66:	00db      	lsls	r3, r3, #3
 8009c68:	2100      	movs	r1, #0
 8009c6a:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8009c6c:	4bae      	ldr	r3, [pc, #696]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009c6e:	4ab9      	ldr	r2, [pc, #740]	@ (8009f54 <ProcessRadioRxDone+0x3b4>)
 8009c70:	2100      	movs	r1, #0
 8009c72:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 8009c74:	4bac      	ldr	r3, [pc, #688]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009c76:	4ab8      	ldr	r2, [pc, #736]	@ (8009f58 <ProcessRadioRxDone+0x3b8>)
 8009c78:	2100      	movs	r1, #0
 8009c7a:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8009c7c:	4aaa      	ldr	r2, [pc, #680]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009c7e:	2387      	movs	r3, #135	@ 0x87
 8009c80:	00db      	lsls	r3, r3, #3
 8009c82:	2100      	movs	r1, #0
 8009c84:	54d1      	strb	r1, [r2, r3]

    Radio.Sleep( );
 8009c86:	4bb5      	ldr	r3, [pc, #724]	@ (8009f5c <ProcessRadioRxDone+0x3bc>)
 8009c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c8a:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 8009c8c:	4bb4      	ldr	r3, [pc, #720]	@ (8009f60 <ProcessRadioRxDone+0x3c0>)
 8009c8e:	0018      	movs	r0, r3
 8009c90:	f00b fa84 	bl	801519c <TimerStop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8009c94:	19bb      	adds	r3, r7, r6
 8009c96:	881a      	ldrh	r2, [r3, #0]
 8009c98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c9a:	0011      	movs	r1, r2
 8009c9c:	0018      	movs	r0, r3
 8009c9e:	f005 fa5b 	bl	800f158 <LoRaMacClassBRxBeacon>
 8009ca2:	1e03      	subs	r3, r0, #0
 8009ca4:	d00c      	beq.n	8009cc0 <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8009ca6:	4ba0      	ldr	r3, [pc, #640]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009ca8:	193a      	adds	r2, r7, r4
 8009caa:	49ae      	ldr	r1, [pc, #696]	@ (8009f64 <ProcessRadioRxDone+0x3c4>)
 8009cac:	8812      	ldrh	r2, [r2, #0]
 8009cae:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8009cb0:	4a9d      	ldr	r2, [pc, #628]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009cb2:	1979      	adds	r1, r7, r5
 8009cb4:	238f      	movs	r3, #143	@ 0x8f
 8009cb6:	00db      	lsls	r3, r3, #3
 8009cb8:	7809      	ldrb	r1, [r1, #0]
 8009cba:	54d1      	strb	r1, [r2, r3]
        return;
 8009cbc:	f000 fc84 	bl	800a5c8 <ProcessRadioRxDone+0xa28>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8009cc0:	4b99      	ldr	r3, [pc, #612]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009cc2:	4a9a      	ldr	r2, [pc, #616]	@ (8009f2c <ProcessRadioRxDone+0x38c>)
 8009cc4:	589b      	ldr	r3, [r3, r2]
 8009cc6:	22f0      	movs	r2, #240	@ 0xf0
 8009cc8:	5c9b      	ldrb	r3, [r3, r2]
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d11c      	bne.n	8009d08 <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009cce:	f005 fa55 	bl	800f17c <LoRaMacClassBIsPingExpected>
 8009cd2:	1e03      	subs	r3, r0, #0
 8009cd4:	d00a      	beq.n	8009cec <ProcessRadioRxDone+0x14c>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009cd6:	2000      	movs	r0, #0
 8009cd8:	f005 fa0c 	bl	800f0f4 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8009cdc:	2000      	movs	r0, #0
 8009cde:	f005 fa2b 	bl	800f138 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8009ce2:	4b91      	ldr	r3, [pc, #580]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009ce4:	4a94      	ldr	r2, [pc, #592]	@ (8009f38 <ProcessRadioRxDone+0x398>)
 8009ce6:	2104      	movs	r1, #4
 8009ce8:	5499      	strb	r1, [r3, r2]
 8009cea:	e00d      	b.n	8009d08 <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009cec:	f005 fa4c 	bl	800f188 <LoRaMacClassBIsMulticastExpected>
 8009cf0:	1e03      	subs	r3, r0, #0
 8009cf2:	d009      	beq.n	8009d08 <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	f005 fa07 	bl	800f108 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	f005 fa24 	bl	800f148 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8009d00:	4b89      	ldr	r3, [pc, #548]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009d02:	4a8d      	ldr	r2, [pc, #564]	@ (8009f38 <ProcessRadioRxDone+0x398>)
 8009d04:	2105      	movs	r1, #5
 8009d06:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 8009d08:	2276      	movs	r2, #118	@ 0x76
 8009d0a:	18bb      	adds	r3, r7, r2
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	18ba      	adds	r2, r7, r2
 8009d10:	1c59      	adds	r1, r3, #1
 8009d12:	7011      	strb	r1, [r2, #0]
 8009d14:	001a      	movs	r2, r3
 8009d16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009d18:	189b      	adds	r3, r3, r2
 8009d1a:	781a      	ldrb	r2, [r3, #0]
 8009d1c:	2174      	movs	r1, #116	@ 0x74
 8009d1e:	187b      	adds	r3, r7, r1
 8009d20:	701a      	strb	r2, [r3, #0]

    switch( macHdr.Bits.MType )
 8009d22:	187b      	adds	r3, r7, r1
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	061b      	lsls	r3, r3, #24
 8009d28:	0f5b      	lsrs	r3, r3, #29
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	2b07      	cmp	r3, #7
 8009d2e:	d101      	bne.n	8009d34 <ProcessRadioRxDone+0x194>
 8009d30:	f000 fbf2 	bl	800a518 <ProcessRadioRxDone+0x978>
 8009d34:	dd01      	ble.n	8009d3a <ProcessRadioRxDone+0x19a>
 8009d36:	f000 fc1e 	bl	800a576 <ProcessRadioRxDone+0x9d6>
 8009d3a:	2b05      	cmp	r3, #5
 8009d3c:	d100      	bne.n	8009d40 <ProcessRadioRxDone+0x1a0>
 8009d3e:	e115      	b.n	8009f6c <ProcessRadioRxDone+0x3cc>
 8009d40:	dd01      	ble.n	8009d46 <ProcessRadioRxDone+0x1a6>
 8009d42:	f000 fc18 	bl	800a576 <ProcessRadioRxDone+0x9d6>
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d004      	beq.n	8009d54 <ProcessRadioRxDone+0x1b4>
 8009d4a:	2b03      	cmp	r3, #3
 8009d4c:	d100      	bne.n	8009d50 <ProcessRadioRxDone+0x1b0>
 8009d4e:	e111      	b.n	8009f74 <ProcessRadioRxDone+0x3d4>
 8009d50:	f000 fc11 	bl	800a576 <ProcessRadioRxDone+0x9d6>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            macMsgJoinAccept.Buffer = payload;
 8009d54:	210c      	movs	r1, #12
 8009d56:	187b      	adds	r3, r7, r1
 8009d58:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009d5a:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
 8009d5c:	237a      	movs	r3, #122	@ 0x7a
 8009d5e:	18fb      	adds	r3, r7, r3
 8009d60:	881b      	ldrh	r3, [r3, #0]
 8009d62:	b2da      	uxtb	r2, r3
 8009d64:	187b      	adds	r3, r7, r1
 8009d66:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8009d68:	4b6f      	ldr	r3, [pc, #444]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009d6a:	4a70      	ldr	r2, [pc, #448]	@ (8009f2c <ProcessRadioRxDone+0x38c>)
 8009d6c:	589a      	ldr	r2, [r3, r2]
 8009d6e:	23ea      	movs	r3, #234	@ 0xea
 8009d70:	005b      	lsls	r3, r3, #1
 8009d72:	5cd3      	ldrb	r3, [r2, r3]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d007      	beq.n	8009d88 <ProcessRadioRxDone+0x1e8>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009d78:	4b6b      	ldr	r3, [pc, #428]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009d7a:	4a7b      	ldr	r2, [pc, #492]	@ (8009f68 <ProcessRadioRxDone+0x3c8>)
 8009d7c:	2101      	movs	r1, #1
 8009d7e:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 8009d80:	f7ff fee2 	bl	8009b48 <PrepareRxDoneAbort>
                return;
 8009d84:	f000 fc20 	bl	800a5c8 <ProcessRadioRxDone+0xa28>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8009d88:	f7ff fcca 	bl	8009720 <SecureElementGetJoinEui>
 8009d8c:	0001      	movs	r1, r0
 8009d8e:	2680      	movs	r6, #128	@ 0x80
 8009d90:	19bc      	adds	r4, r7, r6
 8009d92:	250c      	movs	r5, #12
 8009d94:	197b      	adds	r3, r7, r5
 8009d96:	001a      	movs	r2, r3
 8009d98:	20ff      	movs	r0, #255	@ 0xff
 8009d9a:	f006 fcb7 	bl	801070c <LoRaMacCryptoHandleJoinAccept>
 8009d9e:	0003      	movs	r3, r0
 8009da0:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8009da2:	19bb      	adds	r3, r7, r6
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d000      	beq.n	8009dac <ProcessRadioRxDone+0x20c>
 8009daa:	e0b0      	b.n	8009f0e <ProcessRadioRxDone+0x36e>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8009dac:	002c      	movs	r4, r5
 8009dae:	193b      	adds	r3, r7, r4
 8009db0:	7a59      	ldrb	r1, [r3, #9]
 8009db2:	4b5d      	ldr	r3, [pc, #372]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009db4:	4a5d      	ldr	r2, [pc, #372]	@ (8009f2c <ProcessRadioRxDone+0x38c>)
 8009db6:	589b      	ldr	r3, [r3, r2]
 8009db8:	000a      	movs	r2, r1
 8009dba:	649a      	str	r2, [r3, #72]	@ 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8009dbc:	4b5a      	ldr	r3, [pc, #360]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009dbe:	4a5b      	ldr	r2, [pc, #364]	@ (8009f2c <ProcessRadioRxDone+0x38c>)
 8009dc0:	589b      	ldr	r3, [r3, r2]
 8009dc2:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8009dc4:	193b      	adds	r3, r7, r4
 8009dc6:	7a9b      	ldrb	r3, [r3, #10]
 8009dc8:	021a      	lsls	r2, r3, #8
 8009dca:	4b57      	ldr	r3, [pc, #348]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009dcc:	4857      	ldr	r0, [pc, #348]	@ (8009f2c <ProcessRadioRxDone+0x38c>)
 8009dce:	581b      	ldr	r3, [r3, r0]
 8009dd0:	430a      	orrs	r2, r1
 8009dd2:	649a      	str	r2, [r3, #72]	@ 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8009dd4:	4b54      	ldr	r3, [pc, #336]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009dd6:	4a55      	ldr	r2, [pc, #340]	@ (8009f2c <ProcessRadioRxDone+0x38c>)
 8009dd8:	589b      	ldr	r3, [r3, r2]
 8009dda:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8009ddc:	193b      	adds	r3, r7, r4
 8009dde:	7adb      	ldrb	r3, [r3, #11]
 8009de0:	041a      	lsls	r2, r3, #16
 8009de2:	4b51      	ldr	r3, [pc, #324]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009de4:	4851      	ldr	r0, [pc, #324]	@ (8009f2c <ProcessRadioRxDone+0x38c>)
 8009de6:	581b      	ldr	r3, [r3, r0]
 8009de8:	430a      	orrs	r2, r1
 8009dea:	649a      	str	r2, [r3, #72]	@ 0x48

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 8009dec:	4b4e      	ldr	r3, [pc, #312]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009dee:	4a4f      	ldr	r2, [pc, #316]	@ (8009f2c <ProcessRadioRxDone+0x38c>)
 8009df0:	589b      	ldr	r3, [r3, r2]
 8009df2:	0020      	movs	r0, r4
 8009df4:	183a      	adds	r2, r7, r0
 8009df6:	68d2      	ldr	r2, [r2, #12]
 8009df8:	64da      	str	r2, [r3, #76]	@ 0x4c

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8009dfa:	183b      	adds	r3, r7, r0
 8009dfc:	7c1b      	ldrb	r3, [r3, #16]
 8009dfe:	065b      	lsls	r3, r3, #25
 8009e00:	0f5b      	lsrs	r3, r3, #29
 8009e02:	b2d9      	uxtb	r1, r3
 8009e04:	4b48      	ldr	r3, [pc, #288]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009e06:	4a49      	ldr	r2, [pc, #292]	@ (8009f2c <ProcessRadioRxDone+0x38c>)
 8009e08:	589a      	ldr	r2, [r3, r2]
 8009e0a:	231a      	movs	r3, #26
 8009e0c:	33ff      	adds	r3, #255	@ 0xff
 8009e0e:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8009e10:	183b      	adds	r3, r7, r0
 8009e12:	7c1b      	ldrb	r3, [r3, #16]
 8009e14:	071b      	lsls	r3, r3, #28
 8009e16:	0f1b      	lsrs	r3, r3, #28
 8009e18:	b2d9      	uxtb	r1, r3
 8009e1a:	4b43      	ldr	r3, [pc, #268]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009e1c:	4a43      	ldr	r2, [pc, #268]	@ (8009f2c <ProcessRadioRxDone+0x38c>)
 8009e1e:	589a      	ldr	r2, [r3, r2]
 8009e20:	2390      	movs	r3, #144	@ 0x90
 8009e22:	005b      	lsls	r3, r3, #1
 8009e24:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8009e26:	183b      	adds	r3, r7, r0
 8009e28:	7c1b      	ldrb	r3, [r3, #16]
 8009e2a:	071b      	lsls	r3, r3, #28
 8009e2c:	0f1b      	lsrs	r3, r3, #28
 8009e2e:	b2d9      	uxtb	r1, r3
 8009e30:	4b3d      	ldr	r3, [pc, #244]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009e32:	4a3e      	ldr	r2, [pc, #248]	@ (8009f2c <ProcessRadioRxDone+0x38c>)
 8009e34:	589a      	ldr	r2, [r3, r2]
 8009e36:	2394      	movs	r3, #148	@ 0x94
 8009e38:	005b      	lsls	r3, r3, #1
 8009e3a:	54d1      	strb	r1, [r2, r3]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8009e3c:	183b      	adds	r3, r7, r0
 8009e3e:	7c59      	ldrb	r1, [r3, #17]
 8009e40:	4b39      	ldr	r3, [pc, #228]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009e42:	4a3a      	ldr	r2, [pc, #232]	@ (8009f2c <ProcessRadioRxDone+0x38c>)
 8009e44:	589a      	ldr	r2, [r3, r2]
 8009e46:	2384      	movs	r3, #132	@ 0x84
 8009e48:	005b      	lsls	r3, r3, #1
 8009e4a:	50d1      	str	r1, [r2, r3]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 8009e4c:	4b36      	ldr	r3, [pc, #216]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009e4e:	4a37      	ldr	r2, [pc, #220]	@ (8009f2c <ProcessRadioRxDone+0x38c>)
 8009e50:	589a      	ldr	r2, [r3, r2]
 8009e52:	2384      	movs	r3, #132	@ 0x84
 8009e54:	005b      	lsls	r3, r3, #1
 8009e56:	58d3      	ldr	r3, [r2, r3]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d106      	bne.n	8009e6a <ProcessRadioRxDone+0x2ca>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 8009e5c:	4b32      	ldr	r3, [pc, #200]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009e5e:	4a33      	ldr	r2, [pc, #204]	@ (8009f2c <ProcessRadioRxDone+0x38c>)
 8009e60:	589a      	ldr	r2, [r3, r2]
 8009e62:	2384      	movs	r3, #132	@ 0x84
 8009e64:	005b      	lsls	r3, r3, #1
 8009e66:	2101      	movs	r1, #1
 8009e68:	50d1      	str	r1, [r2, r3]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 8009e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009e6c:	4a2f      	ldr	r2, [pc, #188]	@ (8009f2c <ProcessRadioRxDone+0x38c>)
 8009e6e:	589a      	ldr	r2, [r3, r2]
 8009e70:	2384      	movs	r3, #132	@ 0x84
 8009e72:	005b      	lsls	r3, r3, #1
 8009e74:	58d2      	ldr	r2, [r2, r3]
 8009e76:	4b2c      	ldr	r3, [pc, #176]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009e78:	492c      	ldr	r1, [pc, #176]	@ (8009f2c <ProcessRadioRxDone+0x38c>)
 8009e7a:	5859      	ldr	r1, [r3, r1]
 8009e7c:	0013      	movs	r3, r2
 8009e7e:	015b      	lsls	r3, r3, #5
 8009e80:	1a9b      	subs	r3, r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	189b      	adds	r3, r3, r2
 8009e86:	00db      	lsls	r3, r3, #3
 8009e88:	001a      	movs	r2, r3
 8009e8a:	2384      	movs	r3, #132	@ 0x84
 8009e8c:	005b      	lsls	r3, r3, #1
 8009e8e:	50ca      	str	r2, [r1, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8009e90:	4b25      	ldr	r3, [pc, #148]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009e92:	4a26      	ldr	r2, [pc, #152]	@ (8009f2c <ProcessRadioRxDone+0x38c>)
 8009e94:	589a      	ldr	r2, [r3, r2]
 8009e96:	2384      	movs	r3, #132	@ 0x84
 8009e98:	005b      	lsls	r3, r3, #1
 8009e9a:	58d3      	ldr	r3, [r2, r3]
 8009e9c:	4a22      	ldr	r2, [pc, #136]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009e9e:	4923      	ldr	r1, [pc, #140]	@ (8009f2c <ProcessRadioRxDone+0x38c>)
 8009ea0:	5852      	ldr	r2, [r2, r1]
 8009ea2:	21fa      	movs	r1, #250	@ 0xfa
 8009ea4:	0089      	lsls	r1, r1, #2
 8009ea6:	1859      	adds	r1, r3, r1
 8009ea8:	2386      	movs	r3, #134	@ 0x86
 8009eaa:	005b      	lsls	r3, r3, #1
 8009eac:	50d1      	str	r1, [r2, r3]

                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 8009eae:	4b1e      	ldr	r3, [pc, #120]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009eb0:	4a1e      	ldr	r2, [pc, #120]	@ (8009f2c <ProcessRadioRxDone+0x38c>)
 8009eb2:	589a      	ldr	r2, [r3, r2]
 8009eb4:	23e9      	movs	r3, #233	@ 0xe9
 8009eb6:	005b      	lsls	r3, r3, #1
 8009eb8:	2100      	movs	r1, #0
 8009eba:	54d1      	strb	r1, [r2, r3]

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8009ebc:	216c      	movs	r1, #108	@ 0x6c
 8009ebe:	187b      	adds	r3, r7, r1
 8009ec0:	220c      	movs	r2, #12
 8009ec2:	18ba      	adds	r2, r7, r2
 8009ec4:	3212      	adds	r2, #18
 8009ec6:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8009ec8:	237a      	movs	r3, #122	@ 0x7a
 8009eca:	18fb      	adds	r3, r7, r3
 8009ecc:	881b      	ldrh	r3, [r3, #0]
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	3b11      	subs	r3, #17
 8009ed2:	b2da      	uxtb	r2, r3
 8009ed4:	187b      	adds	r3, r7, r1
 8009ed6:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 8009ed8:	4b13      	ldr	r3, [pc, #76]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009eda:	4a14      	ldr	r2, [pc, #80]	@ (8009f2c <ProcessRadioRxDone+0x38c>)
 8009edc:	589b      	ldr	r3, [r3, r2]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	187a      	adds	r2, r7, r1
 8009ee2:	0011      	movs	r1, r2
 8009ee4:	0018      	movs	r0, r3
 8009ee6:	f007 fc01 	bl	80116ec <RegionApplyCFList>

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 8009eea:	4b0f      	ldr	r3, [pc, #60]	@ (8009f28 <ProcessRadioRxDone+0x388>)
 8009eec:	4a0f      	ldr	r2, [pc, #60]	@ (8009f2c <ProcessRadioRxDone+0x38c>)
 8009eee:	589a      	ldr	r2, [r3, r2]
 8009ef0:	23ea      	movs	r3, #234	@ 0xea
 8009ef2:	005b      	lsls	r3, r3, #1
 8009ef4:	2102      	movs	r1, #2
 8009ef6:	54d1      	strb	r1, [r2, r3]

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009ef8:	2000      	movs	r0, #0
 8009efa:	f005 fdf7 	bl	800faec <LoRaMacConfirmQueueIsCmdActive>
 8009efe:	1e03      	subs	r3, r0, #0
 8009f00:	d100      	bne.n	8009f04 <ProcessRadioRxDone+0x364>
 8009f02:	e33f      	b.n	800a584 <ProcessRadioRxDone+0x9e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8009f04:	2100      	movs	r1, #0
 8009f06:	2000      	movs	r0, #0
 8009f08:	f005 fd6c 	bl	800f9e4 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 8009f0c:	e33a      	b.n	800a584 <ProcessRadioRxDone+0x9e4>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009f0e:	2000      	movs	r0, #0
 8009f10:	f005 fdec 	bl	800faec <LoRaMacConfirmQueueIsCmdActive>
 8009f14:	1e03      	subs	r3, r0, #0
 8009f16:	d100      	bne.n	8009f1a <ProcessRadioRxDone+0x37a>
 8009f18:	e334      	b.n	800a584 <ProcessRadioRxDone+0x9e4>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	2007      	movs	r0, #7
 8009f1e:	f005 fd61 	bl	800f9e4 <LoRaMacConfirmQueueSetStatus>
            break;
 8009f22:	e32f      	b.n	800a584 <ProcessRadioRxDone+0x9e4>
 8009f24:	20001008 	.word	0x20001008
 8009f28:	20000964 	.word	0x20000964
 8009f2c:	00000484 	.word	0x00000484
 8009f30:	0000042a 	.word	0x0000042a
 8009f34:	0000042c 	.word	0x0000042c
 8009f38:	0000042d 	.word	0x0000042d
 8009f3c:	0000041f 	.word	0x0000041f
 8009f40:	0000041e 	.word	0x0000041e
 8009f44:	00000421 	.word	0x00000421
 8009f48:	00000424 	.word	0x00000424
 8009f4c:	00000429 	.word	0x00000429
 8009f50:	0000042e 	.word	0x0000042e
 8009f54:	0000041c 	.word	0x0000041c
 8009f58:	00000434 	.word	0x00000434
 8009f5c:	0801adcc 	.word	0x0801adcc
 8009f60:	20000cfc 	.word	0x20000cfc
 8009f64:	00000476 	.word	0x00000476
 8009f68:	0000041d 	.word	0x0000041d
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8009f6c:	4bca      	ldr	r3, [pc, #808]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 8009f6e:	4acb      	ldr	r2, [pc, #812]	@ (800a29c <ProcessRadioRxDone+0x6fc>)
 8009f70:	2101      	movs	r1, #1
 8009f72:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009f74:	4bc8      	ldr	r3, [pc, #800]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 8009f76:	4aca      	ldr	r2, [pc, #808]	@ (800a2a0 <ProcessRadioRxDone+0x700>)
 8009f78:	589a      	ldr	r2, [r3, r2]
 8009f7a:	232e      	movs	r3, #46	@ 0x2e
 8009f7c:	33ff      	adds	r3, #255	@ 0xff
 8009f7e:	5cd2      	ldrb	r2, [r2, r3]
 8009f80:	2168      	movs	r1, #104	@ 0x68
 8009f82:	187b      	adds	r3, r7, r1
 8009f84:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8009f86:	4ac4      	ldr	r2, [pc, #784]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 8009f88:	2384      	movs	r3, #132	@ 0x84
 8009f8a:	00db      	lsls	r3, r3, #3
 8009f8c:	5cd3      	ldrb	r3, [r2, r3]
 8009f8e:	b25a      	sxtb	r2, r3
 8009f90:	187b      	adds	r3, r7, r1
 8009f92:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8009f94:	187b      	adds	r3, r7, r1
 8009f96:	220d      	movs	r2, #13
 8009f98:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 8009f9a:	4bbf      	ldr	r3, [pc, #764]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 8009f9c:	4ac0      	ldr	r2, [pc, #768]	@ (800a2a0 <ProcessRadioRxDone+0x700>)
 8009f9e:	589a      	ldr	r2, [r3, r2]
 8009fa0:	2340      	movs	r3, #64	@ 0x40
 8009fa2:	33ff      	adds	r3, #255	@ 0xff
 8009fa4:	5cd3      	ldrb	r3, [r2, r3]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d002      	beq.n	8009fb0 <ProcessRadioRxDone+0x410>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8009faa:	187b      	adds	r3, r7, r1
 8009fac:	220e      	movs	r2, #14
 8009fae:	701a      	strb	r2, [r3, #0]
            }
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009fb0:	4bb9      	ldr	r3, [pc, #740]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 8009fb2:	4abb      	ldr	r2, [pc, #748]	@ (800a2a0 <ProcessRadioRxDone+0x700>)
 8009fb4:	589b      	ldr	r3, [r3, r2]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	2268      	movs	r2, #104	@ 0x68
 8009fba:	18ba      	adds	r2, r7, r2
 8009fbc:	0011      	movs	r1, r2
 8009fbe:	0018      	movs	r0, r3
 8009fc0:	f007 fb11 	bl	80115e6 <RegionGetPhyParam>
 8009fc4:	0003      	movs	r3, r0
 8009fc6:	001a      	movs	r2, r3
 8009fc8:	2364      	movs	r3, #100	@ 0x64
 8009fca:	18fb      	adds	r3, r7, r3
 8009fcc:	601a      	str	r2, [r3, #0]
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 8009fce:	237a      	movs	r3, #122	@ 0x7a
 8009fd0:	18fb      	adds	r3, r7, r3
 8009fd2:	881b      	ldrh	r3, [r3, #0]
 8009fd4:	3b0d      	subs	r3, #13
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	b21b      	sxth	r3, r3
 8009fda:	1c1a      	adds	r2, r3, #0
 8009fdc:	b213      	sxth	r3, r2
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	da01      	bge.n	8009fe6 <ProcessRadioRxDone+0x446>
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	1c1a      	adds	r2, r3, #0
 8009fe6:	b212      	sxth	r2, r2
 8009fe8:	2364      	movs	r3, #100	@ 0x64
 8009fea:	18fb      	adds	r3, r7, r3
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	b21b      	sxth	r3, r3
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	dd06      	ble.n	800a002 <ProcessRadioRxDone+0x462>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009ff4:	4ba8      	ldr	r3, [pc, #672]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 8009ff6:	4aab      	ldr	r2, [pc, #684]	@ (800a2a4 <ProcessRadioRxDone+0x704>)
 8009ff8:	2101      	movs	r1, #1
 8009ffa:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 8009ffc:	f7ff fda4 	bl	8009b48 <PrepareRxDoneAbort>
                return;
 800a000:	e2e2      	b.n	800a5c8 <ProcessRadioRxDone+0xa28>
            }
            macMsgData.Buffer = payload;
 800a002:	2134      	movs	r1, #52	@ 0x34
 800a004:	187b      	adds	r3, r7, r1
 800a006:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a008:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
 800a00a:	237a      	movs	r3, #122	@ 0x7a
 800a00c:	18fb      	adds	r3, r7, r3
 800a00e:	881b      	ldrh	r3, [r3, #0]
 800a010:	b2da      	uxtb	r2, r3
 800a012:	187b      	adds	r3, r7, r1
 800a014:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800a016:	187b      	adds	r3, r7, r1
 800a018:	4aa3      	ldr	r2, [pc, #652]	@ (800a2a8 <ProcessRadioRxDone+0x708>)
 800a01a:	625a      	str	r2, [r3, #36]	@ 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800a01c:	0008      	movs	r0, r1
 800a01e:	187b      	adds	r3, r7, r1
 800a020:	2228      	movs	r2, #40	@ 0x28
 800a022:	21ff      	movs	r1, #255	@ 0xff
 800a024:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800a026:	183b      	adds	r3, r7, r0
 800a028:	0018      	movs	r0, r3
 800a02a:	f006 fff9 	bl	8011020 <LoRaMacParserData>
 800a02e:	1e03      	subs	r3, r0, #0
 800a030:	d006      	beq.n	800a040 <ProcessRadioRxDone+0x4a0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a032:	4b99      	ldr	r3, [pc, #612]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 800a034:	4a9b      	ldr	r2, [pc, #620]	@ (800a2a4 <ProcessRadioRxDone+0x704>)
 800a036:	2101      	movs	r1, #1
 800a038:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800a03a:	f7ff fd85 	bl	8009b48 <PrepareRxDoneAbort>
                return;
 800a03e:	e2c3      	b.n	800a5c8 <ProcessRadioRxDone+0xa28>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800a040:	2034      	movs	r0, #52	@ 0x34
 800a042:	183b      	adds	r3, r7, r0
 800a044:	689a      	ldr	r2, [r3, #8]
 800a046:	4b94      	ldr	r3, [pc, #592]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 800a048:	4998      	ldr	r1, [pc, #608]	@ (800a2ac <ProcessRadioRxDone+0x70c>)
 800a04a:	505a      	str	r2, [r3, r1]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800a04c:	1dba      	adds	r2, r7, #6
 800a04e:	183b      	adds	r3, r7, r0
 800a050:	0011      	movs	r1, r2
 800a052:	0018      	movs	r0, r3
 800a054:	f002 fff6 	bl	800d044 <DetermineFrameType>
 800a058:	1e03      	subs	r3, r0, #0
 800a05a:	d006      	beq.n	800a06a <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a05c:	4b8e      	ldr	r3, [pc, #568]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 800a05e:	4a91      	ldr	r2, [pc, #580]	@ (800a2a4 <ProcessRadioRxDone+0x704>)
 800a060:	2101      	movs	r1, #1
 800a062:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800a064:	f7ff fd70 	bl	8009b48 <PrepareRxDoneAbort>
                return;
 800a068:	e2ae      	b.n	800a5c8 <ProcessRadioRxDone+0xa28>
            }

            //Check if it is a multicast message
            multicast = 0;
 800a06a:	2383      	movs	r3, #131	@ 0x83
 800a06c:	18fb      	adds	r3, r7, r3
 800a06e:	2200      	movs	r2, #0
 800a070:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
 800a072:	2300      	movs	r3, #0
 800a074:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a076:	2381      	movs	r3, #129	@ 0x81
 800a078:	18fb      	adds	r3, r7, r3
 800a07a:	2200      	movs	r2, #0
 800a07c:	701a      	strb	r2, [r3, #0]
 800a07e:	e065      	b.n	800a14c <ProcessRadioRxDone+0x5ac>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a080:	4b85      	ldr	r3, [pc, #532]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 800a082:	4a87      	ldr	r2, [pc, #540]	@ (800a2a0 <ProcessRadioRxDone+0x700>)
 800a084:	5899      	ldr	r1, [r3, r2]
 800a086:	2481      	movs	r4, #129	@ 0x81
 800a088:	193b      	adds	r3, r7, r4
 800a08a:	781a      	ldrb	r2, [r3, #0]
 800a08c:	0013      	movs	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	189b      	adds	r3, r3, r2
 800a092:	00db      	lsls	r3, r3, #3
 800a094:	18cb      	adds	r3, r1, r3
 800a096:	3354      	adds	r3, #84	@ 0x54
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	2334      	movs	r3, #52	@ 0x34
 800a09c:	18fb      	adds	r3, r7, r3
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d14d      	bne.n	800a140 <ProcessRadioRxDone+0x5a0>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800a0a4:	4b7c      	ldr	r3, [pc, #496]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 800a0a6:	4a7e      	ldr	r2, [pc, #504]	@ (800a2a0 <ProcessRadioRxDone+0x700>)
 800a0a8:	5899      	ldr	r1, [r3, r2]
 800a0aa:	193b      	adds	r3, r7, r4
 800a0ac:	781a      	ldrb	r2, [r3, #0]
 800a0ae:	2051      	movs	r0, #81	@ 0x51
 800a0b0:	0013      	movs	r3, r2
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	189b      	adds	r3, r3, r2
 800a0b6:	00db      	lsls	r3, r3, #3
 800a0b8:	18cb      	adds	r3, r1, r3
 800a0ba:	181b      	adds	r3, r3, r0
 800a0bc:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d03e      	beq.n	800a140 <ProcessRadioRxDone+0x5a0>
                {
                    multicast = 1;
 800a0c2:	2383      	movs	r3, #131	@ 0x83
 800a0c4:	18fb      	adds	r3, r7, r3
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 800a0ca:	4b73      	ldr	r3, [pc, #460]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 800a0cc:	4a74      	ldr	r2, [pc, #464]	@ (800a2a0 <ProcessRadioRxDone+0x700>)
 800a0ce:	5898      	ldr	r0, [r3, r2]
 800a0d0:	0025      	movs	r5, r4
 800a0d2:	193b      	adds	r3, r7, r4
 800a0d4:	781a      	ldrb	r2, [r3, #0]
 800a0d6:	2382      	movs	r3, #130	@ 0x82
 800a0d8:	18f9      	adds	r1, r7, r3
 800a0da:	2452      	movs	r4, #82	@ 0x52
 800a0dc:	0013      	movs	r3, r2
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	189b      	adds	r3, r3, r2
 800a0e2:	00db      	lsls	r3, r3, #3
 800a0e4:	18c3      	adds	r3, r0, r3
 800a0e6:	191b      	adds	r3, r3, r4
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	700b      	strb	r3, [r1, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800a0ec:	4b6a      	ldr	r3, [pc, #424]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 800a0ee:	4a6c      	ldr	r2, [pc, #432]	@ (800a2a0 <ProcessRadioRxDone+0x700>)
 800a0f0:	5899      	ldr	r1, [r3, r2]
 800a0f2:	002c      	movs	r4, r5
 800a0f4:	193b      	adds	r3, r7, r4
 800a0f6:	781a      	ldrb	r2, [r3, #0]
 800a0f8:	0013      	movs	r3, r2
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	189b      	adds	r3, r3, r2
 800a0fe:	00db      	lsls	r3, r3, #3
 800a100:	18cb      	adds	r3, r1, r3
 800a102:	336c      	adds	r3, #108	@ 0x6c
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	60bb      	str	r3, [r7, #8]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address;
 800a10a:	4b63      	ldr	r3, [pc, #396]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 800a10c:	4a64      	ldr	r2, [pc, #400]	@ (800a2a0 <ProcessRadioRxDone+0x700>)
 800a10e:	5899      	ldr	r1, [r3, r2]
 800a110:	193b      	adds	r3, r7, r4
 800a112:	781a      	ldrb	r2, [r3, #0]
 800a114:	0013      	movs	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	189b      	adds	r3, r3, r2
 800a11a:	00db      	lsls	r3, r3, #3
 800a11c:	18cb      	adds	r3, r1, r3
 800a11e:	3354      	adds	r3, #84	@ 0x54
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	2284      	movs	r2, #132	@ 0x84
 800a124:	18ba      	adds	r2, r7, r2
 800a126:	6013      	str	r3, [r2, #0]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800a128:	4b5b      	ldr	r3, [pc, #364]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 800a12a:	4a5d      	ldr	r2, [pc, #372]	@ (800a2a0 <ProcessRadioRxDone+0x700>)
 800a12c:	589b      	ldr	r3, [r3, r2]
 800a12e:	22f0      	movs	r2, #240	@ 0xf0
 800a130:	5c9b      	ldrb	r3, [r3, r2]
 800a132:	2b02      	cmp	r3, #2
 800a134:	d110      	bne.n	800a158 <ProcessRadioRxDone+0x5b8>
                    {
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800a136:	4b58      	ldr	r3, [pc, #352]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 800a138:	4a5d      	ldr	r2, [pc, #372]	@ (800a2b0 <ProcessRadioRxDone+0x710>)
 800a13a:	2103      	movs	r1, #3
 800a13c:	5499      	strb	r1, [r3, r2]
                    }
                    break;
 800a13e:	e00b      	b.n	800a158 <ProcessRadioRxDone+0x5b8>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a140:	2181      	movs	r1, #129	@ 0x81
 800a142:	187b      	adds	r3, r7, r1
 800a144:	781a      	ldrb	r2, [r3, #0]
 800a146:	187b      	adds	r3, r7, r1
 800a148:	3201      	adds	r2, #1
 800a14a:	701a      	strb	r2, [r3, #0]
 800a14c:	2381      	movs	r3, #129	@ 0x81
 800a14e:	18fb      	adds	r3, r7, r3
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	2b03      	cmp	r3, #3
 800a154:	d994      	bls.n	800a080 <ProcessRadioRxDone+0x4e0>
 800a156:	e000      	b.n	800a15a <ProcessRadioRxDone+0x5ba>
                    break;
 800a158:	46c0      	nop			@ (mov r8, r8)
                }
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800a15a:	2168      	movs	r1, #104	@ 0x68
 800a15c:	187b      	adds	r3, r7, r1
 800a15e:	2215      	movs	r2, #21
 800a160:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a162:	4b4d      	ldr	r3, [pc, #308]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 800a164:	4a4e      	ldr	r2, [pc, #312]	@ (800a2a0 <ProcessRadioRxDone+0x700>)
 800a166:	589b      	ldr	r3, [r3, r2]
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	187a      	adds	r2, r7, r1
 800a16c:	0011      	movs	r1, r2
 800a16e:	0018      	movs	r0, r3
 800a170:	f007 fa39 	bl	80115e6 <RegionGetPhyParam>
 800a174:	0003      	movs	r3, r0
 800a176:	001a      	movs	r2, r3
 800a178:	2064      	movs	r0, #100	@ 0x64
 800a17a:	183b      	adds	r3, r7, r0
 800a17c:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800a17e:	1dbb      	adds	r3, r7, #6
 800a180:	781d      	ldrb	r5, [r3, #0]
 800a182:	4b45      	ldr	r3, [pc, #276]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 800a184:	4a46      	ldr	r2, [pc, #280]	@ (800a2a0 <ProcessRadioRxDone+0x700>)
 800a186:	5899      	ldr	r1, [r3, r2]
 800a188:	183b      	adds	r3, r7, r0
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	2280      	movs	r2, #128	@ 0x80
 800a190:	18bc      	adds	r4, r7, r2
 800a192:	22e8      	movs	r2, #232	@ 0xe8
 800a194:	0052      	lsls	r2, r2, #1
 800a196:	588e      	ldr	r6, [r1, r2]
 800a198:	2134      	movs	r1, #52	@ 0x34
 800a19a:	1879      	adds	r1, r7, r1
 800a19c:	2082      	movs	r0, #130	@ 0x82
 800a19e:	183a      	adds	r2, r7, r0
 800a1a0:	7810      	ldrb	r0, [r2, #0]
 800a1a2:	2208      	movs	r2, #8
 800a1a4:	18ba      	adds	r2, r7, r2
 800a1a6:	9202      	str	r2, [sp, #8]
 800a1a8:	1dfa      	adds	r2, r7, #7
 800a1aa:	9201      	str	r2, [sp, #4]
 800a1ac:	9300      	str	r3, [sp, #0]
 800a1ae:	0033      	movs	r3, r6
 800a1b0:	000a      	movs	r2, r1
 800a1b2:	0029      	movs	r1, r5
 800a1b4:	f000 feda 	bl	800af6c <GetFCntDown>
 800a1b8:	0003      	movs	r3, r0
 800a1ba:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a1bc:	2280      	movs	r2, #128	@ 0x80
 800a1be:	18bb      	adds	r3, r7, r2
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d040      	beq.n	800a248 <ProcessRadioRxDone+0x6a8>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800a1c6:	18bb      	adds	r3, r7, r2
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	2b07      	cmp	r3, #7
 800a1cc:	d126      	bne.n	800a21c <ProcessRadioRxDone+0x67c>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800a1ce:	4b32      	ldr	r3, [pc, #200]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 800a1d0:	4a34      	ldr	r2, [pc, #208]	@ (800a2a4 <ProcessRadioRxDone+0x704>)
 800a1d2:	2108      	movs	r1, #8
 800a1d4:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800a1d6:	4b30      	ldr	r3, [pc, #192]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 800a1d8:	4a31      	ldr	r2, [pc, #196]	@ (800a2a0 <ProcessRadioRxDone+0x700>)
 800a1da:	589a      	ldr	r2, [r3, r2]
 800a1dc:	23e9      	movs	r3, #233	@ 0xe9
 800a1de:	005b      	lsls	r3, r3, #1
 800a1e0:	5cd3      	ldrb	r3, [r2, r3]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d128      	bne.n	800a238 <ProcessRadioRxDone+0x698>
 800a1e6:	2374      	movs	r3, #116	@ 0x74
 800a1e8:	18fb      	adds	r3, r7, r3
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	221f      	movs	r2, #31
 800a1ee:	4393      	bics	r3, r2
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	2ba0      	cmp	r3, #160	@ 0xa0
 800a1f4:	d120      	bne.n	800a238 <ProcessRadioRxDone+0x698>
 800a1f6:	4b28      	ldr	r3, [pc, #160]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 800a1f8:	4a29      	ldr	r2, [pc, #164]	@ (800a2a0 <ProcessRadioRxDone+0x700>)
 800a1fa:	589a      	ldr	r2, [r3, r2]
 800a1fc:	23ec      	movs	r3, #236	@ 0xec
 800a1fe:	005b      	lsls	r3, r3, #1
 800a200:	58d2      	ldr	r2, [r2, r3]
 800a202:	2134      	movs	r1, #52	@ 0x34
 800a204:	187b      	adds	r3, r7, r1
 800a206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a208:	429a      	cmp	r2, r3
 800a20a:	d115      	bne.n	800a238 <ProcessRadioRxDone+0x698>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
 800a20c:	4b22      	ldr	r3, [pc, #136]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 800a20e:	4a24      	ldr	r2, [pc, #144]	@ (800a2a0 <ProcessRadioRxDone+0x700>)
 800a210:	589a      	ldr	r2, [r3, r2]
 800a212:	23e0      	movs	r3, #224	@ 0xe0
 800a214:	005b      	lsls	r3, r3, #1
 800a216:	2101      	movs	r1, #1
 800a218:	54d1      	strb	r1, [r2, r3]
 800a21a:	e00d      	b.n	800a238 <ProcessRadioRxDone+0x698>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800a21c:	2380      	movs	r3, #128	@ 0x80
 800a21e:	18fb      	adds	r3, r7, r3
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	2b08      	cmp	r3, #8
 800a224:	d104      	bne.n	800a230 <ProcessRadioRxDone+0x690>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800a226:	4b1c      	ldr	r3, [pc, #112]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 800a228:	4a1e      	ldr	r2, [pc, #120]	@ (800a2a4 <ProcessRadioRxDone+0x704>)
 800a22a:	210a      	movs	r1, #10
 800a22c:	5499      	strb	r1, [r3, r2]
 800a22e:	e003      	b.n	800a238 <ProcessRadioRxDone+0x698>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a230:	4b19      	ldr	r3, [pc, #100]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 800a232:	4a1c      	ldr	r2, [pc, #112]	@ (800a2a4 <ProcessRadioRxDone+0x704>)
 800a234:	2101      	movs	r1, #1
 800a236:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a238:	68b9      	ldr	r1, [r7, #8]
 800a23a:	4a17      	ldr	r2, [pc, #92]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 800a23c:	2386      	movs	r3, #134	@ 0x86
 800a23e:	00db      	lsls	r3, r3, #3
 800a240:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800a242:	f7ff fc81 	bl	8009b48 <PrepareRxDoneAbort>
                return;
 800a246:	e1bf      	b.n	800a5c8 <ProcessRadioRxDone+0xa28>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800a248:	1dfb      	adds	r3, r7, #7
 800a24a:	781a      	ldrb	r2, [r3, #0]
 800a24c:	68bd      	ldr	r5, [r7, #8]
 800a24e:	2680      	movs	r6, #128	@ 0x80
 800a250:	19bc      	adds	r4, r7, r6
 800a252:	2384      	movs	r3, #132	@ 0x84
 800a254:	18fb      	adds	r3, r7, r3
 800a256:	6819      	ldr	r1, [r3, #0]
 800a258:	2382      	movs	r3, #130	@ 0x82
 800a25a:	18fb      	adds	r3, r7, r3
 800a25c:	7818      	ldrb	r0, [r3, #0]
 800a25e:	2334      	movs	r3, #52	@ 0x34
 800a260:	18fb      	adds	r3, r7, r3
 800a262:	9300      	str	r3, [sp, #0]
 800a264:	002b      	movs	r3, r5
 800a266:	f006 fcb7 	bl	8010bd8 <LoRaMacCryptoUnsecureMessage>
 800a26a:	0003      	movs	r3, r0
 800a26c:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a26e:	19bb      	adds	r3, r7, r6
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d01e      	beq.n	800a2b4 <ProcessRadioRxDone+0x714>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800a276:	19bb      	adds	r3, r7, r6
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	2b02      	cmp	r3, #2
 800a27c:	d104      	bne.n	800a288 <ProcessRadioRxDone+0x6e8>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800a27e:	4b06      	ldr	r3, [pc, #24]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 800a280:	4a08      	ldr	r2, [pc, #32]	@ (800a2a4 <ProcessRadioRxDone+0x704>)
 800a282:	210b      	movs	r1, #11
 800a284:	5499      	strb	r1, [r3, r2]
 800a286:	e003      	b.n	800a290 <ProcessRadioRxDone+0x6f0>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800a288:	4b03      	ldr	r3, [pc, #12]	@ (800a298 <ProcessRadioRxDone+0x6f8>)
 800a28a:	4a06      	ldr	r2, [pc, #24]	@ (800a2a4 <ProcessRadioRxDone+0x704>)
 800a28c:	210c      	movs	r1, #12
 800a28e:	5499      	strb	r1, [r3, r2]
                }
                PrepareRxDoneAbort( );
 800a290:	f7ff fc5a 	bl	8009b48 <PrepareRxDoneAbort>
                return;
 800a294:	e198      	b.n	800a5c8 <ProcessRadioRxDone+0xa28>
 800a296:	46c0      	nop			@ (mov r8, r8)
 800a298:	20000964 	.word	0x20000964
 800a29c:	0000041c 	.word	0x0000041c
 800a2a0:	00000484 	.word	0x00000484
 800a2a4:	0000041d 	.word	0x0000041d
 800a2a8:	20000b9c 	.word	0x20000b9c
 800a2ac:	00000434 	.word	0x00000434
 800a2b0:	0000042d 	.word	0x0000042d
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a2b4:	4bc6      	ldr	r3, [pc, #792]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a2b6:	4ac7      	ldr	r2, [pc, #796]	@ (800a5d4 <ProcessRadioRxDone+0xa34>)
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 800a2bc:	4bc4      	ldr	r3, [pc, #784]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a2be:	2283      	movs	r2, #131	@ 0x83
 800a2c0:	18ba      	adds	r2, r7, r2
 800a2c2:	49c5      	ldr	r1, [pc, #788]	@ (800a5d8 <ProcessRadioRxDone+0xa38>)
 800a2c4:	7812      	ldrb	r2, [r2, #0]
 800a2c6:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800a2c8:	2034      	movs	r0, #52	@ 0x34
 800a2ca:	183b      	adds	r3, r7, r0
 800a2cc:	7b1b      	ldrb	r3, [r3, #12]
 800a2ce:	06db      	lsls	r3, r3, #27
 800a2d0:	0fdb      	lsrs	r3, r3, #31
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	0019      	movs	r1, r3
 800a2d6:	4bbe      	ldr	r3, [pc, #760]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a2d8:	4ac0      	ldr	r2, [pc, #768]	@ (800a5dc <ProcessRadioRxDone+0xa3c>)
 800a2da:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
 800a2dc:	4bbc      	ldr	r3, [pc, #752]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a2de:	4ac0      	ldr	r2, [pc, #768]	@ (800a5e0 <ProcessRadioRxDone+0xa40>)
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	5099      	str	r1, [r3, r2]
            MacCtx.McpsIndication.BufferSize = 0;
 800a2e4:	4aba      	ldr	r2, [pc, #744]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a2e6:	2385      	movs	r3, #133	@ 0x85
 800a2e8:	00db      	lsls	r3, r3, #3
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a2ee:	68b9      	ldr	r1, [r7, #8]
 800a2f0:	4ab7      	ldr	r2, [pc, #732]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a2f2:	2386      	movs	r3, #134	@ 0x86
 800a2f4:	00db      	lsls	r3, r3, #3
 800a2f6:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a2f8:	183b      	adds	r3, r7, r0
 800a2fa:	7b1b      	ldrb	r3, [r3, #12]
 800a2fc:	069b      	lsls	r3, r3, #26
 800a2fe:	0fdb      	lsrs	r3, r3, #31
 800a300:	b2db      	uxtb	r3, r3
 800a302:	1e5a      	subs	r2, r3, #1
 800a304:	4193      	sbcs	r3, r2
 800a306:	b2d9      	uxtb	r1, r3
 800a308:	4bb1      	ldr	r3, [pc, #708]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a30a:	4ab6      	ldr	r2, [pc, #728]	@ (800a5e4 <ProcessRadioRxDone+0xa44>)
 800a30c:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a30e:	4bb0      	ldr	r3, [pc, #704]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a310:	4ab5      	ldr	r2, [pc, #724]	@ (800a5e8 <ProcessRadioRxDone+0xa48>)
 800a312:	2100      	movs	r1, #0
 800a314:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a316:	183b      	adds	r3, r7, r0
 800a318:	7b1b      	ldrb	r3, [r3, #12]
 800a31a:	069b      	lsls	r3, r3, #26
 800a31c:	0fdb      	lsrs	r3, r3, #31
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	1e5a      	subs	r2, r3, #1
 800a322:	4193      	sbcs	r3, r2
 800a324:	b2d9      	uxtb	r1, r3
 800a326:	4aaa      	ldr	r2, [pc, #680]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a328:	2388      	movs	r3, #136	@ 0x88
 800a32a:	00db      	lsls	r3, r3, #3
 800a32c:	54d1      	strb	r1, [r2, r3]

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800a32e:	4ba8      	ldr	r3, [pc, #672]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a330:	4aae      	ldr	r2, [pc, #696]	@ (800a5ec <ProcessRadioRxDone+0xa4c>)
 800a332:	5c9b      	ldrb	r3, [r3, r2]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d004      	beq.n	800a342 <ProcessRadioRxDone+0x7a2>
                ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_2 ) )
 800a338:	4ba5      	ldr	r3, [pc, #660]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a33a:	4aac      	ldr	r2, [pc, #688]	@ (800a5ec <ProcessRadioRxDone+0xa4c>)
 800a33c:	5c9b      	ldrb	r3, [r3, r2]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d105      	bne.n	800a34e <ProcessRadioRxDone+0x7ae>
            {
                MacCtx.NvmCtx->AdrAckCounter = 0;
 800a342:	4ba3      	ldr	r3, [pc, #652]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a344:	4aaa      	ldr	r2, [pc, #680]	@ (800a5f0 <ProcessRadioRxDone+0xa50>)
 800a346:	589b      	ldr	r3, [r3, r2]
 800a348:	22f4      	movs	r2, #244	@ 0xf4
 800a34a:	2100      	movs	r1, #0
 800a34c:	5099      	str	r1, [r3, r2]
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800a34e:	2383      	movs	r3, #131	@ 0x83
 800a350:	18fb      	adds	r3, r7, r3
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	2b01      	cmp	r3, #1
 800a356:	d104      	bne.n	800a362 <ProcessRadioRxDone+0x7c2>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800a358:	4b9d      	ldr	r3, [pc, #628]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a35a:	4aa6      	ldr	r2, [pc, #664]	@ (800a5f4 <ProcessRadioRxDone+0xa54>)
 800a35c:	2102      	movs	r1, #2
 800a35e:	5499      	strb	r1, [r3, r2]
 800a360:	e02f      	b.n	800a3c2 <ProcessRadioRxDone+0x822>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800a362:	2374      	movs	r3, #116	@ 0x74
 800a364:	18fb      	adds	r3, r7, r3
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	221f      	movs	r2, #31
 800a36a:	4393      	bics	r3, r2
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2ba0      	cmp	r3, #160	@ 0xa0
 800a370:	d11c      	bne.n	800a3ac <ProcessRadioRxDone+0x80c>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
 800a372:	4b97      	ldr	r3, [pc, #604]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a374:	4a9e      	ldr	r2, [pc, #632]	@ (800a5f0 <ProcessRadioRxDone+0xa50>)
 800a376:	589a      	ldr	r2, [r3, r2]
 800a378:	23e0      	movs	r3, #224	@ 0xe0
 800a37a:	005b      	lsls	r3, r3, #1
 800a37c:	2101      	movs	r1, #1
 800a37e:	54d1      	strb	r1, [r2, r3]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800a380:	4b93      	ldr	r3, [pc, #588]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a382:	4a9b      	ldr	r2, [pc, #620]	@ (800a5f0 <ProcessRadioRxDone+0xa50>)
 800a384:	589a      	ldr	r2, [r3, r2]
 800a386:	23e9      	movs	r3, #233	@ 0xe9
 800a388:	005b      	lsls	r3, r3, #1
 800a38a:	5cd3      	ldrb	r3, [r2, r3]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d108      	bne.n	800a3a2 <ProcessRadioRxDone+0x802>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 800a390:	4b8f      	ldr	r3, [pc, #572]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a392:	4a97      	ldr	r2, [pc, #604]	@ (800a5f0 <ProcessRadioRxDone+0xa50>)
 800a394:	589a      	ldr	r2, [r3, r2]
 800a396:	2334      	movs	r3, #52	@ 0x34
 800a398:	18fb      	adds	r3, r7, r3
 800a39a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a39c:	23ec      	movs	r3, #236	@ 0xec
 800a39e:	005b      	lsls	r3, r3, #1
 800a3a0:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a3a2:	4b8b      	ldr	r3, [pc, #556]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a3a4:	4a93      	ldr	r2, [pc, #588]	@ (800a5f4 <ProcessRadioRxDone+0xa54>)
 800a3a6:	2101      	movs	r1, #1
 800a3a8:	5499      	strb	r1, [r3, r2]
 800a3aa:	e00a      	b.n	800a3c2 <ProcessRadioRxDone+0x822>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800a3ac:	4b88      	ldr	r3, [pc, #544]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a3ae:	4a90      	ldr	r2, [pc, #576]	@ (800a5f0 <ProcessRadioRxDone+0xa50>)
 800a3b0:	589a      	ldr	r2, [r3, r2]
 800a3b2:	23e0      	movs	r3, #224	@ 0xe0
 800a3b4:	005b      	lsls	r3, r3, #1
 800a3b6:	2100      	movs	r1, #0
 800a3b8:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a3ba:	4b85      	ldr	r3, [pc, #532]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a3bc:	4a8d      	ldr	r2, [pc, #564]	@ (800a5f4 <ProcessRadioRxDone+0xa54>)
 800a3be:	2100      	movs	r1, #0
 800a3c0:	5499      	strb	r1, [r3, r2]
                }
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800a3c2:	4b83      	ldr	r3, [pc, #524]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a3c4:	4a89      	ldr	r2, [pc, #548]	@ (800a5ec <ProcessRadioRxDone+0xa4c>)
 800a3c6:	5c98      	ldrb	r0, [r3, r2]
 800a3c8:	4b81      	ldr	r3, [pc, #516]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a3ca:	4a8b      	ldr	r2, [pc, #556]	@ (800a5f8 <ProcessRadioRxDone+0xa58>)
 800a3cc:	5c9a      	ldrb	r2, [r3, r2]
 800a3ce:	2334      	movs	r3, #52	@ 0x34
 800a3d0:	18fb      	adds	r3, r7, r3
 800a3d2:	7b1b      	ldrb	r3, [r3, #12]
 800a3d4:	1c19      	adds	r1, r3, #0
 800a3d6:	f002 f947 	bl	800c668 <RemoveMacCommands>

            switch( fType )
 800a3da:	1dbb      	adds	r3, r7, #6
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	2b03      	cmp	r3, #3
 800a3e0:	d100      	bne.n	800a3e4 <ProcessRadioRxDone+0x844>
 800a3e2:	e073      	b.n	800a4cc <ProcessRadioRxDone+0x92c>
 800a3e4:	dd00      	ble.n	800a3e8 <ProcessRadioRxDone+0x848>
 800a3e6:	e089      	b.n	800a4fc <ProcessRadioRxDone+0x95c>
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	d055      	beq.n	800a498 <ProcessRadioRxDone+0x8f8>
 800a3ec:	dd00      	ble.n	800a3f0 <ProcessRadioRxDone+0x850>
 800a3ee:	e085      	b.n	800a4fc <ProcessRadioRxDone+0x95c>
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d002      	beq.n	800a3fa <ProcessRadioRxDone+0x85a>
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d030      	beq.n	800a45a <ProcessRadioRxDone+0x8ba>
 800a3f8:	e080      	b.n	800a4fc <ProcessRadioRxDone+0x95c>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800a3fa:	2034      	movs	r0, #52	@ 0x34
 800a3fc:	183b      	adds	r3, r7, r0
 800a3fe:	7b1b      	ldrb	r3, [r3, #12]
 800a400:	071b      	lsls	r3, r3, #28
 800a402:	0f1b      	lsrs	r3, r3, #28
 800a404:	b2db      	uxtb	r3, r3
 800a406:	001c      	movs	r4, r3
 800a408:	4b71      	ldr	r3, [pc, #452]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a40a:	4a78      	ldr	r2, [pc, #480]	@ (800a5ec <ProcessRadioRxDone+0xa4c>)
 800a40c:	5c9b      	ldrb	r3, [r3, r2]
 800a40e:	2277      	movs	r2, #119	@ 0x77
 800a410:	18ba      	adds	r2, r7, r2
 800a412:	2100      	movs	r1, #0
 800a414:	5651      	ldrsb	r1, [r2, r1]
 800a416:	0005      	movs	r5, r0
 800a418:	183a      	adds	r2, r7, r0
 800a41a:	3210      	adds	r2, #16
 800a41c:	0010      	movs	r0, r2
 800a41e:	9300      	str	r3, [sp, #0]
 800a420:	000b      	movs	r3, r1
 800a422:	0022      	movs	r2, r4
 800a424:	2100      	movs	r1, #0
 800a426:	f000 ffd5 	bl	800b3d4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a42a:	0028      	movs	r0, r5
 800a42c:	183b      	adds	r3, r7, r0
 800a42e:	2220      	movs	r2, #32
 800a430:	5c99      	ldrb	r1, [r3, r2]
 800a432:	4b67      	ldr	r3, [pc, #412]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a434:	4a71      	ldr	r2, [pc, #452]	@ (800a5fc <ProcessRadioRxDone+0xa5c>)
 800a436:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a438:	183b      	adds	r3, r7, r0
 800a43a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a43c:	4b64      	ldr	r3, [pc, #400]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a43e:	4968      	ldr	r1, [pc, #416]	@ (800a5e0 <ProcessRadioRxDone+0xa40>)
 800a440:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800a442:	183b      	adds	r3, r7, r0
 800a444:	2228      	movs	r2, #40	@ 0x28
 800a446:	5c99      	ldrb	r1, [r3, r2]
 800a448:	4a61      	ldr	r2, [pc, #388]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a44a:	2385      	movs	r3, #133	@ 0x85
 800a44c:	00db      	lsls	r3, r3, #3
 800a44e:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800a450:	4b5f      	ldr	r3, [pc, #380]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a452:	4a6b      	ldr	r2, [pc, #428]	@ (800a600 <ProcessRadioRxDone+0xa60>)
 800a454:	2101      	movs	r1, #1
 800a456:	5499      	strb	r1, [r3, r2]
                    break;
 800a458:	e057      	b.n	800a50a <ProcessRadioRxDone+0x96a>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800a45a:	2034      	movs	r0, #52	@ 0x34
 800a45c:	183b      	adds	r3, r7, r0
 800a45e:	7b1b      	ldrb	r3, [r3, #12]
 800a460:	071b      	lsls	r3, r3, #28
 800a462:	0f1b      	lsrs	r3, r3, #28
 800a464:	b2db      	uxtb	r3, r3
 800a466:	001c      	movs	r4, r3
 800a468:	4b59      	ldr	r3, [pc, #356]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a46a:	4a60      	ldr	r2, [pc, #384]	@ (800a5ec <ProcessRadioRxDone+0xa4c>)
 800a46c:	5c9b      	ldrb	r3, [r3, r2]
 800a46e:	2277      	movs	r2, #119	@ 0x77
 800a470:	18ba      	adds	r2, r7, r2
 800a472:	2100      	movs	r1, #0
 800a474:	5651      	ldrsb	r1, [r2, r1]
 800a476:	0005      	movs	r5, r0
 800a478:	183a      	adds	r2, r7, r0
 800a47a:	3210      	adds	r2, #16
 800a47c:	0010      	movs	r0, r2
 800a47e:	9300      	str	r3, [sp, #0]
 800a480:	000b      	movs	r3, r1
 800a482:	0022      	movs	r2, r4
 800a484:	2100      	movs	r1, #0
 800a486:	f000 ffa5 	bl	800b3d4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a48a:	197b      	adds	r3, r7, r5
 800a48c:	2220      	movs	r2, #32
 800a48e:	5c99      	ldrb	r1, [r3, r2]
 800a490:	4b4f      	ldr	r3, [pc, #316]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a492:	4a5a      	ldr	r2, [pc, #360]	@ (800a5fc <ProcessRadioRxDone+0xa5c>)
 800a494:	5499      	strb	r1, [r3, r2]
                    break;
 800a496:	e038      	b.n	800a50a <ProcessRadioRxDone+0x96a>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800a498:	2434      	movs	r4, #52	@ 0x34
 800a49a:	193b      	adds	r3, r7, r4
 800a49c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a49e:	193b      	adds	r3, r7, r4
 800a4a0:	2228      	movs	r2, #40	@ 0x28
 800a4a2:	5c99      	ldrb	r1, [r3, r2]
 800a4a4:	4b4a      	ldr	r3, [pc, #296]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a4a6:	4a51      	ldr	r2, [pc, #324]	@ (800a5ec <ProcessRadioRxDone+0xa4c>)
 800a4a8:	5c9b      	ldrb	r3, [r3, r2]
 800a4aa:	2277      	movs	r2, #119	@ 0x77
 800a4ac:	18ba      	adds	r2, r7, r2
 800a4ae:	7812      	ldrb	r2, [r2, #0]
 800a4b0:	b252      	sxtb	r2, r2
 800a4b2:	9300      	str	r3, [sp, #0]
 800a4b4:	0013      	movs	r3, r2
 800a4b6:	000a      	movs	r2, r1
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	f000 ff8b 	bl	800b3d4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a4be:	193b      	adds	r3, r7, r4
 800a4c0:	2220      	movs	r2, #32
 800a4c2:	5c99      	ldrb	r1, [r3, r2]
 800a4c4:	4b42      	ldr	r3, [pc, #264]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a4c6:	4a4d      	ldr	r2, [pc, #308]	@ (800a5fc <ProcessRadioRxDone+0xa5c>)
 800a4c8:	5499      	strb	r1, [r3, r2]
                    break;
 800a4ca:	e01e      	b.n	800a50a <ProcessRadioRxDone+0x96a>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a4cc:	2034      	movs	r0, #52	@ 0x34
 800a4ce:	183b      	adds	r3, r7, r0
 800a4d0:	2220      	movs	r2, #32
 800a4d2:	5c99      	ldrb	r1, [r3, r2]
 800a4d4:	4b3e      	ldr	r3, [pc, #248]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a4d6:	4a49      	ldr	r2, [pc, #292]	@ (800a5fc <ProcessRadioRxDone+0xa5c>)
 800a4d8:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a4da:	183b      	adds	r3, r7, r0
 800a4dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a4de:	4b3c      	ldr	r3, [pc, #240]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a4e0:	493f      	ldr	r1, [pc, #252]	@ (800a5e0 <ProcessRadioRxDone+0xa40>)
 800a4e2:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800a4e4:	183b      	adds	r3, r7, r0
 800a4e6:	2228      	movs	r2, #40	@ 0x28
 800a4e8:	5c99      	ldrb	r1, [r3, r2]
 800a4ea:	4a39      	ldr	r2, [pc, #228]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a4ec:	2385      	movs	r3, #133	@ 0x85
 800a4ee:	00db      	lsls	r3, r3, #3
 800a4f0:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800a4f2:	4b37      	ldr	r3, [pc, #220]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a4f4:	4a42      	ldr	r2, [pc, #264]	@ (800a600 <ProcessRadioRxDone+0xa60>)
 800a4f6:	2101      	movs	r1, #1
 800a4f8:	5499      	strb	r1, [r3, r2]
                    break;
 800a4fa:	e006      	b.n	800a50a <ProcessRadioRxDone+0x96a>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a4fc:	4b34      	ldr	r3, [pc, #208]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a4fe:	4a35      	ldr	r2, [pc, #212]	@ (800a5d4 <ProcessRadioRxDone+0xa34>)
 800a500:	2101      	movs	r1, #1
 800a502:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 800a504:	f7ff fb20 	bl	8009b48 <PrepareRxDoneAbort>
                    break;
 800a508:	46c0      	nop			@ (mov r8, r8)
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a50a:	4b31      	ldr	r3, [pc, #196]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a50c:	4a3d      	ldr	r2, [pc, #244]	@ (800a604 <ProcessRadioRxDone+0xa64>)
 800a50e:	5c99      	ldrb	r1, [r3, r2]
 800a510:	2002      	movs	r0, #2
 800a512:	4301      	orrs	r1, r0
 800a514:	5499      	strb	r1, [r3, r2]

            break;
 800a516:	e036      	b.n	800a586 <ProcessRadioRxDone+0x9e6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800a518:	2476      	movs	r4, #118	@ 0x76
 800a51a:	193b      	adds	r3, r7, r4
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a520:	18d1      	adds	r1, r2, r3
 800a522:	193b      	adds	r3, r7, r4
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	b29b      	uxth	r3, r3
 800a528:	257a      	movs	r5, #122	@ 0x7a
 800a52a:	197a      	adds	r2, r7, r5
 800a52c:	8812      	ldrh	r2, [r2, #0]
 800a52e:	1ad3      	subs	r3, r2, r3
 800a530:	b29a      	uxth	r2, r3
 800a532:	4b35      	ldr	r3, [pc, #212]	@ (800a608 <ProcessRadioRxDone+0xa68>)
 800a534:	0018      	movs	r0, r3
 800a536:	f00b f8af 	bl	8015698 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800a53a:	4b25      	ldr	r3, [pc, #148]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a53c:	4a2d      	ldr	r2, [pc, #180]	@ (800a5f4 <ProcessRadioRxDone+0xa54>)
 800a53e:	2103      	movs	r1, #3
 800a540:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a542:	4b23      	ldr	r3, [pc, #140]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a544:	4a23      	ldr	r2, [pc, #140]	@ (800a5d4 <ProcessRadioRxDone+0xa34>)
 800a546:	2100      	movs	r1, #0
 800a548:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800a54a:	4b21      	ldr	r3, [pc, #132]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a54c:	4924      	ldr	r1, [pc, #144]	@ (800a5e0 <ProcessRadioRxDone+0xa40>)
 800a54e:	4a2e      	ldr	r2, [pc, #184]	@ (800a608 <ProcessRadioRxDone+0xa68>)
 800a550:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800a552:	197b      	adds	r3, r7, r5
 800a554:	881b      	ldrh	r3, [r3, #0]
 800a556:	b2da      	uxtb	r2, r3
 800a558:	193b      	adds	r3, r7, r4
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	1ad3      	subs	r3, r2, r3
 800a55e:	b2d9      	uxtb	r1, r3
 800a560:	4a1b      	ldr	r2, [pc, #108]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a562:	2385      	movs	r3, #133	@ 0x85
 800a564:	00db      	lsls	r3, r3, #3
 800a566:	54d1      	strb	r1, [r2, r3]

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a568:	4b19      	ldr	r3, [pc, #100]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a56a:	4a26      	ldr	r2, [pc, #152]	@ (800a604 <ProcessRadioRxDone+0xa64>)
 800a56c:	5c99      	ldrb	r1, [r3, r2]
 800a56e:	2002      	movs	r0, #2
 800a570:	4301      	orrs	r1, r0
 800a572:	5499      	strb	r1, [r3, r2]
            break;
 800a574:	e007      	b.n	800a586 <ProcessRadioRxDone+0x9e6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a576:	4b16      	ldr	r3, [pc, #88]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a578:	4a16      	ldr	r2, [pc, #88]	@ (800a5d4 <ProcessRadioRxDone+0xa34>)
 800a57a:	2101      	movs	r1, #1
 800a57c:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 800a57e:	f7ff fae3 	bl	8009b48 <PrepareRxDoneAbort>
            break;
 800a582:	e000      	b.n	800a586 <ProcessRadioRxDone+0x9e6>
            break;
 800a584:	46c0      	nop			@ (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800a586:	4b12      	ldr	r3, [pc, #72]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a588:	4a20      	ldr	r2, [pc, #128]	@ (800a60c <ProcessRadioRxDone+0xa6c>)
 800a58a:	5c9b      	ldrb	r3, [r3, r2]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d009      	beq.n	800a5a4 <ProcessRadioRxDone+0xa04>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800a590:	4a0f      	ldr	r2, [pc, #60]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a592:	2388      	movs	r3, #136	@ 0x88
 800a594:	00db      	lsls	r3, r3, #3
 800a596:	5cd3      	ldrb	r3, [r2, r3]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00d      	beq.n	800a5b8 <ProcessRadioRxDone+0xa18>
        {
            OnAckTimeoutTimerEvent( NULL );
 800a59c:	2000      	movs	r0, #0
 800a59e:	f000 fca3 	bl	800aee8 <OnAckTimeoutTimerEvent>
 800a5a2:	e009      	b.n	800a5b8 <ProcessRadioRxDone+0xa18>
        }
    }
    else
    {
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800a5a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a5a6:	4a12      	ldr	r2, [pc, #72]	@ (800a5f0 <ProcessRadioRxDone+0xa50>)
 800a5a8:	589b      	ldr	r3, [r3, r2]
 800a5aa:	22f0      	movs	r2, #240	@ 0xf0
 800a5ac:	5c9b      	ldrb	r3, [r3, r2]
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d102      	bne.n	800a5b8 <ProcessRadioRxDone+0xa18>
        {
            OnAckTimeoutTimerEvent( NULL );
 800a5b2:	2000      	movs	r0, #0
 800a5b4:	f000 fc98 	bl	800aee8 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a5b8:	4b05      	ldr	r3, [pc, #20]	@ (800a5d0 <ProcessRadioRxDone+0xa30>)
 800a5ba:	4a12      	ldr	r2, [pc, #72]	@ (800a604 <ProcessRadioRxDone+0xa64>)
 800a5bc:	5c99      	ldrb	r1, [r3, r2]
 800a5be:	2020      	movs	r0, #32
 800a5c0:	4301      	orrs	r1, r0
 800a5c2:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800a5c4:	f7ff f9f8 	bl	80099b8 <UpdateRxSlotIdleState>
}
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	b023      	add	sp, #140	@ 0x8c
 800a5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ce:	46c0      	nop			@ (mov r8, r8)
 800a5d0:	20000964 	.word	0x20000964
 800a5d4:	0000041d 	.word	0x0000041d
 800a5d8:	0000041e 	.word	0x0000041e
 800a5dc:	00000421 	.word	0x00000421
 800a5e0:	00000424 	.word	0x00000424
 800a5e4:	0000042e 	.word	0x0000042e
 800a5e8:	0000043d 	.word	0x0000043d
 800a5ec:	0000042d 	.word	0x0000042d
 800a5f0:	00000484 	.word	0x00000484
 800a5f4:	0000041c 	.word	0x0000041c
 800a5f8:	0000043c 	.word	0x0000043c
 800a5fc:	0000041f 	.word	0x0000041f
 800a600:	00000429 	.word	0x00000429
 800a604:	00000481 	.word	0x00000481
 800a608:	20000b9c 	.word	0x20000b9c
 800a60c:	00000414 	.word	0x00000414

0800a610 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800a610:	b580      	push	{r7, lr}
 800a612:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800a614:	4b12      	ldr	r3, [pc, #72]	@ (800a660 <ProcessRadioTxTimeout+0x50>)
 800a616:	4a13      	ldr	r2, [pc, #76]	@ (800a664 <ProcessRadioTxTimeout+0x54>)
 800a618:	589b      	ldr	r3, [r3, r2]
 800a61a:	22f0      	movs	r2, #240	@ 0xf0
 800a61c:	5c9b      	ldrb	r3, [r3, r2]
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d002      	beq.n	800a628 <ProcessRadioTxTimeout+0x18>
    {
        Radio.Sleep( );
 800a622:	4b11      	ldr	r3, [pc, #68]	@ (800a668 <ProcessRadioTxTimeout+0x58>)
 800a624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a626:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800a628:	f7ff f9c6 	bl	80099b8 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800a62c:	4b0c      	ldr	r3, [pc, #48]	@ (800a660 <ProcessRadioTxTimeout+0x50>)
 800a62e:	4a0f      	ldr	r2, [pc, #60]	@ (800a66c <ProcessRadioTxTimeout+0x5c>)
 800a630:	2102      	movs	r1, #2
 800a632:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800a634:	2002      	movs	r0, #2
 800a636:	f005 fa27 	bl	800fa88 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800a63a:	4b09      	ldr	r3, [pc, #36]	@ (800a660 <ProcessRadioTxTimeout+0x50>)
 800a63c:	4a0c      	ldr	r2, [pc, #48]	@ (800a670 <ProcessRadioTxTimeout+0x60>)
 800a63e:	5c9b      	ldrb	r3, [r3, r2]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d003      	beq.n	800a64c <ProcessRadioTxTimeout+0x3c>
    {
        MacCtx.AckTimeoutRetry = true;
 800a644:	4b06      	ldr	r3, [pc, #24]	@ (800a660 <ProcessRadioTxTimeout+0x50>)
 800a646:	4a0b      	ldr	r2, [pc, #44]	@ (800a674 <ProcessRadioTxTimeout+0x64>)
 800a648:	2101      	movs	r1, #1
 800a64a:	5499      	strb	r1, [r3, r2]
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a64c:	4b04      	ldr	r3, [pc, #16]	@ (800a660 <ProcessRadioTxTimeout+0x50>)
 800a64e:	4a0a      	ldr	r2, [pc, #40]	@ (800a678 <ProcessRadioTxTimeout+0x68>)
 800a650:	5c99      	ldrb	r1, [r3, r2]
 800a652:	2020      	movs	r0, #32
 800a654:	4301      	orrs	r1, r0
 800a656:	5499      	strb	r1, [r3, r2]
}
 800a658:	46c0      	nop			@ (mov r8, r8)
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	46c0      	nop			@ (mov r8, r8)
 800a660:	20000964 	.word	0x20000964
 800a664:	00000484 	.word	0x00000484
 800a668:	0801adcc 	.word	0x0801adcc
 800a66c:	0000043d 	.word	0x0000043d
 800a670:	00000414 	.word	0x00000414
 800a674:	00000413 	.word	0x00000413
 800a678:	00000481 	.word	0x00000481

0800a67c <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	0002      	movs	r2, r0
 800a684:	1dfb      	adds	r3, r7, #7
 800a686:	701a      	strb	r2, [r3, #0]
 800a688:	1dbb      	adds	r3, r7, #6
 800a68a:	1c0a      	adds	r2, r1, #0
 800a68c:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
 800a68e:	230f      	movs	r3, #15
 800a690:	18fb      	adds	r3, r7, r3
 800a692:	2200      	movs	r2, #0
 800a694:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800a696:	4b3d      	ldr	r3, [pc, #244]	@ (800a78c <HandleRadioRxErrorTimeout+0x110>)
 800a698:	4a3d      	ldr	r2, [pc, #244]	@ (800a790 <HandleRadioRxErrorTimeout+0x114>)
 800a69a:	589b      	ldr	r3, [r3, r2]
 800a69c:	22f0      	movs	r2, #240	@ 0xf0
 800a69e:	5c9b      	ldrb	r3, [r3, r2]
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d002      	beq.n	800a6aa <HandleRadioRxErrorTimeout+0x2e>
    {
        Radio.Sleep( );
 800a6a4:	4b3b      	ldr	r3, [pc, #236]	@ (800a794 <HandleRadioRxErrorTimeout+0x118>)
 800a6a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6a8:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800a6aa:	f004 fd61 	bl	800f170 <LoRaMacClassBIsBeaconExpected>
 800a6ae:	1e03      	subs	r3, r0, #0
 800a6b0:	d009      	beq.n	800a6c6 <HandleRadioRxErrorTimeout+0x4a>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800a6b2:	2002      	movs	r0, #2
 800a6b4:	f004 fd14 	bl	800f0e0 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	f004 fd35 	bl	800f128 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800a6be:	230f      	movs	r3, #15
 800a6c0:	18fb      	adds	r3, r7, r3
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800a6c6:	4b31      	ldr	r3, [pc, #196]	@ (800a78c <HandleRadioRxErrorTimeout+0x110>)
 800a6c8:	4a31      	ldr	r2, [pc, #196]	@ (800a790 <HandleRadioRxErrorTimeout+0x114>)
 800a6ca:	589b      	ldr	r3, [r3, r2]
 800a6cc:	22f0      	movs	r2, #240	@ 0xf0
 800a6ce:	5c9b      	ldrb	r3, [r3, r2]
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d11b      	bne.n	800a70c <HandleRadioRxErrorTimeout+0x90>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a6d4:	f004 fd52 	bl	800f17c <LoRaMacClassBIsPingExpected>
 800a6d8:	1e03      	subs	r3, r0, #0
 800a6da:	d009      	beq.n	800a6f0 <HandleRadioRxErrorTimeout+0x74>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a6dc:	2000      	movs	r0, #0
 800a6de:	f004 fd09 	bl	800f0f4 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800a6e2:	2000      	movs	r0, #0
 800a6e4:	f004 fd28 	bl	800f138 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800a6e8:	230f      	movs	r3, #15
 800a6ea:	18fb      	adds	r3, r7, r3
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a6f0:	f004 fd4a 	bl	800f188 <LoRaMacClassBIsMulticastExpected>
 800a6f4:	1e03      	subs	r3, r0, #0
 800a6f6:	d009      	beq.n	800a70c <HandleRadioRxErrorTimeout+0x90>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	f004 fd05 	bl	800f108 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a6fe:	2000      	movs	r0, #0
 800a700:	f004 fd22 	bl	800f148 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800a704:	230f      	movs	r3, #15
 800a706:	18fb      	adds	r3, r7, r3
 800a708:	2201      	movs	r2, #1
 800a70a:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
 800a70c:	230f      	movs	r3, #15
 800a70e:	18fb      	adds	r3, r7, r3
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	2201      	movs	r2, #1
 800a714:	4053      	eors	r3, r2
 800a716:	b2db      	uxtb	r3, r3
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d031      	beq.n	800a780 <HandleRadioRxErrorTimeout+0x104>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800a71c:	4a1b      	ldr	r2, [pc, #108]	@ (800a78c <HandleRadioRxErrorTimeout+0x110>)
 800a71e:	2390      	movs	r3, #144	@ 0x90
 800a720:	00db      	lsls	r3, r3, #3
 800a722:	5cd3      	ldrb	r3, [r2, r3]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10f      	bne.n	800a748 <HandleRadioRxErrorTimeout+0xcc>
        {
            if( MacCtx.NodeAckRequested == true )
 800a728:	4b18      	ldr	r3, [pc, #96]	@ (800a78c <HandleRadioRxErrorTimeout+0x110>)
 800a72a:	4a1b      	ldr	r2, [pc, #108]	@ (800a798 <HandleRadioRxErrorTimeout+0x11c>)
 800a72c:	5c9b      	ldrb	r3, [r3, r2]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d004      	beq.n	800a73c <HandleRadioRxErrorTimeout+0xc0>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800a732:	4b16      	ldr	r3, [pc, #88]	@ (800a78c <HandleRadioRxErrorTimeout+0x110>)
 800a734:	1dfa      	adds	r2, r7, #7
 800a736:	4919      	ldr	r1, [pc, #100]	@ (800a79c <HandleRadioRxErrorTimeout+0x120>)
 800a738:	7812      	ldrb	r2, [r2, #0]
 800a73a:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800a73c:	1dfb      	adds	r3, r7, #7
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	0018      	movs	r0, r3
 800a742:	f005 f9a1 	bl	800fa88 <LoRaMacConfirmQueueSetStatusCmn>
 800a746:	e01b      	b.n	800a780 <HandleRadioRxErrorTimeout+0x104>
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800a748:	4b10      	ldr	r3, [pc, #64]	@ (800a78c <HandleRadioRxErrorTimeout+0x110>)
 800a74a:	4a13      	ldr	r2, [pc, #76]	@ (800a798 <HandleRadioRxErrorTimeout+0x11c>)
 800a74c:	5c9b      	ldrb	r3, [r3, r2]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d004      	beq.n	800a75c <HandleRadioRxErrorTimeout+0xe0>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800a752:	4b0e      	ldr	r3, [pc, #56]	@ (800a78c <HandleRadioRxErrorTimeout+0x110>)
 800a754:	1dba      	adds	r2, r7, #6
 800a756:	4911      	ldr	r1, [pc, #68]	@ (800a79c <HandleRadioRxErrorTimeout+0x120>)
 800a758:	7812      	ldrb	r2, [r2, #0]
 800a75a:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800a75c:	1dbb      	adds	r3, r7, #6
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	0018      	movs	r0, r3
 800a762:	f005 f991 	bl	800fa88 <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800a766:	4b09      	ldr	r3, [pc, #36]	@ (800a78c <HandleRadioRxErrorTimeout+0x110>)
 800a768:	4a09      	ldr	r2, [pc, #36]	@ (800a790 <HandleRadioRxErrorTimeout+0x114>)
 800a76a:	589b      	ldr	r3, [r3, r2]
 800a76c:	22f0      	movs	r2, #240	@ 0xf0
 800a76e:	5c9b      	ldrb	r3, [r3, r2]
 800a770:	2b02      	cmp	r3, #2
 800a772:	d005      	beq.n	800a780 <HandleRadioRxErrorTimeout+0x104>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800a774:	4b05      	ldr	r3, [pc, #20]	@ (800a78c <HandleRadioRxErrorTimeout+0x110>)
 800a776:	4a0a      	ldr	r2, [pc, #40]	@ (800a7a0 <HandleRadioRxErrorTimeout+0x124>)
 800a778:	5c99      	ldrb	r1, [r3, r2]
 800a77a:	2020      	movs	r0, #32
 800a77c:	4301      	orrs	r1, r0
 800a77e:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    UpdateRxSlotIdleState( );
 800a780:	f7ff f91a 	bl	80099b8 <UpdateRxSlotIdleState>
}
 800a784:	46c0      	nop			@ (mov r8, r8)
 800a786:	46bd      	mov	sp, r7
 800a788:	b004      	add	sp, #16
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	20000964 	.word	0x20000964
 800a790:	00000484 	.word	0x00000484
 800a794:	0801adcc 	.word	0x0801adcc
 800a798:	00000414 	.word	0x00000414
 800a79c:	0000043d 	.word	0x0000043d
 800a7a0:	00000481 	.word	0x00000481

0800a7a4 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800a7a8:	2106      	movs	r1, #6
 800a7aa:	2005      	movs	r0, #5
 800a7ac:	f7ff ff66 	bl	800a67c <HandleRadioRxErrorTimeout>
}
 800a7b0:	46c0      	nop			@ (mov r8, r8)
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800a7ba:	2104      	movs	r1, #4
 800a7bc:	2003      	movs	r0, #3
 800a7be:	f7ff ff5d 	bl	800a67c <HandleRadioRxErrorTimeout>
}
 800a7c2:	46c0      	nop			@ (mov r8, r8)
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7ce:	f3ef 8310 	mrs	r3, PRIMASK
 800a7d2:	607b      	str	r3, [r7, #4]
  return(result);
 800a7d4:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800a7d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7d8:	b672      	cpsid	i
}
 800a7da:	46c0      	nop			@ (mov r8, r8)
    events = LoRaMacRadioEvents;
 800a7dc:	4b1f      	ldr	r3, [pc, #124]	@ (800a85c <LoRaMacHandleIrqEvents+0x94>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800a7e2:	4b1e      	ldr	r3, [pc, #120]	@ (800a85c <LoRaMacHandleIrqEvents+0x94>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	601a      	str	r2, [r3, #0]
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	f383 8810 	msr	PRIMASK, r3
}
 800a7f2:	46c0      	nop			@ (mov r8, r8)
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d02c      	beq.n	800a854 <LoRaMacHandleIrqEvents+0x8c>
    {
        if( events.Events.TxDone == 1 )
 800a7fa:	003b      	movs	r3, r7
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	2210      	movs	r2, #16
 800a800:	4013      	ands	r3, r2
 800a802:	b2db      	uxtb	r3, r3
 800a804:	2b00      	cmp	r3, #0
 800a806:	d001      	beq.n	800a80c <LoRaMacHandleIrqEvents+0x44>
        {
            ProcessRadioTxDone( );
 800a808:	f7ff f8f2 	bl	80099f0 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800a80c:	003b      	movs	r3, r7
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	2208      	movs	r2, #8
 800a812:	4013      	ands	r3, r2
 800a814:	b2db      	uxtb	r3, r3
 800a816:	2b00      	cmp	r3, #0
 800a818:	d001      	beq.n	800a81e <LoRaMacHandleIrqEvents+0x56>
        {
            ProcessRadioRxDone( );
 800a81a:	f7ff f9c1 	bl	8009ba0 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800a81e:	003b      	movs	r3, r7
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	2204      	movs	r2, #4
 800a824:	4013      	ands	r3, r2
 800a826:	b2db      	uxtb	r3, r3
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d001      	beq.n	800a830 <LoRaMacHandleIrqEvents+0x68>
        {
            ProcessRadioTxTimeout( );
 800a82c:	f7ff fef0 	bl	800a610 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800a830:	003b      	movs	r3, r7
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	2202      	movs	r2, #2
 800a836:	4013      	ands	r3, r2
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d001      	beq.n	800a842 <LoRaMacHandleIrqEvents+0x7a>
        {
            ProcessRadioRxError( );
 800a83e:	f7ff ffb1 	bl	800a7a4 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800a842:	003b      	movs	r3, r7
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	2201      	movs	r2, #1
 800a848:	4013      	ands	r3, r2
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d001      	beq.n	800a854 <LoRaMacHandleIrqEvents+0x8c>
        {
            ProcessRadioRxTimeout( );
 800a850:	f7ff ffb1 	bl	800a7b6 <ProcessRadioRxTimeout>
        }
    }
}
 800a854:	46c0      	nop			@ (mov r8, r8)
 800a856:	46bd      	mov	sp, r7
 800a858:	b004      	add	sp, #16
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	20001000 	.word	0x20001000

0800a860 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800a864:	4a08      	ldr	r2, [pc, #32]	@ (800a888 <LoRaMacIsBusy+0x28>)
 800a866:	23d0      	movs	r3, #208	@ 0xd0
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	58d3      	ldr	r3, [r2, r3]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d106      	bne.n	800a87e <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800a870:	4b05      	ldr	r3, [pc, #20]	@ (800a888 <LoRaMacIsBusy+0x28>)
 800a872:	4a06      	ldr	r2, [pc, #24]	@ (800a88c <LoRaMacIsBusy+0x2c>)
 800a874:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800a876:	2b01      	cmp	r3, #1
 800a878:	d101      	bne.n	800a87e <LoRaMacIsBusy+0x1e>
    {
        return false;
 800a87a:	2300      	movs	r3, #0
 800a87c:	e000      	b.n	800a880 <LoRaMacIsBusy+0x20>
    }
    return true;
 800a87e:	2301      	movs	r3, #1
}
 800a880:	0018      	movs	r0, r3
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	46c0      	nop			@ (mov r8, r8)
 800a888:	20000964 	.word	0x20000964
 800a88c:	00000482 	.word	0x00000482

0800a890 <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	0002      	movs	r2, r0
 800a898:	1dfb      	adds	r3, r7, #7
 800a89a:	701a      	strb	r2, [r3, #0]
    MacCtx.AllowRequests = requestState;
 800a89c:	4b04      	ldr	r3, [pc, #16]	@ (800a8b0 <LoRaMacEnableRequests+0x20>)
 800a89e:	1dfa      	adds	r2, r7, #7
 800a8a0:	4904      	ldr	r1, [pc, #16]	@ (800a8b4 <LoRaMacEnableRequests+0x24>)
 800a8a2:	7812      	ldrb	r2, [r2, #0]
 800a8a4:	545a      	strb	r2, [r3, r1]
}
 800a8a6:	46c0      	nop			@ (mov r8, r8)
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	b002      	add	sp, #8
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	46c0      	nop			@ (mov r8, r8)
 800a8b0:	20000964 	.word	0x20000964
 800a8b4:	00000482 	.word	0x00000482

0800a8b8 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800a8be:	1d3b      	adds	r3, r7, #4
 800a8c0:	4a2c      	ldr	r2, [pc, #176]	@ (800a974 <LoRaMacHandleRequestEvents+0xbc>)
 800a8c2:	492d      	ldr	r1, [pc, #180]	@ (800a978 <LoRaMacHandleRequestEvents+0xc0>)
 800a8c4:	5c52      	ldrb	r2, [r2, r1]
 800a8c6:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800a8c8:	4a2a      	ldr	r2, [pc, #168]	@ (800a974 <LoRaMacHandleRequestEvents+0xbc>)
 800a8ca:	23d0      	movs	r3, #208	@ 0xd0
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	58d3      	ldr	r3, [r2, r3]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d14a      	bne.n	800a96a <LoRaMacHandleRequestEvents+0xb2>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a8d4:	4b27      	ldr	r3, [pc, #156]	@ (800a974 <LoRaMacHandleRequestEvents+0xbc>)
 800a8d6:	4a28      	ldr	r2, [pc, #160]	@ (800a978 <LoRaMacHandleRequestEvents+0xc0>)
 800a8d8:	5c9b      	ldrb	r3, [r3, r2]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	4013      	ands	r3, r2
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d005      	beq.n	800a8f0 <LoRaMacHandleRequestEvents+0x38>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800a8e4:	4b23      	ldr	r3, [pc, #140]	@ (800a974 <LoRaMacHandleRequestEvents+0xbc>)
 800a8e6:	4a24      	ldr	r2, [pc, #144]	@ (800a978 <LoRaMacHandleRequestEvents+0xc0>)
 800a8e8:	5c99      	ldrb	r1, [r3, r2]
 800a8ea:	2001      	movs	r0, #1
 800a8ec:	4381      	bics	r1, r0
 800a8ee:	5499      	strb	r1, [r3, r2]
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a8f0:	4b20      	ldr	r3, [pc, #128]	@ (800a974 <LoRaMacHandleRequestEvents+0xbc>)
 800a8f2:	4a21      	ldr	r2, [pc, #132]	@ (800a978 <LoRaMacHandleRequestEvents+0xc0>)
 800a8f4:	5c9b      	ldrb	r3, [r3, r2]
 800a8f6:	2204      	movs	r2, #4
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d005      	beq.n	800a90c <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800a900:	4b1c      	ldr	r3, [pc, #112]	@ (800a974 <LoRaMacHandleRequestEvents+0xbc>)
 800a902:	4a1d      	ldr	r2, [pc, #116]	@ (800a978 <LoRaMacHandleRequestEvents+0xc0>)
 800a904:	5c99      	ldrb	r1, [r3, r2]
 800a906:	2004      	movs	r0, #4
 800a908:	4381      	bics	r1, r0
 800a90a:	5499      	strb	r1, [r3, r2]
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a90c:	2001      	movs	r0, #1
 800a90e:	f7ff ffbf 	bl	800a890 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800a912:	1d3b      	adds	r3, r7, #4
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	2201      	movs	r2, #1
 800a918:	4013      	ands	r3, r2
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d007      	beq.n	800a930 <LoRaMacHandleRequestEvents+0x78>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800a920:	4a14      	ldr	r2, [pc, #80]	@ (800a974 <LoRaMacHandleRequestEvents+0xbc>)
 800a922:	23d1      	movs	r3, #209	@ 0xd1
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	58d3      	ldr	r3, [r2, r3]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a14      	ldr	r2, [pc, #80]	@ (800a97c <LoRaMacHandleRequestEvents+0xc4>)
 800a92c:	0010      	movs	r0, r2
 800a92e:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800a930:	1d3b      	adds	r3, r7, #4
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	2204      	movs	r2, #4
 800a936:	4013      	ands	r3, r2
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00d      	beq.n	800a95a <LoRaMacHandleRequestEvents+0xa2>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800a93e:	4b10      	ldr	r3, [pc, #64]	@ (800a980 <LoRaMacHandleRequestEvents+0xc8>)
 800a940:	0018      	movs	r0, r3
 800a942:	f005 f8ed 	bl	800fb20 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800a946:	f005 f94d 	bl	800fbe4 <LoRaMacConfirmQueueGetCnt>
 800a94a:	1e03      	subs	r3, r0, #0
 800a94c:	d005      	beq.n	800a95a <LoRaMacHandleRequestEvents+0xa2>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a94e:	4b09      	ldr	r3, [pc, #36]	@ (800a974 <LoRaMacHandleRequestEvents+0xbc>)
 800a950:	4a09      	ldr	r2, [pc, #36]	@ (800a978 <LoRaMacHandleRequestEvents+0xc0>)
 800a952:	5c99      	ldrb	r1, [r3, r2]
 800a954:	2004      	movs	r0, #4
 800a956:	4301      	orrs	r1, r0
 800a958:	5499      	strb	r1, [r3, r2]
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800a95a:	f004 fc30 	bl	800f1be <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800a95e:	4b05      	ldr	r3, [pc, #20]	@ (800a974 <LoRaMacHandleRequestEvents+0xbc>)
 800a960:	4a05      	ldr	r2, [pc, #20]	@ (800a978 <LoRaMacHandleRequestEvents+0xc0>)
 800a962:	5c99      	ldrb	r1, [r3, r2]
 800a964:	2020      	movs	r0, #32
 800a966:	4381      	bics	r1, r0
 800a968:	5499      	strb	r1, [r3, r2]
    }
}
 800a96a:	46c0      	nop			@ (mov r8, r8)
 800a96c:	46bd      	mov	sp, r7
 800a96e:	b002      	add	sp, #8
 800a970:	bd80      	pop	{r7, pc}
 800a972:	46c0      	nop			@ (mov r8, r8)
 800a974:	20000964 	.word	0x20000964
 800a978:	00000481 	.word	0x00000481
 800a97c:	20000da0 	.word	0x20000da0
 800a980:	20000db4 	.word	0x20000db4

0800a984 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800a98a:	4a0b      	ldr	r2, [pc, #44]	@ (800a9b8 <LoRaMacHandleScheduleUplinkEvent+0x34>)
 800a98c:	23d0      	movs	r3, #208	@ 0xd0
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	58d3      	ldr	r3, [r2, r3]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d10c      	bne.n	800a9b0 <LoRaMacHandleScheduleUplinkEvent+0x2c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800a996:	1dfb      	adds	r3, r7, #7
 800a998:	2200      	movs	r2, #0
 800a99a:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800a99c:	1dfb      	adds	r3, r7, #7
 800a99e:	0018      	movs	r0, r3
 800a9a0:	f004 ff18 	bl	800f7d4 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800a9a4:	1dfb      	adds	r3, r7, #7
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <LoRaMacHandleScheduleUplinkEvent+0x2c>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800a9ac:	f000 fd02 	bl	800b3b4 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800a9b0:	46c0      	nop			@ (mov r8, r8)
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	b002      	add	sp, #8
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	20000964 	.word	0x20000964

0800a9bc <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b088      	sub	sp, #32
 800a9c0:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800a9c2:	4b26      	ldr	r3, [pc, #152]	@ (800aa5c <LoRaMacHandleIndicationEvents+0xa0>)
 800a9c4:	4a26      	ldr	r2, [pc, #152]	@ (800aa60 <LoRaMacHandleIndicationEvents+0xa4>)
 800a9c6:	5c9b      	ldrb	r3, [r3, r2]
 800a9c8:	2208      	movs	r2, #8
 800a9ca:	4013      	ands	r3, r2
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d00d      	beq.n	800a9ee <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800a9d2:	4b22      	ldr	r3, [pc, #136]	@ (800aa5c <LoRaMacHandleIndicationEvents+0xa0>)
 800a9d4:	4a22      	ldr	r2, [pc, #136]	@ (800aa60 <LoRaMacHandleIndicationEvents+0xa4>)
 800a9d6:	5c99      	ldrb	r1, [r3, r2]
 800a9d8:	2008      	movs	r0, #8
 800a9da:	4381      	bics	r1, r0
 800a9dc:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800a9de:	4a1f      	ldr	r2, [pc, #124]	@ (800aa5c <LoRaMacHandleIndicationEvents+0xa0>)
 800a9e0:	23d1      	movs	r3, #209	@ 0xd1
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	58d3      	ldr	r3, [r2, r3]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	4a1e      	ldr	r2, [pc, #120]	@ (800aa64 <LoRaMacHandleIndicationEvents+0xa8>)
 800a9ea:	0010      	movs	r0, r2
 800a9ec:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800a9ee:	4b1b      	ldr	r3, [pc, #108]	@ (800aa5c <LoRaMacHandleIndicationEvents+0xa0>)
 800a9f0:	4a1b      	ldr	r2, [pc, #108]	@ (800aa60 <LoRaMacHandleIndicationEvents+0xa4>)
 800a9f2:	5c9b      	ldrb	r3, [r3, r2]
 800a9f4:	2210      	movs	r2, #16
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d013      	beq.n	800aa26 <LoRaMacHandleIndicationEvents+0x6a>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800a9fe:	1d3b      	adds	r3, r7, #4
 800aa00:	2206      	movs	r2, #6
 800aa02:	701a      	strb	r2, [r3, #0]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800aa04:	1d3b      	adds	r3, r7, #4
 800aa06:	2200      	movs	r2, #0
 800aa08:	705a      	strb	r2, [r3, #1]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 800aa0a:	4a14      	ldr	r2, [pc, #80]	@ (800aa5c <LoRaMacHandleIndicationEvents+0xa0>)
 800aa0c:	23d1      	movs	r3, #209	@ 0xd1
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	58d3      	ldr	r3, [r2, r3]
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	1d3a      	adds	r2, r7, #4
 800aa16:	0010      	movs	r0, r2
 800aa18:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800aa1a:	4b10      	ldr	r3, [pc, #64]	@ (800aa5c <LoRaMacHandleIndicationEvents+0xa0>)
 800aa1c:	4a10      	ldr	r2, [pc, #64]	@ (800aa60 <LoRaMacHandleIndicationEvents+0xa4>)
 800aa1e:	5c99      	ldrb	r1, [r3, r2]
 800aa20:	2010      	movs	r0, #16
 800aa22:	4381      	bics	r1, r0
 800aa24:	5499      	strb	r1, [r3, r2]
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800aa26:	4b0d      	ldr	r3, [pc, #52]	@ (800aa5c <LoRaMacHandleIndicationEvents+0xa0>)
 800aa28:	4a0d      	ldr	r2, [pc, #52]	@ (800aa60 <LoRaMacHandleIndicationEvents+0xa4>)
 800aa2a:	5c9b      	ldrb	r3, [r3, r2]
 800aa2c:	2202      	movs	r2, #2
 800aa2e:	4013      	ands	r3, r2
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00d      	beq.n	800aa52 <LoRaMacHandleIndicationEvents+0x96>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800aa36:	4b09      	ldr	r3, [pc, #36]	@ (800aa5c <LoRaMacHandleIndicationEvents+0xa0>)
 800aa38:	4a09      	ldr	r2, [pc, #36]	@ (800aa60 <LoRaMacHandleIndicationEvents+0xa4>)
 800aa3a:	5c99      	ldrb	r1, [r3, r2]
 800aa3c:	2002      	movs	r0, #2
 800aa3e:	4381      	bics	r1, r0
 800aa40:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 800aa42:	4a06      	ldr	r2, [pc, #24]	@ (800aa5c <LoRaMacHandleIndicationEvents+0xa0>)
 800aa44:	23d1      	movs	r3, #209	@ 0xd1
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	58d3      	ldr	r3, [r2, r3]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	4a06      	ldr	r2, [pc, #24]	@ (800aa68 <LoRaMacHandleIndicationEvents+0xac>)
 800aa4e:	0010      	movs	r0, r2
 800aa50:	4798      	blx	r3
    }
}
 800aa52:	46c0      	nop			@ (mov r8, r8)
 800aa54:	46bd      	mov	sp, r7
 800aa56:	b008      	add	sp, #32
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	46c0      	nop			@ (mov r8, r8)
 800aa5c:	20000964 	.word	0x20000964
 800aa60:	00000481 	.word	0x00000481
 800aa64:	20000dc8 	.word	0x20000dc8
 800aa68:	20000d80 	.word	0x20000d80

0800aa6c <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800aa6c:	b590      	push	{r4, r7, lr}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800aa72:	4b39      	ldr	r3, [pc, #228]	@ (800ab58 <LoRaMacHandleMcpsRequest+0xec>)
 800aa74:	4a39      	ldr	r2, [pc, #228]	@ (800ab5c <LoRaMacHandleMcpsRequest+0xf0>)
 800aa76:	5c9b      	ldrb	r3, [r3, r2]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	4013      	ands	r3, r2
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d066      	beq.n	800ab50 <LoRaMacHandleMcpsRequest+0xe4>
    {
        bool stopRetransmission = false;
 800aa82:	1dfb      	adds	r3, r7, #7
 800aa84:	2200      	movs	r2, #0
 800aa86:	701a      	strb	r2, [r3, #0]
        bool waitForRetransmission = false;
 800aa88:	1dbb      	adds	r3, r7, #6
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	701a      	strb	r2, [r3, #0]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800aa8e:	4b32      	ldr	r3, [pc, #200]	@ (800ab58 <LoRaMacHandleMcpsRequest+0xec>)
 800aa90:	4a33      	ldr	r2, [pc, #204]	@ (800ab60 <LoRaMacHandleMcpsRequest+0xf4>)
 800aa92:	5c9b      	ldrb	r3, [r3, r2]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d004      	beq.n	800aaa2 <LoRaMacHandleMcpsRequest+0x36>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800aa98:	4b2f      	ldr	r3, [pc, #188]	@ (800ab58 <LoRaMacHandleMcpsRequest+0xec>)
 800aa9a:	4a31      	ldr	r2, [pc, #196]	@ (800ab60 <LoRaMacHandleMcpsRequest+0xf4>)
 800aa9c:	5c9b      	ldrb	r3, [r3, r2]
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800aa9e:	2b03      	cmp	r3, #3
 800aaa0:	d105      	bne.n	800aaae <LoRaMacHandleMcpsRequest+0x42>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800aaa2:	1dfc      	adds	r4, r7, #7
 800aaa4:	f002 fb1c 	bl	800d0e0 <CheckRetransUnconfirmedUplink>
 800aaa8:	0003      	movs	r3, r0
 800aaaa:	7023      	strb	r3, [r4, #0]
 800aaac:	e026      	b.n	800aafc <LoRaMacHandleMcpsRequest+0x90>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800aaae:	4b2a      	ldr	r3, [pc, #168]	@ (800ab58 <LoRaMacHandleMcpsRequest+0xec>)
 800aab0:	4a2b      	ldr	r2, [pc, #172]	@ (800ab60 <LoRaMacHandleMcpsRequest+0xf4>)
 800aab2:	5c9b      	ldrb	r3, [r3, r2]
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d121      	bne.n	800aafc <LoRaMacHandleMcpsRequest+0x90>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800aab8:	4b27      	ldr	r3, [pc, #156]	@ (800ab58 <LoRaMacHandleMcpsRequest+0xec>)
 800aaba:	4a2a      	ldr	r2, [pc, #168]	@ (800ab64 <LoRaMacHandleMcpsRequest+0xf8>)
 800aabc:	5c9b      	ldrb	r3, [r3, r2]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d019      	beq.n	800aaf6 <LoRaMacHandleMcpsRequest+0x8a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800aac2:	1dfc      	adds	r4, r7, #7
 800aac4:	f002 fb40 	bl	800d148 <CheckRetransConfirmedUplink>
 800aac8:	0003      	movs	r3, r0
 800aaca:	7023      	strb	r3, [r4, #0]

                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800aacc:	4b22      	ldr	r3, [pc, #136]	@ (800ab58 <LoRaMacHandleMcpsRequest+0xec>)
 800aace:	4a26      	ldr	r2, [pc, #152]	@ (800ab68 <LoRaMacHandleMcpsRequest+0xfc>)
 800aad0:	589a      	ldr	r2, [r3, r2]
 800aad2:	23e9      	movs	r3, #233	@ 0xe9
 800aad4:	005b      	lsls	r3, r3, #1
 800aad6:	5cd3      	ldrb	r3, [r2, r3]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d10f      	bne.n	800aafc <LoRaMacHandleMcpsRequest+0x90>
                {
                    if( stopRetransmission == false )
 800aadc:	1dfb      	adds	r3, r7, #7
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	2201      	movs	r2, #1
 800aae2:	4053      	eors	r3, r2
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d002      	beq.n	800aaf0 <LoRaMacHandleMcpsRequest+0x84>
                    {
                        AckTimeoutRetriesProcess( );
 800aaea:	f002 fba1 	bl	800d230 <AckTimeoutRetriesProcess>
 800aaee:	e005      	b.n	800aafc <LoRaMacHandleMcpsRequest+0x90>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800aaf0:	f002 fbec 	bl	800d2cc <AckTimeoutRetriesFinalize>
 800aaf4:	e002      	b.n	800aafc <LoRaMacHandleMcpsRequest+0x90>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800aaf6:	1dbb      	adds	r3, r7, #6
 800aaf8:	2201      	movs	r2, #1
 800aafa:	701a      	strb	r2, [r3, #0]
            }
        }

        if( stopRetransmission == true )
 800aafc:	1dfb      	adds	r3, r7, #7
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d011      	beq.n	800ab28 <LoRaMacHandleMcpsRequest+0xbc>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800ab04:	4b19      	ldr	r3, [pc, #100]	@ (800ab6c <LoRaMacHandleMcpsRequest+0x100>)
 800ab06:	0018      	movs	r0, r3
 800ab08:	f00a fb48 	bl	801519c <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ab0c:	4a12      	ldr	r2, [pc, #72]	@ (800ab58 <LoRaMacHandleMcpsRequest+0xec>)
 800ab0e:	23d0      	movs	r3, #208	@ 0xd0
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	58d3      	ldr	r3, [r2, r3]
 800ab14:	2220      	movs	r2, #32
 800ab16:	4393      	bics	r3, r2
 800ab18:	0019      	movs	r1, r3
 800ab1a:	4a0f      	ldr	r2, [pc, #60]	@ (800ab58 <LoRaMacHandleMcpsRequest+0xec>)
 800ab1c:	23d0      	movs	r3, #208	@ 0xd0
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	50d1      	str	r1, [r2, r3]
            StopRetransmission( );
 800ab22:	f002 fb39 	bl	800d198 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800ab26:	e013      	b.n	800ab50 <LoRaMacHandleMcpsRequest+0xe4>
        else if( waitForRetransmission == false )
 800ab28:	1dbb      	adds	r3, r7, #6
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	4053      	eors	r3, r2
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d00c      	beq.n	800ab50 <LoRaMacHandleMcpsRequest+0xe4>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800ab36:	4b08      	ldr	r3, [pc, #32]	@ (800ab58 <LoRaMacHandleMcpsRequest+0xec>)
 800ab38:	4a08      	ldr	r2, [pc, #32]	@ (800ab5c <LoRaMacHandleMcpsRequest+0xf0>)
 800ab3a:	5c99      	ldrb	r1, [r3, r2]
 800ab3c:	2020      	movs	r0, #32
 800ab3e:	4381      	bics	r1, r0
 800ab40:	5499      	strb	r1, [r3, r2]
            MacCtx.AckTimeoutRetry = false;
 800ab42:	4b05      	ldr	r3, [pc, #20]	@ (800ab58 <LoRaMacHandleMcpsRequest+0xec>)
 800ab44:	4a07      	ldr	r2, [pc, #28]	@ (800ab64 <LoRaMacHandleMcpsRequest+0xf8>)
 800ab46:	2100      	movs	r1, #0
 800ab48:	5499      	strb	r1, [r3, r2]
            OnTxDelayedTimerEvent( NULL );
 800ab4a:	2000      	movs	r0, #0
 800ab4c:	f000 f8e8 	bl	800ad20 <OnTxDelayedTimerEvent>
}
 800ab50:	46c0      	nop			@ (mov r8, r8)
 800ab52:	46bd      	mov	sp, r7
 800ab54:	b003      	add	sp, #12
 800ab56:	bd90      	pop	{r4, r7, pc}
 800ab58:	20000964 	.word	0x20000964
 800ab5c:	00000481 	.word	0x00000481
 800ab60:	0000043c 	.word	0x0000043c
 800ab64:	00000413 	.word	0x00000413
 800ab68:	00000484 	.word	0x00000484
 800ab6c:	20000ccc 	.word	0x20000ccc

0800ab70 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ab74:	4b1d      	ldr	r3, [pc, #116]	@ (800abec <LoRaMacHandleMlmeRequest+0x7c>)
 800ab76:	4a1e      	ldr	r2, [pc, #120]	@ (800abf0 <LoRaMacHandleMlmeRequest+0x80>)
 800ab78:	5c9b      	ldrb	r3, [r3, r2]
 800ab7a:	2204      	movs	r2, #4
 800ab7c:	4013      	ands	r3, r2
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d02f      	beq.n	800abe4 <LoRaMacHandleMlmeRequest+0x74>
    {
        if( ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 800ab84:	2000      	movs	r0, #0
 800ab86:	f004 ffb1 	bl	800faec <LoRaMacConfirmQueueIsCmdActive>
 800ab8a:	1e03      	subs	r3, r0, #0
 800ab8c:	d015      	beq.n	800abba <LoRaMacHandleMlmeRequest+0x4a>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800ab8e:	2000      	movs	r0, #0
 800ab90:	f004 ff54 	bl	800fa3c <LoRaMacConfirmQueueGetStatus>
 800ab94:	1e03      	subs	r3, r0, #0
 800ab96:	d104      	bne.n	800aba2 <LoRaMacHandleMlmeRequest+0x32>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800ab98:	4a14      	ldr	r2, [pc, #80]	@ (800abec <LoRaMacHandleMlmeRequest+0x7c>)
 800ab9a:	2382      	movs	r3, #130	@ 0x82
 800ab9c:	00db      	lsls	r3, r3, #3
 800ab9e:	2100      	movs	r1, #0
 800aba0:	54d1      	strb	r1, [r2, r3]
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800aba2:	4a12      	ldr	r2, [pc, #72]	@ (800abec <LoRaMacHandleMlmeRequest+0x7c>)
 800aba4:	23d0      	movs	r3, #208	@ 0xd0
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	58d3      	ldr	r3, [r2, r3]
 800abaa:	2202      	movs	r2, #2
 800abac:	4393      	bics	r3, r2
 800abae:	0019      	movs	r1, r3
 800abb0:	4a0e      	ldr	r2, [pc, #56]	@ (800abec <LoRaMacHandleMlmeRequest+0x7c>)
 800abb2:	23d0      	movs	r3, #208	@ 0xd0
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	50d1      	str	r1, [r2, r3]
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800abb8:	e014      	b.n	800abe4 <LoRaMacHandleMlmeRequest+0x74>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800abba:	2004      	movs	r0, #4
 800abbc:	f004 ff96 	bl	800faec <LoRaMacConfirmQueueIsCmdActive>
 800abc0:	1e03      	subs	r3, r0, #0
 800abc2:	d104      	bne.n	800abce <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800abc4:	2005      	movs	r0, #5
 800abc6:	f004 ff91 	bl	800faec <LoRaMacConfirmQueueIsCmdActive>
 800abca:	1e03      	subs	r3, r0, #0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800abcc:	d00a      	beq.n	800abe4 <LoRaMacHandleMlmeRequest+0x74>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800abce:	4a07      	ldr	r2, [pc, #28]	@ (800abec <LoRaMacHandleMlmeRequest+0x7c>)
 800abd0:	23d0      	movs	r3, #208	@ 0xd0
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	58d3      	ldr	r3, [r2, r3]
 800abd6:	2202      	movs	r2, #2
 800abd8:	4393      	bics	r3, r2
 800abda:	0019      	movs	r1, r3
 800abdc:	4a03      	ldr	r2, [pc, #12]	@ (800abec <LoRaMacHandleMlmeRequest+0x7c>)
 800abde:	23d0      	movs	r3, #208	@ 0xd0
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	50d1      	str	r1, [r2, r3]
}
 800abe4:	46c0      	nop			@ (mov r8, r8)
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	46c0      	nop			@ (mov r8, r8)
 800abec:	20000964 	.word	0x20000964
 800abf0:	00000481 	.word	0x00000481

0800abf4 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800abf8:	200b      	movs	r0, #11
 800abfa:	f004 ff77 	bl	800faec <LoRaMacConfirmQueueIsCmdActive>
 800abfe:	1e03      	subs	r3, r0, #0
 800ac00:	d01c      	beq.n	800ac3c <LoRaMacCheckForBeaconAcquisition+0x48>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800ac02:	4b10      	ldr	r3, [pc, #64]	@ (800ac44 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800ac04:	4a10      	ldr	r2, [pc, #64]	@ (800ac48 <LoRaMacCheckForBeaconAcquisition+0x54>)
 800ac06:	5c9b      	ldrb	r3, [r3, r2]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	4013      	ands	r3, r2
 800ac0c:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d114      	bne.n	800ac3c <LoRaMacCheckForBeaconAcquisition+0x48>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ac12:	4b0c      	ldr	r3, [pc, #48]	@ (800ac44 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800ac14:	4a0c      	ldr	r2, [pc, #48]	@ (800ac48 <LoRaMacCheckForBeaconAcquisition+0x54>)
 800ac16:	5c9b      	ldrb	r3, [r3, r2]
 800ac18:	2204      	movs	r2, #4
 800ac1a:	4013      	ands	r3, r2
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00c      	beq.n	800ac3c <LoRaMacCheckForBeaconAcquisition+0x48>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ac22:	4a08      	ldr	r2, [pc, #32]	@ (800ac44 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800ac24:	23d0      	movs	r3, #208	@ 0xd0
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	58d3      	ldr	r3, [r2, r3]
 800ac2a:	2202      	movs	r2, #2
 800ac2c:	4393      	bics	r3, r2
 800ac2e:	0019      	movs	r1, r3
 800ac30:	4a04      	ldr	r2, [pc, #16]	@ (800ac44 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800ac32:	23d0      	movs	r3, #208	@ 0xd0
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	50d1      	str	r1, [r2, r3]
            return 0x01;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	e000      	b.n	800ac3e <LoRaMacCheckForBeaconAcquisition+0x4a>
        }
    }
    return 0x00;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	0018      	movs	r0, r3
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	20000964 	.word	0x20000964
 800ac48:	00000481 	.word	0x00000481

0800ac4c <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800ac50:	4a0f      	ldr	r2, [pc, #60]	@ (800ac90 <LoRaMacCheckForRxAbort+0x44>)
 800ac52:	23d0      	movs	r3, #208	@ 0xd0
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	58d3      	ldr	r3, [r2, r3]
 800ac58:	2280      	movs	r2, #128	@ 0x80
 800ac5a:	4013      	ands	r3, r2
 800ac5c:	d015      	beq.n	800ac8a <LoRaMacCheckForRxAbort+0x3e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800ac5e:	4a0c      	ldr	r2, [pc, #48]	@ (800ac90 <LoRaMacCheckForRxAbort+0x44>)
 800ac60:	23d0      	movs	r3, #208	@ 0xd0
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	58d3      	ldr	r3, [r2, r3]
 800ac66:	2280      	movs	r2, #128	@ 0x80
 800ac68:	4393      	bics	r3, r2
 800ac6a:	0019      	movs	r1, r3
 800ac6c:	4a08      	ldr	r2, [pc, #32]	@ (800ac90 <LoRaMacCheckForRxAbort+0x44>)
 800ac6e:	23d0      	movs	r3, #208	@ 0xd0
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	50d1      	str	r1, [r2, r3]
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ac74:	4a06      	ldr	r2, [pc, #24]	@ (800ac90 <LoRaMacCheckForRxAbort+0x44>)
 800ac76:	23d0      	movs	r3, #208	@ 0xd0
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	58d3      	ldr	r3, [r2, r3]
 800ac7c:	2202      	movs	r2, #2
 800ac7e:	4393      	bics	r3, r2
 800ac80:	0019      	movs	r1, r3
 800ac82:	4a03      	ldr	r2, [pc, #12]	@ (800ac90 <LoRaMacCheckForRxAbort+0x44>)
 800ac84:	23d0      	movs	r3, #208	@ 0xd0
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	50d1      	str	r1, [r2, r3]
    }
}
 800ac8a:	46c0      	nop			@ (mov r8, r8)
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	20000964 	.word	0x20000964

0800ac94 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800ac9a:	1dfb      	adds	r3, r7, #7
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
 800aca0:	f7ff fd92 	bl	800a7c8 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800aca4:	f004 fae8 	bl	800f278 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800aca8:	4b1b      	ldr	r3, [pc, #108]	@ (800ad18 <LoRaMacProcess+0x84>)
 800acaa:	4a1c      	ldr	r2, [pc, #112]	@ (800ad1c <LoRaMacProcess+0x88>)
 800acac:	5c9b      	ldrb	r3, [r3, r2]
 800acae:	2220      	movs	r2, #32
 800acb0:	4013      	ands	r3, r2
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d020      	beq.n	800acfa <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800acb8:	2000      	movs	r0, #0
 800acba:	f7ff fde9 	bl	800a890 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800acbe:	f7ff ffc5 	bl	800ac4c <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800acc2:	f002 fb99 	bl	800d3f8 <IsRequestPending>
 800acc6:	1e03      	subs	r3, r0, #0
 800acc8:	d008      	beq.n	800acdc <LoRaMacProcess+0x48>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800acca:	f7ff ff93 	bl	800abf4 <LoRaMacCheckForBeaconAcquisition>
 800acce:	0003      	movs	r3, r0
 800acd0:	0019      	movs	r1, r3
 800acd2:	1dfb      	adds	r3, r7, #7
 800acd4:	1dfa      	adds	r2, r7, #7
 800acd6:	7812      	ldrb	r2, [r2, #0]
 800acd8:	430a      	orrs	r2, r1
 800acda:	701a      	strb	r2, [r3, #0]
        }

        if( noTx == 0x00 )
 800acdc:	1dfb      	adds	r3, r7, #7
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d103      	bne.n	800acec <LoRaMacProcess+0x58>
        {
            LoRaMacHandleMlmeRequest( );
 800ace4:	f7ff ff44 	bl	800ab70 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800ace8:	f7ff fec0 	bl	800aa6c <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800acec:	f7ff fde4 	bl	800a8b8 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800acf0:	f7ff fe48 	bl	800a984 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800acf4:	2001      	movs	r0, #1
 800acf6:	f7ff fdcb 	bl	800a890 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800acfa:	f7ff fe5f 	bl	800a9bc <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800acfe:	4a06      	ldr	r2, [pc, #24]	@ (800ad18 <LoRaMacProcess+0x84>)
 800ad00:	2390      	movs	r3, #144	@ 0x90
 800ad02:	00db      	lsls	r3, r3, #3
 800ad04:	5cd3      	ldrb	r3, [r2, r3]
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	d101      	bne.n	800ad0e <LoRaMacProcess+0x7a>
    {
        OpenContinuousRxCWindow( );
 800ad0a:	f001 fe05 	bl	800c918 <OpenContinuousRxCWindow>
    }
}
 800ad0e:	46c0      	nop			@ (mov r8, r8)
 800ad10:	46bd      	mov	sp, r7
 800ad12:	b002      	add	sp, #8
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	46c0      	nop			@ (mov r8, r8)
 800ad18:	20000964 	.word	0x20000964
 800ad1c:	00000481 	.word	0x00000481

0800ad20 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800ad28:	4b19      	ldr	r3, [pc, #100]	@ (800ad90 <OnTxDelayedTimerEvent+0x70>)
 800ad2a:	0018      	movs	r0, r3
 800ad2c:	f00a fa36 	bl	801519c <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ad30:	4a18      	ldr	r2, [pc, #96]	@ (800ad94 <OnTxDelayedTimerEvent+0x74>)
 800ad32:	23d0      	movs	r3, #208	@ 0xd0
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	58d3      	ldr	r3, [r2, r3]
 800ad38:	2220      	movs	r2, #32
 800ad3a:	4393      	bics	r3, r2
 800ad3c:	0019      	movs	r1, r3
 800ad3e:	4a15      	ldr	r2, [pc, #84]	@ (800ad94 <OnTxDelayedTimerEvent+0x74>)
 800ad40:	23d0      	movs	r3, #208	@ 0xd0
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800ad46:	2001      	movs	r0, #1
 800ad48:	f001 fa46 	bl	800c1d8 <ScheduleTx>
 800ad4c:	1e03      	subs	r3, r0, #0
 800ad4e:	d01a      	beq.n	800ad86 <OnTxDelayedTimerEvent+0x66>
 800ad50:	2b0b      	cmp	r3, #11
 800ad52:	d018      	beq.n	800ad86 <OnTxDelayedTimerEvent+0x66>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800ad54:	4b0f      	ldr	r3, [pc, #60]	@ (800ad94 <OnTxDelayedTimerEvent+0x74>)
 800ad56:	4a10      	ldr	r2, [pc, #64]	@ (800ad98 <OnTxDelayedTimerEvent+0x78>)
 800ad58:	589b      	ldr	r3, [r3, r2]
 800ad5a:	22f9      	movs	r2, #249	@ 0xf9
 800ad5c:	569b      	ldrsb	r3, [r3, r2]
 800ad5e:	b2d9      	uxtb	r1, r3
 800ad60:	4b0c      	ldr	r3, [pc, #48]	@ (800ad94 <OnTxDelayedTimerEvent+0x74>)
 800ad62:	4a0e      	ldr	r2, [pc, #56]	@ (800ad9c <OnTxDelayedTimerEvent+0x7c>)
 800ad64:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800ad66:	4b0b      	ldr	r3, [pc, #44]	@ (800ad94 <OnTxDelayedTimerEvent+0x74>)
 800ad68:	4a0d      	ldr	r2, [pc, #52]	@ (800ada0 <OnTxDelayedTimerEvent+0x80>)
 800ad6a:	5c99      	ldrb	r1, [r3, r2]
 800ad6c:	4b09      	ldr	r3, [pc, #36]	@ (800ad94 <OnTxDelayedTimerEvent+0x74>)
 800ad6e:	4a0d      	ldr	r2, [pc, #52]	@ (800ada4 <OnTxDelayedTimerEvent+0x84>)
 800ad70:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800ad72:	4b08      	ldr	r3, [pc, #32]	@ (800ad94 <OnTxDelayedTimerEvent+0x74>)
 800ad74:	4a0c      	ldr	r2, [pc, #48]	@ (800ada8 <OnTxDelayedTimerEvent+0x88>)
 800ad76:	2109      	movs	r1, #9
 800ad78:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800ad7a:	2009      	movs	r0, #9
 800ad7c:	f004 fe84 	bl	800fa88 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800ad80:	f002 fa0a 	bl	800d198 <StopRetransmission>
            break;
 800ad84:	e000      	b.n	800ad88 <OnTxDelayedTimerEvent+0x68>
            break;
 800ad86:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 800ad88:	46c0      	nop			@ (mov r8, r8)
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	b002      	add	sp, #8
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	20000ccc 	.word	0x20000ccc
 800ad94:	20000964 	.word	0x20000964
 800ad98:	00000484 	.word	0x00000484
 800ad9c:	0000043e 	.word	0x0000043e
 800ada0:	00000412 	.word	0x00000412
 800ada4:	00000441 	.word	0x00000441
 800ada8:	0000043d 	.word	0x0000043d

0800adac <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800adb4:	4b1a      	ldr	r3, [pc, #104]	@ (800ae20 <OnRxWindow1TimerEvent+0x74>)
 800adb6:	4a1b      	ldr	r2, [pc, #108]	@ (800ae24 <OnRxWindow1TimerEvent+0x78>)
 800adb8:	5c99      	ldrb	r1, [r3, r2]
 800adba:	4a19      	ldr	r2, [pc, #100]	@ (800ae20 <OnRxWindow1TimerEvent+0x74>)
 800adbc:	23ee      	movs	r3, #238	@ 0xee
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 800adc2:	4b17      	ldr	r3, [pc, #92]	@ (800ae20 <OnRxWindow1TimerEvent+0x74>)
 800adc4:	4a18      	ldr	r2, [pc, #96]	@ (800ae28 <OnRxWindow1TimerEvent+0x7c>)
 800adc6:	589a      	ldr	r2, [r3, r2]
 800adc8:	231a      	movs	r3, #26
 800adca:	33ff      	adds	r3, #255	@ 0xff
 800adcc:	5cd3      	ldrb	r3, [r2, r3]
 800adce:	b259      	sxtb	r1, r3
 800add0:	4b13      	ldr	r3, [pc, #76]	@ (800ae20 <OnRxWindow1TimerEvent+0x74>)
 800add2:	4a16      	ldr	r2, [pc, #88]	@ (800ae2c <OnRxWindow1TimerEvent+0x80>)
 800add4:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800add6:	4b12      	ldr	r3, [pc, #72]	@ (800ae20 <OnRxWindow1TimerEvent+0x74>)
 800add8:	4a13      	ldr	r2, [pc, #76]	@ (800ae28 <OnRxWindow1TimerEvent+0x7c>)
 800adda:	589a      	ldr	r2, [r3, r2]
 800addc:	232e      	movs	r3, #46	@ 0x2e
 800adde:	33ff      	adds	r3, #255	@ 0xff
 800ade0:	5cd1      	ldrb	r1, [r2, r3]
 800ade2:	4a0f      	ldr	r2, [pc, #60]	@ (800ae20 <OnRxWindow1TimerEvent+0x74>)
 800ade4:	23f2      	movs	r3, #242	@ 0xf2
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800adea:	4b0d      	ldr	r3, [pc, #52]	@ (800ae20 <OnRxWindow1TimerEvent+0x74>)
 800adec:	4a0e      	ldr	r2, [pc, #56]	@ (800ae28 <OnRxWindow1TimerEvent+0x7c>)
 800adee:	589a      	ldr	r2, [r3, r2]
 800adf0:	2340      	movs	r3, #64	@ 0x40
 800adf2:	33ff      	adds	r3, #255	@ 0xff
 800adf4:	5cd1      	ldrb	r1, [r2, r3]
 800adf6:	4b0a      	ldr	r3, [pc, #40]	@ (800ae20 <OnRxWindow1TimerEvent+0x74>)
 800adf8:	4a0d      	ldr	r2, [pc, #52]	@ (800ae30 <OnRxWindow1TimerEvent+0x84>)
 800adfa:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 800adfc:	4b08      	ldr	r3, [pc, #32]	@ (800ae20 <OnRxWindow1TimerEvent+0x74>)
 800adfe:	4a0d      	ldr	r2, [pc, #52]	@ (800ae34 <OnRxWindow1TimerEvent+0x88>)
 800ae00:	2100      	movs	r1, #0
 800ae02:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800ae04:	4b06      	ldr	r3, [pc, #24]	@ (800ae20 <OnRxWindow1TimerEvent+0x74>)
 800ae06:	4a0c      	ldr	r2, [pc, #48]	@ (800ae38 <OnRxWindow1TimerEvent+0x8c>)
 800ae08:	2100      	movs	r1, #0
 800ae0a:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800ae0c:	4a0b      	ldr	r2, [pc, #44]	@ (800ae3c <OnRxWindow1TimerEvent+0x90>)
 800ae0e:	4b0c      	ldr	r3, [pc, #48]	@ (800ae40 <OnRxWindow1TimerEvent+0x94>)
 800ae10:	0011      	movs	r1, r2
 800ae12:	0018      	movs	r0, r3
 800ae14:	f001 fd4c 	bl	800c8b0 <RxWindowSetup>
}
 800ae18:	46c0      	nop			@ (mov r8, r8)
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	b002      	add	sp, #8
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	20000964 	.word	0x20000964
 800ae24:	00000415 	.word	0x00000415
 800ae28:	00000484 	.word	0x00000484
 800ae2c:	000003bb 	.word	0x000003bb
 800ae30:	000003c9 	.word	0x000003c9
 800ae34:	000003ca 	.word	0x000003ca
 800ae38:	000003cb 	.word	0x000003cb
 800ae3c:	20000d1c 	.word	0x20000d1c
 800ae40:	20000ce4 	.word	0x20000ce4

0800ae44 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ae4c:	4a1e      	ldr	r2, [pc, #120]	@ (800aec8 <OnRxWindow2TimerEvent+0x84>)
 800ae4e:	2390      	movs	r3, #144	@ 0x90
 800ae50:	00db      	lsls	r3, r3, #3
 800ae52:	5cd3      	ldrb	r3, [r2, r3]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d032      	beq.n	800aebe <OnRxWindow2TimerEvent+0x7a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800ae58:	4b1b      	ldr	r3, [pc, #108]	@ (800aec8 <OnRxWindow2TimerEvent+0x84>)
 800ae5a:	4a1c      	ldr	r2, [pc, #112]	@ (800aecc <OnRxWindow2TimerEvent+0x88>)
 800ae5c:	5c99      	ldrb	r1, [r3, r2]
 800ae5e:	4a1a      	ldr	r2, [pc, #104]	@ (800aec8 <OnRxWindow2TimerEvent+0x84>)
 800ae60:	23f3      	movs	r3, #243	@ 0xf3
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800ae66:	4b18      	ldr	r3, [pc, #96]	@ (800aec8 <OnRxWindow2TimerEvent+0x84>)
 800ae68:	4a19      	ldr	r2, [pc, #100]	@ (800aed0 <OnRxWindow2TimerEvent+0x8c>)
 800ae6a:	589a      	ldr	r2, [r3, r2]
 800ae6c:	238e      	movs	r3, #142	@ 0x8e
 800ae6e:	005b      	lsls	r3, r3, #1
 800ae70:	58d1      	ldr	r1, [r2, r3]
 800ae72:	4a15      	ldr	r2, [pc, #84]	@ (800aec8 <OnRxWindow2TimerEvent+0x84>)
 800ae74:	23f4      	movs	r3, #244	@ 0xf4
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ae7a:	4b13      	ldr	r3, [pc, #76]	@ (800aec8 <OnRxWindow2TimerEvent+0x84>)
 800ae7c:	4a14      	ldr	r2, [pc, #80]	@ (800aed0 <OnRxWindow2TimerEvent+0x8c>)
 800ae7e:	589a      	ldr	r2, [r3, r2]
 800ae80:	232e      	movs	r3, #46	@ 0x2e
 800ae82:	33ff      	adds	r3, #255	@ 0xff
 800ae84:	5cd1      	ldrb	r1, [r2, r3]
 800ae86:	4a10      	ldr	r2, [pc, #64]	@ (800aec8 <OnRxWindow2TimerEvent+0x84>)
 800ae88:	23f7      	movs	r3, #247	@ 0xf7
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800ae8e:	4b0e      	ldr	r3, [pc, #56]	@ (800aec8 <OnRxWindow2TimerEvent+0x84>)
 800ae90:	4a0f      	ldr	r2, [pc, #60]	@ (800aed0 <OnRxWindow2TimerEvent+0x8c>)
 800ae92:	589a      	ldr	r2, [r3, r2]
 800ae94:	2340      	movs	r3, #64	@ 0x40
 800ae96:	33ff      	adds	r3, #255	@ 0xff
 800ae98:	5cd1      	ldrb	r1, [r2, r3]
 800ae9a:	4b0b      	ldr	r3, [pc, #44]	@ (800aec8 <OnRxWindow2TimerEvent+0x84>)
 800ae9c:	4a0d      	ldr	r2, [pc, #52]	@ (800aed4 <OnRxWindow2TimerEvent+0x90>)
 800ae9e:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 800aea0:	4b09      	ldr	r3, [pc, #36]	@ (800aec8 <OnRxWindow2TimerEvent+0x84>)
 800aea2:	4a0d      	ldr	r2, [pc, #52]	@ (800aed8 <OnRxWindow2TimerEvent+0x94>)
 800aea4:	2100      	movs	r1, #0
 800aea6:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800aea8:	4b07      	ldr	r3, [pc, #28]	@ (800aec8 <OnRxWindow2TimerEvent+0x84>)
 800aeaa:	4a0c      	ldr	r2, [pc, #48]	@ (800aedc <OnRxWindow2TimerEvent+0x98>)
 800aeac:	2101      	movs	r1, #1
 800aeae:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800aeb0:	4a0b      	ldr	r2, [pc, #44]	@ (800aee0 <OnRxWindow2TimerEvent+0x9c>)
 800aeb2:	4b0c      	ldr	r3, [pc, #48]	@ (800aee4 <OnRxWindow2TimerEvent+0xa0>)
 800aeb4:	0011      	movs	r1, r2
 800aeb6:	0018      	movs	r0, r3
 800aeb8:	f001 fcfa 	bl	800c8b0 <RxWindowSetup>
 800aebc:	e000      	b.n	800aec0 <OnRxWindow2TimerEvent+0x7c>
        return;
 800aebe:	46c0      	nop			@ (mov r8, r8)
}
 800aec0:	46bd      	mov	sp, r7
 800aec2:	b002      	add	sp, #8
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	46c0      	nop			@ (mov r8, r8)
 800aec8:	20000964 	.word	0x20000964
 800aecc:	00000415 	.word	0x00000415
 800aed0:	00000484 	.word	0x00000484
 800aed4:	000003dd 	.word	0x000003dd
 800aed8:	000003de 	.word	0x000003de
 800aedc:	000003df 	.word	0x000003df
 800aee0:	20000d30 	.word	0x20000d30
 800aee4:	20000cfc 	.word	0x20000cfc

0800aee8 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800aef0:	4b18      	ldr	r3, [pc, #96]	@ (800af54 <OnAckTimeoutTimerEvent+0x6c>)
 800aef2:	0018      	movs	r0, r3
 800aef4:	f00a f952 	bl	801519c <TimerStop>

    if( MacCtx.NodeAckRequested == true )
 800aef8:	4b17      	ldr	r3, [pc, #92]	@ (800af58 <OnAckTimeoutTimerEvent+0x70>)
 800aefa:	4a18      	ldr	r2, [pc, #96]	@ (800af5c <OnAckTimeoutTimerEvent+0x74>)
 800aefc:	5c9b      	ldrb	r3, [r3, r2]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d003      	beq.n	800af0a <OnAckTimeoutTimerEvent+0x22>
    {
        MacCtx.AckTimeoutRetry = true;
 800af02:	4b15      	ldr	r3, [pc, #84]	@ (800af58 <OnAckTimeoutTimerEvent+0x70>)
 800af04:	4a16      	ldr	r2, [pc, #88]	@ (800af60 <OnAckTimeoutTimerEvent+0x78>)
 800af06:	2101      	movs	r1, #1
 800af08:	5499      	strb	r1, [r3, r2]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800af0a:	4b13      	ldr	r3, [pc, #76]	@ (800af58 <OnAckTimeoutTimerEvent+0x70>)
 800af0c:	4a15      	ldr	r2, [pc, #84]	@ (800af64 <OnAckTimeoutTimerEvent+0x7c>)
 800af0e:	589b      	ldr	r3, [r3, r2]
 800af10:	22f0      	movs	r2, #240	@ 0xf0
 800af12:	5c9b      	ldrb	r3, [r3, r2]
 800af14:	2b02      	cmp	r3, #2
 800af16:	d105      	bne.n	800af24 <OnAckTimeoutTimerEvent+0x3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800af18:	4b0f      	ldr	r3, [pc, #60]	@ (800af58 <OnAckTimeoutTimerEvent+0x70>)
 800af1a:	4a13      	ldr	r2, [pc, #76]	@ (800af68 <OnAckTimeoutTimerEvent+0x80>)
 800af1c:	5c99      	ldrb	r1, [r3, r2]
 800af1e:	2020      	movs	r0, #32
 800af20:	4301      	orrs	r1, r0
 800af22:	5499      	strb	r1, [r3, r2]
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800af24:	4a0c      	ldr	r2, [pc, #48]	@ (800af58 <OnAckTimeoutTimerEvent+0x70>)
 800af26:	23d2      	movs	r3, #210	@ 0xd2
 800af28:	009b      	lsls	r3, r3, #2
 800af2a:	58d3      	ldr	r3, [r2, r3]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00c      	beq.n	800af4a <OnAckTimeoutTimerEvent+0x62>
 800af30:	4a09      	ldr	r2, [pc, #36]	@ (800af58 <OnAckTimeoutTimerEvent+0x70>)
 800af32:	23d2      	movs	r3, #210	@ 0xd2
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	58d3      	ldr	r3, [r2, r3]
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d005      	beq.n	800af4a <OnAckTimeoutTimerEvent+0x62>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800af3e:	4a06      	ldr	r2, [pc, #24]	@ (800af58 <OnAckTimeoutTimerEvent+0x70>)
 800af40:	23d2      	movs	r3, #210	@ 0xd2
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	58d3      	ldr	r3, [r2, r3]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	4798      	blx	r3
    }
}
 800af4a:	46c0      	nop			@ (mov r8, r8)
 800af4c:	46bd      	mov	sp, r7
 800af4e:	b002      	add	sp, #8
 800af50:	bd80      	pop	{r7, pc}
 800af52:	46c0      	nop			@ (mov r8, r8)
 800af54:	20000d5c 	.word	0x20000d5c
 800af58:	20000964 	.word	0x20000964
 800af5c:	00000414 	.word	0x00000414
 800af60:	00000413 	.word	0x00000413
 800af64:	00000484 	.word	0x00000484
 800af68:	00000481 	.word	0x00000481

0800af6c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800af6c:	b590      	push	{r4, r7, lr}
 800af6e:	b085      	sub	sp, #20
 800af70:	af00      	add	r7, sp, #0
 800af72:	60ba      	str	r2, [r7, #8]
 800af74:	607b      	str	r3, [r7, #4]
 800af76:	230f      	movs	r3, #15
 800af78:	18fb      	adds	r3, r7, r3
 800af7a:	1c02      	adds	r2, r0, #0
 800af7c:	701a      	strb	r2, [r3, #0]
 800af7e:	230e      	movs	r3, #14
 800af80:	18fb      	adds	r3, r7, r3
 800af82:	1c0a      	adds	r2, r1, #0
 800af84:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d005      	beq.n	800af98 <GetFCntDown+0x2c>
 800af8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d002      	beq.n	800af98 <GetFCntDown+0x2c>
 800af92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af94:	2b00      	cmp	r3, #0
 800af96:	d101      	bne.n	800af9c <GetFCntDown+0x30>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800af98:	230a      	movs	r3, #10
 800af9a:	e042      	b.n	800b022 <GetFCntDown+0xb6>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800af9c:	230f      	movs	r3, #15
 800af9e:	18fb      	adds	r3, r7, r3
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	2b04      	cmp	r3, #4
 800afa4:	d82d      	bhi.n	800b002 <GetFCntDown+0x96>
 800afa6:	009a      	lsls	r2, r3, #2
 800afa8:	4b20      	ldr	r3, [pc, #128]	@ (800b02c <GetFCntDown+0xc0>)
 800afaa:	18d3      	adds	r3, r2, r3
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	469f      	mov	pc, r3
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800afb0:	1d3b      	adds	r3, r7, #4
 800afb2:	789b      	ldrb	r3, [r3, #2]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d110      	bne.n	800afda <GetFCntDown+0x6e>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800afb8:	220e      	movs	r2, #14
 800afba:	18bb      	adds	r3, r7, r2
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d003      	beq.n	800afca <GetFCntDown+0x5e>
 800afc2:	18bb      	adds	r3, r7, r2
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	2b03      	cmp	r3, #3
 800afc8:	d103      	bne.n	800afd2 <GetFCntDown+0x66>
                {
                    *fCntID = A_FCNT_DOWN;
 800afca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afcc:	2202      	movs	r2, #2
 800afce:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800afd0:	e019      	b.n	800b006 <GetFCntDown+0x9a>
                    *fCntID = N_FCNT_DOWN;
 800afd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd4:	2201      	movs	r2, #1
 800afd6:	701a      	strb	r2, [r3, #0]
            break;
 800afd8:	e015      	b.n	800b006 <GetFCntDown+0x9a>
                *fCntID = FCNT_DOWN;
 800afda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afdc:	2203      	movs	r2, #3
 800afde:	701a      	strb	r2, [r3, #0]
            break;
 800afe0:	e011      	b.n	800b006 <GetFCntDown+0x9a>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800afe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe4:	2204      	movs	r2, #4
 800afe6:	701a      	strb	r2, [r3, #0]
            break;
 800afe8:	e00d      	b.n	800b006 <GetFCntDown+0x9a>
        case MULTICAST_1_ADDR:
            *fCntID = MC_FCNT_DOWN_1;
 800afea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afec:	2205      	movs	r2, #5
 800afee:	701a      	strb	r2, [r3, #0]
            break;
 800aff0:	e009      	b.n	800b006 <GetFCntDown+0x9a>
        case MULTICAST_2_ADDR:
            *fCntID = MC_FCNT_DOWN_2;
 800aff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff4:	2206      	movs	r2, #6
 800aff6:	701a      	strb	r2, [r3, #0]
            break;
 800aff8:	e005      	b.n	800b006 <GetFCntDown+0x9a>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
 800affa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800affc:	2207      	movs	r2, #7
 800affe:	701a      	strb	r2, [r3, #0]
            break;
 800b000:	e001      	b.n	800b006 <GetFCntDown+0x9a>
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800b002:	2305      	movs	r3, #5
 800b004:	e00d      	b.n	800b022 <GetFCntDown+0xb6>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800b006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b008:	7818      	ldrb	r0, [r3, #0]
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	89db      	ldrh	r3, [r3, #14]
 800b00e:	001c      	movs	r4, r3
 800b010:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b012:	2320      	movs	r3, #32
 800b014:	18fb      	adds	r3, r7, r3
 800b016:	8819      	ldrh	r1, [r3, #0]
 800b018:	0013      	movs	r3, r2
 800b01a:	0022      	movs	r2, r4
 800b01c:	f005 fa46 	bl	80104ac <LoRaMacCryptoGetFCntDown>
 800b020:	0003      	movs	r3, r0
}
 800b022:	0018      	movs	r0, r3
 800b024:	46bd      	mov	sp, r7
 800b026:	b005      	add	sp, #20
 800b028:	bd90      	pop	{r4, r7, pc}
 800b02a:	46c0      	nop			@ (mov r8, r8)
 800b02c:	0801b278 	.word	0x0801b278

0800b030 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800b030:	b5b0      	push	{r4, r5, r7, lr}
 800b032:	b086      	sub	sp, #24
 800b034:	af02      	add	r7, sp, #8
 800b036:	0002      	movs	r2, r0
 800b038:	1dfb      	adds	r3, r7, #7
 800b03a:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b03c:	230f      	movs	r3, #15
 800b03e:	18fb      	adds	r3, r7, r3
 800b040:	2203      	movs	r2, #3
 800b042:	701a      	strb	r2, [r3, #0]

    switch( MacCtx.NvmCtx->DeviceClass )
 800b044:	4b96      	ldr	r3, [pc, #600]	@ (800b2a0 <SwitchClass+0x270>)
 800b046:	4a97      	ldr	r2, [pc, #604]	@ (800b2a4 <SwitchClass+0x274>)
 800b048:	589b      	ldr	r3, [r3, r2]
 800b04a:	22f0      	movs	r2, #240	@ 0xf0
 800b04c:	5c9b      	ldrb	r3, [r3, r2]
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d100      	bne.n	800b054 <SwitchClass+0x24>
 800b052:	e106      	b.n	800b262 <SwitchClass+0x232>
 800b054:	dd00      	ble.n	800b058 <SwitchClass+0x28>
 800b056:	e11c      	b.n	800b292 <SwitchClass+0x262>
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d003      	beq.n	800b064 <SwitchClass+0x34>
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d100      	bne.n	800b062 <SwitchClass+0x32>
 800b060:	e0ea      	b.n	800b238 <SwitchClass+0x208>
 800b062:	e116      	b.n	800b292 <SwitchClass+0x262>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800b064:	1dfb      	adds	r3, r7, #7
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d10d      	bne.n	800b088 <SwitchClass+0x58>
            {
                // Revert back RxC parameters
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 800b06c:	4b8c      	ldr	r3, [pc, #560]	@ (800b2a0 <SwitchClass+0x270>)
 800b06e:	4a8d      	ldr	r2, [pc, #564]	@ (800b2a4 <SwitchClass+0x274>)
 800b070:	5899      	ldr	r1, [r3, r2]
 800b072:	4b8b      	ldr	r3, [pc, #556]	@ (800b2a0 <SwitchClass+0x270>)
 800b074:	4a8b      	ldr	r2, [pc, #556]	@ (800b2a4 <SwitchClass+0x274>)
 800b076:	5898      	ldr	r0, [r3, r2]
 800b078:	2392      	movs	r3, #146	@ 0x92
 800b07a:	005b      	lsls	r3, r3, #1
 800b07c:	228e      	movs	r2, #142	@ 0x8e
 800b07e:	0052      	lsls	r2, r2, #1
 800b080:	18c3      	adds	r3, r0, r3
 800b082:	188a      	adds	r2, r1, r2
 800b084:	ca03      	ldmia	r2!, {r0, r1}
 800b086:	c303      	stmia	r3!, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800b088:	1dfb      	adds	r3, r7, #7
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d113      	bne.n	800b0b8 <SwitchClass+0x88>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800b090:	250f      	movs	r5, #15
 800b092:	197c      	adds	r4, r7, r5
 800b094:	1dfb      	adds	r3, r7, #7
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	0018      	movs	r0, r3
 800b09a:	f004 f895 	bl	800f1c8 <LoRaMacClassBSwitchClass>
 800b09e:	0003      	movs	r3, r0
 800b0a0:	7023      	strb	r3, [r4, #0]
                if( status == LORAMAC_STATUS_OK )
 800b0a2:	197b      	adds	r3, r7, r5
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d106      	bne.n	800b0b8 <SwitchClass+0x88>
                {
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
 800b0aa:	4b7d      	ldr	r3, [pc, #500]	@ (800b2a0 <SwitchClass+0x270>)
 800b0ac:	4a7d      	ldr	r2, [pc, #500]	@ (800b2a4 <SwitchClass+0x274>)
 800b0ae:	589b      	ldr	r3, [r3, r2]
 800b0b0:	1dfa      	adds	r2, r7, #7
 800b0b2:	21f0      	movs	r1, #240	@ 0xf0
 800b0b4:	7812      	ldrb	r2, [r2, #0]
 800b0b6:	545a      	strb	r2, [r3, r1]
                }
            }

            if( deviceClass == CLASS_C )
 800b0b8:	1dfb      	adds	r3, r7, #7
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	d000      	beq.n	800b0c2 <SwitchClass+0x92>
 800b0c0:	e0e2      	b.n	800b288 <SwitchClass+0x258>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800b0c2:	4b77      	ldr	r3, [pc, #476]	@ (800b2a0 <SwitchClass+0x270>)
 800b0c4:	4a77      	ldr	r2, [pc, #476]	@ (800b2a4 <SwitchClass+0x274>)
 800b0c6:	589b      	ldr	r3, [r3, r2]
 800b0c8:	1dfa      	adds	r2, r7, #7
 800b0ca:	21f0      	movs	r1, #240	@ 0xf0
 800b0cc:	7812      	ldrb	r2, [r2, #0]
 800b0ce:	545a      	strb	r2, [r3, r1]

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800b0d0:	4873      	ldr	r0, [pc, #460]	@ (800b2a0 <SwitchClass+0x270>)
 800b0d2:	23f8      	movs	r3, #248	@ 0xf8
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	4972      	ldr	r1, [pc, #456]	@ (800b2a0 <SwitchClass+0x270>)
 800b0d8:	22f3      	movs	r2, #243	@ 0xf3
 800b0da:	0092      	lsls	r2, r2, #2
 800b0dc:	18c3      	adds	r3, r0, r3
 800b0de:	188a      	adds	r2, r1, r2
 800b0e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 800b0e2:	c313      	stmia	r3!, {r0, r1, r4}
 800b0e4:	ca03      	ldmia	r2!, {r0, r1}
 800b0e6:	c303      	stmia	r3!, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b0e8:	4b6d      	ldr	r3, [pc, #436]	@ (800b2a0 <SwitchClass+0x270>)
 800b0ea:	4a6f      	ldr	r2, [pc, #444]	@ (800b2a8 <SwitchClass+0x278>)
 800b0ec:	2102      	movs	r1, #2
 800b0ee:	5499      	strb	r1, [r3, r2]

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b0f0:	230e      	movs	r3, #14
 800b0f2:	18fb      	adds	r3, r7, r3
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	701a      	strb	r2, [r3, #0]
 800b0f8:	e06f      	b.n	800b1da <SwitchClass+0x1aa>
                {
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800b0fa:	4b69      	ldr	r3, [pc, #420]	@ (800b2a0 <SwitchClass+0x270>)
 800b0fc:	4a69      	ldr	r2, [pc, #420]	@ (800b2a4 <SwitchClass+0x274>)
 800b0fe:	5899      	ldr	r1, [r3, r2]
 800b100:	240e      	movs	r4, #14
 800b102:	193b      	adds	r3, r7, r4
 800b104:	2200      	movs	r2, #0
 800b106:	569a      	ldrsb	r2, [r3, r2]
 800b108:	2051      	movs	r0, #81	@ 0x51
 800b10a:	0013      	movs	r3, r2
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	189b      	adds	r3, r3, r2
 800b110:	00db      	lsls	r3, r3, #3
 800b112:	18cb      	adds	r3, r1, r3
 800b114:	181b      	adds	r3, r3, r0
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d055      	beq.n	800b1c8 <SwitchClass+0x198>
                    // TODO: Check multicast channel device class.
                    {
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800b11c:	4b60      	ldr	r3, [pc, #384]	@ (800b2a0 <SwitchClass+0x270>)
 800b11e:	4a61      	ldr	r2, [pc, #388]	@ (800b2a4 <SwitchClass+0x274>)
 800b120:	5898      	ldr	r0, [r3, r2]
 800b122:	193b      	adds	r3, r7, r4
 800b124:	2200      	movs	r2, #0
 800b126:	569a      	ldrsb	r2, [r3, r2]
 800b128:	4b5d      	ldr	r3, [pc, #372]	@ (800b2a0 <SwitchClass+0x270>)
 800b12a:	495e      	ldr	r1, [pc, #376]	@ (800b2a4 <SwitchClass+0x274>)
 800b12c:	5859      	ldr	r1, [r3, r1]
 800b12e:	0013      	movs	r3, r2
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	189b      	adds	r3, r3, r2
 800b134:	00db      	lsls	r3, r3, #3
 800b136:	18c3      	adds	r3, r0, r3
 800b138:	3364      	adds	r3, #100	@ 0x64
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	2392      	movs	r3, #146	@ 0x92
 800b13e:	005b      	lsls	r3, r3, #1
 800b140:	50ca      	str	r2, [r1, r3]
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800b142:	4b57      	ldr	r3, [pc, #348]	@ (800b2a0 <SwitchClass+0x270>)
 800b144:	4a57      	ldr	r2, [pc, #348]	@ (800b2a4 <SwitchClass+0x274>)
 800b146:	5899      	ldr	r1, [r3, r2]
 800b148:	193b      	adds	r3, r7, r4
 800b14a:	2200      	movs	r2, #0
 800b14c:	569a      	ldrsb	r2, [r3, r2]
 800b14e:	2068      	movs	r0, #104	@ 0x68
 800b150:	0013      	movs	r3, r2
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	189b      	adds	r3, r3, r2
 800b156:	00db      	lsls	r3, r3, #3
 800b158:	18cb      	adds	r3, r1, r3
 800b15a:	181b      	adds	r3, r3, r0
 800b15c:	2100      	movs	r1, #0
 800b15e:	5659      	ldrsb	r1, [r3, r1]
 800b160:	4b4f      	ldr	r3, [pc, #316]	@ (800b2a0 <SwitchClass+0x270>)
 800b162:	4a50      	ldr	r2, [pc, #320]	@ (800b2a4 <SwitchClass+0x274>)
 800b164:	589a      	ldr	r2, [r3, r2]
 800b166:	b2c9      	uxtb	r1, r1
 800b168:	2394      	movs	r3, #148	@ 0x94
 800b16a:	005b      	lsls	r3, r3, #1
 800b16c:	54d1      	strb	r1, [r2, r3]

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800b16e:	4b4c      	ldr	r3, [pc, #304]	@ (800b2a0 <SwitchClass+0x270>)
 800b170:	4a4e      	ldr	r2, [pc, #312]	@ (800b2ac <SwitchClass+0x27c>)
 800b172:	5c99      	ldrb	r1, [r3, r2]
 800b174:	4a4a      	ldr	r2, [pc, #296]	@ (800b2a0 <SwitchClass+0x270>)
 800b176:	23f8      	movs	r3, #248	@ 0xf8
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 800b17c:	4b48      	ldr	r3, [pc, #288]	@ (800b2a0 <SwitchClass+0x270>)
 800b17e:	4a49      	ldr	r2, [pc, #292]	@ (800b2a4 <SwitchClass+0x274>)
 800b180:	589a      	ldr	r2, [r3, r2]
 800b182:	2392      	movs	r3, #146	@ 0x92
 800b184:	005b      	lsls	r3, r3, #1
 800b186:	58d1      	ldr	r1, [r2, r3]
 800b188:	4a45      	ldr	r2, [pc, #276]	@ (800b2a0 <SwitchClass+0x270>)
 800b18a:	23f9      	movs	r3, #249	@ 0xf9
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	50d1      	str	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b190:	4b43      	ldr	r3, [pc, #268]	@ (800b2a0 <SwitchClass+0x270>)
 800b192:	4a44      	ldr	r2, [pc, #272]	@ (800b2a4 <SwitchClass+0x274>)
 800b194:	589a      	ldr	r2, [r3, r2]
 800b196:	232e      	movs	r3, #46	@ 0x2e
 800b198:	33ff      	adds	r3, #255	@ 0xff
 800b19a:	5cd1      	ldrb	r1, [r2, r3]
 800b19c:	4a40      	ldr	r2, [pc, #256]	@ (800b2a0 <SwitchClass+0x270>)
 800b19e:	23fc      	movs	r3, #252	@ 0xfc
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800b1a4:	4b3e      	ldr	r3, [pc, #248]	@ (800b2a0 <SwitchClass+0x270>)
 800b1a6:	4a3f      	ldr	r2, [pc, #252]	@ (800b2a4 <SwitchClass+0x274>)
 800b1a8:	589a      	ldr	r2, [r3, r2]
 800b1aa:	2340      	movs	r3, #64	@ 0x40
 800b1ac:	33ff      	adds	r3, #255	@ 0xff
 800b1ae:	5cd1      	ldrb	r1, [r2, r3]
 800b1b0:	4b3b      	ldr	r3, [pc, #236]	@ (800b2a0 <SwitchClass+0x270>)
 800b1b2:	4a3f      	ldr	r2, [pc, #252]	@ (800b2b0 <SwitchClass+0x280>)
 800b1b4:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800b1b6:	4b3a      	ldr	r3, [pc, #232]	@ (800b2a0 <SwitchClass+0x270>)
 800b1b8:	4a3b      	ldr	r2, [pc, #236]	@ (800b2a8 <SwitchClass+0x278>)
 800b1ba:	2103      	movs	r1, #3
 800b1bc:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800b1be:	4b38      	ldr	r3, [pc, #224]	@ (800b2a0 <SwitchClass+0x270>)
 800b1c0:	4a3c      	ldr	r2, [pc, #240]	@ (800b2b4 <SwitchClass+0x284>)
 800b1c2:	2101      	movs	r1, #1
 800b1c4:	5499      	strb	r1, [r3, r2]
                        break;
 800b1c6:	e00e      	b.n	800b1e6 <SwitchClass+0x1b6>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b1c8:	210e      	movs	r1, #14
 800b1ca:	187b      	adds	r3, r7, r1
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	b25b      	sxtb	r3, r3
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	b2da      	uxtb	r2, r3
 800b1d6:	187b      	adds	r3, r7, r1
 800b1d8:	701a      	strb	r2, [r3, #0]
 800b1da:	230e      	movs	r3, #14
 800b1dc:	18fb      	adds	r3, r7, r3
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	b25b      	sxtb	r3, r3
 800b1e2:	2b03      	cmp	r3, #3
 800b1e4:	dd89      	ble.n	800b0fa <SwitchClass+0xca>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800b1e6:	4b2e      	ldr	r3, [pc, #184]	@ (800b2a0 <SwitchClass+0x270>)
 800b1e8:	4a33      	ldr	r2, [pc, #204]	@ (800b2b8 <SwitchClass+0x288>)
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	5499      	strb	r1, [r3, r2]
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800b1ee:	4b33      	ldr	r3, [pc, #204]	@ (800b2bc <SwitchClass+0x28c>)
 800b1f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1f2:	4798      	blx	r3
                // Compute Rx2 windows parameters in case the RX2 datarate has changed
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b1f4:	4b2a      	ldr	r3, [pc, #168]	@ (800b2a0 <SwitchClass+0x270>)
 800b1f6:	4a2b      	ldr	r2, [pc, #172]	@ (800b2a4 <SwitchClass+0x274>)
 800b1f8:	589b      	ldr	r3, [r3, r2]
 800b1fa:	7818      	ldrb	r0, [r3, #0]
                                                 MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 800b1fc:	4b28      	ldr	r3, [pc, #160]	@ (800b2a0 <SwitchClass+0x270>)
 800b1fe:	4a29      	ldr	r2, [pc, #164]	@ (800b2a4 <SwitchClass+0x274>)
 800b200:	589a      	ldr	r2, [r3, r2]
 800b202:	2394      	movs	r3, #148	@ 0x94
 800b204:	005b      	lsls	r3, r3, #1
 800b206:	5cd3      	ldrb	r3, [r2, r3]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b208:	b259      	sxtb	r1, r3
                                                 MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800b20a:	4b25      	ldr	r3, [pc, #148]	@ (800b2a0 <SwitchClass+0x270>)
 800b20c:	4a25      	ldr	r2, [pc, #148]	@ (800b2a4 <SwitchClass+0x274>)
 800b20e:	589a      	ldr	r2, [r3, r2]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b210:	2380      	movs	r3, #128	@ 0x80
 800b212:	005b      	lsls	r3, r3, #1
 800b214:	5cd2      	ldrb	r2, [r2, r3]
                                                 MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800b216:	4b22      	ldr	r3, [pc, #136]	@ (800b2a0 <SwitchClass+0x270>)
 800b218:	4c22      	ldr	r4, [pc, #136]	@ (800b2a4 <SwitchClass+0x274>)
 800b21a:	591b      	ldr	r3, [r3, r4]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b21c:	24fc      	movs	r4, #252	@ 0xfc
 800b21e:	591c      	ldr	r4, [r3, r4]
 800b220:	4b27      	ldr	r3, [pc, #156]	@ (800b2c0 <SwitchClass+0x290>)
 800b222:	9300      	str	r3, [sp, #0]
 800b224:	0023      	movs	r3, r4
 800b226:	f006 fa8c 	bl	8011742 <RegionComputeRxWindowParameters>
                                                 &MacCtx.RxWindowCConfig );
                OpenContinuousRxCWindow( );
 800b22a:	f001 fb75 	bl	800c918 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800b22e:	230f      	movs	r3, #15
 800b230:	18fb      	adds	r3, r7, r3
 800b232:	2200      	movs	r2, #0
 800b234:	701a      	strb	r2, [r3, #0]
            }
            break;
 800b236:	e027      	b.n	800b288 <SwitchClass+0x258>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800b238:	250f      	movs	r5, #15
 800b23a:	197c      	adds	r4, r7, r5
 800b23c:	1dfb      	adds	r3, r7, #7
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	0018      	movs	r0, r3
 800b242:	f003 ffc1 	bl	800f1c8 <LoRaMacClassBSwitchClass>
 800b246:	0003      	movs	r3, r0
 800b248:	7023      	strb	r3, [r4, #0]
            if( status == LORAMAC_STATUS_OK )
 800b24a:	197b      	adds	r3, r7, r5
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d11c      	bne.n	800b28c <SwitchClass+0x25c>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800b252:	4b13      	ldr	r3, [pc, #76]	@ (800b2a0 <SwitchClass+0x270>)
 800b254:	4a13      	ldr	r2, [pc, #76]	@ (800b2a4 <SwitchClass+0x274>)
 800b256:	589b      	ldr	r3, [r3, r2]
 800b258:	1dfa      	adds	r2, r7, #7
 800b25a:	21f0      	movs	r1, #240	@ 0xf0
 800b25c:	7812      	ldrb	r2, [r2, #0]
 800b25e:	545a      	strb	r2, [r3, r1]
            }
            break;
 800b260:	e014      	b.n	800b28c <SwitchClass+0x25c>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800b262:	1dfb      	adds	r3, r7, #7
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d112      	bne.n	800b290 <SwitchClass+0x260>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800b26a:	4b0d      	ldr	r3, [pc, #52]	@ (800b2a0 <SwitchClass+0x270>)
 800b26c:	4a0d      	ldr	r2, [pc, #52]	@ (800b2a4 <SwitchClass+0x274>)
 800b26e:	589b      	ldr	r3, [r3, r2]
 800b270:	1dfa      	adds	r2, r7, #7
 800b272:	21f0      	movs	r1, #240	@ 0xf0
 800b274:	7812      	ldrb	r2, [r2, #0]
 800b276:	545a      	strb	r2, [r3, r1]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800b278:	4b10      	ldr	r3, [pc, #64]	@ (800b2bc <SwitchClass+0x28c>)
 800b27a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b27c:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800b27e:	230f      	movs	r3, #15
 800b280:	18fb      	adds	r3, r7, r3
 800b282:	2200      	movs	r2, #0
 800b284:	701a      	strb	r2, [r3, #0]
            }
            break;
 800b286:	e003      	b.n	800b290 <SwitchClass+0x260>
            break;
 800b288:	46c0      	nop			@ (mov r8, r8)
 800b28a:	e002      	b.n	800b292 <SwitchClass+0x262>
            break;
 800b28c:	46c0      	nop			@ (mov r8, r8)
 800b28e:	e000      	b.n	800b292 <SwitchClass+0x262>
            break;
 800b290:	46c0      	nop			@ (mov r8, r8)
        }
    }

    return status;
 800b292:	230f      	movs	r3, #15
 800b294:	18fb      	adds	r3, r7, r3
 800b296:	781b      	ldrb	r3, [r3, #0]
}
 800b298:	0018      	movs	r0, r3
 800b29a:	46bd      	mov	sp, r7
 800b29c:	b004      	add	sp, #16
 800b29e:	bdb0      	pop	{r4, r5, r7, pc}
 800b2a0:	20000964 	.word	0x20000964
 800b2a4:	00000484 	.word	0x00000484
 800b2a8:	000003f3 	.word	0x000003f3
 800b2ac:	00000415 	.word	0x00000415
 800b2b0:	000003f1 	.word	0x000003f1
 800b2b4:	000003f2 	.word	0x000003f2
 800b2b8:	00000414 	.word	0x00000414
 800b2bc:	0801adcc 	.word	0x0801adcc
 800b2c0:	20000d44 	.word	0x20000d44

0800b2c4 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	0002      	movs	r2, r0
 800b2cc:	1dfb      	adds	r3, r7, #7
 800b2ce:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b2d0:	4b18      	ldr	r3, [pc, #96]	@ (800b334 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 800b2d2:	4a19      	ldr	r2, [pc, #100]	@ (800b338 <GetMaxAppPayloadWithoutFOptsLength+0x74>)
 800b2d4:	589a      	ldr	r2, [r3, r2]
 800b2d6:	2396      	movs	r3, #150	@ 0x96
 800b2d8:	005b      	lsls	r3, r3, #1
 800b2da:	5cd2      	ldrb	r2, [r2, r3]
 800b2dc:	210c      	movs	r1, #12
 800b2de:	187b      	adds	r3, r7, r1
 800b2e0:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
 800b2e2:	187b      	adds	r3, r7, r1
 800b2e4:	1dfa      	adds	r2, r7, #7
 800b2e6:	7812      	ldrb	r2, [r2, #0]
 800b2e8:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800b2ea:	187b      	adds	r3, r7, r1
 800b2ec:	220d      	movs	r2, #13
 800b2ee:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 800b2f0:	4b10      	ldr	r3, [pc, #64]	@ (800b334 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 800b2f2:	4a11      	ldr	r2, [pc, #68]	@ (800b338 <GetMaxAppPayloadWithoutFOptsLength+0x74>)
 800b2f4:	589a      	ldr	r2, [r3, r2]
 800b2f6:	2340      	movs	r3, #64	@ 0x40
 800b2f8:	33ff      	adds	r3, #255	@ 0xff
 800b2fa:	5cd3      	ldrb	r3, [r2, r3]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d002      	beq.n	800b306 <GetMaxAppPayloadWithoutFOptsLength+0x42>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800b300:	187b      	adds	r3, r7, r1
 800b302:	220e      	movs	r2, #14
 800b304:	701a      	strb	r2, [r3, #0]
    }
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b306:	4b0b      	ldr	r3, [pc, #44]	@ (800b334 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 800b308:	4a0b      	ldr	r2, [pc, #44]	@ (800b338 <GetMaxAppPayloadWithoutFOptsLength+0x74>)
 800b30a:	589b      	ldr	r3, [r3, r2]
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	220c      	movs	r2, #12
 800b310:	18ba      	adds	r2, r7, r2
 800b312:	0011      	movs	r1, r2
 800b314:	0018      	movs	r0, r3
 800b316:	f006 f966 	bl	80115e6 <RegionGetPhyParam>
 800b31a:	0003      	movs	r3, r0
 800b31c:	001a      	movs	r2, r3
 800b31e:	2108      	movs	r1, #8
 800b320:	187b      	adds	r3, r7, r1
 800b322:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
 800b324:	187b      	adds	r3, r7, r1
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	b2db      	uxtb	r3, r3
}
 800b32a:	0018      	movs	r0, r3
 800b32c:	46bd      	mov	sp, r7
 800b32e:	b004      	add	sp, #16
 800b330:	bd80      	pop	{r7, pc}
 800b332:	46c0      	nop			@ (mov r8, r8)
 800b334:	20000964 	.word	0x20000964
 800b338:	00000484 	.word	0x00000484

0800b33c <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800b33c:	b5b0      	push	{r4, r5, r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	0004      	movs	r4, r0
 800b344:	0008      	movs	r0, r1
 800b346:	0011      	movs	r1, r2
 800b348:	1dfb      	adds	r3, r7, #7
 800b34a:	1c22      	adds	r2, r4, #0
 800b34c:	701a      	strb	r2, [r3, #0]
 800b34e:	1dbb      	adds	r3, r7, #6
 800b350:	1c02      	adds	r2, r0, #0
 800b352:	701a      	strb	r2, [r3, #0]
 800b354:	1d7b      	adds	r3, r7, #5
 800b356:	1c0a      	adds	r2, r1, #0
 800b358:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
 800b35a:	250e      	movs	r5, #14
 800b35c:	197b      	adds	r3, r7, r5
 800b35e:	2200      	movs	r2, #0
 800b360:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
 800b362:	240c      	movs	r4, #12
 800b364:	193b      	adds	r3, r7, r4
 800b366:	2200      	movs	r2, #0
 800b368:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800b36a:	1dbb      	adds	r3, r7, #6
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	b25b      	sxtb	r3, r3
 800b370:	0018      	movs	r0, r3
 800b372:	f7ff ffa7 	bl	800b2c4 <GetMaxAppPayloadWithoutFOptsLength>
 800b376:	0003      	movs	r3, r0
 800b378:	001a      	movs	r2, r3
 800b37a:	0028      	movs	r0, r5
 800b37c:	183b      	adds	r3, r7, r0
 800b37e:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800b380:	1dfb      	adds	r3, r7, #7
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	b299      	uxth	r1, r3
 800b386:	1d7b      	adds	r3, r7, #5
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	b29a      	uxth	r2, r3
 800b38c:	193b      	adds	r3, r7, r4
 800b38e:	188a      	adds	r2, r1, r2
 800b390:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800b392:	193a      	adds	r2, r7, r4
 800b394:	183b      	adds	r3, r7, r0
 800b396:	8812      	ldrh	r2, [r2, #0]
 800b398:	881b      	ldrh	r3, [r3, #0]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d805      	bhi.n	800b3aa <ValidatePayloadLength+0x6e>
 800b39e:	193b      	adds	r3, r7, r4
 800b3a0:	881b      	ldrh	r3, [r3, #0]
 800b3a2:	2bff      	cmp	r3, #255	@ 0xff
 800b3a4:	d801      	bhi.n	800b3aa <ValidatePayloadLength+0x6e>
    {
        return true;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	e000      	b.n	800b3ac <ValidatePayloadLength+0x70>
    }
    return false;
 800b3aa:	2300      	movs	r3, #0
}
 800b3ac:	0018      	movs	r0, r3
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	b004      	add	sp, #16
 800b3b2:	bdb0      	pop	{r4, r5, r7, pc}

0800b3b4 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800b3b8:	4b04      	ldr	r3, [pc, #16]	@ (800b3cc <SetMlmeScheduleUplinkIndication+0x18>)
 800b3ba:	4a05      	ldr	r2, [pc, #20]	@ (800b3d0 <SetMlmeScheduleUplinkIndication+0x1c>)
 800b3bc:	5c99      	ldrb	r1, [r3, r2]
 800b3be:	2010      	movs	r0, #16
 800b3c0:	4301      	orrs	r1, r0
 800b3c2:	5499      	strb	r1, [r3, r2]
}
 800b3c4:	46c0      	nop			@ (mov r8, r8)
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	46c0      	nop			@ (mov r8, r8)
 800b3cc:	20000964 	.word	0x20000964
 800b3d0:	00000481 	.word	0x00000481

0800b3d4 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800b3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3d6:	b0a5      	sub	sp, #148	@ 0x94
 800b3d8:	af02      	add	r7, sp, #8
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	000c      	movs	r4, r1
 800b3de:	0010      	movs	r0, r2
 800b3e0:	0019      	movs	r1, r3
 800b3e2:	1cfb      	adds	r3, r7, #3
 800b3e4:	1c22      	adds	r2, r4, #0
 800b3e6:	701a      	strb	r2, [r3, #0]
 800b3e8:	1cbb      	adds	r3, r7, #2
 800b3ea:	1c02      	adds	r2, r0, #0
 800b3ec:	701a      	strb	r2, [r3, #0]
 800b3ee:	1c7b      	adds	r3, r7, #1
 800b3f0:	1c0a      	adds	r2, r1, #0
 800b3f2:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
 800b3f4:	236b      	movs	r3, #107	@ 0x6b
 800b3f6:	18fb      	adds	r3, r7, r3
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
 800b3fc:	2387      	movs	r3, #135	@ 0x87
 800b3fe:	18fb      	adds	r3, r7, r3
 800b400:	2200      	movs	r2, #0
 800b402:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b404:	2368      	movs	r3, #104	@ 0x68
 800b406:	18fb      	adds	r3, r7, r3
 800b408:	2200      	movs	r2, #0
 800b40a:	801a      	strh	r2, [r3, #0]

    while( macIndex < commandsSize )
 800b40c:	f000 fd37 	bl	800be7e <ProcessMacCommands+0xaaa>
    {
        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800b410:	1cfb      	adds	r3, r7, #3
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	1cfa      	adds	r2, r7, #3
 800b416:	1c59      	adds	r1, r3, #1
 800b418:	7011      	strb	r1, [r2, #0]
 800b41a:	001a      	movs	r2, r3
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	189b      	adds	r3, r3, r2
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	2b13      	cmp	r3, #19
 800b424:	d901      	bls.n	800b42a <ProcessMacCommands+0x56>
 800b426:	f000 fd33 	bl	800be90 <ProcessMacCommands+0xabc>
 800b42a:	009a      	lsls	r2, r3, #2
 800b42c:	4bf2      	ldr	r3, [pc, #968]	@ (800b7f8 <ProcessMacCommands+0x424>)
 800b42e:	18d3      	adds	r3, r2, r3
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	469f      	mov	pc, r3
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800b434:	2003      	movs	r0, #3
 800b436:	f004 fb59 	bl	800faec <LoRaMacConfirmQueueIsCmdActive>
 800b43a:	1e03      	subs	r3, r0, #0
 800b43c:	d101      	bne.n	800b442 <ProcessMacCommands+0x6e>
 800b43e:	f000 fd17 	bl	800be70 <ProcessMacCommands+0xa9c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800b442:	2103      	movs	r1, #3
 800b444:	2000      	movs	r0, #0
 800b446:	f004 facd 	bl	800f9e4 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800b44a:	1cfb      	adds	r3, r7, #3
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	1cfa      	adds	r2, r7, #3
 800b450:	1c59      	adds	r1, r3, #1
 800b452:	7011      	strb	r1, [r2, #0]
 800b454:	001a      	movs	r2, r3
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	189b      	adds	r3, r3, r2
 800b45a:	7819      	ldrb	r1, [r3, #0]
 800b45c:	4ae7      	ldr	r2, [pc, #924]	@ (800b7fc <ProcessMacCommands+0x428>)
 800b45e:	238b      	movs	r3, #139	@ 0x8b
 800b460:	00db      	lsls	r3, r3, #3
 800b462:	54d1      	strb	r1, [r2, r3]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800b464:	1cfb      	adds	r3, r7, #3
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	1cfa      	adds	r2, r7, #3
 800b46a:	1c59      	adds	r1, r3, #1
 800b46c:	7011      	strb	r1, [r2, #0]
 800b46e:	001a      	movs	r2, r3
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	189b      	adds	r3, r3, r2
 800b474:	7819      	ldrb	r1, [r3, #0]
 800b476:	4be1      	ldr	r3, [pc, #900]	@ (800b7fc <ProcessMacCommands+0x428>)
 800b478:	4ae1      	ldr	r2, [pc, #900]	@ (800b800 <ProcessMacCommands+0x42c>)
 800b47a:	5499      	strb	r1, [r3, r2]
                }
                break;
 800b47c:	f000 fcf8 	bl	800be70 <ProcessMacCommands+0xa9c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800b480:	2657      	movs	r6, #87	@ 0x57
 800b482:	19bb      	adds	r3, r7, r6
 800b484:	2200      	movs	r2, #0
 800b486:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 800b488:	2456      	movs	r4, #86	@ 0x56
 800b48a:	193b      	adds	r3, r7, r4
 800b48c:	2200      	movs	r2, #0
 800b48e:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
 800b490:	2555      	movs	r5, #85	@ 0x55
 800b492:	197b      	adds	r3, r7, r5
 800b494:	2200      	movs	r2, #0
 800b496:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 800b498:	2354      	movs	r3, #84	@ 0x54
 800b49a:	18fb      	adds	r3, r7, r3
 800b49c:	2200      	movs	r2, #0
 800b49e:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
 800b4a0:	2187      	movs	r1, #135	@ 0x87
 800b4a2:	187b      	adds	r3, r7, r1
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	4053      	eors	r3, r2
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d101      	bne.n	800b4b4 <ProcessMacCommands+0xe0>
 800b4b0:	f000 fce0 	bl	800be74 <ProcessMacCommands+0xaa0>
                {
                    adrBlockFound = true;
 800b4b4:	187b      	adds	r3, r7, r1
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800b4ba:	1cfb      	adds	r3, r7, #3
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	18d2      	adds	r2, r2, r3
 800b4c4:	2158      	movs	r1, #88	@ 0x58
 800b4c6:	187b      	adds	r3, r7, r1
 800b4c8:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800b4ca:	1cba      	adds	r2, r7, #2
 800b4cc:	1cfb      	adds	r3, r7, #3
 800b4ce:	7812      	ldrb	r2, [r2, #0]
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	1ad3      	subs	r3, r2, r3
 800b4d4:	b2db      	uxtb	r3, r3
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	b2da      	uxtb	r2, r3
 800b4da:	187b      	adds	r3, r7, r1
 800b4dc:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800b4de:	4bc7      	ldr	r3, [pc, #796]	@ (800b7fc <ProcessMacCommands+0x428>)
 800b4e0:	4ac8      	ldr	r2, [pc, #800]	@ (800b804 <ProcessMacCommands+0x430>)
 800b4e2:	589b      	ldr	r3, [r3, r2]
 800b4e4:	22f2      	movs	r2, #242	@ 0xf2
 800b4e6:	5c9a      	ldrb	r2, [r3, r2]
 800b4e8:	187b      	adds	r3, r7, r1
 800b4ea:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b4ec:	4bc3      	ldr	r3, [pc, #780]	@ (800b7fc <ProcessMacCommands+0x428>)
 800b4ee:	4ac5      	ldr	r2, [pc, #788]	@ (800b804 <ProcessMacCommands+0x430>)
 800b4f0:	589a      	ldr	r2, [r3, r2]
 800b4f2:	2396      	movs	r3, #150	@ 0x96
 800b4f4:	005b      	lsls	r3, r3, #1
 800b4f6:	5cd2      	ldrb	r2, [r2, r3]
 800b4f8:	000d      	movs	r5, r1
 800b4fa:	197b      	adds	r3, r7, r5
 800b4fc:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b4fe:	4bbf      	ldr	r3, [pc, #764]	@ (800b7fc <ProcessMacCommands+0x428>)
 800b500:	4ac0      	ldr	r2, [pc, #768]	@ (800b804 <ProcessMacCommands+0x430>)
 800b502:	589b      	ldr	r3, [r3, r2]
 800b504:	22f9      	movs	r2, #249	@ 0xf9
 800b506:	569a      	ldrsb	r2, [r3, r2]
 800b508:	197b      	adds	r3, r7, r5
 800b50a:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800b50c:	4bbb      	ldr	r3, [pc, #748]	@ (800b7fc <ProcessMacCommands+0x428>)
 800b50e:	4abd      	ldr	r2, [pc, #756]	@ (800b804 <ProcessMacCommands+0x430>)
 800b510:	589b      	ldr	r3, [r3, r2]
 800b512:	22f8      	movs	r2, #248	@ 0xf8
 800b514:	569a      	ldrsb	r2, [r3, r2]
 800b516:	197b      	adds	r3, r7, r5
 800b518:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800b51a:	4bb8      	ldr	r3, [pc, #736]	@ (800b7fc <ProcessMacCommands+0x428>)
 800b51c:	4ab9      	ldr	r2, [pc, #740]	@ (800b804 <ProcessMacCommands+0x430>)
 800b51e:	589a      	ldr	r2, [r3, r2]
 800b520:	238c      	movs	r3, #140	@ 0x8c
 800b522:	005b      	lsls	r3, r3, #1
 800b524:	5cd2      	ldrb	r2, [r2, r3]
 800b526:	197b      	adds	r3, r7, r5
 800b528:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 800b52a:	4bb4      	ldr	r3, [pc, #720]	@ (800b7fc <ProcessMacCommands+0x428>)
 800b52c:	4ab5      	ldr	r2, [pc, #724]	@ (800b804 <ProcessMacCommands+0x430>)
 800b52e:	5899      	ldr	r1, [r3, r2]
 800b530:	197b      	adds	r3, r7, r5
 800b532:	22e8      	movs	r2, #232	@ 0xe8
 800b534:	0052      	lsls	r2, r2, #1
 800b536:	588a      	ldr	r2, [r1, r2]
 800b538:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 800b53a:	4bb0      	ldr	r3, [pc, #704]	@ (800b7fc <ProcessMacCommands+0x428>)
 800b53c:	4ab1      	ldr	r2, [pc, #708]	@ (800b804 <ProcessMacCommands+0x430>)
 800b53e:	589b      	ldr	r3, [r3, r2]
 800b540:	7818      	ldrb	r0, [r3, #0]
 800b542:	193c      	adds	r4, r7, r4
 800b544:	19ba      	adds	r2, r7, r6
 800b546:	1979      	adds	r1, r7, r5
 800b548:	2354      	movs	r3, #84	@ 0x54
 800b54a:	18fb      	adds	r3, r7, r3
 800b54c:	9301      	str	r3, [sp, #4]
 800b54e:	2555      	movs	r5, #85	@ 0x55
 800b550:	197b      	adds	r3, r7, r5
 800b552:	9300      	str	r3, [sp, #0]
 800b554:	0023      	movs	r3, r4
 800b556:	f006 f94d 	bl	80117f4 <RegionLinkAdrReq>
 800b55a:	0003      	movs	r3, r0
 800b55c:	001a      	movs	r2, r3
 800b55e:	216b      	movs	r1, #107	@ 0x6b
 800b560:	187b      	adds	r3, r7, r1
 800b562:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800b564:	187b      	adds	r3, r7, r1
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	001a      	movs	r2, r3
 800b56a:	2307      	movs	r3, #7
 800b56c:	4013      	ands	r3, r2
 800b56e:	2b07      	cmp	r3, #7
 800b570:	d118      	bne.n	800b5a4 <ProcessMacCommands+0x1d0>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 800b572:	4ba2      	ldr	r3, [pc, #648]	@ (800b7fc <ProcessMacCommands+0x428>)
 800b574:	4aa3      	ldr	r2, [pc, #652]	@ (800b804 <ProcessMacCommands+0x430>)
 800b576:	589b      	ldr	r3, [r3, r2]
 800b578:	19ba      	adds	r2, r7, r6
 800b57a:	2100      	movs	r1, #0
 800b57c:	5651      	ldrsb	r1, [r2, r1]
 800b57e:	22f9      	movs	r2, #249	@ 0xf9
 800b580:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 800b582:	4b9e      	ldr	r3, [pc, #632]	@ (800b7fc <ProcessMacCommands+0x428>)
 800b584:	4a9f      	ldr	r2, [pc, #636]	@ (800b804 <ProcessMacCommands+0x430>)
 800b586:	589b      	ldr	r3, [r3, r2]
 800b588:	2456      	movs	r4, #86	@ 0x56
 800b58a:	193a      	adds	r2, r7, r4
 800b58c:	2100      	movs	r1, #0
 800b58e:	5651      	ldrsb	r1, [r2, r1]
 800b590:	22f8      	movs	r2, #248	@ 0xf8
 800b592:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 800b594:	4b99      	ldr	r3, [pc, #612]	@ (800b7fc <ProcessMacCommands+0x428>)
 800b596:	4a9b      	ldr	r2, [pc, #620]	@ (800b804 <ProcessMacCommands+0x430>)
 800b598:	589a      	ldr	r2, [r3, r2]
 800b59a:	197b      	adds	r3, r7, r5
 800b59c:	7819      	ldrb	r1, [r3, #0]
 800b59e:	238c      	movs	r3, #140	@ 0x8c
 800b5a0:	005b      	lsls	r3, r3, #1
 800b5a2:	54d1      	strb	r1, [r2, r3]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800b5a4:	2386      	movs	r3, #134	@ 0x86
 800b5a6:	18fb      	adds	r3, r7, r3
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	701a      	strb	r2, [r3, #0]
 800b5ac:	e00c      	b.n	800b5c8 <ProcessMacCommands+0x1f4>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800b5ae:	236b      	movs	r3, #107	@ 0x6b
 800b5b0:	18fb      	adds	r3, r7, r3
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	0019      	movs	r1, r3
 800b5b6:	2003      	movs	r0, #3
 800b5b8:	f003 ffd2 	bl	800f560 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800b5bc:	2186      	movs	r1, #134	@ 0x86
 800b5be:	187b      	adds	r3, r7, r1
 800b5c0:	781a      	ldrb	r2, [r3, #0]
 800b5c2:	187b      	adds	r3, r7, r1
 800b5c4:	3201      	adds	r2, #1
 800b5c6:	701a      	strb	r2, [r3, #0]
 800b5c8:	2454      	movs	r4, #84	@ 0x54
 800b5ca:	193b      	adds	r3, r7, r4
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	2105      	movs	r1, #5
 800b5d0:	0018      	movs	r0, r3
 800b5d2:	f7f4 fda3 	bl	800011c <__udivsi3>
 800b5d6:	0003      	movs	r3, r0
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	2286      	movs	r2, #134	@ 0x86
 800b5dc:	18ba      	adds	r2, r7, r2
 800b5de:	7812      	ldrb	r2, [r2, #0]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d3e4      	bcc.n	800b5ae <ProcessMacCommands+0x1da>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800b5e4:	193b      	adds	r3, r7, r4
 800b5e6:	781a      	ldrb	r2, [r3, #0]
 800b5e8:	1cfb      	adds	r3, r7, #3
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	18d3      	adds	r3, r2, r3
 800b5ee:	b2da      	uxtb	r2, r3
 800b5f0:	1cfb      	adds	r3, r7, #3
 800b5f2:	3a01      	subs	r2, #1
 800b5f4:	701a      	strb	r2, [r3, #0]
                }
                break;
 800b5f6:	f000 fc3d 	bl	800be74 <ProcessMacCommands+0xaa0>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 800b5fa:	1cfb      	adds	r3, r7, #3
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	1cfa      	adds	r2, r7, #3
 800b600:	1c59      	adds	r1, r3, #1
 800b602:	7011      	strb	r1, [r2, #0]
 800b604:	001a      	movs	r2, r3
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	189b      	adds	r3, r3, r2
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	4a7b      	ldr	r2, [pc, #492]	@ (800b7fc <ProcessMacCommands+0x428>)
 800b60e:	497d      	ldr	r1, [pc, #500]	@ (800b804 <ProcessMacCommands+0x430>)
 800b610:	5852      	ldr	r2, [r2, r1]
 800b612:	210f      	movs	r1, #15
 800b614:	400b      	ands	r3, r1
 800b616:	b2d9      	uxtb	r1, r3
 800b618:	239e      	movs	r3, #158	@ 0x9e
 800b61a:	005b      	lsls	r3, r3, #1
 800b61c:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 800b61e:	4b77      	ldr	r3, [pc, #476]	@ (800b7fc <ProcessMacCommands+0x428>)
 800b620:	4a78      	ldr	r2, [pc, #480]	@ (800b804 <ProcessMacCommands+0x430>)
 800b622:	589a      	ldr	r2, [r3, r2]
 800b624:	239e      	movs	r3, #158	@ 0x9e
 800b626:	005b      	lsls	r3, r3, #1
 800b628:	5cd3      	ldrb	r3, [r2, r3]
 800b62a:	001a      	movs	r2, r3
 800b62c:	2301      	movs	r3, #1
 800b62e:	4093      	lsls	r3, r2
 800b630:	0019      	movs	r1, r3
 800b632:	4b72      	ldr	r3, [pc, #456]	@ (800b7fc <ProcessMacCommands+0x428>)
 800b634:	4a73      	ldr	r2, [pc, #460]	@ (800b804 <ProcessMacCommands+0x430>)
 800b636:	589a      	ldr	r2, [r3, r2]
 800b638:	b289      	uxth	r1, r1
 800b63a:	23e1      	movs	r3, #225	@ 0xe1
 800b63c:	005b      	lsls	r3, r3, #1
 800b63e:	52d1      	strh	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800b640:	2368      	movs	r3, #104	@ 0x68
 800b642:	18fb      	adds	r3, r7, r3
 800b644:	2200      	movs	r2, #0
 800b646:	0019      	movs	r1, r3
 800b648:	2004      	movs	r0, #4
 800b64a:	f003 ff89 	bl	800f560 <LoRaMacCommandsAddCmd>
                break;
 800b64e:	f000 fc16 	bl	800be7e <ProcessMacCommands+0xaaa>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800b652:	256b      	movs	r5, #107	@ 0x6b
 800b654:	197b      	adds	r3, r7, r5
 800b656:	2207      	movs	r2, #7
 800b658:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800b65a:	1cfb      	adds	r3, r7, #3
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	18d3      	adds	r3, r2, r3
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	091b      	lsrs	r3, r3, #4
 800b666:	b2db      	uxtb	r3, r3
 800b668:	b25b      	sxtb	r3, r3
 800b66a:	2207      	movs	r2, #7
 800b66c:	4013      	ands	r3, r2
 800b66e:	b25a      	sxtb	r2, r3
 800b670:	204c      	movs	r0, #76	@ 0x4c
 800b672:	183b      	adds	r3, r7, r0
 800b674:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800b676:	1cfb      	adds	r3, r7, #3
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	18d3      	adds	r3, r2, r3
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	b25b      	sxtb	r3, r3
 800b682:	220f      	movs	r2, #15
 800b684:	4013      	ands	r3, r2
 800b686:	b25a      	sxtb	r2, r3
 800b688:	183b      	adds	r3, r7, r0
 800b68a:	701a      	strb	r2, [r3, #0]
                macIndex++;
 800b68c:	1cfb      	adds	r3, r7, #3
 800b68e:	781a      	ldrb	r2, [r3, #0]
 800b690:	1cfb      	adds	r3, r7, #3
 800b692:	3201      	adds	r2, #1
 800b694:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800b696:	1cfb      	adds	r3, r7, #3
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	1cfa      	adds	r2, r7, #3
 800b69c:	1c59      	adds	r1, r3, #1
 800b69e:	7011      	strb	r1, [r2, #0]
 800b6a0:	001a      	movs	r2, r3
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	189b      	adds	r3, r3, r2
 800b6a6:	781b      	ldrb	r3, [r3, #0]
 800b6a8:	001a      	movs	r2, r3
 800b6aa:	183b      	adds	r3, r7, r0
 800b6ac:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800b6ae:	1cfb      	adds	r3, r7, #3
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	1cfa      	adds	r2, r7, #3
 800b6b4:	1c59      	adds	r1, r3, #1
 800b6b6:	7011      	strb	r1, [r2, #0]
 800b6b8:	001a      	movs	r2, r3
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	189b      	adds	r3, r3, r2
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	021a      	lsls	r2, r3, #8
 800b6c2:	183b      	adds	r3, r7, r0
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	431a      	orrs	r2, r3
 800b6c8:	183b      	adds	r3, r7, r0
 800b6ca:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800b6cc:	1cfb      	adds	r3, r7, #3
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	1cfa      	adds	r2, r7, #3
 800b6d2:	1c59      	adds	r1, r3, #1
 800b6d4:	7011      	strb	r1, [r2, #0]
 800b6d6:	001a      	movs	r2, r3
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	189b      	adds	r3, r3, r2
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	041a      	lsls	r2, r3, #16
 800b6e0:	183b      	adds	r3, r7, r0
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	431a      	orrs	r2, r3
 800b6e6:	0004      	movs	r4, r0
 800b6e8:	193b      	adds	r3, r7, r4
 800b6ea:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
 800b6ec:	193b      	adds	r3, r7, r4
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	2264      	movs	r2, #100	@ 0x64
 800b6f2:	435a      	muls	r2, r3
 800b6f4:	193b      	adds	r3, r7, r4
 800b6f6:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 800b6f8:	4b40      	ldr	r3, [pc, #256]	@ (800b7fc <ProcessMacCommands+0x428>)
 800b6fa:	4a42      	ldr	r2, [pc, #264]	@ (800b804 <ProcessMacCommands+0x430>)
 800b6fc:	589b      	ldr	r3, [r3, r2]
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	193a      	adds	r2, r7, r4
 800b702:	0011      	movs	r1, r2
 800b704:	0018      	movs	r0, r3
 800b706:	f006 f893 	bl	8011830 <RegionRxParamSetupReq>
 800b70a:	0003      	movs	r3, r0
 800b70c:	001a      	movs	r2, r3
 800b70e:	197b      	adds	r3, r7, r5
 800b710:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
 800b712:	197b      	adds	r3, r7, r5
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	001a      	movs	r2, r3
 800b718:	2307      	movs	r3, #7
 800b71a:	4013      	ands	r3, r2
 800b71c:	2b07      	cmp	r3, #7
 800b71e:	d12d      	bne.n	800b77c <ProcessMacCommands+0x3a8>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800b720:	193b      	adds	r3, r7, r4
 800b722:	2100      	movs	r1, #0
 800b724:	5659      	ldrsb	r1, [r3, r1]
 800b726:	4b35      	ldr	r3, [pc, #212]	@ (800b7fc <ProcessMacCommands+0x428>)
 800b728:	4a36      	ldr	r2, [pc, #216]	@ (800b804 <ProcessMacCommands+0x430>)
 800b72a:	589a      	ldr	r2, [r3, r2]
 800b72c:	b2c9      	uxtb	r1, r1
 800b72e:	2390      	movs	r3, #144	@ 0x90
 800b730:	005b      	lsls	r3, r3, #1
 800b732:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800b734:	193b      	adds	r3, r7, r4
 800b736:	2100      	movs	r1, #0
 800b738:	5659      	ldrsb	r1, [r3, r1]
 800b73a:	4b30      	ldr	r3, [pc, #192]	@ (800b7fc <ProcessMacCommands+0x428>)
 800b73c:	4a31      	ldr	r2, [pc, #196]	@ (800b804 <ProcessMacCommands+0x430>)
 800b73e:	589a      	ldr	r2, [r3, r2]
 800b740:	b2c9      	uxtb	r1, r1
 800b742:	2394      	movs	r3, #148	@ 0x94
 800b744:	005b      	lsls	r3, r3, #1
 800b746:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800b748:	4b2c      	ldr	r3, [pc, #176]	@ (800b7fc <ProcessMacCommands+0x428>)
 800b74a:	4a2e      	ldr	r2, [pc, #184]	@ (800b804 <ProcessMacCommands+0x430>)
 800b74c:	589a      	ldr	r2, [r3, r2]
 800b74e:	193b      	adds	r3, r7, r4
 800b750:	6859      	ldr	r1, [r3, #4]
 800b752:	238e      	movs	r3, #142	@ 0x8e
 800b754:	005b      	lsls	r3, r3, #1
 800b756:	50d1      	str	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800b758:	4b28      	ldr	r3, [pc, #160]	@ (800b7fc <ProcessMacCommands+0x428>)
 800b75a:	4a2a      	ldr	r2, [pc, #168]	@ (800b804 <ProcessMacCommands+0x430>)
 800b75c:	589a      	ldr	r2, [r3, r2]
 800b75e:	193b      	adds	r3, r7, r4
 800b760:	6859      	ldr	r1, [r3, #4]
 800b762:	2392      	movs	r3, #146	@ 0x92
 800b764:	005b      	lsls	r3, r3, #1
 800b766:	50d1      	str	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800b768:	193b      	adds	r3, r7, r4
 800b76a:	2101      	movs	r1, #1
 800b76c:	5659      	ldrsb	r1, [r3, r1]
 800b76e:	4b23      	ldr	r3, [pc, #140]	@ (800b7fc <ProcessMacCommands+0x428>)
 800b770:	4a24      	ldr	r2, [pc, #144]	@ (800b804 <ProcessMacCommands+0x430>)
 800b772:	589a      	ldr	r2, [r3, r2]
 800b774:	b2c9      	uxtb	r1, r1
 800b776:	231a      	movs	r3, #26
 800b778:	33ff      	adds	r3, #255	@ 0xff
 800b77a:	54d1      	strb	r1, [r2, r3]
                }
                macCmdPayload[0] = status;
 800b77c:	236b      	movs	r3, #107	@ 0x6b
 800b77e:	18fb      	adds	r3, r7, r3
 800b780:	781a      	ldrb	r2, [r3, #0]
 800b782:	2168      	movs	r1, #104	@ 0x68
 800b784:	187b      	adds	r3, r7, r1
 800b786:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800b788:	187b      	adds	r3, r7, r1
 800b78a:	2201      	movs	r2, #1
 800b78c:	0019      	movs	r1, r3
 800b78e:	2005      	movs	r0, #5
 800b790:	f003 fee6 	bl	800f560 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800b794:	f7ff fe0e 	bl	800b3b4 <SetMlmeScheduleUplinkIndication>
                break;
 800b798:	e371      	b.n	800be7e <ProcessMacCommands+0xaaa>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800b79a:	2185      	movs	r1, #133	@ 0x85
 800b79c:	187b      	adds	r3, r7, r1
 800b79e:	22ff      	movs	r2, #255	@ 0xff
 800b7a0:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800b7a2:	4a16      	ldr	r2, [pc, #88]	@ (800b7fc <ProcessMacCommands+0x428>)
 800b7a4:	23d2      	movs	r3, #210	@ 0xd2
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	58d3      	ldr	r3, [r2, r3]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d00f      	beq.n	800b7ce <ProcessMacCommands+0x3fa>
 800b7ae:	4a13      	ldr	r2, [pc, #76]	@ (800b7fc <ProcessMacCommands+0x428>)
 800b7b0:	23d2      	movs	r3, #210	@ 0xd2
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	58d3      	ldr	r3, [r2, r3]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d008      	beq.n	800b7ce <ProcessMacCommands+0x3fa>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800b7bc:	4a0f      	ldr	r2, [pc, #60]	@ (800b7fc <ProcessMacCommands+0x428>)
 800b7be:	23d2      	movs	r3, #210	@ 0xd2
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	58d3      	ldr	r3, [r2, r3]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	187c      	adds	r4, r7, r1
 800b7c8:	4798      	blx	r3
 800b7ca:	0003      	movs	r3, r0
 800b7cc:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
 800b7ce:	2168      	movs	r1, #104	@ 0x68
 800b7d0:	187b      	adds	r3, r7, r1
 800b7d2:	2285      	movs	r2, #133	@ 0x85
 800b7d4:	18ba      	adds	r2, r7, r2
 800b7d6:	7812      	ldrb	r2, [r2, #0]
 800b7d8:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800b7da:	1c7b      	adds	r3, r7, #1
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	223f      	movs	r2, #63	@ 0x3f
 800b7e0:	4013      	ands	r3, r2
 800b7e2:	b2da      	uxtb	r2, r3
 800b7e4:	187b      	adds	r3, r7, r1
 800b7e6:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800b7e8:	187b      	adds	r3, r7, r1
 800b7ea:	2202      	movs	r2, #2
 800b7ec:	0019      	movs	r1, r3
 800b7ee:	2006      	movs	r0, #6
 800b7f0:	f003 feb6 	bl	800f560 <LoRaMacCommandsAddCmd>
                break;
 800b7f4:	e343      	b.n	800be7e <ProcessMacCommands+0xaaa>
 800b7f6:	46c0      	nop			@ (mov r8, r8)
 800b7f8:	0801b28c 	.word	0x0801b28c
 800b7fc:	20000964 	.word	0x20000964
 800b800:	00000459 	.word	0x00000459
 800b804:	00000484 	.word	0x00000484
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800b808:	246b      	movs	r4, #107	@ 0x6b
 800b80a:	193b      	adds	r3, r7, r4
 800b80c:	2203      	movs	r2, #3
 800b80e:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
 800b810:	1cfb      	adds	r3, r7, #3
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	1cfa      	adds	r2, r7, #3
 800b816:	1c59      	adds	r1, r3, #1
 800b818:	7011      	strb	r1, [r2, #0]
 800b81a:	001a      	movs	r2, r3
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	189b      	adds	r3, r3, r2
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	b25a      	sxtb	r2, r3
 800b824:	2544      	movs	r5, #68	@ 0x44
 800b826:	197b      	adds	r3, r7, r5
 800b828:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
 800b82a:	197b      	adds	r3, r7, r5
 800b82c:	2038      	movs	r0, #56	@ 0x38
 800b82e:	183a      	adds	r2, r7, r0
 800b830:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800b832:	1cfb      	adds	r3, r7, #3
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	1cfa      	adds	r2, r7, #3
 800b838:	1c59      	adds	r1, r3, #1
 800b83a:	7011      	strb	r1, [r2, #0]
 800b83c:	001a      	movs	r2, r3
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	189b      	adds	r3, r3, r2
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	001a      	movs	r2, r3
 800b846:	183b      	adds	r3, r7, r0
 800b848:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800b84a:	1cfb      	adds	r3, r7, #3
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	1cfa      	adds	r2, r7, #3
 800b850:	1c59      	adds	r1, r3, #1
 800b852:	7011      	strb	r1, [r2, #0]
 800b854:	001a      	movs	r2, r3
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	189b      	adds	r3, r3, r2
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	021a      	lsls	r2, r3, #8
 800b85e:	183b      	adds	r3, r7, r0
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	431a      	orrs	r2, r3
 800b864:	183b      	adds	r3, r7, r0
 800b866:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800b868:	1cfb      	adds	r3, r7, #3
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	1cfa      	adds	r2, r7, #3
 800b86e:	1c59      	adds	r1, r3, #1
 800b870:	7011      	strb	r1, [r2, #0]
 800b872:	001a      	movs	r2, r3
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	189b      	adds	r3, r3, r2
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	041a      	lsls	r2, r3, #16
 800b87c:	183b      	adds	r3, r7, r0
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	431a      	orrs	r2, r3
 800b882:	183b      	adds	r3, r7, r0
 800b884:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
 800b886:	183b      	adds	r3, r7, r0
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2264      	movs	r2, #100	@ 0x64
 800b88c:	435a      	muls	r2, r3
 800b88e:	183b      	adds	r3, r7, r0
 800b890:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
 800b892:	183b      	adds	r3, r7, r0
 800b894:	2200      	movs	r2, #0
 800b896:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
 800b898:	1cfb      	adds	r3, r7, #3
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	1cfa      	adds	r2, r7, #3
 800b89e:	1c59      	adds	r1, r3, #1
 800b8a0:	7011      	strb	r1, [r2, #0]
 800b8a2:	001a      	movs	r2, r3
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	189b      	adds	r3, r3, r2
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	b25a      	sxtb	r2, r3
 800b8ac:	183b      	adds	r3, r7, r0
 800b8ae:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 800b8b0:	4ba2      	ldr	r3, [pc, #648]	@ (800bb3c <ProcessMacCommands+0x768>)
 800b8b2:	4aa3      	ldr	r2, [pc, #652]	@ (800bb40 <ProcessMacCommands+0x76c>)
 800b8b4:	589b      	ldr	r3, [r3, r2]
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	197a      	adds	r2, r7, r5
 800b8ba:	0011      	movs	r1, r2
 800b8bc:	0018      	movs	r0, r3
 800b8be:	f005 ffcd 	bl	801185c <RegionNewChannelReq>
 800b8c2:	0003      	movs	r3, r0
 800b8c4:	001a      	movs	r2, r3
 800b8c6:	193b      	adds	r3, r7, r4
 800b8c8:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
 800b8ca:	193b      	adds	r3, r7, r4
 800b8cc:	781a      	ldrb	r2, [r3, #0]
 800b8ce:	2168      	movs	r1, #104	@ 0x68
 800b8d0:	187b      	adds	r3, r7, r1
 800b8d2:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800b8d4:	187b      	adds	r3, r7, r1
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	0019      	movs	r1, r3
 800b8da:	2007      	movs	r0, #7
 800b8dc:	f003 fe40 	bl	800f560 <LoRaMacCommandsAddCmd>
                break;
 800b8e0:	e2cd      	b.n	800be7e <ProcessMacCommands+0xaaa>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800b8e2:	1cfb      	adds	r3, r7, #3
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	1cfa      	adds	r2, r7, #3
 800b8e8:	1c59      	adds	r1, r3, #1
 800b8ea:	7011      	strb	r1, [r2, #0]
 800b8ec:	001a      	movs	r2, r3
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	189b      	adds	r3, r3, r2
 800b8f2:	781a      	ldrb	r2, [r3, #0]
 800b8f4:	2084      	movs	r0, #132	@ 0x84
 800b8f6:	183b      	adds	r3, r7, r0
 800b8f8:	210f      	movs	r1, #15
 800b8fa:	400a      	ands	r2, r1
 800b8fc:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
 800b8fe:	183b      	adds	r3, r7, r0
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d104      	bne.n	800b910 <ProcessMacCommands+0x53c>
                {
                    delay++;
 800b906:	183b      	adds	r3, r7, r0
 800b908:	781a      	ldrb	r2, [r3, #0]
 800b90a:	183b      	adds	r3, r7, r0
 800b90c:	3201      	adds	r2, #1
 800b90e:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 800b910:	2384      	movs	r3, #132	@ 0x84
 800b912:	18fb      	adds	r3, r7, r3
 800b914:	781a      	ldrb	r2, [r3, #0]
 800b916:	0013      	movs	r3, r2
 800b918:	015b      	lsls	r3, r3, #5
 800b91a:	1a9b      	subs	r3, r3, r2
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	189b      	adds	r3, r3, r2
 800b920:	00db      	lsls	r3, r3, #3
 800b922:	0019      	movs	r1, r3
 800b924:	4b85      	ldr	r3, [pc, #532]	@ (800bb3c <ProcessMacCommands+0x768>)
 800b926:	4a86      	ldr	r2, [pc, #536]	@ (800bb40 <ProcessMacCommands+0x76c>)
 800b928:	589a      	ldr	r2, [r3, r2]
 800b92a:	2384      	movs	r3, #132	@ 0x84
 800b92c:	005b      	lsls	r3, r3, #1
 800b92e:	50d1      	str	r1, [r2, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800b930:	4b82      	ldr	r3, [pc, #520]	@ (800bb3c <ProcessMacCommands+0x768>)
 800b932:	4a83      	ldr	r2, [pc, #524]	@ (800bb40 <ProcessMacCommands+0x76c>)
 800b934:	589a      	ldr	r2, [r3, r2]
 800b936:	2384      	movs	r3, #132	@ 0x84
 800b938:	005b      	lsls	r3, r3, #1
 800b93a:	58d3      	ldr	r3, [r2, r3]
 800b93c:	4a7f      	ldr	r2, [pc, #508]	@ (800bb3c <ProcessMacCommands+0x768>)
 800b93e:	4980      	ldr	r1, [pc, #512]	@ (800bb40 <ProcessMacCommands+0x76c>)
 800b940:	5852      	ldr	r2, [r2, r1]
 800b942:	21fa      	movs	r1, #250	@ 0xfa
 800b944:	0089      	lsls	r1, r1, #2
 800b946:	1859      	adds	r1, r3, r1
 800b948:	2386      	movs	r3, #134	@ 0x86
 800b94a:	005b      	lsls	r3, r3, #1
 800b94c:	50d1      	str	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800b94e:	2368      	movs	r3, #104	@ 0x68
 800b950:	18fb      	adds	r3, r7, r3
 800b952:	2200      	movs	r2, #0
 800b954:	0019      	movs	r1, r3
 800b956:	2008      	movs	r0, #8
 800b958:	f003 fe02 	bl	800f560 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800b95c:	f7ff fd2a 	bl	800b3b4 <SetMlmeScheduleUplinkIndication>
                break;
 800b960:	e28d      	b.n	800be7e <ProcessMacCommands+0xaaa>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800b962:	1cfb      	adds	r3, r7, #3
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	1cfa      	adds	r2, r7, #3
 800b968:	1c59      	adds	r1, r3, #1
 800b96a:	7011      	strb	r1, [r2, #0]
 800b96c:	001a      	movs	r2, r3
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	189a      	adds	r2, r3, r2
 800b972:	2076      	movs	r0, #118	@ 0x76
 800b974:	183b      	adds	r3, r7, r0
 800b976:	7812      	ldrb	r2, [r2, #0]
 800b978:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
 800b97a:	2134      	movs	r1, #52	@ 0x34
 800b97c:	187b      	adds	r3, r7, r1
 800b97e:	2200      	movs	r2, #0
 800b980:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
 800b982:	187b      	adds	r3, r7, r1
 800b984:	2200      	movs	r2, #0
 800b986:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800b988:	183b      	adds	r3, r7, r0
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	2220      	movs	r2, #32
 800b98e:	4013      	ands	r3, r2
 800b990:	d002      	beq.n	800b998 <ProcessMacCommands+0x5c4>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800b992:	187b      	adds	r3, r7, r1
 800b994:	2201      	movs	r2, #1
 800b996:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800b998:	2376      	movs	r3, #118	@ 0x76
 800b99a:	18fb      	adds	r3, r7, r3
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	2210      	movs	r2, #16
 800b9a0:	4013      	ands	r3, r2
 800b9a2:	d003      	beq.n	800b9ac <ProcessMacCommands+0x5d8>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800b9a4:	2334      	movs	r3, #52	@ 0x34
 800b9a6:	18fb      	adds	r3, r7, r3
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800b9ac:	2376      	movs	r3, #118	@ 0x76
 800b9ae:	18fb      	adds	r3, r7, r3
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	220f      	movs	r2, #15
 800b9b4:	4013      	ands	r3, r2
 800b9b6:	b2da      	uxtb	r2, r3
 800b9b8:	2434      	movs	r4, #52	@ 0x34
 800b9ba:	193b      	adds	r3, r7, r4
 800b9bc:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 800b9be:	4b5f      	ldr	r3, [pc, #380]	@ (800bb3c <ProcessMacCommands+0x768>)
 800b9c0:	4a5f      	ldr	r2, [pc, #380]	@ (800bb40 <ProcessMacCommands+0x76c>)
 800b9c2:	589b      	ldr	r3, [r3, r2]
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	193a      	adds	r2, r7, r4
 800b9c8:	0011      	movs	r1, r2
 800b9ca:	0018      	movs	r0, r3
 800b9cc:	f005 ff5c 	bl	8011888 <RegionTxParamSetupReq>
 800b9d0:	0003      	movs	r3, r0
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	d100      	bne.n	800b9d8 <ProcessMacCommands+0x604>
 800b9d6:	e24f      	b.n	800be78 <ProcessMacCommands+0xaa4>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800b9d8:	4b58      	ldr	r3, [pc, #352]	@ (800bb3c <ProcessMacCommands+0x768>)
 800b9da:	4a59      	ldr	r2, [pc, #356]	@ (800bb40 <ProcessMacCommands+0x76c>)
 800b9dc:	589a      	ldr	r2, [r3, r2]
 800b9de:	193b      	adds	r3, r7, r4
 800b9e0:	7819      	ldrb	r1, [r3, #0]
 800b9e2:	2396      	movs	r3, #150	@ 0x96
 800b9e4:	005b      	lsls	r3, r3, #1
 800b9e6:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800b9e8:	4b54      	ldr	r3, [pc, #336]	@ (800bb3c <ProcessMacCommands+0x768>)
 800b9ea:	4a55      	ldr	r2, [pc, #340]	@ (800bb40 <ProcessMacCommands+0x76c>)
 800b9ec:	589a      	ldr	r2, [r3, r2]
 800b9ee:	193b      	adds	r3, r7, r4
 800b9f0:	7859      	ldrb	r1, [r3, #1]
 800b9f2:	232e      	movs	r3, #46	@ 0x2e
 800b9f4:	33ff      	adds	r3, #255	@ 0xff
 800b9f6:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800b9f8:	193b      	adds	r3, r7, r4
 800b9fa:	789b      	ldrb	r3, [r3, #2]
 800b9fc:	001a      	movs	r2, r3
 800b9fe:	4b51      	ldr	r3, [pc, #324]	@ (800bb44 <ProcessMacCommands+0x770>)
 800ba00:	5c9a      	ldrb	r2, [r3, r2]
 800ba02:	4b4e      	ldr	r3, [pc, #312]	@ (800bb3c <ProcessMacCommands+0x768>)
 800ba04:	494e      	ldr	r1, [pc, #312]	@ (800bb40 <ProcessMacCommands+0x76c>)
 800ba06:	585c      	ldr	r4, [r3, r1]
 800ba08:	0010      	movs	r0, r2
 800ba0a:	f7f5 fb7f 	bl	800110c <__aeabi_ui2f>
 800ba0e:	1c02      	adds	r2, r0, #0
 800ba10:	2398      	movs	r3, #152	@ 0x98
 800ba12:	005b      	lsls	r3, r3, #1
 800ba14:	50e2      	str	r2, [r4, r3]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800ba16:	2130      	movs	r1, #48	@ 0x30
 800ba18:	187b      	adds	r3, r7, r1
 800ba1a:	2202      	movs	r2, #2
 800ba1c:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ba1e:	4b47      	ldr	r3, [pc, #284]	@ (800bb3c <ProcessMacCommands+0x768>)
 800ba20:	4a47      	ldr	r2, [pc, #284]	@ (800bb40 <ProcessMacCommands+0x76c>)
 800ba22:	589a      	ldr	r2, [r3, r2]
 800ba24:	2396      	movs	r3, #150	@ 0x96
 800ba26:	005b      	lsls	r3, r3, #1
 800ba28:	5cd2      	ldrb	r2, [r2, r3]
 800ba2a:	187b      	adds	r3, r7, r1
 800ba2c:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ba2e:	4b43      	ldr	r3, [pc, #268]	@ (800bb3c <ProcessMacCommands+0x768>)
 800ba30:	4a43      	ldr	r2, [pc, #268]	@ (800bb40 <ProcessMacCommands+0x76c>)
 800ba32:	589b      	ldr	r3, [r3, r2]
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	187a      	adds	r2, r7, r1
 800ba38:	0011      	movs	r1, r2
 800ba3a:	0018      	movs	r0, r3
 800ba3c:	f005 fdd3 	bl	80115e6 <RegionGetPhyParam>
 800ba40:	0003      	movs	r3, r0
 800ba42:	001a      	movs	r2, r3
 800ba44:	212c      	movs	r1, #44	@ 0x2c
 800ba46:	187b      	adds	r3, r7, r1
 800ba48:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 800ba4a:	187b      	adds	r3, r7, r1
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	b259      	sxtb	r1, r3
 800ba50:	4b3a      	ldr	r3, [pc, #232]	@ (800bb3c <ProcessMacCommands+0x768>)
 800ba52:	4a3b      	ldr	r2, [pc, #236]	@ (800bb40 <ProcessMacCommands+0x76c>)
 800ba54:	589b      	ldr	r3, [r3, r2]
 800ba56:	22f9      	movs	r2, #249	@ 0xf9
 800ba58:	5698      	ldrsb	r0, [r3, r2]
 800ba5a:	4b38      	ldr	r3, [pc, #224]	@ (800bb3c <ProcessMacCommands+0x768>)
 800ba5c:	4a38      	ldr	r2, [pc, #224]	@ (800bb40 <ProcessMacCommands+0x76c>)
 800ba5e:	589b      	ldr	r3, [r3, r2]
 800ba60:	1c04      	adds	r4, r0, #0
 800ba62:	1c08      	adds	r0, r1, #0
 800ba64:	b241      	sxtb	r1, r0
 800ba66:	b262      	sxtb	r2, r4
 800ba68:	4291      	cmp	r1, r2
 800ba6a:	da00      	bge.n	800ba6e <ProcessMacCommands+0x69a>
 800ba6c:	1c20      	adds	r0, r4, #0
 800ba6e:	b241      	sxtb	r1, r0
 800ba70:	22f9      	movs	r2, #249	@ 0xf9
 800ba72:	5499      	strb	r1, [r3, r2]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800ba74:	2368      	movs	r3, #104	@ 0x68
 800ba76:	18fb      	adds	r3, r7, r3
 800ba78:	2200      	movs	r2, #0
 800ba7a:	0019      	movs	r1, r3
 800ba7c:	2009      	movs	r0, #9
 800ba7e:	f003 fd6f 	bl	800f560 <LoRaMacCommandsAddCmd>
                }
                break;
 800ba82:	e1f9      	b.n	800be78 <ProcessMacCommands+0xaa4>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800ba84:	246b      	movs	r4, #107	@ 0x6b
 800ba86:	193b      	adds	r3, r7, r4
 800ba88:	2203      	movs	r2, #3
 800ba8a:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
 800ba8c:	1cfb      	adds	r3, r7, #3
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	1cfa      	adds	r2, r7, #3
 800ba92:	1c59      	adds	r1, r3, #1
 800ba94:	7011      	strb	r1, [r2, #0]
 800ba96:	001a      	movs	r2, r3
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	189b      	adds	r3, r3, r2
 800ba9c:	781a      	ldrb	r2, [r3, #0]
 800ba9e:	2024      	movs	r0, #36	@ 0x24
 800baa0:	183b      	adds	r3, r7, r0
 800baa2:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800baa4:	1cfb      	adds	r3, r7, #3
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	1cfa      	adds	r2, r7, #3
 800baaa:	1c59      	adds	r1, r3, #1
 800baac:	7011      	strb	r1, [r2, #0]
 800baae:	001a      	movs	r2, r3
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	189b      	adds	r3, r3, r2
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	001a      	movs	r2, r3
 800bab8:	183b      	adds	r3, r7, r0
 800baba:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800babc:	1cfb      	adds	r3, r7, #3
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	1cfa      	adds	r2, r7, #3
 800bac2:	1c59      	adds	r1, r3, #1
 800bac4:	7011      	strb	r1, [r2, #0]
 800bac6:	001a      	movs	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	189b      	adds	r3, r3, r2
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	021a      	lsls	r2, r3, #8
 800bad0:	183b      	adds	r3, r7, r0
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	431a      	orrs	r2, r3
 800bad6:	183b      	adds	r3, r7, r0
 800bad8:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800bada:	1cfb      	adds	r3, r7, #3
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	1cfa      	adds	r2, r7, #3
 800bae0:	1c59      	adds	r1, r3, #1
 800bae2:	7011      	strb	r1, [r2, #0]
 800bae4:	001a      	movs	r2, r3
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	189b      	adds	r3, r3, r2
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	041a      	lsls	r2, r3, #16
 800baee:	183b      	adds	r3, r7, r0
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	431a      	orrs	r2, r3
 800baf4:	0001      	movs	r1, r0
 800baf6:	187b      	adds	r3, r7, r1
 800baf8:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
 800bafa:	187b      	adds	r3, r7, r1
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	2264      	movs	r2, #100	@ 0x64
 800bb00:	435a      	muls	r2, r3
 800bb02:	187b      	adds	r3, r7, r1
 800bb04:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 800bb06:	4b0d      	ldr	r3, [pc, #52]	@ (800bb3c <ProcessMacCommands+0x768>)
 800bb08:	4a0d      	ldr	r2, [pc, #52]	@ (800bb40 <ProcessMacCommands+0x76c>)
 800bb0a:	589b      	ldr	r3, [r3, r2]
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	187a      	adds	r2, r7, r1
 800bb10:	0011      	movs	r1, r2
 800bb12:	0018      	movs	r0, r3
 800bb14:	f005 fece 	bl	80118b4 <RegionDlChannelReq>
 800bb18:	0003      	movs	r3, r0
 800bb1a:	001a      	movs	r2, r3
 800bb1c:	193b      	adds	r3, r7, r4
 800bb1e:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 800bb20:	193b      	adds	r3, r7, r4
 800bb22:	781a      	ldrb	r2, [r3, #0]
 800bb24:	2168      	movs	r1, #104	@ 0x68
 800bb26:	187b      	adds	r3, r7, r1
 800bb28:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800bb2a:	187b      	adds	r3, r7, r1
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	0019      	movs	r1, r3
 800bb30:	200a      	movs	r0, #10
 800bb32:	f003 fd15 	bl	800f560 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800bb36:	f7ff fc3d 	bl	800b3b4 <SetMlmeScheduleUplinkIndication>
                break;
 800bb3a:	e1a0      	b.n	800be7e <ProcessMacCommands+0xaaa>
 800bb3c:	20000964 	.word	0x20000964
 800bb40:	00000484 	.word	0x00000484
 800bb44:	0801b268 	.word	0x0801b268
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                SysTime_t gpsEpochTime = { 0 };
 800bb48:	241c      	movs	r4, #28
 800bb4a:	193b      	adds	r3, r7, r4
 800bb4c:	0018      	movs	r0, r3
 800bb4e:	2308      	movs	r3, #8
 800bb50:	001a      	movs	r2, r3
 800bb52:	2100      	movs	r1, #0
 800bb54:	f00d ffba 	bl	8019acc <memset>
                SysTime_t sysTime = { 0 };
 800bb58:	2514      	movs	r5, #20
 800bb5a:	197b      	adds	r3, r7, r5
 800bb5c:	0018      	movs	r0, r3
 800bb5e:	2308      	movs	r3, #8
 800bb60:	001a      	movs	r2, r3
 800bb62:	2100      	movs	r1, #0
 800bb64:	f00d ffb2 	bl	8019acc <memset>
                SysTime_t sysTimeCurrent = { 0 };
 800bb68:	260c      	movs	r6, #12
 800bb6a:	19bb      	adds	r3, r7, r6
 800bb6c:	0018      	movs	r0, r3
 800bb6e:	2308      	movs	r3, #8
 800bb70:	001a      	movs	r2, r3
 800bb72:	2100      	movs	r1, #0
 800bb74:	f00d ffaa 	bl	8019acc <memset>

                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800bb78:	1cfb      	adds	r3, r7, #3
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	1cfa      	adds	r2, r7, #3
 800bb7e:	1c59      	adds	r1, r3, #1
 800bb80:	7011      	strb	r1, [r2, #0]
 800bb82:	001a      	movs	r2, r3
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	189b      	adds	r3, r3, r2
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	001a      	movs	r2, r3
 800bb8c:	193b      	adds	r3, r7, r4
 800bb8e:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800bb90:	1cfb      	adds	r3, r7, #3
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	1cfa      	adds	r2, r7, #3
 800bb96:	1c59      	adds	r1, r3, #1
 800bb98:	7011      	strb	r1, [r2, #0]
 800bb9a:	001a      	movs	r2, r3
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	189b      	adds	r3, r3, r2
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	021a      	lsls	r2, r3, #8
 800bba4:	193b      	adds	r3, r7, r4
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	431a      	orrs	r2, r3
 800bbaa:	0020      	movs	r0, r4
 800bbac:	193b      	adds	r3, r7, r4
 800bbae:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800bbb0:	1cfb      	adds	r3, r7, #3
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	1cfa      	adds	r2, r7, #3
 800bbb6:	1c59      	adds	r1, r3, #1
 800bbb8:	7011      	strb	r1, [r2, #0]
 800bbba:	001a      	movs	r2, r3
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	189b      	adds	r3, r3, r2
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	041a      	lsls	r2, r3, #16
 800bbc4:	183b      	adds	r3, r7, r0
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	431a      	orrs	r2, r3
 800bbca:	183b      	adds	r3, r7, r0
 800bbcc:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800bbce:	1cfb      	adds	r3, r7, #3
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	1cfa      	adds	r2, r7, #3
 800bbd4:	1c59      	adds	r1, r3, #1
 800bbd6:	7011      	strb	r1, [r2, #0]
 800bbd8:	001a      	movs	r2, r3
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	189b      	adds	r3, r3, r2
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	061a      	lsls	r2, r3, #24
 800bbe2:	183b      	adds	r3, r7, r0
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	431a      	orrs	r2, r3
 800bbe8:	183b      	adds	r3, r7, r0
 800bbea:	601a      	str	r2, [r3, #0]
                gpsEpochTime.SubSeconds = payload[macIndex++];
 800bbec:	1cfb      	adds	r3, r7, #3
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	1cfa      	adds	r2, r7, #3
 800bbf2:	1c59      	adds	r1, r3, #1
 800bbf4:	7011      	strb	r1, [r2, #0]
 800bbf6:	001a      	movs	r2, r3
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	189b      	adds	r3, r3, r2
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	b21a      	sxth	r2, r3
 800bc00:	183b      	adds	r3, r7, r0
 800bc02:	809a      	strh	r2, [r3, #4]

                // Convert the fractional second received in ms
                // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800bc04:	0001      	movs	r1, r0
 800bc06:	183b      	adds	r3, r7, r0
 800bc08:	2204      	movs	r2, #4
 800bc0a:	5e9b      	ldrsh	r3, [r3, r2]
 800bc0c:	001a      	movs	r2, r3
 800bc0e:	0013      	movs	r3, r2
 800bc10:	015b      	lsls	r3, r3, #5
 800bc12:	1a9b      	subs	r3, r3, r2
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	189b      	adds	r3, r3, r2
 800bc18:	00db      	lsls	r3, r3, #3
 800bc1a:	121b      	asrs	r3, r3, #8
 800bc1c:	b21a      	sxth	r2, r3
 800bc1e:	187b      	adds	r3, r7, r1
 800bc20:	809a      	strh	r2, [r3, #4]

                // Copy received GPS Epoch time into system time
                sysTime = gpsEpochTime;
 800bc22:	197b      	adds	r3, r7, r5
 800bc24:	187a      	adds	r2, r7, r1
 800bc26:	ca03      	ldmia	r2!, {r0, r1}
 800bc28:	c303      	stmia	r3!, {r0, r1}
                // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800bc2a:	197b      	adds	r3, r7, r5
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a9a      	ldr	r2, [pc, #616]	@ (800be98 <ProcessMacCommands+0xac4>)
 800bc30:	189a      	adds	r2, r3, r2
 800bc32:	002c      	movs	r4, r5
 800bc34:	197b      	adds	r3, r7, r5
 800bc36:	601a      	str	r2, [r3, #0]

                // Compensate time difference between Tx Done time and now
                sysTimeCurrent = SysTimeGet( );
 800bc38:	19bb      	adds	r3, r7, r6
 800bc3a:	0018      	movs	r0, r3
 800bc3c:	f009 f95e 	bl	8014efc <SysTimeGet>
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800bc40:	236c      	movs	r3, #108	@ 0x6c
 800bc42:	18fd      	adds	r5, r7, r3
 800bc44:	4895      	ldr	r0, [pc, #596]	@ (800be9c <ProcessMacCommands+0xac8>)
 800bc46:	23ce      	movs	r3, #206	@ 0xce
 800bc48:	0099      	lsls	r1, r3, #2
 800bc4a:	0026      	movs	r6, r4
 800bc4c:	193a      	adds	r2, r7, r4
 800bc4e:	2404      	movs	r4, #4
 800bc50:	1843      	adds	r3, r0, r1
 800bc52:	191c      	adds	r4, r3, r4
 800bc54:	466b      	mov	r3, sp
 800bc56:	6824      	ldr	r4, [r4, #0]
 800bc58:	601c      	str	r4, [r3, #0]
 800bc5a:	5843      	ldr	r3, [r0, r1]
 800bc5c:	6811      	ldr	r1, [r2, #0]
 800bc5e:	6852      	ldr	r2, [r2, #4]
 800bc60:	0028      	movs	r0, r5
 800bc62:	f009 f8cd 	bl	8014e00 <SysTimeSub>
 800bc66:	0035      	movs	r5, r6
 800bc68:	197c      	adds	r4, r7, r5
 800bc6a:	236c      	movs	r3, #108	@ 0x6c
 800bc6c:	18fb      	adds	r3, r7, r3
 800bc6e:	260c      	movs	r6, #12
 800bc70:	19ba      	adds	r2, r7, r6
 800bc72:	4669      	mov	r1, sp
 800bc74:	6858      	ldr	r0, [r3, #4]
 800bc76:	6008      	str	r0, [r1, #0]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	6811      	ldr	r1, [r2, #0]
 800bc7c:	6852      	ldr	r2, [r2, #4]
 800bc7e:	0020      	movs	r0, r4
 800bc80:	f009 f86c 	bl	8014d5c <SysTimeAdd>

                // Apply the new system time.
                SysTimeSet( sysTime );
 800bc84:	197b      	adds	r3, r7, r5
 800bc86:	6818      	ldr	r0, [r3, #0]
 800bc88:	6859      	ldr	r1, [r3, #4]
 800bc8a:	f009 f907 	bl	8014e9c <SysTimeSet>
                LoRaMacClassBDeviceTimeAns( );
 800bc8e:	f003 fad7 	bl	800f240 <LoRaMacClassBDeviceTimeAns>
                MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800bc92:	4a82      	ldr	r2, [pc, #520]	@ (800be9c <ProcessMacCommands+0xac8>)
 800bc94:	2387      	movs	r3, #135	@ 0x87
 800bc96:	00db      	lsls	r3, r3, #3
 800bc98:	2101      	movs	r1, #1
 800bc9a:	54d1      	strb	r1, [r2, r3]
                break;
 800bc9c:	e0ef      	b.n	800be7e <ProcessMacCommands+0xaaa>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                // According to the specification, it is not allowed to process this answer in
                // a ping or multicast slot
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800bc9e:	4a7f      	ldr	r2, [pc, #508]	@ (800be9c <ProcessMacCommands+0xac8>)
 800bca0:	2390      	movs	r3, #144	@ 0x90
 800bca2:	00db      	lsls	r3, r3, #3
 800bca4:	5cd3      	ldrb	r3, [r2, r3]
 800bca6:	2b04      	cmp	r3, #4
 800bca8:	d100      	bne.n	800bcac <ProcessMacCommands+0x8d8>
 800bcaa:	e0e7      	b.n	800be7c <ProcessMacCommands+0xaa8>
 800bcac:	4a7b      	ldr	r2, [pc, #492]	@ (800be9c <ProcessMacCommands+0xac8>)
 800bcae:	2390      	movs	r3, #144	@ 0x90
 800bcb0:	00db      	lsls	r3, r3, #3
 800bcb2:	5cd3      	ldrb	r3, [r2, r3]
 800bcb4:	2b05      	cmp	r3, #5
 800bcb6:	d100      	bne.n	800bcba <ProcessMacCommands+0x8e6>
 800bcb8:	e0e0      	b.n	800be7c <ProcessMacCommands+0xaa8>
                {
                    LoRaMacClassBPingSlotInfoAns( );
 800bcba:	f003 faa2 	bl	800f202 <LoRaMacClassBPingSlotInfoAns>
                }
                break;
 800bcbe:	e0dd      	b.n	800be7c <ProcessMacCommands+0xaa8>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800bcc0:	207c      	movs	r0, #124	@ 0x7c
 800bcc2:	183b      	adds	r3, r7, r0
 800bcc4:	2203      	movs	r2, #3
 800bcc6:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800bccc:	1cfb      	adds	r3, r7, #3
 800bcce:	781b      	ldrb	r3, [r3, #0]
 800bcd0:	1cfa      	adds	r2, r7, #3
 800bcd2:	1c59      	adds	r1, r3, #1
 800bcd4:	7011      	strb	r1, [r2, #0]
 800bcd6:	001a      	movs	r2, r3
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	189b      	adds	r3, r3, r2
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800bce0:	1cfb      	adds	r3, r7, #3
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	1cfa      	adds	r2, r7, #3
 800bce6:	1c59      	adds	r1, r3, #1
 800bce8:	7011      	strb	r1, [r2, #0]
 800bcea:	001a      	movs	r2, r3
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	189b      	adds	r3, r3, r2
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	021b      	lsls	r3, r3, #8
 800bcf4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800bcfa:	1cfb      	adds	r3, r7, #3
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	1cfa      	adds	r2, r7, #3
 800bd00:	1c59      	adds	r1, r3, #1
 800bd02:	7011      	strb	r1, [r2, #0]
 800bd04:	001a      	movs	r2, r3
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	189b      	adds	r3, r3, r2
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	041b      	lsls	r3, r3, #16
 800bd0e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800bd10:	4313      	orrs	r3, r2
 800bd12:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 800bd14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bd16:	2264      	movs	r2, #100	@ 0x64
 800bd18:	4353      	muls	r3, r2
 800bd1a:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 800bd1c:	1cfb      	adds	r3, r7, #3
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	1cfa      	adds	r2, r7, #3
 800bd22:	1c59      	adds	r1, r3, #1
 800bd24:	7011      	strb	r1, [r2, #0]
 800bd26:	001a      	movs	r2, r3
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	189b      	adds	r3, r3, r2
 800bd2c:	781a      	ldrb	r2, [r3, #0]
 800bd2e:	2677      	movs	r6, #119	@ 0x77
 800bd30:	19bb      	adds	r3, r7, r6
 800bd32:	210f      	movs	r1, #15
 800bd34:	400a      	ands	r2, r1
 800bd36:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800bd38:	0005      	movs	r5, r0
 800bd3a:	183c      	adds	r4, r7, r0
 800bd3c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800bd3e:	19bb      	adds	r3, r7, r6
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	0011      	movs	r1, r2
 800bd44:	0018      	movs	r0, r3
 800bd46:	f003 fa61 	bl	800f20c <LoRaMacClassBPingSlotChannelReq>
 800bd4a:	0003      	movs	r3, r0
 800bd4c:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 800bd4e:	2168      	movs	r1, #104	@ 0x68
 800bd50:	187b      	adds	r3, r7, r1
 800bd52:	197a      	adds	r2, r7, r5
 800bd54:	7812      	ldrb	r2, [r2, #0]
 800bd56:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800bd58:	187b      	adds	r3, r7, r1
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	0019      	movs	r1, r3
 800bd5e:	2011      	movs	r0, #17
 800bd60:	f003 fbfe 	bl	800f560 <LoRaMacCommandsAddCmd>
                break;
 800bd64:	e08b      	b.n	800be7e <ProcessMacCommands+0xaaa>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                uint16_t beaconTimingDelay = 0;
 800bd66:	207e      	movs	r0, #126	@ 0x7e
 800bd68:	183b      	adds	r3, r7, r0
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	801a      	strh	r2, [r3, #0]
                uint8_t beaconTimingChannel = 0;
 800bd6e:	247d      	movs	r4, #125	@ 0x7d
 800bd70:	193b      	adds	r3, r7, r4
 800bd72:	2200      	movs	r2, #0
 800bd74:	701a      	strb	r2, [r3, #0]

                beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800bd76:	1cfb      	adds	r3, r7, #3
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	1cfa      	adds	r2, r7, #3
 800bd7c:	1c59      	adds	r1, r3, #1
 800bd7e:	7011      	strb	r1, [r2, #0]
 800bd80:	001a      	movs	r2, r3
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	189b      	adds	r3, r3, r2
 800bd86:	781a      	ldrb	r2, [r3, #0]
 800bd88:	183b      	adds	r3, r7, r0
 800bd8a:	801a      	strh	r2, [r3, #0]
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800bd8c:	1cfb      	adds	r3, r7, #3
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	1cfa      	adds	r2, r7, #3
 800bd92:	1c59      	adds	r1, r3, #1
 800bd94:	7011      	strb	r1, [r2, #0]
 800bd96:	001a      	movs	r2, r3
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	189b      	adds	r3, r3, r2
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	021b      	lsls	r3, r3, #8
 800bda0:	b21a      	sxth	r2, r3
 800bda2:	183b      	adds	r3, r7, r0
 800bda4:	2100      	movs	r1, #0
 800bda6:	5e5b      	ldrsh	r3, [r3, r1]
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	b21a      	sxth	r2, r3
 800bdac:	183b      	adds	r3, r7, r0
 800bdae:	801a      	strh	r2, [r3, #0]
                beaconTimingChannel = payload[macIndex++];
 800bdb0:	1cfb      	adds	r3, r7, #3
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	1cfa      	adds	r2, r7, #3
 800bdb6:	1c59      	adds	r1, r3, #1
 800bdb8:	7011      	strb	r1, [r2, #0]
 800bdba:	001a      	movs	r2, r3
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	189a      	adds	r2, r3, r2
 800bdc0:	193b      	adds	r3, r7, r4
 800bdc2:	7812      	ldrb	r2, [r2, #0]
 800bdc4:	701a      	strb	r2, [r3, #0]

                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800bdc6:	4b36      	ldr	r3, [pc, #216]	@ (800bea0 <ProcessMacCommands+0xacc>)
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	193b      	adds	r3, r7, r4
 800bdcc:	7819      	ldrb	r1, [r3, #0]
 800bdce:	183b      	adds	r3, r7, r0
 800bdd0:	881b      	ldrh	r3, [r3, #0]
 800bdd2:	0018      	movs	r0, r3
 800bdd4:	f003 fa26 	bl	800f224 <LoRaMacClassBBeaconTimingAns>
                break;
 800bdd8:	e051      	b.n	800be7e <ProcessMacCommands+0xaaa>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800bdda:	2300      	movs	r3, #0
 800bddc:	2080      	movs	r0, #128	@ 0x80
 800bdde:	183a      	adds	r2, r7, r0
 800bde0:	6013      	str	r3, [r2, #0]

                    frequency = ( uint32_t )payload[macIndex++];
 800bde2:	1cfb      	adds	r3, r7, #3
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	1cfa      	adds	r2, r7, #3
 800bde8:	1c59      	adds	r1, r3, #1
 800bdea:	7011      	strb	r1, [r2, #0]
 800bdec:	001a      	movs	r2, r3
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	189b      	adds	r3, r3, r2
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	183a      	adds	r2, r7, r0
 800bdf6:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800bdf8:	1cfb      	adds	r3, r7, #3
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	1cfa      	adds	r2, r7, #3
 800bdfe:	1c59      	adds	r1, r3, #1
 800be00:	7011      	strb	r1, [r2, #0]
 800be02:	001a      	movs	r2, r3
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	189b      	adds	r3, r3, r2
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	021b      	lsls	r3, r3, #8
 800be0c:	183a      	adds	r2, r7, r0
 800be0e:	6812      	ldr	r2, [r2, #0]
 800be10:	4313      	orrs	r3, r2
 800be12:	183a      	adds	r2, r7, r0
 800be14:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800be16:	1cfb      	adds	r3, r7, #3
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	1cfa      	adds	r2, r7, #3
 800be1c:	1c59      	adds	r1, r3, #1
 800be1e:	7011      	strb	r1, [r2, #0]
 800be20:	001a      	movs	r2, r3
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	189b      	adds	r3, r3, r2
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	041b      	lsls	r3, r3, #16
 800be2a:	183a      	adds	r2, r7, r0
 800be2c:	6812      	ldr	r2, [r2, #0]
 800be2e:	4313      	orrs	r3, r2
 800be30:	183a      	adds	r2, r7, r0
 800be32:	6013      	str	r3, [r2, #0]
                    frequency *= 100;
 800be34:	183b      	adds	r3, r7, r0
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2264      	movs	r2, #100	@ 0x64
 800be3a:	4353      	muls	r3, r2
 800be3c:	183a      	adds	r2, r7, r0
 800be3e:	6013      	str	r3, [r2, #0]

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800be40:	183b      	adds	r3, r7, r0
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	0018      	movs	r0, r3
 800be46:	f003 fa00 	bl	800f24a <LoRaMacClassBBeaconFreqReq>
 800be4a:	1e03      	subs	r3, r0, #0
 800be4c:	d004      	beq.n	800be58 <ProcessMacCommands+0xa84>
                    {
                        macCmdPayload[0] = 1;
 800be4e:	2368      	movs	r3, #104	@ 0x68
 800be50:	18fb      	adds	r3, r7, r3
 800be52:	2201      	movs	r2, #1
 800be54:	701a      	strb	r2, [r3, #0]
 800be56:	e003      	b.n	800be60 <ProcessMacCommands+0xa8c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800be58:	2368      	movs	r3, #104	@ 0x68
 800be5a:	18fb      	adds	r3, r7, r3
 800be5c:	2200      	movs	r2, #0
 800be5e:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800be60:	2368      	movs	r3, #104	@ 0x68
 800be62:	18fb      	adds	r3, r7, r3
 800be64:	2201      	movs	r2, #1
 800be66:	0019      	movs	r1, r3
 800be68:	2013      	movs	r0, #19
 800be6a:	f003 fb79 	bl	800f560 <LoRaMacCommandsAddCmd>
                }
                break;
 800be6e:	e006      	b.n	800be7e <ProcessMacCommands+0xaaa>
                break;
 800be70:	46c0      	nop			@ (mov r8, r8)
 800be72:	e004      	b.n	800be7e <ProcessMacCommands+0xaaa>
                break;
 800be74:	46c0      	nop			@ (mov r8, r8)
 800be76:	e002      	b.n	800be7e <ProcessMacCommands+0xaaa>
                break;
 800be78:	46c0      	nop			@ (mov r8, r8)
 800be7a:	e000      	b.n	800be7e <ProcessMacCommands+0xaaa>
                break;
 800be7c:	46c0      	nop			@ (mov r8, r8)
    while( macIndex < commandsSize )
 800be7e:	1cfa      	adds	r2, r7, #3
 800be80:	1cbb      	adds	r3, r7, #2
 800be82:	7812      	ldrb	r2, [r2, #0]
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	429a      	cmp	r2, r3
 800be88:	d201      	bcs.n	800be8e <ProcessMacCommands+0xaba>
 800be8a:	f7ff fac1 	bl	800b410 <ProcessMacCommands+0x3c>
 800be8e:	e000      	b.n	800be92 <ProcessMacCommands+0xabe>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800be90:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 800be92:	46bd      	mov	sp, r7
 800be94:	b023      	add	sp, #140	@ 0x8c
 800be96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be98:	12d53d80 	.word	0x12d53d80
 800be9c:	20000964 	.word	0x20000964
 800bea0:	20001008 	.word	0x20001008

0800bea4 <Send>:

LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800bea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bea6:	b08f      	sub	sp, #60	@ 0x3c
 800bea8:	af02      	add	r7, sp, #8
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	0008      	movs	r0, r1
 800beae:	607a      	str	r2, [r7, #4]
 800beb0:	0019      	movs	r1, r3
 800beb2:	230b      	movs	r3, #11
 800beb4:	18fb      	adds	r3, r7, r3
 800beb6:	1c02      	adds	r2, r0, #0
 800beb8:	701a      	strb	r2, [r3, #0]
 800beba:	2308      	movs	r3, #8
 800bebc:	18fb      	adds	r3, r7, r3
 800bebe:	1c0a      	adds	r2, r1, #0
 800bec0:	801a      	strh	r2, [r3, #0]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bec2:	232f      	movs	r3, #47	@ 0x2f
 800bec4:	18fb      	adds	r3, r7, r3
 800bec6:	2203      	movs	r2, #3
 800bec8:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800beca:	4b8e      	ldr	r3, [pc, #568]	@ (800c104 <Send+0x260>)
 800becc:	4a8e      	ldr	r2, [pc, #568]	@ (800c108 <Send+0x264>)
 800bece:	589a      	ldr	r2, [r3, r2]
 800bed0:	232e      	movs	r3, #46	@ 0x2e
 800bed2:	18fb      	adds	r3, r7, r3
 800bed4:	21f9      	movs	r1, #249	@ 0xf9
 800bed6:	5c52      	ldrb	r2, [r2, r1]
 800bed8:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800beda:	4b8a      	ldr	r3, [pc, #552]	@ (800c104 <Send+0x260>)
 800bedc:	4a8a      	ldr	r2, [pc, #552]	@ (800c108 <Send+0x264>)
 800bede:	589a      	ldr	r2, [r3, r2]
 800bee0:	232d      	movs	r3, #45	@ 0x2d
 800bee2:	18fb      	adds	r3, r7, r3
 800bee4:	21f8      	movs	r1, #248	@ 0xf8
 800bee6:	5c52      	ldrb	r2, [r2, r1]
 800bee8:	701a      	strb	r2, [r3, #0]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800beea:	4b86      	ldr	r3, [pc, #536]	@ (800c104 <Send+0x260>)
 800beec:	4a86      	ldr	r2, [pc, #536]	@ (800c108 <Send+0x264>)
 800beee:	589b      	ldr	r3, [r3, r2]
 800bef0:	22f4      	movs	r2, #244	@ 0xf4
 800bef2:	589b      	ldr	r3, [r3, r2]
 800bef4:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800bef6:	4b83      	ldr	r3, [pc, #524]	@ (800c104 <Send+0x260>)
 800bef8:	4a83      	ldr	r2, [pc, #524]	@ (800c108 <Send+0x264>)
 800befa:	589a      	ldr	r2, [r3, r2]
 800befc:	23ea      	movs	r3, #234	@ 0xea
 800befe:	005b      	lsls	r3, r3, #1
 800bf00:	5cd3      	ldrb	r3, [r2, r3]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d101      	bne.n	800bf0a <Send+0x66>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800bf06:	2307      	movs	r3, #7
 800bf08:	e0f7      	b.n	800c0fa <Send+0x256>
    }
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 800bf0a:	4b7e      	ldr	r3, [pc, #504]	@ (800c104 <Send+0x260>)
 800bf0c:	4a7e      	ldr	r2, [pc, #504]	@ (800c108 <Send+0x264>)
 800bf0e:	589a      	ldr	r2, [r3, r2]
 800bf10:	239e      	movs	r3, #158	@ 0x9e
 800bf12:	005b      	lsls	r3, r3, #1
 800bf14:	5cd3      	ldrb	r3, [r2, r3]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d106      	bne.n	800bf28 <Send+0x84>
    {
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 800bf1a:	4b7a      	ldr	r3, [pc, #488]	@ (800c104 <Send+0x260>)
 800bf1c:	4a7a      	ldr	r2, [pc, #488]	@ (800c108 <Send+0x264>)
 800bf1e:	589a      	ldr	r2, [r3, r2]
 800bf20:	23e4      	movs	r3, #228	@ 0xe4
 800bf22:	005b      	lsls	r3, r3, #1
 800bf24:	2100      	movs	r1, #0
 800bf26:	50d1      	str	r1, [r2, r3]
    }

    fCtrl.Value = 0;
 800bf28:	242c      	movs	r4, #44	@ 0x2c
 800bf2a:	193b      	adds	r3, r7, r4
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.FOptsLen      = 0;
 800bf30:	193b      	adds	r3, r7, r4
 800bf32:	781a      	ldrb	r2, [r3, #0]
 800bf34:	210f      	movs	r1, #15
 800bf36:	438a      	bics	r2, r1
 800bf38:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 800bf3a:	4b72      	ldr	r3, [pc, #456]	@ (800c104 <Send+0x260>)
 800bf3c:	4a72      	ldr	r2, [pc, #456]	@ (800c108 <Send+0x264>)
 800bf3e:	589b      	ldr	r3, [r3, r2]
 800bf40:	22f2      	movs	r2, #242	@ 0xf2
 800bf42:	5c9a      	ldrb	r2, [r3, r2]
 800bf44:	193b      	adds	r3, r7, r4
 800bf46:	01d0      	lsls	r0, r2, #7
 800bf48:	781a      	ldrb	r2, [r3, #0]
 800bf4a:	217f      	movs	r1, #127	@ 0x7f
 800bf4c:	400a      	ands	r2, r1
 800bf4e:	1c11      	adds	r1, r2, #0
 800bf50:	1c02      	adds	r2, r0, #0
 800bf52:	430a      	orrs	r2, r1
 800bf54:	701a      	strb	r2, [r3, #0]

    // Check class b
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800bf56:	4b6b      	ldr	r3, [pc, #428]	@ (800c104 <Send+0x260>)
 800bf58:	4a6b      	ldr	r2, [pc, #428]	@ (800c108 <Send+0x264>)
 800bf5a:	589b      	ldr	r3, [r3, r2]
 800bf5c:	22f0      	movs	r2, #240	@ 0xf0
 800bf5e:	5c9b      	ldrb	r3, [r3, r2]
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d105      	bne.n	800bf70 <Send+0xcc>
    {
        fCtrl.Bits.FPending      = 1;
 800bf64:	193b      	adds	r3, r7, r4
 800bf66:	781a      	ldrb	r2, [r3, #0]
 800bf68:	2110      	movs	r1, #16
 800bf6a:	430a      	orrs	r2, r1
 800bf6c:	701a      	strb	r2, [r3, #0]
 800bf6e:	e005      	b.n	800bf7c <Send+0xd8>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800bf70:	232c      	movs	r3, #44	@ 0x2c
 800bf72:	18fb      	adds	r3, r7, r3
 800bf74:	781a      	ldrb	r2, [r3, #0]
 800bf76:	2110      	movs	r1, #16
 800bf78:	438a      	bics	r2, r1
 800bf7a:	701a      	strb	r2, [r3, #0]
    }

    // Check server ack
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 800bf7c:	4b61      	ldr	r3, [pc, #388]	@ (800c104 <Send+0x260>)
 800bf7e:	4a62      	ldr	r2, [pc, #392]	@ (800c108 <Send+0x264>)
 800bf80:	589a      	ldr	r2, [r3, r2]
 800bf82:	23e0      	movs	r3, #224	@ 0xe0
 800bf84:	005b      	lsls	r3, r3, #1
 800bf86:	5cd3      	ldrb	r3, [r2, r3]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d005      	beq.n	800bf98 <Send+0xf4>
    {
        fCtrl.Bits.Ack = 1;
 800bf8c:	232c      	movs	r3, #44	@ 0x2c
 800bf8e:	18fb      	adds	r3, r7, r3
 800bf90:	781a      	ldrb	r2, [r3, #0]
 800bf92:	2120      	movs	r1, #32
 800bf94:	430a      	orrs	r2, r1
 800bf96:	701a      	strb	r2, [r3, #0]
    }

    // ADR next request
    adrNext.Version = MacCtx.NvmCtx->Version;
 800bf98:	4b5a      	ldr	r3, [pc, #360]	@ (800c104 <Send+0x260>)
 800bf9a:	4a5b      	ldr	r2, [pc, #364]	@ (800c108 <Send+0x264>)
 800bf9c:	5899      	ldr	r1, [r3, r2]
 800bf9e:	2014      	movs	r0, #20
 800bfa0:	183b      	adds	r3, r7, r0
 800bfa2:	22e8      	movs	r2, #232	@ 0xe8
 800bfa4:	0052      	lsls	r2, r2, #1
 800bfa6:	588a      	ldr	r2, [r1, r2]
 800bfa8:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = true;
 800bfaa:	0001      	movs	r1, r0
 800bfac:	187b      	adds	r3, r7, r1
 800bfae:	2201      	movs	r2, #1
 800bfb0:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800bfb2:	242c      	movs	r4, #44	@ 0x2c
 800bfb4:	193b      	adds	r3, r7, r4
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	061b      	lsls	r3, r3, #24
 800bfba:	0fdb      	lsrs	r3, r3, #31
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	1e5a      	subs	r2, r3, #1
 800bfc0:	4193      	sbcs	r3, r2
 800bfc2:	b2da      	uxtb	r2, r3
 800bfc4:	187b      	adds	r3, r7, r1
 800bfc6:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800bfc8:	4b4e      	ldr	r3, [pc, #312]	@ (800c104 <Send+0x260>)
 800bfca:	4a4f      	ldr	r2, [pc, #316]	@ (800c108 <Send+0x264>)
 800bfcc:	589b      	ldr	r3, [r3, r2]
 800bfce:	22f4      	movs	r2, #244	@ 0xf4
 800bfd0:	589a      	ldr	r2, [r3, r2]
 800bfd2:	0008      	movs	r0, r1
 800bfd4:	183b      	adds	r3, r7, r0
 800bfd6:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800bfd8:	4a4a      	ldr	r2, [pc, #296]	@ (800c104 <Send+0x260>)
 800bfda:	23fd      	movs	r3, #253	@ 0xfd
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	5ad2      	ldrh	r2, [r2, r3]
 800bfe0:	183b      	adds	r3, r7, r0
 800bfe2:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800bfe4:	4b47      	ldr	r3, [pc, #284]	@ (800c104 <Send+0x260>)
 800bfe6:	4a49      	ldr	r2, [pc, #292]	@ (800c10c <Send+0x268>)
 800bfe8:	5a9a      	ldrh	r2, [r3, r2]
 800bfea:	183b      	adds	r3, r7, r0
 800bfec:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800bfee:	4b45      	ldr	r3, [pc, #276]	@ (800c104 <Send+0x260>)
 800bff0:	4a45      	ldr	r2, [pc, #276]	@ (800c108 <Send+0x264>)
 800bff2:	589b      	ldr	r3, [r3, r2]
 800bff4:	22f9      	movs	r2, #249	@ 0xf9
 800bff6:	569a      	ldrsb	r2, [r3, r2]
 800bff8:	183b      	adds	r3, r7, r0
 800bffa:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800bffc:	4b41      	ldr	r3, [pc, #260]	@ (800c104 <Send+0x260>)
 800bffe:	4a42      	ldr	r2, [pc, #264]	@ (800c108 <Send+0x264>)
 800c000:	589b      	ldr	r3, [r3, r2]
 800c002:	22f8      	movs	r2, #248	@ 0xf8
 800c004:	569a      	ldrsb	r2, [r3, r2]
 800c006:	183b      	adds	r3, r7, r0
 800c008:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800c00a:	4b3e      	ldr	r3, [pc, #248]	@ (800c104 <Send+0x260>)
 800c00c:	4a3e      	ldr	r2, [pc, #248]	@ (800c108 <Send+0x264>)
 800c00e:	589a      	ldr	r2, [r3, r2]
 800c010:	2396      	movs	r3, #150	@ 0x96
 800c012:	005b      	lsls	r3, r3, #1
 800c014:	5cd2      	ldrb	r2, [r2, r3]
 800c016:	183b      	adds	r3, r7, r0
 800c018:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 800c01a:	4b3a      	ldr	r3, [pc, #232]	@ (800c104 <Send+0x260>)
 800c01c:	4a3a      	ldr	r2, [pc, #232]	@ (800c108 <Send+0x264>)
 800c01e:	589b      	ldr	r3, [r3, r2]
 800c020:	781a      	ldrb	r2, [r3, #0]
 800c022:	183b      	adds	r3, r7, r0
 800c024:	74da      	strb	r2, [r3, #19]

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800c026:	4b37      	ldr	r3, [pc, #220]	@ (800c104 <Send+0x260>)
 800c028:	4a37      	ldr	r2, [pc, #220]	@ (800c108 <Send+0x264>)
 800c02a:	589b      	ldr	r3, [r3, r2]
 800c02c:	33f9      	adds	r3, #249	@ 0xf9
 800c02e:	0019      	movs	r1, r3
                                               &MacCtx.NvmCtx->MacParams.ChannelsTxPower, &adrAckCounter );
 800c030:	4b34      	ldr	r3, [pc, #208]	@ (800c104 <Send+0x260>)
 800c032:	4a35      	ldr	r2, [pc, #212]	@ (800c108 <Send+0x264>)
 800c034:	589b      	ldr	r3, [r3, r2]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800c036:	33f8      	adds	r3, #248	@ 0xf8
 800c038:	001a      	movs	r2, r3
 800c03a:	2328      	movs	r3, #40	@ 0x28
 800c03c:	18fb      	adds	r3, r7, r3
 800c03e:	1838      	adds	r0, r7, r0
 800c040:	f003 f817 	bl	800f072 <LoRaMacAdrCalcNext>
 800c044:	0003      	movs	r3, r0
 800c046:	0019      	movs	r1, r3
 800c048:	0026      	movs	r6, r4
 800c04a:	193b      	adds	r3, r7, r4
 800c04c:	2201      	movs	r2, #1
 800c04e:	400a      	ands	r2, r1
 800c050:	0190      	lsls	r0, r2, #6
 800c052:	781a      	ldrb	r2, [r3, #0]
 800c054:	2140      	movs	r1, #64	@ 0x40
 800c056:	438a      	bics	r2, r1
 800c058:	1c11      	adds	r1, r2, #0
 800c05a:	1c02      	adds	r2, r0, #0
 800c05c:	430a      	orrs	r2, r1
 800c05e:	701a      	strb	r2, [r3, #0]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800c060:	222f      	movs	r2, #47	@ 0x2f
 800c062:	18bc      	adds	r4, r7, r2
 800c064:	687d      	ldr	r5, [r7, #4]
 800c066:	230b      	movs	r3, #11
 800c068:	18fb      	adds	r3, r7, r3
 800c06a:	781a      	ldrb	r2, [r3, #0]
 800c06c:	19b9      	adds	r1, r7, r6
 800c06e:	68f8      	ldr	r0, [r7, #12]
 800c070:	2308      	movs	r3, #8
 800c072:	18fb      	adds	r3, r7, r3
 800c074:	881b      	ldrh	r3, [r3, #0]
 800c076:	9300      	str	r3, [sp, #0]
 800c078:	002b      	movs	r3, r5
 800c07a:	f000 fc7f 	bl	800c97c <PrepareFrame>
 800c07e:	0003      	movs	r3, r0
 800c080:	7023      	strb	r3, [r4, #0]

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800c082:	222f      	movs	r2, #47	@ 0x2f
 800c084:	18bb      	adds	r3, r7, r2
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d003      	beq.n	800c094 <Send+0x1f0>
 800c08c:	18bb      	adds	r3, r7, r2
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	2b0a      	cmp	r3, #10
 800c092:	d106      	bne.n	800c0a2 <Send+0x1fe>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( false );
 800c094:	232f      	movs	r3, #47	@ 0x2f
 800c096:	18fc      	adds	r4, r7, r3
 800c098:	2000      	movs	r0, #0
 800c09a:	f000 f89d 	bl	800c1d8 <ScheduleTx>
 800c09e:	0003      	movs	r3, r0
 800c0a0:	7023      	strb	r3, [r4, #0]
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800c0a2:	232f      	movs	r3, #47	@ 0x2f
 800c0a4:	18fb      	adds	r3, r7, r3
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d010      	beq.n	800c0ce <Send+0x22a>
    {
        // Bad case - restore
        // Store local variables
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 800c0ac:	4b15      	ldr	r3, [pc, #84]	@ (800c104 <Send+0x260>)
 800c0ae:	4a16      	ldr	r2, [pc, #88]	@ (800c108 <Send+0x264>)
 800c0b0:	589b      	ldr	r3, [r3, r2]
 800c0b2:	222e      	movs	r2, #46	@ 0x2e
 800c0b4:	18ba      	adds	r2, r7, r2
 800c0b6:	21f9      	movs	r1, #249	@ 0xf9
 800c0b8:	7812      	ldrb	r2, [r2, #0]
 800c0ba:	545a      	strb	r2, [r3, r1]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 800c0bc:	4b11      	ldr	r3, [pc, #68]	@ (800c104 <Send+0x260>)
 800c0be:	4a12      	ldr	r2, [pc, #72]	@ (800c108 <Send+0x264>)
 800c0c0:	589b      	ldr	r3, [r3, r2]
 800c0c2:	222d      	movs	r2, #45	@ 0x2d
 800c0c4:	18ba      	adds	r2, r7, r2
 800c0c6:	21f8      	movs	r1, #248	@ 0xf8
 800c0c8:	7812      	ldrb	r2, [r2, #0]
 800c0ca:	545a      	strb	r2, [r3, r1]
 800c0cc:	e012      	b.n	800c0f4 <Send+0x250>
    }
    else
    {
        // Good case
        MacCtx.NvmCtx->SrvAckRequested = false;
 800c0ce:	4b0d      	ldr	r3, [pc, #52]	@ (800c104 <Send+0x260>)
 800c0d0:	4a0d      	ldr	r2, [pc, #52]	@ (800c108 <Send+0x264>)
 800c0d2:	589a      	ldr	r2, [r3, r2]
 800c0d4:	23e0      	movs	r3, #224	@ 0xe0
 800c0d6:	005b      	lsls	r3, r3, #1
 800c0d8:	2100      	movs	r1, #0
 800c0da:	54d1      	strb	r1, [r2, r3]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 800c0dc:	4b09      	ldr	r3, [pc, #36]	@ (800c104 <Send+0x260>)
 800c0de:	4a0a      	ldr	r2, [pc, #40]	@ (800c108 <Send+0x264>)
 800c0e0:	589b      	ldr	r3, [r3, r2]
 800c0e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0e4:	21f4      	movs	r1, #244	@ 0xf4
 800c0e6:	505a      	str	r2, [r3, r1]
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800c0e8:	f003 fac4 	bl	800f674 <LoRaMacCommandsRemoveNoneStickyCmds>
 800c0ec:	1e03      	subs	r3, r0, #0
 800c0ee:	d001      	beq.n	800c0f4 <Send+0x250>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c0f0:	2313      	movs	r3, #19
 800c0f2:	e002      	b.n	800c0fa <Send+0x256>
        }
    }
    return status;
 800c0f4:	232f      	movs	r3, #47	@ 0x2f
 800c0f6:	18fb      	adds	r3, r7, r3
 800c0f8:	781b      	ldrb	r3, [r3, #0]
}
 800c0fa:	0018      	movs	r0, r3
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	b00d      	add	sp, #52	@ 0x34
 800c100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c102:	46c0      	nop			@ (mov r8, r8)
 800c104:	20000964 	.word	0x20000964
 800c108:	00000484 	.word	0x00000484
 800c10c:	000003f6 	.word	0x000003f6

0800c110 <SendReJoinReq>:

LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800c110:	b5b0      	push	{r4, r5, r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	0002      	movs	r2, r0
 800c118:	1dfb      	adds	r3, r7, #7
 800c11a:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c11c:	230e      	movs	r3, #14
 800c11e:	18fb      	adds	r3, r7, r3
 800c120:	2200      	movs	r2, #0
 800c122:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800c124:	240c      	movs	r4, #12
 800c126:	193b      	adds	r3, r7, r4
 800c128:	2200      	movs	r2, #0
 800c12a:	701a      	strb	r2, [r3, #0]
    bool allowDelayedTx = true;
 800c12c:	250f      	movs	r5, #15
 800c12e:	197b      	adds	r3, r7, r5
 800c130:	2201      	movs	r2, #1
 800c132:	701a      	strb	r2, [r3, #0]

    // Setup join/rejoin message
    switch( joinReqType )
 800c134:	1dfb      	adds	r3, r7, #7
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	2bff      	cmp	r3, #255	@ 0xff
 800c13a:	d130      	bne.n	800c19e <SendReJoinReq+0x8e>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800c13c:	2000      	movs	r0, #0
 800c13e:	f7fe ff77 	bl	800b030 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800c142:	4a21      	ldr	r2, [pc, #132]	@ (800c1c8 <SendReJoinReq+0xb8>)
 800c144:	2382      	movs	r3, #130	@ 0x82
 800c146:	005b      	lsls	r3, r3, #1
 800c148:	2100      	movs	r1, #0
 800c14a:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800c14c:	4a1e      	ldr	r2, [pc, #120]	@ (800c1c8 <SendReJoinReq+0xb8>)
 800c14e:	2384      	movs	r3, #132	@ 0x84
 800c150:	005b      	lsls	r3, r3, #1
 800c152:	491e      	ldr	r1, [pc, #120]	@ (800c1cc <SendReJoinReq+0xbc>)
 800c154:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800c156:	4a1c      	ldr	r2, [pc, #112]	@ (800c1c8 <SendReJoinReq+0xb8>)
 800c158:	2386      	movs	r3, #134	@ 0x86
 800c15a:	005b      	lsls	r3, r3, #1
 800c15c:	21ff      	movs	r1, #255	@ 0xff
 800c15e:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800c160:	193b      	adds	r3, r7, r4
 800c162:	781a      	ldrb	r2, [r3, #0]
 800c164:	211f      	movs	r1, #31
 800c166:	400a      	ands	r2, r1
 800c168:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800c16a:	193b      	adds	r3, r7, r4
 800c16c:	7819      	ldrb	r1, [r3, #0]
 800c16e:	4a16      	ldr	r2, [pc, #88]	@ (800c1c8 <SendReJoinReq+0xb8>)
 800c170:	230e      	movs	r3, #14
 800c172:	33ff      	adds	r3, #255	@ 0xff
 800c174:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c176:	f7fd fad3 	bl	8009720 <SecureElementGetJoinEui>
 800c17a:	0001      	movs	r1, r0
 800c17c:	4b14      	ldr	r3, [pc, #80]	@ (800c1d0 <SendReJoinReq+0xc0>)
 800c17e:	2208      	movs	r2, #8
 800c180:	0018      	movs	r0, r3
 800c182:	f009 fa89 	bl	8015698 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800c186:	f7fd faa7 	bl	80096d8 <SecureElementGetDevEui>
 800c18a:	0001      	movs	r1, r0
 800c18c:	4b11      	ldr	r3, [pc, #68]	@ (800c1d4 <SendReJoinReq+0xc4>)
 800c18e:	2208      	movs	r2, #8
 800c190:	0018      	movs	r0, r3
 800c192:	f009 fa81 	bl	8015698 <memcpy1>

            allowDelayedTx = false;
 800c196:	197b      	adds	r3, r7, r5
 800c198:	2200      	movs	r2, #0
 800c19a:	701a      	strb	r2, [r3, #0]

            break;
 800c19c:	e004      	b.n	800c1a8 <SendReJoinReq+0x98>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800c19e:	230e      	movs	r3, #14
 800c1a0:	18fb      	adds	r3, r7, r3
 800c1a2:	2202      	movs	r2, #2
 800c1a4:	701a      	strb	r2, [r3, #0]
            break;
 800c1a6:	46c0      	nop			@ (mov r8, r8)
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800c1a8:	250e      	movs	r5, #14
 800c1aa:	197c      	adds	r4, r7, r5
 800c1ac:	230f      	movs	r3, #15
 800c1ae:	18fb      	adds	r3, r7, r3
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	0018      	movs	r0, r3
 800c1b4:	f000 f810 	bl	800c1d8 <ScheduleTx>
 800c1b8:	0003      	movs	r3, r0
 800c1ba:	7023      	strb	r3, [r4, #0]
    return status;
 800c1bc:	197b      	adds	r3, r7, r5
 800c1be:	781b      	ldrb	r3, [r3, #0]
}
 800c1c0:	0018      	movs	r0, r3
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	b004      	add	sp, #16
 800c1c6:	bdb0      	pop	{r4, r5, r7, pc}
 800c1c8:	20000964 	.word	0x20000964
 800c1cc:	20000966 	.word	0x20000966
 800c1d0:	20000a72 	.word	0x20000a72
 800c1d4:	20000a7a 	.word	0x20000a7a

0800c1d8 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800c1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1da:	b08b      	sub	sp, #44	@ 0x2c
 800c1dc:	af02      	add	r7, sp, #8
 800c1de:	0002      	movs	r2, r0
 800c1e0:	1dfb      	adds	r3, r7, #7
 800c1e2:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c1e4:	231f      	movs	r3, #31
 800c1e6:	18fb      	adds	r3, r7, r3
 800c1e8:	2203      	movs	r2, #3
 800c1ea:	701a      	strb	r2, [r3, #0]
    TimerTime_t dutyCycleTimeOff = 0;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	61bb      	str	r3, [r7, #24]
    NextChanParams_t nextChan;
    size_t macCmdsSize = 0;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	60bb      	str	r3, [r7, #8]

    // Update back-off
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 800c1f4:	4ba5      	ldr	r3, [pc, #660]	@ (800c48c <ScheduleTx+0x2b4>)
 800c1f6:	4aa6      	ldr	r2, [pc, #664]	@ (800c490 <ScheduleTx+0x2b8>)
 800c1f8:	589a      	ldr	r2, [r3, r2]
 800c1fa:	239f      	movs	r3, #159	@ 0x9f
 800c1fc:	005b      	lsls	r3, r3, #1
 800c1fe:	5cd3      	ldrb	r3, [r2, r3]
 800c200:	0018      	movs	r0, r3
 800c202:	f000 f9c1 	bl	800c588 <CalculateBackOff>

    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 800c206:	4ba1      	ldr	r3, [pc, #644]	@ (800c48c <ScheduleTx+0x2b4>)
 800c208:	4aa1      	ldr	r2, [pc, #644]	@ (800c490 <ScheduleTx+0x2b8>)
 800c20a:	589a      	ldr	r2, [r3, r2]
 800c20c:	23e4      	movs	r3, #228	@ 0xe4
 800c20e:	005b      	lsls	r3, r3, #1
 800c210:	58d2      	ldr	r2, [r2, r3]
 800c212:	210c      	movs	r1, #12
 800c214:	187b      	adds	r3, r7, r1
 800c216:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800c218:	4b9c      	ldr	r3, [pc, #624]	@ (800c48c <ScheduleTx+0x2b4>)
 800c21a:	4a9d      	ldr	r2, [pc, #628]	@ (800c490 <ScheduleTx+0x2b8>)
 800c21c:	589b      	ldr	r3, [r3, r2]
 800c21e:	22f9      	movs	r2, #249	@ 0xf9
 800c220:	569a      	ldrsb	r2, [r3, r2]
 800c222:	187b      	adds	r3, r7, r1
 800c224:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800c226:	4b99      	ldr	r3, [pc, #612]	@ (800c48c <ScheduleTx+0x2b4>)
 800c228:	4a99      	ldr	r2, [pc, #612]	@ (800c490 <ScheduleTx+0x2b8>)
 800c22a:	589a      	ldr	r2, [r3, r2]
 800c22c:	233e      	movs	r3, #62	@ 0x3e
 800c22e:	33ff      	adds	r3, #255	@ 0xff
 800c230:	5cd2      	ldrb	r2, [r2, r3]
 800c232:	187b      	adds	r3, r7, r1
 800c234:	729a      	strb	r2, [r3, #10]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800c236:	4b95      	ldr	r3, [pc, #596]	@ (800c48c <ScheduleTx+0x2b4>)
 800c238:	4a95      	ldr	r2, [pc, #596]	@ (800c490 <ScheduleTx+0x2b8>)
 800c23a:	589a      	ldr	r2, [r3, r2]
 800c23c:	23ea      	movs	r3, #234	@ 0xea
 800c23e:	005b      	lsls	r3, r3, #1
 800c240:	5cd3      	ldrb	r3, [r2, r3]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d103      	bne.n	800c24e <ScheduleTx+0x76>
    {
        nextChan.Joined = false;
 800c246:	187b      	adds	r3, r7, r1
 800c248:	2200      	movs	r2, #0
 800c24a:	725a      	strb	r2, [r3, #9]
 800c24c:	e003      	b.n	800c256 <ScheduleTx+0x7e>
    }
    else
    {
        nextChan.Joined = true;
 800c24e:	230c      	movs	r3, #12
 800c250:	18fb      	adds	r3, r7, r3
 800c252:	2201      	movs	r2, #1
 800c254:	725a      	strb	r2, [r3, #9]
    }
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 800c256:	4b8d      	ldr	r3, [pc, #564]	@ (800c48c <ScheduleTx+0x2b4>)
 800c258:	4a8d      	ldr	r2, [pc, #564]	@ (800c490 <ScheduleTx+0x2b8>)
 800c25a:	589a      	ldr	r2, [r3, r2]
 800c25c:	23e2      	movs	r3, #226	@ 0xe2
 800c25e:	005b      	lsls	r3, r3, #1
 800c260:	58d2      	ldr	r2, [r2, r3]
 800c262:	210c      	movs	r1, #12
 800c264:	187b      	adds	r3, r7, r1
 800c266:	605a      	str	r2, [r3, #4]

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 800c268:	4b88      	ldr	r3, [pc, #544]	@ (800c48c <ScheduleTx+0x2b4>)
 800c26a:	4a89      	ldr	r2, [pc, #548]	@ (800c490 <ScheduleTx+0x2b8>)
 800c26c:	589b      	ldr	r3, [r3, r2]
 800c26e:	7818      	ldrb	r0, [r3, #0]
 800c270:	4b86      	ldr	r3, [pc, #536]	@ (800c48c <ScheduleTx+0x2b4>)
 800c272:	4a87      	ldr	r2, [pc, #540]	@ (800c490 <ScheduleTx+0x2b8>)
 800c274:	589b      	ldr	r3, [r3, r2]
 800c276:	33c9      	adds	r3, #201	@ 0xc9
 800c278:	33ff      	adds	r3, #255	@ 0xff
 800c27a:	261f      	movs	r6, #31
 800c27c:	19bc      	adds	r4, r7, r6
 800c27e:	2218      	movs	r2, #24
 800c280:	18bd      	adds	r5, r7, r2
 800c282:	4a84      	ldr	r2, [pc, #528]	@ (800c494 <ScheduleTx+0x2bc>)
 800c284:	1879      	adds	r1, r7, r1
 800c286:	9300      	str	r3, [sp, #0]
 800c288:	002b      	movs	r3, r5
 800c28a:	f005 fb61 	bl	8011950 <RegionNextChannel>
 800c28e:	0003      	movs	r3, r0
 800c290:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
 800c292:	19bb      	adds	r3, r7, r6
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d025      	beq.n	800c2e6 <ScheduleTx+0x10e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800c29a:	19bb      	adds	r3, r7, r6
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	2b0b      	cmp	r3, #11
 800c2a0:	d11d      	bne.n	800c2de <ScheduleTx+0x106>
 800c2a2:	1dfb      	adds	r3, r7, #7
 800c2a4:	781b      	ldrb	r3, [r3, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d019      	beq.n	800c2de <ScheduleTx+0x106>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( dutyCycleTimeOff != 0 )
 800c2aa:	69bb      	ldr	r3, [r7, #24]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d014      	beq.n	800c2da <ScheduleTx+0x102>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800c2b0:	4a76      	ldr	r2, [pc, #472]	@ (800c48c <ScheduleTx+0x2b4>)
 800c2b2:	23d0      	movs	r3, #208	@ 0xd0
 800c2b4:	009b      	lsls	r3, r3, #2
 800c2b6:	58d3      	ldr	r3, [r2, r3]
 800c2b8:	2220      	movs	r2, #32
 800c2ba:	431a      	orrs	r2, r3
 800c2bc:	0011      	movs	r1, r2
 800c2be:	4a73      	ldr	r2, [pc, #460]	@ (800c48c <ScheduleTx+0x2b4>)
 800c2c0:	23d0      	movs	r3, #208	@ 0xd0
 800c2c2:	009b      	lsls	r3, r3, #2
 800c2c4:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 800c2c6:	69ba      	ldr	r2, [r7, #24]
 800c2c8:	4b73      	ldr	r3, [pc, #460]	@ (800c498 <ScheduleTx+0x2c0>)
 800c2ca:	0011      	movs	r1, r2
 800c2cc:	0018      	movs	r0, r3
 800c2ce:	f008 ffe3 	bl	8015298 <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 800c2d2:	4b71      	ldr	r3, [pc, #452]	@ (800c498 <ScheduleTx+0x2c0>)
 800c2d4:	0018      	movs	r0, r3
 800c2d6:	f008 fe83 	bl	8014fe0 <TimerStart>
            }
            return LORAMAC_STATUS_OK;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	e0d1      	b.n	800c482 <ScheduleTx+0x2aa>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800c2de:	231f      	movs	r3, #31
 800c2e0:	18fb      	adds	r3, r7, r3
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	e0cd      	b.n	800c482 <ScheduleTx+0x2aa>
        }
    }

    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800c2e6:	4b69      	ldr	r3, [pc, #420]	@ (800c48c <ScheduleTx+0x2b4>)
 800c2e8:	4a69      	ldr	r2, [pc, #420]	@ (800c490 <ScheduleTx+0x2b8>)
 800c2ea:	589b      	ldr	r3, [r3, r2]
 800c2ec:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 800c2ee:	4b67      	ldr	r3, [pc, #412]	@ (800c48c <ScheduleTx+0x2b4>)
 800c2f0:	4a67      	ldr	r2, [pc, #412]	@ (800c490 <ScheduleTx+0x2b8>)
 800c2f2:	589b      	ldr	r3, [r3, r2]
 800c2f4:	7818      	ldrb	r0, [r3, #0]
 800c2f6:	4b65      	ldr	r3, [pc, #404]	@ (800c48c <ScheduleTx+0x2b4>)
 800c2f8:	4a65      	ldr	r2, [pc, #404]	@ (800c490 <ScheduleTx+0x2b8>)
 800c2fa:	589a      	ldr	r2, [r3, r2]
 800c2fc:	232e      	movs	r3, #46	@ 0x2e
 800c2fe:	33ff      	adds	r3, #255	@ 0xff
 800c300:	5cd1      	ldrb	r1, [r2, r3]
 800c302:	4b62      	ldr	r3, [pc, #392]	@ (800c48c <ScheduleTx+0x2b4>)
 800c304:	4a62      	ldr	r2, [pc, #392]	@ (800c490 <ScheduleTx+0x2b8>)
 800c306:	589b      	ldr	r3, [r3, r2]
 800c308:	22f9      	movs	r2, #249	@ 0xf9
 800c30a:	569d      	ldrsb	r5, [r3, r2]
 800c30c:	4b5f      	ldr	r3, [pc, #380]	@ (800c48c <ScheduleTx+0x2b4>)
 800c30e:	4a60      	ldr	r2, [pc, #384]	@ (800c490 <ScheduleTx+0x2b8>)
 800c310:	589a      	ldr	r2, [r3, r2]
 800c312:	231a      	movs	r3, #26
 800c314:	33ff      	adds	r3, #255	@ 0xff
 800c316:	5cd3      	ldrb	r3, [r2, r3]
 800c318:	b25b      	sxtb	r3, r3
 800c31a:	002a      	movs	r2, r5
 800c31c:	f005 fb48 	bl	80119b0 <RegionApplyDrOffset>
 800c320:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800c322:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800c324:	4b59      	ldr	r3, [pc, #356]	@ (800c48c <ScheduleTx+0x2b4>)
 800c326:	4a5a      	ldr	r2, [pc, #360]	@ (800c490 <ScheduleTx+0x2b8>)
 800c328:	589a      	ldr	r2, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800c32a:	2380      	movs	r3, #128	@ 0x80
 800c32c:	005b      	lsls	r3, r3, #1
 800c32e:	5cd2      	ldrb	r2, [r2, r3]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800c330:	4b56      	ldr	r3, [pc, #344]	@ (800c48c <ScheduleTx+0x2b4>)
 800c332:	4857      	ldr	r0, [pc, #348]	@ (800c490 <ScheduleTx+0x2b8>)
 800c334:	581b      	ldr	r3, [r3, r0]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800c336:	20fc      	movs	r0, #252	@ 0xfc
 800c338:	5818      	ldr	r0, [r3, r0]
 800c33a:	4b58      	ldr	r3, [pc, #352]	@ (800c49c <ScheduleTx+0x2c4>)
 800c33c:	9300      	str	r3, [sp, #0]
 800c33e:	0003      	movs	r3, r0
 800c340:	0020      	movs	r0, r4
 800c342:	f005 f9fe 	bl	8011742 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800c346:	4b51      	ldr	r3, [pc, #324]	@ (800c48c <ScheduleTx+0x2b4>)
 800c348:	4a51      	ldr	r2, [pc, #324]	@ (800c490 <ScheduleTx+0x2b8>)
 800c34a:	589b      	ldr	r3, [r3, r2]
 800c34c:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 800c34e:	4b4f      	ldr	r3, [pc, #316]	@ (800c48c <ScheduleTx+0x2b4>)
 800c350:	4a4f      	ldr	r2, [pc, #316]	@ (800c490 <ScheduleTx+0x2b8>)
 800c352:	589a      	ldr	r2, [r3, r2]
 800c354:	2390      	movs	r3, #144	@ 0x90
 800c356:	005b      	lsls	r3, r3, #1
 800c358:	5cd3      	ldrb	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800c35a:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800c35c:	4b4b      	ldr	r3, [pc, #300]	@ (800c48c <ScheduleTx+0x2b4>)
 800c35e:	4a4c      	ldr	r2, [pc, #304]	@ (800c490 <ScheduleTx+0x2b8>)
 800c360:	589a      	ldr	r2, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800c362:	2380      	movs	r3, #128	@ 0x80
 800c364:	005b      	lsls	r3, r3, #1
 800c366:	5cd2      	ldrb	r2, [r2, r3]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800c368:	4b48      	ldr	r3, [pc, #288]	@ (800c48c <ScheduleTx+0x2b4>)
 800c36a:	4c49      	ldr	r4, [pc, #292]	@ (800c490 <ScheduleTx+0x2b8>)
 800c36c:	591b      	ldr	r3, [r3, r4]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800c36e:	24fc      	movs	r4, #252	@ 0xfc
 800c370:	591c      	ldr	r4, [r3, r4]
 800c372:	4b4b      	ldr	r3, [pc, #300]	@ (800c4a0 <ScheduleTx+0x2c8>)
 800c374:	9300      	str	r3, [sp, #0]
 800c376:	0023      	movs	r3, r4
 800c378:	f005 f9e3 	bl	8011742 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow2Config );

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800c37c:	4b43      	ldr	r3, [pc, #268]	@ (800c48c <ScheduleTx+0x2b4>)
 800c37e:	4a44      	ldr	r2, [pc, #272]	@ (800c490 <ScheduleTx+0x2b8>)
 800c380:	589a      	ldr	r2, [r3, r2]
 800c382:	23ea      	movs	r3, #234	@ 0xea
 800c384:	005b      	lsls	r3, r3, #1
 800c386:	5cd3      	ldrb	r3, [r2, r3]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d11e      	bne.n	800c3ca <ScheduleTx+0x1f2>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800c38c:	4b3f      	ldr	r3, [pc, #252]	@ (800c48c <ScheduleTx+0x2b4>)
 800c38e:	4a40      	ldr	r2, [pc, #256]	@ (800c490 <ScheduleTx+0x2b8>)
 800c390:	589a      	ldr	r2, [r3, r2]
 800c392:	2388      	movs	r3, #136	@ 0x88
 800c394:	005b      	lsls	r3, r3, #1
 800c396:	58d3      	ldr	r3, [r2, r3]
 800c398:	493c      	ldr	r1, [pc, #240]	@ (800c48c <ScheduleTx+0x2b4>)
 800c39a:	22f1      	movs	r2, #241	@ 0xf1
 800c39c:	0092      	lsls	r2, r2, #2
 800c39e:	588a      	ldr	r2, [r1, r2]
 800c3a0:	1899      	adds	r1, r3, r2
 800c3a2:	4a3a      	ldr	r2, [pc, #232]	@ (800c48c <ScheduleTx+0x2b4>)
 800c3a4:	23ec      	movs	r3, #236	@ 0xec
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800c3aa:	4b38      	ldr	r3, [pc, #224]	@ (800c48c <ScheduleTx+0x2b4>)
 800c3ac:	4a38      	ldr	r2, [pc, #224]	@ (800c490 <ScheduleTx+0x2b8>)
 800c3ae:	589a      	ldr	r2, [r3, r2]
 800c3b0:	238a      	movs	r3, #138	@ 0x8a
 800c3b2:	005b      	lsls	r3, r3, #1
 800c3b4:	58d3      	ldr	r3, [r2, r3]
 800c3b6:	4935      	ldr	r1, [pc, #212]	@ (800c48c <ScheduleTx+0x2b4>)
 800c3b8:	22f6      	movs	r2, #246	@ 0xf6
 800c3ba:	0092      	lsls	r2, r2, #2
 800c3bc:	588a      	ldr	r2, [r1, r2]
 800c3be:	1899      	adds	r1, r3, r2
 800c3c0:	4a32      	ldr	r2, [pc, #200]	@ (800c48c <ScheduleTx+0x2b4>)
 800c3c2:	23ed      	movs	r3, #237	@ 0xed
 800c3c4:	009b      	lsls	r3, r3, #2
 800c3c6:	50d1      	str	r1, [r2, r3]
 800c3c8:	e03c      	b.n	800c444 <ScheduleTx+0x26c>
    }
    else
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800c3ca:	2308      	movs	r3, #8
 800c3cc:	18fb      	adds	r3, r7, r3
 800c3ce:	0018      	movs	r0, r3
 800c3d0:	f003 f99c 	bl	800f70c <LoRaMacCommandsGetSizeSerializedCmds>
 800c3d4:	1e03      	subs	r3, r0, #0
 800c3d6:	d001      	beq.n	800c3dc <ScheduleTx+0x204>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c3d8:	2313      	movs	r3, #19
 800c3da:	e052      	b.n	800c482 <ScheduleTx+0x2aa>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 800c3dc:	4b2b      	ldr	r3, [pc, #172]	@ (800c48c <ScheduleTx+0x2b4>)
 800c3de:	4a31      	ldr	r2, [pc, #196]	@ (800c4a4 <ScheduleTx+0x2cc>)
 800c3e0:	5c98      	ldrb	r0, [r3, r2]
 800c3e2:	4b2a      	ldr	r3, [pc, #168]	@ (800c48c <ScheduleTx+0x2b4>)
 800c3e4:	4a2a      	ldr	r2, [pc, #168]	@ (800c490 <ScheduleTx+0x2b8>)
 800c3e6:	589b      	ldr	r3, [r3, r2]
 800c3e8:	22f9      	movs	r2, #249	@ 0xf9
 800c3ea:	569b      	ldrsb	r3, [r3, r2]
 800c3ec:	68ba      	ldr	r2, [r7, #8]
 800c3ee:	b2d2      	uxtb	r2, r2
 800c3f0:	0019      	movs	r1, r3
 800c3f2:	f7fe ffa3 	bl	800b33c <ValidatePayloadLength>
 800c3f6:	0003      	movs	r3, r0
 800c3f8:	001a      	movs	r2, r3
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	4053      	eors	r3, r2
 800c3fe:	b2db      	uxtb	r3, r3
 800c400:	2b00      	cmp	r3, #0
 800c402:	d001      	beq.n	800c408 <ScheduleTx+0x230>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800c404:	2308      	movs	r3, #8
 800c406:	e03c      	b.n	800c482 <ScheduleTx+0x2aa>
        }
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800c408:	4b20      	ldr	r3, [pc, #128]	@ (800c48c <ScheduleTx+0x2b4>)
 800c40a:	4a21      	ldr	r2, [pc, #132]	@ (800c490 <ScheduleTx+0x2b8>)
 800c40c:	589a      	ldr	r2, [r3, r2]
 800c40e:	2384      	movs	r3, #132	@ 0x84
 800c410:	005b      	lsls	r3, r3, #1
 800c412:	58d3      	ldr	r3, [r2, r3]
 800c414:	491d      	ldr	r1, [pc, #116]	@ (800c48c <ScheduleTx+0x2b4>)
 800c416:	22f1      	movs	r2, #241	@ 0xf1
 800c418:	0092      	lsls	r2, r2, #2
 800c41a:	588a      	ldr	r2, [r1, r2]
 800c41c:	1899      	adds	r1, r3, r2
 800c41e:	4a1b      	ldr	r2, [pc, #108]	@ (800c48c <ScheduleTx+0x2b4>)
 800c420:	23ec      	movs	r3, #236	@ 0xec
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800c426:	4b19      	ldr	r3, [pc, #100]	@ (800c48c <ScheduleTx+0x2b4>)
 800c428:	4a19      	ldr	r2, [pc, #100]	@ (800c490 <ScheduleTx+0x2b8>)
 800c42a:	589a      	ldr	r2, [r3, r2]
 800c42c:	2386      	movs	r3, #134	@ 0x86
 800c42e:	005b      	lsls	r3, r3, #1
 800c430:	58d3      	ldr	r3, [r2, r3]
 800c432:	4916      	ldr	r1, [pc, #88]	@ (800c48c <ScheduleTx+0x2b4>)
 800c434:	22f6      	movs	r2, #246	@ 0xf6
 800c436:	0092      	lsls	r2, r2, #2
 800c438:	588a      	ldr	r2, [r1, r2]
 800c43a:	1899      	adds	r1, r3, r2
 800c43c:	4a13      	ldr	r2, [pc, #76]	@ (800c48c <ScheduleTx+0x2b4>)
 800c43e:	23ed      	movs	r3, #237	@ 0xed
 800c440:	009b      	lsls	r3, r3, #2
 800c442:	50d1      	str	r1, [r2, r3]
    }

    // Secure frame
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 800c444:	4b11      	ldr	r3, [pc, #68]	@ (800c48c <ScheduleTx+0x2b4>)
 800c446:	4a12      	ldr	r2, [pc, #72]	@ (800c490 <ScheduleTx+0x2b8>)
 800c448:	589b      	ldr	r3, [r3, r2]
 800c44a:	22f9      	movs	r2, #249	@ 0xf9
 800c44c:	569b      	ldrsb	r3, [r3, r2]
 800c44e:	b2da      	uxtb	r2, r3
 800c450:	4b0e      	ldr	r3, [pc, #56]	@ (800c48c <ScheduleTx+0x2b4>)
 800c452:	4915      	ldr	r1, [pc, #84]	@ (800c4a8 <ScheduleTx+0x2d0>)
 800c454:	5c5b      	ldrb	r3, [r3, r1]
 800c456:	251e      	movs	r5, #30
 800c458:	197c      	adds	r4, r7, r5
 800c45a:	0019      	movs	r1, r3
 800c45c:	0010      	movs	r0, r2
 800c45e:	f000 f825 	bl	800c4ac <SecureFrame>
 800c462:	0003      	movs	r3, r0
 800c464:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_STATUS_OK )
 800c466:	197b      	adds	r3, r7, r5
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d002      	beq.n	800c474 <ScheduleTx+0x29c>
    {
        return retval;
 800c46e:	197b      	adds	r3, r7, r5
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	e006      	b.n	800c482 <ScheduleTx+0x2aa>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800c474:	4b05      	ldr	r3, [pc, #20]	@ (800c48c <ScheduleTx+0x2b4>)
 800c476:	4a0c      	ldr	r2, [pc, #48]	@ (800c4a8 <ScheduleTx+0x2d0>)
 800c478:	5c9b      	ldrb	r3, [r3, r2]
 800c47a:	0018      	movs	r0, r3
 800c47c:	f000 fbd0 	bl	800cc20 <SendFrameOnChannel>
 800c480:	0003      	movs	r3, r0
}
 800c482:	0018      	movs	r0, r3
 800c484:	46bd      	mov	sp, r7
 800c486:	b009      	add	sp, #36	@ 0x24
 800c488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c48a:	46c0      	nop			@ (mov r8, r8)
 800c48c:	20000964 	.word	0x20000964
 800c490:	00000484 	.word	0x00000484
 800c494:	20000d79 	.word	0x20000d79
 800c498:	20000ccc 	.word	0x20000ccc
 800c49c:	20000d1c 	.word	0x20000d1c
 800c4a0:	20000d30 	.word	0x20000d30
 800c4a4:	00000237 	.word	0x00000237
 800c4a8:	00000415 	.word	0x00000415

0800c4ac <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800c4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4ae:	b085      	sub	sp, #20
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	0002      	movs	r2, r0
 800c4b4:	1dfb      	adds	r3, r7, #7
 800c4b6:	701a      	strb	r2, [r3, #0]
 800c4b8:	1dbb      	adds	r3, r7, #6
 800c4ba:	1c0a      	adds	r2, r1, #0
 800c4bc:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800c4be:	230f      	movs	r3, #15
 800c4c0:	18fb      	adds	r3, r7, r3
 800c4c2:	2213      	movs	r2, #19
 800c4c4:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800c4ca:	4a2c      	ldr	r2, [pc, #176]	@ (800c57c <SecureFrame+0xd0>)
 800c4cc:	2382      	movs	r3, #130	@ 0x82
 800c4ce:	005b      	lsls	r3, r3, #1
 800c4d0:	5cd3      	ldrb	r3, [r2, r3]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d002      	beq.n	800c4dc <SecureFrame+0x30>
 800c4d6:	2b04      	cmp	r3, #4
 800c4d8:	d016      	beq.n	800c508 <SecureFrame+0x5c>
 800c4da:	e047      	b.n	800c56c <SecureFrame+0xc0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800c4dc:	250f      	movs	r5, #15
 800c4de:	197c      	adds	r4, r7, r5
 800c4e0:	4b27      	ldr	r3, [pc, #156]	@ (800c580 <SecureFrame+0xd4>)
 800c4e2:	0018      	movs	r0, r3
 800c4e4:	f004 f8c8 	bl	8010678 <LoRaMacCryptoPrepareJoinRequest>
 800c4e8:	0003      	movs	r3, r0
 800c4ea:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800c4ec:	197b      	adds	r3, r7, r5
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d001      	beq.n	800c4f8 <SecureFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800c4f4:	2311      	movs	r3, #17
 800c4f6:	e03c      	b.n	800c572 <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800c4f8:	4a20      	ldr	r2, [pc, #128]	@ (800c57c <SecureFrame+0xd0>)
 800c4fa:	2386      	movs	r3, #134	@ 0x86
 800c4fc:	005b      	lsls	r3, r3, #1
 800c4fe:	5cd3      	ldrb	r3, [r2, r3]
 800c500:	001a      	movs	r2, r3
 800c502:	4b1e      	ldr	r3, [pc, #120]	@ (800c57c <SecureFrame+0xd0>)
 800c504:	801a      	strh	r2, [r3, #0]
            break;
 800c506:	e033      	b.n	800c570 <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800c508:	2308      	movs	r3, #8
 800c50a:	18fb      	adds	r3, r7, r3
 800c50c:	0018      	movs	r0, r3
 800c50e:	f003 ffb7 	bl	8010480 <LoRaMacCryptoGetFCntUp>
 800c512:	1e03      	subs	r3, r0, #0
 800c514:	d001      	beq.n	800c51a <SecureFrame+0x6e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800c516:	2312      	movs	r3, #18
 800c518:	e02b      	b.n	800c572 <SecureFrame+0xc6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800c51a:	4a18      	ldr	r2, [pc, #96]	@ (800c57c <SecureFrame+0xd0>)
 800c51c:	2382      	movs	r3, #130	@ 0x82
 800c51e:	00db      	lsls	r3, r3, #3
 800c520:	5cd3      	ldrb	r3, [r2, r3]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d104      	bne.n	800c530 <SecureFrame+0x84>
 800c526:	4b15      	ldr	r3, [pc, #84]	@ (800c57c <SecureFrame+0xd0>)
 800c528:	4a16      	ldr	r2, [pc, #88]	@ (800c584 <SecureFrame+0xd8>)
 800c52a:	5c9b      	ldrb	r3, [r3, r2]
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d902      	bls.n	800c536 <SecureFrame+0x8a>
            {
                fCntUp -= 1;
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	3b01      	subs	r3, #1
 800c534:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800c536:	68b8      	ldr	r0, [r7, #8]
 800c538:	260f      	movs	r6, #15
 800c53a:	19bc      	adds	r4, r7, r6
 800c53c:	4d10      	ldr	r5, [pc, #64]	@ (800c580 <SecureFrame+0xd4>)
 800c53e:	1dbb      	adds	r3, r7, #6
 800c540:	781a      	ldrb	r2, [r3, #0]
 800c542:	1dfb      	adds	r3, r7, #7
 800c544:	7819      	ldrb	r1, [r3, #0]
 800c546:	002b      	movs	r3, r5
 800c548:	f004 fab8 	bl	8010abc <LoRaMacCryptoSecureMessage>
 800c54c:	0003      	movs	r3, r0
 800c54e:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800c550:	19bb      	adds	r3, r7, r6
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d001      	beq.n	800c55c <SecureFrame+0xb0>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800c558:	2311      	movs	r3, #17
 800c55a:	e00a      	b.n	800c572 <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800c55c:	4a07      	ldr	r2, [pc, #28]	@ (800c57c <SecureFrame+0xd0>)
 800c55e:	2386      	movs	r3, #134	@ 0x86
 800c560:	005b      	lsls	r3, r3, #1
 800c562:	5cd3      	ldrb	r3, [r2, r3]
 800c564:	001a      	movs	r2, r3
 800c566:	4b05      	ldr	r3, [pc, #20]	@ (800c57c <SecureFrame+0xd0>)
 800c568:	801a      	strh	r2, [r3, #0]
            break;
 800c56a:	e001      	b.n	800c570 <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800c56c:	2303      	movs	r3, #3
 800c56e:	e000      	b.n	800c572 <SecureFrame+0xc6>
    }
    return LORAMAC_STATUS_OK;
 800c570:	2300      	movs	r3, #0
}
 800c572:	0018      	movs	r0, r3
 800c574:	46bd      	mov	sp, r7
 800c576:	b005      	add	sp, #20
 800c578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c57a:	46c0      	nop			@ (mov r8, r8)
 800c57c:	20000964 	.word	0x20000964
 800c580:	20000a6c 	.word	0x20000a6c
 800c584:	00000412 	.word	0x00000412

0800c588 <CalculateBackOff>:

static void CalculateBackOff( uint8_t channel )
{
 800c588:	b590      	push	{r4, r7, lr}
 800c58a:	b087      	sub	sp, #28
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	0002      	movs	r2, r0
 800c590:	1dfb      	adds	r3, r7, #7
 800c592:	701a      	strb	r2, [r3, #0]
    CalcBackOffParams_t calcBackOff;

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800c594:	4b31      	ldr	r3, [pc, #196]	@ (800c65c <CalculateBackOff+0xd4>)
 800c596:	4a32      	ldr	r2, [pc, #200]	@ (800c660 <CalculateBackOff+0xd8>)
 800c598:	589a      	ldr	r2, [r3, r2]
 800c59a:	23ea      	movs	r3, #234	@ 0xea
 800c59c:	005b      	lsls	r3, r3, #1
 800c59e:	5cd3      	ldrb	r3, [r2, r3]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d104      	bne.n	800c5ae <CalculateBackOff+0x26>
    {
        calcBackOff.Joined = false;
 800c5a4:	230c      	movs	r3, #12
 800c5a6:	18fb      	adds	r3, r7, r3
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	701a      	strb	r2, [r3, #0]
 800c5ac:	e003      	b.n	800c5b6 <CalculateBackOff+0x2e>
    }
    else
    {
        calcBackOff.Joined = true;
 800c5ae:	230c      	movs	r3, #12
 800c5b0:	18fb      	adds	r3, r7, r3
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	701a      	strb	r2, [r3, #0]
    }
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800c5b6:	4b29      	ldr	r3, [pc, #164]	@ (800c65c <CalculateBackOff+0xd4>)
 800c5b8:	4a29      	ldr	r2, [pc, #164]	@ (800c660 <CalculateBackOff+0xd8>)
 800c5ba:	589a      	ldr	r2, [r3, r2]
 800c5bc:	233e      	movs	r3, #62	@ 0x3e
 800c5be:	33ff      	adds	r3, #255	@ 0xff
 800c5c0:	5cd2      	ldrb	r2, [r2, r3]
 800c5c2:	240c      	movs	r4, #12
 800c5c4:	193b      	adds	r3, r7, r4
 800c5c6:	709a      	strb	r2, [r3, #2]
    calcBackOff.Channel = channel;
 800c5c8:	193b      	adds	r3, r7, r4
 800c5ca:	1dfa      	adds	r2, r7, #7
 800c5cc:	7812      	ldrb	r2, [r2, #0]
 800c5ce:	70da      	strb	r2, [r3, #3]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 800c5d0:	4b22      	ldr	r3, [pc, #136]	@ (800c65c <CalculateBackOff+0xd4>)
 800c5d2:	4a23      	ldr	r2, [pc, #140]	@ (800c660 <CalculateBackOff+0xd8>)
 800c5d4:	589a      	ldr	r2, [r3, r2]
 800c5d6:	23e6      	movs	r3, #230	@ 0xe6
 800c5d8:	005b      	lsls	r3, r3, #1
 800c5da:	58d3      	ldr	r3, [r2, r3]
 800c5dc:	0018      	movs	r0, r3
 800c5de:	f008 fe90 	bl	8015302 <TimerGetElapsedTime>
 800c5e2:	0002      	movs	r2, r0
 800c5e4:	193b      	adds	r3, r7, r4
 800c5e6:	605a      	str	r2, [r3, #4]
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800c5e8:	4a1c      	ldr	r2, [pc, #112]	@ (800c65c <CalculateBackOff+0xd4>)
 800c5ea:	2383      	movs	r3, #131	@ 0x83
 800c5ec:	00db      	lsls	r3, r3, #3
 800c5ee:	58d2      	ldr	r2, [r2, r3]
 800c5f0:	193b      	adds	r3, r7, r4
 800c5f2:	609a      	str	r2, [r3, #8]
    calcBackOff.LastTxIsJoinRequest = false;
 800c5f4:	193b      	adds	r3, r7, r4
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	705a      	strb	r2, [r3, #1]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 800c5fa:	4b18      	ldr	r3, [pc, #96]	@ (800c65c <CalculateBackOff+0xd4>)
 800c5fc:	4a19      	ldr	r2, [pc, #100]	@ (800c664 <CalculateBackOff+0xdc>)
 800c5fe:	5c9b      	ldrb	r3, [r3, r2]
 800c600:	2204      	movs	r2, #4
 800c602:	4013      	ands	r3, r2
 800c604:	b2db      	uxtb	r3, r3
 800c606:	2b00      	cmp	r3, #0
 800c608:	d007      	beq.n	800c61a <CalculateBackOff+0x92>
 800c60a:	2000      	movs	r0, #0
 800c60c:	f003 fa6e 	bl	800faec <LoRaMacConfirmQueueIsCmdActive>
 800c610:	1e03      	subs	r3, r0, #0
 800c612:	d002      	beq.n	800c61a <CalculateBackOff+0x92>
    {
        calcBackOff.LastTxIsJoinRequest = true;
 800c614:	193b      	adds	r3, r7, r4
 800c616:	2201      	movs	r2, #1
 800c618:	705a      	strb	r2, [r3, #1]
    }

    // Update regional back-off
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 800c61a:	4b10      	ldr	r3, [pc, #64]	@ (800c65c <CalculateBackOff+0xd4>)
 800c61c:	4a10      	ldr	r2, [pc, #64]	@ (800c660 <CalculateBackOff+0xd8>)
 800c61e:	589b      	ldr	r3, [r3, r2]
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	220c      	movs	r2, #12
 800c624:	18ba      	adds	r2, r7, r2
 800c626:	0011      	movs	r1, r2
 800c628:	0018      	movs	r0, r3
 800c62a:	f005 f97c 	bl	8011926 <RegionCalcBackOff>

    // Update aggregated time-off. This must be an assignment and no incremental
    // update as we do only calculate the time-off based on the last transmission
    MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 800c62e:	4b0b      	ldr	r3, [pc, #44]	@ (800c65c <CalculateBackOff+0xd4>)
 800c630:	4a0b      	ldr	r2, [pc, #44]	@ (800c660 <CalculateBackOff+0xd8>)
 800c632:	589a      	ldr	r2, [r3, r2]
 800c634:	23e1      	movs	r3, #225	@ 0xe1
 800c636:	005b      	lsls	r3, r3, #1
 800c638:	5ad3      	ldrh	r3, [r2, r3]
 800c63a:	3b01      	subs	r3, #1
 800c63c:	4907      	ldr	r1, [pc, #28]	@ (800c65c <CalculateBackOff+0xd4>)
 800c63e:	2283      	movs	r2, #131	@ 0x83
 800c640:	00d2      	lsls	r2, r2, #3
 800c642:	5889      	ldr	r1, [r1, r2]
 800c644:	4a05      	ldr	r2, [pc, #20]	@ (800c65c <CalculateBackOff+0xd4>)
 800c646:	4806      	ldr	r0, [pc, #24]	@ (800c660 <CalculateBackOff+0xd8>)
 800c648:	5812      	ldr	r2, [r2, r0]
 800c64a:	4359      	muls	r1, r3
 800c64c:	23e4      	movs	r3, #228	@ 0xe4
 800c64e:	005b      	lsls	r3, r3, #1
 800c650:	50d1      	str	r1, [r2, r3]
}
 800c652:	46c0      	nop			@ (mov r8, r8)
 800c654:	46bd      	mov	sp, r7
 800c656:	b007      	add	sp, #28
 800c658:	bd90      	pop	{r4, r7, pc}
 800c65a:	46c0      	nop			@ (mov r8, r8)
 800c65c:	20000964 	.word	0x20000964
 800c660:	00000484 	.word	0x00000484
 800c664:	00000481 	.word	0x00000481

0800c668 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	1d3b      	adds	r3, r7, #4
 800c670:	7019      	strb	r1, [r3, #0]
 800c672:	0011      	movs	r1, r2
 800c674:	1dfb      	adds	r3, r7, #7
 800c676:	1c02      	adds	r2, r0, #0
 800c678:	701a      	strb	r2, [r3, #0]
 800c67a:	1dbb      	adds	r3, r7, #6
 800c67c:	1c0a      	adds	r2, r1, #0
 800c67e:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800c680:	1dfb      	adds	r3, r7, #7
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d003      	beq.n	800c690 <RemoveMacCommands+0x28>
 800c688:	1dfb      	adds	r3, r7, #7
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	d10f      	bne.n	800c6b0 <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800c690:	1dbb      	adds	r3, r7, #6
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	2b01      	cmp	r3, #1
 800c696:	d109      	bne.n	800c6ac <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
 800c698:	1d3b      	adds	r3, r7, #4
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	2220      	movs	r2, #32
 800c69e:	4013      	ands	r3, r2
 800c6a0:	b2db      	uxtb	r3, r3
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d004      	beq.n	800c6b0 <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800c6a6:	f003 f80d 	bl	800f6c4 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800c6aa:	e001      	b.n	800c6b0 <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800c6ac:	f003 f80a 	bl	800f6c4 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800c6b0:	46c0      	nop			@ (mov r8, r8)
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	b002      	add	sp, #8
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <ResetMacParameters>:


static void ResetMacParameters( void )
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 800c6be:	4b72      	ldr	r3, [pc, #456]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c6c0:	4a72      	ldr	r2, [pc, #456]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c6c2:	589a      	ldr	r2, [r3, r2]
 800c6c4:	23ea      	movs	r3, #234	@ 0xea
 800c6c6:	005b      	lsls	r3, r3, #1
 800c6c8:	2100      	movs	r1, #0
 800c6ca:	54d1      	strb	r1, [r2, r3]

    // ADR counter
    MacCtx.NvmCtx->AdrAckCounter = 0;
 800c6cc:	4b6e      	ldr	r3, [pc, #440]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c6ce:	4a6f      	ldr	r2, [pc, #444]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c6d0:	589b      	ldr	r3, [r3, r2]
 800c6d2:	22f4      	movs	r2, #244	@ 0xf4
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	5099      	str	r1, [r3, r2]

    MacCtx.ChannelsNbTransCounter = 0;
 800c6d8:	4a6b      	ldr	r2, [pc, #428]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c6da:	2382      	movs	r3, #130	@ 0x82
 800c6dc:	00db      	lsls	r3, r3, #3
 800c6de:	2100      	movs	r1, #0
 800c6e0:	54d1      	strb	r1, [r2, r3]
    MacCtx.AckTimeoutRetries = 1;
 800c6e2:	4b69      	ldr	r3, [pc, #420]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c6e4:	4a6a      	ldr	r2, [pc, #424]	@ (800c890 <ResetMacParameters+0x1d8>)
 800c6e6:	2101      	movs	r1, #1
 800c6e8:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetriesCounter = 1;
 800c6ea:	4b67      	ldr	r3, [pc, #412]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c6ec:	4a69      	ldr	r2, [pc, #420]	@ (800c894 <ResetMacParameters+0x1dc>)
 800c6ee:	2101      	movs	r1, #1
 800c6f0:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 800c6f2:	4b65      	ldr	r3, [pc, #404]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c6f4:	4a68      	ldr	r2, [pc, #416]	@ (800c898 <ResetMacParameters+0x1e0>)
 800c6f6:	2100      	movs	r1, #0
 800c6f8:	5499      	strb	r1, [r3, r2]

    MacCtx.NvmCtx->MaxDCycle = 0;
 800c6fa:	4b63      	ldr	r3, [pc, #396]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c6fc:	4a63      	ldr	r2, [pc, #396]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c6fe:	589a      	ldr	r2, [r3, r2]
 800c700:	239e      	movs	r3, #158	@ 0x9e
 800c702:	005b      	lsls	r3, r3, #1
 800c704:	2100      	movs	r1, #0
 800c706:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 800c708:	4b5f      	ldr	r3, [pc, #380]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c70a:	4a60      	ldr	r2, [pc, #384]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c70c:	589a      	ldr	r2, [r3, r2]
 800c70e:	23e1      	movs	r3, #225	@ 0xe1
 800c710:	005b      	lsls	r3, r3, #1
 800c712:	2101      	movs	r1, #1
 800c714:	52d1      	strh	r1, [r2, r3]

    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800c716:	4b5c      	ldr	r3, [pc, #368]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c718:	4a5c      	ldr	r2, [pc, #368]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c71a:	589a      	ldr	r2, [r3, r2]
 800c71c:	4b5a      	ldr	r3, [pc, #360]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c71e:	495b      	ldr	r1, [pc, #364]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c720:	585b      	ldr	r3, [r3, r1]
 800c722:	2104      	movs	r1, #4
 800c724:	5651      	ldrsb	r1, [r2, r1]
 800c726:	22f8      	movs	r2, #248	@ 0xf8
 800c728:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800c72a:	4b57      	ldr	r3, [pc, #348]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c72c:	4a57      	ldr	r2, [pc, #348]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c72e:	589a      	ldr	r2, [r3, r2]
 800c730:	4b55      	ldr	r3, [pc, #340]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c732:	4956      	ldr	r1, [pc, #344]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c734:	585b      	ldr	r3, [r3, r1]
 800c736:	2105      	movs	r1, #5
 800c738:	5651      	ldrsb	r1, [r2, r1]
 800c73a:	22f9      	movs	r2, #249	@ 0xf9
 800c73c:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 800c73e:	4b52      	ldr	r3, [pc, #328]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c740:	4a52      	ldr	r2, [pc, #328]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c742:	589b      	ldr	r3, [r3, r2]
 800c744:	4a50      	ldr	r2, [pc, #320]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c746:	4951      	ldr	r1, [pc, #324]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c748:	5852      	ldr	r2, [r2, r1]
 800c74a:	2125      	movs	r1, #37	@ 0x25
 800c74c:	5c59      	ldrb	r1, [r3, r1]
 800c74e:	231a      	movs	r3, #26
 800c750:	33ff      	adds	r3, #255	@ 0xff
 800c752:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 800c754:	4b4c      	ldr	r3, [pc, #304]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c756:	4a4d      	ldr	r2, [pc, #308]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c758:	589a      	ldr	r2, [r3, r2]
 800c75a:	4b4b      	ldr	r3, [pc, #300]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c75c:	494b      	ldr	r1, [pc, #300]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c75e:	5859      	ldr	r1, [r3, r1]
 800c760:	238e      	movs	r3, #142	@ 0x8e
 800c762:	005b      	lsls	r3, r3, #1
 800c764:	18cb      	adds	r3, r1, r3
 800c766:	3228      	adds	r2, #40	@ 0x28
 800c768:	ca03      	ldmia	r2!, {r0, r1}
 800c76a:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 800c76c:	4b46      	ldr	r3, [pc, #280]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c76e:	4a47      	ldr	r2, [pc, #284]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c770:	589a      	ldr	r2, [r3, r2]
 800c772:	4b45      	ldr	r3, [pc, #276]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c774:	4945      	ldr	r1, [pc, #276]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c776:	5859      	ldr	r1, [r3, r1]
 800c778:	2392      	movs	r3, #146	@ 0x92
 800c77a:	005b      	lsls	r3, r3, #1
 800c77c:	18cb      	adds	r3, r1, r3
 800c77e:	3230      	adds	r2, #48	@ 0x30
 800c780:	ca03      	ldmia	r2!, {r0, r1}
 800c782:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 800c784:	4b40      	ldr	r3, [pc, #256]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c786:	4a41      	ldr	r2, [pc, #260]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c788:	589b      	ldr	r3, [r3, r2]
 800c78a:	4a3f      	ldr	r2, [pc, #252]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c78c:	493f      	ldr	r1, [pc, #252]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c78e:	5852      	ldr	r2, [r2, r1]
 800c790:	2138      	movs	r1, #56	@ 0x38
 800c792:	5c59      	ldrb	r1, [r3, r1]
 800c794:	2396      	movs	r3, #150	@ 0x96
 800c796:	005b      	lsls	r3, r3, #1
 800c798:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 800c79a:	4b3b      	ldr	r3, [pc, #236]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c79c:	4a3b      	ldr	r2, [pc, #236]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c79e:	589b      	ldr	r3, [r3, r2]
 800c7a0:	4a39      	ldr	r2, [pc, #228]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c7a2:	493a      	ldr	r1, [pc, #232]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c7a4:	5852      	ldr	r2, [r2, r1]
 800c7a6:	2139      	movs	r1, #57	@ 0x39
 800c7a8:	5c59      	ldrb	r1, [r3, r1]
 800c7aa:	232e      	movs	r3, #46	@ 0x2e
 800c7ac:	33ff      	adds	r3, #255	@ 0xff
 800c7ae:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 800c7b0:	4b35      	ldr	r3, [pc, #212]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c7b2:	4a36      	ldr	r2, [pc, #216]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c7b4:	589b      	ldr	r3, [r3, r2]
 800c7b6:	4a34      	ldr	r2, [pc, #208]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c7b8:	4934      	ldr	r1, [pc, #208]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c7ba:	5852      	ldr	r2, [r2, r1]
 800c7bc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c7be:	2398      	movs	r3, #152	@ 0x98
 800c7c0:	005b      	lsls	r3, r3, #1
 800c7c2:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800c7c4:	4b30      	ldr	r3, [pc, #192]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c7c6:	4a31      	ldr	r2, [pc, #196]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c7c8:	589b      	ldr	r3, [r3, r2]
 800c7ca:	4a2f      	ldr	r2, [pc, #188]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c7cc:	492f      	ldr	r1, [pc, #188]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c7ce:	5852      	ldr	r2, [r2, r1]
 800c7d0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800c7d2:	239a      	movs	r3, #154	@ 0x9a
 800c7d4:	005b      	lsls	r3, r3, #1
 800c7d6:	50d1      	str	r1, [r2, r3]

    MacCtx.NodeAckRequested = false;
 800c7d8:	4b2b      	ldr	r3, [pc, #172]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c7da:	4a30      	ldr	r2, [pc, #192]	@ (800c89c <ResetMacParameters+0x1e4>)
 800c7dc:	2100      	movs	r1, #0
 800c7de:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 800c7e0:	4b29      	ldr	r3, [pc, #164]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c7e2:	4a2a      	ldr	r2, [pc, #168]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c7e4:	589a      	ldr	r2, [r3, r2]
 800c7e6:	23e0      	movs	r3, #224	@ 0xe0
 800c7e8:	005b      	lsls	r3, r3, #1
 800c7ea:	2100      	movs	r1, #0
 800c7ec:	54d1      	strb	r1, [r2, r3]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800c7ee:	003b      	movs	r3, r7
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 800c7f4:	003b      	movs	r3, r7
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800c7fa:	4b23      	ldr	r3, [pc, #140]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c7fc:	4a23      	ldr	r2, [pc, #140]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c7fe:	589b      	ldr	r3, [r3, r2]
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	003a      	movs	r2, r7
 800c804:	0011      	movs	r1, r2
 800c806:	0018      	movs	r0, r3
 800c808:	f004 ff28 	bl	801165c <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800c80c:	4b1e      	ldr	r3, [pc, #120]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c80e:	4a24      	ldr	r2, [pc, #144]	@ (800c8a0 <ResetMacParameters+0x1e8>)
 800c810:	2100      	movs	r1, #0
 800c812:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 800c814:	4b1c      	ldr	r3, [pc, #112]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c816:	4a1d      	ldr	r2, [pc, #116]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c818:	589a      	ldr	r2, [r3, r2]
 800c81a:	4b1b      	ldr	r3, [pc, #108]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c81c:	4920      	ldr	r1, [pc, #128]	@ (800c8a0 <ResetMacParameters+0x1e8>)
 800c81e:	5c59      	ldrb	r1, [r3, r1]
 800c820:	239f      	movs	r3, #159	@ 0x9f
 800c822:	005b      	lsls	r3, r3, #1
 800c824:	54d1      	strb	r1, [r2, r3]

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800c826:	4b18      	ldr	r3, [pc, #96]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c828:	4a1d      	ldr	r2, [pc, #116]	@ (800c8a0 <ResetMacParameters+0x1e8>)
 800c82a:	5c99      	ldrb	r1, [r3, r2]
 800c82c:	4a16      	ldr	r2, [pc, #88]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c82e:	23f3      	movs	r3, #243	@ 0xf3
 800c830:	009b      	lsls	r3, r3, #2
 800c832:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800c834:	4b14      	ldr	r3, [pc, #80]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c836:	4a15      	ldr	r2, [pc, #84]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c838:	589a      	ldr	r2, [r3, r2]
 800c83a:	238e      	movs	r3, #142	@ 0x8e
 800c83c:	005b      	lsls	r3, r3, #1
 800c83e:	58d1      	ldr	r1, [r2, r3]
 800c840:	4a11      	ldr	r2, [pc, #68]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c842:	23f4      	movs	r3, #244	@ 0xf4
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800c848:	4b0f      	ldr	r3, [pc, #60]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c84a:	4a10      	ldr	r2, [pc, #64]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c84c:	589a      	ldr	r2, [r3, r2]
 800c84e:	232e      	movs	r3, #46	@ 0x2e
 800c850:	33ff      	adds	r3, #255	@ 0xff
 800c852:	5cd1      	ldrb	r1, [r2, r3]
 800c854:	4a0c      	ldr	r2, [pc, #48]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c856:	23f7      	movs	r3, #247	@ 0xf7
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800c85c:	4b0a      	ldr	r3, [pc, #40]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c85e:	4a0b      	ldr	r2, [pc, #44]	@ (800c88c <ResetMacParameters+0x1d4>)
 800c860:	589a      	ldr	r2, [r3, r2]
 800c862:	2340      	movs	r3, #64	@ 0x40
 800c864:	33ff      	adds	r3, #255	@ 0xff
 800c866:	5cd1      	ldrb	r1, [r2, r3]
 800c868:	4b07      	ldr	r3, [pc, #28]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c86a:	4a0e      	ldr	r2, [pc, #56]	@ (800c8a4 <ResetMacParameters+0x1ec>)
 800c86c:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 800c86e:	4b06      	ldr	r3, [pc, #24]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c870:	4a0d      	ldr	r2, [pc, #52]	@ (800c8a8 <ResetMacParameters+0x1f0>)
 800c872:	2100      	movs	r1, #0
 800c874:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800c876:	4b04      	ldr	r3, [pc, #16]	@ (800c888 <ResetMacParameters+0x1d0>)
 800c878:	4a0c      	ldr	r2, [pc, #48]	@ (800c8ac <ResetMacParameters+0x1f4>)
 800c87a:	2101      	movs	r1, #1
 800c87c:	5499      	strb	r1, [r3, r2]
}
 800c87e:	46c0      	nop			@ (mov r8, r8)
 800c880:	46bd      	mov	sp, r7
 800c882:	b002      	add	sp, #8
 800c884:	bd80      	pop	{r7, pc}
 800c886:	46c0      	nop			@ (mov r8, r8)
 800c888:	20000964 	.word	0x20000964
 800c88c:	00000484 	.word	0x00000484
 800c890:	00000411 	.word	0x00000411
 800c894:	00000412 	.word	0x00000412
 800c898:	00000413 	.word	0x00000413
 800c89c:	00000414 	.word	0x00000414
 800c8a0:	00000415 	.word	0x00000415
 800c8a4:	000003dd 	.word	0x000003dd
 800c8a8:	000003de 	.word	0x000003de
 800c8ac:	000003df 	.word	0x000003df

0800c8b0 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	0018      	movs	r0, r3
 800c8be:	f008 fc6d 	bl	801519c <TimerStop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800c8c2:	4b11      	ldr	r3, [pc, #68]	@ (800c908 <RxWindowSetup+0x58>)
 800c8c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8c6:	4798      	blx	r3

    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800c8c8:	4b10      	ldr	r3, [pc, #64]	@ (800c90c <RxWindowSetup+0x5c>)
 800c8ca:	4a11      	ldr	r2, [pc, #68]	@ (800c910 <RxWindowSetup+0x60>)
 800c8cc:	589b      	ldr	r3, [r3, r2]
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	4a10      	ldr	r2, [pc, #64]	@ (800c914 <RxWindowSetup+0x64>)
 800c8d2:	6839      	ldr	r1, [r7, #0]
 800c8d4:	0018      	movs	r0, r3
 800c8d6:	f004 ff58 	bl	801178a <RegionRxConfig>
 800c8da:	1e03      	subs	r3, r0, #0
 800c8dc:	d00f      	beq.n	800c8fe <RxWindowSetup+0x4e>
    {
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 800c8de:	4b0a      	ldr	r3, [pc, #40]	@ (800c908 <RxWindowSetup+0x58>)
 800c8e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8e2:	4a0a      	ldr	r2, [pc, #40]	@ (800c90c <RxWindowSetup+0x5c>)
 800c8e4:	490a      	ldr	r1, [pc, #40]	@ (800c910 <RxWindowSetup+0x60>)
 800c8e6:	5851      	ldr	r1, [r2, r1]
 800c8e8:	2282      	movs	r2, #130	@ 0x82
 800c8ea:	0052      	lsls	r2, r2, #1
 800c8ec:	588a      	ldr	r2, [r1, r2]
 800c8ee:	0010      	movs	r0, r2
 800c8f0:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	7cd9      	ldrb	r1, [r3, #19]
 800c8f6:	4a05      	ldr	r2, [pc, #20]	@ (800c90c <RxWindowSetup+0x5c>)
 800c8f8:	2390      	movs	r3, #144	@ 0x90
 800c8fa:	00db      	lsls	r3, r3, #3
 800c8fc:	54d1      	strb	r1, [r2, r3]
    }
}
 800c8fe:	46c0      	nop			@ (mov r8, r8)
 800c900:	46bd      	mov	sp, r7
 800c902:	b002      	add	sp, #8
 800c904:	bd80      	pop	{r7, pc}
 800c906:	46c0      	nop			@ (mov r8, r8)
 800c908:	0801adcc 	.word	0x0801adcc
 800c90c:	20000964 	.word	0x20000964
 800c910:	00000484 	.word	0x00000484
 800c914:	20000d84 	.word	0x20000d84

0800c918 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	af00      	add	r7, sp, #0
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800c91c:	4b10      	ldr	r3, [pc, #64]	@ (800c960 <OpenContinuousRxCWindow+0x48>)
 800c91e:	4a11      	ldr	r2, [pc, #68]	@ (800c964 <OpenContinuousRxCWindow+0x4c>)
 800c920:	2102      	movs	r1, #2
 800c922:	5499      	strb	r1, [r3, r2]
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800c924:	4b0e      	ldr	r3, [pc, #56]	@ (800c960 <OpenContinuousRxCWindow+0x48>)
 800c926:	4a10      	ldr	r2, [pc, #64]	@ (800c968 <OpenContinuousRxCWindow+0x50>)
 800c928:	2101      	movs	r1, #1
 800c92a:	5499      	strb	r1, [r3, r2]

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800c92c:	4b0c      	ldr	r3, [pc, #48]	@ (800c960 <OpenContinuousRxCWindow+0x48>)
 800c92e:	4a0f      	ldr	r2, [pc, #60]	@ (800c96c <OpenContinuousRxCWindow+0x54>)
 800c930:	589b      	ldr	r3, [r3, r2]
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	4a0e      	ldr	r2, [pc, #56]	@ (800c970 <OpenContinuousRxCWindow+0x58>)
 800c936:	490f      	ldr	r1, [pc, #60]	@ (800c974 <OpenContinuousRxCWindow+0x5c>)
 800c938:	0018      	movs	r0, r3
 800c93a:	f004 ff26 	bl	801178a <RegionRxConfig>
 800c93e:	1e03      	subs	r3, r0, #0
 800c940:	d00a      	beq.n	800c958 <OpenContinuousRxCWindow+0x40>
    {
        Radio.Rx( 0 ); // Continuous mode
 800c942:	4b0d      	ldr	r3, [pc, #52]	@ (800c978 <OpenContinuousRxCWindow+0x60>)
 800c944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c946:	2000      	movs	r0, #0
 800c948:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800c94a:	4b05      	ldr	r3, [pc, #20]	@ (800c960 <OpenContinuousRxCWindow+0x48>)
 800c94c:	4a05      	ldr	r2, [pc, #20]	@ (800c964 <OpenContinuousRxCWindow+0x4c>)
 800c94e:	5c99      	ldrb	r1, [r3, r2]
 800c950:	4a03      	ldr	r2, [pc, #12]	@ (800c960 <OpenContinuousRxCWindow+0x48>)
 800c952:	2390      	movs	r3, #144	@ 0x90
 800c954:	00db      	lsls	r3, r3, #3
 800c956:	54d1      	strb	r1, [r2, r3]
    }
}
 800c958:	46c0      	nop			@ (mov r8, r8)
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	46c0      	nop			@ (mov r8, r8)
 800c960:	20000964 	.word	0x20000964
 800c964:	000003f3 	.word	0x000003f3
 800c968:	000003f2 	.word	0x000003f2
 800c96c:	00000484 	.word	0x00000484
 800c970:	20000d84 	.word	0x20000d84
 800c974:	20000d44 	.word	0x20000d44
 800c978:	0801adcc 	.word	0x0801adcc

0800c97c <PrepareFrame>:

LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800c97c:	b590      	push	{r4, r7, lr}
 800c97e:	b089      	sub	sp, #36	@ 0x24
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	603b      	str	r3, [r7, #0]
 800c988:	1dfb      	adds	r3, r7, #7
 800c98a:	701a      	strb	r2, [r3, #0]
    MacCtx.PktBufferLen = 0;
 800c98c:	4b9b      	ldr	r3, [pc, #620]	@ (800cbfc <PrepareFrame+0x280>)
 800c98e:	2200      	movs	r2, #0
 800c990:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800c992:	4b9a      	ldr	r3, [pc, #616]	@ (800cbfc <PrepareFrame+0x280>)
 800c994:	4a9a      	ldr	r2, [pc, #616]	@ (800cc00 <PrepareFrame+0x284>)
 800c996:	2100      	movs	r1, #0
 800c998:	5499      	strb	r1, [r3, r2]
    uint32_t fCntUp = 0;
 800c99a:	2300      	movs	r3, #0
 800c99c:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800c9a2:	231f      	movs	r3, #31
 800c9a4:	18fb      	adds	r3, r7, r3
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	701a      	strb	r2, [r3, #0]

    if( fBuffer == NULL )
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d103      	bne.n	800c9b8 <PrepareFrame+0x3c>
    {
        fBufferSize = 0;
 800c9b0:	2330      	movs	r3, #48	@ 0x30
 800c9b2:	18fb      	adds	r3, r7, r3
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	801a      	strh	r2, [r3, #0]
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800c9b8:	2430      	movs	r4, #48	@ 0x30
 800c9ba:	193b      	adds	r3, r7, r4
 800c9bc:	881a      	ldrh	r2, [r3, #0]
 800c9be:	6839      	ldr	r1, [r7, #0]
 800c9c0:	4b90      	ldr	r3, [pc, #576]	@ (800cc04 <PrepareFrame+0x288>)
 800c9c2:	0018      	movs	r0, r3
 800c9c4:	f008 fe68 	bl	8015698 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800c9c8:	193b      	adds	r3, r7, r4
 800c9ca:	881b      	ldrh	r3, [r3, #0]
 800c9cc:	b2d9      	uxtb	r1, r3
 800c9ce:	4b8b      	ldr	r3, [pc, #556]	@ (800cbfc <PrepareFrame+0x280>)
 800c9d0:	4a8d      	ldr	r2, [pc, #564]	@ (800cc08 <PrepareFrame+0x28c>)
 800c9d2:	5499      	strb	r1, [r3, r2]
    MacCtx.PktBuffer[0] = macHdr->Value;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	781a      	ldrb	r2, [r3, #0]
 800c9d8:	4b88      	ldr	r3, [pc, #544]	@ (800cbfc <PrepareFrame+0x280>)
 800c9da:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	061b      	lsls	r3, r3, #24
 800c9e2:	0f5b      	lsrs	r3, r3, #29
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	2b07      	cmp	r3, #7
 800c9e8:	d100      	bne.n	800c9ec <PrepareFrame+0x70>
 800c9ea:	e0e3      	b.n	800cbb4 <PrepareFrame+0x238>
 800c9ec:	dd00      	ble.n	800c9f0 <PrepareFrame+0x74>
 800c9ee:	e0fa      	b.n	800cbe6 <PrepareFrame+0x26a>
 800c9f0:	2b02      	cmp	r3, #2
 800c9f2:	d006      	beq.n	800ca02 <PrepareFrame+0x86>
 800c9f4:	2b04      	cmp	r3, #4
 800c9f6:	d000      	beq.n	800c9fa <PrepareFrame+0x7e>
 800c9f8:	e0f5      	b.n	800cbe6 <PrepareFrame+0x26a>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 800c9fa:	4b80      	ldr	r3, [pc, #512]	@ (800cbfc <PrepareFrame+0x280>)
 800c9fc:	4a80      	ldr	r2, [pc, #512]	@ (800cc00 <PrepareFrame+0x284>)
 800c9fe:	2101      	movs	r1, #1
 800ca00:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800ca02:	4a7e      	ldr	r2, [pc, #504]	@ (800cbfc <PrepareFrame+0x280>)
 800ca04:	2382      	movs	r3, #130	@ 0x82
 800ca06:	005b      	lsls	r3, r3, #1
 800ca08:	2104      	movs	r1, #4
 800ca0a:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800ca0c:	4a7b      	ldr	r2, [pc, #492]	@ (800cbfc <PrepareFrame+0x280>)
 800ca0e:	2384      	movs	r3, #132	@ 0x84
 800ca10:	005b      	lsls	r3, r3, #1
 800ca12:	497e      	ldr	r1, [pc, #504]	@ (800cc0c <PrepareFrame+0x290>)
 800ca14:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800ca16:	4a79      	ldr	r2, [pc, #484]	@ (800cbfc <PrepareFrame+0x280>)
 800ca18:	2386      	movs	r3, #134	@ 0x86
 800ca1a:	005b      	lsls	r3, r3, #1
 800ca1c:	21ff      	movs	r1, #255	@ 0xff
 800ca1e:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	7819      	ldrb	r1, [r3, #0]
 800ca24:	4a75      	ldr	r2, [pc, #468]	@ (800cbfc <PrepareFrame+0x280>)
 800ca26:	230e      	movs	r3, #14
 800ca28:	33ff      	adds	r3, #255	@ 0xff
 800ca2a:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800ca2c:	4a73      	ldr	r2, [pc, #460]	@ (800cbfc <PrepareFrame+0x280>)
 800ca2e:	1df9      	adds	r1, r7, #7
 800ca30:	2394      	movs	r3, #148	@ 0x94
 800ca32:	005b      	lsls	r3, r3, #1
 800ca34:	7809      	ldrb	r1, [r1, #0]
 800ca36:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800ca38:	4b70      	ldr	r3, [pc, #448]	@ (800cbfc <PrepareFrame+0x280>)
 800ca3a:	4a75      	ldr	r2, [pc, #468]	@ (800cc10 <PrepareFrame+0x294>)
 800ca3c:	589b      	ldr	r3, [r3, r2]
 800ca3e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800ca40:	4a6e      	ldr	r2, [pc, #440]	@ (800cbfc <PrepareFrame+0x280>)
 800ca42:	2388      	movs	r3, #136	@ 0x88
 800ca44:	005b      	lsls	r3, r3, #1
 800ca46:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	7819      	ldrb	r1, [r3, #0]
 800ca4c:	4a6b      	ldr	r2, [pc, #428]	@ (800cbfc <PrepareFrame+0x280>)
 800ca4e:	238a      	movs	r3, #138	@ 0x8a
 800ca50:	005b      	lsls	r3, r3, #1
 800ca52:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800ca54:	4b69      	ldr	r3, [pc, #420]	@ (800cbfc <PrepareFrame+0x280>)
 800ca56:	4a6c      	ldr	r2, [pc, #432]	@ (800cc08 <PrepareFrame+0x28c>)
 800ca58:	5c99      	ldrb	r1, [r3, r2]
 800ca5a:	4a68      	ldr	r2, [pc, #416]	@ (800cbfc <PrepareFrame+0x280>)
 800ca5c:	2398      	movs	r3, #152	@ 0x98
 800ca5e:	005b      	lsls	r3, r3, #1
 800ca60:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800ca62:	4a66      	ldr	r2, [pc, #408]	@ (800cbfc <PrepareFrame+0x280>)
 800ca64:	2396      	movs	r3, #150	@ 0x96
 800ca66:	005b      	lsls	r3, r3, #1
 800ca68:	4966      	ldr	r1, [pc, #408]	@ (800cc04 <PrepareFrame+0x288>)
 800ca6a:	50d1      	str	r1, [r2, r3]

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800ca6c:	2318      	movs	r3, #24
 800ca6e:	18fb      	adds	r3, r7, r3
 800ca70:	0018      	movs	r0, r3
 800ca72:	f003 fd05 	bl	8010480 <LoRaMacCryptoGetFCntUp>
 800ca76:	1e03      	subs	r3, r0, #0
 800ca78:	d001      	beq.n	800ca7e <PrepareFrame+0x102>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800ca7a:	2312      	movs	r3, #18
 800ca7c:	e0b9      	b.n	800cbf2 <PrepareFrame+0x276>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800ca7e:	69bb      	ldr	r3, [r7, #24]
 800ca80:	b299      	uxth	r1, r3
 800ca82:	4a5e      	ldr	r2, [pc, #376]	@ (800cbfc <PrepareFrame+0x280>)
 800ca84:	238b      	movs	r3, #139	@ 0x8b
 800ca86:	005b      	lsls	r3, r3, #1
 800ca88:	52d1      	strh	r1, [r2, r3]

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 800ca8a:	4b5c      	ldr	r3, [pc, #368]	@ (800cbfc <PrepareFrame+0x280>)
 800ca8c:	4a61      	ldr	r2, [pc, #388]	@ (800cc14 <PrepareFrame+0x298>)
 800ca8e:	2100      	movs	r1, #0
 800ca90:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = false;
 800ca92:	4a5a      	ldr	r2, [pc, #360]	@ (800cbfc <PrepareFrame+0x280>)
 800ca94:	2388      	movs	r3, #136	@ 0x88
 800ca96:	00db      	lsls	r3, r3, #3
 800ca98:	2100      	movs	r1, #0
 800ca9a:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800ca9c:	69b9      	ldr	r1, [r7, #24]
 800ca9e:	4a57      	ldr	r2, [pc, #348]	@ (800cbfc <PrepareFrame+0x280>)
 800caa0:	2389      	movs	r3, #137	@ 0x89
 800caa2:	00db      	lsls	r3, r3, #3
 800caa4:	50d1      	str	r1, [r2, r3]

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800caa6:	2314      	movs	r3, #20
 800caa8:	18fb      	adds	r3, r7, r3
 800caaa:	0018      	movs	r0, r3
 800caac:	f002 fe2e 	bl	800f70c <LoRaMacCommandsGetSizeSerializedCmds>
 800cab0:	1e03      	subs	r3, r0, #0
 800cab2:	d001      	beq.n	800cab8 <PrepareFrame+0x13c>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cab4:	2313      	movs	r3, #19
 800cab6:	e09c      	b.n	800cbf2 <PrepareFrame+0x276>
            }

            if( macCmdsSize > 0 )
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d100      	bne.n	800cac0 <PrepareFrame+0x144>
 800cabe:	e094      	b.n	800cbea <PrepareFrame+0x26e>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 800cac0:	4b4e      	ldr	r3, [pc, #312]	@ (800cbfc <PrepareFrame+0x280>)
 800cac2:	4a53      	ldr	r2, [pc, #332]	@ (800cc10 <PrepareFrame+0x294>)
 800cac4:	589b      	ldr	r3, [r3, r2]
 800cac6:	22f9      	movs	r2, #249	@ 0xf9
 800cac8:	569b      	ldrsb	r3, [r3, r2]
 800caca:	221f      	movs	r2, #31
 800cacc:	18bc      	adds	r4, r7, r2
 800cace:	0018      	movs	r0, r3
 800cad0:	f7fe fbf8 	bl	800b2c4 <GetMaxAppPayloadWithoutFOptsLength>
 800cad4:	0003      	movs	r3, r0
 800cad6:	7023      	strb	r3, [r4, #0]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800cad8:	4b48      	ldr	r3, [pc, #288]	@ (800cbfc <PrepareFrame+0x280>)
 800cada:	4a4b      	ldr	r2, [pc, #300]	@ (800cc08 <PrepareFrame+0x28c>)
 800cadc:	5c9b      	ldrb	r3, [r3, r2]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d024      	beq.n	800cb2c <PrepareFrame+0x1b0>
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	2b0f      	cmp	r3, #15
 800cae6:	d821      	bhi.n	800cb2c <PrepareFrame+0x1b0>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800cae8:	4a4b      	ldr	r2, [pc, #300]	@ (800cc18 <PrepareFrame+0x29c>)
 800caea:	2314      	movs	r3, #20
 800caec:	18fb      	adds	r3, r7, r3
 800caee:	0019      	movs	r1, r3
 800caf0:	200f      	movs	r0, #15
 800caf2:	f002 fe21 	bl	800f738 <LoRaMacCommandsSerializeCmds>
 800caf6:	1e03      	subs	r3, r0, #0
 800caf8:	d001      	beq.n	800cafe <PrepareFrame+0x182>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cafa:	2313      	movs	r3, #19
 800cafc:	e079      	b.n	800cbf2 <PrepareFrame+0x276>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	1c1a      	adds	r2, r3, #0
 800cb02:	230f      	movs	r3, #15
 800cb04:	4013      	ands	r3, r2
 800cb06:	b2da      	uxtb	r2, r3
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	210f      	movs	r1, #15
 800cb0c:	400a      	ands	r2, r1
 800cb0e:	0010      	movs	r0, r2
 800cb10:	781a      	ldrb	r2, [r3, #0]
 800cb12:	210f      	movs	r1, #15
 800cb14:	438a      	bics	r2, r1
 800cb16:	1c11      	adds	r1, r2, #0
 800cb18:	1c02      	adds	r2, r0, #0
 800cb1a:	430a      	orrs	r2, r1
 800cb1c:	701a      	strb	r2, [r3, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	7819      	ldrb	r1, [r3, #0]
 800cb22:	4a36      	ldr	r2, [pc, #216]	@ (800cbfc <PrepareFrame+0x280>)
 800cb24:	238a      	movs	r3, #138	@ 0x8a
 800cb26:	005b      	lsls	r3, r3, #1
 800cb28:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800cb2a:	e05e      	b.n	800cbea <PrepareFrame+0x26e>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800cb2c:	4b33      	ldr	r3, [pc, #204]	@ (800cbfc <PrepareFrame+0x280>)
 800cb2e:	4a36      	ldr	r2, [pc, #216]	@ (800cc08 <PrepareFrame+0x28c>)
 800cb30:	5c9b      	ldrb	r3, [r3, r2]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d016      	beq.n	800cb64 <PrepareFrame+0x1e8>
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	2b0f      	cmp	r3, #15
 800cb3a:	d913      	bls.n	800cb64 <PrepareFrame+0x1e8>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800cb3c:	231f      	movs	r3, #31
 800cb3e:	18fb      	adds	r3, r7, r3
 800cb40:	7818      	ldrb	r0, [r3, #0]
 800cb42:	4b2e      	ldr	r3, [pc, #184]	@ (800cbfc <PrepareFrame+0x280>)
 800cb44:	4a32      	ldr	r2, [pc, #200]	@ (800cc10 <PrepareFrame+0x294>)
 800cb46:	589b      	ldr	r3, [r3, r2]
 800cb48:	3341      	adds	r3, #65	@ 0x41
 800cb4a:	33ff      	adds	r3, #255	@ 0xff
 800cb4c:	001a      	movs	r2, r3
 800cb4e:	2314      	movs	r3, #20
 800cb50:	18fb      	adds	r3, r7, r3
 800cb52:	0019      	movs	r1, r3
 800cb54:	f002 fdf0 	bl	800f738 <LoRaMacCommandsSerializeCmds>
 800cb58:	1e03      	subs	r3, r0, #0
 800cb5a:	d001      	beq.n	800cb60 <PrepareFrame+0x1e4>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cb5c:	2313      	movs	r3, #19
 800cb5e:	e048      	b.n	800cbf2 <PrepareFrame+0x276>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800cb60:	230a      	movs	r3, #10
 800cb62:	e046      	b.n	800cbf2 <PrepareFrame+0x276>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800cb64:	231f      	movs	r3, #31
 800cb66:	18fb      	adds	r3, r7, r3
 800cb68:	7818      	ldrb	r0, [r3, #0]
 800cb6a:	4b24      	ldr	r3, [pc, #144]	@ (800cbfc <PrepareFrame+0x280>)
 800cb6c:	4a28      	ldr	r2, [pc, #160]	@ (800cc10 <PrepareFrame+0x294>)
 800cb6e:	589b      	ldr	r3, [r3, r2]
 800cb70:	3341      	adds	r3, #65	@ 0x41
 800cb72:	33ff      	adds	r3, #255	@ 0xff
 800cb74:	001a      	movs	r2, r3
 800cb76:	2314      	movs	r3, #20
 800cb78:	18fb      	adds	r3, r7, r3
 800cb7a:	0019      	movs	r1, r3
 800cb7c:	f002 fddc 	bl	800f738 <LoRaMacCommandsSerializeCmds>
 800cb80:	1e03      	subs	r3, r0, #0
 800cb82:	d001      	beq.n	800cb88 <PrepareFrame+0x20c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cb84:	2313      	movs	r3, #19
 800cb86:	e034      	b.n	800cbf2 <PrepareFrame+0x276>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800cb88:	4a1c      	ldr	r2, [pc, #112]	@ (800cbfc <PrepareFrame+0x280>)
 800cb8a:	2394      	movs	r3, #148	@ 0x94
 800cb8c:	005b      	lsls	r3, r3, #1
 800cb8e:	2100      	movs	r1, #0
 800cb90:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 800cb92:	4b1a      	ldr	r3, [pc, #104]	@ (800cbfc <PrepareFrame+0x280>)
 800cb94:	4a1e      	ldr	r2, [pc, #120]	@ (800cc10 <PrepareFrame+0x294>)
 800cb96:	589b      	ldr	r3, [r3, r2]
 800cb98:	3341      	adds	r3, #65	@ 0x41
 800cb9a:	33ff      	adds	r3, #255	@ 0xff
 800cb9c:	0019      	movs	r1, r3
 800cb9e:	4a17      	ldr	r2, [pc, #92]	@ (800cbfc <PrepareFrame+0x280>)
 800cba0:	2396      	movs	r3, #150	@ 0x96
 800cba2:	005b      	lsls	r3, r3, #1
 800cba4:	50d1      	str	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	b2d9      	uxtb	r1, r3
 800cbaa:	4a14      	ldr	r2, [pc, #80]	@ (800cbfc <PrepareFrame+0x280>)
 800cbac:	2398      	movs	r3, #152	@ 0x98
 800cbae:	005b      	lsls	r3, r3, #1
 800cbb0:	54d1      	strb	r1, [r2, r3]
            break;
 800cbb2:	e01a      	b.n	800cbea <PrepareFrame+0x26e>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d019      	beq.n	800cbee <PrepareFrame+0x272>
 800cbba:	4b10      	ldr	r3, [pc, #64]	@ (800cbfc <PrepareFrame+0x280>)
 800cbbc:	4a12      	ldr	r2, [pc, #72]	@ (800cc08 <PrepareFrame+0x28c>)
 800cbbe:	5c9b      	ldrb	r3, [r3, r2]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d014      	beq.n	800cbee <PrepareFrame+0x272>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800cbc4:	4815      	ldr	r0, [pc, #84]	@ (800cc1c <PrepareFrame+0x2a0>)
 800cbc6:	4b0d      	ldr	r3, [pc, #52]	@ (800cbfc <PrepareFrame+0x280>)
 800cbc8:	4a0f      	ldr	r2, [pc, #60]	@ (800cc08 <PrepareFrame+0x28c>)
 800cbca:	5c9b      	ldrb	r3, [r3, r2]
 800cbcc:	001a      	movs	r2, r3
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	0019      	movs	r1, r3
 800cbd2:	f008 fd61 	bl	8015698 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800cbd6:	4b09      	ldr	r3, [pc, #36]	@ (800cbfc <PrepareFrame+0x280>)
 800cbd8:	4a0b      	ldr	r2, [pc, #44]	@ (800cc08 <PrepareFrame+0x28c>)
 800cbda:	5c9b      	ldrb	r3, [r3, r2]
 800cbdc:	3301      	adds	r3, #1
 800cbde:	b29a      	uxth	r2, r3
 800cbe0:	4b06      	ldr	r3, [pc, #24]	@ (800cbfc <PrepareFrame+0x280>)
 800cbe2:	801a      	strh	r2, [r3, #0]
            }
            break;
 800cbe4:	e003      	b.n	800cbee <PrepareFrame+0x272>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800cbe6:	2302      	movs	r3, #2
 800cbe8:	e003      	b.n	800cbf2 <PrepareFrame+0x276>
            break;
 800cbea:	46c0      	nop			@ (mov r8, r8)
 800cbec:	e000      	b.n	800cbf0 <PrepareFrame+0x274>
            break;
 800cbee:	46c0      	nop			@ (mov r8, r8)
    }

    return LORAMAC_STATUS_OK;
 800cbf0:	2300      	movs	r3, #0
}
 800cbf2:	0018      	movs	r0, r3
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	b009      	add	sp, #36	@ 0x24
 800cbf8:	bd90      	pop	{r4, r7, pc}
 800cbfa:	46c0      	nop			@ (mov r8, r8)
 800cbfc:	20000964 	.word	0x20000964
 800cc00:	00000414 	.word	0x00000414
 800cc04:	20000a9c 	.word	0x20000a9c
 800cc08:	00000237 	.word	0x00000237
 800cc0c:	20000966 	.word	0x20000966
 800cc10:	00000484 	.word	0x00000484
 800cc14:	00000441 	.word	0x00000441
 800cc18:	20000a7c 	.word	0x20000a7c
 800cc1c:	20000967 	.word	0x20000967

0800cc20 <SendFrameOnChannel>:

LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800cc20:	b590      	push	{r4, r7, lr}
 800cc22:	b089      	sub	sp, #36	@ 0x24
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	0002      	movs	r2, r0
 800cc28:	1dfb      	adds	r3, r7, #7
 800cc2a:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800cc2c:	230b      	movs	r3, #11
 800cc2e:	18fb      	adds	r3, r7, r3
 800cc30:	2200      	movs	r2, #0
 800cc32:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
 800cc34:	210c      	movs	r1, #12
 800cc36:	187b      	adds	r3, r7, r1
 800cc38:	1dfa      	adds	r2, r7, #7
 800cc3a:	7812      	ldrb	r2, [r2, #0]
 800cc3c:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800cc3e:	4b56      	ldr	r3, [pc, #344]	@ (800cd98 <SendFrameOnChannel+0x178>)
 800cc40:	4a56      	ldr	r2, [pc, #344]	@ (800cd9c <SendFrameOnChannel+0x17c>)
 800cc42:	589b      	ldr	r3, [r3, r2]
 800cc44:	22f9      	movs	r2, #249	@ 0xf9
 800cc46:	569a      	ldrsb	r2, [r3, r2]
 800cc48:	187b      	adds	r3, r7, r1
 800cc4a:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800cc4c:	4b52      	ldr	r3, [pc, #328]	@ (800cd98 <SendFrameOnChannel+0x178>)
 800cc4e:	4a53      	ldr	r2, [pc, #332]	@ (800cd9c <SendFrameOnChannel+0x17c>)
 800cc50:	589b      	ldr	r3, [r3, r2]
 800cc52:	22f8      	movs	r2, #248	@ 0xf8
 800cc54:	569a      	ldrsb	r2, [r3, r2]
 800cc56:	187b      	adds	r3, r7, r1
 800cc58:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800cc5a:	4b4f      	ldr	r3, [pc, #316]	@ (800cd98 <SendFrameOnChannel+0x178>)
 800cc5c:	4a4f      	ldr	r2, [pc, #316]	@ (800cd9c <SendFrameOnChannel+0x17c>)
 800cc5e:	589a      	ldr	r2, [r3, r2]
 800cc60:	2398      	movs	r3, #152	@ 0x98
 800cc62:	005b      	lsls	r3, r3, #1
 800cc64:	58d2      	ldr	r2, [r2, r3]
 800cc66:	187b      	adds	r3, r7, r1
 800cc68:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800cc6a:	4b4b      	ldr	r3, [pc, #300]	@ (800cd98 <SendFrameOnChannel+0x178>)
 800cc6c:	4a4b      	ldr	r2, [pc, #300]	@ (800cd9c <SendFrameOnChannel+0x17c>)
 800cc6e:	589a      	ldr	r2, [r3, r2]
 800cc70:	239a      	movs	r3, #154	@ 0x9a
 800cc72:	005b      	lsls	r3, r3, #1
 800cc74:	58d2      	ldr	r2, [r2, r3]
 800cc76:	187b      	adds	r3, r7, r1
 800cc78:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800cc7a:	4b47      	ldr	r3, [pc, #284]	@ (800cd98 <SendFrameOnChannel+0x178>)
 800cc7c:	881a      	ldrh	r2, [r3, #0]
 800cc7e:	187b      	adds	r3, r7, r1
 800cc80:	819a      	strh	r2, [r3, #12]


    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800cc82:	f002 fa75 	bl	800f170 <LoRaMacClassBIsBeaconExpected>
 800cc86:	1e03      	subs	r3, r0, #0
 800cc88:	d001      	beq.n	800cc8e <SendFrameOnChannel+0x6e>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800cc8a:	230e      	movs	r3, #14
 800cc8c:	e07f      	b.n	800cd8e <SendFrameOnChannel+0x16e>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800cc8e:	4b42      	ldr	r3, [pc, #264]	@ (800cd98 <SendFrameOnChannel+0x178>)
 800cc90:	4a42      	ldr	r2, [pc, #264]	@ (800cd9c <SendFrameOnChannel+0x17c>)
 800cc92:	589b      	ldr	r3, [r3, r2]
 800cc94:	22f0      	movs	r2, #240	@ 0xf0
 800cc96:	5c9b      	ldrb	r3, [r3, r2]
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d10d      	bne.n	800ccb8 <SendFrameOnChannel+0x98>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800cc9c:	f002 fa6e 	bl	800f17c <LoRaMacClassBIsPingExpected>
 800cca0:	1e03      	subs	r3, r0, #0
 800cca2:	d001      	beq.n	800cca8 <SendFrameOnChannel+0x88>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800cca4:	230f      	movs	r3, #15
 800cca6:	e072      	b.n	800cd8e <SendFrameOnChannel+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800cca8:	f002 fa6e 	bl	800f188 <LoRaMacClassBIsMulticastExpected>
 800ccac:	1e03      	subs	r3, r0, #0
 800ccae:	d001      	beq.n	800ccb4 <SendFrameOnChannel+0x94>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800ccb0:	230f      	movs	r3, #15
 800ccb2:	e06c      	b.n	800cd8e <SendFrameOnChannel+0x16e>
        }
        else
        {
            LoRaMacClassBStopRxSlots( );
 800ccb4:	f002 fadb 	bl	800f26e <LoRaMacClassBStopRxSlots>
        }
    }
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800ccb8:	4b37      	ldr	r3, [pc, #220]	@ (800cd98 <SendFrameOnChannel+0x178>)
 800ccba:	4a38      	ldr	r2, [pc, #224]	@ (800cd9c <SendFrameOnChannel+0x17c>)
 800ccbc:	589b      	ldr	r3, [r3, r2]
 800ccbe:	7818      	ldrb	r0, [r3, #0]
 800ccc0:	4b37      	ldr	r3, [pc, #220]	@ (800cda0 <SendFrameOnChannel+0x180>)
 800ccc2:	240b      	movs	r4, #11
 800ccc4:	193a      	adds	r2, r7, r4
 800ccc6:	210c      	movs	r1, #12
 800ccc8:	1879      	adds	r1, r7, r1
 800ccca:	f004 fd78 	bl	80117be <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ccce:	4b32      	ldr	r3, [pc, #200]	@ (800cd98 <SendFrameOnChannel+0x178>)
 800ccd0:	4a34      	ldr	r2, [pc, #208]	@ (800cda4 <SendFrameOnChannel+0x184>)
 800ccd2:	2101      	movs	r1, #1
 800ccd4:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800ccd6:	4b30      	ldr	r3, [pc, #192]	@ (800cd98 <SendFrameOnChannel+0x178>)
 800ccd8:	4a30      	ldr	r2, [pc, #192]	@ (800cd9c <SendFrameOnChannel+0x17c>)
 800ccda:	589b      	ldr	r3, [r3, r2]
 800ccdc:	22f9      	movs	r2, #249	@ 0xf9
 800ccde:	569b      	ldrsb	r3, [r3, r2]
 800cce0:	b2d9      	uxtb	r1, r3
 800cce2:	4b2d      	ldr	r3, [pc, #180]	@ (800cd98 <SendFrameOnChannel+0x178>)
 800cce4:	4a30      	ldr	r2, [pc, #192]	@ (800cda8 <SendFrameOnChannel+0x188>)
 800cce6:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
 800cce8:	193b      	adds	r3, r7, r4
 800ccea:	2100      	movs	r1, #0
 800ccec:	5659      	ldrsb	r1, [r3, r1]
 800ccee:	4b2a      	ldr	r3, [pc, #168]	@ (800cd98 <SendFrameOnChannel+0x178>)
 800ccf0:	4a2e      	ldr	r2, [pc, #184]	@ (800cdac <SendFrameOnChannel+0x18c>)
 800ccf2:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
 800ccf4:	1dfb      	adds	r3, r7, #7
 800ccf6:	781a      	ldrb	r2, [r3, #0]
 800ccf8:	4b27      	ldr	r3, [pc, #156]	@ (800cd98 <SendFrameOnChannel+0x178>)
 800ccfa:	492d      	ldr	r1, [pc, #180]	@ (800cdb0 <SendFrameOnChannel+0x190>)
 800ccfc:	505a      	str	r2, [r3, r1]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800ccfe:	4a26      	ldr	r2, [pc, #152]	@ (800cd98 <SendFrameOnChannel+0x178>)
 800cd00:	2383      	movs	r3, #131	@ 0x83
 800cd02:	00db      	lsls	r3, r3, #3
 800cd04:	58d2      	ldr	r2, [r2, r3]
 800cd06:	4b24      	ldr	r3, [pc, #144]	@ (800cd98 <SendFrameOnChannel+0x178>)
 800cd08:	492a      	ldr	r1, [pc, #168]	@ (800cdb4 <SendFrameOnChannel+0x194>)
 800cd0a:	505a      	str	r2, [r3, r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800cd0c:	4a22      	ldr	r2, [pc, #136]	@ (800cd98 <SendFrameOnChannel+0x178>)
 800cd0e:	2383      	movs	r3, #131	@ 0x83
 800cd10:	00db      	lsls	r3, r3, #3
 800cd12:	58d2      	ldr	r2, [r2, r3]
 800cd14:	4b20      	ldr	r3, [pc, #128]	@ (800cd98 <SendFrameOnChannel+0x178>)
 800cd16:	4928      	ldr	r1, [pc, #160]	@ (800cdb8 <SendFrameOnChannel+0x198>)
 800cd18:	505a      	str	r2, [r3, r1]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800cd1a:	f002 fa3b 	bl	800f194 <LoRaMacClassBIsBeaconModeActive>
 800cd1e:	1e03      	subs	r3, r0, #0
 800cd20:	d00d      	beq.n	800cd3e <SendFrameOnChannel+0x11e>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800cd22:	4a1d      	ldr	r2, [pc, #116]	@ (800cd98 <SendFrameOnChannel+0x178>)
 800cd24:	2383      	movs	r3, #131	@ 0x83
 800cd26:	00db      	lsls	r3, r3, #3
 800cd28:	58d3      	ldr	r3, [r2, r3]
 800cd2a:	0018      	movs	r0, r3
 800cd2c:	f002 fa96 	bl	800f25c <LoRaMacClassBIsUplinkCollision>
 800cd30:	0003      	movs	r3, r0
 800cd32:	61fb      	str	r3, [r7, #28]

        if( collisionTime > 0 )
 800cd34:	69fb      	ldr	r3, [r7, #28]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d001      	beq.n	800cd3e <SendFrameOnChannel+0x11e>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800cd3a:	2310      	movs	r3, #16
 800cd3c:	e027      	b.n	800cd8e <SendFrameOnChannel+0x16e>
        }
    }

    LoRaMacClassBHaltBeaconing( );
 800cd3e:	f002 fa39 	bl	800f1b4 <LoRaMacClassBHaltBeaconing>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800cd42:	4a15      	ldr	r2, [pc, #84]	@ (800cd98 <SendFrameOnChannel+0x178>)
 800cd44:	23d0      	movs	r3, #208	@ 0xd0
 800cd46:	009b      	lsls	r3, r3, #2
 800cd48:	58d3      	ldr	r3, [r2, r3]
 800cd4a:	2202      	movs	r2, #2
 800cd4c:	431a      	orrs	r2, r3
 800cd4e:	0011      	movs	r1, r2
 800cd50:	4a11      	ldr	r2, [pc, #68]	@ (800cd98 <SendFrameOnChannel+0x178>)
 800cd52:	23d0      	movs	r3, #208	@ 0xd0
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	50d1      	str	r1, [r2, r3]
    if( MacCtx.NodeAckRequested == false )
 800cd58:	4b0f      	ldr	r3, [pc, #60]	@ (800cd98 <SendFrameOnChannel+0x178>)
 800cd5a:	4a18      	ldr	r2, [pc, #96]	@ (800cdbc <SendFrameOnChannel+0x19c>)
 800cd5c:	5c9b      	ldrb	r3, [r3, r2]
 800cd5e:	2201      	movs	r2, #1
 800cd60:	4053      	eors	r3, r2
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d009      	beq.n	800cd7c <SendFrameOnChannel+0x15c>
    {
        MacCtx.ChannelsNbTransCounter++;
 800cd68:	4a0b      	ldr	r2, [pc, #44]	@ (800cd98 <SendFrameOnChannel+0x178>)
 800cd6a:	2382      	movs	r3, #130	@ 0x82
 800cd6c:	00db      	lsls	r3, r3, #3
 800cd6e:	5cd3      	ldrb	r3, [r2, r3]
 800cd70:	3301      	adds	r3, #1
 800cd72:	b2d9      	uxtb	r1, r3
 800cd74:	4a08      	ldr	r2, [pc, #32]	@ (800cd98 <SendFrameOnChannel+0x178>)
 800cd76:	2382      	movs	r3, #130	@ 0x82
 800cd78:	00db      	lsls	r3, r3, #3
 800cd7a:	54d1      	strb	r1, [r2, r3]
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800cd7c:	4b10      	ldr	r3, [pc, #64]	@ (800cdc0 <SendFrameOnChannel+0x1a0>)
 800cd7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd80:	4a05      	ldr	r2, [pc, #20]	@ (800cd98 <SendFrameOnChannel+0x178>)
 800cd82:	8812      	ldrh	r2, [r2, #0]
 800cd84:	b2d1      	uxtb	r1, r2
 800cd86:	4a0f      	ldr	r2, [pc, #60]	@ (800cdc4 <SendFrameOnChannel+0x1a4>)
 800cd88:	0010      	movs	r0, r2
 800cd8a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800cd8c:	2300      	movs	r3, #0
}
 800cd8e:	0018      	movs	r0, r3
 800cd90:	46bd      	mov	sp, r7
 800cd92:	b009      	add	sp, #36	@ 0x24
 800cd94:	bd90      	pop	{r4, r7, pc}
 800cd96:	46c0      	nop			@ (mov r8, r8)
 800cd98:	20000964 	.word	0x20000964
 800cd9c:	00000484 	.word	0x00000484
 800cda0:	20000d7c 	.word	0x20000d7c
 800cda4:	0000043d 	.word	0x0000043d
 800cda8:	0000043e 	.word	0x0000043e
 800cdac:	0000043f 	.word	0x0000043f
 800cdb0:	0000044c 	.word	0x0000044c
 800cdb4:	00000444 	.word	0x00000444
 800cdb8:	00000454 	.word	0x00000454
 800cdbc:	00000414 	.word	0x00000414
 800cdc0:	0801adcc 	.word	0x0801adcc
 800cdc4:	20000966 	.word	0x20000966

0800cdc8 <SetTxContinuousWave>:

LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b086      	sub	sp, #24
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	0002      	movs	r2, r0
 800cdd0:	1dbb      	adds	r3, r7, #6
 800cdd2:	801a      	strh	r2, [r3, #0]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 800cdd4:	4b20      	ldr	r3, [pc, #128]	@ (800ce58 <SetTxContinuousWave+0x90>)
 800cdd6:	4a21      	ldr	r2, [pc, #132]	@ (800ce5c <SetTxContinuousWave+0x94>)
 800cdd8:	5c9a      	ldrb	r2, [r3, r2]
 800cdda:	2108      	movs	r1, #8
 800cddc:	187b      	adds	r3, r7, r1
 800cdde:	701a      	strb	r2, [r3, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800cde0:	4b1d      	ldr	r3, [pc, #116]	@ (800ce58 <SetTxContinuousWave+0x90>)
 800cde2:	4a1f      	ldr	r2, [pc, #124]	@ (800ce60 <SetTxContinuousWave+0x98>)
 800cde4:	589b      	ldr	r3, [r3, r2]
 800cde6:	22f9      	movs	r2, #249	@ 0xf9
 800cde8:	569a      	ldrsb	r2, [r3, r2]
 800cdea:	187b      	adds	r3, r7, r1
 800cdec:	705a      	strb	r2, [r3, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800cdee:	4b1a      	ldr	r3, [pc, #104]	@ (800ce58 <SetTxContinuousWave+0x90>)
 800cdf0:	4a1b      	ldr	r2, [pc, #108]	@ (800ce60 <SetTxContinuousWave+0x98>)
 800cdf2:	589b      	ldr	r3, [r3, r2]
 800cdf4:	22f8      	movs	r2, #248	@ 0xf8
 800cdf6:	569a      	ldrsb	r2, [r3, r2]
 800cdf8:	187b      	adds	r3, r7, r1
 800cdfa:	709a      	strb	r2, [r3, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800cdfc:	4b16      	ldr	r3, [pc, #88]	@ (800ce58 <SetTxContinuousWave+0x90>)
 800cdfe:	4a18      	ldr	r2, [pc, #96]	@ (800ce60 <SetTxContinuousWave+0x98>)
 800ce00:	589a      	ldr	r2, [r3, r2]
 800ce02:	2398      	movs	r3, #152	@ 0x98
 800ce04:	005b      	lsls	r3, r3, #1
 800ce06:	58d2      	ldr	r2, [r2, r3]
 800ce08:	187b      	adds	r3, r7, r1
 800ce0a:	605a      	str	r2, [r3, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800ce0c:	4b12      	ldr	r3, [pc, #72]	@ (800ce58 <SetTxContinuousWave+0x90>)
 800ce0e:	4a14      	ldr	r2, [pc, #80]	@ (800ce60 <SetTxContinuousWave+0x98>)
 800ce10:	589a      	ldr	r2, [r3, r2]
 800ce12:	239a      	movs	r3, #154	@ 0x9a
 800ce14:	005b      	lsls	r3, r3, #1
 800ce16:	58d2      	ldr	r2, [r2, r3]
 800ce18:	187b      	adds	r3, r7, r1
 800ce1a:	609a      	str	r2, [r3, #8]
    continuousWave.Timeout = timeout;
 800ce1c:	187b      	adds	r3, r7, r1
 800ce1e:	1dba      	adds	r2, r7, #6
 800ce20:	8812      	ldrh	r2, [r2, #0]
 800ce22:	819a      	strh	r2, [r3, #12]

    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 800ce24:	4b0c      	ldr	r3, [pc, #48]	@ (800ce58 <SetTxContinuousWave+0x90>)
 800ce26:	4a0e      	ldr	r2, [pc, #56]	@ (800ce60 <SetTxContinuousWave+0x98>)
 800ce28:	589b      	ldr	r3, [r3, r2]
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	187a      	adds	r2, r7, r1
 800ce2e:	0011      	movs	r1, r2
 800ce30:	0018      	movs	r0, r3
 800ce32:	f004 fda8 	bl	8011986 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800ce36:	4a08      	ldr	r2, [pc, #32]	@ (800ce58 <SetTxContinuousWave+0x90>)
 800ce38:	23d0      	movs	r3, #208	@ 0xd0
 800ce3a:	009b      	lsls	r3, r3, #2
 800ce3c:	58d3      	ldr	r3, [r2, r3]
 800ce3e:	2202      	movs	r2, #2
 800ce40:	431a      	orrs	r2, r3
 800ce42:	0011      	movs	r1, r2
 800ce44:	4a04      	ldr	r2, [pc, #16]	@ (800ce58 <SetTxContinuousWave+0x90>)
 800ce46:	23d0      	movs	r3, #208	@ 0xd0
 800ce48:	009b      	lsls	r3, r3, #2
 800ce4a:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 800ce4c:	2300      	movs	r3, #0
}
 800ce4e:	0018      	movs	r0, r3
 800ce50:	46bd      	mov	sp, r7
 800ce52:	b006      	add	sp, #24
 800ce54:	bd80      	pop	{r7, pc}
 800ce56:	46c0      	nop			@ (mov r8, r8)
 800ce58:	20000964 	.word	0x20000964
 800ce5c:	00000415 	.word	0x00000415
 800ce60:	00000484 	.word	0x00000484

0800ce64 <SetTxContinuousWave1>:

LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6039      	str	r1, [r7, #0]
 800ce6c:	0011      	movs	r1, r2
 800ce6e:	1dbb      	adds	r3, r7, #6
 800ce70:	1c02      	adds	r2, r0, #0
 800ce72:	801a      	strh	r2, [r3, #0]
 800ce74:	1d7b      	adds	r3, r7, #5
 800ce76:	1c0a      	adds	r2, r1, #0
 800ce78:	701a      	strb	r2, [r3, #0]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800ce7a:	4b0c      	ldr	r3, [pc, #48]	@ (800ceac <SetTxContinuousWave1+0x48>)
 800ce7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce7e:	1d7a      	adds	r2, r7, #5
 800ce80:	2100      	movs	r1, #0
 800ce82:	5651      	ldrsb	r1, [r2, r1]
 800ce84:	1dba      	adds	r2, r7, #6
 800ce86:	8812      	ldrh	r2, [r2, #0]
 800ce88:	6838      	ldr	r0, [r7, #0]
 800ce8a:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800ce8c:	4a08      	ldr	r2, [pc, #32]	@ (800ceb0 <SetTxContinuousWave1+0x4c>)
 800ce8e:	23d0      	movs	r3, #208	@ 0xd0
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	58d3      	ldr	r3, [r2, r3]
 800ce94:	2202      	movs	r2, #2
 800ce96:	431a      	orrs	r2, r3
 800ce98:	0011      	movs	r1, r2
 800ce9a:	4a05      	ldr	r2, [pc, #20]	@ (800ceb0 <SetTxContinuousWave1+0x4c>)
 800ce9c:	23d0      	movs	r3, #208	@ 0xd0
 800ce9e:	009b      	lsls	r3, r3, #2
 800cea0:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 800cea2:	2300      	movs	r3, #0
}
 800cea4:	0018      	movs	r0, r3
 800cea6:	46bd      	mov	sp, r7
 800cea8:	b002      	add	sp, #8
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	0801adcc 	.word	0x0801adcc
 800ceb0:	20000964 	.word	0x20000964

0800ceb4 <GetCtxs>:

LoRaMacCtxs_t* GetCtxs( void )
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	af00      	add	r7, sp, #0
    Contexts.MacNvmCtx = &NvmMacCtx;
 800ceba:	4b20      	ldr	r3, [pc, #128]	@ (800cf3c <GetCtxs+0x88>)
 800cebc:	4a20      	ldr	r2, [pc, #128]	@ (800cf40 <GetCtxs+0x8c>)
 800cebe:	601a      	str	r2, [r3, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 800cec0:	4b1e      	ldr	r3, [pc, #120]	@ (800cf3c <GetCtxs+0x88>)
 800cec2:	22ee      	movs	r2, #238	@ 0xee
 800cec4:	0052      	lsls	r2, r2, #1
 800cec6:	605a      	str	r2, [r3, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800cec8:	4b1e      	ldr	r3, [pc, #120]	@ (800cf44 <GetCtxs+0x90>)
 800ceca:	0018      	movs	r0, r3
 800cecc:	f003 faca 	bl	8010464 <LoRaMacCryptoGetNvmCtx>
 800ced0:	0002      	movs	r2, r0
 800ced2:	4b1a      	ldr	r3, [pc, #104]	@ (800cf3c <GetCtxs+0x88>)
 800ced4:	611a      	str	r2, [r3, #16]
    GetNvmCtxParams_t params ={ 0 };
 800ced6:	2300      	movs	r3, #0
 800ced8:	607b      	str	r3, [r7, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800ceda:	4b1b      	ldr	r3, [pc, #108]	@ (800cf48 <GetCtxs+0x94>)
 800cedc:	4a1b      	ldr	r2, [pc, #108]	@ (800cf4c <GetCtxs+0x98>)
 800cede:	589b      	ldr	r3, [r3, r2]
 800cee0:	781b      	ldrb	r3, [r3, #0]
 800cee2:	1d3a      	adds	r2, r7, #4
 800cee4:	0011      	movs	r1, r2
 800cee6:	0018      	movs	r0, r3
 800cee8:	f004 fbcd 	bl	8011686 <RegionGetNvmCtx>
 800ceec:	0002      	movs	r2, r0
 800ceee:	4b13      	ldr	r3, [pc, #76]	@ (800cf3c <GetCtxs+0x88>)
 800cef0:	609a      	str	r2, [r3, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	4b11      	ldr	r3, [pc, #68]	@ (800cf3c <GetCtxs+0x88>)
 800cef6:	60da      	str	r2, [r3, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800cef8:	4b15      	ldr	r3, [pc, #84]	@ (800cf50 <GetCtxs+0x9c>)
 800cefa:	0018      	movs	r0, r3
 800cefc:	f7fc f9f6 	bl	80092ec <SecureElementGetNvmCtx>
 800cf00:	0002      	movs	r2, r0
 800cf02:	4b0e      	ldr	r3, [pc, #56]	@ (800cf3c <GetCtxs+0x88>)
 800cf04:	619a      	str	r2, [r3, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 800cf06:	4b13      	ldr	r3, [pc, #76]	@ (800cf54 <GetCtxs+0xa0>)
 800cf08:	0018      	movs	r0, r3
 800cf0a:	f002 fb1b 	bl	800f544 <LoRaMacCommandsGetNvmCtx>
 800cf0e:	0002      	movs	r2, r0
 800cf10:	4b0a      	ldr	r3, [pc, #40]	@ (800cf3c <GetCtxs+0x88>)
 800cf12:	621a      	str	r2, [r3, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 800cf14:	4b10      	ldr	r3, [pc, #64]	@ (800cf58 <GetCtxs+0xa4>)
 800cf16:	0018      	movs	r0, r3
 800cf18:	f002 f8d6 	bl	800f0c8 <LoRaMacClassBGetNvmCtx>
 800cf1c:	0002      	movs	r2, r0
 800cf1e:	4b07      	ldr	r3, [pc, #28]	@ (800cf3c <GetCtxs+0x88>)
 800cf20:	629a      	str	r2, [r3, #40]	@ 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 800cf22:	4b0e      	ldr	r3, [pc, #56]	@ (800cf5c <GetCtxs+0xa8>)
 800cf24:	0018      	movs	r0, r3
 800cf26:	f002 fcfd 	bl	800f924 <LoRaMacConfirmQueueGetNvmCtx>
 800cf2a:	0002      	movs	r2, r0
 800cf2c:	4b03      	ldr	r3, [pc, #12]	@ (800cf3c <GetCtxs+0x88>)
 800cf2e:	631a      	str	r2, [r3, #48]	@ 0x30
    return &Contexts;
 800cf30:	4b02      	ldr	r3, [pc, #8]	@ (800cf3c <GetCtxs+0x88>)
}
 800cf32:	0018      	movs	r0, r3
 800cf34:	46bd      	mov	sp, r7
 800cf36:	b002      	add	sp, #8
 800cf38:	bd80      	pop	{r7, pc}
 800cf3a:	46c0      	nop			@ (mov r8, r8)
 800cf3c:	20000fc8 	.word	0x20000fc8
 800cf40:	20000dec 	.word	0x20000dec
 800cf44:	20000fdc 	.word	0x20000fdc
 800cf48:	20000964 	.word	0x20000964
 800cf4c:	00000484 	.word	0x00000484
 800cf50:	20000fe4 	.word	0x20000fe4
 800cf54:	20000fec 	.word	0x20000fec
 800cf58:	20000ff4 	.word	0x20000ff4
 800cf5c:	20000ffc 	.word	0x20000ffc

0800cf60 <RestoreCtxs>:

LoRaMacStatus_t RestoreCtxs( LoRaMacCtxs_t* contexts )
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b084      	sub	sp, #16
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
    if( contexts == NULL )
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d101      	bne.n	800cf72 <RestoreCtxs+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800cf6e:	2303      	movs	r3, #3
 800cf70:	e05d      	b.n	800d02e <RestoreCtxs+0xce>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800cf72:	4a31      	ldr	r2, [pc, #196]	@ (800d038 <RestoreCtxs+0xd8>)
 800cf74:	23d0      	movs	r3, #208	@ 0xd0
 800cf76:	009b      	lsls	r3, r3, #2
 800cf78:	58d3      	ldr	r3, [r2, r3]
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d001      	beq.n	800cf82 <RestoreCtxs+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	e055      	b.n	800d02e <RestoreCtxs+0xce>
    }

    if( contexts->MacNvmCtx != NULL )
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d008      	beq.n	800cf9c <RestoreCtxs+0x3c>
    {
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6819      	ldr	r1, [r3, #0]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	b29a      	uxth	r2, r3
 800cf94:	4b29      	ldr	r3, [pc, #164]	@ (800d03c <RestoreCtxs+0xdc>)
 800cf96:	0018      	movs	r0, r3
 800cf98:	f008 fb7e 	bl	8015698 <memcpy1>
    }

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_CTX;
 800cf9c:	2108      	movs	r1, #8
 800cf9e:	187b      	adds	r3, r7, r1
 800cfa0:	2202      	movs	r2, #2
 800cfa2:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	689a      	ldr	r2, [r3, #8]
 800cfa8:	187b      	adds	r3, r7, r1
 800cfaa:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800cfac:	4b22      	ldr	r3, [pc, #136]	@ (800d038 <RestoreCtxs+0xd8>)
 800cfae:	4a24      	ldr	r2, [pc, #144]	@ (800d040 <RestoreCtxs+0xe0>)
 800cfb0:	589b      	ldr	r3, [r3, r2]
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	187a      	adds	r2, r7, r1
 800cfb6:	0011      	movs	r1, r2
 800cfb8:	0018      	movs	r0, r3
 800cfba:	f004 fb4f 	bl	801165c <RegionInitDefaults>

    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	699b      	ldr	r3, [r3, #24]
 800cfc2:	0018      	movs	r0, r3
 800cfc4:	f7fc f97a 	bl	80092bc <SecureElementRestoreNvmCtx>
 800cfc8:	1e03      	subs	r3, r0, #0
 800cfca:	d001      	beq.n	800cfd0 <RestoreCtxs+0x70>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800cfcc:	2311      	movs	r3, #17
 800cfce:	e02e      	b.n	800d02e <RestoreCtxs+0xce>
    }

    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	691b      	ldr	r3, [r3, #16]
 800cfd4:	0018      	movs	r0, r3
 800cfd6:	f003 fa2f 	bl	8010438 <LoRaMacCryptoRestoreNvmCtx>
 800cfda:	1e03      	subs	r3, r0, #0
 800cfdc:	d001      	beq.n	800cfe2 <RestoreCtxs+0x82>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800cfde:	2311      	movs	r3, #17
 800cfe0:	e025      	b.n	800d02e <RestoreCtxs+0xce>
    }

    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6a1b      	ldr	r3, [r3, #32]
 800cfe6:	0018      	movs	r0, r3
 800cfe8:	f002 fa96 	bl	800f518 <LoRaMacCommandsRestoreNvmCtx>
 800cfec:	1e03      	subs	r3, r0, #0
 800cfee:	d001      	beq.n	800cff4 <RestoreCtxs+0x94>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cff0:	2313      	movs	r3, #19
 800cff2:	e01c      	b.n	800d02e <RestoreCtxs+0xce>
    }

    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cff8:	0018      	movs	r0, r3
 800cffa:	f002 f85c 	bl	800f0b6 <LoRaMacClassBRestoreNvmCtx>
 800cffe:	0003      	movs	r3, r0
 800d000:	001a      	movs	r2, r3
 800d002:	2301      	movs	r3, #1
 800d004:	4053      	eors	r3, r2
 800d006:	b2db      	uxtb	r3, r3
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d001      	beq.n	800d010 <RestoreCtxs+0xb0>
    {
        return LORAMAC_STATUS_CLASS_B_ERROR;
 800d00c:	2314      	movs	r3, #20
 800d00e:	e00e      	b.n	800d02e <RestoreCtxs+0xce>
    }

    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d014:	0018      	movs	r0, r3
 800d016:	f002 fc6f 	bl	800f8f8 <LoRaMacConfirmQueueRestoreNvmCtx>
 800d01a:	0003      	movs	r3, r0
 800d01c:	001a      	movs	r2, r3
 800d01e:	2301      	movs	r3, #1
 800d020:	4053      	eors	r3, r2
 800d022:	b2db      	uxtb	r3, r3
 800d024:	2b00      	cmp	r3, #0
 800d026:	d001      	beq.n	800d02c <RestoreCtxs+0xcc>
    {
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 800d028:	2315      	movs	r3, #21
 800d02a:	e000      	b.n	800d02e <RestoreCtxs+0xce>
    }

    return LORAMAC_STATUS_OK;
 800d02c:	2300      	movs	r3, #0
}
 800d02e:	0018      	movs	r0, r3
 800d030:	46bd      	mov	sp, r7
 800d032:	b004      	add	sp, #16
 800d034:	bd80      	pop	{r7, pc}
 800d036:	46c0      	nop			@ (mov r8, r8)
 800d038:	20000964 	.word	0x20000964
 800d03c:	20000dec 	.word	0x20000dec
 800d040:	00000484 	.word	0x00000484

0800d044 <DetermineFrameType>:

LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d002      	beq.n	800d05a <DetermineFrameType+0x16>
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d101      	bne.n	800d05e <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d05a:	2303      	movs	r3, #3
 800d05c:	e03b      	b.n	800d0d6 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	7b1b      	ldrb	r3, [r3, #12]
 800d062:	220f      	movs	r2, #15
 800d064:	4013      	ands	r3, r2
 800d066:	b2db      	uxtb	r3, r3
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d008      	beq.n	800d07e <DetermineFrameType+0x3a>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2220      	movs	r2, #32
 800d070:	5c9b      	ldrb	r3, [r3, r2]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d003      	beq.n	800d07e <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	2200      	movs	r2, #0
 800d07a:	701a      	strb	r2, [r3, #0]
 800d07c:	e02a      	b.n	800d0d4 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2228      	movs	r2, #40	@ 0x28
 800d082:	5c9b      	ldrb	r3, [r3, r2]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d103      	bne.n	800d090 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	2201      	movs	r2, #1
 800d08c:	701a      	strb	r2, [r3, #0]
 800d08e:	e021      	b.n	800d0d4 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	7b1b      	ldrb	r3, [r3, #12]
 800d094:	220f      	movs	r2, #15
 800d096:	4013      	ands	r3, r2
 800d098:	b2db      	uxtb	r3, r3
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d108      	bne.n	800d0b0 <DetermineFrameType+0x6c>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2220      	movs	r2, #32
 800d0a2:	5c9b      	ldrb	r3, [r3, r2]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d103      	bne.n	800d0b0 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	2202      	movs	r2, #2
 800d0ac:	701a      	strb	r2, [r3, #0]
 800d0ae:	e011      	b.n	800d0d4 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	7b1b      	ldrb	r3, [r3, #12]
 800d0b4:	220f      	movs	r2, #15
 800d0b6:	4013      	ands	r3, r2
 800d0b8:	b2db      	uxtb	r3, r3
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d108      	bne.n	800d0d0 <DetermineFrameType+0x8c>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2220      	movs	r2, #32
 800d0c2:	5c9b      	ldrb	r3, [r3, r2]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d003      	beq.n	800d0d0 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	2203      	movs	r2, #3
 800d0cc:	701a      	strb	r2, [r3, #0]
 800d0ce:	e001      	b.n	800d0d4 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800d0d0:	2317      	movs	r3, #23
 800d0d2:	e000      	b.n	800d0d6 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800d0d4:	2300      	movs	r3, #0
}
 800d0d6:	0018      	movs	r0, r3
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	b002      	add	sp, #8
 800d0dc:	bd80      	pop	{r7, pc}
	...

0800d0e0 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 800d0e4:	4a14      	ldr	r2, [pc, #80]	@ (800d138 <CheckRetransUnconfirmedUplink+0x58>)
 800d0e6:	2382      	movs	r3, #130	@ 0x82
 800d0e8:	00db      	lsls	r3, r3, #3
 800d0ea:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800d0ec:	4b12      	ldr	r3, [pc, #72]	@ (800d138 <CheckRetransUnconfirmedUplink+0x58>)
 800d0ee:	4913      	ldr	r1, [pc, #76]	@ (800d13c <CheckRetransUnconfirmedUplink+0x5c>)
 800d0f0:	5859      	ldr	r1, [r3, r1]
 800d0f2:	238c      	movs	r3, #140	@ 0x8c
 800d0f4:	005b      	lsls	r3, r3, #1
 800d0f6:	5ccb      	ldrb	r3, [r1, r3]
    if( MacCtx.ChannelsNbTransCounter >=
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d301      	bcc.n	800d100 <CheckRetransUnconfirmedUplink+0x20>
    {
        return true;
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	e018      	b.n	800d132 <CheckRetransUnconfirmedUplink+0x52>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800d100:	4b0d      	ldr	r3, [pc, #52]	@ (800d138 <CheckRetransUnconfirmedUplink+0x58>)
 800d102:	4a0f      	ldr	r2, [pc, #60]	@ (800d140 <CheckRetransUnconfirmedUplink+0x60>)
 800d104:	5c9b      	ldrb	r3, [r3, r2]
 800d106:	2202      	movs	r2, #2
 800d108:	4013      	ands	r3, r2
 800d10a:	b2db      	uxtb	r3, r3
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d00f      	beq.n	800d130 <CheckRetransUnconfirmedUplink+0x50>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800d110:	4b09      	ldr	r3, [pc, #36]	@ (800d138 <CheckRetransUnconfirmedUplink+0x58>)
 800d112:	4a0a      	ldr	r2, [pc, #40]	@ (800d13c <CheckRetransUnconfirmedUplink+0x5c>)
 800d114:	589b      	ldr	r3, [r3, r2]
 800d116:	22f0      	movs	r2, #240	@ 0xf0
 800d118:	5c9b      	ldrb	r3, [r3, r2]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d101      	bne.n	800d122 <CheckRetransUnconfirmedUplink+0x42>
        {
            return true;
 800d11e:	2301      	movs	r3, #1
 800d120:	e007      	b.n	800d132 <CheckRetransUnconfirmedUplink+0x52>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 800d122:	4b05      	ldr	r3, [pc, #20]	@ (800d138 <CheckRetransUnconfirmedUplink+0x58>)
 800d124:	4a07      	ldr	r2, [pc, #28]	@ (800d144 <CheckRetransUnconfirmedUplink+0x64>)
 800d126:	5c9b      	ldrb	r3, [r3, r2]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d101      	bne.n	800d130 <CheckRetransUnconfirmedUplink+0x50>
            {
                return true;
 800d12c:	2301      	movs	r3, #1
 800d12e:	e000      	b.n	800d132 <CheckRetransUnconfirmedUplink+0x52>
            }
        }
    }
    return false;
 800d130:	2300      	movs	r3, #0
}
 800d132:	0018      	movs	r0, r3
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}
 800d138:	20000964 	.word	0x20000964
 800d13c:	00000484 	.word	0x00000484
 800d140:	00000481 	.word	0x00000481
 800d144:	0000042d 	.word	0x0000042d

0800d148 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 800d14c:	4b0e      	ldr	r3, [pc, #56]	@ (800d188 <CheckRetransConfirmedUplink+0x40>)
 800d14e:	4a0f      	ldr	r2, [pc, #60]	@ (800d18c <CheckRetransConfirmedUplink+0x44>)
 800d150:	5c9a      	ldrb	r2, [r3, r2]
        MacCtx.AckTimeoutRetries )
 800d152:	4b0d      	ldr	r3, [pc, #52]	@ (800d188 <CheckRetransConfirmedUplink+0x40>)
 800d154:	490e      	ldr	r1, [pc, #56]	@ (800d190 <CheckRetransConfirmedUplink+0x48>)
 800d156:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.AckTimeoutRetriesCounter >=
 800d158:	429a      	cmp	r2, r3
 800d15a:	d301      	bcc.n	800d160 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 800d15c:	2301      	movs	r3, #1
 800d15e:	e010      	b.n	800d182 <CheckRetransConfirmedUplink+0x3a>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800d160:	4b09      	ldr	r3, [pc, #36]	@ (800d188 <CheckRetransConfirmedUplink+0x40>)
 800d162:	4a0c      	ldr	r2, [pc, #48]	@ (800d194 <CheckRetransConfirmedUplink+0x4c>)
 800d164:	5c9b      	ldrb	r3, [r3, r2]
 800d166:	2202      	movs	r2, #2
 800d168:	4013      	ands	r3, r2
 800d16a:	b2db      	uxtb	r3, r3
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d007      	beq.n	800d180 <CheckRetransConfirmedUplink+0x38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800d170:	4a05      	ldr	r2, [pc, #20]	@ (800d188 <CheckRetransConfirmedUplink+0x40>)
 800d172:	2388      	movs	r3, #136	@ 0x88
 800d174:	00db      	lsls	r3, r3, #3
 800d176:	5cd3      	ldrb	r3, [r2, r3]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d001      	beq.n	800d180 <CheckRetransConfirmedUplink+0x38>
        {
            return true;
 800d17c:	2301      	movs	r3, #1
 800d17e:	e000      	b.n	800d182 <CheckRetransConfirmedUplink+0x3a>
        }
    }
    return false;
 800d180:	2300      	movs	r3, #0
}
 800d182:	0018      	movs	r0, r3
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}
 800d188:	20000964 	.word	0x20000964
 800d18c:	00000412 	.word	0x00000412
 800d190:	00000411 	.word	0x00000411
 800d194:	00000481 	.word	0x00000481

0800d198 <StopRetransmission>:

static bool StopRetransmission( void )
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800d19c:	4b1e      	ldr	r3, [pc, #120]	@ (800d218 <StopRetransmission+0x80>)
 800d19e:	4a1f      	ldr	r2, [pc, #124]	@ (800d21c <StopRetransmission+0x84>)
 800d1a0:	5c9b      	ldrb	r3, [r3, r2]
 800d1a2:	2202      	movs	r2, #2
 800d1a4:	4013      	ands	r3, r2
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d009      	beq.n	800d1c0 <StopRetransmission+0x28>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 800d1ac:	4b1a      	ldr	r3, [pc, #104]	@ (800d218 <StopRetransmission+0x80>)
 800d1ae:	4a1c      	ldr	r2, [pc, #112]	@ (800d220 <StopRetransmission+0x88>)
 800d1b0:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d013      	beq.n	800d1de <StopRetransmission+0x46>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
 800d1b6:	4b18      	ldr	r3, [pc, #96]	@ (800d218 <StopRetransmission+0x80>)
 800d1b8:	4a19      	ldr	r2, [pc, #100]	@ (800d220 <StopRetransmission+0x88>)
 800d1ba:	5c9b      	ldrb	r3, [r3, r2]
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d00e      	beq.n	800d1de <StopRetransmission+0x46>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 800d1c0:	4b15      	ldr	r3, [pc, #84]	@ (800d218 <StopRetransmission+0x80>)
 800d1c2:	4a18      	ldr	r2, [pc, #96]	@ (800d224 <StopRetransmission+0x8c>)
 800d1c4:	589b      	ldr	r3, [r3, r2]
 800d1c6:	22f2      	movs	r2, #242	@ 0xf2
 800d1c8:	5c9b      	ldrb	r3, [r3, r2]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d007      	beq.n	800d1de <StopRetransmission+0x46>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 800d1ce:	4b12      	ldr	r3, [pc, #72]	@ (800d218 <StopRetransmission+0x80>)
 800d1d0:	4a14      	ldr	r2, [pc, #80]	@ (800d224 <StopRetransmission+0x8c>)
 800d1d2:	589b      	ldr	r3, [r3, r2]
 800d1d4:	22f4      	movs	r2, #244	@ 0xf4
 800d1d6:	589a      	ldr	r2, [r3, r2]
 800d1d8:	3201      	adds	r2, #1
 800d1da:	21f4      	movs	r1, #244	@ 0xf4
 800d1dc:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800d1de:	4a0e      	ldr	r2, [pc, #56]	@ (800d218 <StopRetransmission+0x80>)
 800d1e0:	2382      	movs	r3, #130	@ 0x82
 800d1e2:	00db      	lsls	r3, r3, #3
 800d1e4:	2100      	movs	r1, #0
 800d1e6:	54d1      	strb	r1, [r2, r3]
    MacCtx.NodeAckRequested = false;
 800d1e8:	4b0b      	ldr	r3, [pc, #44]	@ (800d218 <StopRetransmission+0x80>)
 800d1ea:	4a0f      	ldr	r2, [pc, #60]	@ (800d228 <StopRetransmission+0x90>)
 800d1ec:	2100      	movs	r1, #0
 800d1ee:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 800d1f0:	4b09      	ldr	r3, [pc, #36]	@ (800d218 <StopRetransmission+0x80>)
 800d1f2:	4a0e      	ldr	r2, [pc, #56]	@ (800d22c <StopRetransmission+0x94>)
 800d1f4:	2100      	movs	r1, #0
 800d1f6:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800d1f8:	4a07      	ldr	r2, [pc, #28]	@ (800d218 <StopRetransmission+0x80>)
 800d1fa:	23d0      	movs	r3, #208	@ 0xd0
 800d1fc:	009b      	lsls	r3, r3, #2
 800d1fe:	58d3      	ldr	r3, [r2, r3]
 800d200:	2202      	movs	r2, #2
 800d202:	4393      	bics	r3, r2
 800d204:	0019      	movs	r1, r3
 800d206:	4a04      	ldr	r2, [pc, #16]	@ (800d218 <StopRetransmission+0x80>)
 800d208:	23d0      	movs	r3, #208	@ 0xd0
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	50d1      	str	r1, [r2, r3]

    return true;
 800d20e:	2301      	movs	r3, #1
}
 800d210:	0018      	movs	r0, r3
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
 800d216:	46c0      	nop			@ (mov r8, r8)
 800d218:	20000964 	.word	0x20000964
 800d21c:	00000481 	.word	0x00000481
 800d220:	0000042d 	.word	0x0000042d
 800d224:	00000484 	.word	0x00000484
 800d228:	00000414 	.word	0x00000414
 800d22c:	00000413 	.word	0x00000413

0800d230 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b082      	sub	sp, #8
 800d234:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 800d236:	4b21      	ldr	r3, [pc, #132]	@ (800d2bc <AckTimeoutRetriesProcess+0x8c>)
 800d238:	4a21      	ldr	r2, [pc, #132]	@ (800d2c0 <AckTimeoutRetriesProcess+0x90>)
 800d23a:	5c9a      	ldrb	r2, [r3, r2]
 800d23c:	4b1f      	ldr	r3, [pc, #124]	@ (800d2bc <AckTimeoutRetriesProcess+0x8c>)
 800d23e:	4921      	ldr	r1, [pc, #132]	@ (800d2c4 <AckTimeoutRetriesProcess+0x94>)
 800d240:	5c5b      	ldrb	r3, [r3, r1]
 800d242:	429a      	cmp	r2, r3
 800d244:	d236      	bcs.n	800d2b4 <AckTimeoutRetriesProcess+0x84>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 800d246:	4b1d      	ldr	r3, [pc, #116]	@ (800d2bc <AckTimeoutRetriesProcess+0x8c>)
 800d248:	4a1d      	ldr	r2, [pc, #116]	@ (800d2c0 <AckTimeoutRetriesProcess+0x90>)
 800d24a:	5c9b      	ldrb	r3, [r3, r2]
 800d24c:	3301      	adds	r3, #1
 800d24e:	b2d9      	uxtb	r1, r3
 800d250:	4b1a      	ldr	r3, [pc, #104]	@ (800d2bc <AckTimeoutRetriesProcess+0x8c>)
 800d252:	4a1b      	ldr	r2, [pc, #108]	@ (800d2c0 <AckTimeoutRetriesProcess+0x90>)
 800d254:	5499      	strb	r1, [r3, r2]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 800d256:	4b19      	ldr	r3, [pc, #100]	@ (800d2bc <AckTimeoutRetriesProcess+0x8c>)
 800d258:	4a19      	ldr	r2, [pc, #100]	@ (800d2c0 <AckTimeoutRetriesProcess+0x90>)
 800d25a:	5c9b      	ldrb	r3, [r3, r2]
 800d25c:	2201      	movs	r2, #1
 800d25e:	4013      	ands	r3, r2
 800d260:	b2db      	uxtb	r3, r3
 800d262:	2b00      	cmp	r3, #0
 800d264:	d026      	beq.n	800d2b4 <AckTimeoutRetriesProcess+0x84>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800d266:	1d3b      	adds	r3, r7, #4
 800d268:	2222      	movs	r2, #34	@ 0x22
 800d26a:	701a      	strb	r2, [r3, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800d26c:	4b13      	ldr	r3, [pc, #76]	@ (800d2bc <AckTimeoutRetriesProcess+0x8c>)
 800d26e:	4a16      	ldr	r2, [pc, #88]	@ (800d2c8 <AckTimeoutRetriesProcess+0x98>)
 800d270:	589a      	ldr	r2, [r3, r2]
 800d272:	2396      	movs	r3, #150	@ 0x96
 800d274:	005b      	lsls	r3, r3, #1
 800d276:	5cd2      	ldrb	r2, [r2, r3]
 800d278:	1d3b      	adds	r3, r7, #4
 800d27a:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800d27c:	4b0f      	ldr	r3, [pc, #60]	@ (800d2bc <AckTimeoutRetriesProcess+0x8c>)
 800d27e:	4a12      	ldr	r2, [pc, #72]	@ (800d2c8 <AckTimeoutRetriesProcess+0x98>)
 800d280:	589b      	ldr	r3, [r3, r2]
 800d282:	22f9      	movs	r2, #249	@ 0xf9
 800d284:	569a      	ldrsb	r2, [r3, r2]
 800d286:	1d3b      	adds	r3, r7, #4
 800d288:	705a      	strb	r2, [r3, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d28a:	4b0c      	ldr	r3, [pc, #48]	@ (800d2bc <AckTimeoutRetriesProcess+0x8c>)
 800d28c:	4a0e      	ldr	r2, [pc, #56]	@ (800d2c8 <AckTimeoutRetriesProcess+0x98>)
 800d28e:	589b      	ldr	r3, [r3, r2]
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	1d3a      	adds	r2, r7, #4
 800d294:	0011      	movs	r1, r2
 800d296:	0018      	movs	r0, r3
 800d298:	f004 f9a5 	bl	80115e6 <RegionGetPhyParam>
 800d29c:	0003      	movs	r3, r0
 800d29e:	001a      	movs	r2, r3
 800d2a0:	003b      	movs	r3, r7
 800d2a2:	601a      	str	r2, [r3, #0]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 800d2a4:	003b      	movs	r3, r7
 800d2a6:	6819      	ldr	r1, [r3, #0]
 800d2a8:	4b04      	ldr	r3, [pc, #16]	@ (800d2bc <AckTimeoutRetriesProcess+0x8c>)
 800d2aa:	4a07      	ldr	r2, [pc, #28]	@ (800d2c8 <AckTimeoutRetriesProcess+0x98>)
 800d2ac:	589b      	ldr	r3, [r3, r2]
 800d2ae:	b249      	sxtb	r1, r1
 800d2b0:	22f9      	movs	r2, #249	@ 0xf9
 800d2b2:	5499      	strb	r1, [r3, r2]
        }
    }
}
 800d2b4:	46c0      	nop			@ (mov r8, r8)
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	b002      	add	sp, #8
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	20000964 	.word	0x20000964
 800d2c0:	00000412 	.word	0x00000412
 800d2c4:	00000411 	.word	0x00000411
 800d2c8:	00000484 	.word	0x00000484

0800d2cc <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 800d2d2:	4a16      	ldr	r2, [pc, #88]	@ (800d32c <AckTimeoutRetriesFinalize+0x60>)
 800d2d4:	2388      	movs	r3, #136	@ 0x88
 800d2d6:	00db      	lsls	r3, r3, #3
 800d2d8:	5cd3      	ldrb	r3, [r2, r3]
 800d2da:	2201      	movs	r2, #1
 800d2dc:	4053      	eors	r3, r2
 800d2de:	b2db      	uxtb	r3, r3
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d018      	beq.n	800d316 <AckTimeoutRetriesFinalize+0x4a>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800d2e4:	003b      	movs	r3, r7
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	711a      	strb	r2, [r3, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 800d2ea:	4b11      	ldr	r3, [pc, #68]	@ (800d330 <AckTimeoutRetriesFinalize+0x64>)
 800d2ec:	689a      	ldr	r2, [r3, #8]
 800d2ee:	003b      	movs	r3, r7
 800d2f0:	601a      	str	r2, [r3, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800d2f2:	4b0e      	ldr	r3, [pc, #56]	@ (800d32c <AckTimeoutRetriesFinalize+0x60>)
 800d2f4:	4a0f      	ldr	r2, [pc, #60]	@ (800d334 <AckTimeoutRetriesFinalize+0x68>)
 800d2f6:	589b      	ldr	r3, [r3, r2]
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	003a      	movs	r2, r7
 800d2fc:	0011      	movs	r1, r2
 800d2fe:	0018      	movs	r0, r3
 800d300:	f004 f9ac 	bl	801165c <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 800d304:	4b09      	ldr	r3, [pc, #36]	@ (800d32c <AckTimeoutRetriesFinalize+0x60>)
 800d306:	4a0c      	ldr	r2, [pc, #48]	@ (800d338 <AckTimeoutRetriesFinalize+0x6c>)
 800d308:	2100      	movs	r1, #0
 800d30a:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 800d30c:	4a07      	ldr	r2, [pc, #28]	@ (800d32c <AckTimeoutRetriesFinalize+0x60>)
 800d30e:	2388      	movs	r3, #136	@ 0x88
 800d310:	00db      	lsls	r3, r3, #3
 800d312:	2100      	movs	r1, #0
 800d314:	54d1      	strb	r1, [r2, r3]
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800d316:	4b05      	ldr	r3, [pc, #20]	@ (800d32c <AckTimeoutRetriesFinalize+0x60>)
 800d318:	4a08      	ldr	r2, [pc, #32]	@ (800d33c <AckTimeoutRetriesFinalize+0x70>)
 800d31a:	5c99      	ldrb	r1, [r3, r2]
 800d31c:	4b03      	ldr	r3, [pc, #12]	@ (800d32c <AckTimeoutRetriesFinalize+0x60>)
 800d31e:	4a08      	ldr	r2, [pc, #32]	@ (800d340 <AckTimeoutRetriesFinalize+0x74>)
 800d320:	5499      	strb	r1, [r3, r2]
}
 800d322:	46c0      	nop			@ (mov r8, r8)
 800d324:	46bd      	mov	sp, r7
 800d326:	b002      	add	sp, #8
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	46c0      	nop			@ (mov r8, r8)
 800d32c:	20000964 	.word	0x20000964
 800d330:	20000fc8 	.word	0x20000fc8
 800d334:	00000484 	.word	0x00000484
 800d338:	00000414 	.word	0x00000414
 800d33c:	00000412 	.word	0x00000412
 800d340:	00000441 	.word	0x00000441

0800d344 <CallNvmCtxCallback>:

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b082      	sub	sp, #8
 800d348:	af00      	add	r7, sp, #0
 800d34a:	0002      	movs	r2, r0
 800d34c:	1dfb      	adds	r3, r7, #7
 800d34e:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 800d350:	4a0c      	ldr	r2, [pc, #48]	@ (800d384 <CallNvmCtxCallback+0x40>)
 800d352:	23d2      	movs	r3, #210	@ 0xd2
 800d354:	009b      	lsls	r3, r3, #2
 800d356:	58d3      	ldr	r3, [r2, r3]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d00f      	beq.n	800d37c <CallNvmCtxCallback+0x38>
 800d35c:	4a09      	ldr	r2, [pc, #36]	@ (800d384 <CallNvmCtxCallback+0x40>)
 800d35e:	23d2      	movs	r3, #210	@ 0xd2
 800d360:	009b      	lsls	r3, r3, #2
 800d362:	58d3      	ldr	r3, [r2, r3]
 800d364:	689b      	ldr	r3, [r3, #8]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d008      	beq.n	800d37c <CallNvmCtxCallback+0x38>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 800d36a:	4a06      	ldr	r2, [pc, #24]	@ (800d384 <CallNvmCtxCallback+0x40>)
 800d36c:	23d2      	movs	r3, #210	@ 0xd2
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	58d3      	ldr	r3, [r2, r3]
 800d372:	689b      	ldr	r3, [r3, #8]
 800d374:	1dfa      	adds	r2, r7, #7
 800d376:	7812      	ldrb	r2, [r2, #0]
 800d378:	0010      	movs	r0, r2
 800d37a:	4798      	blx	r3
    }
}
 800d37c:	46c0      	nop			@ (mov r8, r8)
 800d37e:	46bd      	mov	sp, r7
 800d380:	b002      	add	sp, #8
 800d382:	bd80      	pop	{r7, pc}
 800d384:	20000964 	.word	0x20000964

0800d388 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 800d38c:	2000      	movs	r0, #0
 800d38e:	f7ff ffd9 	bl	800d344 <CallNvmCtxCallback>
}
 800d392:	46c0      	nop			@ (mov r8, r8)
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}

0800d398 <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 800d39c:	2001      	movs	r0, #1
 800d39e:	f7ff ffd1 	bl	800d344 <CallNvmCtxCallback>
}
 800d3a2:	46c0      	nop			@ (mov r8, r8)
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 800d3ac:	2002      	movs	r0, #2
 800d3ae:	f7ff ffc9 	bl	800d344 <CallNvmCtxCallback>
}
 800d3b2:	46c0      	nop			@ (mov r8, r8)
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 800d3bc:	2003      	movs	r0, #3
 800d3be:	f7ff ffc1 	bl	800d344 <CallNvmCtxCallback>
}
 800d3c2:	46c0      	nop			@ (mov r8, r8)
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 800d3cc:	2004      	movs	r0, #4
 800d3ce:	f7ff ffb9 	bl	800d344 <CallNvmCtxCallback>
}
 800d3d2:	46c0      	nop			@ (mov r8, r8)
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 800d3dc:	2005      	movs	r0, #5
 800d3de:	f7ff ffb1 	bl	800d344 <CallNvmCtxCallback>
}
 800d3e2:	46c0      	nop			@ (mov r8, r8)
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 800d3ec:	2006      	movs	r0, #6
 800d3ee:	f7ff ffa9 	bl	800d344 <CallNvmCtxCallback>
}
 800d3f2:	46c0      	nop			@ (mov r8, r8)
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}

0800d3f8 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800d3fc:	4b0a      	ldr	r3, [pc, #40]	@ (800d428 <IsRequestPending+0x30>)
 800d3fe:	4a0b      	ldr	r2, [pc, #44]	@ (800d42c <IsRequestPending+0x34>)
 800d400:	5c9b      	ldrb	r3, [r3, r2]
 800d402:	2204      	movs	r2, #4
 800d404:	4013      	ands	r3, r2
 800d406:	b2db      	uxtb	r3, r3
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d107      	bne.n	800d41c <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 800d40c:	4b06      	ldr	r3, [pc, #24]	@ (800d428 <IsRequestPending+0x30>)
 800d40e:	4a07      	ldr	r2, [pc, #28]	@ (800d42c <IsRequestPending+0x34>)
 800d410:	5c9b      	ldrb	r3, [r3, r2]
 800d412:	2201      	movs	r2, #1
 800d414:	4013      	ands	r3, r2
 800d416:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d001      	beq.n	800d420 <IsRequestPending+0x28>
    {
        return 1;
 800d41c:	2301      	movs	r3, #1
 800d41e:	e000      	b.n	800d422 <IsRequestPending+0x2a>
    }
    return 0;
 800d420:	2300      	movs	r3, #0
}
 800d422:	0018      	movs	r0, r3
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}
 800d428:	20000964 	.word	0x20000964
 800d42c:	00000481 	.word	0x00000481

0800d430 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800d430:	b5b0      	push	{r4, r5, r7, lr}
 800d432:	b094      	sub	sp, #80	@ 0x50
 800d434:	af00      	add	r7, sp, #0
 800d436:	60f8      	str	r0, [r7, #12]
 800d438:	60b9      	str	r1, [r7, #8]
 800d43a:	1dfb      	adds	r3, r7, #7
 800d43c:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d002      	beq.n	800d44a <LoRaMacInitialization+0x1a>
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d101      	bne.n	800d44e <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d44a:	2303      	movs	r3, #3
 800d44c:	e35f      	b.n	800db0e <LoRaMacInitialization+0x6de>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d00b      	beq.n	800d46e <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d007      	beq.n	800d46e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800d462:	2b00      	cmp	r3, #0
 800d464:	d003      	beq.n	800d46e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d101      	bne.n	800d472 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d46e:	2303      	movs	r3, #3
 800d470:	e34d      	b.n	800db0e <LoRaMacInitialization+0x6de>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800d472:	1dfb      	adds	r3, r7, #7
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	0018      	movs	r0, r3
 800d478:	f004 f8a4 	bl	80115c4 <RegionIsActive>
 800d47c:	0003      	movs	r3, r0
 800d47e:	001a      	movs	r2, r3
 800d480:	2301      	movs	r3, #1
 800d482:	4053      	eors	r3, r2
 800d484:	b2db      	uxtb	r3, r3
 800d486:	2b00      	cmp	r3, #0
 800d488:	d001      	beq.n	800d48e <LoRaMacInitialization+0x5e>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800d48a:	2309      	movs	r3, #9
 800d48c:	e33f      	b.n	800db0e <LoRaMacInitialization+0x6de>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 800d48e:	4afd      	ldr	r2, [pc, #1012]	@ (800d884 <LoRaMacInitialization+0x454>)
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	0011      	movs	r1, r2
 800d494:	0018      	movs	r0, r3
 800d496:	f002 f9ff 	bl	800f898 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 800d49a:	23ee      	movs	r3, #238	@ 0xee
 800d49c:	005a      	lsls	r2, r3, #1
 800d49e:	4bfa      	ldr	r3, [pc, #1000]	@ (800d888 <LoRaMacInitialization+0x458>)
 800d4a0:	2100      	movs	r1, #0
 800d4a2:	0018      	movs	r0, r3
 800d4a4:	f008 f936 	bl	8015714 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800d4a8:	2391      	movs	r3, #145	@ 0x91
 800d4aa:	00da      	lsls	r2, r3, #3
 800d4ac:	4bf7      	ldr	r3, [pc, #988]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d4ae:	2100      	movs	r1, #0
 800d4b0:	0018      	movs	r0, r3
 800d4b2:	f008 f92f 	bl	8015714 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 800d4b6:	4bf5      	ldr	r3, [pc, #980]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d4b8:	49f5      	ldr	r1, [pc, #980]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d4ba:	4af3      	ldr	r2, [pc, #972]	@ (800d888 <LoRaMacInitialization+0x458>)
 800d4bc:	505a      	str	r2, [r3, r1]

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 800d4be:	4bf3      	ldr	r3, [pc, #972]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d4c0:	4af4      	ldr	r2, [pc, #976]	@ (800d894 <LoRaMacInitialization+0x464>)
 800d4c2:	2101      	movs	r1, #1
 800d4c4:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetries = 1;
 800d4c6:	4bf1      	ldr	r3, [pc, #964]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d4c8:	4af3      	ldr	r2, [pc, #972]	@ (800d898 <LoRaMacInitialization+0x468>)
 800d4ca:	2101      	movs	r1, #1
 800d4cc:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->Region = region;
 800d4ce:	4bef      	ldr	r3, [pc, #956]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d4d0:	4aef      	ldr	r2, [pc, #956]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d4d2:	589b      	ldr	r3, [r3, r2]
 800d4d4:	1dfa      	adds	r2, r7, #7
 800d4d6:	7812      	ldrb	r2, [r2, #0]
 800d4d8:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 800d4da:	4bec      	ldr	r3, [pc, #944]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d4dc:	4aec      	ldr	r2, [pc, #944]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d4de:	589b      	ldr	r3, [r3, r2]
 800d4e0:	22f0      	movs	r2, #240	@ 0xf0
 800d4e2:	2100      	movs	r1, #0
 800d4e4:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->RepeaterSupport = false;
 800d4e6:	4be9      	ldr	r3, [pc, #932]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d4e8:	4ae9      	ldr	r2, [pc, #932]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d4ea:	589a      	ldr	r2, [r3, r2]
 800d4ec:	2340      	movs	r3, #64	@ 0x40
 800d4ee:	33ff      	adds	r3, #255	@ 0xff
 800d4f0:	2100      	movs	r1, #0
 800d4f2:	54d1      	strb	r1, [r2, r3]

    Version_t lrWanVersion;
    lrWanVersion.Fields.Major    = 1;
 800d4f4:	211c      	movs	r1, #28
 800d4f6:	187b      	adds	r3, r7, r1
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	70da      	strb	r2, [r3, #3]
    lrWanVersion.Fields.Minor    = 0;
 800d4fc:	187b      	adds	r3, r7, r1
 800d4fe:	2200      	movs	r2, #0
 800d500:	709a      	strb	r2, [r3, #2]
    lrWanVersion.Fields.Revision = 3;
 800d502:	187b      	adds	r3, r7, r1
 800d504:	2203      	movs	r2, #3
 800d506:	705a      	strb	r2, [r3, #1]
    lrWanVersion.Fields.Rfu      = 0;
 800d508:	187b      	adds	r3, r7, r1
 800d50a:	2200      	movs	r2, #0
 800d50c:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->Version = lrWanVersion;
 800d50e:	4bdf      	ldr	r3, [pc, #892]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d510:	4adf      	ldr	r2, [pc, #892]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d512:	589a      	ldr	r2, [r3, r2]
 800d514:	23e8      	movs	r3, #232	@ 0xe8
 800d516:	005b      	lsls	r3, r3, #1
 800d518:	69f9      	ldr	r1, [r7, #28]
 800d51a:	50d1      	str	r1, [r2, r3]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800d51c:	254c      	movs	r5, #76	@ 0x4c
 800d51e:	197b      	adds	r3, r7, r5
 800d520:	220f      	movs	r2, #15
 800d522:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d524:	4bd9      	ldr	r3, [pc, #868]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d526:	4ada      	ldr	r2, [pc, #872]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d528:	589b      	ldr	r3, [r3, r2]
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	197a      	adds	r2, r7, r5
 800d52e:	0011      	movs	r1, r2
 800d530:	0018      	movs	r0, r3
 800d532:	f004 f858 	bl	80115e6 <RegionGetPhyParam>
 800d536:	0003      	movs	r3, r0
 800d538:	001a      	movs	r2, r3
 800d53a:	2448      	movs	r4, #72	@ 0x48
 800d53c:	193b      	adds	r3, r7, r4
 800d53e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 800d540:	193b      	adds	r3, r7, r4
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4ad1      	ldr	r2, [pc, #836]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d546:	49d2      	ldr	r1, [pc, #840]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d548:	5852      	ldr	r2, [r2, r1]
 800d54a:	1e59      	subs	r1, r3, #1
 800d54c:	418b      	sbcs	r3, r1
 800d54e:	b2d9      	uxtb	r1, r3
 800d550:	233e      	movs	r3, #62	@ 0x3e
 800d552:	33ff      	adds	r3, #255	@ 0xff
 800d554:	54d1      	strb	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800d556:	197b      	adds	r3, r7, r5
 800d558:	220a      	movs	r2, #10
 800d55a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d55c:	4bcb      	ldr	r3, [pc, #812]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d55e:	4acc      	ldr	r2, [pc, #816]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d560:	589b      	ldr	r3, [r3, r2]
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	197a      	adds	r2, r7, r5
 800d566:	0011      	movs	r1, r2
 800d568:	0018      	movs	r0, r3
 800d56a:	f004 f83c 	bl	80115e6 <RegionGetPhyParam>
 800d56e:	0003      	movs	r3, r0
 800d570:	001a      	movs	r2, r3
 800d572:	193b      	adds	r3, r7, r4
 800d574:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 800d576:	193b      	adds	r3, r7, r4
 800d578:	6819      	ldr	r1, [r3, #0]
 800d57a:	4bc4      	ldr	r3, [pc, #784]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d57c:	4ac4      	ldr	r2, [pc, #784]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d57e:	589b      	ldr	r3, [r3, r2]
 800d580:	b24a      	sxtb	r2, r1
 800d582:	711a      	strb	r2, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 800d584:	197b      	adds	r3, r7, r5
 800d586:	2206      	movs	r2, #6
 800d588:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d58a:	4bc0      	ldr	r3, [pc, #768]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d58c:	4ac0      	ldr	r2, [pc, #768]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d58e:	589b      	ldr	r3, [r3, r2]
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	197a      	adds	r2, r7, r5
 800d594:	0011      	movs	r1, r2
 800d596:	0018      	movs	r0, r3
 800d598:	f004 f825 	bl	80115e6 <RegionGetPhyParam>
 800d59c:	0003      	movs	r3, r0
 800d59e:	001a      	movs	r2, r3
 800d5a0:	193b      	adds	r3, r7, r4
 800d5a2:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 800d5a4:	193b      	adds	r3, r7, r4
 800d5a6:	6819      	ldr	r1, [r3, #0]
 800d5a8:	4bb8      	ldr	r3, [pc, #736]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d5aa:	4ab9      	ldr	r2, [pc, #740]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d5ac:	589b      	ldr	r3, [r3, r2]
 800d5ae:	b24a      	sxtb	r2, r1
 800d5b0:	715a      	strb	r2, [r3, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800d5b2:	197b      	adds	r3, r7, r5
 800d5b4:	2210      	movs	r2, #16
 800d5b6:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d5b8:	4bb4      	ldr	r3, [pc, #720]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d5ba:	4ab5      	ldr	r2, [pc, #724]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d5bc:	589b      	ldr	r3, [r3, r2]
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	197a      	adds	r2, r7, r5
 800d5c2:	0011      	movs	r1, r2
 800d5c4:	0018      	movs	r0, r3
 800d5c6:	f004 f80e 	bl	80115e6 <RegionGetPhyParam>
 800d5ca:	0003      	movs	r3, r0
 800d5cc:	001a      	movs	r2, r3
 800d5ce:	193b      	adds	r3, r7, r4
 800d5d0:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800d5d2:	4bae      	ldr	r3, [pc, #696]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d5d4:	4aae      	ldr	r2, [pc, #696]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d5d6:	589b      	ldr	r3, [r3, r2]
 800d5d8:	193a      	adds	r2, r7, r4
 800d5da:	6812      	ldr	r2, [r2, #0]
 800d5dc:	611a      	str	r2, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800d5de:	197b      	adds	r3, r7, r5
 800d5e0:	2211      	movs	r2, #17
 800d5e2:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d5e4:	4ba9      	ldr	r3, [pc, #676]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d5e6:	4aaa      	ldr	r2, [pc, #680]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d5e8:	589b      	ldr	r3, [r3, r2]
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	197a      	adds	r2, r7, r5
 800d5ee:	0011      	movs	r1, r2
 800d5f0:	0018      	movs	r0, r3
 800d5f2:	f003 fff8 	bl	80115e6 <RegionGetPhyParam>
 800d5f6:	0003      	movs	r3, r0
 800d5f8:	001a      	movs	r2, r3
 800d5fa:	193b      	adds	r3, r7, r4
 800d5fc:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800d5fe:	4ba3      	ldr	r3, [pc, #652]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d600:	4aa3      	ldr	r2, [pc, #652]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d602:	589b      	ldr	r3, [r3, r2]
 800d604:	193a      	adds	r2, r7, r4
 800d606:	6812      	ldr	r2, [r2, #0]
 800d608:	615a      	str	r2, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800d60a:	197b      	adds	r3, r7, r5
 800d60c:	2212      	movs	r2, #18
 800d60e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d610:	4b9e      	ldr	r3, [pc, #632]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d612:	4a9f      	ldr	r2, [pc, #636]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d614:	589b      	ldr	r3, [r3, r2]
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	197a      	adds	r2, r7, r5
 800d61a:	0011      	movs	r1, r2
 800d61c:	0018      	movs	r0, r3
 800d61e:	f003 ffe2 	bl	80115e6 <RegionGetPhyParam>
 800d622:	0003      	movs	r3, r0
 800d624:	001a      	movs	r2, r3
 800d626:	193b      	adds	r3, r7, r4
 800d628:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800d62a:	4b98      	ldr	r3, [pc, #608]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d62c:	4a98      	ldr	r2, [pc, #608]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d62e:	589b      	ldr	r3, [r3, r2]
 800d630:	193a      	adds	r2, r7, r4
 800d632:	6812      	ldr	r2, [r2, #0]
 800d634:	619a      	str	r2, [r3, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800d636:	197b      	adds	r3, r7, r5
 800d638:	2213      	movs	r2, #19
 800d63a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d63c:	4b93      	ldr	r3, [pc, #588]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d63e:	4a94      	ldr	r2, [pc, #592]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d640:	589b      	ldr	r3, [r3, r2]
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	197a      	adds	r2, r7, r5
 800d646:	0011      	movs	r1, r2
 800d648:	0018      	movs	r0, r3
 800d64a:	f003 ffcc 	bl	80115e6 <RegionGetPhyParam>
 800d64e:	0003      	movs	r3, r0
 800d650:	001a      	movs	r2, r3
 800d652:	193b      	adds	r3, r7, r4
 800d654:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800d656:	4b8d      	ldr	r3, [pc, #564]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d658:	4a8d      	ldr	r2, [pc, #564]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d65a:	589b      	ldr	r3, [r3, r2]
 800d65c:	193a      	adds	r2, r7, r4
 800d65e:	6812      	ldr	r2, [r2, #0]
 800d660:	61da      	str	r2, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800d662:	197b      	adds	r3, r7, r5
 800d664:	2214      	movs	r2, #20
 800d666:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d668:	4b88      	ldr	r3, [pc, #544]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d66a:	4a89      	ldr	r2, [pc, #548]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d66c:	589b      	ldr	r3, [r3, r2]
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	197a      	adds	r2, r7, r5
 800d672:	0011      	movs	r1, r2
 800d674:	0018      	movs	r0, r3
 800d676:	f003 ffb6 	bl	80115e6 <RegionGetPhyParam>
 800d67a:	0003      	movs	r3, r0
 800d67c:	001a      	movs	r2, r3
 800d67e:	193b      	adds	r3, r7, r4
 800d680:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800d682:	4b82      	ldr	r3, [pc, #520]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d684:	4a82      	ldr	r2, [pc, #520]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d686:	589b      	ldr	r3, [r3, r2]
 800d688:	193a      	adds	r2, r7, r4
 800d68a:	6812      	ldr	r2, [r2, #0]
 800d68c:	621a      	str	r2, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800d68e:	197b      	adds	r3, r7, r5
 800d690:	2217      	movs	r2, #23
 800d692:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d694:	4b7d      	ldr	r3, [pc, #500]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d696:	4a7e      	ldr	r2, [pc, #504]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d698:	589b      	ldr	r3, [r3, r2]
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	197a      	adds	r2, r7, r5
 800d69e:	0011      	movs	r1, r2
 800d6a0:	0018      	movs	r0, r3
 800d6a2:	f003 ffa0 	bl	80115e6 <RegionGetPhyParam>
 800d6a6:	0003      	movs	r3, r0
 800d6a8:	001a      	movs	r2, r3
 800d6aa:	193b      	adds	r3, r7, r4
 800d6ac:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800d6ae:	193b      	adds	r3, r7, r4
 800d6b0:	6819      	ldr	r1, [r3, #0]
 800d6b2:	4b76      	ldr	r3, [pc, #472]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d6b4:	4a76      	ldr	r2, [pc, #472]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d6b6:	589b      	ldr	r3, [r3, r2]
 800d6b8:	b2c9      	uxtb	r1, r1
 800d6ba:	2225      	movs	r2, #37	@ 0x25
 800d6bc:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800d6be:	197b      	adds	r3, r7, r5
 800d6c0:	2218      	movs	r2, #24
 800d6c2:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d6c4:	4b71      	ldr	r3, [pc, #452]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d6c6:	4a72      	ldr	r2, [pc, #456]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d6c8:	589b      	ldr	r3, [r3, r2]
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	197a      	adds	r2, r7, r5
 800d6ce:	0011      	movs	r1, r2
 800d6d0:	0018      	movs	r0, r3
 800d6d2:	f003 ff88 	bl	80115e6 <RegionGetPhyParam>
 800d6d6:	0003      	movs	r3, r0
 800d6d8:	001a      	movs	r2, r3
 800d6da:	193b      	adds	r3, r7, r4
 800d6dc:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800d6de:	4b6b      	ldr	r3, [pc, #428]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d6e0:	4a6b      	ldr	r2, [pc, #428]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d6e2:	589b      	ldr	r3, [r3, r2]
 800d6e4:	193a      	adds	r2, r7, r4
 800d6e6:	6812      	ldr	r2, [r2, #0]
 800d6e8:	629a      	str	r2, [r3, #40]	@ 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800d6ea:	4b68      	ldr	r3, [pc, #416]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d6ec:	4a68      	ldr	r2, [pc, #416]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d6ee:	589b      	ldr	r3, [r3, r2]
 800d6f0:	193a      	adds	r2, r7, r4
 800d6f2:	6812      	ldr	r2, [r2, #0]
 800d6f4:	631a      	str	r2, [r3, #48]	@ 0x30

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800d6f6:	197b      	adds	r3, r7, r5
 800d6f8:	2219      	movs	r2, #25
 800d6fa:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d6fc:	4b63      	ldr	r3, [pc, #396]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d6fe:	4a64      	ldr	r2, [pc, #400]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d700:	589b      	ldr	r3, [r3, r2]
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	197a      	adds	r2, r7, r5
 800d706:	0011      	movs	r1, r2
 800d708:	0018      	movs	r0, r3
 800d70a:	f003 ff6c 	bl	80115e6 <RegionGetPhyParam>
 800d70e:	0003      	movs	r3, r0
 800d710:	001a      	movs	r2, r3
 800d712:	193b      	adds	r3, r7, r4
 800d714:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800d716:	193b      	adds	r3, r7, r4
 800d718:	6819      	ldr	r1, [r3, #0]
 800d71a:	4b5c      	ldr	r3, [pc, #368]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d71c:	4a5c      	ldr	r2, [pc, #368]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d71e:	589b      	ldr	r3, [r3, r2]
 800d720:	b2c9      	uxtb	r1, r1
 800d722:	222c      	movs	r2, #44	@ 0x2c
 800d724:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800d726:	193b      	adds	r3, r7, r4
 800d728:	6819      	ldr	r1, [r3, #0]
 800d72a:	4b58      	ldr	r3, [pc, #352]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d72c:	4a58      	ldr	r2, [pc, #352]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d72e:	589b      	ldr	r3, [r3, r2]
 800d730:	b2c9      	uxtb	r1, r1
 800d732:	2234      	movs	r2, #52	@ 0x34
 800d734:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800d736:	197b      	adds	r3, r7, r5
 800d738:	221e      	movs	r2, #30
 800d73a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d73c:	4b53      	ldr	r3, [pc, #332]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d73e:	4a54      	ldr	r2, [pc, #336]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d740:	589b      	ldr	r3, [r3, r2]
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	197a      	adds	r2, r7, r5
 800d746:	0011      	movs	r1, r2
 800d748:	0018      	movs	r0, r3
 800d74a:	f003 ff4c 	bl	80115e6 <RegionGetPhyParam>
 800d74e:	0003      	movs	r3, r0
 800d750:	001a      	movs	r2, r3
 800d752:	193b      	adds	r3, r7, r4
 800d754:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800d756:	193b      	adds	r3, r7, r4
 800d758:	6819      	ldr	r1, [r3, #0]
 800d75a:	4b4c      	ldr	r3, [pc, #304]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d75c:	4a4c      	ldr	r2, [pc, #304]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d75e:	589b      	ldr	r3, [r3, r2]
 800d760:	b2c9      	uxtb	r1, r1
 800d762:	2238      	movs	r2, #56	@ 0x38
 800d764:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800d766:	197b      	adds	r3, r7, r5
 800d768:	221f      	movs	r2, #31
 800d76a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d76c:	4b47      	ldr	r3, [pc, #284]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d76e:	4a48      	ldr	r2, [pc, #288]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d770:	589b      	ldr	r3, [r3, r2]
 800d772:	781b      	ldrb	r3, [r3, #0]
 800d774:	197a      	adds	r2, r7, r5
 800d776:	0011      	movs	r1, r2
 800d778:	0018      	movs	r0, r3
 800d77a:	f003 ff34 	bl	80115e6 <RegionGetPhyParam>
 800d77e:	0003      	movs	r3, r0
 800d780:	001a      	movs	r2, r3
 800d782:	193b      	adds	r3, r7, r4
 800d784:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800d786:	193b      	adds	r3, r7, r4
 800d788:	6819      	ldr	r1, [r3, #0]
 800d78a:	4b40      	ldr	r3, [pc, #256]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d78c:	4a40      	ldr	r2, [pc, #256]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d78e:	589b      	ldr	r3, [r3, r2]
 800d790:	b2c9      	uxtb	r1, r1
 800d792:	2239      	movs	r2, #57	@ 0x39
 800d794:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800d796:	197b      	adds	r3, r7, r5
 800d798:	2220      	movs	r2, #32
 800d79a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d79c:	4b3b      	ldr	r3, [pc, #236]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d79e:	4a3c      	ldr	r2, [pc, #240]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d7a0:	589b      	ldr	r3, [r3, r2]
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	197a      	adds	r2, r7, r5
 800d7a6:	0011      	movs	r1, r2
 800d7a8:	0018      	movs	r0, r3
 800d7aa:	f003 ff1c 	bl	80115e6 <RegionGetPhyParam>
 800d7ae:	0003      	movs	r3, r0
 800d7b0:	001a      	movs	r2, r3
 800d7b2:	193b      	adds	r3, r7, r4
 800d7b4:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 800d7b6:	4b35      	ldr	r3, [pc, #212]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d7b8:	4a35      	ldr	r2, [pc, #212]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d7ba:	589b      	ldr	r3, [r3, r2]
 800d7bc:	193a      	adds	r2, r7, r4
 800d7be:	6812      	ldr	r2, [r2, #0]
 800d7c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800d7c2:	197b      	adds	r3, r7, r5
 800d7c4:	2221      	movs	r2, #33	@ 0x21
 800d7c6:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d7c8:	4b30      	ldr	r3, [pc, #192]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d7ca:	4a31      	ldr	r2, [pc, #196]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d7cc:	589b      	ldr	r3, [r3, r2]
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	197a      	adds	r2, r7, r5
 800d7d2:	0011      	movs	r1, r2
 800d7d4:	0018      	movs	r0, r3
 800d7d6:	f003 ff06 	bl	80115e6 <RegionGetPhyParam>
 800d7da:	0003      	movs	r3, r0
 800d7dc:	001a      	movs	r2, r3
 800d7de:	193b      	adds	r3, r7, r4
 800d7e0:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 800d7e2:	4b2a      	ldr	r3, [pc, #168]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d7e4:	4a2a      	ldr	r2, [pc, #168]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d7e6:	589b      	ldr	r3, [r3, r2]
 800d7e8:	193a      	adds	r2, r7, r4
 800d7ea:	6812      	ldr	r2, [r2, #0]
 800d7ec:	641a      	str	r2, [r3, #64]	@ 0x40

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800d7ee:	197b      	adds	r3, r7, r5
 800d7f0:	220b      	movs	r2, #11
 800d7f2:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d7f4:	4b25      	ldr	r3, [pc, #148]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d7f6:	4a26      	ldr	r2, [pc, #152]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d7f8:	589b      	ldr	r3, [r3, r2]
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	197a      	adds	r2, r7, r5
 800d7fe:	0011      	movs	r1, r2
 800d800:	0018      	movs	r0, r3
 800d802:	f003 fef0 	bl	80115e6 <RegionGetPhyParam>
 800d806:	0003      	movs	r3, r0
 800d808:	001a      	movs	r2, r3
 800d80a:	193b      	adds	r3, r7, r4
 800d80c:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckLimit = phyParam.Value;
 800d80e:	193b      	adds	r3, r7, r4
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	b299      	uxth	r1, r3
 800d814:	4a1d      	ldr	r2, [pc, #116]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d816:	23fd      	movs	r3, #253	@ 0xfd
 800d818:	009b      	lsls	r3, r3, #2
 800d81a:	52d1      	strh	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800d81c:	197b      	adds	r3, r7, r5
 800d81e:	220c      	movs	r2, #12
 800d820:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d822:	4b1a      	ldr	r3, [pc, #104]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d824:	4a1a      	ldr	r2, [pc, #104]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d826:	589b      	ldr	r3, [r3, r2]
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	197a      	adds	r2, r7, r5
 800d82c:	0011      	movs	r1, r2
 800d82e:	0018      	movs	r0, r3
 800d830:	f003 fed9 	bl	80115e6 <RegionGetPhyParam>
 800d834:	0003      	movs	r3, r0
 800d836:	001a      	movs	r2, r3
 800d838:	193b      	adds	r3, r7, r4
 800d83a:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckDelay = phyParam.Value;
 800d83c:	193b      	adds	r3, r7, r4
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	b299      	uxth	r1, r3
 800d842:	4b12      	ldr	r3, [pc, #72]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d844:	4a15      	ldr	r2, [pc, #84]	@ (800d89c <LoRaMacInitialization+0x46c>)
 800d846:	5299      	strh	r1, [r3, r2]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 800d848:	4b10      	ldr	r3, [pc, #64]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d84a:	4a11      	ldr	r2, [pc, #68]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d84c:	589b      	ldr	r3, [r3, r2]
 800d84e:	2224      	movs	r2, #36	@ 0x24
 800d850:	2101      	movs	r1, #1
 800d852:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 20;
 800d854:	4b0d      	ldr	r3, [pc, #52]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d856:	4a0e      	ldr	r2, [pc, #56]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d858:	589b      	ldr	r3, [r3, r2]
 800d85a:	2214      	movs	r2, #20
 800d85c:	609a      	str	r2, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 800d85e:	4b0b      	ldr	r3, [pc, #44]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d860:	4a0b      	ldr	r2, [pc, #44]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d862:	589b      	ldr	r3, [r3, r2]
 800d864:	2206      	movs	r2, #6
 800d866:	731a      	strb	r2, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 800d868:	4b08      	ldr	r3, [pc, #32]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d86a:	4a09      	ldr	r2, [pc, #36]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d86c:	589b      	ldr	r3, [r3, r2]
 800d86e:	4a07      	ldr	r2, [pc, #28]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d870:	4907      	ldr	r1, [pc, #28]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d872:	5852      	ldr	r2, [r2, r1]
 800d874:	689b      	ldr	r3, [r3, #8]
 800d876:	21fc      	movs	r1, #252	@ 0xfc
 800d878:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 800d87a:	4b04      	ldr	r3, [pc, #16]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d87c:	4a04      	ldr	r2, [pc, #16]	@ (800d890 <LoRaMacInitialization+0x460>)
 800d87e:	589b      	ldr	r3, [r3, r2]
 800d880:	4a02      	ldr	r2, [pc, #8]	@ (800d88c <LoRaMacInitialization+0x45c>)
 800d882:	e00d      	b.n	800d8a0 <LoRaMacInitialization+0x470>
 800d884:	0800d3e9 	.word	0x0800d3e9
 800d888:	20000dec 	.word	0x20000dec
 800d88c:	20000964 	.word	0x20000964
 800d890:	00000484 	.word	0x00000484
 800d894:	00000412 	.word	0x00000412
 800d898:	00000411 	.word	0x00000411
 800d89c:	000003f6 	.word	0x000003f6
 800d8a0:	499d      	ldr	r1, [pc, #628]	@ (800db18 <LoRaMacInitialization+0x6e8>)
 800d8a2:	5852      	ldr	r2, [r2, r1]
 800d8a4:	7b19      	ldrb	r1, [r3, #12]
 800d8a6:	2380      	movs	r3, #128	@ 0x80
 800d8a8:	005b      	lsls	r3, r3, #1
 800d8aa:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 800d8ac:	4b9b      	ldr	r3, [pc, #620]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d8ae:	4a9a      	ldr	r2, [pc, #616]	@ (800db18 <LoRaMacInitialization+0x6e8>)
 800d8b0:	589b      	ldr	r3, [r3, r2]
 800d8b2:	4a9a      	ldr	r2, [pc, #616]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d8b4:	4998      	ldr	r1, [pc, #608]	@ (800db18 <LoRaMacInitialization+0x6e8>)
 800d8b6:	5852      	ldr	r2, [r2, r1]
 800d8b8:	6919      	ldr	r1, [r3, #16]
 800d8ba:	2382      	movs	r3, #130	@ 0x82
 800d8bc:	005b      	lsls	r3, r3, #1
 800d8be:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 800d8c0:	4b96      	ldr	r3, [pc, #600]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d8c2:	4a95      	ldr	r2, [pc, #596]	@ (800db18 <LoRaMacInitialization+0x6e8>)
 800d8c4:	589b      	ldr	r3, [r3, r2]
 800d8c6:	4a95      	ldr	r2, [pc, #596]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d8c8:	4993      	ldr	r1, [pc, #588]	@ (800db18 <LoRaMacInitialization+0x6e8>)
 800d8ca:	5852      	ldr	r2, [r2, r1]
 800d8cc:	6959      	ldr	r1, [r3, #20]
 800d8ce:	2384      	movs	r3, #132	@ 0x84
 800d8d0:	005b      	lsls	r3, r3, #1
 800d8d2:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 800d8d4:	4b91      	ldr	r3, [pc, #580]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d8d6:	4a90      	ldr	r2, [pc, #576]	@ (800db18 <LoRaMacInitialization+0x6e8>)
 800d8d8:	589b      	ldr	r3, [r3, r2]
 800d8da:	4a90      	ldr	r2, [pc, #576]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d8dc:	498e      	ldr	r1, [pc, #568]	@ (800db18 <LoRaMacInitialization+0x6e8>)
 800d8de:	5852      	ldr	r2, [r2, r1]
 800d8e0:	6999      	ldr	r1, [r3, #24]
 800d8e2:	2386      	movs	r3, #134	@ 0x86
 800d8e4:	005b      	lsls	r3, r3, #1
 800d8e6:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 800d8e8:	4b8c      	ldr	r3, [pc, #560]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d8ea:	4a8b      	ldr	r2, [pc, #556]	@ (800db18 <LoRaMacInitialization+0x6e8>)
 800d8ec:	589b      	ldr	r3, [r3, r2]
 800d8ee:	4a8b      	ldr	r2, [pc, #556]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d8f0:	4989      	ldr	r1, [pc, #548]	@ (800db18 <LoRaMacInitialization+0x6e8>)
 800d8f2:	5852      	ldr	r2, [r2, r1]
 800d8f4:	69d9      	ldr	r1, [r3, #28]
 800d8f6:	2388      	movs	r3, #136	@ 0x88
 800d8f8:	005b      	lsls	r3, r3, #1
 800d8fa:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 800d8fc:	4b87      	ldr	r3, [pc, #540]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d8fe:	4a86      	ldr	r2, [pc, #536]	@ (800db18 <LoRaMacInitialization+0x6e8>)
 800d900:	589b      	ldr	r3, [r3, r2]
 800d902:	4a86      	ldr	r2, [pc, #536]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d904:	4984      	ldr	r1, [pc, #528]	@ (800db18 <LoRaMacInitialization+0x6e8>)
 800d906:	5852      	ldr	r2, [r2, r1]
 800d908:	6a19      	ldr	r1, [r3, #32]
 800d90a:	238a      	movs	r3, #138	@ 0x8a
 800d90c:	005b      	lsls	r3, r3, #1
 800d90e:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 800d910:	4b82      	ldr	r3, [pc, #520]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d912:	4a81      	ldr	r2, [pc, #516]	@ (800db18 <LoRaMacInitialization+0x6e8>)
 800d914:	589b      	ldr	r3, [r3, r2]
 800d916:	4a81      	ldr	r2, [pc, #516]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d918:	497f      	ldr	r1, [pc, #508]	@ (800db18 <LoRaMacInitialization+0x6e8>)
 800d91a:	5852      	ldr	r2, [r2, r1]
 800d91c:	2124      	movs	r1, #36	@ 0x24
 800d91e:	5c59      	ldrb	r1, [r3, r1]
 800d920:	238c      	movs	r3, #140	@ 0x8c
 800d922:	005b      	lsls	r3, r3, #1
 800d924:	54d1      	strb	r1, [r2, r3]

    ResetMacParameters( );
 800d926:	f7fe fec7 	bl	800c6b8 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 800d92a:	4b7c      	ldr	r3, [pc, #496]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d92c:	4a7a      	ldr	r2, [pc, #488]	@ (800db18 <LoRaMacInitialization+0x6e8>)
 800d92e:	589b      	ldr	r3, [r3, r2]
 800d930:	22f1      	movs	r2, #241	@ 0xf1
 800d932:	2101      	movs	r1, #1
 800d934:	5499      	strb	r1, [r3, r2]

    MacCtx.MacPrimitives = primitives;
 800d936:	4a79      	ldr	r2, [pc, #484]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d938:	23d1      	movs	r3, #209	@ 0xd1
 800d93a:	009b      	lsls	r3, r3, #2
 800d93c:	68f9      	ldr	r1, [r7, #12]
 800d93e:	50d1      	str	r1, [r2, r3]
    MacCtx.MacCallbacks = callbacks;
 800d940:	4a76      	ldr	r2, [pc, #472]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d942:	23d2      	movs	r3, #210	@ 0xd2
 800d944:	009b      	lsls	r3, r3, #2
 800d946:	68b9      	ldr	r1, [r7, #8]
 800d948:	50d1      	str	r1, [r2, r3]
    MacCtx.MacFlags.Value = 0;
 800d94a:	4b74      	ldr	r3, [pc, #464]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d94c:	4a74      	ldr	r2, [pc, #464]	@ (800db20 <LoRaMacInitialization+0x6f0>)
 800d94e:	2100      	movs	r1, #0
 800d950:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 800d952:	4a72      	ldr	r2, [pc, #456]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d954:	23d0      	movs	r3, #208	@ 0xd0
 800d956:	009b      	lsls	r3, r3, #2
 800d958:	2101      	movs	r1, #1
 800d95a:	50d1      	str	r1, [r2, r3]

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 800d95c:	4b6f      	ldr	r3, [pc, #444]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d95e:	4a6e      	ldr	r2, [pc, #440]	@ (800db18 <LoRaMacInitialization+0x6e8>)
 800d960:	589a      	ldr	r2, [r3, r2]
 800d962:	23e2      	movs	r3, #226	@ 0xe2
 800d964:	005b      	lsls	r3, r3, #1
 800d966:	2100      	movs	r1, #0
 800d968:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 800d96a:	4b6c      	ldr	r3, [pc, #432]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d96c:	4a6a      	ldr	r2, [pc, #424]	@ (800db18 <LoRaMacInitialization+0x6e8>)
 800d96e:	589a      	ldr	r2, [r3, r2]
 800d970:	23e4      	movs	r3, #228	@ 0xe4
 800d972:	005b      	lsls	r3, r3, #1
 800d974:	2100      	movs	r1, #0
 800d976:	50d1      	str	r1, [r2, r3]

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800d978:	4a6a      	ldr	r2, [pc, #424]	@ (800db24 <LoRaMacInitialization+0x6f4>)
 800d97a:	4b6b      	ldr	r3, [pc, #428]	@ (800db28 <LoRaMacInitialization+0x6f8>)
 800d97c:	0011      	movs	r1, r2
 800d97e:	0018      	movs	r0, r3
 800d980:	f007 fb0f 	bl	8014fa2 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800d984:	4a69      	ldr	r2, [pc, #420]	@ (800db2c <LoRaMacInitialization+0x6fc>)
 800d986:	4b6a      	ldr	r3, [pc, #424]	@ (800db30 <LoRaMacInitialization+0x700>)
 800d988:	0011      	movs	r1, r2
 800d98a:	0018      	movs	r0, r3
 800d98c:	f007 fb09 	bl	8014fa2 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800d990:	4a68      	ldr	r2, [pc, #416]	@ (800db34 <LoRaMacInitialization+0x704>)
 800d992:	4b69      	ldr	r3, [pc, #420]	@ (800db38 <LoRaMacInitialization+0x708>)
 800d994:	0011      	movs	r1, r2
 800d996:	0018      	movs	r0, r3
 800d998:	f007 fb03 	bl	8014fa2 <TimerInit>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800d99c:	4a67      	ldr	r2, [pc, #412]	@ (800db3c <LoRaMacInitialization+0x70c>)
 800d99e:	4b68      	ldr	r3, [pc, #416]	@ (800db40 <LoRaMacInitialization+0x710>)
 800d9a0:	0011      	movs	r1, r2
 800d9a2:	0018      	movs	r0, r3
 800d9a4:	f007 fafd 	bl	8014fa2 <TimerInit>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = TimerGetCurrentTime( );
 800d9a8:	4b5c      	ldr	r3, [pc, #368]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d9aa:	4a5b      	ldr	r2, [pc, #364]	@ (800db18 <LoRaMacInitialization+0x6e8>)
 800d9ac:	589c      	ldr	r4, [r3, r2]
 800d9ae:	f007 fc98 	bl	80152e2 <TimerGetCurrentTime>
 800d9b2:	0002      	movs	r2, r0
 800d9b4:	23e6      	movs	r3, #230	@ 0xe6
 800d9b6:	005b      	lsls	r3, r3, #1
 800d9b8:	50e2      	str	r2, [r4, r3]

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800d9ba:	4a58      	ldr	r2, [pc, #352]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d9bc:	23d3      	movs	r3, #211	@ 0xd3
 800d9be:	009b      	lsls	r3, r3, #2
 800d9c0:	4960      	ldr	r1, [pc, #384]	@ (800db44 <LoRaMacInitialization+0x714>)
 800d9c2:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800d9c4:	4a55      	ldr	r2, [pc, #340]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d9c6:	23d5      	movs	r3, #213	@ 0xd5
 800d9c8:	009b      	lsls	r3, r3, #2
 800d9ca:	495f      	ldr	r1, [pc, #380]	@ (800db48 <LoRaMacInitialization+0x718>)
 800d9cc:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800d9ce:	4a53      	ldr	r2, [pc, #332]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d9d0:	23d7      	movs	r3, #215	@ 0xd7
 800d9d2:	009b      	lsls	r3, r3, #2
 800d9d4:	495d      	ldr	r1, [pc, #372]	@ (800db4c <LoRaMacInitialization+0x71c>)
 800d9d6:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800d9d8:	4a50      	ldr	r2, [pc, #320]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d9da:	23d4      	movs	r3, #212	@ 0xd4
 800d9dc:	009b      	lsls	r3, r3, #2
 800d9de:	495c      	ldr	r1, [pc, #368]	@ (800db50 <LoRaMacInitialization+0x720>)
 800d9e0:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800d9e2:	4a4e      	ldr	r2, [pc, #312]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800d9e4:	23d6      	movs	r3, #214	@ 0xd6
 800d9e6:	009b      	lsls	r3, r3, #2
 800d9e8:	495a      	ldr	r1, [pc, #360]	@ (800db54 <LoRaMacInitialization+0x724>)
 800d9ea:	50d1      	str	r1, [r2, r3]
    Radio.Init( &MacCtx.RadioEvents );
 800d9ec:	4b5a      	ldr	r3, [pc, #360]	@ (800db58 <LoRaMacInitialization+0x728>)
 800d9ee:	689b      	ldr	r3, [r3, #8]
 800d9f0:	4a5a      	ldr	r2, [pc, #360]	@ (800db5c <LoRaMacInitialization+0x72c>)
 800d9f2:	0010      	movs	r0, r2
 800d9f4:	4798      	blx	r3

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_INIT;
 800d9f6:	2114      	movs	r1, #20
 800d9f8:	187b      	adds	r3, r7, r1
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 800d9fe:	187b      	adds	r3, r7, r1
 800da00:	2200      	movs	r2, #0
 800da02:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800da04:	4b45      	ldr	r3, [pc, #276]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800da06:	4a44      	ldr	r2, [pc, #272]	@ (800db18 <LoRaMacInitialization+0x6e8>)
 800da08:	589b      	ldr	r3, [r3, r2]
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	187a      	adds	r2, r7, r1
 800da0e:	0011      	movs	r1, r2
 800da10:	0018      	movs	r0, r3
 800da12:	f003 fe23 	bl	801165c <RegionInitDefaults>

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 800da16:	4b52      	ldr	r3, [pc, #328]	@ (800db60 <LoRaMacInitialization+0x730>)
 800da18:	0018      	movs	r0, r3
 800da1a:	f7fb fa8d 	bl	8008f38 <SecureElementInit>
 800da1e:	1e03      	subs	r3, r0, #0
 800da20:	d001      	beq.n	800da26 <LoRaMacInitialization+0x5f6>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800da22:	2311      	movs	r3, #17
 800da24:	e073      	b.n	800db0e <LoRaMacInitialization+0x6de>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 800da26:	4b4f      	ldr	r3, [pc, #316]	@ (800db64 <LoRaMacInitialization+0x734>)
 800da28:	0018      	movs	r0, r3
 800da2a:	f002 fcbf 	bl	80103ac <LoRaMacCryptoInit>
 800da2e:	1e03      	subs	r3, r0, #0
 800da30:	d001      	beq.n	800da36 <LoRaMacInitialization+0x606>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800da32:	2311      	movs	r3, #17
 800da34:	e06b      	b.n	800db0e <LoRaMacInitialization+0x6de>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 800da36:	4b4c      	ldr	r3, [pc, #304]	@ (800db68 <LoRaMacInitialization+0x738>)
 800da38:	0018      	movs	r0, r3
 800da3a:	f001 fd53 	bl	800f4e4 <LoRaMacCommandsInit>
 800da3e:	1e03      	subs	r3, r0, #0
 800da40:	d001      	beq.n	800da46 <LoRaMacInitialization+0x616>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800da42:	2313      	movs	r3, #19
 800da44:	e063      	b.n	800db0e <LoRaMacInitialization+0x6de>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800da46:	4b35      	ldr	r3, [pc, #212]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800da48:	4a33      	ldr	r2, [pc, #204]	@ (800db18 <LoRaMacInitialization+0x6e8>)
 800da4a:	589b      	ldr	r3, [r3, r2]
 800da4c:	3350      	adds	r3, #80	@ 0x50
 800da4e:	0018      	movs	r0, r3
 800da50:	f002 fdba 	bl	80105c8 <LoRaMacCryptoSetMulticastReference>
 800da54:	1e03      	subs	r3, r0, #0
 800da56:	d001      	beq.n	800da5c <LoRaMacInitialization+0x62c>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800da58:	2311      	movs	r3, #17
 800da5a:	e058      	b.n	800db0e <LoRaMacInitialization+0x6de>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800da5c:	4b3e      	ldr	r3, [pc, #248]	@ (800db58 <LoRaMacInitialization+0x728>)
 800da5e:	69db      	ldr	r3, [r3, #28]
 800da60:	4798      	blx	r3
 800da62:	0003      	movs	r3, r0
 800da64:	0018      	movs	r0, r3
 800da66:	f007 fdf3 	bl	8015650 <srand1>

    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800da6a:	4b3b      	ldr	r3, [pc, #236]	@ (800db58 <LoRaMacInitialization+0x728>)
 800da6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800da6e:	4a2b      	ldr	r2, [pc, #172]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800da70:	4929      	ldr	r1, [pc, #164]	@ (800db18 <LoRaMacInitialization+0x6e8>)
 800da72:	5852      	ldr	r2, [r2, r1]
 800da74:	21f1      	movs	r1, #241	@ 0xf1
 800da76:	5c52      	ldrb	r2, [r2, r1]
 800da78:	0010      	movs	r0, r2
 800da7a:	4798      	blx	r3
    Radio.Sleep( );
 800da7c:	4b36      	ldr	r3, [pc, #216]	@ (800db58 <LoRaMacInitialization+0x728>)
 800da7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da80:	4798      	blx	r3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800da82:	2140      	movs	r1, #64	@ 0x40
 800da84:	187b      	adds	r3, r7, r1
 800da86:	2200      	movs	r2, #0
 800da88:	601a      	str	r2, [r3, #0]
    classBCallbacks.MacProcessNotify = NULL;
 800da8a:	187b      	adds	r3, r7, r1
 800da8c:	2200      	movs	r2, #0
 800da8e:	605a      	str	r2, [r3, #4]
    if( callbacks != NULL )
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d007      	beq.n	800daa6 <LoRaMacInitialization+0x676>
    {
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	685a      	ldr	r2, [r3, #4]
 800da9a:	187b      	adds	r3, r7, r1
 800da9c:	601a      	str	r2, [r3, #0]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	68da      	ldr	r2, [r3, #12]
 800daa2:	187b      	adds	r3, r7, r1
 800daa4:	605a      	str	r2, [r3, #4]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800daa6:	2120      	movs	r1, #32
 800daa8:	187b      	adds	r3, r7, r1
 800daaa:	4a30      	ldr	r2, [pc, #192]	@ (800db6c <LoRaMacInitialization+0x73c>)
 800daac:	601a      	str	r2, [r3, #0]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800daae:	187b      	adds	r3, r7, r1
 800dab0:	4a2f      	ldr	r2, [pc, #188]	@ (800db70 <LoRaMacInitialization+0x740>)
 800dab2:	605a      	str	r2, [r3, #4]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800dab4:	187b      	adds	r3, r7, r1
 800dab6:	4a2f      	ldr	r2, [pc, #188]	@ (800db74 <LoRaMacInitialization+0x744>)
 800dab8:	609a      	str	r2, [r3, #8]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800daba:	187b      	adds	r3, r7, r1
 800dabc:	4a2e      	ldr	r2, [pc, #184]	@ (800db78 <LoRaMacInitialization+0x748>)
 800dabe:	60da      	str	r2, [r3, #12]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 800dac0:	4b16      	ldr	r3, [pc, #88]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800dac2:	4a15      	ldr	r2, [pc, #84]	@ (800db18 <LoRaMacInitialization+0x6e8>)
 800dac4:	589b      	ldr	r3, [r3, r2]
 800dac6:	334c      	adds	r3, #76	@ 0x4c
 800dac8:	001a      	movs	r2, r3
 800daca:	187b      	adds	r3, r7, r1
 800dacc:	611a      	str	r2, [r3, #16]
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 800dace:	4b13      	ldr	r3, [pc, #76]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800dad0:	4a11      	ldr	r2, [pc, #68]	@ (800db18 <LoRaMacInitialization+0x6e8>)
 800dad2:	589b      	ldr	r3, [r3, r2]
 800dad4:	001a      	movs	r2, r3
 800dad6:	187b      	adds	r3, r7, r1
 800dad8:	615a      	str	r2, [r3, #20]
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 800dada:	4b10      	ldr	r3, [pc, #64]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800dadc:	4a0e      	ldr	r2, [pc, #56]	@ (800db18 <LoRaMacInitialization+0x6e8>)
 800dade:	589b      	ldr	r3, [r3, r2]
 800dae0:	33f8      	adds	r3, #248	@ 0xf8
 800dae2:	001a      	movs	r2, r3
 800dae4:	187b      	adds	r3, r7, r1
 800dae6:	619a      	str	r2, [r3, #24]
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 800dae8:	4b0c      	ldr	r3, [pc, #48]	@ (800db1c <LoRaMacInitialization+0x6ec>)
 800daea:	4a0b      	ldr	r2, [pc, #44]	@ (800db18 <LoRaMacInitialization+0x6e8>)
 800daec:	589b      	ldr	r3, [r3, r2]
 800daee:	3350      	adds	r3, #80	@ 0x50
 800daf0:	001a      	movs	r2, r3
 800daf2:	0008      	movs	r0, r1
 800daf4:	187b      	adds	r3, r7, r1
 800daf6:	61da      	str	r2, [r3, #28]

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 800daf8:	4a20      	ldr	r2, [pc, #128]	@ (800db7c <LoRaMacInitialization+0x74c>)
 800dafa:	2340      	movs	r3, #64	@ 0x40
 800dafc:	18f9      	adds	r1, r7, r3
 800dafe:	183b      	adds	r3, r7, r0
 800db00:	0018      	movs	r0, r3
 800db02:	f001 face 	bl	800f0a2 <LoRaMacClassBInit>

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800db06:	2001      	movs	r0, #1
 800db08:	f7fc fec2 	bl	800a890 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800db0c:	2300      	movs	r3, #0
}
 800db0e:	0018      	movs	r0, r3
 800db10:	46bd      	mov	sp, r7
 800db12:	b014      	add	sp, #80	@ 0x50
 800db14:	bdb0      	pop	{r4, r5, r7, pc}
 800db16:	46c0      	nop			@ (mov r8, r8)
 800db18:	00000484 	.word	0x00000484
 800db1c:	20000964 	.word	0x20000964
 800db20:	00000481 	.word	0x00000481
 800db24:	0800ad21 	.word	0x0800ad21
 800db28:	20000ccc 	.word	0x20000ccc
 800db2c:	0800adad 	.word	0x0800adad
 800db30:	20000ce4 	.word	0x20000ce4
 800db34:	0800ae45 	.word	0x0800ae45
 800db38:	20000cfc 	.word	0x20000cfc
 800db3c:	0800aee9 	.word	0x0800aee9
 800db40:	20000d5c 	.word	0x20000d5c
 800db44:	08009731 	.word	0x08009731
 800db48:	080097cd 	.word	0x080097cd
 800db4c:	08009901 	.word	0x08009901
 800db50:	0800988d 	.word	0x0800988d
 800db54:	08009945 	.word	0x08009945
 800db58:	0801adcc 	.word	0x0801adcc
 800db5c:	20000cb0 	.word	0x20000cb0
 800db60:	0800d3b9 	.word	0x0800d3b9
 800db64:	0800d3a9 	.word	0x0800d3a9
 800db68:	0800d3c9 	.word	0x0800d3c9
 800db6c:	20000dc8 	.word	0x20000dc8
 800db70:	20000d80 	.word	0x20000d80
 800db74:	20000db4 	.word	0x20000db4
 800db78:	20000de5 	.word	0x20000de5
 800db7c:	0800d3d9 	.word	0x0800d3d9

0800db80 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800db80:	b580      	push	{r7, lr}
 800db82:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 800db84:	4a04      	ldr	r2, [pc, #16]	@ (800db98 <LoRaMacStart+0x18>)
 800db86:	23d0      	movs	r3, #208	@ 0xd0
 800db88:	009b      	lsls	r3, r3, #2
 800db8a:	2100      	movs	r1, #0
 800db8c:	50d1      	str	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 800db8e:	2300      	movs	r3, #0
}
 800db90:	0018      	movs	r0, r3
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
 800db96:	46c0      	nop			@ (mov r8, r8)
 800db98:	20000964 	.word	0x20000964

0800db9c <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800db9c:	b590      	push	{r4, r7, lr}
 800db9e:	b08b      	sub	sp, #44	@ 0x2c
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	0002      	movs	r2, r0
 800dba4:	6039      	str	r1, [r7, #0]
 800dba6:	1dfb      	adds	r3, r7, #7
 800dba8:	701a      	strb	r2, [r3, #0]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800dbaa:	4b50      	ldr	r3, [pc, #320]	@ (800dcec <LoRaMacQueryTxPossible+0x150>)
 800dbac:	4a50      	ldr	r2, [pc, #320]	@ (800dcf0 <LoRaMacQueryTxPossible+0x154>)
 800dbae:	589b      	ldr	r3, [r3, r2]
 800dbb0:	22f4      	movs	r2, #244	@ 0xf4
 800dbb2:	589b      	ldr	r3, [r3, r2]
 800dbb4:	613b      	str	r3, [r7, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800dbb6:	4b4d      	ldr	r3, [pc, #308]	@ (800dcec <LoRaMacQueryTxPossible+0x150>)
 800dbb8:	4a4d      	ldr	r2, [pc, #308]	@ (800dcf0 <LoRaMacQueryTxPossible+0x154>)
 800dbba:	589b      	ldr	r3, [r3, r2]
 800dbbc:	2205      	movs	r2, #5
 800dbbe:	569a      	ldrsb	r2, [r3, r2]
 800dbc0:	230f      	movs	r3, #15
 800dbc2:	18fb      	adds	r3, r7, r3
 800dbc4:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800dbc6:	4b49      	ldr	r3, [pc, #292]	@ (800dcec <LoRaMacQueryTxPossible+0x150>)
 800dbc8:	4a49      	ldr	r2, [pc, #292]	@ (800dcf0 <LoRaMacQueryTxPossible+0x154>)
 800dbca:	589b      	ldr	r3, [r3, r2]
 800dbcc:	2204      	movs	r2, #4
 800dbce:	569a      	ldrsb	r2, [r3, r2]
 800dbd0:	230e      	movs	r3, #14
 800dbd2:	18fb      	adds	r3, r7, r3
 800dbd4:	701a      	strb	r2, [r3, #0]
    size_t macCmdsSize = 0;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d101      	bne.n	800dbe4 <LoRaMacQueryTxPossible+0x48>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dbe0:	2303      	movs	r3, #3
 800dbe2:	e07e      	b.n	800dce2 <LoRaMacQueryTxPossible+0x146>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 800dbe4:	4b41      	ldr	r3, [pc, #260]	@ (800dcec <LoRaMacQueryTxPossible+0x150>)
 800dbe6:	4a42      	ldr	r2, [pc, #264]	@ (800dcf0 <LoRaMacQueryTxPossible+0x154>)
 800dbe8:	5899      	ldr	r1, [r3, r2]
 800dbea:	2014      	movs	r0, #20
 800dbec:	183b      	adds	r3, r7, r0
 800dbee:	22e8      	movs	r2, #232	@ 0xe8
 800dbf0:	0052      	lsls	r2, r2, #1
 800dbf2:	588a      	ldr	r2, [r1, r2]
 800dbf4:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = false;
 800dbf6:	183b      	adds	r3, r7, r0
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800dbfc:	4b3b      	ldr	r3, [pc, #236]	@ (800dcec <LoRaMacQueryTxPossible+0x150>)
 800dbfe:	4a3c      	ldr	r2, [pc, #240]	@ (800dcf0 <LoRaMacQueryTxPossible+0x154>)
 800dc00:	589b      	ldr	r3, [r3, r2]
 800dc02:	22f2      	movs	r2, #242	@ 0xf2
 800dc04:	5c9a      	ldrb	r2, [r3, r2]
 800dc06:	183b      	adds	r3, r7, r0
 800dc08:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800dc0a:	4b38      	ldr	r3, [pc, #224]	@ (800dcec <LoRaMacQueryTxPossible+0x150>)
 800dc0c:	4a38      	ldr	r2, [pc, #224]	@ (800dcf0 <LoRaMacQueryTxPossible+0x154>)
 800dc0e:	589b      	ldr	r3, [r3, r2]
 800dc10:	22f4      	movs	r2, #244	@ 0xf4
 800dc12:	589a      	ldr	r2, [r3, r2]
 800dc14:	183b      	adds	r3, r7, r0
 800dc16:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800dc18:	4a34      	ldr	r2, [pc, #208]	@ (800dcec <LoRaMacQueryTxPossible+0x150>)
 800dc1a:	23fd      	movs	r3, #253	@ 0xfd
 800dc1c:	009b      	lsls	r3, r3, #2
 800dc1e:	5ad2      	ldrh	r2, [r2, r3]
 800dc20:	183b      	adds	r3, r7, r0
 800dc22:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800dc24:	4b31      	ldr	r3, [pc, #196]	@ (800dcec <LoRaMacQueryTxPossible+0x150>)
 800dc26:	4a33      	ldr	r2, [pc, #204]	@ (800dcf4 <LoRaMacQueryTxPossible+0x158>)
 800dc28:	5a9a      	ldrh	r2, [r3, r2]
 800dc2a:	183b      	adds	r3, r7, r0
 800dc2c:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800dc2e:	4b2f      	ldr	r3, [pc, #188]	@ (800dcec <LoRaMacQueryTxPossible+0x150>)
 800dc30:	4a2f      	ldr	r2, [pc, #188]	@ (800dcf0 <LoRaMacQueryTxPossible+0x154>)
 800dc32:	589b      	ldr	r3, [r3, r2]
 800dc34:	22f9      	movs	r2, #249	@ 0xf9
 800dc36:	569a      	ldrsb	r2, [r3, r2]
 800dc38:	183b      	adds	r3, r7, r0
 800dc3a:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800dc3c:	4b2b      	ldr	r3, [pc, #172]	@ (800dcec <LoRaMacQueryTxPossible+0x150>)
 800dc3e:	4a2c      	ldr	r2, [pc, #176]	@ (800dcf0 <LoRaMacQueryTxPossible+0x154>)
 800dc40:	589b      	ldr	r3, [r3, r2]
 800dc42:	22f8      	movs	r2, #248	@ 0xf8
 800dc44:	569a      	ldrsb	r2, [r3, r2]
 800dc46:	183b      	adds	r3, r7, r0
 800dc48:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800dc4a:	4b28      	ldr	r3, [pc, #160]	@ (800dcec <LoRaMacQueryTxPossible+0x150>)
 800dc4c:	4a28      	ldr	r2, [pc, #160]	@ (800dcf0 <LoRaMacQueryTxPossible+0x154>)
 800dc4e:	589a      	ldr	r2, [r3, r2]
 800dc50:	2396      	movs	r3, #150	@ 0x96
 800dc52:	005b      	lsls	r3, r3, #1
 800dc54:	5cd2      	ldrb	r2, [r2, r3]
 800dc56:	183b      	adds	r3, r7, r0
 800dc58:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 800dc5a:	4b24      	ldr	r3, [pc, #144]	@ (800dcec <LoRaMacQueryTxPossible+0x150>)
 800dc5c:	4a24      	ldr	r2, [pc, #144]	@ (800dcf0 <LoRaMacQueryTxPossible+0x154>)
 800dc5e:	589b      	ldr	r3, [r3, r2]
 800dc60:	781a      	ldrb	r2, [r3, #0]
 800dc62:	183b      	adds	r3, r7, r0
 800dc64:	74da      	strb	r2, [r3, #19]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800dc66:	2310      	movs	r3, #16
 800dc68:	18fb      	adds	r3, r7, r3
 800dc6a:	220e      	movs	r2, #14
 800dc6c:	18ba      	adds	r2, r7, r2
 800dc6e:	240f      	movs	r4, #15
 800dc70:	1939      	adds	r1, r7, r4
 800dc72:	1838      	adds	r0, r7, r0
 800dc74:	f001 f9fd 	bl	800f072 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800dc78:	193b      	adds	r3, r7, r4
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	b25b      	sxtb	r3, r3
 800dc7e:	0018      	movs	r0, r3
 800dc80:	f7fd fb20 	bl	800b2c4 <GetMaxAppPayloadWithoutFOptsLength>
 800dc84:	0003      	movs	r3, r0
 800dc86:	001a      	movs	r2, r3
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800dc8c:	2308      	movs	r3, #8
 800dc8e:	18fb      	adds	r3, r7, r3
 800dc90:	0018      	movs	r0, r3
 800dc92:	f001 fd3b 	bl	800f70c <LoRaMacCommandsGetSizeSerializedCmds>
 800dc96:	1e03      	subs	r3, r0, #0
 800dc98:	d001      	beq.n	800dc9e <LoRaMacQueryTxPossible+0x102>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800dc9a:	2313      	movs	r3, #19
 800dc9c:	e021      	b.n	800dce2 <LoRaMacQueryTxPossible+0x146>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	2b0f      	cmp	r3, #15
 800dca2:	d81a      	bhi.n	800dcda <LoRaMacQueryTxPossible+0x13e>
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	785b      	ldrb	r3, [r3, #1]
 800dca8:	001a      	movs	r2, r3
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d314      	bcc.n	800dcda <LoRaMacQueryTxPossible+0x13e>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	785a      	ldrb	r2, [r3, #1]
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	1ad3      	subs	r3, r2, r3
 800dcba:	b2da      	uxtb	r2, r3
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	785b      	ldrb	r3, [r3, #1]
 800dcc4:	0019      	movs	r1, r3
 800dcc6:	1dfb      	adds	r3, r7, #7
 800dcc8:	781a      	ldrb	r2, [r3, #0]
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	18d3      	adds	r3, r2, r3
 800dcce:	4299      	cmp	r1, r3
 800dcd0:	d301      	bcc.n	800dcd6 <LoRaMacQueryTxPossible+0x13a>
        {
            return LORAMAC_STATUS_OK;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	e005      	b.n	800dce2 <LoRaMacQueryTxPossible+0x146>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800dcd6:	2308      	movs	r3, #8
 800dcd8:	e003      	b.n	800dce2 <LoRaMacQueryTxPossible+0x146>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800dce0:	2308      	movs	r3, #8
    }
}
 800dce2:	0018      	movs	r0, r3
 800dce4:	46bd      	mov	sp, r7
 800dce6:	b00b      	add	sp, #44	@ 0x2c
 800dce8:	bd90      	pop	{r4, r7, pc}
 800dcea:	46c0      	nop			@ (mov r8, r8)
 800dcec:	20000964 	.word	0x20000964
 800dcf0:	00000484 	.word	0x00000484
 800dcf4:	000003f6 	.word	0x000003f6

0800dcf8 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800dcf8:	b590      	push	{r4, r7, lr}
 800dcfa:	b087      	sub	sp, #28
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dd00:	2317      	movs	r3, #23
 800dd02:	18fb      	adds	r3, r7, r3
 800dd04:	2200      	movs	r2, #0
 800dd06:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d101      	bne.n	800dd12 <LoRaMacMibGetRequestConfirm+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dd0e:	2303      	movs	r3, #3
 800dd10:	e143      	b.n	800df9a <LoRaMacMibGetRequestConfirm+0x2a2>
    }

    switch( mibGet->Type )
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	2b34      	cmp	r3, #52	@ 0x34
 800dd18:	d900      	bls.n	800dd1c <LoRaMacMibGetRequestConfirm+0x24>
 800dd1a:	e132      	b.n	800df82 <LoRaMacMibGetRequestConfirm+0x28a>
 800dd1c:	009a      	lsls	r2, r3, #2
 800dd1e:	4ba1      	ldr	r3, [pc, #644]	@ (800dfa4 <LoRaMacMibGetRequestConfirm+0x2ac>)
 800dd20:	18d3      	adds	r3, r2, r3
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 800dd26:	4ba0      	ldr	r3, [pc, #640]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800dd28:	4aa0      	ldr	r2, [pc, #640]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800dd2a:	589b      	ldr	r3, [r3, r2]
 800dd2c:	22f0      	movs	r2, #240	@ 0xf0
 800dd2e:	5c9a      	ldrb	r2, [r3, r2]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	711a      	strb	r2, [r3, #4]
            break;
 800dd34:	e12e      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 800dd36:	4b9c      	ldr	r3, [pc, #624]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800dd38:	4a9c      	ldr	r2, [pc, #624]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800dd3a:	589a      	ldr	r2, [r3, r2]
 800dd3c:	23ea      	movs	r3, #234	@ 0xea
 800dd3e:	005b      	lsls	r3, r3, #1
 800dd40:	5cd2      	ldrb	r2, [r2, r3]
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	711a      	strb	r2, [r3, #4]
            break;
 800dd46:	e125      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800dd48:	f7fb fcc6 	bl	80096d8 <SecureElementGetDevEui>
 800dd4c:	0002      	movs	r2, r0
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	605a      	str	r2, [r3, #4]
            break;
 800dd52:	e11f      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800dd54:	f7fb fce4 	bl	8009720 <SecureElementGetJoinEui>
 800dd58:	0002      	movs	r2, r0
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	605a      	str	r2, [r3, #4]
            break;
 800dd5e:	e119      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 800dd60:	4b91      	ldr	r3, [pc, #580]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800dd62:	4a92      	ldr	r2, [pc, #584]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800dd64:	589b      	ldr	r3, [r3, r2]
 800dd66:	22f2      	movs	r2, #242	@ 0xf2
 800dd68:	5c9a      	ldrb	r2, [r3, r2]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	711a      	strb	r2, [r3, #4]
            break;
 800dd6e:	e111      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 800dd70:	4b8d      	ldr	r3, [pc, #564]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800dd72:	4a8e      	ldr	r2, [pc, #568]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800dd74:	589b      	ldr	r3, [r3, r2]
 800dd76:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	605a      	str	r2, [r3, #4]
            break;
 800dd7c:	e10a      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 800dd7e:	4b8a      	ldr	r3, [pc, #552]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800dd80:	4a8a      	ldr	r2, [pc, #552]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800dd82:	589b      	ldr	r3, [r3, r2]
 800dd84:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	605a      	str	r2, [r3, #4]
            break;
 800dd8a:	e103      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 800dd8c:	4b86      	ldr	r3, [pc, #536]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800dd8e:	4a87      	ldr	r2, [pc, #540]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800dd90:	589b      	ldr	r3, [r3, r2]
 800dd92:	22f1      	movs	r2, #241	@ 0xf1
 800dd94:	5c9a      	ldrb	r2, [r3, r2]
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	711a      	strb	r2, [r3, #4]
            break;
 800dd9a:	e0fb      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800dd9c:	4b82      	ldr	r3, [pc, #520]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800dd9e:	4a83      	ldr	r2, [pc, #524]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800dda0:	589a      	ldr	r2, [r3, r2]
 800dda2:	2340      	movs	r3, #64	@ 0x40
 800dda4:	33ff      	adds	r3, #255	@ 0xff
 800dda6:	5cd2      	ldrb	r2, [r2, r3]
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	711a      	strb	r2, [r3, #4]
            break;
 800ddac:	e0f2      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800ddae:	2110      	movs	r1, #16
 800ddb0:	187b      	adds	r3, r7, r1
 800ddb2:	221d      	movs	r2, #29
 800ddb4:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ddb6:	4b7c      	ldr	r3, [pc, #496]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800ddb8:	4a7c      	ldr	r2, [pc, #496]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800ddba:	589b      	ldr	r3, [r3, r2]
 800ddbc:	781b      	ldrb	r3, [r3, #0]
 800ddbe:	187a      	adds	r2, r7, r1
 800ddc0:	0011      	movs	r1, r2
 800ddc2:	0018      	movs	r0, r3
 800ddc4:	f003 fc0f 	bl	80115e6 <RegionGetPhyParam>
 800ddc8:	0003      	movs	r3, r0
 800ddca:	001a      	movs	r2, r3
 800ddcc:	210c      	movs	r1, #12
 800ddce:	187b      	adds	r3, r7, r1
 800ddd0:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelList = phyParam.Channels;
 800ddd2:	187b      	adds	r3, r7, r1
 800ddd4:	681a      	ldr	r2, [r3, #0]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	605a      	str	r2, [r3, #4]
            break;
 800ddda:	e0db      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 800dddc:	4b72      	ldr	r3, [pc, #456]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800ddde:	4a73      	ldr	r2, [pc, #460]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800dde0:	5899      	ldr	r1, [r3, r2]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	228e      	movs	r2, #142	@ 0x8e
 800dde6:	0052      	lsls	r2, r2, #1
 800dde8:	3304      	adds	r3, #4
 800ddea:	188a      	adds	r2, r1, r2
 800ddec:	ca03      	ldmia	r2!, {r0, r1}
 800ddee:	c303      	stmia	r3!, {r0, r1}
            break;
 800ddf0:	e0d0      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 800ddf2:	4b6d      	ldr	r3, [pc, #436]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800ddf4:	4a6d      	ldr	r2, [pc, #436]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800ddf6:	589a      	ldr	r2, [r3, r2]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	3304      	adds	r3, #4
 800ddfc:	3228      	adds	r2, #40	@ 0x28
 800ddfe:	ca03      	ldmia	r2!, {r0, r1}
 800de00:	c303      	stmia	r3!, {r0, r1}
            break;
 800de02:	e0c7      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 800de04:	4b68      	ldr	r3, [pc, #416]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800de06:	4a69      	ldr	r2, [pc, #420]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800de08:	5899      	ldr	r1, [r3, r2]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2292      	movs	r2, #146	@ 0x92
 800de0e:	0052      	lsls	r2, r2, #1
 800de10:	3304      	adds	r3, #4
 800de12:	188a      	adds	r2, r1, r2
 800de14:	ca03      	ldmia	r2!, {r0, r1}
 800de16:	c303      	stmia	r3!, {r0, r1}
            break;
 800de18:	e0bc      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 800de1a:	4b63      	ldr	r3, [pc, #396]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800de1c:	4a63      	ldr	r2, [pc, #396]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800de1e:	589a      	ldr	r2, [r3, r2]
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	3304      	adds	r3, #4
 800de24:	3230      	adds	r2, #48	@ 0x30
 800de26:	ca03      	ldmia	r2!, {r0, r1}
 800de28:	c303      	stmia	r3!, {r0, r1}
            break;
 800de2a:	e0b3      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800de2c:	2110      	movs	r1, #16
 800de2e:	187b      	adds	r3, r7, r1
 800de30:	221b      	movs	r2, #27
 800de32:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800de34:	4b5c      	ldr	r3, [pc, #368]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800de36:	4a5d      	ldr	r2, [pc, #372]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800de38:	589b      	ldr	r3, [r3, r2]
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	187a      	adds	r2, r7, r1
 800de3e:	0011      	movs	r1, r2
 800de40:	0018      	movs	r0, r3
 800de42:	f003 fbd0 	bl	80115e6 <RegionGetPhyParam>
 800de46:	0003      	movs	r3, r0
 800de48:	001a      	movs	r2, r3
 800de4a:	210c      	movs	r1, #12
 800de4c:	187b      	adds	r3, r7, r1
 800de4e:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800de50:	187b      	adds	r3, r7, r1
 800de52:	681a      	ldr	r2, [r3, #0]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	605a      	str	r2, [r3, #4]
            break;
 800de58:	e09c      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800de5a:	2110      	movs	r1, #16
 800de5c:	187b      	adds	r3, r7, r1
 800de5e:	221a      	movs	r2, #26
 800de60:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800de62:	4b51      	ldr	r3, [pc, #324]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800de64:	4a51      	ldr	r2, [pc, #324]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800de66:	589b      	ldr	r3, [r3, r2]
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	187a      	adds	r2, r7, r1
 800de6c:	0011      	movs	r1, r2
 800de6e:	0018      	movs	r0, r3
 800de70:	f003 fbb9 	bl	80115e6 <RegionGetPhyParam>
 800de74:	0003      	movs	r3, r0
 800de76:	001a      	movs	r2, r3
 800de78:	210c      	movs	r1, #12
 800de7a:	187b      	adds	r3, r7, r1
 800de7c:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800de7e:	187b      	adds	r3, r7, r1
 800de80:	681a      	ldr	r2, [r3, #0]
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	605a      	str	r2, [r3, #4]
            break;
 800de86:	e085      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800de88:	4b47      	ldr	r3, [pc, #284]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800de8a:	4a48      	ldr	r2, [pc, #288]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800de8c:	589a      	ldr	r2, [r3, r2]
 800de8e:	238c      	movs	r3, #140	@ 0x8c
 800de90:	005b      	lsls	r3, r3, #1
 800de92:	5cd2      	ldrb	r2, [r2, r3]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	711a      	strb	r2, [r3, #4]
            break;
 800de98:	e07c      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 800de9a:	4b43      	ldr	r3, [pc, #268]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800de9c:	4a43      	ldr	r2, [pc, #268]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800de9e:	589a      	ldr	r2, [r3, r2]
 800dea0:	2382      	movs	r3, #130	@ 0x82
 800dea2:	005b      	lsls	r3, r3, #1
 800dea4:	58d2      	ldr	r2, [r2, r3]
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	605a      	str	r2, [r3, #4]
            break;
 800deaa:	e073      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 800deac:	4b3e      	ldr	r3, [pc, #248]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800deae:	4a3f      	ldr	r2, [pc, #252]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800deb0:	589a      	ldr	r2, [r3, r2]
 800deb2:	2384      	movs	r3, #132	@ 0x84
 800deb4:	005b      	lsls	r3, r3, #1
 800deb6:	58d2      	ldr	r2, [r2, r3]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	605a      	str	r2, [r3, #4]
            break;
 800debc:	e06a      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 800debe:	4b3a      	ldr	r3, [pc, #232]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800dec0:	4a3a      	ldr	r2, [pc, #232]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800dec2:	589a      	ldr	r2, [r3, r2]
 800dec4:	2386      	movs	r3, #134	@ 0x86
 800dec6:	005b      	lsls	r3, r3, #1
 800dec8:	58d2      	ldr	r2, [r2, r3]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	605a      	str	r2, [r3, #4]
            break;
 800dece:	e061      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 800ded0:	4b35      	ldr	r3, [pc, #212]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800ded2:	4a36      	ldr	r2, [pc, #216]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800ded4:	589a      	ldr	r2, [r3, r2]
 800ded6:	2388      	movs	r3, #136	@ 0x88
 800ded8:	005b      	lsls	r3, r3, #1
 800deda:	58d2      	ldr	r2, [r2, r3]
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	605a      	str	r2, [r3, #4]
            break;
 800dee0:	e058      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 800dee2:	4b31      	ldr	r3, [pc, #196]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800dee4:	4a31      	ldr	r2, [pc, #196]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800dee6:	589a      	ldr	r2, [r3, r2]
 800dee8:	238a      	movs	r3, #138	@ 0x8a
 800deea:	005b      	lsls	r3, r3, #1
 800deec:	58d2      	ldr	r2, [r2, r3]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	605a      	str	r2, [r3, #4]
            break;
 800def2:	e04f      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800def4:	4b2c      	ldr	r3, [pc, #176]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800def6:	4a2d      	ldr	r2, [pc, #180]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800def8:	589b      	ldr	r3, [r3, r2]
 800defa:	2205      	movs	r2, #5
 800defc:	569a      	ldrsb	r2, [r3, r2]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	711a      	strb	r2, [r3, #4]
            break;
 800df02:	e047      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800df04:	4b28      	ldr	r3, [pc, #160]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800df06:	4a29      	ldr	r2, [pc, #164]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800df08:	589b      	ldr	r3, [r3, r2]
 800df0a:	22f9      	movs	r2, #249	@ 0xf9
 800df0c:	569a      	ldrsb	r2, [r3, r2]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	711a      	strb	r2, [r3, #4]
            break;
 800df12:	e03f      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800df14:	4b24      	ldr	r3, [pc, #144]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800df16:	4a25      	ldr	r2, [pc, #148]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800df18:	589b      	ldr	r3, [r3, r2]
 800df1a:	2204      	movs	r2, #4
 800df1c:	569a      	ldrsb	r2, [r3, r2]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	711a      	strb	r2, [r3, #4]
            break;
 800df22:	e037      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800df24:	4b20      	ldr	r3, [pc, #128]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800df26:	4a21      	ldr	r2, [pc, #132]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800df28:	589b      	ldr	r3, [r3, r2]
 800df2a:	22f8      	movs	r2, #248	@ 0xf8
 800df2c:	569a      	ldrsb	r2, [r3, r2]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	711a      	strb	r2, [r3, #4]
            break;
 800df32:	e02f      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800df34:	4b1c      	ldr	r3, [pc, #112]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800df36:	4a1d      	ldr	r2, [pc, #116]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800df38:	589b      	ldr	r3, [r3, r2]
 800df3a:	22fc      	movs	r2, #252	@ 0xfc
 800df3c:	589a      	ldr	r2, [r3, r2]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	605a      	str	r2, [r3, #4]
            break;
 800df42:	e027      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 800df44:	4b18      	ldr	r3, [pc, #96]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800df46:	4a19      	ldr	r2, [pc, #100]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800df48:	589a      	ldr	r2, [r3, r2]
 800df4a:	2380      	movs	r3, #128	@ 0x80
 800df4c:	005b      	lsls	r3, r3, #1
 800df4e:	5cd2      	ldrb	r2, [r2, r3]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	711a      	strb	r2, [r3, #4]
            break;
 800df54:	e01e      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800df56:	4b14      	ldr	r3, [pc, #80]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800df58:	4a14      	ldr	r2, [pc, #80]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800df5a:	589a      	ldr	r2, [r3, r2]
 800df5c:	239a      	movs	r3, #154	@ 0x9a
 800df5e:	005b      	lsls	r3, r3, #1
 800df60:	58d2      	ldr	r2, [r2, r3]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	605a      	str	r2, [r3, #4]
            break;
 800df66:	e015      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetCtxs( );
 800df68:	f7fe ffa4 	bl	800ceb4 <GetCtxs>
 800df6c:	0002      	movs	r2, r0
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	605a      	str	r2, [r3, #4]
            break;
 800df72:	e00f      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800df74:	4b0c      	ldr	r3, [pc, #48]	@ (800dfa8 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800df76:	4a0d      	ldr	r2, [pc, #52]	@ (800dfac <LoRaMacMibGetRequestConfirm+0x2b4>)
 800df78:	589b      	ldr	r3, [r3, r2]
 800df7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	605a      	str	r2, [r3, #4]
            break;
 800df80:	e008      	b.n	800df94 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800df82:	2317      	movs	r3, #23
 800df84:	18fc      	adds	r4, r7, r3
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	0018      	movs	r0, r3
 800df8a:	f001 f928 	bl	800f1de <LoRaMacClassBMibGetRequestConfirm>
 800df8e:	0003      	movs	r3, r0
 800df90:	7023      	strb	r3, [r4, #0]
            break;
 800df92:	46c0      	nop			@ (mov r8, r8)
        }
    }
    return status;
 800df94:	2317      	movs	r3, #23
 800df96:	18fb      	adds	r3, r7, r3
 800df98:	781b      	ldrb	r3, [r3, #0]
}
 800df9a:	0018      	movs	r0, r3
 800df9c:	46bd      	mov	sp, r7
 800df9e:	b007      	add	sp, #28
 800dfa0:	bd90      	pop	{r4, r7, pc}
 800dfa2:	46c0      	nop			@ (mov r8, r8)
 800dfa4:	0801b2dc 	.word	0x0801b2dc
 800dfa8:	20000964 	.word	0x20000964
 800dfac:	00000484 	.word	0x00000484

0800dfb0 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800dfb0:	b590      	push	{r4, r7, lr}
 800dfb2:	b089      	sub	sp, #36	@ 0x24
 800dfb4:	af02      	add	r7, sp, #8
 800dfb6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dfb8:	2317      	movs	r3, #23
 800dfba:	18fb      	adds	r3, r7, r3
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	701a      	strb	r2, [r3, #0]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d102      	bne.n	800dfcc <LoRaMacMibSetRequestConfirm+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dfc6:	2303      	movs	r3, #3
 800dfc8:	f000 fcde 	bl	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800dfcc:	4adb      	ldr	r2, [pc, #876]	@ (800e33c <LoRaMacMibSetRequestConfirm+0x38c>)
 800dfce:	23d0      	movs	r3, #208	@ 0xd0
 800dfd0:	009b      	lsls	r3, r3, #2
 800dfd2:	58d3      	ldr	r3, [r2, r3]
 800dfd4:	2202      	movs	r2, #2
 800dfd6:	4013      	ands	r3, r2
 800dfd8:	d002      	beq.n	800dfe0 <LoRaMacMibSetRequestConfirm+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 800dfda:	2301      	movs	r3, #1
 800dfdc:	f000 fcd4 	bl	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
    }

    switch( mibSet->Type )
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	2b35      	cmp	r3, #53	@ 0x35
 800dfe6:	d901      	bls.n	800dfec <LoRaMacMibSetRequestConfirm+0x3c>
 800dfe8:	f000 fc87 	bl	800e8fa <LoRaMacMibSetRequestConfirm+0x94a>
 800dfec:	009a      	lsls	r2, r3, #2
 800dfee:	4bd4      	ldr	r3, [pc, #848]	@ (800e340 <LoRaMacMibSetRequestConfirm+0x390>)
 800dff0:	18d3      	adds	r3, r2, r3
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	791b      	ldrb	r3, [r3, #4]
 800dffa:	2217      	movs	r2, #23
 800dffc:	18bc      	adds	r4, r7, r2
 800dffe:	0018      	movs	r0, r3
 800e000:	f7fd f816 	bl	800b030 <SwitchClass>
 800e004:	0003      	movs	r3, r0
 800e006:	7023      	strb	r3, [r4, #0]
            break;
 800e008:	f000 fcb7 	bl	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	791b      	ldrb	r3, [r3, #4]
 800e010:	2b02      	cmp	r3, #2
 800e012:	d009      	beq.n	800e028 <LoRaMacMibSetRequestConfirm+0x78>
            {
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 800e014:	4bc9      	ldr	r3, [pc, #804]	@ (800e33c <LoRaMacMibSetRequestConfirm+0x38c>)
 800e016:	4acb      	ldr	r2, [pc, #812]	@ (800e344 <LoRaMacMibSetRequestConfirm+0x394>)
 800e018:	589a      	ldr	r2, [r3, r2]
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	7919      	ldrb	r1, [r3, #4]
 800e01e:	23ea      	movs	r3, #234	@ 0xea
 800e020:	005b      	lsls	r3, r3, #1
 800e022:	54d1      	strb	r1, [r2, r3]
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e024:	f000 fca9 	bl	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e028:	2317      	movs	r3, #23
 800e02a:	18fb      	adds	r3, r7, r3
 800e02c:	2203      	movs	r2, #3
 800e02e:	701a      	strb	r2, [r3, #0]
            break;
 800e030:	f000 fca3 	bl	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	685b      	ldr	r3, [r3, #4]
 800e038:	0018      	movs	r0, r3
 800e03a:	f7fb fb31 	bl	80096a0 <SecureElementSetDevEui>
 800e03e:	1e03      	subs	r3, r0, #0
 800e040:	d101      	bne.n	800e046 <LoRaMacMibSetRequestConfirm+0x96>
 800e042:	f000 fc63 	bl	800e90c <LoRaMacMibSetRequestConfirm+0x95c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e046:	2317      	movs	r3, #23
 800e048:	18fb      	adds	r3, r7, r3
 800e04a:	2203      	movs	r2, #3
 800e04c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e04e:	f000 fc5d 	bl	800e90c <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	685b      	ldr	r3, [r3, #4]
 800e056:	0018      	movs	r0, r3
 800e058:	f7fb fb46 	bl	80096e8 <SecureElementSetJoinEui>
 800e05c:	1e03      	subs	r3, r0, #0
 800e05e:	d101      	bne.n	800e064 <LoRaMacMibSetRequestConfirm+0xb4>
 800e060:	f000 fc56 	bl	800e910 <LoRaMacMibSetRequestConfirm+0x960>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e064:	2317      	movs	r3, #23
 800e066:	18fb      	adds	r3, r7, r3
 800e068:	2203      	movs	r2, #3
 800e06a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e06c:	f000 fc50 	bl	800e910 <LoRaMacMibSetRequestConfirm+0x960>
        }
        case MIB_ADR:
        {
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 800e070:	4bb2      	ldr	r3, [pc, #712]	@ (800e33c <LoRaMacMibSetRequestConfirm+0x38c>)
 800e072:	4ab4      	ldr	r2, [pc, #720]	@ (800e344 <LoRaMacMibSetRequestConfirm+0x394>)
 800e074:	589b      	ldr	r3, [r3, r2]
 800e076:	687a      	ldr	r2, [r7, #4]
 800e078:	7911      	ldrb	r1, [r2, #4]
 800e07a:	22f2      	movs	r2, #242	@ 0xf2
 800e07c:	5499      	strb	r1, [r3, r2]
            break;
 800e07e:	f000 fc7c 	bl	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_NET_ID:
        {
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 800e082:	4bae      	ldr	r3, [pc, #696]	@ (800e33c <LoRaMacMibSetRequestConfirm+0x38c>)
 800e084:	4aaf      	ldr	r2, [pc, #700]	@ (800e344 <LoRaMacMibSetRequestConfirm+0x394>)
 800e086:	589b      	ldr	r3, [r3, r2]
 800e088:	687a      	ldr	r2, [r7, #4]
 800e08a:	6852      	ldr	r2, [r2, #4]
 800e08c:	649a      	str	r2, [r3, #72]	@ 0x48
            break;
 800e08e:	f000 fc74 	bl	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_DEV_ADDR:
        {
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 800e092:	4baa      	ldr	r3, [pc, #680]	@ (800e33c <LoRaMacMibSetRequestConfirm+0x38c>)
 800e094:	4aab      	ldr	r2, [pc, #684]	@ (800e344 <LoRaMacMibSetRequestConfirm+0x394>)
 800e096:	589b      	ldr	r3, [r3, r2]
 800e098:	687a      	ldr	r2, [r7, #4]
 800e09a:	6852      	ldr	r2, [r2, #4]
 800e09c:	64da      	str	r2, [r3, #76]	@ 0x4c
            break;
 800e09e:	f000 fc6c 	bl	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_GEN_APP_KEY:
        {
            if( mibSet->Param.GenAppKey != NULL )
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	685b      	ldr	r3, [r3, #4]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d00c      	beq.n	800e0c4 <LoRaMacMibSetRequestConfirm+0x114>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( GEN_APP_KEY, mibSet->Param.GenAppKey ) )
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	0019      	movs	r1, r3
 800e0b0:	2001      	movs	r0, #1
 800e0b2:	f002 fab1 	bl	8010618 <LoRaMacCryptoSetKey>
 800e0b6:	1e03      	subs	r3, r0, #0
 800e0b8:	d101      	bne.n	800e0be <LoRaMacMibSetRequestConfirm+0x10e>
 800e0ba:	f000 fc2b 	bl	800e914 <LoRaMacMibSetRequestConfirm+0x964>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e0be:	2311      	movs	r3, #17
 800e0c0:	f000 fc62 	bl	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e0c4:	2317      	movs	r3, #23
 800e0c6:	18fb      	adds	r3, r7, r3
 800e0c8:	2203      	movs	r2, #3
 800e0ca:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e0cc:	f000 fc22 	bl	800e914 <LoRaMacMibSetRequestConfirm+0x964>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d00c      	beq.n	800e0f2 <LoRaMacMibSetRequestConfirm+0x142>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	685b      	ldr	r3, [r3, #4]
 800e0dc:	0019      	movs	r1, r3
 800e0de:	2000      	movs	r0, #0
 800e0e0:	f002 fa9a 	bl	8010618 <LoRaMacCryptoSetKey>
 800e0e4:	1e03      	subs	r3, r0, #0
 800e0e6:	d101      	bne.n	800e0ec <LoRaMacMibSetRequestConfirm+0x13c>
 800e0e8:	f000 fc16 	bl	800e918 <LoRaMacMibSetRequestConfirm+0x968>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e0ec:	2311      	movs	r3, #17
 800e0ee:	f000 fc4b 	bl	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e0f2:	2317      	movs	r3, #23
 800e0f4:	18fb      	adds	r3, r7, r3
 800e0f6:	2203      	movs	r2, #3
 800e0f8:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e0fa:	f000 fc0d 	bl	800e918 <LoRaMacMibSetRequestConfirm+0x968>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	685b      	ldr	r3, [r3, #4]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d00c      	beq.n	800e120 <LoRaMacMibSetRequestConfirm+0x170>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	685b      	ldr	r3, [r3, #4]
 800e10a:	0019      	movs	r1, r3
 800e10c:	2002      	movs	r0, #2
 800e10e:	f002 fa83 	bl	8010618 <LoRaMacCryptoSetKey>
 800e112:	1e03      	subs	r3, r0, #0
 800e114:	d101      	bne.n	800e11a <LoRaMacMibSetRequestConfirm+0x16a>
 800e116:	f000 fc01 	bl	800e91c <LoRaMacMibSetRequestConfirm+0x96c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e11a:	2311      	movs	r3, #17
 800e11c:	f000 fc34 	bl	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e120:	2317      	movs	r3, #23
 800e122:	18fb      	adds	r3, r7, r3
 800e124:	2203      	movs	r2, #3
 800e126:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e128:	f000 fbf8 	bl	800e91c <LoRaMacMibSetRequestConfirm+0x96c>
        }
        case MIB_J_S_INT_KEY:
        {
            if( mibSet->Param.JSIntKey != NULL )
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d00c      	beq.n	800e14e <LoRaMacMibSetRequestConfirm+0x19e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	685b      	ldr	r3, [r3, #4]
 800e138:	0019      	movs	r1, r3
 800e13a:	2003      	movs	r0, #3
 800e13c:	f002 fa6c 	bl	8010618 <LoRaMacCryptoSetKey>
 800e140:	1e03      	subs	r3, r0, #0
 800e142:	d101      	bne.n	800e148 <LoRaMacMibSetRequestConfirm+0x198>
 800e144:	f000 fbec 	bl	800e920 <LoRaMacMibSetRequestConfirm+0x970>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e148:	2311      	movs	r3, #17
 800e14a:	f000 fc1d 	bl	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e14e:	2317      	movs	r3, #23
 800e150:	18fb      	adds	r3, r7, r3
 800e152:	2203      	movs	r2, #3
 800e154:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e156:	f000 fbe3 	bl	800e920 <LoRaMacMibSetRequestConfirm+0x970>
        }
        case MIB_J_S_ENC_KEY:
        {
            if( mibSet->Param.JSEncKey != NULL )
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	685b      	ldr	r3, [r3, #4]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00c      	beq.n	800e17c <LoRaMacMibSetRequestConfirm+0x1cc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	685b      	ldr	r3, [r3, #4]
 800e166:	0019      	movs	r1, r3
 800e168:	2004      	movs	r0, #4
 800e16a:	f002 fa55 	bl	8010618 <LoRaMacCryptoSetKey>
 800e16e:	1e03      	subs	r3, r0, #0
 800e170:	d101      	bne.n	800e176 <LoRaMacMibSetRequestConfirm+0x1c6>
 800e172:	f000 fbd7 	bl	800e924 <LoRaMacMibSetRequestConfirm+0x974>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e176:	2311      	movs	r3, #17
 800e178:	f000 fc06 	bl	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e17c:	2317      	movs	r3, #23
 800e17e:	18fb      	adds	r3, r7, r3
 800e180:	2203      	movs	r2, #3
 800e182:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e184:	f000 fbce 	bl	800e924 <LoRaMacMibSetRequestConfirm+0x974>
        }
        case MIB_F_NWK_S_INT_KEY:
        {
            if( mibSet->Param.FNwkSIntKey != NULL )
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	685b      	ldr	r3, [r3, #4]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d00c      	beq.n	800e1aa <LoRaMacMibSetRequestConfirm+0x1fa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	685b      	ldr	r3, [r3, #4]
 800e194:	0019      	movs	r1, r3
 800e196:	2005      	movs	r0, #5
 800e198:	f002 fa3e 	bl	8010618 <LoRaMacCryptoSetKey>
 800e19c:	1e03      	subs	r3, r0, #0
 800e19e:	d101      	bne.n	800e1a4 <LoRaMacMibSetRequestConfirm+0x1f4>
 800e1a0:	f000 fbc2 	bl	800e928 <LoRaMacMibSetRequestConfirm+0x978>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e1a4:	2311      	movs	r3, #17
 800e1a6:	f000 fbef 	bl	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e1aa:	2317      	movs	r3, #23
 800e1ac:	18fb      	adds	r3, r7, r3
 800e1ae:	2203      	movs	r2, #3
 800e1b0:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e1b2:	f000 fbb9 	bl	800e928 <LoRaMacMibSetRequestConfirm+0x978>
        }
        case MIB_S_NWK_S_INT_KEY:
        {
            if( mibSet->Param.SNwkSIntKey != NULL )
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d00c      	beq.n	800e1d8 <LoRaMacMibSetRequestConfirm+0x228>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	0019      	movs	r1, r3
 800e1c4:	2006      	movs	r0, #6
 800e1c6:	f002 fa27 	bl	8010618 <LoRaMacCryptoSetKey>
 800e1ca:	1e03      	subs	r3, r0, #0
 800e1cc:	d101      	bne.n	800e1d2 <LoRaMacMibSetRequestConfirm+0x222>
 800e1ce:	f000 fbad 	bl	800e92c <LoRaMacMibSetRequestConfirm+0x97c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e1d2:	2311      	movs	r3, #17
 800e1d4:	f000 fbd8 	bl	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e1d8:	2317      	movs	r3, #23
 800e1da:	18fb      	adds	r3, r7, r3
 800e1dc:	2203      	movs	r2, #3
 800e1de:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e1e0:	f000 fba4 	bl	800e92c <LoRaMacMibSetRequestConfirm+0x97c>
        }
        case MIB_NWK_S_ENC_KEY:
        {
            if( mibSet->Param.NwkSEncKey != NULL )
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d00c      	beq.n	800e206 <LoRaMacMibSetRequestConfirm+0x256>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	0019      	movs	r1, r3
 800e1f2:	2007      	movs	r0, #7
 800e1f4:	f002 fa10 	bl	8010618 <LoRaMacCryptoSetKey>
 800e1f8:	1e03      	subs	r3, r0, #0
 800e1fa:	d101      	bne.n	800e200 <LoRaMacMibSetRequestConfirm+0x250>
 800e1fc:	f000 fb98 	bl	800e930 <LoRaMacMibSetRequestConfirm+0x980>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e200:	2311      	movs	r3, #17
 800e202:	f000 fbc1 	bl	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e206:	2317      	movs	r3, #23
 800e208:	18fb      	adds	r3, r7, r3
 800e20a:	2203      	movs	r2, #3
 800e20c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e20e:	f000 fb8f 	bl	800e930 <LoRaMacMibSetRequestConfirm+0x980>
        }
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d00c      	beq.n	800e234 <LoRaMacMibSetRequestConfirm+0x284>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	685b      	ldr	r3, [r3, #4]
 800e21e:	0019      	movs	r1, r3
 800e220:	2008      	movs	r0, #8
 800e222:	f002 f9f9 	bl	8010618 <LoRaMacCryptoSetKey>
 800e226:	1e03      	subs	r3, r0, #0
 800e228:	d101      	bne.n	800e22e <LoRaMacMibSetRequestConfirm+0x27e>
 800e22a:	f000 fb83 	bl	800e934 <LoRaMacMibSetRequestConfirm+0x984>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e22e:	2311      	movs	r3, #17
 800e230:	f000 fbaa 	bl	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e234:	2317      	movs	r3, #23
 800e236:	18fb      	adds	r3, r7, r3
 800e238:	2203      	movs	r2, #3
 800e23a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e23c:	f000 fb7a 	bl	800e934 <LoRaMacMibSetRequestConfirm+0x984>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d00c      	beq.n	800e262 <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	685b      	ldr	r3, [r3, #4]
 800e24c:	0019      	movs	r1, r3
 800e24e:	207f      	movs	r0, #127	@ 0x7f
 800e250:	f002 f9e2 	bl	8010618 <LoRaMacCryptoSetKey>
 800e254:	1e03      	subs	r3, r0, #0
 800e256:	d101      	bne.n	800e25c <LoRaMacMibSetRequestConfirm+0x2ac>
 800e258:	f000 fb6e 	bl	800e938 <LoRaMacMibSetRequestConfirm+0x988>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e25c:	2311      	movs	r3, #17
 800e25e:	f000 fb93 	bl	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e262:	2317      	movs	r3, #23
 800e264:	18fb      	adds	r3, r7, r3
 800e266:	2203      	movs	r2, #3
 800e268:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e26a:	f000 fb65 	bl	800e938 <LoRaMacMibSetRequestConfirm+0x988>
        }
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	685b      	ldr	r3, [r3, #4]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d00b      	beq.n	800e28e <LoRaMacMibSetRequestConfirm+0x2de>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	685b      	ldr	r3, [r3, #4]
 800e27a:	0019      	movs	r1, r3
 800e27c:	2080      	movs	r0, #128	@ 0x80
 800e27e:	f002 f9cb 	bl	8010618 <LoRaMacCryptoSetKey>
 800e282:	1e03      	subs	r3, r0, #0
 800e284:	d100      	bne.n	800e288 <LoRaMacMibSetRequestConfirm+0x2d8>
 800e286:	e359      	b.n	800e93c <LoRaMacMibSetRequestConfirm+0x98c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e288:	2311      	movs	r3, #17
 800e28a:	f000 fb7d 	bl	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e28e:	2317      	movs	r3, #23
 800e290:	18fb      	adds	r3, r7, r3
 800e292:	2203      	movs	r2, #3
 800e294:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e296:	e351      	b.n	800e93c <LoRaMacMibSetRequestConfirm+0x98c>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	685b      	ldr	r3, [r3, #4]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d00b      	beq.n	800e2b8 <LoRaMacMibSetRequestConfirm+0x308>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	0019      	movs	r1, r3
 800e2a6:	2081      	movs	r0, #129	@ 0x81
 800e2a8:	f002 f9b6 	bl	8010618 <LoRaMacCryptoSetKey>
 800e2ac:	1e03      	subs	r3, r0, #0
 800e2ae:	d100      	bne.n	800e2b2 <LoRaMacMibSetRequestConfirm+0x302>
 800e2b0:	e346      	b.n	800e940 <LoRaMacMibSetRequestConfirm+0x990>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e2b2:	2311      	movs	r3, #17
 800e2b4:	f000 fb68 	bl	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e2b8:	2317      	movs	r3, #23
 800e2ba:	18fb      	adds	r3, r7, r3
 800e2bc:	2203      	movs	r2, #3
 800e2be:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e2c0:	e33e      	b.n	800e940 <LoRaMacMibSetRequestConfirm+0x990>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	685b      	ldr	r3, [r3, #4]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d00a      	beq.n	800e2e0 <LoRaMacMibSetRequestConfirm+0x330>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	0019      	movs	r1, r3
 800e2d0:	2082      	movs	r0, #130	@ 0x82
 800e2d2:	f002 f9a1 	bl	8010618 <LoRaMacCryptoSetKey>
 800e2d6:	1e03      	subs	r3, r0, #0
 800e2d8:	d100      	bne.n	800e2dc <LoRaMacMibSetRequestConfirm+0x32c>
 800e2da:	e333      	b.n	800e944 <LoRaMacMibSetRequestConfirm+0x994>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e2dc:	2311      	movs	r3, #17
 800e2de:	e353      	b.n	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e2e0:	2317      	movs	r3, #23
 800e2e2:	18fb      	adds	r3, r7, r3
 800e2e4:	2203      	movs	r2, #3
 800e2e6:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e2e8:	e32c      	b.n	800e944 <LoRaMacMibSetRequestConfirm+0x994>
        }
        case MIB_MC_KEY_1:
        {
            if( mibSet->Param.McKey1 != NULL )
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d00a      	beq.n	800e308 <LoRaMacMibSetRequestConfirm+0x358>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	685b      	ldr	r3, [r3, #4]
 800e2f6:	0019      	movs	r1, r3
 800e2f8:	2083      	movs	r0, #131	@ 0x83
 800e2fa:	f002 f98d 	bl	8010618 <LoRaMacCryptoSetKey>
 800e2fe:	1e03      	subs	r3, r0, #0
 800e300:	d100      	bne.n	800e304 <LoRaMacMibSetRequestConfirm+0x354>
 800e302:	e321      	b.n	800e948 <LoRaMacMibSetRequestConfirm+0x998>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e304:	2311      	movs	r3, #17
 800e306:	e33f      	b.n	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e308:	2317      	movs	r3, #23
 800e30a:	18fb      	adds	r3, r7, r3
 800e30c:	2203      	movs	r2, #3
 800e30e:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e310:	e31a      	b.n	800e948 <LoRaMacMibSetRequestConfirm+0x998>
        }
        case MIB_MC_APP_S_KEY_1:
        {
            if( mibSet->Param.McAppSKey1 != NULL )
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d00a      	beq.n	800e330 <LoRaMacMibSetRequestConfirm+0x380>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	0019      	movs	r1, r3
 800e320:	2084      	movs	r0, #132	@ 0x84
 800e322:	f002 f979 	bl	8010618 <LoRaMacCryptoSetKey>
 800e326:	1e03      	subs	r3, r0, #0
 800e328:	d100      	bne.n	800e32c <LoRaMacMibSetRequestConfirm+0x37c>
 800e32a:	e30f      	b.n	800e94c <LoRaMacMibSetRequestConfirm+0x99c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e32c:	2311      	movs	r3, #17
 800e32e:	e32b      	b.n	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e330:	2317      	movs	r3, #23
 800e332:	18fb      	adds	r3, r7, r3
 800e334:	2203      	movs	r2, #3
 800e336:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e338:	e308      	b.n	800e94c <LoRaMacMibSetRequestConfirm+0x99c>
 800e33a:	46c0      	nop			@ (mov r8, r8)
 800e33c:	20000964 	.word	0x20000964
 800e340:	0801b3b0 	.word	0x0801b3b0
 800e344:	00000484 	.word	0x00000484
        }
        case MIB_MC_NWK_S_KEY_1:
        {
            if( mibSet->Param.McNwkSKey1 != NULL )
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	685b      	ldr	r3, [r3, #4]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d00a      	beq.n	800e366 <LoRaMacMibSetRequestConfirm+0x3b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	685b      	ldr	r3, [r3, #4]
 800e354:	0019      	movs	r1, r3
 800e356:	2085      	movs	r0, #133	@ 0x85
 800e358:	f002 f95e 	bl	8010618 <LoRaMacCryptoSetKey>
 800e35c:	1e03      	subs	r3, r0, #0
 800e35e:	d100      	bne.n	800e362 <LoRaMacMibSetRequestConfirm+0x3b2>
 800e360:	e2f6      	b.n	800e950 <LoRaMacMibSetRequestConfirm+0x9a0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e362:	2311      	movs	r3, #17
 800e364:	e310      	b.n	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e366:	2317      	movs	r3, #23
 800e368:	18fb      	adds	r3, r7, r3
 800e36a:	2203      	movs	r2, #3
 800e36c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e36e:	e2ef      	b.n	800e950 <LoRaMacMibSetRequestConfirm+0x9a0>
        }
        case MIB_MC_KEY_2:
        {
            if( mibSet->Param.McKey2 != NULL )
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	685b      	ldr	r3, [r3, #4]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d00a      	beq.n	800e38e <LoRaMacMibSetRequestConfirm+0x3de>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	0019      	movs	r1, r3
 800e37e:	2086      	movs	r0, #134	@ 0x86
 800e380:	f002 f94a 	bl	8010618 <LoRaMacCryptoSetKey>
 800e384:	1e03      	subs	r3, r0, #0
 800e386:	d100      	bne.n	800e38a <LoRaMacMibSetRequestConfirm+0x3da>
 800e388:	e2e4      	b.n	800e954 <LoRaMacMibSetRequestConfirm+0x9a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e38a:	2311      	movs	r3, #17
 800e38c:	e2fc      	b.n	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e38e:	2317      	movs	r3, #23
 800e390:	18fb      	adds	r3, r7, r3
 800e392:	2203      	movs	r2, #3
 800e394:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e396:	e2dd      	b.n	800e954 <LoRaMacMibSetRequestConfirm+0x9a4>
        }
        case MIB_MC_APP_S_KEY_2:
        {
            if( mibSet->Param.McAppSKey2 != NULL )
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d00a      	beq.n	800e3b6 <LoRaMacMibSetRequestConfirm+0x406>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	0019      	movs	r1, r3
 800e3a6:	2087      	movs	r0, #135	@ 0x87
 800e3a8:	f002 f936 	bl	8010618 <LoRaMacCryptoSetKey>
 800e3ac:	1e03      	subs	r3, r0, #0
 800e3ae:	d100      	bne.n	800e3b2 <LoRaMacMibSetRequestConfirm+0x402>
 800e3b0:	e2d2      	b.n	800e958 <LoRaMacMibSetRequestConfirm+0x9a8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e3b2:	2311      	movs	r3, #17
 800e3b4:	e2e8      	b.n	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e3b6:	2317      	movs	r3, #23
 800e3b8:	18fb      	adds	r3, r7, r3
 800e3ba:	2203      	movs	r2, #3
 800e3bc:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e3be:	e2cb      	b.n	800e958 <LoRaMacMibSetRequestConfirm+0x9a8>
        }
        case MIB_MC_NWK_S_KEY_2:
        {
            if( mibSet->Param.McNwkSKey2 != NULL )
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	685b      	ldr	r3, [r3, #4]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d00a      	beq.n	800e3de <LoRaMacMibSetRequestConfirm+0x42e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	685b      	ldr	r3, [r3, #4]
 800e3cc:	0019      	movs	r1, r3
 800e3ce:	2088      	movs	r0, #136	@ 0x88
 800e3d0:	f002 f922 	bl	8010618 <LoRaMacCryptoSetKey>
 800e3d4:	1e03      	subs	r3, r0, #0
 800e3d6:	d100      	bne.n	800e3da <LoRaMacMibSetRequestConfirm+0x42a>
 800e3d8:	e2c0      	b.n	800e95c <LoRaMacMibSetRequestConfirm+0x9ac>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e3da:	2311      	movs	r3, #17
 800e3dc:	e2d4      	b.n	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e3de:	2317      	movs	r3, #23
 800e3e0:	18fb      	adds	r3, r7, r3
 800e3e2:	2203      	movs	r2, #3
 800e3e4:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e3e6:	e2b9      	b.n	800e95c <LoRaMacMibSetRequestConfirm+0x9ac>
        }
        case MIB_MC_KEY_3:
        {
            if( mibSet->Param.McKey3 != NULL )
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	685b      	ldr	r3, [r3, #4]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d00a      	beq.n	800e406 <LoRaMacMibSetRequestConfirm+0x456>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	0019      	movs	r1, r3
 800e3f6:	2089      	movs	r0, #137	@ 0x89
 800e3f8:	f002 f90e 	bl	8010618 <LoRaMacCryptoSetKey>
 800e3fc:	1e03      	subs	r3, r0, #0
 800e3fe:	d100      	bne.n	800e402 <LoRaMacMibSetRequestConfirm+0x452>
 800e400:	e2ae      	b.n	800e960 <LoRaMacMibSetRequestConfirm+0x9b0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e402:	2311      	movs	r3, #17
 800e404:	e2c0      	b.n	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e406:	2317      	movs	r3, #23
 800e408:	18fb      	adds	r3, r7, r3
 800e40a:	2203      	movs	r2, #3
 800e40c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e40e:	e2a7      	b.n	800e960 <LoRaMacMibSetRequestConfirm+0x9b0>
        }
        case MIB_MC_APP_S_KEY_3:
        {
            if( mibSet->Param.McAppSKey3 != NULL )
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	685b      	ldr	r3, [r3, #4]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d00a      	beq.n	800e42e <LoRaMacMibSetRequestConfirm+0x47e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	685b      	ldr	r3, [r3, #4]
 800e41c:	0019      	movs	r1, r3
 800e41e:	208a      	movs	r0, #138	@ 0x8a
 800e420:	f002 f8fa 	bl	8010618 <LoRaMacCryptoSetKey>
 800e424:	1e03      	subs	r3, r0, #0
 800e426:	d100      	bne.n	800e42a <LoRaMacMibSetRequestConfirm+0x47a>
 800e428:	e29c      	b.n	800e964 <LoRaMacMibSetRequestConfirm+0x9b4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e42a:	2311      	movs	r3, #17
 800e42c:	e2ac      	b.n	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e42e:	2317      	movs	r3, #23
 800e430:	18fb      	adds	r3, r7, r3
 800e432:	2203      	movs	r2, #3
 800e434:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e436:	e295      	b.n	800e964 <LoRaMacMibSetRequestConfirm+0x9b4>
        }
        case MIB_MC_NWK_S_KEY_3:
        {
            if( mibSet->Param.McNwkSKey3 != NULL )
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	685b      	ldr	r3, [r3, #4]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d00a      	beq.n	800e456 <LoRaMacMibSetRequestConfirm+0x4a6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	685b      	ldr	r3, [r3, #4]
 800e444:	0019      	movs	r1, r3
 800e446:	208b      	movs	r0, #139	@ 0x8b
 800e448:	f002 f8e6 	bl	8010618 <LoRaMacCryptoSetKey>
 800e44c:	1e03      	subs	r3, r0, #0
 800e44e:	d100      	bne.n	800e452 <LoRaMacMibSetRequestConfirm+0x4a2>
 800e450:	e28a      	b.n	800e968 <LoRaMacMibSetRequestConfirm+0x9b8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e452:	2311      	movs	r3, #17
 800e454:	e298      	b.n	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e456:	2317      	movs	r3, #23
 800e458:	18fb      	adds	r3, r7, r3
 800e45a:	2203      	movs	r2, #3
 800e45c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e45e:	e283      	b.n	800e968 <LoRaMacMibSetRequestConfirm+0x9b8>
        }
        case MIB_PUBLIC_NETWORK:
        {
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800e460:	4bd7      	ldr	r3, [pc, #860]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e462:	4ad8      	ldr	r2, [pc, #864]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e464:	589b      	ldr	r3, [r3, r2]
 800e466:	687a      	ldr	r2, [r7, #4]
 800e468:	7911      	ldrb	r1, [r2, #4]
 800e46a:	22f1      	movs	r2, #241	@ 0xf1
 800e46c:	5499      	strb	r1, [r3, r2]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800e46e:	4bd6      	ldr	r3, [pc, #856]	@ (800e7c8 <LoRaMacMibSetRequestConfirm+0x818>)
 800e470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e472:	4ad3      	ldr	r2, [pc, #844]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e474:	49d3      	ldr	r1, [pc, #844]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e476:	5852      	ldr	r2, [r2, r1]
 800e478:	21f1      	movs	r1, #241	@ 0xf1
 800e47a:	5c52      	ldrb	r2, [r2, r1]
 800e47c:	0010      	movs	r0, r2
 800e47e:	4798      	blx	r3
            break;
 800e480:	e27b      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_REPEATER_SUPPORT:
        {
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800e482:	4bcf      	ldr	r3, [pc, #828]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e484:	4acf      	ldr	r2, [pc, #828]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e486:	589a      	ldr	r2, [r3, r2]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	7919      	ldrb	r1, [r3, #4]
 800e48c:	2340      	movs	r3, #64	@ 0x40
 800e48e:	33ff      	adds	r3, #255	@ 0xff
 800e490:	54d1      	strb	r1, [r2, r3]
            break;
 800e492:	e272      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	7a1b      	ldrb	r3, [r3, #8]
 800e498:	b25a      	sxtb	r2, r3
 800e49a:	2108      	movs	r1, #8
 800e49c:	187b      	adds	r3, r7, r1
 800e49e:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800e4a0:	4bc7      	ldr	r3, [pc, #796]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e4a2:	4ac8      	ldr	r2, [pc, #800]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e4a4:	589a      	ldr	r2, [r3, r2]
 800e4a6:	232e      	movs	r3, #46	@ 0x2e
 800e4a8:	33ff      	adds	r3, #255	@ 0xff
 800e4aa:	5cd2      	ldrb	r2, [r2, r3]
 800e4ac:	187b      	adds	r3, r7, r1
 800e4ae:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800e4b0:	4bc3      	ldr	r3, [pc, #780]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e4b2:	4ac4      	ldr	r2, [pc, #784]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e4b4:	589b      	ldr	r3, [r3, r2]
 800e4b6:	781b      	ldrb	r3, [r3, #0]
 800e4b8:	1879      	adds	r1, r7, r1
 800e4ba:	2207      	movs	r2, #7
 800e4bc:	0018      	movs	r0, r3
 800e4be:	f003 f8f8 	bl	80116b2 <RegionVerify>
 800e4c2:	1e03      	subs	r3, r0, #0
 800e4c4:	d00a      	beq.n	800e4dc <LoRaMacMibSetRequestConfirm+0x52c>
            {
                MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800e4c6:	4bbe      	ldr	r3, [pc, #760]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e4c8:	4abe      	ldr	r2, [pc, #760]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e4ca:	5899      	ldr	r1, [r3, r2]
 800e4cc:	238e      	movs	r3, #142	@ 0x8e
 800e4ce:	005b      	lsls	r3, r3, #1
 800e4d0:	687a      	ldr	r2, [r7, #4]
 800e4d2:	18cb      	adds	r3, r1, r3
 800e4d4:	3204      	adds	r2, #4
 800e4d6:	ca03      	ldmia	r2!, {r0, r1}
 800e4d8:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e4da:	e24e      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e4dc:	2317      	movs	r3, #23
 800e4de:	18fb      	adds	r3, r7, r3
 800e4e0:	2203      	movs	r2, #3
 800e4e2:	701a      	strb	r2, [r3, #0]
            break;
 800e4e4:	e249      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	7a1b      	ldrb	r3, [r3, #8]
 800e4ea:	b25a      	sxtb	r2, r3
 800e4ec:	2108      	movs	r1, #8
 800e4ee:	187b      	adds	r3, r7, r1
 800e4f0:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800e4f2:	4bb3      	ldr	r3, [pc, #716]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e4f4:	4ab3      	ldr	r2, [pc, #716]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e4f6:	589a      	ldr	r2, [r3, r2]
 800e4f8:	232e      	movs	r3, #46	@ 0x2e
 800e4fa:	33ff      	adds	r3, #255	@ 0xff
 800e4fc:	5cd2      	ldrb	r2, [r2, r3]
 800e4fe:	187b      	adds	r3, r7, r1
 800e500:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800e502:	4baf      	ldr	r3, [pc, #700]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e504:	4aaf      	ldr	r2, [pc, #700]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e506:	589b      	ldr	r3, [r3, r2]
 800e508:	781b      	ldrb	r3, [r3, #0]
 800e50a:	1879      	adds	r1, r7, r1
 800e50c:	2207      	movs	r2, #7
 800e50e:	0018      	movs	r0, r3
 800e510:	f003 f8cf 	bl	80116b2 <RegionVerify>
 800e514:	1e03      	subs	r3, r0, #0
 800e516:	d008      	beq.n	800e52a <LoRaMacMibSetRequestConfirm+0x57a>
            {
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800e518:	4ba9      	ldr	r3, [pc, #676]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e51a:	4aaa      	ldr	r2, [pc, #680]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e51c:	589b      	ldr	r3, [r3, r2]
 800e51e:	687a      	ldr	r2, [r7, #4]
 800e520:	3328      	adds	r3, #40	@ 0x28
 800e522:	3204      	adds	r2, #4
 800e524:	ca03      	ldmia	r2!, {r0, r1}
 800e526:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e528:	e227      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e52a:	2317      	movs	r3, #23
 800e52c:	18fb      	adds	r3, r7, r3
 800e52e:	2203      	movs	r2, #3
 800e530:	701a      	strb	r2, [r3, #0]
            break;
 800e532:	e222      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	7a1b      	ldrb	r3, [r3, #8]
 800e538:	b25a      	sxtb	r2, r3
 800e53a:	2108      	movs	r1, #8
 800e53c:	187b      	adds	r3, r7, r1
 800e53e:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800e540:	4b9f      	ldr	r3, [pc, #636]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e542:	4aa0      	ldr	r2, [pc, #640]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e544:	589a      	ldr	r2, [r3, r2]
 800e546:	232e      	movs	r3, #46	@ 0x2e
 800e548:	33ff      	adds	r3, #255	@ 0xff
 800e54a:	5cd2      	ldrb	r2, [r2, r3]
 800e54c:	187b      	adds	r3, r7, r1
 800e54e:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800e550:	4b9b      	ldr	r3, [pc, #620]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e552:	4a9c      	ldr	r2, [pc, #624]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e554:	589b      	ldr	r3, [r3, r2]
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	1879      	adds	r1, r7, r1
 800e55a:	2207      	movs	r2, #7
 800e55c:	0018      	movs	r0, r3
 800e55e:	f003 f8a8 	bl	80116b2 <RegionVerify>
 800e562:	1e03      	subs	r3, r0, #0
 800e564:	d03b      	beq.n	800e5de <LoRaMacMibSetRequestConfirm+0x62e>
            {
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800e566:	4b96      	ldr	r3, [pc, #600]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e568:	4a96      	ldr	r2, [pc, #600]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e56a:	5899      	ldr	r1, [r3, r2]
 800e56c:	2392      	movs	r3, #146	@ 0x92
 800e56e:	005b      	lsls	r3, r3, #1
 800e570:	687a      	ldr	r2, [r7, #4]
 800e572:	18cb      	adds	r3, r1, r3
 800e574:	3204      	adds	r2, #4
 800e576:	ca03      	ldmia	r2!, {r0, r1}
 800e578:	c303      	stmia	r3!, {r0, r1}

                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800e57a:	4b91      	ldr	r3, [pc, #580]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e57c:	4a91      	ldr	r2, [pc, #580]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e57e:	589b      	ldr	r3, [r3, r2]
 800e580:	22f0      	movs	r2, #240	@ 0xf0
 800e582:	5c9b      	ldrb	r3, [r3, r2]
 800e584:	2b02      	cmp	r3, #2
 800e586:	d000      	beq.n	800e58a <LoRaMacMibSetRequestConfirm+0x5da>
 800e588:	e1f0      	b.n	800e96c <LoRaMacMibSetRequestConfirm+0x9bc>
 800e58a:	4b8d      	ldr	r3, [pc, #564]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e58c:	4a8d      	ldr	r2, [pc, #564]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e58e:	589a      	ldr	r2, [r3, r2]
 800e590:	23ea      	movs	r3, #234	@ 0xea
 800e592:	005b      	lsls	r3, r3, #1
 800e594:	5cd3      	ldrb	r3, [r2, r3]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d100      	bne.n	800e59c <LoRaMacMibSetRequestConfirm+0x5ec>
 800e59a:	e1e7      	b.n	800e96c <LoRaMacMibSetRequestConfirm+0x9bc>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800e59c:	4b8a      	ldr	r3, [pc, #552]	@ (800e7c8 <LoRaMacMibSetRequestConfirm+0x818>)
 800e59e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5a0:	4798      	blx	r3
                    // Compute RxC windows parameters
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800e5a2:	4b87      	ldr	r3, [pc, #540]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e5a4:	4a87      	ldr	r2, [pc, #540]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e5a6:	589b      	ldr	r3, [r3, r2]
 800e5a8:	7818      	ldrb	r0, [r3, #0]
                                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 800e5aa:	4b85      	ldr	r3, [pc, #532]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e5ac:	4a85      	ldr	r2, [pc, #532]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e5ae:	589a      	ldr	r2, [r3, r2]
 800e5b0:	2394      	movs	r3, #148	@ 0x94
 800e5b2:	005b      	lsls	r3, r3, #1
 800e5b4:	5cd3      	ldrb	r3, [r2, r3]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800e5b6:	b259      	sxtb	r1, r3
                                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800e5b8:	4b81      	ldr	r3, [pc, #516]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e5ba:	4a82      	ldr	r2, [pc, #520]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e5bc:	589a      	ldr	r2, [r3, r2]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800e5be:	2380      	movs	r3, #128	@ 0x80
 800e5c0:	005b      	lsls	r3, r3, #1
 800e5c2:	5cd2      	ldrb	r2, [r2, r3]
                                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800e5c4:	4b7e      	ldr	r3, [pc, #504]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e5c6:	4c7f      	ldr	r4, [pc, #508]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e5c8:	591b      	ldr	r3, [r3, r4]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800e5ca:	24fc      	movs	r4, #252	@ 0xfc
 800e5cc:	591c      	ldr	r4, [r3, r4]
 800e5ce:	4b7f      	ldr	r3, [pc, #508]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x81c>)
 800e5d0:	9300      	str	r3, [sp, #0]
 800e5d2:	0023      	movs	r3, r4
 800e5d4:	f003 f8b5 	bl	8011742 <RegionComputeRxWindowParameters>
                                                     &MacCtx.RxWindowCConfig );
                    OpenContinuousRxCWindow( );
 800e5d8:	f7fe f99e 	bl	800c918 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e5dc:	e1c6      	b.n	800e96c <LoRaMacMibSetRequestConfirm+0x9bc>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e5de:	2317      	movs	r3, #23
 800e5e0:	18fb      	adds	r3, r7, r3
 800e5e2:	2203      	movs	r2, #3
 800e5e4:	701a      	strb	r2, [r3, #0]
            break;
 800e5e6:	e1c1      	b.n	800e96c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	7a1b      	ldrb	r3, [r3, #8]
 800e5ec:	b25a      	sxtb	r2, r3
 800e5ee:	2108      	movs	r1, #8
 800e5f0:	187b      	adds	r3, r7, r1
 800e5f2:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800e5f4:	4b72      	ldr	r3, [pc, #456]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e5f6:	4a73      	ldr	r2, [pc, #460]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e5f8:	589a      	ldr	r2, [r3, r2]
 800e5fa:	232e      	movs	r3, #46	@ 0x2e
 800e5fc:	33ff      	adds	r3, #255	@ 0xff
 800e5fe:	5cd2      	ldrb	r2, [r2, r3]
 800e600:	187b      	adds	r3, r7, r1
 800e602:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800e604:	4b6e      	ldr	r3, [pc, #440]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e606:	4a6f      	ldr	r2, [pc, #444]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e608:	589b      	ldr	r3, [r3, r2]
 800e60a:	781b      	ldrb	r3, [r3, #0]
 800e60c:	1879      	adds	r1, r7, r1
 800e60e:	2207      	movs	r2, #7
 800e610:	0018      	movs	r0, r3
 800e612:	f003 f84e 	bl	80116b2 <RegionVerify>
 800e616:	1e03      	subs	r3, r0, #0
 800e618:	d008      	beq.n	800e62c <LoRaMacMibSetRequestConfirm+0x67c>
            {
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800e61a:	4b69      	ldr	r3, [pc, #420]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e61c:	4a69      	ldr	r2, [pc, #420]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e61e:	589b      	ldr	r3, [r3, r2]
 800e620:	687a      	ldr	r2, [r7, #4]
 800e622:	3330      	adds	r3, #48	@ 0x30
 800e624:	3204      	adds	r2, #4
 800e626:	ca03      	ldmia	r2!, {r0, r1}
 800e628:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e62a:	e1a6      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e62c:	2317      	movs	r3, #23
 800e62e:	18fb      	adds	r3, r7, r3
 800e630:	2203      	movs	r2, #3
 800e632:	701a      	strb	r2, [r3, #0]
            break;
 800e634:	e1a1      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	685a      	ldr	r2, [r3, #4]
 800e63a:	210c      	movs	r1, #12
 800e63c:	187b      	adds	r3, r7, r1
 800e63e:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800e640:	187b      	adds	r3, r7, r1
 800e642:	2201      	movs	r2, #1
 800e644:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 800e646:	4b5e      	ldr	r3, [pc, #376]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e648:	4a5e      	ldr	r2, [pc, #376]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e64a:	589b      	ldr	r3, [r3, r2]
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	187a      	adds	r2, r7, r1
 800e650:	0011      	movs	r1, r2
 800e652:	0018      	movs	r0, r3
 800e654:	f003 f85f 	bl	8011716 <RegionChanMaskSet>
 800e658:	0003      	movs	r3, r0
 800e65a:	001a      	movs	r2, r3
 800e65c:	2301      	movs	r3, #1
 800e65e:	4053      	eors	r3, r2
 800e660:	b2db      	uxtb	r3, r3
 800e662:	2b00      	cmp	r3, #0
 800e664:	d100      	bne.n	800e668 <LoRaMacMibSetRequestConfirm+0x6b8>
 800e666:	e183      	b.n	800e970 <LoRaMacMibSetRequestConfirm+0x9c0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e668:	2317      	movs	r3, #23
 800e66a:	18fb      	adds	r3, r7, r3
 800e66c:	2203      	movs	r2, #3
 800e66e:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e670:	e17e      	b.n	800e970 <LoRaMacMibSetRequestConfirm+0x9c0>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	685a      	ldr	r2, [r3, #4]
 800e676:	210c      	movs	r1, #12
 800e678:	187b      	adds	r3, r7, r1
 800e67a:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800e67c:	187b      	adds	r3, r7, r1
 800e67e:	2200      	movs	r2, #0
 800e680:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 800e682:	4b4f      	ldr	r3, [pc, #316]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e684:	4a4f      	ldr	r2, [pc, #316]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e686:	589b      	ldr	r3, [r3, r2]
 800e688:	781b      	ldrb	r3, [r3, #0]
 800e68a:	187a      	adds	r2, r7, r1
 800e68c:	0011      	movs	r1, r2
 800e68e:	0018      	movs	r0, r3
 800e690:	f003 f841 	bl	8011716 <RegionChanMaskSet>
 800e694:	0003      	movs	r3, r0
 800e696:	001a      	movs	r2, r3
 800e698:	2301      	movs	r3, #1
 800e69a:	4053      	eors	r3, r2
 800e69c:	b2db      	uxtb	r3, r3
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d100      	bne.n	800e6a4 <LoRaMacMibSetRequestConfirm+0x6f4>
 800e6a2:	e167      	b.n	800e974 <LoRaMacMibSetRequestConfirm+0x9c4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e6a4:	2317      	movs	r3, #23
 800e6a6:	18fb      	adds	r3, r7, r3
 800e6a8:	2203      	movs	r2, #3
 800e6aa:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e6ac:	e162      	b.n	800e974 <LoRaMacMibSetRequestConfirm+0x9c4>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	791b      	ldrb	r3, [r3, #4]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d00c      	beq.n	800e6d0 <LoRaMacMibSetRequestConfirm+0x720>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800e6ba:	2b0f      	cmp	r3, #15
 800e6bc:	d808      	bhi.n	800e6d0 <LoRaMacMibSetRequestConfirm+0x720>
            {
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800e6be:	4b40      	ldr	r3, [pc, #256]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e6c0:	4a40      	ldr	r2, [pc, #256]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e6c2:	589a      	ldr	r2, [r3, r2]
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	7919      	ldrb	r1, [r3, #4]
 800e6c8:	238c      	movs	r3, #140	@ 0x8c
 800e6ca:	005b      	lsls	r3, r3, #1
 800e6cc:	54d1      	strb	r1, [r2, r3]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e6ce:	e154      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e6d0:	2317      	movs	r3, #23
 800e6d2:	18fb      	adds	r3, r7, r3
 800e6d4:	2203      	movs	r2, #3
 800e6d6:	701a      	strb	r2, [r3, #0]
            break;
 800e6d8:	e14f      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800e6da:	4b39      	ldr	r3, [pc, #228]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e6dc:	4a39      	ldr	r2, [pc, #228]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e6de:	589a      	ldr	r2, [r3, r2]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6859      	ldr	r1, [r3, #4]
 800e6e4:	2382      	movs	r3, #130	@ 0x82
 800e6e6:	005b      	lsls	r3, r3, #1
 800e6e8:	50d1      	str	r1, [r2, r3]
            break;
 800e6ea:	e146      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800e6ec:	4b34      	ldr	r3, [pc, #208]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e6ee:	4a35      	ldr	r2, [pc, #212]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e6f0:	589a      	ldr	r2, [r3, r2]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6859      	ldr	r1, [r3, #4]
 800e6f6:	2384      	movs	r3, #132	@ 0x84
 800e6f8:	005b      	lsls	r3, r3, #1
 800e6fa:	50d1      	str	r1, [r2, r3]
            break;
 800e6fc:	e13d      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800e6fe:	4b30      	ldr	r3, [pc, #192]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e700:	4a30      	ldr	r2, [pc, #192]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e702:	589a      	ldr	r2, [r3, r2]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6859      	ldr	r1, [r3, #4]
 800e708:	2386      	movs	r3, #134	@ 0x86
 800e70a:	005b      	lsls	r3, r3, #1
 800e70c:	50d1      	str	r1, [r2, r3]
            break;
 800e70e:	e134      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800e710:	4b2b      	ldr	r3, [pc, #172]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e712:	4a2c      	ldr	r2, [pc, #176]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e714:	589a      	ldr	r2, [r3, r2]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6859      	ldr	r1, [r3, #4]
 800e71a:	2388      	movs	r3, #136	@ 0x88
 800e71c:	005b      	lsls	r3, r3, #1
 800e71e:	50d1      	str	r1, [r2, r3]
            break;
 800e720:	e12b      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800e722:	4b27      	ldr	r3, [pc, #156]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e724:	4a27      	ldr	r2, [pc, #156]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e726:	589a      	ldr	r2, [r3, r2]
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6859      	ldr	r1, [r3, #4]
 800e72c:	238a      	movs	r3, #138	@ 0x8a
 800e72e:	005b      	lsls	r3, r3, #1
 800e730:	50d1      	str	r1, [r2, r3]
            break;
 800e732:	e122      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2204      	movs	r2, #4
 800e738:	569a      	ldrsb	r2, [r3, r2]
 800e73a:	2408      	movs	r4, #8
 800e73c:	193b      	adds	r3, r7, r4
 800e73e:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 800e740:	4b1f      	ldr	r3, [pc, #124]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e742:	4a20      	ldr	r2, [pc, #128]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e744:	589b      	ldr	r3, [r3, r2]
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	1939      	adds	r1, r7, r4
 800e74a:	2206      	movs	r2, #6
 800e74c:	0018      	movs	r0, r3
 800e74e:	f002 ffb0 	bl	80116b2 <RegionVerify>
 800e752:	1e03      	subs	r3, r0, #0
 800e754:	d007      	beq.n	800e766 <LoRaMacMibSetRequestConfirm+0x7b6>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 800e756:	4b1a      	ldr	r3, [pc, #104]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e758:	4a1a      	ldr	r2, [pc, #104]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e75a:	589b      	ldr	r3, [r3, r2]
 800e75c:	193a      	adds	r2, r7, r4
 800e75e:	7812      	ldrb	r2, [r2, #0]
 800e760:	b252      	sxtb	r2, r2
 800e762:	715a      	strb	r2, [r3, #5]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e764:	e109      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e766:	2317      	movs	r3, #23
 800e768:	18fb      	adds	r3, r7, r3
 800e76a:	2203      	movs	r2, #3
 800e76c:	701a      	strb	r2, [r3, #0]
            break;
 800e76e:	e104      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2204      	movs	r2, #4
 800e774:	569a      	ldrsb	r2, [r3, r2]
 800e776:	2408      	movs	r4, #8
 800e778:	193b      	adds	r3, r7, r4
 800e77a:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800e77c:	4b10      	ldr	r3, [pc, #64]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e77e:	4a11      	ldr	r2, [pc, #68]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e780:	589a      	ldr	r2, [r3, r2]
 800e782:	2396      	movs	r3, #150	@ 0x96
 800e784:	005b      	lsls	r3, r3, #1
 800e786:	5cd2      	ldrb	r2, [r2, r3]
 800e788:	193b      	adds	r3, r7, r4
 800e78a:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800e78c:	4b0c      	ldr	r3, [pc, #48]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e78e:	4a0d      	ldr	r2, [pc, #52]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e790:	589b      	ldr	r3, [r3, r2]
 800e792:	781b      	ldrb	r3, [r3, #0]
 800e794:	1939      	adds	r1, r7, r4
 800e796:	2205      	movs	r2, #5
 800e798:	0018      	movs	r0, r3
 800e79a:	f002 ff8a 	bl	80116b2 <RegionVerify>
 800e79e:	1e03      	subs	r3, r0, #0
 800e7a0:	d008      	beq.n	800e7b4 <LoRaMacMibSetRequestConfirm+0x804>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800e7a2:	4b07      	ldr	r3, [pc, #28]	@ (800e7c0 <LoRaMacMibSetRequestConfirm+0x810>)
 800e7a4:	4a07      	ldr	r2, [pc, #28]	@ (800e7c4 <LoRaMacMibSetRequestConfirm+0x814>)
 800e7a6:	589b      	ldr	r3, [r3, r2]
 800e7a8:	193a      	adds	r2, r7, r4
 800e7aa:	2100      	movs	r1, #0
 800e7ac:	5651      	ldrsb	r1, [r2, r1]
 800e7ae:	22f9      	movs	r2, #249	@ 0xf9
 800e7b0:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e7b2:	e0e2      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e7b4:	2317      	movs	r3, #23
 800e7b6:	18fb      	adds	r3, r7, r3
 800e7b8:	2203      	movs	r2, #3
 800e7ba:	701a      	strb	r2, [r3, #0]
            break;
 800e7bc:	e0dd      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
 800e7be:	46c0      	nop			@ (mov r8, r8)
 800e7c0:	20000964 	.word	0x20000964
 800e7c4:	00000484 	.word	0x00000484
 800e7c8:	0801adcc 	.word	0x0801adcc
 800e7cc:	20000d44 	.word	0x20000d44
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2204      	movs	r2, #4
 800e7d4:	569a      	ldrsb	r2, [r3, r2]
 800e7d6:	2408      	movs	r4, #8
 800e7d8:	193b      	adds	r3, r7, r4
 800e7da:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 800e7dc:	4b6c      	ldr	r3, [pc, #432]	@ (800e990 <LoRaMacMibSetRequestConfirm+0x9e0>)
 800e7de:	4a6d      	ldr	r2, [pc, #436]	@ (800e994 <LoRaMacMibSetRequestConfirm+0x9e4>)
 800e7e0:	589b      	ldr	r3, [r3, r2]
 800e7e2:	781b      	ldrb	r3, [r3, #0]
 800e7e4:	1939      	adds	r1, r7, r4
 800e7e6:	220a      	movs	r2, #10
 800e7e8:	0018      	movs	r0, r3
 800e7ea:	f002 ff62 	bl	80116b2 <RegionVerify>
 800e7ee:	1e03      	subs	r3, r0, #0
 800e7f0:	d007      	beq.n	800e802 <LoRaMacMibSetRequestConfirm+0x852>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 800e7f2:	4b67      	ldr	r3, [pc, #412]	@ (800e990 <LoRaMacMibSetRequestConfirm+0x9e0>)
 800e7f4:	4a67      	ldr	r2, [pc, #412]	@ (800e994 <LoRaMacMibSetRequestConfirm+0x9e4>)
 800e7f6:	589b      	ldr	r3, [r3, r2]
 800e7f8:	193a      	adds	r2, r7, r4
 800e7fa:	7812      	ldrb	r2, [r2, #0]
 800e7fc:	b252      	sxtb	r2, r2
 800e7fe:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e800:	e0bb      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e802:	2317      	movs	r3, #23
 800e804:	18fb      	adds	r3, r7, r3
 800e806:	2203      	movs	r2, #3
 800e808:	701a      	strb	r2, [r3, #0]
            break;
 800e80a:	e0b6      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2204      	movs	r2, #4
 800e810:	569a      	ldrsb	r2, [r3, r2]
 800e812:	2408      	movs	r4, #8
 800e814:	193b      	adds	r3, r7, r4
 800e816:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 800e818:	4b5d      	ldr	r3, [pc, #372]	@ (800e990 <LoRaMacMibSetRequestConfirm+0x9e0>)
 800e81a:	4a5e      	ldr	r2, [pc, #376]	@ (800e994 <LoRaMacMibSetRequestConfirm+0x9e4>)
 800e81c:	589b      	ldr	r3, [r3, r2]
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	1939      	adds	r1, r7, r4
 800e822:	2209      	movs	r2, #9
 800e824:	0018      	movs	r0, r3
 800e826:	f002 ff44 	bl	80116b2 <RegionVerify>
 800e82a:	1e03      	subs	r3, r0, #0
 800e82c:	d008      	beq.n	800e840 <LoRaMacMibSetRequestConfirm+0x890>
            {
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 800e82e:	4b58      	ldr	r3, [pc, #352]	@ (800e990 <LoRaMacMibSetRequestConfirm+0x9e0>)
 800e830:	4a58      	ldr	r2, [pc, #352]	@ (800e994 <LoRaMacMibSetRequestConfirm+0x9e4>)
 800e832:	589b      	ldr	r3, [r3, r2]
 800e834:	193a      	adds	r2, r7, r4
 800e836:	2100      	movs	r1, #0
 800e838:	5651      	ldrsb	r1, [r2, r1]
 800e83a:	22f8      	movs	r2, #248	@ 0xf8
 800e83c:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e83e:	e09c      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e840:	2317      	movs	r3, #23
 800e842:	18fb      	adds	r3, r7, r3
 800e844:	2203      	movs	r2, #3
 800e846:	701a      	strb	r2, [r3, #0]
            break;
 800e848:	e097      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800e84a:	4b51      	ldr	r3, [pc, #324]	@ (800e990 <LoRaMacMibSetRequestConfirm+0x9e0>)
 800e84c:	4a51      	ldr	r2, [pc, #324]	@ (800e994 <LoRaMacMibSetRequestConfirm+0x9e4>)
 800e84e:	589b      	ldr	r3, [r3, r2]
 800e850:	687a      	ldr	r2, [r7, #4]
 800e852:	6852      	ldr	r2, [r2, #4]
 800e854:	609a      	str	r2, [r3, #8]
 800e856:	4a4e      	ldr	r2, [pc, #312]	@ (800e990 <LoRaMacMibSetRequestConfirm+0x9e0>)
 800e858:	494e      	ldr	r1, [pc, #312]	@ (800e994 <LoRaMacMibSetRequestConfirm+0x9e4>)
 800e85a:	5852      	ldr	r2, [r2, r1]
 800e85c:	689b      	ldr	r3, [r3, #8]
 800e85e:	21fc      	movs	r1, #252	@ 0xfc
 800e860:	5053      	str	r3, [r2, r1]
            break;
 800e862:	e08a      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800e864:	4b4a      	ldr	r3, [pc, #296]	@ (800e990 <LoRaMacMibSetRequestConfirm+0x9e0>)
 800e866:	4a4b      	ldr	r2, [pc, #300]	@ (800e994 <LoRaMacMibSetRequestConfirm+0x9e4>)
 800e868:	589b      	ldr	r3, [r3, r2]
 800e86a:	687a      	ldr	r2, [r7, #4]
 800e86c:	7912      	ldrb	r2, [r2, #4]
 800e86e:	731a      	strb	r2, [r3, #12]
 800e870:	4a47      	ldr	r2, [pc, #284]	@ (800e990 <LoRaMacMibSetRequestConfirm+0x9e0>)
 800e872:	4948      	ldr	r1, [pc, #288]	@ (800e994 <LoRaMacMibSetRequestConfirm+0x9e4>)
 800e874:	5852      	ldr	r2, [r2, r1]
 800e876:	7b19      	ldrb	r1, [r3, #12]
 800e878:	2380      	movs	r3, #128	@ 0x80
 800e87a:	005b      	lsls	r3, r3, #1
 800e87c:	54d1      	strb	r1, [r2, r3]
            break;
 800e87e:	e07c      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800e880:	4b43      	ldr	r3, [pc, #268]	@ (800e990 <LoRaMacMibSetRequestConfirm+0x9e0>)
 800e882:	4a44      	ldr	r2, [pc, #272]	@ (800e994 <LoRaMacMibSetRequestConfirm+0x9e4>)
 800e884:	589a      	ldr	r2, [r3, r2]
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6859      	ldr	r1, [r3, #4]
 800e88a:	239a      	movs	r3, #154	@ 0x9a
 800e88c:	005b      	lsls	r3, r3, #1
 800e88e:	50d1      	str	r1, [r2, r3]
            break;
 800e890:	e073      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800e892:	4b3f      	ldr	r3, [pc, #252]	@ (800e990 <LoRaMacMibSetRequestConfirm+0x9e0>)
 800e894:	4a3f      	ldr	r2, [pc, #252]	@ (800e994 <LoRaMacMibSetRequestConfirm+0x9e4>)
 800e896:	589b      	ldr	r3, [r3, r2]
 800e898:	687a      	ldr	r2, [r7, #4]
 800e89a:	6852      	ldr	r2, [r2, #4]
 800e89c:	641a      	str	r2, [r3, #64]	@ 0x40
            break;
 800e89e:	e06c      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	685b      	ldr	r3, [r3, #4]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d009      	beq.n	800e8bc <LoRaMacMibSetRequestConfirm+0x90c>
            {
                status = RestoreCtxs( mibSet->Param.Contexts );
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	2217      	movs	r2, #23
 800e8ae:	18bc      	adds	r4, r7, r2
 800e8b0:	0018      	movs	r0, r3
 800e8b2:	f7fe fb55 	bl	800cf60 <RestoreCtxs>
 800e8b6:	0003      	movs	r3, r0
 800e8b8:	7023      	strb	r3, [r4, #0]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e8ba:	e05e      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e8bc:	2317      	movs	r3, #23
 800e8be:	18fb      	adds	r3, r7, r3
 800e8c0:	2203      	movs	r2, #3
 800e8c2:	701a      	strb	r2, [r3, #0]
            break;
 800e8c4:	e059      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	799b      	ldrb	r3, [r3, #6]
 800e8ca:	2b01      	cmp	r3, #1
 800e8cc:	d810      	bhi.n	800e8f0 <LoRaMacMibSetRequestConfirm+0x940>
            {
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 800e8ce:	4b30      	ldr	r3, [pc, #192]	@ (800e990 <LoRaMacMibSetRequestConfirm+0x9e0>)
 800e8d0:	4a30      	ldr	r2, [pc, #192]	@ (800e994 <LoRaMacMibSetRequestConfirm+0x9e4>)
 800e8d2:	5899      	ldr	r1, [r3, r2]
 800e8d4:	23e8      	movs	r3, #232	@ 0xe8
 800e8d6:	005a      	lsls	r2, r3, #1
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	508b      	str	r3, [r1, r2]

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	685b      	ldr	r3, [r3, #4]
 800e8e2:	0018      	movs	r0, r3
 800e8e4:	f001 fd98 	bl	8010418 <LoRaMacCryptoSetLrWanVersion>
 800e8e8:	1e03      	subs	r3, r0, #0
 800e8ea:	d045      	beq.n	800e978 <LoRaMacMibSetRequestConfirm+0x9c8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e8ec:	2311      	movs	r3, #17
 800e8ee:	e04b      	b.n	800e988 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e8f0:	2317      	movs	r3, #23
 800e8f2:	18fb      	adds	r3, r7, r3
 800e8f4:	2203      	movs	r2, #3
 800e8f6:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e8f8:	e03e      	b.n	800e978 <LoRaMacMibSetRequestConfirm+0x9c8>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800e8fa:	2317      	movs	r3, #23
 800e8fc:	18fc      	adds	r4, r7, r3
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	0018      	movs	r0, r3
 800e902:	f000 fc75 	bl	800f1f0 <LoRaMacMibClassBSetRequestConfirm>
 800e906:	0003      	movs	r3, r0
 800e908:	7023      	strb	r3, [r4, #0]
            break;
 800e90a:	e036      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e90c:	46c0      	nop			@ (mov r8, r8)
 800e90e:	e034      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e910:	46c0      	nop			@ (mov r8, r8)
 800e912:	e032      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e914:	46c0      	nop			@ (mov r8, r8)
 800e916:	e030      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e918:	46c0      	nop			@ (mov r8, r8)
 800e91a:	e02e      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e91c:	46c0      	nop			@ (mov r8, r8)
 800e91e:	e02c      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e920:	46c0      	nop			@ (mov r8, r8)
 800e922:	e02a      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e924:	46c0      	nop			@ (mov r8, r8)
 800e926:	e028      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e928:	46c0      	nop			@ (mov r8, r8)
 800e92a:	e026      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e92c:	46c0      	nop			@ (mov r8, r8)
 800e92e:	e024      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e930:	46c0      	nop			@ (mov r8, r8)
 800e932:	e022      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e934:	46c0      	nop			@ (mov r8, r8)
 800e936:	e020      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e938:	46c0      	nop			@ (mov r8, r8)
 800e93a:	e01e      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e93c:	46c0      	nop			@ (mov r8, r8)
 800e93e:	e01c      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e940:	46c0      	nop			@ (mov r8, r8)
 800e942:	e01a      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e944:	46c0      	nop			@ (mov r8, r8)
 800e946:	e018      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e948:	46c0      	nop			@ (mov r8, r8)
 800e94a:	e016      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e94c:	46c0      	nop			@ (mov r8, r8)
 800e94e:	e014      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e950:	46c0      	nop			@ (mov r8, r8)
 800e952:	e012      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e954:	46c0      	nop			@ (mov r8, r8)
 800e956:	e010      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e958:	46c0      	nop			@ (mov r8, r8)
 800e95a:	e00e      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e95c:	46c0      	nop			@ (mov r8, r8)
 800e95e:	e00c      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e960:	46c0      	nop			@ (mov r8, r8)
 800e962:	e00a      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e964:	46c0      	nop			@ (mov r8, r8)
 800e966:	e008      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e968:	46c0      	nop			@ (mov r8, r8)
 800e96a:	e006      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e96c:	46c0      	nop			@ (mov r8, r8)
 800e96e:	e004      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e970:	46c0      	nop			@ (mov r8, r8)
 800e972:	e002      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e974:	46c0      	nop			@ (mov r8, r8)
 800e976:	e000      	b.n	800e97a <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e978:	46c0      	nop			@ (mov r8, r8)
        }
    }
    EventRegionNvmCtxChanged( );
 800e97a:	f7fe fd0d 	bl	800d398 <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 800e97e:	f7fe fd03 	bl	800d388 <EventMacNvmCtxChanged>
    return status;
 800e982:	2317      	movs	r3, #23
 800e984:	18fb      	adds	r3, r7, r3
 800e986:	781b      	ldrb	r3, [r3, #0]
}
 800e988:	0018      	movs	r0, r3
 800e98a:	46bd      	mov	sp, r7
 800e98c:	b007      	add	sp, #28
 800e98e:	bd90      	pop	{r4, r7, pc}
 800e990:	20000964 	.word	0x20000964
 800e994:	00000484 	.word	0x00000484

0800e998 <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800e998:	b5b0      	push	{r4, r5, r7, lr}
 800e99a:	b086      	sub	sp, #24
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800e9a0:	2317      	movs	r3, #23
 800e9a2:	18fb      	adds	r3, r7, r3
 800e9a4:	2202      	movs	r2, #2
 800e9a6:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800e9a8:	230c      	movs	r3, #12
 800e9aa:	18fb      	adds	r3, r7, r3
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	801a      	strh	r2, [r3, #0]

    if( mlmeRequest == NULL )
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d101      	bne.n	800e9ba <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e9b6:	2303      	movs	r3, #3
 800e9b8:	e12d      	b.n	800ec16 <LoRaMacMlmeRequest+0x27e>
    }
    if( LoRaMacIsBusy( ) == true )
 800e9ba:	f7fb ff51 	bl	800a860 <LoRaMacIsBusy>
 800e9be:	1e03      	subs	r3, r0, #0
 800e9c0:	d001      	beq.n	800e9c6 <LoRaMacMlmeRequest+0x2e>
    {
        return LORAMAC_STATUS_BUSY;
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	e127      	b.n	800ec16 <LoRaMacMlmeRequest+0x27e>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800e9c6:	f001 f917 	bl	800fbf8 <LoRaMacConfirmQueueIsFull>
 800e9ca:	1e03      	subs	r3, r0, #0
 800e9cc:	d001      	beq.n	800e9d2 <LoRaMacMlmeRequest+0x3a>
    {
        return LORAMAC_STATUS_BUSY;
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	e121      	b.n	800ec16 <LoRaMacMlmeRequest+0x27e>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800e9d2:	f001 f907 	bl	800fbe4 <LoRaMacConfirmQueueGetCnt>
 800e9d6:	1e03      	subs	r3, r0, #0
 800e9d8:	d105      	bne.n	800e9e6 <LoRaMacMlmeRequest+0x4e>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800e9da:	4b91      	ldr	r3, [pc, #580]	@ (800ec20 <LoRaMacMlmeRequest+0x288>)
 800e9dc:	2214      	movs	r2, #20
 800e9de:	2100      	movs	r1, #0
 800e9e0:	0018      	movs	r0, r3
 800e9e2:	f006 fe97 	bl	8015714 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e9e6:	4b8f      	ldr	r3, [pc, #572]	@ (800ec24 <LoRaMacMlmeRequest+0x28c>)
 800e9e8:	4a8f      	ldr	r2, [pc, #572]	@ (800ec28 <LoRaMacMlmeRequest+0x290>)
 800e9ea:	2101      	movs	r1, #1
 800e9ec:	5499      	strb	r1, [r3, r2]

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e9ee:	4b8d      	ldr	r3, [pc, #564]	@ (800ec24 <LoRaMacMlmeRequest+0x28c>)
 800e9f0:	4a8e      	ldr	r2, [pc, #568]	@ (800ec2c <LoRaMacMlmeRequest+0x294>)
 800e9f2:	5c99      	ldrb	r1, [r3, r2]
 800e9f4:	2004      	movs	r0, #4
 800e9f6:	4301      	orrs	r1, r0
 800e9f8:	5499      	strb	r1, [r3, r2]
    queueElement.Request = mlmeRequest->Type;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	781a      	ldrb	r2, [r3, #0]
 800e9fe:	2110      	movs	r1, #16
 800ea00:	187b      	adds	r3, r7, r1
 800ea02:	701a      	strb	r2, [r3, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ea04:	187b      	adds	r3, r7, r1
 800ea06:	2201      	movs	r2, #1
 800ea08:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 800ea0a:	187b      	adds	r3, r7, r1
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	70da      	strb	r2, [r3, #3]

    switch( mlmeRequest->Type )
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	781b      	ldrb	r3, [r3, #0]
 800ea14:	2b0d      	cmp	r3, #13
 800ea16:	d900      	bls.n	800ea1a <LoRaMacMlmeRequest+0x82>
 800ea18:	e0d4      	b.n	800ebc4 <LoRaMacMlmeRequest+0x22c>
 800ea1a:	009a      	lsls	r2, r3, #2
 800ea1c:	4b84      	ldr	r3, [pc, #528]	@ (800ec30 <LoRaMacMlmeRequest+0x298>)
 800ea1e:	18d3      	adds	r3, r2, r3
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	469f      	mov	pc, r3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800ea24:	4a7f      	ldr	r2, [pc, #508]	@ (800ec24 <LoRaMacMlmeRequest+0x28c>)
 800ea26:	23d0      	movs	r3, #208	@ 0xd0
 800ea28:	009b      	lsls	r3, r3, #2
 800ea2a:	58d3      	ldr	r3, [r2, r3]
 800ea2c:	2220      	movs	r2, #32
 800ea2e:	4013      	ands	r3, r2
 800ea30:	d001      	beq.n	800ea36 <LoRaMacMlmeRequest+0x9e>
            {
                return LORAMAC_STATUS_BUSY;
 800ea32:	2301      	movs	r3, #1
 800ea34:	e0ef      	b.n	800ec16 <LoRaMacMlmeRequest+0x27e>
            }

            ResetMacParameters( );
 800ea36:	f7fd fe3f 	bl	800c6b8 <ResetMacParameters>

            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800ea3a:	4b7a      	ldr	r3, [pc, #488]	@ (800ec24 <LoRaMacMlmeRequest+0x28c>)
 800ea3c:	4a7d      	ldr	r2, [pc, #500]	@ (800ec34 <LoRaMacMlmeRequest+0x29c>)
 800ea3e:	589b      	ldr	r3, [r3, r2]
 800ea40:	7818      	ldrb	r0, [r3, #0]
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	791b      	ldrb	r3, [r3, #4]
 800ea46:	b259      	sxtb	r1, r3
 800ea48:	4b76      	ldr	r3, [pc, #472]	@ (800ec24 <LoRaMacMlmeRequest+0x28c>)
 800ea4a:	4a7a      	ldr	r2, [pc, #488]	@ (800ec34 <LoRaMacMlmeRequest+0x29c>)
 800ea4c:	589c      	ldr	r4, [r3, r2]
 800ea4e:	2200      	movs	r2, #0
 800ea50:	f002 ff46 	bl	80118e0 <RegionAlternateDr>
 800ea54:	0003      	movs	r3, r0
 800ea56:	001a      	movs	r2, r3
 800ea58:	23f9      	movs	r3, #249	@ 0xf9
 800ea5a:	54e2      	strb	r2, [r4, r3]

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800ea5c:	2310      	movs	r3, #16
 800ea5e:	18fb      	adds	r3, r7, r3
 800ea60:	2207      	movs	r2, #7
 800ea62:	705a      	strb	r2, [r3, #1]

            status = SendReJoinReq( JOIN_REQ );
 800ea64:	2517      	movs	r5, #23
 800ea66:	197c      	adds	r4, r7, r5
 800ea68:	20ff      	movs	r0, #255	@ 0xff
 800ea6a:	f7fd fb51 	bl	800c110 <SendReJoinReq>
 800ea6e:	0003      	movs	r3, r0
 800ea70:	7023      	strb	r3, [r4, #0]

            if( status != LORAMAC_STATUS_OK )
 800ea72:	197b      	adds	r3, r7, r5
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d100      	bne.n	800ea7c <LoRaMacMlmeRequest+0xe4>
 800ea7a:	e0a5      	b.n	800ebc8 <LoRaMacMlmeRequest+0x230>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800ea7c:	4b69      	ldr	r3, [pc, #420]	@ (800ec24 <LoRaMacMlmeRequest+0x28c>)
 800ea7e:	4a6d      	ldr	r2, [pc, #436]	@ (800ec34 <LoRaMacMlmeRequest+0x29c>)
 800ea80:	589b      	ldr	r3, [r3, r2]
 800ea82:	7818      	ldrb	r0, [r3, #0]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	791b      	ldrb	r3, [r3, #4]
 800ea88:	b259      	sxtb	r1, r3
 800ea8a:	4b66      	ldr	r3, [pc, #408]	@ (800ec24 <LoRaMacMlmeRequest+0x28c>)
 800ea8c:	4a69      	ldr	r2, [pc, #420]	@ (800ec34 <LoRaMacMlmeRequest+0x29c>)
 800ea8e:	589c      	ldr	r4, [r3, r2]
 800ea90:	2201      	movs	r2, #1
 800ea92:	f002 ff25 	bl	80118e0 <RegionAlternateDr>
 800ea96:	0003      	movs	r3, r0
 800ea98:	001a      	movs	r2, r3
 800ea9a:	23f9      	movs	r3, #249	@ 0xf9
 800ea9c:	54e2      	strb	r2, [r4, r3]
            }
            break;
 800ea9e:	e093      	b.n	800ebc8 <LoRaMacMlmeRequest+0x230>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800eaa0:	2417      	movs	r4, #23
 800eaa2:	193b      	adds	r3, r7, r4
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800eaa8:	230c      	movs	r3, #12
 800eaaa:	18fb      	adds	r3, r7, r3
 800eaac:	2200      	movs	r2, #0
 800eaae:	0019      	movs	r1, r3
 800eab0:	2002      	movs	r0, #2
 800eab2:	f000 fd55 	bl	800f560 <LoRaMacCommandsAddCmd>
 800eab6:	1e03      	subs	r3, r0, #0
 800eab8:	d100      	bne.n	800eabc <LoRaMacMlmeRequest+0x124>
 800eaba:	e087      	b.n	800ebcc <LoRaMacMlmeRequest+0x234>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800eabc:	193b      	adds	r3, r7, r4
 800eabe:	2213      	movs	r2, #19
 800eac0:	701a      	strb	r2, [r3, #0]
            }
            break;
 800eac2:	e083      	b.n	800ebcc <LoRaMacMlmeRequest+0x234>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	889b      	ldrh	r3, [r3, #4]
 800eac8:	2217      	movs	r2, #23
 800eaca:	18bc      	adds	r4, r7, r2
 800eacc:	0018      	movs	r0, r3
 800eace:	f7fe f97b 	bl	800cdc8 <SetTxContinuousWave>
 800ead2:	0003      	movs	r3, r0
 800ead4:	7023      	strb	r3, [r4, #0]
            break;
 800ead6:	e080      	b.n	800ebda <LoRaMacMlmeRequest+0x242>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	8898      	ldrh	r0, [r3, #4]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	6899      	ldr	r1, [r3, #8]
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	7b1b      	ldrb	r3, [r3, #12]
 800eae4:	2217      	movs	r2, #23
 800eae6:	18bc      	adds	r4, r7, r2
 800eae8:	001a      	movs	r2, r3
 800eaea:	f7fe f9bb 	bl	800ce64 <SetTxContinuousWave1>
 800eaee:	0003      	movs	r3, r0
 800eaf0:	7023      	strb	r3, [r4, #0]
            break;
 800eaf2:	e072      	b.n	800ebda <LoRaMacMlmeRequest+0x242>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800eaf4:	2417      	movs	r4, #23
 800eaf6:	193b      	adds	r3, r7, r4
 800eaf8:	2200      	movs	r2, #0
 800eafa:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800eafc:	230c      	movs	r3, #12
 800eafe:	18fb      	adds	r3, r7, r3
 800eb00:	2200      	movs	r2, #0
 800eb02:	0019      	movs	r1, r3
 800eb04:	200d      	movs	r0, #13
 800eb06:	f000 fd2b 	bl	800f560 <LoRaMacCommandsAddCmd>
 800eb0a:	1e03      	subs	r3, r0, #0
 800eb0c:	d060      	beq.n	800ebd0 <LoRaMacMlmeRequest+0x238>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800eb0e:	193b      	adds	r3, r7, r4
 800eb10:	2213      	movs	r2, #19
 800eb12:	701a      	strb	r2, [r3, #0]
            }
            break;
 800eb14:	e05c      	b.n	800ebd0 <LoRaMacMlmeRequest+0x238>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800eb16:	4b43      	ldr	r3, [pc, #268]	@ (800ec24 <LoRaMacMlmeRequest+0x28c>)
 800eb18:	4a46      	ldr	r2, [pc, #280]	@ (800ec34 <LoRaMacMlmeRequest+0x29c>)
 800eb1a:	589b      	ldr	r3, [r3, r2]
 800eb1c:	22f0      	movs	r2, #240	@ 0xf0
 800eb1e:	5c9b      	ldrb	r3, [r3, r2]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d157      	bne.n	800ebd4 <LoRaMacMlmeRequest+0x23c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800eb24:	2416      	movs	r4, #22
 800eb26:	193b      	adds	r3, r7, r4
 800eb28:	687a      	ldr	r2, [r7, #4]
 800eb2a:	7912      	ldrb	r2, [r2, #4]
 800eb2c:	701a      	strb	r2, [r3, #0]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	791b      	ldrb	r3, [r3, #4]
 800eb32:	075b      	lsls	r3, r3, #29
 800eb34:	0f5b      	lsrs	r3, r3, #29
 800eb36:	b2db      	uxtb	r3, r3
 800eb38:	0018      	movs	r0, r3
 800eb3a:	f000 fb31 	bl	800f1a0 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800eb3e:	210c      	movs	r1, #12
 800eb40:	187b      	adds	r3, r7, r1
 800eb42:	193a      	adds	r2, r7, r4
 800eb44:	7812      	ldrb	r2, [r2, #0]
 800eb46:	701a      	strb	r2, [r3, #0]
                status = LORAMAC_STATUS_OK;
 800eb48:	2417      	movs	r4, #23
 800eb4a:	193b      	adds	r3, r7, r4
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	701a      	strb	r2, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800eb50:	187b      	adds	r3, r7, r1
 800eb52:	2201      	movs	r2, #1
 800eb54:	0019      	movs	r1, r3
 800eb56:	2010      	movs	r0, #16
 800eb58:	f000 fd02 	bl	800f560 <LoRaMacCommandsAddCmd>
 800eb5c:	1e03      	subs	r3, r0, #0
 800eb5e:	d039      	beq.n	800ebd4 <LoRaMacMlmeRequest+0x23c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800eb60:	193b      	adds	r3, r7, r4
 800eb62:	2213      	movs	r2, #19
 800eb64:	701a      	strb	r2, [r3, #0]
                }
            }
            break;
 800eb66:	e035      	b.n	800ebd4 <LoRaMacMlmeRequest+0x23c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800eb68:	2417      	movs	r4, #23
 800eb6a:	193b      	adds	r3, r7, r4
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800eb70:	230c      	movs	r3, #12
 800eb72:	18fb      	adds	r3, r7, r3
 800eb74:	2200      	movs	r2, #0
 800eb76:	0019      	movs	r1, r3
 800eb78:	2012      	movs	r0, #18
 800eb7a:	f000 fcf1 	bl	800f560 <LoRaMacCommandsAddCmd>
 800eb7e:	1e03      	subs	r3, r0, #0
 800eb80:	d02a      	beq.n	800ebd8 <LoRaMacMlmeRequest+0x240>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800eb82:	193b      	adds	r3, r7, r4
 800eb84:	2213      	movs	r2, #19
 800eb86:	701a      	strb	r2, [r3, #0]
            }
            break;
 800eb88:	e026      	b.n	800ebd8 <LoRaMacMlmeRequest+0x240>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 800eb8a:	2310      	movs	r3, #16
 800eb8c:	18fb      	adds	r3, r7, r3
 800eb8e:	2201      	movs	r2, #1
 800eb90:	70da      	strb	r2, [r3, #3]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800eb92:	f000 fac3 	bl	800f11c <LoRaMacClassBIsAcquisitionInProgress>
 800eb96:	0003      	movs	r3, r0
 800eb98:	001a      	movs	r2, r3
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	4053      	eors	r3, r2
 800eb9e:	b2db      	uxtb	r3, r3
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d00a      	beq.n	800ebba <LoRaMacMlmeRequest+0x222>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800eba4:	2000      	movs	r0, #0
 800eba6:	f000 fa9b 	bl	800f0e0 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800ebaa:	2000      	movs	r0, #0
 800ebac:	f000 fabc 	bl	800f128 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 800ebb0:	2317      	movs	r3, #23
 800ebb2:	18fb      	adds	r3, r7, r3
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 800ebb8:	e00f      	b.n	800ebda <LoRaMacMlmeRequest+0x242>
                status = LORAMAC_STATUS_BUSY;
 800ebba:	2317      	movs	r3, #23
 800ebbc:	18fb      	adds	r3, r7, r3
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	701a      	strb	r2, [r3, #0]
            break;
 800ebc2:	e00a      	b.n	800ebda <LoRaMacMlmeRequest+0x242>
        }
        default:
            break;
 800ebc4:	46c0      	nop			@ (mov r8, r8)
 800ebc6:	e008      	b.n	800ebda <LoRaMacMlmeRequest+0x242>
            break;
 800ebc8:	46c0      	nop			@ (mov r8, r8)
 800ebca:	e006      	b.n	800ebda <LoRaMacMlmeRequest+0x242>
            break;
 800ebcc:	46c0      	nop			@ (mov r8, r8)
 800ebce:	e004      	b.n	800ebda <LoRaMacMlmeRequest+0x242>
            break;
 800ebd0:	46c0      	nop			@ (mov r8, r8)
 800ebd2:	e002      	b.n	800ebda <LoRaMacMlmeRequest+0x242>
            break;
 800ebd4:	46c0      	nop			@ (mov r8, r8)
 800ebd6:	e000      	b.n	800ebda <LoRaMacMlmeRequest+0x242>
            break;
 800ebd8:	46c0      	nop			@ (mov r8, r8)
    }

    if( status != LORAMAC_STATUS_OK )
 800ebda:	2317      	movs	r3, #23
 800ebdc:	18fb      	adds	r3, r7, r3
 800ebde:	781b      	ldrb	r3, [r3, #0]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d00e      	beq.n	800ec02 <LoRaMacMlmeRequest+0x26a>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800ebe4:	f000 fffe 	bl	800fbe4 <LoRaMacConfirmQueueGetCnt>
 800ebe8:	1e03      	subs	r3, r0, #0
 800ebea:	d111      	bne.n	800ec10 <LoRaMacMlmeRequest+0x278>
        {
            MacCtx.NodeAckRequested = false;
 800ebec:	4b0d      	ldr	r3, [pc, #52]	@ (800ec24 <LoRaMacMlmeRequest+0x28c>)
 800ebee:	4a12      	ldr	r2, [pc, #72]	@ (800ec38 <LoRaMacMlmeRequest+0x2a0>)
 800ebf0:	2100      	movs	r1, #0
 800ebf2:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800ebf4:	4b0b      	ldr	r3, [pc, #44]	@ (800ec24 <LoRaMacMlmeRequest+0x28c>)
 800ebf6:	4a0d      	ldr	r2, [pc, #52]	@ (800ec2c <LoRaMacMlmeRequest+0x294>)
 800ebf8:	5c99      	ldrb	r1, [r3, r2]
 800ebfa:	2004      	movs	r0, #4
 800ebfc:	4381      	bics	r1, r0
 800ebfe:	5499      	strb	r1, [r3, r2]
 800ec00:	e006      	b.n	800ec10 <LoRaMacMlmeRequest+0x278>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 800ec02:	2310      	movs	r3, #16
 800ec04:	18fb      	adds	r3, r7, r3
 800ec06:	0018      	movs	r0, r3
 800ec08:	f000 fe9a 	bl	800f940 <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 800ec0c:	f7fe fbbc 	bl	800d388 <EventMacNvmCtxChanged>
    }
    return status;
 800ec10:	2317      	movs	r3, #23
 800ec12:	18fb      	adds	r3, r7, r3
 800ec14:	781b      	ldrb	r3, [r3, #0]
}
 800ec16:	0018      	movs	r0, r3
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	b006      	add	sp, #24
 800ec1c:	bdb0      	pop	{r4, r5, r7, pc}
 800ec1e:	46c0      	nop			@ (mov r8, r8)
 800ec20:	20000db4 	.word	0x20000db4
 800ec24:	20000964 	.word	0x20000964
 800ec28:	00000451 	.word	0x00000451
 800ec2c:	00000481 	.word	0x00000481
 800ec30:	0801b488 	.word	0x0801b488
 800ec34:	00000484 	.word	0x00000484
 800ec38:	00000414 	.word	0x00000414

0800ec3c <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
 800ec3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec3e:	b08b      	sub	sp, #44	@ 0x2c
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ec44:	2327      	movs	r3, #39	@ 0x27
 800ec46:	18fb      	adds	r3, r7, r3
 800ec48:	2202      	movs	r2, #2
 800ec4a:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 800ec4c:	2326      	movs	r3, #38	@ 0x26
 800ec4e:	18fb      	adds	r3, r7, r3
 800ec50:	2200      	movs	r2, #0
 800ec52:	701a      	strb	r2, [r3, #0]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 800ec54:	231d      	movs	r3, #29
 800ec56:	18fb      	adds	r3, r7, r3
 800ec58:	2200      	movs	r2, #0
 800ec5a:	701a      	strb	r2, [r3, #0]
    bool readyToSend = false;
 800ec5c:	231c      	movs	r3, #28
 800ec5e:	18fb      	adds	r3, r7, r3
 800ec60:	2200      	movs	r2, #0
 800ec62:	701a      	strb	r2, [r3, #0]

    if( mcpsRequest == NULL )
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d101      	bne.n	800ec6e <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ec6a:	2303      	movs	r3, #3
 800ec6c:	e115      	b.n	800ee9a <LoRaMacMcpsRequest+0x25e>
    }
    if( LoRaMacIsBusy( ) == true )
 800ec6e:	f7fb fdf7 	bl	800a860 <LoRaMacIsBusy>
 800ec72:	1e03      	subs	r3, r0, #0
 800ec74:	d001      	beq.n	800ec7a <LoRaMacMcpsRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 800ec76:	2301      	movs	r3, #1
 800ec78:	e10f      	b.n	800ee9a <LoRaMacMcpsRequest+0x25e>
    }

    macHdr.Value = 0;
 800ec7a:	2310      	movs	r3, #16
 800ec7c:	18fb      	adds	r3, r7, r3
 800ec7e:	2200      	movs	r2, #0
 800ec80:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800ec82:	4b88      	ldr	r3, [pc, #544]	@ (800eea4 <LoRaMacMcpsRequest+0x268>)
 800ec84:	2214      	movs	r2, #20
 800ec86:	2100      	movs	r1, #0
 800ec88:	0018      	movs	r0, r3
 800ec8a:	f006 fd43 	bl	8015714 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ec8e:	4b86      	ldr	r3, [pc, #536]	@ (800eea8 <LoRaMacMcpsRequest+0x26c>)
 800ec90:	4a86      	ldr	r2, [pc, #536]	@ (800eeac <LoRaMacMcpsRequest+0x270>)
 800ec92:	2101      	movs	r1, #1
 800ec94:	5499      	strb	r1, [r3, r2]

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 800ec96:	4b84      	ldr	r3, [pc, #528]	@ (800eea8 <LoRaMacMcpsRequest+0x26c>)
 800ec98:	4a85      	ldr	r2, [pc, #532]	@ (800eeb0 <LoRaMacMcpsRequest+0x274>)
 800ec9a:	2101      	movs	r1, #1
 800ec9c:	5499      	strb	r1, [r3, r2]

    switch( mcpsRequest->Type )
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	2b03      	cmp	r3, #3
 800eca4:	d056      	beq.n	800ed54 <LoRaMacMcpsRequest+0x118>
 800eca6:	dc72      	bgt.n	800ed8e <LoRaMacMcpsRequest+0x152>
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d002      	beq.n	800ecb2 <LoRaMacMcpsRequest+0x76>
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	d024      	beq.n	800ecfa <LoRaMacMcpsRequest+0xbe>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 800ecb0:	e06d      	b.n	800ed8e <LoRaMacMcpsRequest+0x152>
            readyToSend = true;
 800ecb2:	231c      	movs	r3, #28
 800ecb4:	18fb      	adds	r3, r7, r3
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 800ecba:	4b7b      	ldr	r3, [pc, #492]	@ (800eea8 <LoRaMacMcpsRequest+0x26c>)
 800ecbc:	4a7d      	ldr	r2, [pc, #500]	@ (800eeb4 <LoRaMacMcpsRequest+0x278>)
 800ecbe:	2101      	movs	r1, #1
 800ecc0:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800ecc2:	2310      	movs	r3, #16
 800ecc4:	18fb      	adds	r3, r7, r3
 800ecc6:	781a      	ldrb	r2, [r3, #0]
 800ecc8:	211f      	movs	r1, #31
 800ecca:	400a      	ands	r2, r1
 800eccc:	1c11      	adds	r1, r2, #0
 800ecce:	2240      	movs	r2, #64	@ 0x40
 800ecd0:	430a      	orrs	r2, r1
 800ecd2:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800ecd4:	2326      	movs	r3, #38	@ 0x26
 800ecd6:	18fb      	adds	r3, r7, r3
 800ecd8:	687a      	ldr	r2, [r7, #4]
 800ecda:	7912      	ldrb	r2, [r2, #4]
 800ecdc:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	689b      	ldr	r3, [r3, #8]
 800ece2:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800ece4:	231e      	movs	r3, #30
 800ece6:	18fb      	adds	r3, r7, r3
 800ece8:	687a      	ldr	r2, [r7, #4]
 800ecea:	8992      	ldrh	r2, [r2, #12]
 800ecec:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800ecee:	231d      	movs	r3, #29
 800ecf0:	18fb      	adds	r3, r7, r3
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	7b92      	ldrb	r2, [r2, #14]
 800ecf6:	701a      	strb	r2, [r3, #0]
            break;
 800ecf8:	e04a      	b.n	800ed90 <LoRaMacMcpsRequest+0x154>
            readyToSend = true;
 800ecfa:	231c      	movs	r3, #28
 800ecfc:	18fb      	adds	r3, r7, r3
 800ecfe:	2201      	movs	r2, #1
 800ed00:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	7bdb      	ldrb	r3, [r3, #15]
 800ed06:	1c1a      	adds	r2, r3, #0
 800ed08:	b2d3      	uxtb	r3, r2
 800ed0a:	2b08      	cmp	r3, #8
 800ed0c:	d901      	bls.n	800ed12 <LoRaMacMcpsRequest+0xd6>
 800ed0e:	2308      	movs	r3, #8
 800ed10:	1c1a      	adds	r2, r3, #0
 800ed12:	b2d1      	uxtb	r1, r2
 800ed14:	4b64      	ldr	r3, [pc, #400]	@ (800eea8 <LoRaMacMcpsRequest+0x26c>)
 800ed16:	4a67      	ldr	r2, [pc, #412]	@ (800eeb4 <LoRaMacMcpsRequest+0x278>)
 800ed18:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800ed1a:	2310      	movs	r3, #16
 800ed1c:	18fb      	adds	r3, r7, r3
 800ed1e:	781a      	ldrb	r2, [r3, #0]
 800ed20:	211f      	movs	r1, #31
 800ed22:	400a      	ands	r2, r1
 800ed24:	1c11      	adds	r1, r2, #0
 800ed26:	2280      	movs	r2, #128	@ 0x80
 800ed28:	4252      	negs	r2, r2
 800ed2a:	430a      	orrs	r2, r1
 800ed2c:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800ed2e:	2326      	movs	r3, #38	@ 0x26
 800ed30:	18fb      	adds	r3, r7, r3
 800ed32:	687a      	ldr	r2, [r7, #4]
 800ed34:	7912      	ldrb	r2, [r2, #4]
 800ed36:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	689b      	ldr	r3, [r3, #8]
 800ed3c:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800ed3e:	231e      	movs	r3, #30
 800ed40:	18fb      	adds	r3, r7, r3
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	8992      	ldrh	r2, [r2, #12]
 800ed46:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800ed48:	231d      	movs	r3, #29
 800ed4a:	18fb      	adds	r3, r7, r3
 800ed4c:	687a      	ldr	r2, [r7, #4]
 800ed4e:	7b92      	ldrb	r2, [r2, #14]
 800ed50:	701a      	strb	r2, [r3, #0]
            break;
 800ed52:	e01d      	b.n	800ed90 <LoRaMacMcpsRequest+0x154>
            readyToSend = true;
 800ed54:	231c      	movs	r3, #28
 800ed56:	18fb      	adds	r3, r7, r3
 800ed58:	2201      	movs	r2, #1
 800ed5a:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 800ed5c:	4b52      	ldr	r3, [pc, #328]	@ (800eea8 <LoRaMacMcpsRequest+0x26c>)
 800ed5e:	4a55      	ldr	r2, [pc, #340]	@ (800eeb4 <LoRaMacMcpsRequest+0x278>)
 800ed60:	2101      	movs	r1, #1
 800ed62:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800ed64:	2310      	movs	r3, #16
 800ed66:	18fb      	adds	r3, r7, r3
 800ed68:	781a      	ldrb	r2, [r3, #0]
 800ed6a:	2120      	movs	r1, #32
 800ed6c:	4249      	negs	r1, r1
 800ed6e:	430a      	orrs	r2, r1
 800ed70:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	685b      	ldr	r3, [r3, #4]
 800ed76:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800ed78:	231e      	movs	r3, #30
 800ed7a:	18fb      	adds	r3, r7, r3
 800ed7c:	687a      	ldr	r2, [r7, #4]
 800ed7e:	8912      	ldrh	r2, [r2, #8]
 800ed80:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800ed82:	231d      	movs	r3, #29
 800ed84:	18fb      	adds	r3, r7, r3
 800ed86:	687a      	ldr	r2, [r7, #4]
 800ed88:	7a92      	ldrb	r2, [r2, #10]
 800ed8a:	701a      	strb	r2, [r3, #0]
            break;
 800ed8c:	e000      	b.n	800ed90 <LoRaMacMcpsRequest+0x154>
            break;
 800ed8e:	46c0      	nop			@ (mov r8, r8)
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800ed90:	2118      	movs	r1, #24
 800ed92:	187b      	adds	r3, r7, r1
 800ed94:	2202      	movs	r2, #2
 800ed96:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ed98:	4b43      	ldr	r3, [pc, #268]	@ (800eea8 <LoRaMacMcpsRequest+0x26c>)
 800ed9a:	4a47      	ldr	r2, [pc, #284]	@ (800eeb8 <LoRaMacMcpsRequest+0x27c>)
 800ed9c:	589a      	ldr	r2, [r3, r2]
 800ed9e:	2396      	movs	r3, #150	@ 0x96
 800eda0:	005b      	lsls	r3, r3, #1
 800eda2:	5cd2      	ldrb	r2, [r2, r3]
 800eda4:	187b      	adds	r3, r7, r1
 800eda6:	709a      	strb	r2, [r3, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800eda8:	4b3f      	ldr	r3, [pc, #252]	@ (800eea8 <LoRaMacMcpsRequest+0x26c>)
 800edaa:	4a43      	ldr	r2, [pc, #268]	@ (800eeb8 <LoRaMacMcpsRequest+0x27c>)
 800edac:	589b      	ldr	r3, [r3, r2]
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	187a      	adds	r2, r7, r1
 800edb2:	0011      	movs	r1, r2
 800edb4:	0018      	movs	r0, r3
 800edb6:	f002 fc16 	bl	80115e6 <RegionGetPhyParam>
 800edba:	0003      	movs	r3, r0
 800edbc:	001a      	movs	r2, r3
 800edbe:	2114      	movs	r1, #20
 800edc0:	187b      	adds	r3, r7, r1
 800edc2:	601a      	str	r2, [r3, #0]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800edc4:	187b      	adds	r3, r7, r1
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	b259      	sxtb	r1, r3
 800edca:	231d      	movs	r3, #29
 800edcc:	18fa      	adds	r2, r7, r3
 800edce:	18fb      	adds	r3, r7, r3
 800edd0:	1c0c      	adds	r4, r1, #0
 800edd2:	781b      	ldrb	r3, [r3, #0]
 800edd4:	b258      	sxtb	r0, r3
 800edd6:	b261      	sxtb	r1, r4
 800edd8:	4288      	cmp	r0, r1
 800edda:	da00      	bge.n	800edde <LoRaMacMcpsRequest+0x1a2>
 800eddc:	1c23      	adds	r3, r4, #0
 800edde:	7013      	strb	r3, [r2, #0]

    if( readyToSend == true )
 800ede0:	231c      	movs	r3, #28
 800ede2:	18fb      	adds	r3, r7, r3
 800ede4:	781b      	ldrb	r3, [r3, #0]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d052      	beq.n	800ee90 <LoRaMacMcpsRequest+0x254>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 800edea:	4b2f      	ldr	r3, [pc, #188]	@ (800eea8 <LoRaMacMcpsRequest+0x26c>)
 800edec:	4a32      	ldr	r2, [pc, #200]	@ (800eeb8 <LoRaMacMcpsRequest+0x27c>)
 800edee:	589b      	ldr	r3, [r3, r2]
 800edf0:	22f2      	movs	r2, #242	@ 0xf2
 800edf2:	5c9b      	ldrb	r3, [r3, r2]
 800edf4:	2201      	movs	r2, #1
 800edf6:	4053      	eors	r3, r2
 800edf8:	b2db      	uxtb	r3, r3
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d024      	beq.n	800ee48 <LoRaMacMcpsRequest+0x20c>
        {
            verify.DatarateParams.Datarate = datarate;
 800edfe:	210c      	movs	r1, #12
 800ee00:	187b      	adds	r3, r7, r1
 800ee02:	221d      	movs	r2, #29
 800ee04:	18ba      	adds	r2, r7, r2
 800ee06:	7812      	ldrb	r2, [r2, #0]
 800ee08:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ee0a:	4b27      	ldr	r3, [pc, #156]	@ (800eea8 <LoRaMacMcpsRequest+0x26c>)
 800ee0c:	4a2a      	ldr	r2, [pc, #168]	@ (800eeb8 <LoRaMacMcpsRequest+0x27c>)
 800ee0e:	589a      	ldr	r2, [r3, r2]
 800ee10:	2396      	movs	r3, #150	@ 0x96
 800ee12:	005b      	lsls	r3, r3, #1
 800ee14:	5cd2      	ldrb	r2, [r2, r3]
 800ee16:	187b      	adds	r3, r7, r1
 800ee18:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800ee1a:	4b23      	ldr	r3, [pc, #140]	@ (800eea8 <LoRaMacMcpsRequest+0x26c>)
 800ee1c:	4a26      	ldr	r2, [pc, #152]	@ (800eeb8 <LoRaMacMcpsRequest+0x27c>)
 800ee1e:	589b      	ldr	r3, [r3, r2]
 800ee20:	781b      	ldrb	r3, [r3, #0]
 800ee22:	000c      	movs	r4, r1
 800ee24:	1879      	adds	r1, r7, r1
 800ee26:	2205      	movs	r2, #5
 800ee28:	0018      	movs	r0, r3
 800ee2a:	f002 fc42 	bl	80116b2 <RegionVerify>
 800ee2e:	1e03      	subs	r3, r0, #0
 800ee30:	d008      	beq.n	800ee44 <LoRaMacMcpsRequest+0x208>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ee32:	4b1d      	ldr	r3, [pc, #116]	@ (800eea8 <LoRaMacMcpsRequest+0x26c>)
 800ee34:	4a20      	ldr	r2, [pc, #128]	@ (800eeb8 <LoRaMacMcpsRequest+0x27c>)
 800ee36:	589b      	ldr	r3, [r3, r2]
 800ee38:	193a      	adds	r2, r7, r4
 800ee3a:	2100      	movs	r1, #0
 800ee3c:	5651      	ldrsb	r1, [r2, r1]
 800ee3e:	22f9      	movs	r2, #249	@ 0xf9
 800ee40:	5499      	strb	r1, [r3, r2]
 800ee42:	e001      	b.n	800ee48 <LoRaMacMcpsRequest+0x20c>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800ee44:	2303      	movs	r3, #3
 800ee46:	e028      	b.n	800ee9a <LoRaMacMcpsRequest+0x25e>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 800ee48:	2627      	movs	r6, #39	@ 0x27
 800ee4a:	19bc      	adds	r4, r7, r6
 800ee4c:	231e      	movs	r3, #30
 800ee4e:	18fb      	adds	r3, r7, r3
 800ee50:	881d      	ldrh	r5, [r3, #0]
 800ee52:	6a3a      	ldr	r2, [r7, #32]
 800ee54:	2326      	movs	r3, #38	@ 0x26
 800ee56:	18fb      	adds	r3, r7, r3
 800ee58:	7819      	ldrb	r1, [r3, #0]
 800ee5a:	2310      	movs	r3, #16
 800ee5c:	18f8      	adds	r0, r7, r3
 800ee5e:	002b      	movs	r3, r5
 800ee60:	f7fd f820 	bl	800bea4 <Send>
 800ee64:	0003      	movs	r3, r0
 800ee66:	7023      	strb	r3, [r4, #0]
        if( status == LORAMAC_STATUS_OK )
 800ee68:	19bb      	adds	r3, r7, r6
 800ee6a:	781b      	ldrb	r3, [r3, #0]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d10b      	bne.n	800ee88 <LoRaMacMcpsRequest+0x24c>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	7819      	ldrb	r1, [r3, #0]
 800ee74:	4b0c      	ldr	r3, [pc, #48]	@ (800eea8 <LoRaMacMcpsRequest+0x26c>)
 800ee76:	4a11      	ldr	r2, [pc, #68]	@ (800eebc <LoRaMacMcpsRequest+0x280>)
 800ee78:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800ee7a:	4b0b      	ldr	r3, [pc, #44]	@ (800eea8 <LoRaMacMcpsRequest+0x26c>)
 800ee7c:	4a10      	ldr	r2, [pc, #64]	@ (800eec0 <LoRaMacMcpsRequest+0x284>)
 800ee7e:	5c99      	ldrb	r1, [r3, r2]
 800ee80:	2001      	movs	r0, #1
 800ee82:	4301      	orrs	r1, r0
 800ee84:	5499      	strb	r1, [r3, r2]
 800ee86:	e003      	b.n	800ee90 <LoRaMacMcpsRequest+0x254>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 800ee88:	4b07      	ldr	r3, [pc, #28]	@ (800eea8 <LoRaMacMcpsRequest+0x26c>)
 800ee8a:	4a0e      	ldr	r2, [pc, #56]	@ (800eec4 <LoRaMacMcpsRequest+0x288>)
 800ee8c:	2100      	movs	r1, #0
 800ee8e:	5499      	strb	r1, [r3, r2]
        }
    }

    EventMacNvmCtxChanged( );
 800ee90:	f7fe fa7a 	bl	800d388 <EventMacNvmCtxChanged>
    return status;
 800ee94:	2327      	movs	r3, #39	@ 0x27
 800ee96:	18fb      	adds	r3, r7, r3
 800ee98:	781b      	ldrb	r3, [r3, #0]
}
 800ee9a:	0018      	movs	r0, r3
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	b00b      	add	sp, #44	@ 0x2c
 800eea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eea2:	46c0      	nop			@ (mov r8, r8)
 800eea4:	20000da0 	.word	0x20000da0
 800eea8:	20000964 	.word	0x20000964
 800eeac:	0000043d 	.word	0x0000043d
 800eeb0:	00000412 	.word	0x00000412
 800eeb4:	00000411 	.word	0x00000411
 800eeb8:	00000484 	.word	0x00000484
 800eebc:	0000043c 	.word	0x0000043c
 800eec0:	00000481 	.word	0x00000481
 800eec4:	00000414 	.word	0x00000414

0800eec8 <CalcNextV10X>:

#include "region/Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800eec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eeca:	b08b      	sub	sp, #44	@ 0x2c
 800eecc:	af00      	add	r7, sp, #0
 800eece:	60f8      	str	r0, [r7, #12]
 800eed0:	60b9      	str	r1, [r7, #8]
 800eed2:	607a      	str	r2, [r7, #4]
 800eed4:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 800eed6:	2327      	movs	r3, #39	@ 0x27
 800eed8:	18fb      	adds	r3, r7, r3
 800eeda:	2200      	movs	r2, #0
 800eedc:	701a      	strb	r2, [r3, #0]
    int8_t datarate = adrNext->Datarate;
 800eede:	2426      	movs	r4, #38	@ 0x26
 800eee0:	193b      	adds	r3, r7, r4
 800eee2:	68fa      	ldr	r2, [r7, #12]
 800eee4:	7c12      	ldrb	r2, [r2, #16]
 800eee6:	701a      	strb	r2, [r3, #0]
    int8_t txPower = adrNext->TxPower;
 800eee8:	2325      	movs	r3, #37	@ 0x25
 800eeea:	18fb      	adds	r3, r7, r3
 800eeec:	68fa      	ldr	r2, [r7, #12]
 800eeee:	7c52      	ldrb	r2, [r2, #17]
 800eef0:	701a      	strb	r2, [r3, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	689a      	ldr	r2, [r3, #8]
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	795b      	ldrb	r3, [r3, #5]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d100      	bne.n	800ef04 <CalcNextV10X+0x3c>
 800ef02:	e0a5      	b.n	800f050 <CalcNextV10X+0x188>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 800ef04:	2120      	movs	r1, #32
 800ef06:	187b      	adds	r3, r7, r1
 800ef08:	2202      	movs	r2, #2
 800ef0a:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	7c9a      	ldrb	r2, [r3, #18]
 800ef10:	187b      	adds	r3, r7, r1
 800ef12:	709a      	strb	r2, [r3, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	7cdb      	ldrb	r3, [r3, #19]
 800ef18:	187a      	adds	r2, r7, r1
 800ef1a:	0011      	movs	r1, r2
 800ef1c:	0018      	movs	r0, r3
 800ef1e:	f002 fb62 	bl	80115e6 <RegionGetPhyParam>
 800ef22:	0003      	movs	r3, r0
 800ef24:	001a      	movs	r2, r3
 800ef26:	211c      	movs	r1, #28
 800ef28:	187b      	adds	r3, r7, r1
 800ef2a:	601a      	str	r2, [r3, #0]
        minTxDatarate = phyParam.Value;
 800ef2c:	187b      	adds	r3, r7, r1
 800ef2e:	681a      	ldr	r2, [r3, #0]
 800ef30:	2124      	movs	r1, #36	@ 0x24
 800ef32:	187b      	adds	r3, r7, r1
 800ef34:	701a      	strb	r2, [r3, #0]
        datarate = MAX( datarate, minTxDatarate );
 800ef36:	193a      	adds	r2, r7, r4
 800ef38:	187b      	adds	r3, r7, r1
 800ef3a:	1939      	adds	r1, r7, r4
 800ef3c:	780c      	ldrb	r4, [r1, #0]
 800ef3e:	781b      	ldrb	r3, [r3, #0]
 800ef40:	b258      	sxtb	r0, r3
 800ef42:	b261      	sxtb	r1, r4
 800ef44:	4288      	cmp	r0, r1
 800ef46:	da00      	bge.n	800ef4a <CalcNextV10X+0x82>
 800ef48:	1c23      	adds	r3, r4, #0
 800ef4a:	7013      	strb	r3, [r2, #0]

        if( datarate == minTxDatarate )
 800ef4c:	2326      	movs	r3, #38	@ 0x26
 800ef4e:	18fa      	adds	r2, r7, r3
 800ef50:	2324      	movs	r3, #36	@ 0x24
 800ef52:	18fb      	adds	r3, r7, r3
 800ef54:	7812      	ldrb	r2, [r2, #0]
 800ef56:	b252      	sxtb	r2, r2
 800ef58:	781b      	ldrb	r3, [r3, #0]
 800ef5a:	b25b      	sxtb	r3, r3
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d107      	bne.n	800ef70 <CalcNextV10X+0xa8>
        {
            *adrAckCounter = 0;
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	2200      	movs	r2, #0
 800ef64:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 800ef66:	2327      	movs	r3, #39	@ 0x27
 800ef68:	18fb      	adds	r3, r7, r3
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	701a      	strb	r2, [r3, #0]
 800ef6e:	e06f      	b.n	800f050 <CalcNextV10X+0x188>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	689b      	ldr	r3, [r3, #8]
 800ef74:	68fa      	ldr	r2, [r7, #12]
 800ef76:	8992      	ldrh	r2, [r2, #12]
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	d304      	bcc.n	800ef86 <CalcNextV10X+0xbe>
            {
                adrAckReq = true;
 800ef7c:	2327      	movs	r3, #39	@ 0x27
 800ef7e:	18fb      	adds	r3, r7, r3
 800ef80:	2201      	movs	r2, #1
 800ef82:	701a      	strb	r2, [r3, #0]
 800ef84:	e003      	b.n	800ef8e <CalcNextV10X+0xc6>
            }
            else
            {
                adrAckReq = false;
 800ef86:	2327      	movs	r3, #39	@ 0x27
 800ef88:	18fb      	adds	r3, r7, r3
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	701a      	strb	r2, [r3, #0]
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	689b      	ldr	r3, [r3, #8]
 800ef92:	68fa      	ldr	r2, [r7, #12]
 800ef94:	8992      	ldrh	r2, [r2, #12]
 800ef96:	0011      	movs	r1, r2
 800ef98:	68fa      	ldr	r2, [r7, #12]
 800ef9a:	89d2      	ldrh	r2, [r2, #14]
 800ef9c:	188a      	adds	r2, r1, r2
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	d356      	bcc.n	800f050 <CalcNextV10X+0x188>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800efa2:	2420      	movs	r4, #32
 800efa4:	193b      	adds	r3, r7, r4
 800efa6:	2208      	movs	r2, #8
 800efa8:	701a      	strb	r2, [r3, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	7cdb      	ldrb	r3, [r3, #19]
 800efae:	193a      	adds	r2, r7, r4
 800efb0:	0011      	movs	r1, r2
 800efb2:	0018      	movs	r0, r3
 800efb4:	f002 fb17 	bl	80115e6 <RegionGetPhyParam>
 800efb8:	0003      	movs	r3, r0
 800efba:	001a      	movs	r2, r3
 800efbc:	251c      	movs	r5, #28
 800efbe:	197b      	adds	r3, r7, r5
 800efc0:	601a      	str	r2, [r3, #0]
                txPower = phyParam.Value;
 800efc2:	197b      	adds	r3, r7, r5
 800efc4:	681a      	ldr	r2, [r3, #0]
 800efc6:	2325      	movs	r3, #37	@ 0x25
 800efc8:	18fb      	adds	r3, r7, r3
 800efca:	701a      	strb	r2, [r3, #0]

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	689a      	ldr	r2, [r3, #8]
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	89db      	ldrh	r3, [r3, #14]
 800efd4:	0019      	movs	r1, r3
 800efd6:	0010      	movs	r0, r2
 800efd8:	f7f1 f926 	bl	8000228 <__aeabi_uidivmod>
 800efdc:	000b      	movs	r3, r1
 800efde:	2b01      	cmp	r3, #1
 800efe0:	d136      	bne.n	800f050 <CalcNextV10X+0x188>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800efe2:	193b      	adds	r3, r7, r4
 800efe4:	2222      	movs	r2, #34	@ 0x22
 800efe6:	701a      	strb	r2, [r3, #0]
                    getPhy.Datarate = datarate;
 800efe8:	193b      	adds	r3, r7, r4
 800efea:	2626      	movs	r6, #38	@ 0x26
 800efec:	19ba      	adds	r2, r7, r6
 800efee:	7812      	ldrb	r2, [r2, #0]
 800eff0:	705a      	strb	r2, [r3, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	7c9a      	ldrb	r2, [r3, #18]
 800eff6:	193b      	adds	r3, r7, r4
 800eff8:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	7cdb      	ldrb	r3, [r3, #19]
 800effe:	193a      	adds	r2, r7, r4
 800f000:	0011      	movs	r1, r2
 800f002:	0018      	movs	r0, r3
 800f004:	f002 faef 	bl	80115e6 <RegionGetPhyParam>
 800f008:	0003      	movs	r3, r0
 800f00a:	001a      	movs	r2, r3
 800f00c:	197b      	adds	r3, r7, r5
 800f00e:	601a      	str	r2, [r3, #0]
                    datarate = phyParam.Value;
 800f010:	197b      	adds	r3, r7, r5
 800f012:	681a      	ldr	r2, [r3, #0]
 800f014:	19bb      	adds	r3, r7, r6
 800f016:	701a      	strb	r2, [r3, #0]

                    if( datarate == minTxDatarate )
 800f018:	19ba      	adds	r2, r7, r6
 800f01a:	2324      	movs	r3, #36	@ 0x24
 800f01c:	18fb      	adds	r3, r7, r3
 800f01e:	7812      	ldrb	r2, [r2, #0]
 800f020:	b252      	sxtb	r2, r2
 800f022:	781b      	ldrb	r3, [r3, #0]
 800f024:	b25b      	sxtb	r3, r3
 800f026:	429a      	cmp	r2, r3
 800f028:	d112      	bne.n	800f050 <CalcNextV10X+0x188>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 800f02a:	2327      	movs	r3, #39	@ 0x27
 800f02c:	18fb      	adds	r3, r7, r3
 800f02e:	2200      	movs	r2, #0
 800f030:	701a      	strb	r2, [r3, #0]
                        if( adrNext->UpdateChanMask == true )
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	791b      	ldrb	r3, [r3, #4]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d00a      	beq.n	800f050 <CalcNextV10X+0x188>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800f03a:	2114      	movs	r1, #20
 800f03c:	187b      	adds	r3, r7, r1
 800f03e:	2201      	movs	r2, #1
 800f040:	711a      	strb	r2, [r3, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	7cdb      	ldrb	r3, [r3, #19]
 800f046:	187a      	adds	r2, r7, r1
 800f048:	0011      	movs	r1, r2
 800f04a:	0018      	movs	r0, r3
 800f04c:	f002 fb06 	bl	801165c <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	2226      	movs	r2, #38	@ 0x26
 800f054:	18ba      	adds	r2, r7, r2
 800f056:	7812      	ldrb	r2, [r2, #0]
 800f058:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2225      	movs	r2, #37	@ 0x25
 800f05e:	18ba      	adds	r2, r7, r2
 800f060:	7812      	ldrb	r2, [r2, #0]
 800f062:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 800f064:	2327      	movs	r3, #39	@ 0x27
 800f066:	18fb      	adds	r3, r7, r3
 800f068:	781b      	ldrb	r3, [r3, #0]
}
 800f06a:	0018      	movs	r0, r3
 800f06c:	46bd      	mov	sp, r7
 800f06e:	b00b      	add	sp, #44	@ 0x2c
 800f070:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f072 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800f072:	b580      	push	{r7, lr}
 800f074:	b084      	sub	sp, #16
 800f076:	af00      	add	r7, sp, #0
 800f078:	60f8      	str	r0, [r7, #12]
 800f07a:	60b9      	str	r1, [r7, #8]
 800f07c:	607a      	str	r2, [r7, #4]
 800f07e:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	789b      	ldrb	r3, [r3, #2]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d107      	bne.n	800f098 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	687a      	ldr	r2, [r7, #4]
 800f08c:	68b9      	ldr	r1, [r7, #8]
 800f08e:	68f8      	ldr	r0, [r7, #12]
 800f090:	f7ff ff1a 	bl	800eec8 <CalcNextV10X>
 800f094:	0003      	movs	r3, r0
 800f096:	e000      	b.n	800f09a <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 800f098:	2300      	movs	r3, #0
}
 800f09a:	0018      	movs	r0, r3
 800f09c:	46bd      	mov	sp, r7
 800f09e:	b004      	add	sp, #16
 800f0a0:	bd80      	pop	{r7, pc}

0800f0a2 <LoRaMacClassBInit>:
}

#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmEvent classBNvmCtxChanged )
{
 800f0a2:	b580      	push	{r7, lr}
 800f0a4:	b084      	sub	sp, #16
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	60f8      	str	r0, [r7, #12]
 800f0aa:	60b9      	str	r1, [r7, #8]
 800f0ac:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800f0ae:	46c0      	nop			@ (mov r8, r8)
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	b004      	add	sp, #16
 800f0b4:	bd80      	pop	{r7, pc}

0800f0b6 <LoRaMacClassBRestoreNvmCtx>:

bool LoRaMacClassBRestoreNvmCtx( void* classBNvmCtx )
{
 800f0b6:	b580      	push	{r7, lr}
 800f0b8:	b082      	sub	sp, #8
 800f0ba:	af00      	add	r7, sp, #0
 800f0bc:	6078      	str	r0, [r7, #4]
    else
    {
        return false;
    }
#else
    return true;
 800f0be:	2301      	movs	r3, #1
#endif // LORAMAC_CLASSB_ENABLED
}
 800f0c0:	0018      	movs	r0, r3
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	b002      	add	sp, #8
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b082      	sub	sp, #8
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
#ifdef LORAMAC_CLASSB_ENABLED
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	601a      	str	r2, [r3, #0]
    return NULL;
 800f0d6:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f0d8:	0018      	movs	r0, r3
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	b002      	add	sp, #8
 800f0de:	bd80      	pop	{r7, pc}

0800f0e0 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b082      	sub	sp, #8
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	0002      	movs	r2, r0
 800f0e8:	1dfb      	adds	r3, r7, #7
 800f0ea:	701a      	strb	r2, [r3, #0]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800f0ec:	46c0      	nop			@ (mov r8, r8)
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	b002      	add	sp, #8
 800f0f2:	bd80      	pop	{r7, pc}

0800f0f4 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	0002      	movs	r2, r0
 800f0fc:	1dfb      	adds	r3, r7, #7
 800f0fe:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.PingSlotState = pingSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 800f100:	46c0      	nop			@ (mov r8, r8)
 800f102:	46bd      	mov	sp, r7
 800f104:	b002      	add	sp, #8
 800f106:	bd80      	pop	{r7, pc}

0800f108 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b082      	sub	sp, #8
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	0002      	movs	r2, r0
 800f110:	1dfb      	adds	r3, r7, #7
 800f112:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.MulticastSlotState = multicastSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 800f114:	46c0      	nop			@ (mov r8, r8)
 800f116:	46bd      	mov	sp, r7
 800f118:	b002      	add	sp, #8
 800f11a:	bd80      	pop	{r7, pc}

0800f11c <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 800f120:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f122:	0018      	movs	r0, r3
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}

0800f128 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b082      	sub	sp, #8
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800f130:	46c0      	nop			@ (mov r8, r8)
 800f132:	46bd      	mov	sp, r7
 800f134:	b002      	add	sp, #8
 800f136:	bd80      	pop	{r7, pc}

0800f138 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b082      	sub	sp, #8
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800f140:	46c0      	nop			@ (mov r8, r8)
 800f142:	46bd      	mov	sp, r7
 800f144:	b002      	add	sp, #8
 800f146:	bd80      	pop	{r7, pc}

0800f148 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b082      	sub	sp, #8
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800f150:	46c0      	nop			@ (mov r8, r8)
 800f152:	46bd      	mov	sp, r7
 800f154:	b002      	add	sp, #8
 800f156:	bd80      	pop	{r7, pc}

0800f158 <LoRaMacClassBRxBeacon>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b082      	sub	sp, #8
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	000a      	movs	r2, r1
 800f162:	1cbb      	adds	r3, r7, #2
 800f164:	801a      	strh	r2, [r3, #0]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 800f166:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f168:	0018      	movs	r0, r3
 800f16a:	46bd      	mov	sp, r7
 800f16c:	b002      	add	sp, #8
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 800f170:	b580      	push	{r7, lr}
 800f172:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800f174:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f176:	0018      	movs	r0, r3
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}

0800f17c <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800f180:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f182:	0018      	movs	r0, r3
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}

0800f188 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800f18c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f18e:	0018      	movs	r0, r3
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 800f194:	b580      	push	{r7, lr}
 800f196:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800f198:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f19a:	0018      	movs	r0, r3
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}

0800f1a0 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b082      	sub	sp, #8
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	0002      	movs	r2, r0
 800f1a8:	1dfb      	adds	r3, r7, #7
 800f1aa:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800f1ac:	46c0      	nop			@ (mov r8, r8)
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	b002      	add	sp, #8
 800f1b2:	bd80      	pop	{r7, pc}

0800f1b4 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800f1b8:	46c0      	nop			@ (mov r8, r8)
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}

0800f1be <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 800f1be:	b580      	push	{r7, lr}
 800f1c0:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800f1c2:	46c0      	nop			@ (mov r8, r8)
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b082      	sub	sp, #8
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	0002      	movs	r2, r0
 800f1d0:	1dfb      	adds	r3, r7, #7
 800f1d2:	701a      	strb	r2, [r3, #0]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f1d4:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 800f1d6:	0018      	movs	r0, r3
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	b002      	add	sp, #8
 800f1dc:	bd80      	pop	{r7, pc}

0800f1de <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 800f1de:	b580      	push	{r7, lr}
 800f1e0:	b082      	sub	sp, #8
 800f1e2:	af00      	add	r7, sp, #0
 800f1e4:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f1e6:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 800f1e8:	0018      	movs	r0, r3
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	b002      	add	sp, #8
 800f1ee:	bd80      	pop	{r7, pc}

0800f1f0 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f1f8:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 800f1fa:	0018      	movs	r0, r3
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	b002      	add	sp, #8
 800f200:	bd80      	pop	{r7, pc}

0800f202 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 800f202:	b580      	push	{r7, lr}
 800f204:	af00      	add	r7, sp, #0
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800f206:	46c0      	nop			@ (mov r8, r8)
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}

0800f20c <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b082      	sub	sp, #8
 800f210:	af00      	add	r7, sp, #0
 800f212:	0002      	movs	r2, r0
 800f214:	6039      	str	r1, [r7, #0]
 800f216:	1dfb      	adds	r3, r7, #7
 800f218:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
 800f21a:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f21c:	0018      	movs	r0, r3
 800f21e:	46bd      	mov	sp, r7
 800f220:	b002      	add	sp, #8
 800f222:	bd80      	pop	{r7, pc}

0800f224 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b082      	sub	sp, #8
 800f228:	af00      	add	r7, sp, #0
 800f22a:	603a      	str	r2, [r7, #0]
 800f22c:	1dbb      	adds	r3, r7, #6
 800f22e:	1c02      	adds	r2, r0, #0
 800f230:	801a      	strh	r2, [r3, #0]
 800f232:	1d7b      	adds	r3, r7, #5
 800f234:	1c0a      	adds	r2, r1, #0
 800f236:	701a      	strb	r2, [r3, #0]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800f238:	46c0      	nop			@ (mov r8, r8)
 800f23a:	46bd      	mov	sp, r7
 800f23c:	b002      	add	sp, #8
 800f23e:	bd80      	pop	{r7, pc}

0800f240 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 800f240:	b580      	push	{r7, lr}
 800f242:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800f244:	46c0      	nop			@ (mov r8, r8)
 800f246:	46bd      	mov	sp, r7
 800f248:	bd80      	pop	{r7, pc}

0800f24a <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 800f24a:	b580      	push	{r7, lr}
 800f24c:	b082      	sub	sp, #8
 800f24e:	af00      	add	r7, sp, #0
 800f250:	6078      	str	r0, [r7, #4]
        NvmContextChange( );
        return true;
    }
    return false;
#else
    return false;
 800f252:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f254:	0018      	movs	r0, r3
 800f256:	46bd      	mov	sp, r7
 800f258:	b002      	add	sp, #8
 800f25a:	bd80      	pop	{r7, pc}

0800f25c <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b082      	sub	sp, #8
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 800f264:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f266:	0018      	movs	r0, r3
 800f268:	46bd      	mov	sp, r7
 800f26a:	b002      	add	sp, #8
 800f26c:	bd80      	pop	{r7, pc}

0800f26e <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 800f26e:	b580      	push	{r7, lr}
 800f270:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800f272:	46c0      	nop			@ (mov r8, r8)
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800f27c:	46c0      	nop			@ (mov r8, r8)
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}

0800f282 <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 800f282:	b580      	push	{r7, lr}
 800f284:	b084      	sub	sp, #16
 800f286:	af00      	add	r7, sp, #0
 800f288:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800f28e:	230e      	movs	r3, #14
 800f290:	18fb      	adds	r3, r7, r3
 800f292:	2200      	movs	r2, #0
 800f294:	801a      	strh	r2, [r3, #0]
 800f296:	e00f      	b.n	800f2b8 <IsSlotFree+0x36>
    {
        if( mem[size] != 0x00 )
 800f298:	230e      	movs	r3, #14
 800f29a:	18fb      	adds	r3, r7, r3
 800f29c:	881b      	ldrh	r3, [r3, #0]
 800f29e:	68ba      	ldr	r2, [r7, #8]
 800f2a0:	18d3      	adds	r3, r2, r3
 800f2a2:	781b      	ldrb	r3, [r3, #0]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d001      	beq.n	800f2ac <IsSlotFree+0x2a>
        {
            return false;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	e00b      	b.n	800f2c4 <IsSlotFree+0x42>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800f2ac:	210e      	movs	r1, #14
 800f2ae:	187b      	adds	r3, r7, r1
 800f2b0:	881a      	ldrh	r2, [r3, #0]
 800f2b2:	187b      	adds	r3, r7, r1
 800f2b4:	3201      	adds	r2, #1
 800f2b6:	801a      	strh	r2, [r3, #0]
 800f2b8:	230e      	movs	r3, #14
 800f2ba:	18fb      	adds	r3, r7, r3
 800f2bc:	881b      	ldrh	r3, [r3, #0]
 800f2be:	2b0f      	cmp	r3, #15
 800f2c0:	d9ea      	bls.n	800f298 <IsSlotFree+0x16>
        }
    }
    return true;
 800f2c2:	2301      	movs	r3, #1
}
 800f2c4:	0018      	movs	r0, r3
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	b004      	add	sp, #16
 800f2ca:	bd80      	pop	{r7, pc}

0800f2cc <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b082      	sub	sp, #8
 800f2d0:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 800f2d2:	1dfb      	adds	r3, r7, #7
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	701a      	strb	r2, [r3, #0]

    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 800f2d8:	e00a      	b.n	800f2f0 <MallocNewMacCommandSlot+0x24>
    {
        itr++;
 800f2da:	1dfb      	adds	r3, r7, #7
 800f2dc:	781a      	ldrb	r2, [r3, #0]
 800f2de:	1dfb      	adds	r3, r7, #7
 800f2e0:	3201      	adds	r2, #1
 800f2e2:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
 800f2e4:	1dfb      	adds	r3, r7, #7
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	2b0f      	cmp	r3, #15
 800f2ea:	d101      	bne.n	800f2f0 <MallocNewMacCommandSlot+0x24>
        {
            return 0;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	e017      	b.n	800f320 <MallocNewMacCommandSlot+0x54>
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 800f2f0:	1dfb      	adds	r3, r7, #7
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	011b      	lsls	r3, r3, #4
 800f2f6:	3308      	adds	r3, #8
 800f2f8:	001a      	movs	r2, r3
 800f2fa:	4b0b      	ldr	r3, [pc, #44]	@ (800f328 <MallocNewMacCommandSlot+0x5c>)
 800f2fc:	18d3      	adds	r3, r2, r3
 800f2fe:	0018      	movs	r0, r3
 800f300:	f7ff ffbf 	bl	800f282 <IsSlotFree>
 800f304:	0003      	movs	r3, r0
 800f306:	001a      	movs	r2, r3
 800f308:	2301      	movs	r3, #1
 800f30a:	4053      	eors	r3, r2
 800f30c:	b2db      	uxtb	r3, r3
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d1e3      	bne.n	800f2da <MallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
 800f312:	1dfb      	adds	r3, r7, #7
 800f314:	781b      	ldrb	r3, [r3, #0]
 800f316:	011b      	lsls	r3, r3, #4
 800f318:	3308      	adds	r3, #8
 800f31a:	001a      	movs	r2, r3
 800f31c:	4b02      	ldr	r3, [pc, #8]	@ (800f328 <MallocNewMacCommandSlot+0x5c>)
 800f31e:	18d3      	adds	r3, r2, r3
}
 800f320:	0018      	movs	r0, r3
 800f322:	46bd      	mov	sp, r7
 800f324:	b002      	add	sp, #8
 800f326:	bd80      	pop	{r7, pc}
 800f328:	2000101c 	.word	0x2000101c

0800f32c <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b082      	sub	sp, #8
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
    if( slot == 0 )
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d101      	bne.n	800f33e <FreeMacCommandSlot+0x12>
    {
        return false;
 800f33a:	2300      	movs	r3, #0
 800f33c:	e006      	b.n	800f34c <FreeMacCommandSlot+0x20>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2210      	movs	r2, #16
 800f342:	2100      	movs	r1, #0
 800f344:	0018      	movs	r0, r3
 800f346:	f006 f9e5 	bl	8015714 <memset1>

    return true;
 800f34a:	2301      	movs	r3, #1
}
 800f34c:	0018      	movs	r0, r3
 800f34e:	46bd      	mov	sp, r7
 800f350:	b002      	add	sp, #8
 800f352:	bd80      	pop	{r7, pc}

0800f354 <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b082      	sub	sp, #8
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
    if( list == 0 )
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d101      	bne.n	800f366 <LinkedListInit+0x12>
    {
        return false;
 800f362:	2300      	movs	r3, #0
 800f364:	e006      	b.n	800f374 <LinkedListInit+0x20>
    }

    list->First = 0;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2200      	movs	r2, #0
 800f36a:	601a      	str	r2, [r3, #0]
    list->Last = 0;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2200      	movs	r2, #0
 800f370:	605a      	str	r2, [r3, #4]

    return true;
 800f372:	2301      	movs	r3, #1
}
 800f374:	0018      	movs	r0, r3
 800f376:	46bd      	mov	sp, r7
 800f378:	b002      	add	sp, #8
 800f37a:	bd80      	pop	{r7, pc}

0800f37c <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b082      	sub	sp, #8
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d104      	bne.n	800f396 <LinkedListAdd+0x1a>
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d101      	bne.n	800f396 <LinkedListAdd+0x1a>
    {
        return false;
 800f392:	2300      	movs	r3, #0
 800f394:	e015      	b.n	800f3c2 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == 0 )
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d102      	bne.n	800f3a4 <LinkedListAdd+0x28>
    {
        list->First = element;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	683a      	ldr	r2, [r7, #0]
 800f3a2:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	685b      	ldr	r3, [r3, #4]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d003      	beq.n	800f3b4 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	683a      	ldr	r2, [r7, #0]
 800f3b2:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = 0;
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	683a      	ldr	r2, [r7, #0]
 800f3be:	605a      	str	r2, [r3, #4]

    return true;
 800f3c0:	2301      	movs	r3, #1
}
 800f3c2:	0018      	movs	r0, r3
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	b002      	add	sp, #8
 800f3c8:	bd80      	pop	{r7, pc}

0800f3ca <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 800f3ca:	b580      	push	{r7, lr}
 800f3cc:	b084      	sub	sp, #16
 800f3ce:	af00      	add	r7, sp, #0
 800f3d0:	6078      	str	r0, [r7, #4]
 800f3d2:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d104      	bne.n	800f3e4 <LinkedListGetPrevious+0x1a>
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d101      	bne.n	800f3e4 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	e016      	b.n	800f412 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800f3ea:	683a      	ldr	r2, [r7, #0]
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	d00c      	beq.n	800f40c <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800f3f2:	e002      	b.n	800f3fa <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d007      	beq.n	800f410 <LinkedListGetPrevious+0x46>
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	683a      	ldr	r2, [r7, #0]
 800f406:	429a      	cmp	r2, r3
 800f408:	d1f4      	bne.n	800f3f4 <LinkedListGetPrevious+0x2a>
 800f40a:	e001      	b.n	800f410 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 800f40c:	2300      	movs	r3, #0
 800f40e:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 800f410:	68fb      	ldr	r3, [r7, #12]
}
 800f412:	0018      	movs	r0, r3
 800f414:	46bd      	mov	sp, r7
 800f416:	b004      	add	sp, #16
 800f418:	bd80      	pop	{r7, pc}

0800f41a <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 800f41a:	b580      	push	{r7, lr}
 800f41c:	b084      	sub	sp, #16
 800f41e:	af00      	add	r7, sp, #0
 800f420:	6078      	str	r0, [r7, #4]
 800f422:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d104      	bne.n	800f434 <LinkedListRemove+0x1a>
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d101      	bne.n	800f434 <LinkedListRemove+0x1a>
    {
        return false;
 800f430:	2300      	movs	r3, #0
 800f432:	e023      	b.n	800f47c <LinkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800f434:	683a      	ldr	r2, [r7, #0]
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	0011      	movs	r1, r2
 800f43a:	0018      	movs	r0, r3
 800f43c:	f7ff ffc5 	bl	800f3ca <LinkedListGetPrevious>
 800f440:	0003      	movs	r3, r0
 800f442:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	683a      	ldr	r2, [r7, #0]
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d103      	bne.n	800f456 <LinkedListRemove+0x3c>
    {
        list->First = element->Next;
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	681a      	ldr	r2, [r3, #0]
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	685b      	ldr	r3, [r3, #4]
 800f45a:	683a      	ldr	r2, [r7, #0]
 800f45c:	429a      	cmp	r2, r3
 800f45e:	d102      	bne.n	800f466 <LinkedListRemove+0x4c>
    {
        list->Last = PrevElement;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	68fa      	ldr	r2, [r7, #12]
 800f464:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d003      	beq.n	800f474 <LinkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	681a      	ldr	r2, [r3, #0]
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	2200      	movs	r2, #0
 800f478:	601a      	str	r2, [r3, #0]

    return true;
 800f47a:	2301      	movs	r3, #1
}
 800f47c:	0018      	movs	r0, r3
 800f47e:	46bd      	mov	sp, r7
 800f480:	b004      	add	sp, #16
 800f482:	bd80      	pop	{r7, pc}

0800f484 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b082      	sub	sp, #8
 800f488:	af00      	add	r7, sp, #0
 800f48a:	0002      	movs	r2, r0
 800f48c:	1dfb      	adds	r3, r7, #7
 800f48e:	701a      	strb	r2, [r3, #0]
    switch( cid )
 800f490:	1dfb      	adds	r3, r7, #7
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	220a      	movs	r2, #10
 800f496:	429a      	cmp	r2, r3
 800f498:	4192      	sbcs	r2, r2
 800f49a:	4252      	negs	r2, r2
 800f49c:	b2d2      	uxtb	r2, r2
 800f49e:	2a00      	cmp	r2, #0
 800f4a0:	d10c      	bne.n	800f4bc <IsSticky+0x38>
 800f4a2:	22a4      	movs	r2, #164	@ 0xa4
 800f4a4:	00d2      	lsls	r2, r2, #3
 800f4a6:	40da      	lsrs	r2, r3
 800f4a8:	0013      	movs	r3, r2
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	4013      	ands	r3, r2
 800f4ae:	1e5a      	subs	r2, r3, #1
 800f4b0:	4193      	sbcs	r3, r2
 800f4b2:	b2db      	uxtb	r3, r3
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d001      	beq.n	800f4bc <IsSticky+0x38>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
            return true;
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	e000      	b.n	800f4be <IsSticky+0x3a>
        default:
            return false;
 800f4bc:	2300      	movs	r3, #0
    }
}
 800f4be:	0018      	movs	r0, r3
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	b002      	add	sp, #8
 800f4c4:	bd80      	pop	{r7, pc}
	...

0800f4c8 <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
 800f4cc:	4b04      	ldr	r3, [pc, #16]	@ (800f4e0 <NvmCtxCallback+0x18>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d002      	beq.n	800f4da <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
 800f4d4:	4b02      	ldr	r3, [pc, #8]	@ (800f4e0 <NvmCtxCallback+0x18>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	4798      	blx	r3
    }
}
 800f4da:	46c0      	nop			@ (mov r8, r8)
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}
 800f4e0:	20001018 	.word	0x20001018

0800f4e4 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b082      	sub	sp, #8
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 800f4ec:	4b08      	ldr	r3, [pc, #32]	@ (800f510 <LoRaMacCommandsInit+0x2c>)
 800f4ee:	22fc      	movs	r2, #252	@ 0xfc
 800f4f0:	2100      	movs	r1, #0
 800f4f2:	0018      	movs	r0, r3
 800f4f4:	f006 f90e 	bl	8015714 <memset1>

    LinkedListInit( &NvmCtx.MacCommandList );
 800f4f8:	4b05      	ldr	r3, [pc, #20]	@ (800f510 <LoRaMacCommandsInit+0x2c>)
 800f4fa:	0018      	movs	r0, r3
 800f4fc:	f7ff ff2a 	bl	800f354 <LinkedListInit>

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 800f500:	4b04      	ldr	r3, [pc, #16]	@ (800f514 <LoRaMacCommandsInit+0x30>)
 800f502:	687a      	ldr	r2, [r7, #4]
 800f504:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
 800f506:	2300      	movs	r3, #0
}
 800f508:	0018      	movs	r0, r3
 800f50a:	46bd      	mov	sp, r7
 800f50c:	b002      	add	sp, #8
 800f50e:	bd80      	pop	{r7, pc}
 800f510:	2000101c 	.word	0x2000101c
 800f514:	20001018 	.word	0x20001018

0800f518 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b082      	sub	sp, #8
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( commandsNvmCtx != NULL )
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d007      	beq.n	800f536 <LoRaMacCommandsRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 800f526:	6879      	ldr	r1, [r7, #4]
 800f528:	4b05      	ldr	r3, [pc, #20]	@ (800f540 <LoRaMacCommandsRestoreNvmCtx+0x28>)
 800f52a:	22fc      	movs	r2, #252	@ 0xfc
 800f52c:	0018      	movs	r0, r3
 800f52e:	f006 f8b3 	bl	8015698 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 800f532:	2300      	movs	r3, #0
 800f534:	e000      	b.n	800f538 <LoRaMacCommandsRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f536:	2301      	movs	r3, #1
    }
}
 800f538:	0018      	movs	r0, r3
 800f53a:	46bd      	mov	sp, r7
 800f53c:	b002      	add	sp, #8
 800f53e:	bd80      	pop	{r7, pc}
 800f540:	2000101c 	.word	0x2000101c

0800f544 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b082      	sub	sp, #8
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
    *commandsNvmCtxSize = sizeof( NvmCtx );
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	22fc      	movs	r2, #252	@ 0xfc
 800f550:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 800f552:	4b02      	ldr	r3, [pc, #8]	@ (800f55c <LoRaMacCommandsGetNvmCtx+0x18>)
}
 800f554:	0018      	movs	r0, r3
 800f556:	46bd      	mov	sp, r7
 800f558:	b002      	add	sp, #8
 800f55a:	bd80      	pop	{r7, pc}
 800f55c:	2000101c 	.word	0x2000101c

0800f560 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800f560:	b590      	push	{r4, r7, lr}
 800f562:	b087      	sub	sp, #28
 800f564:	af00      	add	r7, sp, #0
 800f566:	60b9      	str	r1, [r7, #8]
 800f568:	607a      	str	r2, [r7, #4]
 800f56a:	230f      	movs	r3, #15
 800f56c:	18fb      	adds	r3, r7, r3
 800f56e:	1c02      	adds	r2, r0, #0
 800f570:	701a      	strb	r2, [r3, #0]
    if( payload == 0 )
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d101      	bne.n	800f57c <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f578:	2301      	movs	r3, #1
 800f57a:	e03c      	b.n	800f5f6 <LoRaMacCommandsAddCmd+0x96>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800f57c:	f7ff fea6 	bl	800f2cc <MallocNewMacCommandSlot>
 800f580:	0003      	movs	r3, r0
 800f582:	617b      	str	r3, [r7, #20]

    if( newCmd == 0 )
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d101      	bne.n	800f58e <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800f58a:	2302      	movs	r3, #2
 800f58c:	e033      	b.n	800f5f6 <LoRaMacCommandsAddCmd+0x96>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 800f58e:	697a      	ldr	r2, [r7, #20]
 800f590:	4b1b      	ldr	r3, [pc, #108]	@ (800f600 <LoRaMacCommandsAddCmd+0xa0>)
 800f592:	0011      	movs	r1, r2
 800f594:	0018      	movs	r0, r3
 800f596:	f7ff fef1 	bl	800f37c <LinkedListAdd>
 800f59a:	0003      	movs	r3, r0
 800f59c:	001a      	movs	r2, r3
 800f59e:	2301      	movs	r3, #1
 800f5a0:	4053      	eors	r3, r2
 800f5a2:	b2db      	uxtb	r3, r3
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d001      	beq.n	800f5ac <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
 800f5a8:	2305      	movs	r3, #5
 800f5aa:	e024      	b.n	800f5f6 <LoRaMacCommandsAddCmd+0x96>
    }

    // Set Values
    newCmd->CID = cid;
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	240f      	movs	r4, #15
 800f5b0:	193a      	adds	r2, r7, r4
 800f5b2:	7812      	ldrb	r2, [r2, #0]
 800f5b4:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	687a      	ldr	r2, [r7, #4]
 800f5ba:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800f5bc:	697b      	ldr	r3, [r7, #20]
 800f5be:	3305      	adds	r3, #5
 800f5c0:	687a      	ldr	r2, [r7, #4]
 800f5c2:	b292      	uxth	r2, r2
 800f5c4:	68b9      	ldr	r1, [r7, #8]
 800f5c6:	0018      	movs	r0, r3
 800f5c8:	f006 f866 	bl	8015698 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800f5cc:	193b      	adds	r3, r7, r4
 800f5ce:	781b      	ldrb	r3, [r3, #0]
 800f5d0:	0018      	movs	r0, r3
 800f5d2:	f7ff ff57 	bl	800f484 <IsSticky>
 800f5d6:	0003      	movs	r3, r0
 800f5d8:	001a      	movs	r2, r3
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800f5de:	4b08      	ldr	r3, [pc, #32]	@ (800f600 <LoRaMacCommandsAddCmd+0xa0>)
 800f5e0:	22f8      	movs	r2, #248	@ 0xf8
 800f5e2:	589a      	ldr	r2, [r3, r2]
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	18d3      	adds	r3, r2, r3
 800f5e8:	1c5a      	adds	r2, r3, #1
 800f5ea:	4b05      	ldr	r3, [pc, #20]	@ (800f600 <LoRaMacCommandsAddCmd+0xa0>)
 800f5ec:	21f8      	movs	r1, #248	@ 0xf8
 800f5ee:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
 800f5f0:	f7ff ff6a 	bl	800f4c8 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800f5f4:	2300      	movs	r3, #0
}
 800f5f6:	0018      	movs	r0, r3
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	b007      	add	sp, #28
 800f5fc:	bd90      	pop	{r4, r7, pc}
 800f5fe:	46c0      	nop			@ (mov r8, r8)
 800f600:	2000101c 	.word	0x2000101c

0800f604 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b082      	sub	sp, #8
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d101      	bne.n	800f616 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f612:	2301      	movs	r3, #1
 800f614:	e028      	b.n	800f668 <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 800f616:	687a      	ldr	r2, [r7, #4]
 800f618:	4b15      	ldr	r3, [pc, #84]	@ (800f670 <LoRaMacCommandsRemoveCmd+0x6c>)
 800f61a:	0011      	movs	r1, r2
 800f61c:	0018      	movs	r0, r3
 800f61e:	f7ff fefc 	bl	800f41a <LinkedListRemove>
 800f622:	0003      	movs	r3, r0
 800f624:	001a      	movs	r2, r3
 800f626:	2301      	movs	r3, #1
 800f628:	4053      	eors	r3, r2
 800f62a:	b2db      	uxtb	r3, r3
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d001      	beq.n	800f634 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800f630:	2303      	movs	r3, #3
 800f632:	e019      	b.n	800f668 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800f634:	4b0e      	ldr	r3, [pc, #56]	@ (800f670 <LoRaMacCommandsRemoveCmd+0x6c>)
 800f636:	22f8      	movs	r2, #248	@ 0xf8
 800f638:	589a      	ldr	r2, [r3, r2]
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	689b      	ldr	r3, [r3, #8]
 800f63e:	1ad3      	subs	r3, r2, r3
 800f640:	1e5a      	subs	r2, r3, #1
 800f642:	4b0b      	ldr	r3, [pc, #44]	@ (800f670 <LoRaMacCommandsRemoveCmd+0x6c>)
 800f644:	21f8      	movs	r1, #248	@ 0xf8
 800f646:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	0018      	movs	r0, r3
 800f64c:	f7ff fe6e 	bl	800f32c <FreeMacCommandSlot>
 800f650:	0003      	movs	r3, r0
 800f652:	001a      	movs	r2, r3
 800f654:	2301      	movs	r3, #1
 800f656:	4053      	eors	r3, r2
 800f658:	b2db      	uxtb	r3, r3
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d001      	beq.n	800f662 <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
 800f65e:	2305      	movs	r3, #5
 800f660:	e002      	b.n	800f668 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
 800f662:	f7ff ff31 	bl	800f4c8 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800f666:	2300      	movs	r3, #0
}
 800f668:	0018      	movs	r0, r3
 800f66a:	46bd      	mov	sp, r7
 800f66c:	b002      	add	sp, #8
 800f66e:	bd80      	pop	{r7, pc}
 800f670:	2000101c 	.word	0x2000101c

0800f674 <LoRaMacCommandsRemoveNoneStickyCmds>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b082      	sub	sp, #8
 800f678:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800f67a:	4b11      	ldr	r3, [pc, #68]	@ (800f6c0 <LoRaMacCommandsRemoveNoneStickyCmds+0x4c>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 800f680:	e013      	b.n	800f6aa <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
    {
        if( curElement->IsSticky == false )
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	7b1b      	ldrb	r3, [r3, #12]
 800f686:	2201      	movs	r2, #1
 800f688:	4053      	eors	r3, r2
 800f68a:	b2db      	uxtb	r3, r3
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d009      	beq.n	800f6a4 <LoRaMacCommandsRemoveNoneStickyCmds+0x30>
        {
            nexElement = curElement->Next;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	0018      	movs	r0, r3
 800f69a:	f7ff ffb3 	bl	800f604 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	607b      	str	r3, [r7, #4]
 800f6a2:	e002      	b.n	800f6aa <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
        }
        else
        {
            curElement = curElement->Next;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d1e8      	bne.n	800f682 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    NvmCtxCallback( );
 800f6b0:	f7ff ff0a 	bl	800f4c8 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800f6b4:	2300      	movs	r3, #0
}
 800f6b6:	0018      	movs	r0, r3
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	b002      	add	sp, #8
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	46c0      	nop			@ (mov r8, r8)
 800f6c0:	2000101c 	.word	0x2000101c

0800f6c4 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b082      	sub	sp, #8
 800f6c8:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800f6ca:	4b0f      	ldr	r3, [pc, #60]	@ (800f708 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 800f6d0:	e00f      	b.n	800f6f2 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	791b      	ldrb	r3, [r3, #4]
 800f6dc:	0018      	movs	r0, r3
 800f6de:	f7ff fed1 	bl	800f484 <IsSticky>
 800f6e2:	1e03      	subs	r3, r0, #0
 800f6e4:	d003      	beq.n	800f6ee <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	0018      	movs	r0, r3
 800f6ea:	f7ff ff8b 	bl	800f604 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d1ec      	bne.n	800f6d2 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
 800f6f8:	f7ff fee6 	bl	800f4c8 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800f6fc:	2300      	movs	r3, #0
}
 800f6fe:	0018      	movs	r0, r3
 800f700:	46bd      	mov	sp, r7
 800f702:	b002      	add	sp, #8
 800f704:	bd80      	pop	{r7, pc}
 800f706:	46c0      	nop			@ (mov r8, r8)
 800f708:	2000101c 	.word	0x2000101c

0800f70c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b082      	sub	sp, #8
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d101      	bne.n	800f71e <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f71a:	2301      	movs	r3, #1
 800f71c:	e005      	b.n	800f72a <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
 800f71e:	4b05      	ldr	r3, [pc, #20]	@ (800f734 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 800f720:	22f8      	movs	r2, #248	@ 0xf8
 800f722:	589a      	ldr	r2, [r3, r2]
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800f728:	2300      	movs	r3, #0
}
 800f72a:	0018      	movs	r0, r3
 800f72c:	46bd      	mov	sp, r7
 800f72e:	b002      	add	sp, #8
 800f730:	bd80      	pop	{r7, pc}
 800f732:	46c0      	nop			@ (mov r8, r8)
 800f734:	2000101c 	.word	0x2000101c

0800f738 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800f738:	b590      	push	{r4, r7, lr}
 800f73a:	b087      	sub	sp, #28
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	60f8      	str	r0, [r7, #12]
 800f740:	60b9      	str	r1, [r7, #8]
 800f742:	607a      	str	r2, [r7, #4]
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d002      	beq.n	800f750 <LoRaMacCommandsSerializeCmds+0x18>
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d101      	bne.n	800f754 <LoRaMacCommandsSerializeCmds+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f750:	2301      	movs	r3, #1
 800f752:	e039      	b.n	800f7c8 <LoRaMacCommandsSerializeCmds+0x90>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 800f754:	4b1e      	ldr	r3, [pc, #120]	@ (800f7d0 <LoRaMacCommandsSerializeCmds+0x98>)
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	617b      	str	r3, [r7, #20]
    uint8_t itr = 0;
 800f75a:	2313      	movs	r3, #19
 800f75c:	18fb      	adds	r3, r7, r3
 800f75e:	2200      	movs	r2, #0
 800f760:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800f762:	e02b      	b.n	800f7bc <LoRaMacCommandsSerializeCmds+0x84>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800f764:	2413      	movs	r4, #19
 800f766:	193b      	adds	r3, r7, r4
 800f768:	781b      	ldrb	r3, [r3, #0]
 800f76a:	68fa      	ldr	r2, [r7, #12]
 800f76c:	1ad2      	subs	r2, r2, r3
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	689b      	ldr	r3, [r3, #8]
 800f772:	3301      	adds	r3, #1
 800f774:	429a      	cmp	r2, r3
 800f776:	d325      	bcc.n	800f7c4 <LoRaMacCommandsSerializeCmds+0x8c>
        {
            buffer[itr++] = curElement->CID;
 800f778:	193b      	adds	r3, r7, r4
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	193a      	adds	r2, r7, r4
 800f77e:	1c59      	adds	r1, r3, #1
 800f780:	7011      	strb	r1, [r2, #0]
 800f782:	001a      	movs	r2, r3
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	189b      	adds	r3, r3, r2
 800f788:	697a      	ldr	r2, [r7, #20]
 800f78a:	7912      	ldrb	r2, [r2, #4]
 800f78c:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800f78e:	193b      	adds	r3, r7, r4
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	687a      	ldr	r2, [r7, #4]
 800f794:	18d0      	adds	r0, r2, r3
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	1d59      	adds	r1, r3, #5
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	689b      	ldr	r3, [r3, #8]
 800f79e:	b29b      	uxth	r3, r3
 800f7a0:	001a      	movs	r2, r3
 800f7a2:	f005 ff79 	bl	8015698 <memcpy1>
            itr = itr + curElement->PayloadSize;
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	689b      	ldr	r3, [r3, #8]
 800f7aa:	b2d9      	uxtb	r1, r3
 800f7ac:	193b      	adds	r3, r7, r4
 800f7ae:	193a      	adds	r2, r7, r4
 800f7b0:	7812      	ldrb	r2, [r2, #0]
 800f7b2:	188a      	adds	r2, r1, r2
 800f7b4:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	617b      	str	r3, [r7, #20]
    while( curElement != NULL )
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d1d0      	bne.n	800f764 <LoRaMacCommandsSerializeCmds+0x2c>
 800f7c2:	e000      	b.n	800f7c6 <LoRaMacCommandsSerializeCmds+0x8e>
            break;
 800f7c4:	46c0      	nop			@ (mov r8, r8)
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800f7c6:	2300      	movs	r3, #0
}
 800f7c8:	0018      	movs	r0, r3
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	b007      	add	sp, #28
 800f7ce:	bd90      	pop	{r4, r7, pc}
 800f7d0:	2000101c 	.word	0x2000101c

0800f7d4 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b084      	sub	sp, #16
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d101      	bne.n	800f7e6 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	e016      	b.n	800f814 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 800f7e6:	4b0d      	ldr	r3, [pc, #52]	@ (800f81c <LoRaMacCommandsStickyCmdsPending+0x48>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800f7f2:	e00b      	b.n	800f80c <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	7b1b      	ldrb	r3, [r3, #12]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d004      	beq.n	800f806 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2201      	movs	r2, #1
 800f800:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800f802:	2300      	movs	r3, #0
 800f804:	e006      	b.n	800f814 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d1f0      	bne.n	800f7f4 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800f812:	2300      	movs	r3, #0
}
 800f814:	0018      	movs	r0, r3
 800f816:	46bd      	mov	sp, r7
 800f818:	b004      	add	sp, #16
 800f81a:	bd80      	pop	{r7, pc}
 800f81c:	2000101c 	.word	0x2000101c

0800f820 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b082      	sub	sp, #8
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800f828:	4b08      	ldr	r3, [pc, #32]	@ (800f84c <IncreaseBufferPointer+0x2c>)
 800f82a:	691b      	ldr	r3, [r3, #16]
 800f82c:	3310      	adds	r3, #16
 800f82e:	687a      	ldr	r2, [r7, #4]
 800f830:	429a      	cmp	r2, r3
 800f832:	d103      	bne.n	800f83c <IncreaseBufferPointer+0x1c>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800f834:	4b05      	ldr	r3, [pc, #20]	@ (800f84c <IncreaseBufferPointer+0x2c>)
 800f836:	691b      	ldr	r3, [r3, #16]
 800f838:	607b      	str	r3, [r7, #4]
 800f83a:	e002      	b.n	800f842 <IncreaseBufferPointer+0x22>
    }
    else
    {
        // Increase
        bufferPointer++;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	3304      	adds	r3, #4
 800f840:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 800f842:	687b      	ldr	r3, [r7, #4]
}
 800f844:	0018      	movs	r0, r3
 800f846:	46bd      	mov	sp, r7
 800f848:	b002      	add	sp, #8
 800f84a:	bd80      	pop	{r7, pc}
 800f84c:	20001130 	.word	0x20001130

0800f850 <GetElement>:
    }
    return bufferPointer;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b086      	sub	sp, #24
 800f854:	af00      	add	r7, sp, #0
 800f856:	60b9      	str	r1, [r7, #8]
 800f858:	607a      	str	r2, [r7, #4]
 800f85a:	230f      	movs	r3, #15
 800f85c:	18fb      	adds	r3, r7, r3
 800f85e:	1c02      	adds	r2, r0, #0
 800f860:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	617b      	str	r3, [r7, #20]

    while( element != bufferEnd )
 800f866:	e00e      	b.n	800f886 <GetElement+0x36>
    {
        if( element->Request == request )
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	781b      	ldrb	r3, [r3, #0]
 800f86c:	220f      	movs	r2, #15
 800f86e:	18ba      	adds	r2, r7, r2
 800f870:	7812      	ldrb	r2, [r2, #0]
 800f872:	429a      	cmp	r2, r3
 800f874:	d101      	bne.n	800f87a <GetElement+0x2a>
        {
            // We have found the element
            return element;
 800f876:	697b      	ldr	r3, [r7, #20]
 800f878:	e00a      	b.n	800f890 <GetElement+0x40>
        }
        else
        {
            element = IncreaseBufferPointer( element );
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	0018      	movs	r0, r3
 800f87e:	f7ff ffcf 	bl	800f820 <IncreaseBufferPointer>
 800f882:	0003      	movs	r3, r0
 800f884:	617b      	str	r3, [r7, #20]
    while( element != bufferEnd )
 800f886:	697a      	ldr	r2, [r7, #20]
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	429a      	cmp	r2, r3
 800f88c:	d1ec      	bne.n	800f868 <GetElement+0x18>
        }
    }
    return NULL;
 800f88e:	2300      	movs	r3, #0
}
 800f890:	0018      	movs	r0, r3
 800f892:	46bd      	mov	sp, r7
 800f894:	b006      	add	sp, #24
 800f896:	bd80      	pop	{r7, pc}

0800f898 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b082      	sub	sp, #8
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	6039      	str	r1, [r7, #0]
    ConfirmQueueCtx.Primitives = primitives;
 800f8a2:	4b13      	ldr	r3, [pc, #76]	@ (800f8f0 <LoRaMacConfirmQueueInit+0x58>)
 800f8a4:	687a      	ldr	r2, [r7, #4]
 800f8a6:	601a      	str	r2, [r3, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800f8a8:	4b11      	ldr	r3, [pc, #68]	@ (800f8f0 <LoRaMacConfirmQueueInit+0x58>)
 800f8aa:	4a12      	ldr	r2, [pc, #72]	@ (800f8f4 <LoRaMacConfirmQueueInit+0x5c>)
 800f8ac:	611a      	str	r2, [r3, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800f8ae:	4b10      	ldr	r3, [pc, #64]	@ (800f8f0 <LoRaMacConfirmQueueInit+0x58>)
 800f8b0:	691b      	ldr	r3, [r3, #16]
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	751a      	strb	r2, [r3, #20]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800f8b6:	4b0e      	ldr	r3, [pc, #56]	@ (800f8f0 <LoRaMacConfirmQueueInit+0x58>)
 800f8b8:	691b      	ldr	r3, [r3, #16]
 800f8ba:	001a      	movs	r2, r3
 800f8bc:	4b0c      	ldr	r3, [pc, #48]	@ (800f8f0 <LoRaMacConfirmQueueInit+0x58>)
 800f8be:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800f8c0:	4b0b      	ldr	r3, [pc, #44]	@ (800f8f0 <LoRaMacConfirmQueueInit+0x58>)
 800f8c2:	691b      	ldr	r3, [r3, #16]
 800f8c4:	001a      	movs	r2, r3
 800f8c6:	4b0a      	ldr	r3, [pc, #40]	@ (800f8f0 <LoRaMacConfirmQueueInit+0x58>)
 800f8c8:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 800f8ca:	4b09      	ldr	r3, [pc, #36]	@ (800f8f0 <LoRaMacConfirmQueueInit+0x58>)
 800f8cc:	691b      	ldr	r3, [r3, #16]
 800f8ce:	2214      	movs	r2, #20
 800f8d0:	21ff      	movs	r1, #255	@ 0xff
 800f8d2:	0018      	movs	r0, r3
 800f8d4:	f005 ff1e 	bl	8015714 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f8d8:	4b05      	ldr	r3, [pc, #20]	@ (800f8f0 <LoRaMacConfirmQueueInit+0x58>)
 800f8da:	691b      	ldr	r3, [r3, #16]
 800f8dc:	2201      	movs	r2, #1
 800f8de:	755a      	strb	r2, [r3, #21]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 800f8e0:	4b03      	ldr	r3, [pc, #12]	@ (800f8f0 <LoRaMacConfirmQueueInit+0x58>)
 800f8e2:	683a      	ldr	r2, [r7, #0]
 800f8e4:	60da      	str	r2, [r3, #12]
}
 800f8e6:	46c0      	nop			@ (mov r8, r8)
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	b002      	add	sp, #8
 800f8ec:	bd80      	pop	{r7, pc}
 800f8ee:	46c0      	nop			@ (mov r8, r8)
 800f8f0:	20001130 	.word	0x20001130
 800f8f4:	20001118 	.word	0x20001118

0800f8f8 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b082      	sub	sp, #8
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d007      	beq.n	800f916 <LoRaMacConfirmQueueRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 800f906:	6879      	ldr	r1, [r7, #4]
 800f908:	4b05      	ldr	r3, [pc, #20]	@ (800f920 <LoRaMacConfirmQueueRestoreNvmCtx+0x28>)
 800f90a:	2216      	movs	r2, #22
 800f90c:	0018      	movs	r0, r3
 800f90e:	f005 fec3 	bl	8015698 <memcpy1>
        return true;
 800f912:	2301      	movs	r3, #1
 800f914:	e000      	b.n	800f918 <LoRaMacConfirmQueueRestoreNvmCtx+0x20>
    }
    else
    {
        return false;
 800f916:	2300      	movs	r3, #0
    }
}
 800f918:	0018      	movs	r0, r3
 800f91a:	46bd      	mov	sp, r7
 800f91c:	b002      	add	sp, #8
 800f91e:	bd80      	pop	{r7, pc}
 800f920:	20001118 	.word	0x20001118

0800f924 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b082      	sub	sp, #8
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2216      	movs	r2, #22
 800f930:	601a      	str	r2, [r3, #0]
    return &ConfirmQueueNvmCtx;
 800f932:	4b02      	ldr	r3, [pc, #8]	@ (800f93c <LoRaMacConfirmQueueGetNvmCtx+0x18>)
}
 800f934:	0018      	movs	r0, r3
 800f936:	46bd      	mov	sp, r7
 800f938:	b002      	add	sp, #8
 800f93a:	bd80      	pop	{r7, pc}
 800f93c:	20001118 	.word	0x20001118

0800f940 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b082      	sub	sp, #8
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800f948:	4b16      	ldr	r3, [pc, #88]	@ (800f9a4 <LoRaMacConfirmQueueAdd+0x64>)
 800f94a:	691b      	ldr	r3, [r3, #16]
 800f94c:	7d1b      	ldrb	r3, [r3, #20]
 800f94e:	2b04      	cmp	r3, #4
 800f950:	d901      	bls.n	800f956 <LoRaMacConfirmQueueAdd+0x16>
    {
        // Protect the buffer against overwrites
        return false;
 800f952:	2300      	movs	r3, #0
 800f954:	e021      	b.n	800f99a <LoRaMacConfirmQueueAdd+0x5a>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800f956:	4b13      	ldr	r3, [pc, #76]	@ (800f9a4 <LoRaMacConfirmQueueAdd+0x64>)
 800f958:	689b      	ldr	r3, [r3, #8]
 800f95a:	687a      	ldr	r2, [r7, #4]
 800f95c:	7812      	ldrb	r2, [r2, #0]
 800f95e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800f960:	4b10      	ldr	r3, [pc, #64]	@ (800f9a4 <LoRaMacConfirmQueueAdd+0x64>)
 800f962:	689b      	ldr	r3, [r3, #8]
 800f964:	687a      	ldr	r2, [r7, #4]
 800f966:	7852      	ldrb	r2, [r2, #1]
 800f968:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800f96a:	4b0e      	ldr	r3, [pc, #56]	@ (800f9a4 <LoRaMacConfirmQueueAdd+0x64>)
 800f96c:	689b      	ldr	r3, [r3, #8]
 800f96e:	687a      	ldr	r2, [r7, #4]
 800f970:	78d2      	ldrb	r2, [r2, #3]
 800f972:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800f974:	4b0b      	ldr	r3, [pc, #44]	@ (800f9a4 <LoRaMacConfirmQueueAdd+0x64>)
 800f976:	689b      	ldr	r3, [r3, #8]
 800f978:	2200      	movs	r2, #0
 800f97a:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 800f97c:	4b09      	ldr	r3, [pc, #36]	@ (800f9a4 <LoRaMacConfirmQueueAdd+0x64>)
 800f97e:	691b      	ldr	r3, [r3, #16]
 800f980:	7d1a      	ldrb	r2, [r3, #20]
 800f982:	3201      	adds	r2, #1
 800f984:	b2d2      	uxtb	r2, r2
 800f986:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800f988:	4b06      	ldr	r3, [pc, #24]	@ (800f9a4 <LoRaMacConfirmQueueAdd+0x64>)
 800f98a:	689b      	ldr	r3, [r3, #8]
 800f98c:	0018      	movs	r0, r3
 800f98e:	f7ff ff47 	bl	800f820 <IncreaseBufferPointer>
 800f992:	0002      	movs	r2, r0
 800f994:	4b03      	ldr	r3, [pc, #12]	@ (800f9a4 <LoRaMacConfirmQueueAdd+0x64>)
 800f996:	609a      	str	r2, [r3, #8]

    return true;
 800f998:	2301      	movs	r3, #1
}
 800f99a:	0018      	movs	r0, r3
 800f99c:	46bd      	mov	sp, r7
 800f99e:	b002      	add	sp, #8
 800f9a0:	bd80      	pop	{r7, pc}
 800f9a2:	46c0      	nop			@ (mov r8, r8)
 800f9a4:	20001130 	.word	0x20001130

0800f9a8 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 800f9ac:	4b0c      	ldr	r3, [pc, #48]	@ (800f9e0 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 800f9ae:	691b      	ldr	r3, [r3, #16]
 800f9b0:	7d1b      	ldrb	r3, [r3, #20]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d101      	bne.n	800f9ba <LoRaMacConfirmQueueRemoveFirst+0x12>
    {
        return false;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	e00e      	b.n	800f9d8 <LoRaMacConfirmQueueRemoveFirst+0x30>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 800f9ba:	4b09      	ldr	r3, [pc, #36]	@ (800f9e0 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 800f9bc:	691b      	ldr	r3, [r3, #16]
 800f9be:	7d1a      	ldrb	r2, [r3, #20]
 800f9c0:	3a01      	subs	r2, #1
 800f9c2:	b2d2      	uxtb	r2, r2
 800f9c4:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800f9c6:	4b06      	ldr	r3, [pc, #24]	@ (800f9e0 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 800f9c8:	685b      	ldr	r3, [r3, #4]
 800f9ca:	0018      	movs	r0, r3
 800f9cc:	f7ff ff28 	bl	800f820 <IncreaseBufferPointer>
 800f9d0:	0002      	movs	r2, r0
 800f9d2:	4b03      	ldr	r3, [pc, #12]	@ (800f9e0 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 800f9d4:	605a      	str	r2, [r3, #4]

    return true;
 800f9d6:	2301      	movs	r3, #1
}
 800f9d8:	0018      	movs	r0, r3
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
 800f9de:	46c0      	nop			@ (mov r8, r8)
 800f9e0:	20001130 	.word	0x20001130

0800f9e4 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b084      	sub	sp, #16
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	0002      	movs	r2, r0
 800f9ec:	1dfb      	adds	r3, r7, #7
 800f9ee:	701a      	strb	r2, [r3, #0]
 800f9f0:	1dbb      	adds	r3, r7, #6
 800f9f2:	1c0a      	adds	r2, r1, #0
 800f9f4:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800f9fa:	4b0f      	ldr	r3, [pc, #60]	@ (800fa38 <LoRaMacConfirmQueueSetStatus+0x54>)
 800f9fc:	691b      	ldr	r3, [r3, #16]
 800f9fe:	7d1b      	ldrb	r3, [r3, #20]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d014      	beq.n	800fa2e <LoRaMacConfirmQueueSetStatus+0x4a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800fa04:	4b0c      	ldr	r3, [pc, #48]	@ (800fa38 <LoRaMacConfirmQueueSetStatus+0x54>)
 800fa06:	6859      	ldr	r1, [r3, #4]
 800fa08:	4b0b      	ldr	r3, [pc, #44]	@ (800fa38 <LoRaMacConfirmQueueSetStatus+0x54>)
 800fa0a:	689a      	ldr	r2, [r3, #8]
 800fa0c:	1dbb      	adds	r3, r7, #6
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	0018      	movs	r0, r3
 800fa12:	f7ff ff1d 	bl	800f850 <GetElement>
 800fa16:	0003      	movs	r3, r0
 800fa18:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d006      	beq.n	800fa2e <LoRaMacConfirmQueueSetStatus+0x4a>
        {
            element->Status = status;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	1dfa      	adds	r2, r7, #7
 800fa24:	7812      	ldrb	r2, [r2, #0]
 800fa26:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	2201      	movs	r2, #1
 800fa2c:	709a      	strb	r2, [r3, #2]
        }
    }
}
 800fa2e:	46c0      	nop			@ (mov r8, r8)
 800fa30:	46bd      	mov	sp, r7
 800fa32:	b004      	add	sp, #16
 800fa34:	bd80      	pop	{r7, pc}
 800fa36:	46c0      	nop			@ (mov r8, r8)
 800fa38:	20001130 	.word	0x20001130

0800fa3c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b084      	sub	sp, #16
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	0002      	movs	r2, r0
 800fa44:	1dfb      	adds	r3, r7, #7
 800fa46:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800fa4c:	4b0d      	ldr	r3, [pc, #52]	@ (800fa84 <LoRaMacConfirmQueueGetStatus+0x48>)
 800fa4e:	691b      	ldr	r3, [r3, #16]
 800fa50:	7d1b      	ldrb	r3, [r3, #20]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d010      	beq.n	800fa78 <LoRaMacConfirmQueueGetStatus+0x3c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800fa56:	4b0b      	ldr	r3, [pc, #44]	@ (800fa84 <LoRaMacConfirmQueueGetStatus+0x48>)
 800fa58:	6859      	ldr	r1, [r3, #4]
 800fa5a:	4b0a      	ldr	r3, [pc, #40]	@ (800fa84 <LoRaMacConfirmQueueGetStatus+0x48>)
 800fa5c:	689a      	ldr	r2, [r3, #8]
 800fa5e:	1dfb      	adds	r3, r7, #7
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	0018      	movs	r0, r3
 800fa64:	f7ff fef4 	bl	800f850 <GetElement>
 800fa68:	0003      	movs	r3, r0
 800fa6a:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d002      	beq.n	800fa78 <LoRaMacConfirmQueueGetStatus+0x3c>
        {
            return element->Status;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	785b      	ldrb	r3, [r3, #1]
 800fa76:	e000      	b.n	800fa7a <LoRaMacConfirmQueueGetStatus+0x3e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fa78:	2301      	movs	r3, #1
}
 800fa7a:	0018      	movs	r0, r3
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	b004      	add	sp, #16
 800fa80:	bd80      	pop	{r7, pc}
 800fa82:	46c0      	nop			@ (mov r8, r8)
 800fa84:	20001130 	.word	0x20001130

0800fa88 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b084      	sub	sp, #16
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	0002      	movs	r2, r0
 800fa90:	1dfb      	adds	r3, r7, #7
 800fa92:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800fa94:	4b14      	ldr	r3, [pc, #80]	@ (800fae8 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 800fa9a:	4b13      	ldr	r3, [pc, #76]	@ (800fae8 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 800fa9c:	691b      	ldr	r3, [r3, #16]
 800fa9e:	1dfa      	adds	r2, r7, #7
 800faa0:	7812      	ldrb	r2, [r2, #0]
 800faa2:	755a      	strb	r2, [r3, #21]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800faa4:	4b10      	ldr	r3, [pc, #64]	@ (800fae8 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 800faa6:	691b      	ldr	r3, [r3, #16]
 800faa8:	7d1b      	ldrb	r3, [r3, #20]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d018      	beq.n	800fae0 <LoRaMacConfirmQueueSetStatusCmn+0x58>
    {
        do
        {
            element->Status = status;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	1dfa      	adds	r2, r7, #7
 800fab2:	7812      	ldrb	r2, [r2, #0]
 800fab4:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	78db      	ldrb	r3, [r3, #3]
 800faba:	2201      	movs	r2, #1
 800fabc:	4053      	eors	r3, r2
 800fabe:	b2db      	uxtb	r3, r3
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d002      	beq.n	800faca <LoRaMacConfirmQueueSetStatusCmn+0x42>
            {
                element->ReadyToHandle = true;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	2201      	movs	r2, #1
 800fac8:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	0018      	movs	r0, r3
 800face:	f7ff fea7 	bl	800f820 <IncreaseBufferPointer>
 800fad2:	0003      	movs	r3, r0
 800fad4:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 800fad6:	4b04      	ldr	r3, [pc, #16]	@ (800fae8 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 800fad8:	689b      	ldr	r3, [r3, #8]
 800fada:	68fa      	ldr	r2, [r7, #12]
 800fadc:	429a      	cmp	r2, r3
 800fade:	d1e6      	bne.n	800faae <LoRaMacConfirmQueueSetStatusCmn+0x26>
    }
}
 800fae0:	46c0      	nop			@ (mov r8, r8)
 800fae2:	46bd      	mov	sp, r7
 800fae4:	b004      	add	sp, #16
 800fae6:	bd80      	pop	{r7, pc}
 800fae8:	20001130 	.word	0x20001130

0800faec <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	0002      	movs	r2, r0
 800faf4:	1dfb      	adds	r3, r7, #7
 800faf6:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800faf8:	4b08      	ldr	r3, [pc, #32]	@ (800fb1c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 800fafa:	6859      	ldr	r1, [r3, #4]
 800fafc:	4b07      	ldr	r3, [pc, #28]	@ (800fb1c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 800fafe:	689a      	ldr	r2, [r3, #8]
 800fb00:	1dfb      	adds	r3, r7, #7
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	0018      	movs	r0, r3
 800fb06:	f7ff fea3 	bl	800f850 <GetElement>
 800fb0a:	1e03      	subs	r3, r0, #0
 800fb0c:	d001      	beq.n	800fb12 <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
 800fb0e:	2301      	movs	r3, #1
 800fb10:	e000      	b.n	800fb14 <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
 800fb12:	2300      	movs	r3, #0
}
 800fb14:	0018      	movs	r0, r3
 800fb16:	46bd      	mov	sp, r7
 800fb18:	b002      	add	sp, #8
 800fb1a:	bd80      	pop	{r7, pc}
 800fb1c:	20001130 	.word	0x20001130

0800fb20 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b084      	sub	sp, #16
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800fb28:	4b2d      	ldr	r3, [pc, #180]	@ (800fbe0 <LoRaMacConfirmQueueHandleCb+0xc0>)
 800fb2a:	691a      	ldr	r2, [r3, #16]
 800fb2c:	230e      	movs	r3, #14
 800fb2e:	18fb      	adds	r3, r7, r3
 800fb30:	7d12      	ldrb	r2, [r2, #20]
 800fb32:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
 800fb34:	230d      	movs	r3, #13
 800fb36:	18fb      	adds	r3, r7, r3
 800fb38:	2200      	movs	r2, #0
 800fb3a:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800fb3c:	230f      	movs	r3, #15
 800fb3e:	18fb      	adds	r3, r7, r3
 800fb40:	2200      	movs	r2, #0
 800fb42:	701a      	strb	r2, [r3, #0]
 800fb44:	e03f      	b.n	800fbc6 <LoRaMacConfirmQueueHandleCb+0xa6>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800fb46:	4b26      	ldr	r3, [pc, #152]	@ (800fbe0 <LoRaMacConfirmQueueHandleCb+0xc0>)
 800fb48:	685b      	ldr	r3, [r3, #4]
 800fb4a:	781a      	ldrb	r2, [r3, #0]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800fb50:	4b23      	ldr	r3, [pc, #140]	@ (800fbe0 <LoRaMacConfirmQueueHandleCb+0xc0>)
 800fb52:	685b      	ldr	r3, [r3, #4]
 800fb54:	785a      	ldrb	r2, [r3, #1]
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800fb5a:	4b21      	ldr	r3, [pc, #132]	@ (800fbe0 <LoRaMacConfirmQueueHandleCb+0xc0>)
 800fb5c:	685a      	ldr	r2, [r3, #4]
 800fb5e:	210d      	movs	r1, #13
 800fb60:	187b      	adds	r3, r7, r1
 800fb62:	7892      	ldrb	r2, [r2, #2]
 800fb64:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
 800fb66:	187b      	adds	r3, r7, r1
 800fb68:	781b      	ldrb	r3, [r3, #0]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d006      	beq.n	800fb7c <LoRaMacConfirmQueueHandleCb+0x5c>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800fb6e:	4b1c      	ldr	r3, [pc, #112]	@ (800fbe0 <LoRaMacConfirmQueueHandleCb+0xc0>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	689b      	ldr	r3, [r3, #8]
 800fb74:	687a      	ldr	r2, [r7, #4]
 800fb76:	0010      	movs	r0, r2
 800fb78:	4798      	blx	r3
 800fb7a:	e00f      	b.n	800fb9c <LoRaMacConfirmQueueHandleCb+0x7c>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800fb7c:	4b18      	ldr	r3, [pc, #96]	@ (800fbe0 <LoRaMacConfirmQueueHandleCb+0xc0>)
 800fb7e:	685b      	ldr	r3, [r3, #4]
 800fb80:	781a      	ldrb	r2, [r3, #0]
 800fb82:	2108      	movs	r1, #8
 800fb84:	187b      	adds	r3, r7, r1
 800fb86:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800fb88:	4b15      	ldr	r3, [pc, #84]	@ (800fbe0 <LoRaMacConfirmQueueHandleCb+0xc0>)
 800fb8a:	685b      	ldr	r3, [r3, #4]
 800fb8c:	785a      	ldrb	r2, [r3, #1]
 800fb8e:	187b      	adds	r3, r7, r1
 800fb90:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800fb92:	4b13      	ldr	r3, [pc, #76]	@ (800fbe0 <LoRaMacConfirmQueueHandleCb+0xc0>)
 800fb94:	685b      	ldr	r3, [r3, #4]
 800fb96:	78da      	ldrb	r2, [r3, #3]
 800fb98:	187b      	adds	r3, r7, r1
 800fb9a:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800fb9c:	f7ff ff04 	bl	800f9a8 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800fba0:	230d      	movs	r3, #13
 800fba2:	18fb      	adds	r3, r7, r3
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	2201      	movs	r2, #1
 800fba8:	4053      	eors	r3, r2
 800fbaa:	b2db      	uxtb	r3, r3
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d004      	beq.n	800fbba <LoRaMacConfirmQueueHandleCb+0x9a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800fbb0:	2308      	movs	r3, #8
 800fbb2:	18fb      	adds	r3, r7, r3
 800fbb4:	0018      	movs	r0, r3
 800fbb6:	f7ff fec3 	bl	800f940 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800fbba:	210f      	movs	r1, #15
 800fbbc:	187b      	adds	r3, r7, r1
 800fbbe:	781a      	ldrb	r2, [r3, #0]
 800fbc0:	187b      	adds	r3, r7, r1
 800fbc2:	3201      	adds	r2, #1
 800fbc4:	701a      	strb	r2, [r3, #0]
 800fbc6:	230f      	movs	r3, #15
 800fbc8:	18fa      	adds	r2, r7, r3
 800fbca:	230e      	movs	r3, #14
 800fbcc:	18fb      	adds	r3, r7, r3
 800fbce:	7812      	ldrb	r2, [r2, #0]
 800fbd0:	781b      	ldrb	r3, [r3, #0]
 800fbd2:	429a      	cmp	r2, r3
 800fbd4:	d3b7      	bcc.n	800fb46 <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
 800fbd6:	46c0      	nop			@ (mov r8, r8)
 800fbd8:	46c0      	nop			@ (mov r8, r8)
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	b004      	add	sp, #16
 800fbde:	bd80      	pop	{r7, pc}
 800fbe0:	20001130 	.word	0x20001130

0800fbe4 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800fbe8:	4b02      	ldr	r3, [pc, #8]	@ (800fbf4 <LoRaMacConfirmQueueGetCnt+0x10>)
 800fbea:	691b      	ldr	r3, [r3, #16]
 800fbec:	7d1b      	ldrb	r3, [r3, #20]
}
 800fbee:	0018      	movs	r0, r3
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}
 800fbf4:	20001130 	.word	0x20001130

0800fbf8 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800fbfc:	4b05      	ldr	r3, [pc, #20]	@ (800fc14 <LoRaMacConfirmQueueIsFull+0x1c>)
 800fbfe:	691b      	ldr	r3, [r3, #16]
 800fc00:	7d1b      	ldrb	r3, [r3, #20]
 800fc02:	2b04      	cmp	r3, #4
 800fc04:	d901      	bls.n	800fc0a <LoRaMacConfirmQueueIsFull+0x12>
    {
        return true;
 800fc06:	2301      	movs	r3, #1
 800fc08:	e000      	b.n	800fc0c <LoRaMacConfirmQueueIsFull+0x14>
    }
    else
    {
        return false;
 800fc0a:	2300      	movs	r3, #0
    }
}
 800fc0c:	0018      	movs	r0, r3
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	bd80      	pop	{r7, pc}
 800fc12:	46c0      	nop			@ (mov r8, r8)
 800fc14:	20001130 	.word	0x20001130

0800fc18 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 800fc18:	b590      	push	{r4, r7, lr}
 800fc1a:	b08f      	sub	sp, #60	@ 0x3c
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	60f8      	str	r0, [r7, #12]
 800fc20:	0008      	movs	r0, r1
 800fc22:	0011      	movs	r1, r2
 800fc24:	607b      	str	r3, [r7, #4]
 800fc26:	230a      	movs	r3, #10
 800fc28:	18fb      	adds	r3, r7, r3
 800fc2a:	1c02      	adds	r2, r0, #0
 800fc2c:	801a      	strh	r2, [r3, #0]
 800fc2e:	2309      	movs	r3, #9
 800fc30:	18fb      	adds	r3, r7, r3
 800fc32:	1c0a      	adds	r2, r1, #0
 800fc34:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d101      	bne.n	800fc40 <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fc3c:	230a      	movs	r3, #10
 800fc3e:	e0ad      	b.n	800fd9c <PayloadEncrypt+0x184>
    }

    uint8_t bufferIndex = 0;
 800fc40:	2337      	movs	r3, #55	@ 0x37
 800fc42:	18fb      	adds	r3, r7, r3
 800fc44:	2200      	movs	r2, #0
 800fc46:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
 800fc48:	2334      	movs	r3, #52	@ 0x34
 800fc4a:	18fb      	adds	r3, r7, r3
 800fc4c:	2201      	movs	r2, #1
 800fc4e:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 800fc50:	2320      	movs	r3, #32
 800fc52:	18fb      	adds	r3, r7, r3
 800fc54:	2200      	movs	r2, #0
 800fc56:	601a      	str	r2, [r3, #0]
 800fc58:	3304      	adds	r3, #4
 800fc5a:	220c      	movs	r2, #12
 800fc5c:	2100      	movs	r1, #0
 800fc5e:	0018      	movs	r0, r3
 800fc60:	f009 ff34 	bl	8019acc <memset>
    uint8_t aBlock[16] = { 0 };
 800fc64:	2410      	movs	r4, #16
 800fc66:	193b      	adds	r3, r7, r4
 800fc68:	2200      	movs	r2, #0
 800fc6a:	601a      	str	r2, [r3, #0]
 800fc6c:	3304      	adds	r3, #4
 800fc6e:	220c      	movs	r2, #12
 800fc70:	2100      	movs	r1, #0
 800fc72:	0018      	movs	r0, r3
 800fc74:	f009 ff2a 	bl	8019acc <memset>

    aBlock[0] = 0x01;
 800fc78:	0021      	movs	r1, r4
 800fc7a:	187b      	adds	r3, r7, r1
 800fc7c:	2201      	movs	r2, #1
 800fc7e:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
 800fc80:	187a      	adds	r2, r7, r1
 800fc82:	2340      	movs	r3, #64	@ 0x40
 800fc84:	2008      	movs	r0, #8
 800fc86:	181b      	adds	r3, r3, r0
 800fc88:	19db      	adds	r3, r3, r7
 800fc8a:	781b      	ldrb	r3, [r3, #0]
 800fc8c:	7153      	strb	r3, [r2, #5]

    aBlock[6] = address & 0xFF;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	b2da      	uxtb	r2, r3
 800fc92:	187b      	adds	r3, r7, r1
 800fc94:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	0a1b      	lsrs	r3, r3, #8
 800fc9a:	b2da      	uxtb	r2, r3
 800fc9c:	187b      	adds	r3, r7, r1
 800fc9e:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	0c1b      	lsrs	r3, r3, #16
 800fca4:	b2da      	uxtb	r2, r3
 800fca6:	187b      	adds	r3, r7, r1
 800fca8:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	0e1b      	lsrs	r3, r3, #24
 800fcae:	b2da      	uxtb	r2, r3
 800fcb0:	187b      	adds	r3, r7, r1
 800fcb2:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 800fcb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcb6:	b2da      	uxtb	r2, r3
 800fcb8:	187b      	adds	r3, r7, r1
 800fcba:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800fcbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcbe:	0a1b      	lsrs	r3, r3, #8
 800fcc0:	b2da      	uxtb	r2, r3
 800fcc2:	187b      	adds	r3, r7, r1
 800fcc4:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800fcc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcc8:	0c1b      	lsrs	r3, r3, #16
 800fcca:	b2da      	uxtb	r2, r3
 800fccc:	187b      	adds	r3, r7, r1
 800fcce:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800fcd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcd2:	0e1b      	lsrs	r3, r3, #24
 800fcd4:	b2da      	uxtb	r2, r3
 800fcd6:	187b      	adds	r3, r7, r1
 800fcd8:	735a      	strb	r2, [r3, #13]

    while( size > 0 )
 800fcda:	e058      	b.n	800fd8e <PayloadEncrypt+0x176>
    {
        aBlock[15] = ctr & 0xFF;
 800fcdc:	2134      	movs	r1, #52	@ 0x34
 800fcde:	187b      	adds	r3, r7, r1
 800fce0:	881b      	ldrh	r3, [r3, #0]
 800fce2:	b2da      	uxtb	r2, r3
 800fce4:	2010      	movs	r0, #16
 800fce6:	183b      	adds	r3, r7, r0
 800fce8:	73da      	strb	r2, [r3, #15]
        ctr++;
 800fcea:	187b      	adds	r3, r7, r1
 800fcec:	881a      	ldrh	r2, [r3, #0]
 800fcee:	187b      	adds	r3, r7, r1
 800fcf0:	3201      	adds	r2, #1
 800fcf2:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800fcf4:	2320      	movs	r3, #32
 800fcf6:	18f9      	adds	r1, r7, r3
 800fcf8:	2309      	movs	r3, #9
 800fcfa:	18fb      	adds	r3, r7, r3
 800fcfc:	781a      	ldrb	r2, [r3, #0]
 800fcfe:	1838      	adds	r0, r7, r0
 800fd00:	000b      	movs	r3, r1
 800fd02:	2110      	movs	r1, #16
 800fd04:	f7f9 fbee 	bl	80094e4 <SecureElementAesEncrypt>
 800fd08:	1e03      	subs	r3, r0, #0
 800fd0a:	d001      	beq.n	800fd10 <PayloadEncrypt+0xf8>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800fd0c:	230f      	movs	r3, #15
 800fd0e:	e045      	b.n	800fd9c <PayloadEncrypt+0x184>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800fd10:	2333      	movs	r3, #51	@ 0x33
 800fd12:	18fb      	adds	r3, r7, r3
 800fd14:	2200      	movs	r2, #0
 800fd16:	701a      	strb	r2, [r3, #0]
 800fd18:	e01f      	b.n	800fd5a <PayloadEncrypt+0x142>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800fd1a:	2037      	movs	r0, #55	@ 0x37
 800fd1c:	183b      	adds	r3, r7, r0
 800fd1e:	781a      	ldrb	r2, [r3, #0]
 800fd20:	2433      	movs	r4, #51	@ 0x33
 800fd22:	193b      	adds	r3, r7, r4
 800fd24:	781b      	ldrb	r3, [r3, #0]
 800fd26:	18d3      	adds	r3, r2, r3
 800fd28:	001a      	movs	r2, r3
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	189b      	adds	r3, r3, r2
 800fd2e:	7819      	ldrb	r1, [r3, #0]
 800fd30:	193b      	adds	r3, r7, r4
 800fd32:	781b      	ldrb	r3, [r3, #0]
 800fd34:	2220      	movs	r2, #32
 800fd36:	18ba      	adds	r2, r7, r2
 800fd38:	5cd2      	ldrb	r2, [r2, r3]
 800fd3a:	183b      	adds	r3, r7, r0
 800fd3c:	7818      	ldrb	r0, [r3, #0]
 800fd3e:	193b      	adds	r3, r7, r4
 800fd40:	781b      	ldrb	r3, [r3, #0]
 800fd42:	18c3      	adds	r3, r0, r3
 800fd44:	0018      	movs	r0, r3
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	181b      	adds	r3, r3, r0
 800fd4a:	404a      	eors	r2, r1
 800fd4c:	b2d2      	uxtb	r2, r2
 800fd4e:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800fd50:	193b      	adds	r3, r7, r4
 800fd52:	781a      	ldrb	r2, [r3, #0]
 800fd54:	193b      	adds	r3, r7, r4
 800fd56:	3201      	adds	r2, #1
 800fd58:	701a      	strb	r2, [r3, #0]
 800fd5a:	2333      	movs	r3, #51	@ 0x33
 800fd5c:	18fb      	adds	r3, r7, r3
 800fd5e:	781a      	ldrb	r2, [r3, #0]
 800fd60:	230a      	movs	r3, #10
 800fd62:	18fb      	adds	r3, r7, r3
 800fd64:	881b      	ldrh	r3, [r3, #0]
 800fd66:	b219      	sxth	r1, r3
 800fd68:	2910      	cmp	r1, #16
 800fd6a:	dd00      	ble.n	800fd6e <PayloadEncrypt+0x156>
 800fd6c:	2310      	movs	r3, #16
 800fd6e:	b21b      	sxth	r3, r3
 800fd70:	429a      	cmp	r2, r3
 800fd72:	dbd2      	blt.n	800fd1a <PayloadEncrypt+0x102>
        }
        size -= 16;
 800fd74:	210a      	movs	r1, #10
 800fd76:	187b      	adds	r3, r7, r1
 800fd78:	881b      	ldrh	r3, [r3, #0]
 800fd7a:	3b10      	subs	r3, #16
 800fd7c:	b29a      	uxth	r2, r3
 800fd7e:	187b      	adds	r3, r7, r1
 800fd80:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
 800fd82:	2237      	movs	r2, #55	@ 0x37
 800fd84:	18bb      	adds	r3, r7, r2
 800fd86:	18ba      	adds	r2, r7, r2
 800fd88:	7812      	ldrb	r2, [r2, #0]
 800fd8a:	3210      	adds	r2, #16
 800fd8c:	701a      	strb	r2, [r3, #0]
    while( size > 0 )
 800fd8e:	230a      	movs	r3, #10
 800fd90:	18fb      	adds	r3, r7, r3
 800fd92:	2200      	movs	r2, #0
 800fd94:	5e9b      	ldrsh	r3, [r3, r2]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	dca0      	bgt.n	800fcdc <PayloadEncrypt+0xc4>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800fd9a:	2300      	movs	r3, #0
}
 800fd9c:	0018      	movs	r0, r3
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	b00f      	add	sp, #60	@ 0x3c
 800fda2:	bd90      	pop	{r4, r7, pc}

0800fda4 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800fda4:	b5b0      	push	{r4, r5, r7, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	0005      	movs	r5, r0
 800fdac:	000c      	movs	r4, r1
 800fdae:	0010      	movs	r0, r2
 800fdb0:	0019      	movs	r1, r3
 800fdb2:	1dbb      	adds	r3, r7, #6
 800fdb4:	1c2a      	adds	r2, r5, #0
 800fdb6:	801a      	strh	r2, [r3, #0]
 800fdb8:	1d7b      	adds	r3, r7, #5
 800fdba:	1c22      	adds	r2, r4, #0
 800fdbc:	701a      	strb	r2, [r3, #0]
 800fdbe:	1d3b      	adds	r3, r7, #4
 800fdc0:	1c02      	adds	r2, r0, #0
 800fdc2:	701a      	strb	r2, [r3, #0]
 800fdc4:	1cfb      	adds	r3, r7, #3
 800fdc6:	1c0a      	adds	r2, r1, #0
 800fdc8:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
 800fdca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d101      	bne.n	800fdd4 <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fdd0:	230a      	movs	r3, #10
 800fdd2:	e070      	b.n	800feb6 <PrepareB0+0x112>
    }

    b0[0] = 0x49;
 800fdd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdd6:	2249      	movs	r2, #73	@ 0x49
 800fdd8:	701a      	strb	r2, [r3, #0]

    if( ( isAck == true ) && ( dir == DOWNLINK ) )
 800fdda:	1d3b      	adds	r3, r7, #4
 800fddc:	781b      	ldrb	r3, [r3, #0]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d01b      	beq.n	800fe1a <PrepareB0+0x76>
 800fde2:	1cfb      	adds	r3, r7, #3
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	2b01      	cmp	r3, #1
 800fde8:	d117      	bne.n	800fe1a <PrepareB0+0x76>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink or downlink frame that is being acknowledged
        uint16_t confFCnt = 0;
 800fdea:	210e      	movs	r1, #14
 800fdec:	187b      	adds	r3, r7, r1
 800fdee:	2200      	movs	r2, #0
 800fdf0:	801a      	strh	r2, [r3, #0]

        confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntList.FCntUp % 65536 );
 800fdf2:	4b33      	ldr	r3, [pc, #204]	@ (800fec0 <PrepareB0+0x11c>)
 800fdf4:	685b      	ldr	r3, [r3, #4]
 800fdf6:	68da      	ldr	r2, [r3, #12]
 800fdf8:	187b      	adds	r3, r7, r1
 800fdfa:	801a      	strh	r2, [r3, #0]

        b0[1] = confFCnt & 0xFF;
 800fdfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdfe:	3301      	adds	r3, #1
 800fe00:	187a      	adds	r2, r7, r1
 800fe02:	8812      	ldrh	r2, [r2, #0]
 800fe04:	b2d2      	uxtb	r2, r2
 800fe06:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 800fe08:	187b      	adds	r3, r7, r1
 800fe0a:	881b      	ldrh	r3, [r3, #0]
 800fe0c:	0a1b      	lsrs	r3, r3, #8
 800fe0e:	b29a      	uxth	r2, r3
 800fe10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe12:	3302      	adds	r3, #2
 800fe14:	b2d2      	uxtb	r2, r2
 800fe16:	701a      	strb	r2, [r3, #0]
    {
 800fe18:	e007      	b.n	800fe2a <PrepareB0+0x86>
    }
    else
    {
        b0[1] = 0x00;
 800fe1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe1c:	3301      	adds	r3, #1
 800fe1e:	2200      	movs	r2, #0
 800fe20:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 800fe22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe24:	3302      	adds	r3, #2
 800fe26:	2200      	movs	r2, #0
 800fe28:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 800fe2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe2c:	3303      	adds	r3, #3
 800fe2e:	2200      	movs	r2, #0
 800fe30:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 800fe32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe34:	3304      	adds	r3, #4
 800fe36:	2200      	movs	r2, #0
 800fe38:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 800fe3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe3c:	3305      	adds	r3, #5
 800fe3e:	1cfa      	adds	r2, r7, #3
 800fe40:	7812      	ldrb	r2, [r2, #0]
 800fe42:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 800fe44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe46:	3306      	adds	r3, #6
 800fe48:	6a3a      	ldr	r2, [r7, #32]
 800fe4a:	b2d2      	uxtb	r2, r2
 800fe4c:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800fe4e:	6a3b      	ldr	r3, [r7, #32]
 800fe50:	0a1a      	lsrs	r2, r3, #8
 800fe52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe54:	3307      	adds	r3, #7
 800fe56:	b2d2      	uxtb	r2, r2
 800fe58:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800fe5a:	6a3b      	ldr	r3, [r7, #32]
 800fe5c:	0c1a      	lsrs	r2, r3, #16
 800fe5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe60:	3308      	adds	r3, #8
 800fe62:	b2d2      	uxtb	r2, r2
 800fe64:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800fe66:	6a3b      	ldr	r3, [r7, #32]
 800fe68:	0e1a      	lsrs	r2, r3, #24
 800fe6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe6c:	3309      	adds	r3, #9
 800fe6e:	b2d2      	uxtb	r2, r2
 800fe70:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 800fe72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe74:	330a      	adds	r3, #10
 800fe76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe78:	b2d2      	uxtb	r2, r2
 800fe7a:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800fe7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe7e:	0a1a      	lsrs	r2, r3, #8
 800fe80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe82:	330b      	adds	r3, #11
 800fe84:	b2d2      	uxtb	r2, r2
 800fe86:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800fe88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe8a:	0c1a      	lsrs	r2, r3, #16
 800fe8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe8e:	330c      	adds	r3, #12
 800fe90:	b2d2      	uxtb	r2, r2
 800fe92:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800fe94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe96:	0e1a      	lsrs	r2, r3, #24
 800fe98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe9a:	330d      	adds	r3, #13
 800fe9c:	b2d2      	uxtb	r2, r2
 800fe9e:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 800fea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fea2:	330e      	adds	r3, #14
 800fea4:	2200      	movs	r2, #0
 800fea6:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 800fea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feaa:	330f      	adds	r3, #15
 800feac:	1dba      	adds	r2, r7, #6
 800feae:	8812      	ldrh	r2, [r2, #0]
 800feb0:	b2d2      	uxtb	r2, r2
 800feb2:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800feb4:	2300      	movs	r3, #0
}
 800feb6:	0018      	movs	r0, r3
 800feb8:	46bd      	mov	sp, r7
 800feba:	b004      	add	sp, #16
 800febc:	bdb0      	pop	{r4, r5, r7, pc}
 800febe:	46c0      	nop			@ (mov r8, r8)
 800fec0:	20001144 	.word	0x20001144

0800fec4 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 800fec4:	b5b0      	push	{r4, r5, r7, lr}
 800fec6:	b08a      	sub	sp, #40	@ 0x28
 800fec8:	af04      	add	r7, sp, #16
 800feca:	6078      	str	r0, [r7, #4]
 800fecc:	000c      	movs	r4, r1
 800fece:	0010      	movs	r0, r2
 800fed0:	0019      	movs	r1, r3
 800fed2:	1cbb      	adds	r3, r7, #2
 800fed4:	1c22      	adds	r2, r4, #0
 800fed6:	801a      	strh	r2, [r3, #0]
 800fed8:	1c7b      	adds	r3, r7, #1
 800feda:	1c02      	adds	r2, r0, #0
 800fedc:	701a      	strb	r2, [r3, #0]
 800fede:	003b      	movs	r3, r7
 800fee0:	1c0a      	adds	r2, r1, #0
 800fee2:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d002      	beq.n	800fef0 <ComputeCmacB0+0x2c>
 800feea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800feec:	2b00      	cmp	r3, #0
 800feee:	d101      	bne.n	800fef4 <ComputeCmacB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fef0:	230a      	movs	r3, #10
 800fef2:	e02a      	b.n	800ff4a <ComputeCmacB0+0x86>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800fef4:	1cbb      	adds	r3, r7, #2
 800fef6:	881a      	ldrh	r2, [r3, #0]
 800fef8:	2380      	movs	r3, #128	@ 0x80
 800fefa:	005b      	lsls	r3, r3, #1
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d901      	bls.n	800ff04 <ComputeCmacB0+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800ff00:	230e      	movs	r3, #14
 800ff02:	e022      	b.n	800ff4a <ComputeCmacB0+0x86>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800ff04:	2328      	movs	r3, #40	@ 0x28
 800ff06:	18fb      	adds	r3, r7, r3
 800ff08:	781c      	ldrb	r4, [r3, #0]
 800ff0a:	003b      	movs	r3, r7
 800ff0c:	781a      	ldrb	r2, [r3, #0]
 800ff0e:	1c7b      	adds	r3, r7, #1
 800ff10:	7819      	ldrb	r1, [r3, #0]
 800ff12:	1cbb      	adds	r3, r7, #2
 800ff14:	8818      	ldrh	r0, [r3, #0]
 800ff16:	2508      	movs	r5, #8
 800ff18:	197b      	adds	r3, r7, r5
 800ff1a:	9302      	str	r3, [sp, #8]
 800ff1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff1e:	9301      	str	r3, [sp, #4]
 800ff20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff22:	9300      	str	r3, [sp, #0]
 800ff24:	0023      	movs	r3, r4
 800ff26:	f7ff ff3d 	bl	800fda4 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800ff2a:	1c7b      	adds	r3, r7, #1
 800ff2c:	781c      	ldrb	r4, [r3, #0]
 800ff2e:	1cbb      	adds	r3, r7, #2
 800ff30:	881a      	ldrh	r2, [r3, #0]
 800ff32:	6879      	ldr	r1, [r7, #4]
 800ff34:	1978      	adds	r0, r7, r5
 800ff36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff38:	9300      	str	r3, [sp, #0]
 800ff3a:	0023      	movs	r3, r4
 800ff3c:	f7f9 fa70 	bl	8009420 <SecureElementComputeAesCmac>
 800ff40:	1e03      	subs	r3, r0, #0
 800ff42:	d001      	beq.n	800ff48 <ComputeCmacB0+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ff44:	230f      	movs	r3, #15
 800ff46:	e000      	b.n	800ff4a <ComputeCmacB0+0x86>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800ff48:	2300      	movs	r3, #0
}
 800ff4a:	0018      	movs	r0, r3
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	b006      	add	sp, #24
 800ff50:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ff54 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 800ff54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff56:	b0cd      	sub	sp, #308	@ 0x134
 800ff58:	af04      	add	r7, sp, #16
 800ff5a:	6078      	str	r0, [r7, #4]
 800ff5c:	000c      	movs	r4, r1
 800ff5e:	0010      	movs	r0, r2
 800ff60:	0019      	movs	r1, r3
 800ff62:	4b46      	ldr	r3, [pc, #280]	@ (801007c <VerifyCmacB0+0x128>)
 800ff64:	2590      	movs	r5, #144	@ 0x90
 800ff66:	006d      	lsls	r5, r5, #1
 800ff68:	195b      	adds	r3, r3, r5
 800ff6a:	19db      	adds	r3, r3, r7
 800ff6c:	1c22      	adds	r2, r4, #0
 800ff6e:	801a      	strh	r2, [r3, #0]
 800ff70:	4b43      	ldr	r3, [pc, #268]	@ (8010080 <VerifyCmacB0+0x12c>)
 800ff72:	002c      	movs	r4, r5
 800ff74:	191b      	adds	r3, r3, r4
 800ff76:	19db      	adds	r3, r3, r7
 800ff78:	1c02      	adds	r2, r0, #0
 800ff7a:	701a      	strb	r2, [r3, #0]
 800ff7c:	4b41      	ldr	r3, [pc, #260]	@ (8010084 <VerifyCmacB0+0x130>)
 800ff7e:	191b      	adds	r3, r3, r4
 800ff80:	19db      	adds	r3, r3, r7
 800ff82:	1c0a      	adds	r2, r1, #0
 800ff84:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d101      	bne.n	800ff90 <VerifyCmacB0+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ff8c:	230a      	movs	r3, #10
 800ff8e:	e070      	b.n	8010072 <VerifyCmacB0+0x11e>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800ff90:	4b3a      	ldr	r3, [pc, #232]	@ (801007c <VerifyCmacB0+0x128>)
 800ff92:	2290      	movs	r2, #144	@ 0x90
 800ff94:	0052      	lsls	r2, r2, #1
 800ff96:	189b      	adds	r3, r3, r2
 800ff98:	19db      	adds	r3, r3, r7
 800ff9a:	881a      	ldrh	r2, [r3, #0]
 800ff9c:	2380      	movs	r3, #128	@ 0x80
 800ff9e:	005b      	lsls	r3, r3, #1
 800ffa0:	429a      	cmp	r2, r3
 800ffa2:	d901      	bls.n	800ffa8 <VerifyCmacB0+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800ffa4:	230e      	movs	r3, #14
 800ffa6:	e064      	b.n	8010072 <VerifyCmacB0+0x11e>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800ffa8:	2388      	movs	r3, #136	@ 0x88
 800ffaa:	005a      	lsls	r2, r3, #1
 800ffac:	260c      	movs	r6, #12
 800ffae:	19bb      	adds	r3, r7, r6
 800ffb0:	2100      	movs	r1, #0
 800ffb2:	0018      	movs	r0, r3
 800ffb4:	f005 fbae 	bl	8015714 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800ffb8:	2398      	movs	r3, #152	@ 0x98
 800ffba:	005b      	lsls	r3, r3, #1
 800ffbc:	2008      	movs	r0, #8
 800ffbe:	181b      	adds	r3, r3, r0
 800ffc0:	19db      	adds	r3, r3, r7
 800ffc2:	781c      	ldrb	r4, [r3, #0]
 800ffc4:	4b2f      	ldr	r3, [pc, #188]	@ (8010084 <VerifyCmacB0+0x130>)
 800ffc6:	2590      	movs	r5, #144	@ 0x90
 800ffc8:	006d      	lsls	r5, r5, #1
 800ffca:	195b      	adds	r3, r3, r5
 800ffcc:	19db      	adds	r3, r3, r7
 800ffce:	781a      	ldrb	r2, [r3, #0]
 800ffd0:	4b2b      	ldr	r3, [pc, #172]	@ (8010080 <VerifyCmacB0+0x12c>)
 800ffd2:	195b      	adds	r3, r3, r5
 800ffd4:	19db      	adds	r3, r3, r7
 800ffd6:	7819      	ldrb	r1, [r3, #0]
 800ffd8:	4b28      	ldr	r3, [pc, #160]	@ (801007c <VerifyCmacB0+0x128>)
 800ffda:	195b      	adds	r3, r3, r5
 800ffdc:	19db      	adds	r3, r3, r7
 800ffde:	881b      	ldrh	r3, [r3, #0]
 800ffe0:	469c      	mov	ip, r3
 800ffe2:	19bb      	adds	r3, r7, r6
 800ffe4:	9302      	str	r3, [sp, #8]
 800ffe6:	239c      	movs	r3, #156	@ 0x9c
 800ffe8:	005b      	lsls	r3, r3, #1
 800ffea:	181b      	adds	r3, r3, r0
 800ffec:	19db      	adds	r3, r3, r7
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	9301      	str	r3, [sp, #4]
 800fff2:	239a      	movs	r3, #154	@ 0x9a
 800fff4:	005b      	lsls	r3, r3, #1
 800fff6:	181b      	adds	r3, r3, r0
 800fff8:	19db      	adds	r3, r3, r7
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	9300      	str	r3, [sp, #0]
 800fffe:	0023      	movs	r3, r4
 8010000:	4660      	mov	r0, ip
 8010002:	f7ff fecf 	bl	800fda4 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8010006:	19bb      	adds	r3, r7, r6
 8010008:	3310      	adds	r3, #16
 801000a:	4a1c      	ldr	r2, [pc, #112]	@ (801007c <VerifyCmacB0+0x128>)
 801000c:	1952      	adds	r2, r2, r5
 801000e:	19d2      	adds	r2, r2, r7
 8010010:	8812      	ldrh	r2, [r2, #0]
 8010012:	6879      	ldr	r1, [r7, #4]
 8010014:	0018      	movs	r0, r3
 8010016:	f005 fb3f 	bl	8015698 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 801001a:	2020      	movs	r0, #32
 801001c:	30ff      	adds	r0, #255	@ 0xff
 801001e:	183b      	adds	r3, r7, r0
 8010020:	2206      	movs	r2, #6
 8010022:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8010024:	4b15      	ldr	r3, [pc, #84]	@ (801007c <VerifyCmacB0+0x128>)
 8010026:	195b      	adds	r3, r3, r5
 8010028:	19db      	adds	r3, r3, r7
 801002a:	881b      	ldrh	r3, [r3, #0]
 801002c:	3310      	adds	r3, #16
 801002e:	b299      	uxth	r1, r3
 8010030:	183c      	adds	r4, r7, r0
 8010032:	4b13      	ldr	r3, [pc, #76]	@ (8010080 <VerifyCmacB0+0x12c>)
 8010034:	195b      	adds	r3, r3, r5
 8010036:	19db      	adds	r3, r3, r7
 8010038:	781b      	ldrb	r3, [r3, #0]
 801003a:	229e      	movs	r2, #158	@ 0x9e
 801003c:	0052      	lsls	r2, r2, #1
 801003e:	2008      	movs	r0, #8
 8010040:	1812      	adds	r2, r2, r0
 8010042:	19d2      	adds	r2, r2, r7
 8010044:	6812      	ldr	r2, [r2, #0]
 8010046:	19b8      	adds	r0, r7, r6
 8010048:	f7f9 fa0b 	bl	8009462 <SecureElementVerifyAesCmac>
 801004c:	0003      	movs	r3, r0
 801004e:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 8010050:	2020      	movs	r0, #32
 8010052:	30ff      	adds	r0, #255	@ 0xff
 8010054:	183b      	adds	r3, r7, r0
 8010056:	781b      	ldrb	r3, [r3, #0]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d101      	bne.n	8010060 <VerifyCmacB0+0x10c>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 801005c:	2300      	movs	r3, #0
 801005e:	e008      	b.n	8010072 <VerifyCmacB0+0x11e>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8010060:	2320      	movs	r3, #32
 8010062:	33ff      	adds	r3, #255	@ 0xff
 8010064:	18fb      	adds	r3, r7, r3
 8010066:	781b      	ldrb	r3, [r3, #0]
 8010068:	2b01      	cmp	r3, #1
 801006a:	d101      	bne.n	8010070 <VerifyCmacB0+0x11c>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 801006c:	2301      	movs	r3, #1
 801006e:	e000      	b.n	8010072 <VerifyCmacB0+0x11e>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010070:	230f      	movs	r3, #15
}
 8010072:	0018      	movs	r0, r3
 8010074:	46bd      	mov	sp, r7
 8010076:	b049      	add	sp, #292	@ 0x124
 8010078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801007a:	46c0      	nop			@ (mov r8, r8)
 801007c:	fffffee2 	.word	0xfffffee2
 8010080:	fffffee1 	.word	0xfffffee1
 8010084:	fffffee0 	.word	0xfffffee0

08010088 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b084      	sub	sp, #16
 801008c:	af00      	add	r7, sp, #0
 801008e:	0002      	movs	r2, r0
 8010090:	6039      	str	r1, [r7, #0]
 8010092:	1dfb      	adds	r3, r7, #7
 8010094:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8010096:	230f      	movs	r3, #15
 8010098:	18fb      	adds	r3, r7, r3
 801009a:	2200      	movs	r2, #0
 801009c:	701a      	strb	r2, [r3, #0]
 801009e:	e018      	b.n	80100d2 <GetKeyAddrItem+0x4a>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80100a0:	210f      	movs	r1, #15
 80100a2:	187b      	adds	r3, r7, r1
 80100a4:	781a      	ldrb	r2, [r3, #0]
 80100a6:	4b10      	ldr	r3, [pc, #64]	@ (80100e8 <GetKeyAddrItem+0x60>)
 80100a8:	0092      	lsls	r2, r2, #2
 80100aa:	5cd3      	ldrb	r3, [r2, r3]
 80100ac:	1dfa      	adds	r2, r7, #7
 80100ae:	7812      	ldrb	r2, [r2, #0]
 80100b0:	429a      	cmp	r2, r3
 80100b2:	d108      	bne.n	80100c6 <GetKeyAddrItem+0x3e>
        {
            *item = &( KeyAddrList[i] );
 80100b4:	187b      	adds	r3, r7, r1
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	009a      	lsls	r2, r3, #2
 80100ba:	4b0b      	ldr	r3, [pc, #44]	@ (80100e8 <GetKeyAddrItem+0x60>)
 80100bc:	18d2      	adds	r2, r2, r3
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80100c2:	2300      	movs	r3, #0
 80100c4:	e00b      	b.n	80100de <GetKeyAddrItem+0x56>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80100c6:	210f      	movs	r1, #15
 80100c8:	187b      	adds	r3, r7, r1
 80100ca:	781a      	ldrb	r2, [r3, #0]
 80100cc:	187b      	adds	r3, r7, r1
 80100ce:	3201      	adds	r2, #1
 80100d0:	701a      	strb	r2, [r3, #0]
 80100d2:	230f      	movs	r3, #15
 80100d4:	18fb      	adds	r3, r7, r3
 80100d6:	781b      	ldrb	r3, [r3, #0]
 80100d8:	2b04      	cmp	r3, #4
 80100da:	d9e1      	bls.n	80100a0 <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80100dc:	230c      	movs	r3, #12
}
 80100de:	0018      	movs	r0, r3
 80100e0:	46bd      	mov	sp, r7
 80100e2:	b004      	add	sp, #16
 80100e4:	bd80      	pop	{r7, pc}
 80100e6:	46c0      	nop			@ (mov r8, r8)
 80100e8:	20000074 	.word	0x20000074

080100ec <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
 80100ec:	b590      	push	{r4, r7, lr}
 80100ee:	b089      	sub	sp, #36	@ 0x24
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	60b9      	str	r1, [r7, #8]
 80100f4:	607a      	str	r2, [r7, #4]
 80100f6:	603b      	str	r3, [r7, #0]
 80100f8:	230f      	movs	r3, #15
 80100fa:	18fb      	adds	r3, r7, r3
 80100fc:	1c02      	adds	r2, r0, #0
 80100fe:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d005      	beq.n	8010112 <DeriveSessionKey10x+0x26>
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d002      	beq.n	8010112 <DeriveSessionKey10x+0x26>
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d101      	bne.n	8010116 <DeriveSessionKey10x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010112:	230a      	movs	r3, #10
 8010114:	e046      	b.n	80101a4 <DeriveSessionKey10x+0xb8>
    }

    uint8_t compBase[16] = { 0 };
 8010116:	2310      	movs	r3, #16
 8010118:	18fb      	adds	r3, r7, r3
 801011a:	2200      	movs	r2, #0
 801011c:	601a      	str	r2, [r3, #0]
 801011e:	3304      	adds	r3, #4
 8010120:	220c      	movs	r2, #12
 8010122:	2100      	movs	r1, #0
 8010124:	0018      	movs	r0, r3
 8010126:	f009 fcd1 	bl	8019acc <memset>

    switch( keyID )
 801012a:	230f      	movs	r3, #15
 801012c:	18fb      	adds	r3, r7, r3
 801012e:	781b      	ldrb	r3, [r3, #0]
 8010130:	2b07      	cmp	r3, #7
 8010132:	dc02      	bgt.n	801013a <DeriveSessionKey10x+0x4e>
 8010134:	2b05      	cmp	r3, #5
 8010136:	da03      	bge.n	8010140 <DeriveSessionKey10x+0x54>
 8010138:	e00c      	b.n	8010154 <DeriveSessionKey10x+0x68>
 801013a:	2b08      	cmp	r3, #8
 801013c:	d005      	beq.n	801014a <DeriveSessionKey10x+0x5e>
 801013e:	e009      	b.n	8010154 <DeriveSessionKey10x+0x68>
    {
        case F_NWK_S_INT_KEY:
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
            compBase[0] = 0x01;
 8010140:	2310      	movs	r3, #16
 8010142:	18fb      	adds	r3, r7, r3
 8010144:	2201      	movs	r2, #1
 8010146:	701a      	strb	r2, [r3, #0]
            break;
 8010148:	e006      	b.n	8010158 <DeriveSessionKey10x+0x6c>
        case APP_S_KEY:
            compBase[0] = 0x02;
 801014a:	2310      	movs	r3, #16
 801014c:	18fb      	adds	r3, r7, r3
 801014e:	2202      	movs	r2, #2
 8010150:	701a      	strb	r2, [r3, #0]
            break;
 8010152:	e001      	b.n	8010158 <DeriveSessionKey10x+0x6c>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8010154:	230b      	movs	r3, #11
 8010156:	e025      	b.n	80101a4 <DeriveSessionKey10x+0xb8>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 8010158:	2410      	movs	r4, #16
 801015a:	193b      	adds	r3, r7, r4
 801015c:	3301      	adds	r3, #1
 801015e:	68b9      	ldr	r1, [r7, #8]
 8010160:	2203      	movs	r2, #3
 8010162:	0018      	movs	r0, r3
 8010164:	f005 fa98 	bl	8015698 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 8010168:	193b      	adds	r3, r7, r4
 801016a:	3304      	adds	r3, #4
 801016c:	6879      	ldr	r1, [r7, #4]
 801016e:	2203      	movs	r2, #3
 8010170:	0018      	movs	r0, r3
 8010172:	f005 fa91 	bl	8015698 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 8010176:	193b      	adds	r3, r7, r4
 8010178:	3307      	adds	r3, #7
 801017a:	6839      	ldr	r1, [r7, #0]
 801017c:	2202      	movs	r2, #2
 801017e:	0018      	movs	r0, r3
 8010180:	f005 fa8a 	bl	8015698 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8010184:	4b09      	ldr	r3, [pc, #36]	@ (80101ac <DeriveSessionKey10x+0xc0>)
 8010186:	685b      	ldr	r3, [r3, #4]
 8010188:	220f      	movs	r2, #15
 801018a:	18ba      	adds	r2, r7, r2
 801018c:	7812      	ldrb	r2, [r2, #0]
 801018e:	1939      	adds	r1, r7, r4
 8010190:	6818      	ldr	r0, [r3, #0]
 8010192:	0013      	movs	r3, r2
 8010194:	2202      	movs	r2, #2
 8010196:	f7f9 fa0f 	bl	80095b8 <SecureElementDeriveAndStoreKey>
 801019a:	1e03      	subs	r3, r0, #0
 801019c:	d001      	beq.n	80101a2 <DeriveSessionKey10x+0xb6>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801019e:	230f      	movs	r3, #15
 80101a0:	e000      	b.n	80101a4 <DeriveSessionKey10x+0xb8>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80101a2:	2300      	movs	r3, #0
}
 80101a4:	0018      	movs	r0, r3
 80101a6:	46bd      	mov	sp, r7
 80101a8:	b009      	add	sp, #36	@ 0x24
 80101aa:	bd90      	pop	{r4, r7, pc}
 80101ac:	20001144 	.word	0x20001144

080101b0 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b082      	sub	sp, #8
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	0002      	movs	r2, r0
 80101b8:	6039      	str	r1, [r7, #0]
 80101ba:	1dfb      	adds	r3, r7, #7
 80101bc:	701a      	strb	r2, [r3, #0]
    if( lastDown == NULL )
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d101      	bne.n	80101c8 <GetLastFcntDown+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80101c4:	230a      	movs	r3, #10
 80101c6:	e047      	b.n	8010258 <GetLastFcntDown+0xa8>
    }
    switch( fCntID )
 80101c8:	1dfb      	adds	r3, r7, #7
 80101ca:	781b      	ldrb	r3, [r3, #0]
 80101cc:	2b07      	cmp	r3, #7
 80101ce:	d840      	bhi.n	8010252 <GetLastFcntDown+0xa2>
 80101d0:	009a      	lsls	r2, r3, #2
 80101d2:	4b23      	ldr	r3, [pc, #140]	@ (8010260 <GetLastFcntDown+0xb0>)
 80101d4:	18d3      	adds	r3, r2, r3
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	469f      	mov	pc, r3
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 80101da:	4b22      	ldr	r3, [pc, #136]	@ (8010264 <GetLastFcntDown+0xb4>)
 80101dc:	685b      	ldr	r3, [r3, #4]
 80101de:	691a      	ldr	r2, [r3, #16]
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 80101e4:	4b1f      	ldr	r3, [pc, #124]	@ (8010264 <GetLastFcntDown+0xb4>)
 80101e6:	685a      	ldr	r2, [r3, #4]
 80101e8:	4b1e      	ldr	r3, [pc, #120]	@ (8010264 <GetLastFcntDown+0xb4>)
 80101ea:	685b      	ldr	r3, [r3, #4]
 80101ec:	3210      	adds	r2, #16
 80101ee:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 80101f0:	e031      	b.n	8010256 <GetLastFcntDown+0xa6>
        case A_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 80101f2:	4b1c      	ldr	r3, [pc, #112]	@ (8010264 <GetLastFcntDown+0xb4>)
 80101f4:	685b      	ldr	r3, [r3, #4]
 80101f6:	695a      	ldr	r2, [r3, #20]
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 80101fc:	4b19      	ldr	r3, [pc, #100]	@ (8010264 <GetLastFcntDown+0xb4>)
 80101fe:	685a      	ldr	r2, [r3, #4]
 8010200:	4b18      	ldr	r3, [pc, #96]	@ (8010264 <GetLastFcntDown+0xb4>)
 8010202:	685b      	ldr	r3, [r3, #4]
 8010204:	3214      	adds	r2, #20
 8010206:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8010208:	e025      	b.n	8010256 <GetLastFcntDown+0xa6>
        case FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 801020a:	4b16      	ldr	r3, [pc, #88]	@ (8010264 <GetLastFcntDown+0xb4>)
 801020c:	685b      	ldr	r3, [r3, #4]
 801020e:	699a      	ldr	r2, [r3, #24]
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 8010214:	4b13      	ldr	r3, [pc, #76]	@ (8010264 <GetLastFcntDown+0xb4>)
 8010216:	685a      	ldr	r2, [r3, #4]
 8010218:	4b12      	ldr	r3, [pc, #72]	@ (8010264 <GetLastFcntDown+0xb4>)
 801021a:	685b      	ldr	r3, [r3, #4]
 801021c:	3218      	adds	r2, #24
 801021e:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8010220:	e019      	b.n	8010256 <GetLastFcntDown+0xa6>
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 8010222:	4b10      	ldr	r3, [pc, #64]	@ (8010264 <GetLastFcntDown+0xb4>)
 8010224:	685b      	ldr	r3, [r3, #4]
 8010226:	69da      	ldr	r2, [r3, #28]
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	601a      	str	r2, [r3, #0]
            break;
 801022c:	e013      	b.n	8010256 <GetLastFcntDown+0xa6>
        case MC_FCNT_DOWN_1:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 801022e:	4b0d      	ldr	r3, [pc, #52]	@ (8010264 <GetLastFcntDown+0xb4>)
 8010230:	685b      	ldr	r3, [r3, #4]
 8010232:	6a1a      	ldr	r2, [r3, #32]
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	601a      	str	r2, [r3, #0]
            break;
 8010238:	e00d      	b.n	8010256 <GetLastFcntDown+0xa6>
        case MC_FCNT_DOWN_2:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 801023a:	4b0a      	ldr	r3, [pc, #40]	@ (8010264 <GetLastFcntDown+0xb4>)
 801023c:	685b      	ldr	r3, [r3, #4]
 801023e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010240:	683b      	ldr	r3, [r7, #0]
 8010242:	601a      	str	r2, [r3, #0]
            break;
 8010244:	e007      	b.n	8010256 <GetLastFcntDown+0xa6>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 8010246:	4b07      	ldr	r3, [pc, #28]	@ (8010264 <GetLastFcntDown+0xb4>)
 8010248:	685b      	ldr	r3, [r3, #4]
 801024a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	601a      	str	r2, [r3, #0]
            break;
 8010250:	e001      	b.n	8010256 <GetLastFcntDown+0xa6>
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8010252:	2305      	movs	r3, #5
 8010254:	e000      	b.n	8010258 <GetLastFcntDown+0xa8>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8010256:	2300      	movs	r3, #0
}
 8010258:	0018      	movs	r0, r3
 801025a:	46bd      	mov	sp, r7
 801025c:	b002      	add	sp, #8
 801025e:	bd80      	pop	{r7, pc}
 8010260:	0801b4c0 	.word	0x0801b4c0
 8010264:	20001144 	.word	0x20001144

08010268 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b084      	sub	sp, #16
 801026c:	af00      	add	r7, sp, #0
 801026e:	0002      	movs	r2, r0
 8010270:	6039      	str	r1, [r7, #0]
 8010272:	1dfb      	adds	r3, r7, #7
 8010274:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
 8010276:	2300      	movs	r3, #0
 8010278:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 801027a:	230c      	movs	r3, #12
 801027c:	18fa      	adds	r2, r7, r3
 801027e:	1dfb      	adds	r3, r7, #7
 8010280:	781b      	ldrb	r3, [r3, #0]
 8010282:	0011      	movs	r1, r2
 8010284:	0018      	movs	r0, r3
 8010286:	f7ff ff93 	bl	80101b0 <GetLastFcntDown>
 801028a:	1e03      	subs	r3, r0, #0
 801028c:	d001      	beq.n	8010292 <CheckFCntDown+0x2a>
    {
        return false;
 801028e:	2300      	movs	r3, #0
 8010290:	e009      	b.n	80102a6 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	683a      	ldr	r2, [r7, #0]
 8010296:	429a      	cmp	r2, r3
 8010298:	d802      	bhi.n	80102a0 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 801029a:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801029c:	3301      	adds	r3, #1
 801029e:	d101      	bne.n	80102a4 <CheckFCntDown+0x3c>
    {
        return true;
 80102a0:	2301      	movs	r3, #1
 80102a2:	e000      	b.n	80102a6 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80102a4:	2300      	movs	r3, #0
    }
}
 80102a6:	0018      	movs	r0, r3
 80102a8:	46bd      	mov	sp, r7
 80102aa:	b004      	add	sp, #16
 80102ac:	bd80      	pop	{r7, pc}
	...

080102b0 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b082      	sub	sp, #8
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	0002      	movs	r2, r0
 80102b8:	6039      	str	r1, [r7, #0]
 80102ba:	1dfb      	adds	r3, r7, #7
 80102bc:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 80102be:	1dfb      	adds	r3, r7, #7
 80102c0:	781b      	ldrb	r3, [r3, #0]
 80102c2:	2b07      	cmp	r3, #7
 80102c4:	d827      	bhi.n	8010316 <UpdateFCntDown+0x66>
 80102c6:	009a      	lsls	r2, r3, #2
 80102c8:	4b17      	ldr	r3, [pc, #92]	@ (8010328 <UpdateFCntDown+0x78>)
 80102ca:	18d3      	adds	r3, r2, r3
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	469f      	mov	pc, r3
    {
        case N_FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 80102d0:	4b16      	ldr	r3, [pc, #88]	@ (801032c <UpdateFCntDown+0x7c>)
 80102d2:	685b      	ldr	r3, [r3, #4]
 80102d4:	683a      	ldr	r2, [r7, #0]
 80102d6:	611a      	str	r2, [r3, #16]
            break;
 80102d8:	e01e      	b.n	8010318 <UpdateFCntDown+0x68>
        case A_FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 80102da:	4b14      	ldr	r3, [pc, #80]	@ (801032c <UpdateFCntDown+0x7c>)
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	683a      	ldr	r2, [r7, #0]
 80102e0:	615a      	str	r2, [r3, #20]
            break;
 80102e2:	e019      	b.n	8010318 <UpdateFCntDown+0x68>
        case FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 80102e4:	4b11      	ldr	r3, [pc, #68]	@ (801032c <UpdateFCntDown+0x7c>)
 80102e6:	685b      	ldr	r3, [r3, #4]
 80102e8:	683a      	ldr	r2, [r7, #0]
 80102ea:	619a      	str	r2, [r3, #24]
            break;
 80102ec:	e014      	b.n	8010318 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_0:
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 80102ee:	4b0f      	ldr	r3, [pc, #60]	@ (801032c <UpdateFCntDown+0x7c>)
 80102f0:	685b      	ldr	r3, [r3, #4]
 80102f2:	683a      	ldr	r2, [r7, #0]
 80102f4:	61da      	str	r2, [r3, #28]
            break;
 80102f6:	e00f      	b.n	8010318 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_1:
            CryptoCtx.NvmCtx->FCntList.McFCntDown1 = currentDown;
 80102f8:	4b0c      	ldr	r3, [pc, #48]	@ (801032c <UpdateFCntDown+0x7c>)
 80102fa:	685b      	ldr	r3, [r3, #4]
 80102fc:	683a      	ldr	r2, [r7, #0]
 80102fe:	621a      	str	r2, [r3, #32]
            break;
 8010300:	e00a      	b.n	8010318 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_2:
            CryptoCtx.NvmCtx->FCntList.McFCntDown2 = currentDown;
 8010302:	4b0a      	ldr	r3, [pc, #40]	@ (801032c <UpdateFCntDown+0x7c>)
 8010304:	685b      	ldr	r3, [r3, #4]
 8010306:	683a      	ldr	r2, [r7, #0]
 8010308:	625a      	str	r2, [r3, #36]	@ 0x24
            break;
 801030a:	e005      	b.n	8010318 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
 801030c:	4b07      	ldr	r3, [pc, #28]	@ (801032c <UpdateFCntDown+0x7c>)
 801030e:	685b      	ldr	r3, [r3, #4]
 8010310:	683a      	ldr	r2, [r7, #0]
 8010312:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8010314:	e000      	b.n	8010318 <UpdateFCntDown+0x68>
        default:
            break;
 8010316:	46c0      	nop			@ (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8010318:	4b04      	ldr	r3, [pc, #16]	@ (801032c <UpdateFCntDown+0x7c>)
 801031a:	689b      	ldr	r3, [r3, #8]
 801031c:	4798      	blx	r3
}
 801031e:	46c0      	nop			@ (mov r8, r8)
 8010320:	46bd      	mov	sp, r7
 8010322:	b002      	add	sp, #8
 8010324:	bd80      	pop	{r7, pc}
 8010326:	46c0      	nop			@ (mov r8, r8)
 8010328:	0801b4e0 	.word	0x0801b4e0
 801032c:	20001144 	.word	0x20001144

08010330 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8010330:	b580      	push	{r7, lr}
 8010332:	af00      	add	r7, sp, #0

    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8010334:	4b19      	ldr	r3, [pc, #100]	@ (801039c <ResetFCnts+0x6c>)
 8010336:	685b      	ldr	r3, [r3, #4]
 8010338:	2200      	movs	r2, #0
 801033a:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 801033c:	4b17      	ldr	r3, [pc, #92]	@ (801039c <ResetFCnts+0x6c>)
 801033e:	685b      	ldr	r3, [r3, #4]
 8010340:	2201      	movs	r2, #1
 8010342:	4252      	negs	r2, r2
 8010344:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8010346:	4b15      	ldr	r3, [pc, #84]	@ (801039c <ResetFCnts+0x6c>)
 8010348:	685b      	ldr	r3, [r3, #4]
 801034a:	2201      	movs	r2, #1
 801034c:	4252      	negs	r2, r2
 801034e:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8010350:	4b12      	ldr	r3, [pc, #72]	@ (801039c <ResetFCnts+0x6c>)
 8010352:	685b      	ldr	r3, [r3, #4]
 8010354:	2201      	movs	r2, #1
 8010356:	4252      	negs	r2, r2
 8010358:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 801035a:	4b10      	ldr	r3, [pc, #64]	@ (801039c <ResetFCnts+0x6c>)
 801035c:	685a      	ldr	r2, [r3, #4]
 801035e:	4b0f      	ldr	r3, [pc, #60]	@ (801039c <ResetFCnts+0x6c>)
 8010360:	685b      	ldr	r3, [r3, #4]
 8010362:	3218      	adds	r2, #24
 8010364:	631a      	str	r2, [r3, #48]	@ 0x30

    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 8010366:	4b0d      	ldr	r3, [pc, #52]	@ (801039c <ResetFCnts+0x6c>)
 8010368:	685b      	ldr	r3, [r3, #4]
 801036a:	2201      	movs	r2, #1
 801036c:	4252      	negs	r2, r2
 801036e:	61da      	str	r2, [r3, #28]
    CryptoCtx.NvmCtx->FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 8010370:	4b0a      	ldr	r3, [pc, #40]	@ (801039c <ResetFCnts+0x6c>)
 8010372:	685b      	ldr	r3, [r3, #4]
 8010374:	2201      	movs	r2, #1
 8010376:	4252      	negs	r2, r2
 8010378:	621a      	str	r2, [r3, #32]
    CryptoCtx.NvmCtx->FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
 801037a:	4b08      	ldr	r3, [pc, #32]	@ (801039c <ResetFCnts+0x6c>)
 801037c:	685b      	ldr	r3, [r3, #4]
 801037e:	2201      	movs	r2, #1
 8010380:	4252      	negs	r2, r2
 8010382:	625a      	str	r2, [r3, #36]	@ 0x24
    CryptoCtx.NvmCtx->FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 8010384:	4b05      	ldr	r3, [pc, #20]	@ (801039c <ResetFCnts+0x6c>)
 8010386:	685b      	ldr	r3, [r3, #4]
 8010388:	2201      	movs	r2, #1
 801038a:	4252      	negs	r2, r2
 801038c:	629a      	str	r2, [r3, #40]	@ 0x28

    CryptoCtx.EventCryptoNvmCtxChanged( );
 801038e:	4b03      	ldr	r3, [pc, #12]	@ (801039c <ResetFCnts+0x6c>)
 8010390:	689b      	ldr	r3, [r3, #8]
 8010392:	4798      	blx	r3
}
 8010394:	46c0      	nop			@ (mov r8, r8)
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}
 801039a:	46c0      	nop			@ (mov r8, r8)
 801039c:	20001144 	.word	0x20001144

080103a0 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	af00      	add	r7, sp, #0
    return;
 80103a4:	46c0      	nop			@ (mov r8, r8)
}
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}
	...

080103ac <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmEvent cryptoNvmCtxChanged )
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b082      	sub	sp, #8
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 80103b4:	4b15      	ldr	r3, [pc, #84]	@ (801040c <LoRaMacCryptoInit+0x60>)
 80103b6:	4a16      	ldr	r2, [pc, #88]	@ (8010410 <LoRaMacCryptoInit+0x64>)
 80103b8:	605a      	str	r2, [r3, #4]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d003      	beq.n	80103c8 <LoRaMacCryptoInit+0x1c>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 80103c0:	4b12      	ldr	r3, [pc, #72]	@ (801040c <LoRaMacCryptoInit+0x60>)
 80103c2:	687a      	ldr	r2, [r7, #4]
 80103c4:	609a      	str	r2, [r3, #8]
 80103c6:	e002      	b.n	80103ce <LoRaMacCryptoInit+0x22>
    }
    else
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 80103c8:	4b10      	ldr	r3, [pc, #64]	@ (801040c <LoRaMacCryptoInit+0x60>)
 80103ca:	4a12      	ldr	r2, [pc, #72]	@ (8010414 <LoRaMacCryptoInit+0x68>)
 80103cc:	609a      	str	r2, [r3, #8]
    }

    // Initialize with default
    memset1( (uint8_t*) CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 80103ce:	4b0f      	ldr	r3, [pc, #60]	@ (801040c <LoRaMacCryptoInit+0x60>)
 80103d0:	685b      	ldr	r3, [r3, #4]
 80103d2:	2234      	movs	r2, #52	@ 0x34
 80103d4:	2100      	movs	r1, #0
 80103d6:	0018      	movs	r0, r3
 80103d8:	f005 f99c 	bl	8015714 <memset1>

    // Set default LoRaWAN version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 80103dc:	4b0b      	ldr	r3, [pc, #44]	@ (801040c <LoRaMacCryptoInit+0x60>)
 80103de:	685b      	ldr	r3, [r3, #4]
 80103e0:	2201      	movs	r2, #1
 80103e2:	70da      	strb	r2, [r3, #3]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 80103e4:	4b09      	ldr	r3, [pc, #36]	@ (801040c <LoRaMacCryptoInit+0x60>)
 80103e6:	685b      	ldr	r3, [r3, #4]
 80103e8:	2201      	movs	r2, #1
 80103ea:	709a      	strb	r2, [r3, #2]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 1;
 80103ec:	4b07      	ldr	r3, [pc, #28]	@ (801040c <LoRaMacCryptoInit+0x60>)
 80103ee:	685b      	ldr	r3, [r3, #4]
 80103f0:	2201      	movs	r2, #1
 80103f2:	705a      	strb	r2, [r3, #1]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Rfu = 0;
 80103f4:	4b05      	ldr	r3, [pc, #20]	@ (801040c <LoRaMacCryptoInit+0x60>)
 80103f6:	685b      	ldr	r3, [r3, #4]
 80103f8:	2200      	movs	r2, #0
 80103fa:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80103fc:	f7ff ff98 	bl	8010330 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8010400:	2300      	movs	r3, #0
}
 8010402:	0018      	movs	r0, r3
 8010404:	46bd      	mov	sp, r7
 8010406:	b002      	add	sp, #8
 8010408:	bd80      	pop	{r7, pc}
 801040a:	46c0      	nop			@ (mov r8, r8)
 801040c:	20001144 	.word	0x20001144
 8010410:	20001150 	.word	0x20001150
 8010414:	080103a1 	.word	0x080103a1

08010418 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b082      	sub	sp, #8
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
    CryptoCtx.NvmCtx->LrWanVersion = version;
 8010420:	4b04      	ldr	r3, [pc, #16]	@ (8010434 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8010422:	685b      	ldr	r3, [r3, #4]
 8010424:	687a      	ldr	r2, [r7, #4]
 8010426:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8010428:	2300      	movs	r3, #0
}
 801042a:	0018      	movs	r0, r3
 801042c:	46bd      	mov	sp, r7
 801042e:	b002      	add	sp, #8
 8010430:	bd80      	pop	{r7, pc}
 8010432:	46c0      	nop			@ (mov r8, r8)
 8010434:	20001144 	.word	0x20001144

08010438 <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b082      	sub	sp, #8
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( cryptoNvmCtx != 0 )
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d007      	beq.n	8010456 <LoRaMacCryptoRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* ) &NvmCryptoCtx, ( uint8_t* ) cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 8010446:	6879      	ldr	r1, [r7, #4]
 8010448:	4b05      	ldr	r3, [pc, #20]	@ (8010460 <LoRaMacCryptoRestoreNvmCtx+0x28>)
 801044a:	2234      	movs	r2, #52	@ 0x34
 801044c:	0018      	movs	r0, r3
 801044e:	f005 f923 	bl	8015698 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 8010452:	2300      	movs	r3, #0
 8010454:	e000      	b.n	8010458 <LoRaMacCryptoRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010456:	230a      	movs	r3, #10
    }
}
 8010458:	0018      	movs	r0, r3
 801045a:	46bd      	mov	sp, r7
 801045c:	b002      	add	sp, #8
 801045e:	bd80      	pop	{r7, pc}
 8010460:	20001150 	.word	0x20001150

08010464 <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2234      	movs	r2, #52	@ 0x34
 8010470:	601a      	str	r2, [r3, #0]
    return &NvmCryptoCtx;
 8010472:	4b02      	ldr	r3, [pc, #8]	@ (801047c <LoRaMacCryptoGetNvmCtx+0x18>)
}
 8010474:	0018      	movs	r0, r3
 8010476:	46bd      	mov	sp, r7
 8010478:	b002      	add	sp, #8
 801047a:	bd80      	pop	{r7, pc}
 801047c:	20001150 	.word	0x20001150

08010480 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b082      	sub	sp, #8
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d101      	bne.n	8010492 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801048e:	230a      	movs	r3, #10
 8010490:	e006      	b.n	80104a0 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 8010492:	4b05      	ldr	r3, [pc, #20]	@ (80104a8 <LoRaMacCryptoGetFCntUp+0x28>)
 8010494:	685b      	ldr	r3, [r3, #4]
 8010496:	68db      	ldr	r3, [r3, #12]
 8010498:	1c5a      	adds	r2, r3, #1
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801049e:	2300      	movs	r3, #0
}
 80104a0:	0018      	movs	r0, r3
 80104a2:	46bd      	mov	sp, r7
 80104a4:	b002      	add	sp, #8
 80104a6:	bd80      	pop	{r7, pc}
 80104a8:	20001144 	.word	0x20001144

080104ac <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 80104ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104ae:	b08d      	sub	sp, #52	@ 0x34
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	61ba      	str	r2, [r7, #24]
 80104b4:	617b      	str	r3, [r7, #20]
 80104b6:	230f      	movs	r3, #15
 80104b8:	2610      	movs	r6, #16
 80104ba:	199b      	adds	r3, r3, r6
 80104bc:	19db      	adds	r3, r3, r7
 80104be:	1c02      	adds	r2, r0, #0
 80104c0:	701a      	strb	r2, [r3, #0]
 80104c2:	230c      	movs	r3, #12
 80104c4:	0030      	movs	r0, r6
 80104c6:	181b      	adds	r3, r3, r0
 80104c8:	19db      	adds	r3, r3, r7
 80104ca:	1c0a      	adds	r2, r1, #0
 80104cc:	801a      	strh	r2, [r3, #0]
    uint32_t lastDown = 0;
 80104ce:	2300      	movs	r3, #0
 80104d0:	627b      	str	r3, [r7, #36]	@ 0x24
    int32_t fCntDiff = 0;
 80104d2:	2300      	movs	r3, #0
 80104d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80104d6:	231b      	movs	r3, #27
 80104d8:	181b      	adds	r3, r3, r0
 80104da:	19db      	adds	r3, r3, r7
 80104dc:	2213      	movs	r2, #19
 80104de:	701a      	strb	r2, [r3, #0]

    if( currentDown == NULL )
 80104e0:	697b      	ldr	r3, [r7, #20]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d101      	bne.n	80104ea <LoRaMacCryptoGetFCntDown+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80104e6:	230a      	movs	r3, #10
 80104e8:	e068      	b.n	80105bc <LoRaMacCryptoGetFCntDown+0x110>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80104ea:	221b      	movs	r2, #27
 80104ec:	2110      	movs	r1, #16
 80104ee:	1853      	adds	r3, r2, r1
 80104f0:	19de      	adds	r6, r3, r7
 80104f2:	2314      	movs	r3, #20
 80104f4:	185b      	adds	r3, r3, r1
 80104f6:	19da      	adds	r2, r3, r7
 80104f8:	230f      	movs	r3, #15
 80104fa:	185b      	adds	r3, r3, r1
 80104fc:	19db      	adds	r3, r3, r7
 80104fe:	781b      	ldrb	r3, [r3, #0]
 8010500:	0011      	movs	r1, r2
 8010502:	0018      	movs	r0, r3
 8010504:	f7ff fe54 	bl	80101b0 <GetLastFcntDown>
 8010508:	0003      	movs	r3, r0
 801050a:	7033      	strb	r3, [r6, #0]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801050c:	221b      	movs	r2, #27
 801050e:	2110      	movs	r1, #16
 8010510:	1853      	adds	r3, r2, r1
 8010512:	19db      	adds	r3, r3, r7
 8010514:	781b      	ldrb	r3, [r3, #0]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d003      	beq.n	8010522 <LoRaMacCryptoGetFCntDown+0x76>
    {
        return cryptoStatus;
 801051a:	1853      	adds	r3, r2, r1
 801051c:	19db      	adds	r3, r3, r7
 801051e:	781b      	ldrb	r3, [r3, #0]
 8010520:	e04c      	b.n	80105bc <LoRaMacCryptoGetFCntDown+0x110>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8010522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010524:	3301      	adds	r3, #1
 8010526:	d103      	bne.n	8010530 <LoRaMacCryptoGetFCntDown+0x84>
    {
         *currentDown = frameFcnt;
 8010528:	697b      	ldr	r3, [r7, #20]
 801052a:	69ba      	ldr	r2, [r7, #24]
 801052c:	601a      	str	r2, [r3, #0]
 801052e:	e020      	b.n	8010572 <LoRaMacCryptoGetFCntDown+0xc6>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8010530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010532:	041b      	lsls	r3, r3, #16
 8010534:	0c1b      	lsrs	r3, r3, #16
 8010536:	69ba      	ldr	r2, [r7, #24]
 8010538:	1ad3      	subs	r3, r2, r3
 801053a:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( fCntDiff > 0 )
 801053c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801053e:	2b00      	cmp	r3, #0
 8010540:	dd05      	ble.n	801054e <LoRaMacCryptoGetFCntDown+0xa2>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8010542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010546:	18d2      	adds	r2, r2, r3
 8010548:	697b      	ldr	r3, [r7, #20]
 801054a:	601a      	str	r2, [r3, #0]
 801054c:	e011      	b.n	8010572 <LoRaMacCryptoGetFCntDown+0xc6>
        }
        else if( fCntDiff == 0 )
 801054e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010550:	2b00      	cmp	r3, #0
 8010552:	d104      	bne.n	801055e <LoRaMacCryptoGetFCntDown+0xb2>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8010554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010556:	697b      	ldr	r3, [r7, #20]
 8010558:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 801055a:	2307      	movs	r3, #7
 801055c:	e02e      	b.n	80105bc <LoRaMacCryptoGetFCntDown+0x110>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 801055e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010560:	0c1b      	lsrs	r3, r3, #16
 8010562:	041a      	lsls	r2, r3, #16
 8010564:	69bb      	ldr	r3, [r7, #24]
 8010566:	18d3      	adds	r3, r2, r3
 8010568:	2280      	movs	r2, #128	@ 0x80
 801056a:	0252      	lsls	r2, r2, #9
 801056c:	189a      	adds	r2, r3, r2
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	601a      	str	r2, [r3, #0]
        }
    }


    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8010572:	4b14      	ldr	r3, [pc, #80]	@ (80105c4 <LoRaMacCryptoGetFCntDown+0x118>)
 8010574:	685b      	ldr	r3, [r3, #4]
 8010576:	789b      	ldrb	r3, [r3, #2]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d11e      	bne.n	80105ba <LoRaMacCryptoGetFCntDown+0x10e>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	60bb      	str	r3, [r7, #8]
 8010582:	2300      	movs	r3, #0
 8010584:	60fb      	str	r3, [r7, #12]
 8010586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010588:	603b      	str	r3, [r7, #0]
 801058a:	2300      	movs	r3, #0
 801058c:	607b      	str	r3, [r7, #4]
 801058e:	68ba      	ldr	r2, [r7, #8]
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	6838      	ldr	r0, [r7, #0]
 8010594:	6879      	ldr	r1, [r7, #4]
 8010596:	1a12      	subs	r2, r2, r0
 8010598:	418b      	sbcs	r3, r1
 801059a:	210c      	movs	r1, #12
 801059c:	2010      	movs	r0, #16
 801059e:	1809      	adds	r1, r1, r0
 80105a0:	19c9      	adds	r1, r1, r7
 80105a2:	8809      	ldrh	r1, [r1, #0]
 80105a4:	b289      	uxth	r1, r1
 80105a6:	000c      	movs	r4, r1
 80105a8:	2100      	movs	r1, #0
 80105aa:	000d      	movs	r5, r1
 80105ac:	429d      	cmp	r5, r3
 80105ae:	dc04      	bgt.n	80105ba <LoRaMacCryptoGetFCntDown+0x10e>
 80105b0:	d101      	bne.n	80105b6 <LoRaMacCryptoGetFCntDown+0x10a>
 80105b2:	4294      	cmp	r4, r2
 80105b4:	d801      	bhi.n	80105ba <LoRaMacCryptoGetFCntDown+0x10e>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 80105b6:	2308      	movs	r3, #8
 80105b8:	e000      	b.n	80105bc <LoRaMacCryptoGetFCntDown+0x110>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80105ba:	2300      	movs	r3, #0
}
 80105bc:	0018      	movs	r0, r3
 80105be:	46bd      	mov	sp, r7
 80105c0:	b00d      	add	sp, #52	@ 0x34
 80105c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105c4:	20001144 	.word	0x20001144

080105c8 <LoRaMacCryptoSetMulticastReference>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b082      	sub	sp, #8
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d101      	bne.n	80105da <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80105d6:	230a      	movs	r3, #10
 80105d8:	e018      	b.n	801060c <LoRaMacCryptoSetMulticastReference+0x44>
    }

    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 80105da:	4b0e      	ldr	r3, [pc, #56]	@ (8010614 <LoRaMacCryptoSetMulticastReference+0x4c>)
 80105dc:	685b      	ldr	r3, [r3, #4]
 80105de:	331c      	adds	r3, #28
 80105e0:	001a      	movs	r2, r3
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	61da      	str	r2, [r3, #28]
    multicastList[1].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 80105e6:	4b0b      	ldr	r3, [pc, #44]	@ (8010614 <LoRaMacCryptoSetMulticastReference+0x4c>)
 80105e8:	685a      	ldr	r2, [r3, #4]
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	3328      	adds	r3, #40	@ 0x28
 80105ee:	3220      	adds	r2, #32
 80105f0:	61da      	str	r2, [r3, #28]
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 80105f2:	4b08      	ldr	r3, [pc, #32]	@ (8010614 <LoRaMacCryptoSetMulticastReference+0x4c>)
 80105f4:	685a      	ldr	r2, [r3, #4]
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	3350      	adds	r3, #80	@ 0x50
 80105fa:	3224      	adds	r2, #36	@ 0x24
 80105fc:	61da      	str	r2, [r3, #28]
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 80105fe:	4b05      	ldr	r3, [pc, #20]	@ (8010614 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8010600:	685a      	ldr	r2, [r3, #4]
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	3378      	adds	r3, #120	@ 0x78
 8010606:	3228      	adds	r2, #40	@ 0x28
 8010608:	61da      	str	r2, [r3, #28]

    return LORAMAC_CRYPTO_SUCCESS;
 801060a:	2300      	movs	r3, #0
}
 801060c:	0018      	movs	r0, r3
 801060e:	46bd      	mov	sp, r7
 8010610:	b002      	add	sp, #8
 8010612:	bd80      	pop	{r7, pc}
 8010614:	20001144 	.word	0x20001144

08010618 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	0002      	movs	r2, r0
 8010620:	6039      	str	r1, [r7, #0]
 8010622:	1dfb      	adds	r3, r7, #7
 8010624:	701a      	strb	r2, [r3, #0]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8010626:	683a      	ldr	r2, [r7, #0]
 8010628:	1dfb      	adds	r3, r7, #7
 801062a:	781b      	ldrb	r3, [r3, #0]
 801062c:	0011      	movs	r1, r2
 801062e:	0018      	movs	r0, r3
 8010630:	f7f8 fe6c 	bl	800930c <SecureElementSetKey>
 8010634:	1e03      	subs	r3, r0, #0
 8010636:	d001      	beq.n	801063c <LoRaMacCryptoSetKey+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010638:	230f      	movs	r3, #15
 801063a:	e018      	b.n	801066e <LoRaMacCryptoSetKey+0x56>
    }
    if( ( keyID == GEN_APP_KEY ) || ( keyID == APP_KEY ) )
 801063c:	1dfb      	adds	r3, r7, #7
 801063e:	781b      	ldrb	r3, [r3, #0]
 8010640:	2b01      	cmp	r3, #1
 8010642:	d003      	beq.n	801064c <LoRaMacCryptoSetKey+0x34>
 8010644:	1dfb      	adds	r3, r7, #7
 8010646:	781b      	ldrb	r3, [r3, #0]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d10f      	bne.n	801066c <LoRaMacCryptoSetKey+0x54>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 801064c:	1dfb      	adds	r3, r7, #7
 801064e:	781b      	ldrb	r3, [r3, #0]
 8010650:	0018      	movs	r0, r3
 8010652:	f000 fb89 	bl	8010d68 <LoRaMacCryptoDeriveMcRootKey>
 8010656:	1e03      	subs	r3, r0, #0
 8010658:	d001      	beq.n	801065e <LoRaMacCryptoSetKey+0x46>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801065a:	230f      	movs	r3, #15
 801065c:	e007      	b.n	801066e <LoRaMacCryptoSetKey+0x56>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801065e:	2009      	movs	r0, #9
 8010660:	f000 fbc4 	bl	8010dec <LoRaMacCryptoDeriveMcKEKey>
 8010664:	1e03      	subs	r3, r0, #0
 8010666:	d001      	beq.n	801066c <LoRaMacCryptoSetKey+0x54>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010668:	230f      	movs	r3, #15
 801066a:	e000      	b.n	801066e <LoRaMacCryptoSetKey+0x56>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801066c:	2300      	movs	r3, #0
}
 801066e:	0018      	movs	r0, r3
 8010670:	46bd      	mov	sp, r7
 8010672:	b002      	add	sp, #8
 8010674:	bd80      	pop	{r7, pc}
	...

08010678 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b086      	sub	sp, #24
 801067c:	af02      	add	r7, sp, #8
 801067e:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d101      	bne.n	801068a <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010686:	230a      	movs	r3, #10
 8010688:	e039      	b.n	80106fe <LoRaMacCryptoPrepareJoinRequest+0x86>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801068a:	230f      	movs	r3, #15
 801068c:	18fb      	adds	r3, r7, r3
 801068e:	2202      	movs	r2, #2
 8010690:	701a      	strb	r2, [r3, #0]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8010692:	2300      	movs	r3, #0
 8010694:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8010696:	2308      	movs	r3, #8
 8010698:	18fb      	adds	r3, r7, r3
 801069a:	0018      	movs	r0, r3
 801069c:	f7f8 ffea 	bl	8009674 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 80106a0:	68ba      	ldr	r2, [r7, #8]
 80106a2:	4b19      	ldr	r3, [pc, #100]	@ (8010708 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 80106a4:	685b      	ldr	r3, [r3, #4]
 80106a6:	b292      	uxth	r2, r2
 80106a8:	809a      	strh	r2, [r3, #4]
#else
    CryptoCtx.NvmCtx->DevNonce++;
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 80106aa:	4b17      	ldr	r3, [pc, #92]	@ (8010708 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 80106ac:	689b      	ldr	r3, [r3, #8]
 80106ae:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 80106b0:	4b15      	ldr	r3, [pc, #84]	@ (8010708 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 80106b2:	685b      	ldr	r3, [r3, #4]
 80106b4:	889a      	ldrh	r2, [r3, #4]
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	0018      	movs	r0, r3
 80106be:	f000 fdbd 	bl	801123c <LoRaMacSerializerJoinRequest>
 80106c2:	1e03      	subs	r3, r0, #0
 80106c4:	d001      	beq.n	80106ca <LoRaMacCryptoPrepareJoinRequest+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80106c6:	2311      	movs	r3, #17
 80106c8:	e019      	b.n	80106fe <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6819      	ldr	r1, [r3, #0]
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	3318      	adds	r3, #24
 80106d2:	220f      	movs	r2, #15
 80106d4:	18ba      	adds	r2, r7, r2
 80106d6:	7812      	ldrb	r2, [r2, #0]
 80106d8:	9300      	str	r3, [sp, #0]
 80106da:	0013      	movs	r3, r2
 80106dc:	2213      	movs	r2, #19
 80106de:	2000      	movs	r0, #0
 80106e0:	f7f8 fe9e 	bl	8009420 <SecureElementComputeAesCmac>
 80106e4:	1e03      	subs	r3, r0, #0
 80106e6:	d001      	beq.n	80106ec <LoRaMacCryptoPrepareJoinRequest+0x74>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80106e8:	230f      	movs	r3, #15
 80106ea:	e008      	b.n	80106fe <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	0018      	movs	r0, r3
 80106f0:	f000 fda4 	bl	801123c <LoRaMacSerializerJoinRequest>
 80106f4:	1e03      	subs	r3, r0, #0
 80106f6:	d001      	beq.n	80106fc <LoRaMacCryptoPrepareJoinRequest+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80106f8:	2311      	movs	r3, #17
 80106fa:	e000      	b.n	80106fe <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80106fc:	2300      	movs	r3, #0
}
 80106fe:	0018      	movs	r0, r3
 8010700:	46bd      	mov	sp, r7
 8010702:	b004      	add	sp, #16
 8010704:	bd80      	pop	{r7, pc}
 8010706:	46c0      	nop			@ (mov r8, r8)
 8010708:	20001144 	.word	0x20001144

0801070c <LoRaMacCryptoHandleJoinAccept>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 801070c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801070e:	b0cb      	sub	sp, #300	@ 0x12c
 8010710:	af00      	add	r7, sp, #0
 8010712:	60b9      	str	r1, [r7, #8]
 8010714:	607a      	str	r2, [r7, #4]
 8010716:	4bd6      	ldr	r3, [pc, #856]	@ (8010a70 <LoRaMacCryptoHandleJoinAccept+0x364>)
 8010718:	2294      	movs	r2, #148	@ 0x94
 801071a:	0052      	lsls	r2, r2, #1
 801071c:	189b      	adds	r3, r3, r2
 801071e:	19db      	adds	r3, r3, r7
 8010720:	1c02      	adds	r2, r0, #0
 8010722:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d002      	beq.n	8010730 <LoRaMacCryptoHandleJoinAccept+0x24>
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d101      	bne.n	8010734 <LoRaMacCryptoHandleJoinAccept+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010730:	230a      	movs	r3, #10
 8010732:	e1bd      	b.n	8010ab0 <LoRaMacCryptoHandleJoinAccept+0x3a4>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8010734:	2392      	movs	r3, #146	@ 0x92
 8010736:	005b      	lsls	r3, r3, #1
 8010738:	18fb      	adds	r3, r7, r3
 801073a:	2213      	movs	r2, #19
 801073c:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID;
    KeyIdentifier_t encryptionKeyID;
    uint8_t micComputationOffset = 0;
 801073e:	2126      	movs	r1, #38	@ 0x26
 8010740:	31ff      	adds	r1, #255	@ 0xff
 8010742:	187b      	adds	r3, r7, r1
 8010744:	2200      	movs	r2, #0
 8010746:	701a      	strb	r2, [r3, #0]
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    uint8_t* devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce;
#endif

    // Determine decryption key and DevNonce for key derivation
    if( joinReqType == JOIN_REQ )
 8010748:	4bc9      	ldr	r3, [pc, #804]	@ (8010a70 <LoRaMacCryptoHandleJoinAccept+0x364>)
 801074a:	2294      	movs	r2, #148	@ 0x94
 801074c:	0052      	lsls	r2, r2, #1
 801074e:	189b      	adds	r3, r3, r2
 8010750:	19db      	adds	r3, r3, r7
 8010752:	781b      	ldrb	r3, [r3, #0]
 8010754:	2bff      	cmp	r3, #255	@ 0xff
 8010756:	d107      	bne.n	8010768 <LoRaMacCryptoHandleJoinAccept+0x5c>
    {
        encryptionKeyID = NWK_KEY;
 8010758:	2393      	movs	r3, #147	@ 0x93
 801075a:	005b      	lsls	r3, r3, #1
 801075c:	18fb      	adds	r3, r7, r3
 801075e:	2202      	movs	r2, #2
 8010760:	701a      	strb	r2, [r3, #0]
        micComputationOffset = CRYPTO_MIC_COMPUTATION_OFFSET;
 8010762:	187b      	adds	r3, r7, r1
 8010764:	220c      	movs	r2, #12
 8010766:	701a      	strb	r2, [r3, #0]
        }
    }
#endif
    // Decrypt header, skip MHDR
    uint8_t procBuffer[CRYPTO_MAXMESSAGE_SIZE + CRYPTO_MIC_COMPUTATION_OFFSET];
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	791b      	ldrb	r3, [r3, #4]
 801076c:	001a      	movs	r2, r3
 801076e:	2426      	movs	r4, #38	@ 0x26
 8010770:	34ff      	adds	r4, #255	@ 0xff
 8010772:	193b      	adds	r3, r7, r4
 8010774:	781b      	ldrb	r3, [r3, #0]
 8010776:	b29b      	uxth	r3, r3
 8010778:	18d3      	adds	r3, r2, r3
 801077a:	b29a      	uxth	r2, r3
 801077c:	2510      	movs	r5, #16
 801077e:	197b      	adds	r3, r7, r5
 8010780:	2100      	movs	r1, #0
 8010782:	0018      	movs	r0, r3
 8010784:	f004 ffc6 	bl	8015714 <memset1>

    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	1c58      	adds	r0, r3, #1
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	791b      	ldrb	r3, [r3, #4]
 8010792:	3b01      	subs	r3, #1
 8010794:	b299      	uxth	r1, r3
 8010796:	193b      	adds	r3, r7, r4
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	197a      	adds	r2, r7, r5
 801079c:	18d4      	adds	r4, r2, r3
 801079e:	2393      	movs	r3, #147	@ 0x93
 80107a0:	005b      	lsls	r3, r3, #1
 80107a2:	18fb      	adds	r3, r7, r3
 80107a4:	781a      	ldrb	r2, [r3, #0]
 80107a6:	0023      	movs	r3, r4
 80107a8:	f7f8 fe9c 	bl	80094e4 <SecureElementAesEncrypt>
 80107ac:	1e03      	subs	r3, r0, #0
 80107ae:	d001      	beq.n	80107b4 <LoRaMacCryptoHandleJoinAccept+0xa8>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80107b0:	230f      	movs	r3, #15
 80107b2:	e17d      	b.n	8010ab0 <LoRaMacCryptoHandleJoinAccept+0x3a4>
    }
    // Copy the result to an offset location to keep space for additional information which have to be added in case of 1.1 and later
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	1c58      	adds	r0, r3, #1
 80107ba:	2326      	movs	r3, #38	@ 0x26
 80107bc:	33ff      	adds	r3, #255	@ 0xff
 80107be:	18fb      	adds	r3, r7, r3
 80107c0:	781b      	ldrb	r3, [r3, #0]
 80107c2:	2210      	movs	r2, #16
 80107c4:	18ba      	adds	r2, r7, r2
 80107c6:	18d1      	adds	r1, r2, r3
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	791b      	ldrb	r3, [r3, #4]
 80107cc:	3b01      	subs	r3, #1
 80107ce:	b29b      	uxth	r3, r3
 80107d0:	001a      	movs	r2, r3
 80107d2:	f004 ff61 	bl	8015698 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	0018      	movs	r0, r3
 80107da:	f000 fb31 	bl	8010e40 <LoRaMacParserJoinAccept>
 80107de:	1e03      	subs	r3, r0, #0
 80107e0:	d001      	beq.n	80107e6 <LoRaMacCryptoHandleJoinAccept+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80107e2:	2310      	movs	r3, #16
 80107e4:	e164      	b.n	8010ab0 <LoRaMacCryptoHandleJoinAccept+0x3a4>
    }

    // Is it a LoRaWAN 1.1.0 or later ?
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	7c1b      	ldrb	r3, [r3, #16]
 80107ea:	227f      	movs	r2, #127	@ 0x7f
 80107ec:	4393      	bics	r3, r2
 80107ee:	b2db      	uxtb	r3, r3
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d009      	beq.n	8010808 <LoRaMacCryptoHandleJoinAccept+0xfc>
    {
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 80107f4:	4b9f      	ldr	r3, [pc, #636]	@ (8010a74 <LoRaMacCryptoHandleJoinAccept+0x368>)
 80107f6:	685b      	ldr	r3, [r3, #4]
 80107f8:	2201      	movs	r2, #1
 80107fa:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = J_S_INT_KEY;
 80107fc:	2328      	movs	r3, #40	@ 0x28
 80107fe:	33ff      	adds	r3, #255	@ 0xff
 8010800:	18fb      	adds	r3, r7, r3
 8010802:	2203      	movs	r2, #3
 8010804:	701a      	strb	r2, [r3, #0]
 8010806:	e008      	b.n	801081a <LoRaMacCryptoHandleJoinAccept+0x10e>
    }
    else
    {
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 0;
 8010808:	4b9a      	ldr	r3, [pc, #616]	@ (8010a74 <LoRaMacCryptoHandleJoinAccept+0x368>)
 801080a:	685b      	ldr	r3, [r3, #4]
 801080c:	2200      	movs	r2, #0
 801080e:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = NWK_KEY;
 8010810:	2328      	movs	r3, #40	@ 0x28
 8010812:	33ff      	adds	r3, #255	@ 0xff
 8010814:	18fb      	adds	r3, r7, r3
 8010816:	2202      	movs	r2, #2
 8010818:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 801081a:	4b96      	ldr	r3, [pc, #600]	@ (8010a74 <LoRaMacCryptoHandleJoinAccept+0x368>)
 801081c:	685b      	ldr	r3, [r3, #4]
 801081e:	789b      	ldrb	r3, [r3, #2]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d112      	bne.n	801084a <LoRaMacCryptoHandleJoinAccept+0x13e>
    {
        // For legacy mode :
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)
        if( SecureElementVerifyAesCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	6818      	ldr	r0, [r3, #0]
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	791b      	ldrb	r3, [r3, #4]
 801082c:	3b04      	subs	r3, #4
 801082e:	b299      	uxth	r1, r3
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010834:	2328      	movs	r3, #40	@ 0x28
 8010836:	33ff      	adds	r3, #255	@ 0xff
 8010838:	18fb      	adds	r3, r7, r3
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	f7f8 fe11 	bl	8009462 <SecureElementVerifyAesCmac>
 8010840:	1e03      	subs	r3, r0, #0
 8010842:	d100      	bne.n	8010846 <LoRaMacCryptoHandleJoinAccept+0x13a>
 8010844:	e097      	b.n	8010976 <LoRaMacCryptoHandleJoinAccept+0x26a>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010846:	230f      	movs	r3, #15
 8010848:	e132      	b.n	8010ab0 <LoRaMacCryptoHandleJoinAccept+0x3a4>
    {
        // For 1.1 and later:
        //   cmac = aes128_cmac(JSIntKey, JoinReqType | JoinEUI | DevNonce | MHDR | JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)

        // Prepare the msg for integrity check (adding JoinReqType, JoinEUI and DevNonce)
        uint16_t bufItr = 0;
 801084a:	2091      	movs	r0, #145	@ 0x91
 801084c:	0040      	lsls	r0, r0, #1
 801084e:	183b      	adds	r3, r7, r0
 8010850:	2200      	movs	r2, #0
 8010852:	801a      	strh	r2, [r3, #0]
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 8010854:	183b      	adds	r3, r7, r0
 8010856:	881b      	ldrh	r3, [r3, #0]
 8010858:	183a      	adds	r2, r7, r0
 801085a:	1c59      	adds	r1, r3, #1
 801085c:	8011      	strh	r1, [r2, #0]
 801085e:	0019      	movs	r1, r3
 8010860:	4b85      	ldr	r3, [pc, #532]	@ (8010a78 <LoRaMacCryptoHandleJoinAccept+0x36c>)
 8010862:	2594      	movs	r5, #148	@ 0x94
 8010864:	006d      	lsls	r5, r5, #1
 8010866:	195b      	adds	r3, r3, r5
 8010868:	19db      	adds	r3, r3, r7
 801086a:	4a81      	ldr	r2, [pc, #516]	@ (8010a70 <LoRaMacCryptoHandleJoinAccept+0x364>)
 801086c:	1952      	adds	r2, r2, r5
 801086e:	19d2      	adds	r2, r2, r7
 8010870:	7812      	ldrb	r2, [r2, #0]
 8010872:	545a      	strb	r2, [r3, r1]

        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8010874:	0004      	movs	r4, r0
 8010876:	193b      	adds	r3, r7, r4
 8010878:	881b      	ldrh	r3, [r3, #0]
 801087a:	2610      	movs	r6, #16
 801087c:	19ba      	adds	r2, r7, r6
 801087e:	18d3      	adds	r3, r2, r3
 8010880:	68b9      	ldr	r1, [r7, #8]
 8010882:	2208      	movs	r2, #8
 8010884:	0018      	movs	r0, r3
 8010886:	f004 ff23 	bl	80156d0 <memcpyr>
        bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801088a:	193b      	adds	r3, r7, r4
 801088c:	193a      	adds	r2, r7, r4
 801088e:	8812      	ldrh	r2, [r2, #0]
 8010890:	3208      	adds	r2, #8
 8010892:	801a      	strh	r2, [r3, #0]

        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 8010894:	4b77      	ldr	r3, [pc, #476]	@ (8010a74 <LoRaMacCryptoHandleJoinAccept+0x368>)
 8010896:	685b      	ldr	r3, [r3, #4]
 8010898:	8899      	ldrh	r1, [r3, #4]
 801089a:	193b      	adds	r3, r7, r4
 801089c:	881b      	ldrh	r3, [r3, #0]
 801089e:	193a      	adds	r2, r7, r4
 80108a0:	1c58      	adds	r0, r3, #1
 80108a2:	8010      	strh	r0, [r2, #0]
 80108a4:	001a      	movs	r2, r3
 80108a6:	b2c9      	uxtb	r1, r1
 80108a8:	4b73      	ldr	r3, [pc, #460]	@ (8010a78 <LoRaMacCryptoHandleJoinAccept+0x36c>)
 80108aa:	195b      	adds	r3, r3, r5
 80108ac:	19db      	adds	r3, r3, r7
 80108ae:	5499      	strb	r1, [r3, r2]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 80108b0:	4b70      	ldr	r3, [pc, #448]	@ (8010a74 <LoRaMacCryptoHandleJoinAccept+0x368>)
 80108b2:	685b      	ldr	r3, [r3, #4]
 80108b4:	889b      	ldrh	r3, [r3, #4]
 80108b6:	0a1b      	lsrs	r3, r3, #8
 80108b8:	b299      	uxth	r1, r3
 80108ba:	193b      	adds	r3, r7, r4
 80108bc:	881b      	ldrh	r3, [r3, #0]
 80108be:	193a      	adds	r2, r7, r4
 80108c0:	1c58      	adds	r0, r3, #1
 80108c2:	8010      	strh	r0, [r2, #0]
 80108c4:	001a      	movs	r2, r3
 80108c6:	b2c9      	uxtb	r1, r1
 80108c8:	4b6b      	ldr	r3, [pc, #428]	@ (8010a78 <LoRaMacCryptoHandleJoinAccept+0x36c>)
 80108ca:	195b      	adds	r3, r3, r5
 80108cc:	19db      	adds	r3, r3, r7
 80108ce:	5499      	strb	r1, [r3, r2]

        procBuffer[bufItr++] = macMsg->MHDR.Value;
 80108d0:	193b      	adds	r3, r7, r4
 80108d2:	881b      	ldrh	r3, [r3, #0]
 80108d4:	193a      	adds	r2, r7, r4
 80108d6:	1c59      	adds	r1, r3, #1
 80108d8:	8011      	strh	r1, [r2, #0]
 80108da:	001a      	movs	r2, r3
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	7959      	ldrb	r1, [r3, #5]
 80108e0:	4b65      	ldr	r3, [pc, #404]	@ (8010a78 <LoRaMacCryptoHandleJoinAccept+0x36c>)
 80108e2:	195b      	adds	r3, r3, r5
 80108e4:	19db      	adds	r3, r3, r7
 80108e6:	5499      	strb	r1, [r3, r2]

        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	791b      	ldrb	r3, [r3, #4]
 80108ec:	001a      	movs	r2, r3
 80108ee:	2326      	movs	r3, #38	@ 0x26
 80108f0:	33ff      	adds	r3, #255	@ 0xff
 80108f2:	18fb      	adds	r3, r7, r3
 80108f4:	781b      	ldrb	r3, [r3, #0]
 80108f6:	b29b      	uxth	r3, r3
 80108f8:	18d3      	adds	r3, r2, r3
 80108fa:	b29b      	uxth	r3, r3
 80108fc:	3b05      	subs	r3, #5
 80108fe:	b299      	uxth	r1, r3
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010904:	2328      	movs	r3, #40	@ 0x28
 8010906:	33ff      	adds	r3, #255	@ 0xff
 8010908:	18fb      	adds	r3, r7, r3
 801090a:	781b      	ldrb	r3, [r3, #0]
 801090c:	19b8      	adds	r0, r7, r6
 801090e:	f7f8 fda8 	bl	8009462 <SecureElementVerifyAesCmac>
 8010912:	1e03      	subs	r3, r0, #0
 8010914:	d001      	beq.n	801091a <LoRaMacCryptoHandleJoinAccept+0x20e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010916:	230f      	movs	r3, #15
 8010918:	e0ca      	b.n	8010ab0 <LoRaMacCryptoHandleJoinAccept+0x3a4>
        }

        // Check if the JoinNonce is greater as the previous one
        uint32_t currentJoinNonce = 0;
 801091a:	2300      	movs	r3, #0
 801091c:	228e      	movs	r2, #142	@ 0x8e
 801091e:	0052      	lsls	r2, r2, #1
 8010920:	18b9      	adds	r1, r7, r2
 8010922:	600b      	str	r3, [r1, #0]
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	799b      	ldrb	r3, [r3, #6]
 8010928:	18b9      	adds	r1, r7, r2
 801092a:	600b      	str	r3, [r1, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	79db      	ldrb	r3, [r3, #7]
 8010930:	021b      	lsls	r3, r3, #8
 8010932:	0011      	movs	r1, r2
 8010934:	18ba      	adds	r2, r7, r2
 8010936:	6812      	ldr	r2, [r2, #0]
 8010938:	4313      	orrs	r3, r2
 801093a:	000a      	movs	r2, r1
 801093c:	18b9      	adds	r1, r7, r2
 801093e:	600b      	str	r3, [r1, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	7a1b      	ldrb	r3, [r3, #8]
 8010944:	041b      	lsls	r3, r3, #16
 8010946:	0011      	movs	r1, r2
 8010948:	187a      	adds	r2, r7, r1
 801094a:	6812      	ldr	r2, [r2, #0]
 801094c:	4313      	orrs	r3, r2
 801094e:	187a      	adds	r2, r7, r1
 8010950:	6013      	str	r3, [r2, #0]

        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 8010952:	4b48      	ldr	r3, [pc, #288]	@ (8010a74 <LoRaMacCryptoHandleJoinAccept+0x368>)
 8010954:	685b      	ldr	r3, [r3, #4]
 8010956:	689b      	ldr	r3, [r3, #8]
 8010958:	187a      	adds	r2, r7, r1
 801095a:	6812      	ldr	r2, [r2, #0]
 801095c:	429a      	cmp	r2, r3
 801095e:	d908      	bls.n	8010972 <LoRaMacCryptoHandleJoinAccept+0x266>
        {
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
 8010960:	4b44      	ldr	r3, [pc, #272]	@ (8010a74 <LoRaMacCryptoHandleJoinAccept+0x368>)
 8010962:	685b      	ldr	r3, [r3, #4]
 8010964:	187a      	adds	r2, r7, r1
 8010966:	6812      	ldr	r2, [r2, #0]
 8010968:	609a      	str	r2, [r3, #8]
            CryptoCtx.EventCryptoNvmCtxChanged( );
 801096a:	4b42      	ldr	r3, [pc, #264]	@ (8010a74 <LoRaMacCryptoHandleJoinAccept+0x368>)
 801096c:	689b      	ldr	r3, [r3, #8]
 801096e:	4798      	blx	r3
 8010970:	e001      	b.n	8010976 <LoRaMacCryptoHandleJoinAccept+0x26a>
        }
        else
        {
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8010972:	2303      	movs	r3, #3
 8010974:	e09c      	b.n	8010ab0 <LoRaMacCryptoHandleJoinAccept+0x3a4>
    }
    else
#endif
    {
        // prior LoRaWAN 1.1.0
        retval = LoRaMacCryptoDeriveMcRootKey( GEN_APP_KEY );
 8010976:	2592      	movs	r5, #146	@ 0x92
 8010978:	006d      	lsls	r5, r5, #1
 801097a:	197c      	adds	r4, r7, r5
 801097c:	2001      	movs	r0, #1
 801097e:	f000 f9f3 	bl	8010d68 <LoRaMacCryptoDeriveMcRootKey>
 8010982:	0003      	movs	r3, r0
 8010984:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010986:	002a      	movs	r2, r5
 8010988:	18bb      	adds	r3, r7, r2
 801098a:	781b      	ldrb	r3, [r3, #0]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d002      	beq.n	8010996 <LoRaMacCryptoHandleJoinAccept+0x28a>
        {
            return retval;
 8010990:	18bb      	adds	r3, r7, r2
 8010992:	781b      	ldrb	r3, [r3, #0]
 8010994:	e08c      	b.n	8010ab0 <LoRaMacCryptoHandleJoinAccept+0x3a4>
        }

        retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8010996:	2592      	movs	r5, #146	@ 0x92
 8010998:	006d      	lsls	r5, r5, #1
 801099a:	197c      	adds	r4, r7, r5
 801099c:	2009      	movs	r0, #9
 801099e:	f000 fa25 	bl	8010dec <LoRaMacCryptoDeriveMcKEKey>
 80109a2:	0003      	movs	r3, r0
 80109a4:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80109a6:	002a      	movs	r2, r5
 80109a8:	18bb      	adds	r3, r7, r2
 80109aa:	781b      	ldrb	r3, [r3, #0]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d002      	beq.n	80109b6 <LoRaMacCryptoHandleJoinAccept+0x2aa>
        {
            return retval;
 80109b0:	18bb      	adds	r3, r7, r2
 80109b2:	781b      	ldrb	r3, [r3, #0]
 80109b4:	e07c      	b.n	8010ab0 <LoRaMacCryptoHandleJoinAccept+0x3a4>
        }

        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	1d99      	adds	r1, r3, #6
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	3309      	adds	r3, #9
 80109be:	001a      	movs	r2, r3
 80109c0:	4b2c      	ldr	r3, [pc, #176]	@ (8010a74 <LoRaMacCryptoHandleJoinAccept+0x368>)
 80109c2:	685b      	ldr	r3, [r3, #4]
 80109c4:	3304      	adds	r3, #4
 80109c6:	2592      	movs	r5, #146	@ 0x92
 80109c8:	006d      	lsls	r5, r5, #1
 80109ca:	197c      	adds	r4, r7, r5
 80109cc:	2008      	movs	r0, #8
 80109ce:	f7ff fb8d 	bl	80100ec <DeriveSessionKey10x>
 80109d2:	0003      	movs	r3, r0
 80109d4:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80109d6:	197b      	adds	r3, r7, r5
 80109d8:	781b      	ldrb	r3, [r3, #0]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d002      	beq.n	80109e4 <LoRaMacCryptoHandleJoinAccept+0x2d8>
        {
            return retval;
 80109de:	197b      	adds	r3, r7, r5
 80109e0:	781b      	ldrb	r3, [r3, #0]
 80109e2:	e065      	b.n	8010ab0 <LoRaMacCryptoHandleJoinAccept+0x3a4>
        }

        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	1d99      	adds	r1, r3, #6
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	3309      	adds	r3, #9
 80109ec:	001a      	movs	r2, r3
 80109ee:	4b21      	ldr	r3, [pc, #132]	@ (8010a74 <LoRaMacCryptoHandleJoinAccept+0x368>)
 80109f0:	685b      	ldr	r3, [r3, #4]
 80109f2:	3304      	adds	r3, #4
 80109f4:	2592      	movs	r5, #146	@ 0x92
 80109f6:	006d      	lsls	r5, r5, #1
 80109f8:	197c      	adds	r4, r7, r5
 80109fa:	2007      	movs	r0, #7
 80109fc:	f7ff fb76 	bl	80100ec <DeriveSessionKey10x>
 8010a00:	0003      	movs	r3, r0
 8010a02:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010a04:	197b      	adds	r3, r7, r5
 8010a06:	781b      	ldrb	r3, [r3, #0]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d002      	beq.n	8010a12 <LoRaMacCryptoHandleJoinAccept+0x306>
        {
            return retval;
 8010a0c:	197b      	adds	r3, r7, r5
 8010a0e:	781b      	ldrb	r3, [r3, #0]
 8010a10:	e04e      	b.n	8010ab0 <LoRaMacCryptoHandleJoinAccept+0x3a4>
        }

        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	1d99      	adds	r1, r3, #6
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	3309      	adds	r3, #9
 8010a1a:	001a      	movs	r2, r3
 8010a1c:	4b15      	ldr	r3, [pc, #84]	@ (8010a74 <LoRaMacCryptoHandleJoinAccept+0x368>)
 8010a1e:	685b      	ldr	r3, [r3, #4]
 8010a20:	3304      	adds	r3, #4
 8010a22:	2592      	movs	r5, #146	@ 0x92
 8010a24:	006d      	lsls	r5, r5, #1
 8010a26:	197c      	adds	r4, r7, r5
 8010a28:	2005      	movs	r0, #5
 8010a2a:	f7ff fb5f 	bl	80100ec <DeriveSessionKey10x>
 8010a2e:	0003      	movs	r3, r0
 8010a30:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010a32:	197b      	adds	r3, r7, r5
 8010a34:	781b      	ldrb	r3, [r3, #0]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d002      	beq.n	8010a40 <LoRaMacCryptoHandleJoinAccept+0x334>
        {
            return retval;
 8010a3a:	197b      	adds	r3, r7, r5
 8010a3c:	781b      	ldrb	r3, [r3, #0]
 8010a3e:	e037      	b.n	8010ab0 <LoRaMacCryptoHandleJoinAccept+0x3a4>
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	1d99      	adds	r1, r3, #6
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	3309      	adds	r3, #9
 8010a48:	001a      	movs	r2, r3
 8010a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8010a74 <LoRaMacCryptoHandleJoinAccept+0x368>)
 8010a4c:	685b      	ldr	r3, [r3, #4]
 8010a4e:	3304      	adds	r3, #4
 8010a50:	2592      	movs	r5, #146	@ 0x92
 8010a52:	006d      	lsls	r5, r5, #1
 8010a54:	197c      	adds	r4, r7, r5
 8010a56:	2006      	movs	r0, #6
 8010a58:	f7ff fb48 	bl	80100ec <DeriveSessionKey10x>
 8010a5c:	0003      	movs	r3, r0
 8010a5e:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010a60:	197b      	adds	r3, r7, r5
 8010a62:	781b      	ldrb	r3, [r3, #0]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d009      	beq.n	8010a7c <LoRaMacCryptoHandleJoinAccept+0x370>
        {
            return retval;
 8010a68:	197b      	adds	r3, r7, r5
 8010a6a:	781b      	ldrb	r3, [r3, #0]
 8010a6c:	e020      	b.n	8010ab0 <LoRaMacCryptoHandleJoinAccept+0x3a4>
 8010a6e:	46c0      	nop			@ (mov r8, r8)
 8010a70:	fffffee7 	.word	0xfffffee7
 8010a74:	20001144 	.word	0x20001144
 8010a78:	fffffee8 	.word	0xfffffee8
        }
    }

    // Join-Accept is successfully processed, reset frame counters
    CryptoCtx.RJcount0 = 0;
 8010a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8010ab8 <LoRaMacCryptoHandleJoinAccept+0x3ac>)
 8010a7e:	2200      	movs	r2, #0
 8010a80:	801a      	strh	r2, [r3, #0]
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8010a82:	4b0d      	ldr	r3, [pc, #52]	@ (8010ab8 <LoRaMacCryptoHandleJoinAccept+0x3ac>)
 8010a84:	685b      	ldr	r3, [r3, #4]
 8010a86:	2200      	movs	r2, #0
 8010a88:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8010a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8010ab8 <LoRaMacCryptoHandleJoinAccept+0x3ac>)
 8010a8c:	685b      	ldr	r3, [r3, #4]
 8010a8e:	2201      	movs	r2, #1
 8010a90:	4252      	negs	r2, r2
 8010a92:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8010a94:	4b08      	ldr	r3, [pc, #32]	@ (8010ab8 <LoRaMacCryptoHandleJoinAccept+0x3ac>)
 8010a96:	685b      	ldr	r3, [r3, #4]
 8010a98:	2201      	movs	r2, #1
 8010a9a:	4252      	negs	r2, r2
 8010a9c:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8010a9e:	4b06      	ldr	r3, [pc, #24]	@ (8010ab8 <LoRaMacCryptoHandleJoinAccept+0x3ac>)
 8010aa0:	685b      	ldr	r3, [r3, #4]
 8010aa2:	2201      	movs	r2, #1
 8010aa4:	4252      	negs	r2, r2
 8010aa6:	615a      	str	r2, [r3, #20]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8010aa8:	4b03      	ldr	r3, [pc, #12]	@ (8010ab8 <LoRaMacCryptoHandleJoinAccept+0x3ac>)
 8010aaa:	689b      	ldr	r3, [r3, #8]
 8010aac:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 8010aae:	2300      	movs	r3, #0
}
 8010ab0:	0018      	movs	r0, r3
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	b04b      	add	sp, #300	@ 0x12c
 8010ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ab8:	20001144 	.word	0x20001144

08010abc <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8010abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010abe:	b08b      	sub	sp, #44	@ 0x2c
 8010ac0:	af04      	add	r7, sp, #16
 8010ac2:	60f8      	str	r0, [r7, #12]
 8010ac4:	0008      	movs	r0, r1
 8010ac6:	0011      	movs	r1, r2
 8010ac8:	607b      	str	r3, [r7, #4]
 8010aca:	230b      	movs	r3, #11
 8010acc:	18fb      	adds	r3, r7, r3
 8010ace:	1c02      	adds	r2, r0, #0
 8010ad0:	701a      	strb	r2, [r3, #0]
 8010ad2:	230a      	movs	r3, #10
 8010ad4:	18fb      	adds	r3, r7, r3
 8010ad6:	1c0a      	adds	r2, r1, #0
 8010ad8:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8010ada:	2316      	movs	r3, #22
 8010adc:	18fb      	adds	r3, r7, r3
 8010ade:	2213      	movs	r2, #19
 8010ae0:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8010ae2:	2317      	movs	r3, #23
 8010ae4:	18fb      	adds	r3, r7, r3
 8010ae6:	2208      	movs	r2, #8
 8010ae8:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d101      	bne.n	8010af4 <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010af0:	230a      	movs	r3, #10
 8010af2:	e06a      	b.n	8010bca <LoRaMacCryptoSecureMessage+0x10e>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 8010af4:	4b37      	ldr	r3, [pc, #220]	@ (8010bd4 <LoRaMacCryptoSecureMessage+0x118>)
 8010af6:	685b      	ldr	r3, [r3, #4]
 8010af8:	68db      	ldr	r3, [r3, #12]
 8010afa:	68fa      	ldr	r2, [r7, #12]
 8010afc:	429a      	cmp	r2, r3
 8010afe:	d201      	bcs.n	8010b04 <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8010b00:	2306      	movs	r3, #6
 8010b02:	e062      	b.n	8010bca <LoRaMacCryptoSecureMessage+0x10e>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2220      	movs	r2, #32
 8010b08:	5c9b      	ldrb	r3, [r3, r2]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d103      	bne.n	8010b16 <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 8010b0e:	2317      	movs	r3, #23
 8010b10:	18fb      	adds	r3, r7, r3
 8010b12:	2207      	movs	r2, #7
 8010b14:	701a      	strb	r2, [r3, #0]
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 8010b16:	4b2f      	ldr	r3, [pc, #188]	@ (8010bd4 <LoRaMacCryptoSecureMessage+0x118>)
 8010b18:	685b      	ldr	r3, [r3, #4]
 8010b1a:	68db      	ldr	r3, [r3, #12]
 8010b1c:	68fa      	ldr	r2, [r7, #12]
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	d91c      	bls.n	8010b5c <LoRaMacCryptoSecureMessage+0xa0>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2228      	movs	r2, #40	@ 0x28
 8010b2a:	5c9b      	ldrb	r3, [r3, r2]
 8010b2c:	b219      	sxth	r1, r3
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	689d      	ldr	r5, [r3, #8]
 8010b32:	2616      	movs	r6, #22
 8010b34:	19bc      	adds	r4, r7, r6
 8010b36:	2317      	movs	r3, #23
 8010b38:	18fb      	adds	r3, r7, r3
 8010b3a:	781a      	ldrb	r2, [r3, #0]
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	9301      	str	r3, [sp, #4]
 8010b40:	2300      	movs	r3, #0
 8010b42:	9300      	str	r3, [sp, #0]
 8010b44:	002b      	movs	r3, r5
 8010b46:	f7ff f867 	bl	800fc18 <PayloadEncrypt>
 8010b4a:	0003      	movs	r3, r0
 8010b4c:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010b4e:	19bb      	adds	r3, r7, r6
 8010b50:	781b      	ldrb	r3, [r3, #0]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d002      	beq.n	8010b5c <LoRaMacCryptoSecureMessage+0xa0>
        {
            return retval;
 8010b56:	19bb      	adds	r3, r7, r6
 8010b58:	781b      	ldrb	r3, [r3, #0]
 8010b5a:	e036      	b.n	8010bca <LoRaMacCryptoSecureMessage+0x10e>
                return retval;
            }
        }
#endif
    }
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 8010b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8010bd4 <LoRaMacCryptoSecureMessage+0x118>)
 8010b5e:	685b      	ldr	r3, [r3, #4]
 8010b60:	68fa      	ldr	r2, [r7, #12]
 8010b62:	60da      	str	r2, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8010b64:	4b1b      	ldr	r3, [pc, #108]	@ (8010bd4 <LoRaMacCryptoSecureMessage+0x118>)
 8010b66:	689b      	ldr	r3, [r3, #8]
 8010b68:	4798      	blx	r3

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	0018      	movs	r0, r3
 8010b6e:	f000 fc00 	bl	8011372 <LoRaMacSerializerData>
 8010b72:	1e03      	subs	r3, r0, #0
 8010b74:	d001      	beq.n	8010b7a <LoRaMacCryptoSecureMessage+0xbe>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8010b76:	2311      	movs	r3, #17
 8010b78:	e027      	b.n	8010bca <LoRaMacCryptoSecureMessage+0x10e>
    else
#endif
    {
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	6818      	ldr	r0, [r3, #0]
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	791b      	ldrb	r3, [r3, #4]
 8010b82:	3b04      	subs	r3, #4
 8010b84:	b299      	uxth	r1, r3
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	689b      	ldr	r3, [r3, #8]
 8010b8a:	687a      	ldr	r2, [r7, #4]
 8010b8c:	322c      	adds	r2, #44	@ 0x2c
 8010b8e:	2516      	movs	r5, #22
 8010b90:	197c      	adds	r4, r7, r5
 8010b92:	9203      	str	r2, [sp, #12]
 8010b94:	68fa      	ldr	r2, [r7, #12]
 8010b96:	9202      	str	r2, [sp, #8]
 8010b98:	9301      	str	r3, [sp, #4]
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	9300      	str	r3, [sp, #0]
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	2207      	movs	r2, #7
 8010ba2:	f7ff f98f 	bl	800fec4 <ComputeCmacB0>
 8010ba6:	0003      	movs	r3, r0
 8010ba8:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010baa:	197b      	adds	r3, r7, r5
 8010bac:	781b      	ldrb	r3, [r3, #0]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d002      	beq.n	8010bb8 <LoRaMacCryptoSecureMessage+0xfc>
        {
            return retval;
 8010bb2:	197b      	adds	r3, r7, r5
 8010bb4:	781b      	ldrb	r3, [r3, #0]
 8010bb6:	e008      	b.n	8010bca <LoRaMacCryptoSecureMessage+0x10e>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	0018      	movs	r0, r3
 8010bbc:	f000 fbd9 	bl	8011372 <LoRaMacSerializerData>
 8010bc0:	1e03      	subs	r3, r0, #0
 8010bc2:	d001      	beq.n	8010bc8 <LoRaMacCryptoSecureMessage+0x10c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8010bc4:	2311      	movs	r3, #17
 8010bc6:	e000      	b.n	8010bca <LoRaMacCryptoSecureMessage+0x10e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010bc8:	2300      	movs	r3, #0
}
 8010bca:	0018      	movs	r0, r3
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	b007      	add	sp, #28
 8010bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bd2:	46c0      	nop			@ (mov r8, r8)
 8010bd4:	20001144 	.word	0x20001144

08010bd8 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8010bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bda:	b08b      	sub	sp, #44	@ 0x2c
 8010bdc:	af04      	add	r7, sp, #16
 8010bde:	60b9      	str	r1, [r7, #8]
 8010be0:	0011      	movs	r1, r2
 8010be2:	607b      	str	r3, [r7, #4]
 8010be4:	230f      	movs	r3, #15
 8010be6:	18fb      	adds	r3, r7, r3
 8010be8:	1c02      	adds	r2, r0, #0
 8010bea:	701a      	strb	r2, [r3, #0]
 8010bec:	230e      	movs	r3, #14
 8010bee:	18fb      	adds	r3, r7, r3
 8010bf0:	1c0a      	adds	r2, r1, #0
 8010bf2:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
 8010bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d101      	bne.n	8010bfe <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010bfa:	230a      	movs	r3, #10
 8010bfc:	e0ad      	b.n	8010d5a <LoRaMacCryptoUnsecureMessage+0x182>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8010bfe:	687a      	ldr	r2, [r7, #4]
 8010c00:	230e      	movs	r3, #14
 8010c02:	18fb      	adds	r3, r7, r3
 8010c04:	781b      	ldrb	r3, [r3, #0]
 8010c06:	0011      	movs	r1, r2
 8010c08:	0018      	movs	r0, r3
 8010c0a:	f7ff fb2d 	bl	8010268 <CheckFCntDown>
 8010c0e:	0003      	movs	r3, r0
 8010c10:	001a      	movs	r2, r3
 8010c12:	2301      	movs	r3, #1
 8010c14:	4053      	eors	r3, r2
 8010c16:	b2db      	uxtb	r3, r3
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d001      	beq.n	8010c20 <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8010c1c:	2306      	movs	r3, #6
 8010c1e:	e09c      	b.n	8010d5a <LoRaMacCryptoUnsecureMessage+0x182>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8010c20:	2315      	movs	r3, #21
 8010c22:	18fb      	adds	r3, r7, r3
 8010c24:	2213      	movs	r2, #19
 8010c26:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8010c28:	2317      	movs	r3, #23
 8010c2a:	18fb      	adds	r3, r7, r3
 8010c2c:	2208      	movs	r2, #8
 8010c2e:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
 8010c30:	2314      	movs	r3, #20
 8010c32:	18fb      	adds	r3, r7, r3
 8010c34:	2206      	movs	r2, #6
 8010c36:	701a      	strb	r2, [r3, #0]
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8010c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c3a:	0018      	movs	r0, r3
 8010c3c:	f000 f9f0 	bl	8011020 <LoRaMacParserData>
 8010c40:	1e03      	subs	r3, r0, #0
 8010c42:	d001      	beq.n	8010c48 <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8010c44:	2310      	movs	r3, #16
 8010c46:	e088      	b.n	8010d5a <LoRaMacCryptoUnsecureMessage+0x182>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8010c48:	2515      	movs	r5, #21
 8010c4a:	197c      	adds	r4, r7, r5
 8010c4c:	2310      	movs	r3, #16
 8010c4e:	18fa      	adds	r2, r7, r3
 8010c50:	230f      	movs	r3, #15
 8010c52:	18fb      	adds	r3, r7, r3
 8010c54:	781b      	ldrb	r3, [r3, #0]
 8010c56:	0011      	movs	r1, r2
 8010c58:	0018      	movs	r0, r3
 8010c5a:	f7ff fa15 	bl	8010088 <GetKeyAddrItem>
 8010c5e:	0003      	movs	r3, r0
 8010c60:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010c62:	197b      	adds	r3, r7, r5
 8010c64:	781b      	ldrb	r3, [r3, #0]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d002      	beq.n	8010c70 <LoRaMacCryptoUnsecureMessage+0x98>
    {
        return retval;
 8010c6a:	197b      	adds	r3, r7, r5
 8010c6c:	781b      	ldrb	r3, [r3, #0]
 8010c6e:	e074      	b.n	8010d5a <LoRaMacCryptoUnsecureMessage+0x182>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8010c70:	693a      	ldr	r2, [r7, #16]
 8010c72:	2317      	movs	r3, #23
 8010c74:	18fb      	adds	r3, r7, r3
 8010c76:	7852      	ldrb	r2, [r2, #1]
 8010c78:	701a      	strb	r2, [r3, #0]
    micComputationKeyID = curItem->NwkSkey;
 8010c7a:	693a      	ldr	r2, [r7, #16]
 8010c7c:	2314      	movs	r3, #20
 8010c7e:	18fb      	adds	r3, r7, r3
 8010c80:	7892      	ldrb	r2, [r2, #2]
 8010c82:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8010c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c86:	689b      	ldr	r3, [r3, #8]
 8010c88:	68ba      	ldr	r2, [r7, #8]
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d001      	beq.n	8010c92 <LoRaMacCryptoUnsecureMessage+0xba>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8010c8e:	2302      	movs	r3, #2
 8010c90:	e063      	b.n	8010d5a <LoRaMacCryptoUnsecureMessage+0x182>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8010c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c94:	7b1b      	ldrb	r3, [r3, #12]
 8010c96:	069b      	lsls	r3, r3, #26
 8010c98:	0fdb      	lsrs	r3, r3, #31
 8010c9a:	b2db      	uxtb	r3, r3
 8010c9c:	001a      	movs	r2, r3
 8010c9e:	2016      	movs	r0, #22
 8010ca0:	183b      	adds	r3, r7, r0
 8010ca2:	1e51      	subs	r1, r2, #1
 8010ca4:	418a      	sbcs	r2, r1
 8010ca6:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8010ca8:	4b2e      	ldr	r3, [pc, #184]	@ (8010d64 <LoRaMacCryptoUnsecureMessage+0x18c>)
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	789b      	ldrb	r3, [r3, #2]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d102      	bne.n	8010cb8 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8010cb2:	183b      	adds	r3, r7, r0
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8010cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cba:	6818      	ldr	r0, [r3, #0]
 8010cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cbe:	791b      	ldrb	r3, [r3, #4]
 8010cc0:	3b04      	subs	r3, #4
 8010cc2:	b299      	uxth	r1, r3
 8010cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cc8:	2615      	movs	r6, #21
 8010cca:	19bc      	adds	r4, r7, r6
 8010ccc:	2216      	movs	r2, #22
 8010cce:	18ba      	adds	r2, r7, r2
 8010cd0:	7815      	ldrb	r5, [r2, #0]
 8010cd2:	2214      	movs	r2, #20
 8010cd4:	18ba      	adds	r2, r7, r2
 8010cd6:	7812      	ldrb	r2, [r2, #0]
 8010cd8:	9303      	str	r3, [sp, #12]
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	9302      	str	r3, [sp, #8]
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	9301      	str	r3, [sp, #4]
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	9300      	str	r3, [sp, #0]
 8010ce6:	002b      	movs	r3, r5
 8010ce8:	f7ff f934 	bl	800ff54 <VerifyCmacB0>
 8010cec:	0003      	movs	r3, r0
 8010cee:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010cf0:	19bb      	adds	r3, r7, r6
 8010cf2:	781b      	ldrb	r3, [r3, #0]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d002      	beq.n	8010cfe <LoRaMacCryptoUnsecureMessage+0x126>
    {
        return retval;
 8010cf8:	19bb      	adds	r3, r7, r6
 8010cfa:	781b      	ldrb	r3, [r3, #0]
 8010cfc:	e02d      	b.n	8010d5a <LoRaMacCryptoUnsecureMessage+0x182>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8010cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d00:	2220      	movs	r2, #32
 8010d02:	5c9b      	ldrb	r3, [r3, r2]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d103      	bne.n	8010d10 <LoRaMacCryptoUnsecureMessage+0x138>
    {
        // Use network session encryption key
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 8010d08:	2317      	movs	r3, #23
 8010d0a:	18fb      	adds	r3, r7, r3
 8010d0c:	2207      	movs	r2, #7
 8010d0e:	701a      	strb	r2, [r3, #0]
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8010d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d12:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8010d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d16:	2228      	movs	r2, #40	@ 0x28
 8010d18:	5c9b      	ldrb	r3, [r3, r2]
 8010d1a:	b219      	sxth	r1, r3
 8010d1c:	2615      	movs	r6, #21
 8010d1e:	19bc      	adds	r4, r7, r6
 8010d20:	68bd      	ldr	r5, [r7, #8]
 8010d22:	2317      	movs	r3, #23
 8010d24:	18fb      	adds	r3, r7, r3
 8010d26:	781a      	ldrb	r2, [r3, #0]
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	9301      	str	r3, [sp, #4]
 8010d2c:	2301      	movs	r3, #1
 8010d2e:	9300      	str	r3, [sp, #0]
 8010d30:	002b      	movs	r3, r5
 8010d32:	f7fe ff71 	bl	800fc18 <PayloadEncrypt>
 8010d36:	0003      	movs	r3, r0
 8010d38:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010d3a:	19bb      	adds	r3, r7, r6
 8010d3c:	781b      	ldrb	r3, [r3, #0]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d002      	beq.n	8010d48 <LoRaMacCryptoUnsecureMessage+0x170>
    {
        return retval;
 8010d42:	19bb      	adds	r3, r7, r6
 8010d44:	781b      	ldrb	r3, [r3, #0]
 8010d46:	e008      	b.n	8010d5a <LoRaMacCryptoUnsecureMessage+0x182>
            return retval;
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8010d48:	687a      	ldr	r2, [r7, #4]
 8010d4a:	230e      	movs	r3, #14
 8010d4c:	18fb      	adds	r3, r7, r3
 8010d4e:	781b      	ldrb	r3, [r3, #0]
 8010d50:	0011      	movs	r1, r2
 8010d52:	0018      	movs	r0, r3
 8010d54:	f7ff faac 	bl	80102b0 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8010d58:	2300      	movs	r3, #0
}
 8010d5a:	0018      	movs	r0, r3
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	b007      	add	sp, #28
 8010d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d62:	46c0      	nop			@ (mov r8, r8)
 8010d64:	20001144 	.word	0x20001144

08010d68 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( KeyIdentifier_t keyID )
{
 8010d68:	b590      	push	{r4, r7, lr}
 8010d6a:	b087      	sub	sp, #28
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	0002      	movs	r2, r0
 8010d70:	1dfb      	adds	r3, r7, #7
 8010d72:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than GenAppKey for LoRaWAN 1.0.x or AppKey for LoRaWAN 1.1 or later
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 8010d74:	1dfb      	adds	r3, r7, #7
 8010d76:	781b      	ldrb	r3, [r3, #0]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d104      	bne.n	8010d86 <LoRaMacCryptoDeriveMcRootKey+0x1e>
 8010d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8010de8 <LoRaMacCryptoDeriveMcRootKey+0x80>)
 8010d7e:	685b      	ldr	r3, [r3, #4]
 8010d80:	789b      	ldrb	r3, [r3, #2]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d008      	beq.n	8010d98 <LoRaMacCryptoDeriveMcRootKey+0x30>
 8010d86:	1dfb      	adds	r3, r7, #7
 8010d88:	781b      	ldrb	r3, [r3, #0]
 8010d8a:	2b01      	cmp	r3, #1
 8010d8c:	d106      	bne.n	8010d9c <LoRaMacCryptoDeriveMcRootKey+0x34>
        ( ( keyID == GEN_APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 ) ) )
 8010d8e:	4b16      	ldr	r3, [pc, #88]	@ (8010de8 <LoRaMacCryptoDeriveMcRootKey+0x80>)
 8010d90:	685b      	ldr	r3, [r3, #4]
 8010d92:	789b      	ldrb	r3, [r3, #2]
 8010d94:	2b01      	cmp	r3, #1
 8010d96:	d101      	bne.n	8010d9c <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8010d98:	230b      	movs	r3, #11
 8010d9a:	e020      	b.n	8010dde <LoRaMacCryptoDeriveMcRootKey+0x76>
    }
    uint8_t compBase[16] = { 0 };
 8010d9c:	2408      	movs	r4, #8
 8010d9e:	193b      	adds	r3, r7, r4
 8010da0:	2200      	movs	r2, #0
 8010da2:	601a      	str	r2, [r3, #0]
 8010da4:	3304      	adds	r3, #4
 8010da6:	220c      	movs	r2, #12
 8010da8:	2100      	movs	r1, #0
 8010daa:	0018      	movs	r0, r3
 8010dac:	f008 fe8e 	bl	8019acc <memset>

    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 8010db0:	4b0d      	ldr	r3, [pc, #52]	@ (8010de8 <LoRaMacCryptoDeriveMcRootKey+0x80>)
 8010db2:	685b      	ldr	r3, [r3, #4]
 8010db4:	789b      	ldrb	r3, [r3, #2]
 8010db6:	2b01      	cmp	r3, #1
 8010db8:	d102      	bne.n	8010dc0 <LoRaMacCryptoDeriveMcRootKey+0x58>
    {
        compBase[0] = 0x20;
 8010dba:	193b      	adds	r3, r7, r4
 8010dbc:	2220      	movs	r2, #32
 8010dbe:	701a      	strb	r2, [r3, #0]
    }
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8010dc0:	4b09      	ldr	r3, [pc, #36]	@ (8010de8 <LoRaMacCryptoDeriveMcRootKey+0x80>)
 8010dc2:	685b      	ldr	r3, [r3, #4]
 8010dc4:	1dfa      	adds	r2, r7, #7
 8010dc6:	7812      	ldrb	r2, [r2, #0]
 8010dc8:	2108      	movs	r1, #8
 8010dca:	1879      	adds	r1, r7, r1
 8010dcc:	6818      	ldr	r0, [r3, #0]
 8010dce:	2309      	movs	r3, #9
 8010dd0:	f7f8 fbf2 	bl	80095b8 <SecureElementDeriveAndStoreKey>
 8010dd4:	1e03      	subs	r3, r0, #0
 8010dd6:	d001      	beq.n	8010ddc <LoRaMacCryptoDeriveMcRootKey+0x74>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010dd8:	230f      	movs	r3, #15
 8010dda:	e000      	b.n	8010dde <LoRaMacCryptoDeriveMcRootKey+0x76>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010ddc:	2300      	movs	r3, #0
}
 8010dde:	0018      	movs	r0, r3
 8010de0:	46bd      	mov	sp, r7
 8010de2:	b007      	add	sp, #28
 8010de4:	bd90      	pop	{r4, r7, pc}
 8010de6:	46c0      	nop			@ (mov r8, r8)
 8010de8:	20001144 	.word	0x20001144

08010dec <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8010dec:	b590      	push	{r4, r7, lr}
 8010dee:	b087      	sub	sp, #28
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	0002      	movs	r2, r0
 8010df4:	1dfb      	adds	r3, r7, #7
 8010df6:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8010df8:	1dfb      	adds	r3, r7, #7
 8010dfa:	781b      	ldrb	r3, [r3, #0]
 8010dfc:	2b09      	cmp	r3, #9
 8010dfe:	d001      	beq.n	8010e04 <LoRaMacCryptoDeriveMcKEKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8010e00:	230b      	movs	r3, #11
 8010e02:	e017      	b.n	8010e34 <LoRaMacCryptoDeriveMcKEKey+0x48>
    }
    uint8_t compBase[16] = { 0 };
 8010e04:	2408      	movs	r4, #8
 8010e06:	193b      	adds	r3, r7, r4
 8010e08:	2200      	movs	r2, #0
 8010e0a:	601a      	str	r2, [r3, #0]
 8010e0c:	3304      	adds	r3, #4
 8010e0e:	220c      	movs	r2, #12
 8010e10:	2100      	movs	r1, #0
 8010e12:	0018      	movs	r0, r3
 8010e14:	f008 fe5a 	bl	8019acc <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8010e18:	4b08      	ldr	r3, [pc, #32]	@ (8010e3c <LoRaMacCryptoDeriveMcKEKey+0x50>)
 8010e1a:	685b      	ldr	r3, [r3, #4]
 8010e1c:	1dfa      	adds	r2, r7, #7
 8010e1e:	7812      	ldrb	r2, [r2, #0]
 8010e20:	1939      	adds	r1, r7, r4
 8010e22:	6818      	ldr	r0, [r3, #0]
 8010e24:	237f      	movs	r3, #127	@ 0x7f
 8010e26:	f7f8 fbc7 	bl	80095b8 <SecureElementDeriveAndStoreKey>
 8010e2a:	1e03      	subs	r3, r0, #0
 8010e2c:	d001      	beq.n	8010e32 <LoRaMacCryptoDeriveMcKEKey+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010e2e:	230f      	movs	r3, #15
 8010e30:	e000      	b.n	8010e34 <LoRaMacCryptoDeriveMcKEKey+0x48>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010e32:	2300      	movs	r3, #0
}
 8010e34:	0018      	movs	r0, r3
 8010e36:	46bd      	mov	sp, r7
 8010e38:	b007      	add	sp, #28
 8010e3a:	bd90      	pop	{r4, r7, pc}
 8010e3c:	20001144 	.word	0x20001144

08010e40 <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8010e40:	b590      	push	{r4, r7, lr}
 8010e42:	b085      	sub	sp, #20
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d003      	beq.n	8010e56 <LoRaMacParserJoinAccept+0x16>
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d101      	bne.n	8010e5a <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8010e56:	2302      	movs	r3, #2
 8010e58:	e0de      	b.n	8011018 <LoRaMacParserJoinAccept+0x1d8>
    }

    uint16_t bufItr = 0;
 8010e5a:	240e      	movs	r4, #14
 8010e5c:	193b      	adds	r3, r7, r4
 8010e5e:	2200      	movs	r2, #0
 8010e60:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681a      	ldr	r2, [r3, #0]
 8010e66:	193b      	adds	r3, r7, r4
 8010e68:	881b      	ldrh	r3, [r3, #0]
 8010e6a:	1939      	adds	r1, r7, r4
 8010e6c:	1c58      	adds	r0, r3, #1
 8010e6e:	8008      	strh	r0, [r1, #0]
 8010e70:	18d3      	adds	r3, r2, r3
 8010e72:	781a      	ldrb	r2, [r3, #0]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	1d98      	adds	r0, r3, #6
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681a      	ldr	r2, [r3, #0]
 8010e80:	193b      	adds	r3, r7, r4
 8010e82:	881b      	ldrh	r3, [r3, #0]
 8010e84:	18d3      	adds	r3, r2, r3
 8010e86:	2203      	movs	r2, #3
 8010e88:	0019      	movs	r1, r3
 8010e8a:	f004 fc05 	bl	8015698 <memcpy1>
    bufItr = bufItr + 3;
 8010e8e:	193b      	adds	r3, r7, r4
 8010e90:	193a      	adds	r2, r7, r4
 8010e92:	8812      	ldrh	r2, [r2, #0]
 8010e94:	3203      	adds	r2, #3
 8010e96:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	3309      	adds	r3, #9
 8010e9c:	0018      	movs	r0, r3
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681a      	ldr	r2, [r3, #0]
 8010ea2:	193b      	adds	r3, r7, r4
 8010ea4:	881b      	ldrh	r3, [r3, #0]
 8010ea6:	18d3      	adds	r3, r2, r3
 8010ea8:	2203      	movs	r2, #3
 8010eaa:	0019      	movs	r1, r3
 8010eac:	f004 fbf4 	bl	8015698 <memcpy1>
    bufItr = bufItr + 3;
 8010eb0:	193b      	adds	r3, r7, r4
 8010eb2:	193a      	adds	r2, r7, r4
 8010eb4:	8812      	ldrh	r2, [r2, #0]
 8010eb6:	3203      	adds	r2, #3
 8010eb8:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681a      	ldr	r2, [r3, #0]
 8010ebe:	193b      	adds	r3, r7, r4
 8010ec0:	881b      	ldrh	r3, [r3, #0]
 8010ec2:	1939      	adds	r1, r7, r4
 8010ec4:	1c58      	adds	r0, r3, #1
 8010ec6:	8008      	strh	r0, [r1, #0]
 8010ec8:	18d3      	adds	r3, r2, r3
 8010eca:	781b      	ldrb	r3, [r3, #0]
 8010ecc:	001a      	movs	r2, r3
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681a      	ldr	r2, [r3, #0]
 8010ed6:	193b      	adds	r3, r7, r4
 8010ed8:	881b      	ldrh	r3, [r3, #0]
 8010eda:	1939      	adds	r1, r7, r4
 8010edc:	1c58      	adds	r0, r3, #1
 8010ede:	8008      	strh	r0, [r1, #0]
 8010ee0:	18d3      	adds	r3, r2, r3
 8010ee2:	781b      	ldrb	r3, [r3, #0]
 8010ee4:	021a      	lsls	r2, r3, #8
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	68db      	ldr	r3, [r3, #12]
 8010eea:	431a      	orrs	r2, r3
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681a      	ldr	r2, [r3, #0]
 8010ef4:	193b      	adds	r3, r7, r4
 8010ef6:	881b      	ldrh	r3, [r3, #0]
 8010ef8:	1939      	adds	r1, r7, r4
 8010efa:	1c58      	adds	r0, r3, #1
 8010efc:	8008      	strh	r0, [r1, #0]
 8010efe:	18d3      	adds	r3, r2, r3
 8010f00:	781b      	ldrb	r3, [r3, #0]
 8010f02:	041a      	lsls	r2, r3, #16
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	68db      	ldr	r3, [r3, #12]
 8010f08:	431a      	orrs	r2, r3
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681a      	ldr	r2, [r3, #0]
 8010f12:	193b      	adds	r3, r7, r4
 8010f14:	881b      	ldrh	r3, [r3, #0]
 8010f16:	1939      	adds	r1, r7, r4
 8010f18:	1c58      	adds	r0, r3, #1
 8010f1a:	8008      	strh	r0, [r1, #0]
 8010f1c:	18d3      	adds	r3, r2, r3
 8010f1e:	781b      	ldrb	r3, [r3, #0]
 8010f20:	061a      	lsls	r2, r3, #24
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	68db      	ldr	r3, [r3, #12]
 8010f26:	431a      	orrs	r2, r3
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681a      	ldr	r2, [r3, #0]
 8010f30:	193b      	adds	r3, r7, r4
 8010f32:	881b      	ldrh	r3, [r3, #0]
 8010f34:	1939      	adds	r1, r7, r4
 8010f36:	1c58      	adds	r0, r3, #1
 8010f38:	8008      	strh	r0, [r1, #0]
 8010f3a:	18d3      	adds	r3, r2, r3
 8010f3c:	781a      	ldrb	r2, [r3, #0]
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681a      	ldr	r2, [r3, #0]
 8010f46:	193b      	adds	r3, r7, r4
 8010f48:	881b      	ldrh	r3, [r3, #0]
 8010f4a:	1939      	adds	r1, r7, r4
 8010f4c:	1c58      	adds	r0, r3, #1
 8010f4e:	8008      	strh	r0, [r1, #0]
 8010f50:	18d3      	adds	r3, r2, r3
 8010f52:	781a      	ldrb	r2, [r3, #0]
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	791b      	ldrb	r3, [r3, #4]
 8010f5c:	1f1a      	subs	r2, r3, #4
 8010f5e:	193b      	adds	r3, r7, r4
 8010f60:	881b      	ldrh	r3, [r3, #0]
 8010f62:	1ad3      	subs	r3, r2, r3
 8010f64:	2b10      	cmp	r3, #16
 8010f66:	d111      	bne.n	8010f8c <LoRaMacParserJoinAccept+0x14c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	3312      	adds	r3, #18
 8010f6c:	0018      	movs	r0, r3
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	681a      	ldr	r2, [r3, #0]
 8010f72:	193b      	adds	r3, r7, r4
 8010f74:	881b      	ldrh	r3, [r3, #0]
 8010f76:	18d3      	adds	r3, r2, r3
 8010f78:	2210      	movs	r2, #16
 8010f7a:	0019      	movs	r1, r3
 8010f7c:	f004 fb8c 	bl	8015698 <memcpy1>
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
 8010f80:	193b      	adds	r3, r7, r4
 8010f82:	193a      	adds	r2, r7, r4
 8010f84:	8812      	ldrh	r2, [r2, #0]
 8010f86:	3210      	adds	r2, #16
 8010f88:	801a      	strh	r2, [r3, #0]
 8010f8a:	e00a      	b.n	8010fa2 <LoRaMacParserJoinAccept+0x162>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	791b      	ldrb	r3, [r3, #4]
 8010f90:	1f1a      	subs	r2, r3, #4
 8010f92:	230e      	movs	r3, #14
 8010f94:	18fb      	adds	r3, r7, r3
 8010f96:	881b      	ldrh	r3, [r3, #0]
 8010f98:	1ad3      	subs	r3, r2, r3
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	dd01      	ble.n	8010fa2 <LoRaMacParserJoinAccept+0x162>
    {
        return LORAMAC_PARSER_FAIL;
 8010f9e:	2301      	movs	r3, #1
 8010fa0:	e03a      	b.n	8011018 <LoRaMacParserJoinAccept+0x1d8>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681a      	ldr	r2, [r3, #0]
 8010fa6:	240e      	movs	r4, #14
 8010fa8:	193b      	adds	r3, r7, r4
 8010faa:	881b      	ldrh	r3, [r3, #0]
 8010fac:	1939      	adds	r1, r7, r4
 8010fae:	1c58      	adds	r0, r3, #1
 8010fb0:	8008      	strh	r0, [r1, #0]
 8010fb2:	18d3      	adds	r3, r2, r3
 8010fb4:	781b      	ldrb	r3, [r3, #0]
 8010fb6:	001a      	movs	r2, r3
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	681a      	ldr	r2, [r3, #0]
 8010fc0:	193b      	adds	r3, r7, r4
 8010fc2:	881b      	ldrh	r3, [r3, #0]
 8010fc4:	1939      	adds	r1, r7, r4
 8010fc6:	1c58      	adds	r0, r3, #1
 8010fc8:	8008      	strh	r0, [r1, #0]
 8010fca:	18d3      	adds	r3, r2, r3
 8010fcc:	781b      	ldrb	r3, [r3, #0]
 8010fce:	021a      	lsls	r2, r3, #8
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fd4:	431a      	orrs	r2, r3
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	681a      	ldr	r2, [r3, #0]
 8010fde:	193b      	adds	r3, r7, r4
 8010fe0:	881b      	ldrh	r3, [r3, #0]
 8010fe2:	1939      	adds	r1, r7, r4
 8010fe4:	1c58      	adds	r0, r3, #1
 8010fe6:	8008      	strh	r0, [r1, #0]
 8010fe8:	18d3      	adds	r3, r2, r3
 8010fea:	781b      	ldrb	r3, [r3, #0]
 8010fec:	041a      	lsls	r2, r3, #16
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ff2:	431a      	orrs	r2, r3
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681a      	ldr	r2, [r3, #0]
 8010ffc:	193b      	adds	r3, r7, r4
 8010ffe:	881b      	ldrh	r3, [r3, #0]
 8011000:	1939      	adds	r1, r7, r4
 8011002:	1c58      	adds	r0, r3, #1
 8011004:	8008      	strh	r0, [r1, #0]
 8011006:	18d3      	adds	r3, r2, r3
 8011008:	781b      	ldrb	r3, [r3, #0]
 801100a:	061a      	lsls	r2, r3, #24
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011010:	431a      	orrs	r2, r3
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8011016:	2300      	movs	r3, #0
}
 8011018:	0018      	movs	r0, r3
 801101a:	46bd      	mov	sp, r7
 801101c:	b005      	add	sp, #20
 801101e:	bd90      	pop	{r4, r7, pc}

08011020 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8011020:	b590      	push	{r4, r7, lr}
 8011022:	b085      	sub	sp, #20
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d003      	beq.n	8011036 <LoRaMacParserData+0x16>
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d101      	bne.n	801103a <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8011036:	2302      	movs	r3, #2
 8011038:	e0fc      	b.n	8011234 <LoRaMacParserData+0x214>
    }

    uint16_t bufItr = 0;
 801103a:	240e      	movs	r4, #14
 801103c:	193b      	adds	r3, r7, r4
 801103e:	2200      	movs	r2, #0
 8011040:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681a      	ldr	r2, [r3, #0]
 8011046:	193b      	adds	r3, r7, r4
 8011048:	881b      	ldrh	r3, [r3, #0]
 801104a:	1939      	adds	r1, r7, r4
 801104c:	1c58      	adds	r0, r3, #1
 801104e:	8008      	strh	r0, [r1, #0]
 8011050:	18d3      	adds	r3, r2, r3
 8011052:	781a      	ldrb	r2, [r3, #0]
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681a      	ldr	r2, [r3, #0]
 801105c:	193b      	adds	r3, r7, r4
 801105e:	881b      	ldrh	r3, [r3, #0]
 8011060:	1939      	adds	r1, r7, r4
 8011062:	1c58      	adds	r0, r3, #1
 8011064:	8008      	strh	r0, [r1, #0]
 8011066:	18d3      	adds	r3, r2, r3
 8011068:	781b      	ldrb	r3, [r3, #0]
 801106a:	001a      	movs	r2, r3
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681a      	ldr	r2, [r3, #0]
 8011074:	193b      	adds	r3, r7, r4
 8011076:	881b      	ldrh	r3, [r3, #0]
 8011078:	1939      	adds	r1, r7, r4
 801107a:	1c58      	adds	r0, r3, #1
 801107c:	8008      	strh	r0, [r1, #0]
 801107e:	18d3      	adds	r3, r2, r3
 8011080:	781b      	ldrb	r3, [r3, #0]
 8011082:	021a      	lsls	r2, r3, #8
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	689b      	ldr	r3, [r3, #8]
 8011088:	431a      	orrs	r2, r3
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	681a      	ldr	r2, [r3, #0]
 8011092:	193b      	adds	r3, r7, r4
 8011094:	881b      	ldrh	r3, [r3, #0]
 8011096:	1939      	adds	r1, r7, r4
 8011098:	1c58      	adds	r0, r3, #1
 801109a:	8008      	strh	r0, [r1, #0]
 801109c:	18d3      	adds	r3, r2, r3
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	041a      	lsls	r2, r3, #16
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	689b      	ldr	r3, [r3, #8]
 80110a6:	431a      	orrs	r2, r3
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681a      	ldr	r2, [r3, #0]
 80110b0:	193b      	adds	r3, r7, r4
 80110b2:	881b      	ldrh	r3, [r3, #0]
 80110b4:	1939      	adds	r1, r7, r4
 80110b6:	1c58      	adds	r0, r3, #1
 80110b8:	8008      	strh	r0, [r1, #0]
 80110ba:	18d3      	adds	r3, r2, r3
 80110bc:	781b      	ldrb	r3, [r3, #0]
 80110be:	061a      	lsls	r2, r3, #24
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	689b      	ldr	r3, [r3, #8]
 80110c4:	431a      	orrs	r2, r3
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681a      	ldr	r2, [r3, #0]
 80110ce:	193b      	adds	r3, r7, r4
 80110d0:	881b      	ldrh	r3, [r3, #0]
 80110d2:	1939      	adds	r1, r7, r4
 80110d4:	1c58      	adds	r0, r3, #1
 80110d6:	8008      	strh	r0, [r1, #0]
 80110d8:	18d3      	adds	r3, r2, r3
 80110da:	781a      	ldrb	r2, [r3, #0]
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	681a      	ldr	r2, [r3, #0]
 80110e4:	193b      	adds	r3, r7, r4
 80110e6:	881b      	ldrh	r3, [r3, #0]
 80110e8:	1939      	adds	r1, r7, r4
 80110ea:	1c58      	adds	r0, r3, #1
 80110ec:	8008      	strh	r0, [r1, #0]
 80110ee:	18d3      	adds	r3, r2, r3
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	001a      	movs	r2, r3
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	681a      	ldr	r2, [r3, #0]
 80110fc:	193b      	adds	r3, r7, r4
 80110fe:	881b      	ldrh	r3, [r3, #0]
 8011100:	1939      	adds	r1, r7, r4
 8011102:	1c58      	adds	r0, r3, #1
 8011104:	8008      	strh	r0, [r1, #0]
 8011106:	18d3      	adds	r3, r2, r3
 8011108:	781b      	ldrb	r3, [r3, #0]
 801110a:	0219      	lsls	r1, r3, #8
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	89db      	ldrh	r3, [r3, #14]
 8011110:	b21a      	sxth	r2, r3
 8011112:	b20b      	sxth	r3, r1
 8011114:	4313      	orrs	r3, r2
 8011116:	b21b      	sxth	r3, r3
 8011118:	b29a      	uxth	r2, r3
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	3310      	adds	r3, #16
 8011122:	0018      	movs	r0, r3
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681a      	ldr	r2, [r3, #0]
 8011128:	193b      	adds	r3, r7, r4
 801112a:	881b      	ldrh	r3, [r3, #0]
 801112c:	18d1      	adds	r1, r2, r3
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	7b1b      	ldrb	r3, [r3, #12]
 8011132:	071b      	lsls	r3, r3, #28
 8011134:	0f1b      	lsrs	r3, r3, #28
 8011136:	b2db      	uxtb	r3, r3
 8011138:	001a      	movs	r2, r3
 801113a:	f004 faad 	bl	8015698 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	7b1b      	ldrb	r3, [r3, #12]
 8011142:	071b      	lsls	r3, r3, #28
 8011144:	0f1b      	lsrs	r3, r3, #28
 8011146:	b2db      	uxtb	r3, r3
 8011148:	0019      	movs	r1, r3
 801114a:	193b      	adds	r3, r7, r4
 801114c:	193a      	adds	r2, r7, r4
 801114e:	8812      	ldrh	r2, [r2, #0]
 8011150:	188a      	adds	r2, r1, r2
 8011152:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2220      	movs	r2, #32
 8011158:	2100      	movs	r1, #0
 801115a:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2228      	movs	r2, #40	@ 0x28
 8011160:	2100      	movs	r1, #0
 8011162:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	791b      	ldrb	r3, [r3, #4]
 8011168:	001a      	movs	r2, r3
 801116a:	193b      	adds	r3, r7, r4
 801116c:	881b      	ldrh	r3, [r3, #0]
 801116e:	1ad3      	subs	r3, r2, r3
 8011170:	2b04      	cmp	r3, #4
 8011172:	dd2d      	ble.n	80111d0 <LoRaMacParserData+0x1b0>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681a      	ldr	r2, [r3, #0]
 8011178:	193b      	adds	r3, r7, r4
 801117a:	881b      	ldrh	r3, [r3, #0]
 801117c:	1939      	adds	r1, r7, r4
 801117e:	1c58      	adds	r0, r3, #1
 8011180:	8008      	strh	r0, [r1, #0]
 8011182:	18d3      	adds	r3, r2, r3
 8011184:	7819      	ldrb	r1, [r3, #0]
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	2220      	movs	r2, #32
 801118a:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	791a      	ldrb	r2, [r3, #4]
 8011190:	193b      	adds	r3, r7, r4
 8011192:	881b      	ldrh	r3, [r3, #0]
 8011194:	b2db      	uxtb	r3, r3
 8011196:	1ad3      	subs	r3, r2, r3
 8011198:	b2db      	uxtb	r3, r3
 801119a:	3b04      	subs	r3, #4
 801119c:	b2d9      	uxtb	r1, r3
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	2228      	movs	r2, #40	@ 0x28
 80111a2:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	681a      	ldr	r2, [r3, #0]
 80111ac:	193b      	adds	r3, r7, r4
 80111ae:	881b      	ldrh	r3, [r3, #0]
 80111b0:	18d1      	adds	r1, r2, r3
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2228      	movs	r2, #40	@ 0x28
 80111b6:	5c9b      	ldrb	r3, [r3, r2]
 80111b8:	001a      	movs	r2, r3
 80111ba:	f004 fa6d 	bl	8015698 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	2228      	movs	r2, #40	@ 0x28
 80111c2:	5c9b      	ldrb	r3, [r3, r2]
 80111c4:	0019      	movs	r1, r3
 80111c6:	193b      	adds	r3, r7, r4
 80111c8:	193a      	adds	r2, r7, r4
 80111ca:	8812      	ldrh	r2, [r2, #0]
 80111cc:	188a      	adds	r2, r1, r2
 80111ce:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	681a      	ldr	r2, [r3, #0]
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	791b      	ldrb	r3, [r3, #4]
 80111d8:	3b04      	subs	r3, #4
 80111da:	18d3      	adds	r3, r2, r3
 80111dc:	781b      	ldrb	r3, [r3, #0]
 80111de:	001a      	movs	r2, r3
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	6819      	ldr	r1, [r3, #0]
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	791b      	ldrb	r3, [r3, #4]
 80111f0:	3b03      	subs	r3, #3
 80111f2:	18cb      	adds	r3, r1, r3
 80111f4:	781b      	ldrb	r3, [r3, #0]
 80111f6:	021b      	lsls	r3, r3, #8
 80111f8:	431a      	orrs	r2, r3
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	6819      	ldr	r1, [r3, #0]
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	791b      	ldrb	r3, [r3, #4]
 801120a:	3b02      	subs	r3, #2
 801120c:	18cb      	adds	r3, r1, r3
 801120e:	781b      	ldrb	r3, [r3, #0]
 8011210:	041b      	lsls	r3, r3, #16
 8011212:	431a      	orrs	r2, r3
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	6819      	ldr	r1, [r3, #0]
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	791b      	ldrb	r3, [r3, #4]
 8011224:	3b01      	subs	r3, #1
 8011226:	18cb      	adds	r3, r1, r3
 8011228:	781b      	ldrb	r3, [r3, #0]
 801122a:	061b      	lsls	r3, r3, #24
 801122c:	431a      	orrs	r2, r3
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8011232:	2300      	movs	r3, #0
}
 8011234:	0018      	movs	r0, r3
 8011236:	46bd      	mov	sp, r7
 8011238:	b005      	add	sp, #20
 801123a:	bd90      	pop	{r4, r7, pc}

0801123c <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801123c:	b5b0      	push	{r4, r5, r7, lr}
 801123e:	b084      	sub	sp, #16
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d003      	beq.n	8011252 <LoRaMacSerializerJoinRequest+0x16>
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d101      	bne.n	8011256 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8011252:	2301      	movs	r3, #1
 8011254:	e089      	b.n	801136a <LoRaMacSerializerJoinRequest+0x12e>
    }

    uint16_t bufItr = 0;
 8011256:	230e      	movs	r3, #14
 8011258:	18fb      	adds	r3, r7, r3
 801125a:	2200      	movs	r2, #0
 801125c:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	791b      	ldrb	r3, [r3, #4]
 8011262:	2b16      	cmp	r3, #22
 8011264:	d801      	bhi.n	801126a <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8011266:	2302      	movs	r3, #2
 8011268:	e07f      	b.n	801136a <LoRaMacSerializerJoinRequest+0x12e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	681a      	ldr	r2, [r3, #0]
 801126e:	240e      	movs	r4, #14
 8011270:	193b      	adds	r3, r7, r4
 8011272:	881b      	ldrh	r3, [r3, #0]
 8011274:	1939      	adds	r1, r7, r4
 8011276:	1c58      	adds	r0, r3, #1
 8011278:	8008      	strh	r0, [r1, #0]
 801127a:	18d3      	adds	r3, r2, r3
 801127c:	687a      	ldr	r2, [r7, #4]
 801127e:	7952      	ldrb	r2, [r2, #5]
 8011280:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681a      	ldr	r2, [r3, #0]
 8011286:	193b      	adds	r3, r7, r4
 8011288:	881b      	ldrh	r3, [r3, #0]
 801128a:	18d0      	adds	r0, r2, r3
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	3306      	adds	r3, #6
 8011290:	2208      	movs	r2, #8
 8011292:	0019      	movs	r1, r3
 8011294:	f004 fa1c 	bl	80156d0 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8011298:	193b      	adds	r3, r7, r4
 801129a:	193a      	adds	r2, r7, r4
 801129c:	8812      	ldrh	r2, [r2, #0]
 801129e:	3208      	adds	r2, #8
 80112a0:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	681a      	ldr	r2, [r3, #0]
 80112a6:	193b      	adds	r3, r7, r4
 80112a8:	881b      	ldrh	r3, [r3, #0]
 80112aa:	18d0      	adds	r0, r2, r3
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	330e      	adds	r3, #14
 80112b0:	2208      	movs	r2, #8
 80112b2:	0019      	movs	r1, r3
 80112b4:	f004 fa0c 	bl	80156d0 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80112b8:	193b      	adds	r3, r7, r4
 80112ba:	0025      	movs	r5, r4
 80112bc:	193a      	adds	r2, r7, r4
 80112be:	8812      	ldrh	r2, [r2, #0]
 80112c0:	3208      	adds	r2, #8
 80112c2:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	8ad8      	ldrh	r0, [r3, #22]
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681a      	ldr	r2, [r3, #0]
 80112cc:	197b      	adds	r3, r7, r5
 80112ce:	881b      	ldrh	r3, [r3, #0]
 80112d0:	1979      	adds	r1, r7, r5
 80112d2:	1c5c      	adds	r4, r3, #1
 80112d4:	800c      	strh	r4, [r1, #0]
 80112d6:	18d3      	adds	r3, r2, r3
 80112d8:	b2c2      	uxtb	r2, r0
 80112da:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	8adb      	ldrh	r3, [r3, #22]
 80112e0:	0a1b      	lsrs	r3, r3, #8
 80112e2:	b298      	uxth	r0, r3
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	681a      	ldr	r2, [r3, #0]
 80112e8:	197b      	adds	r3, r7, r5
 80112ea:	881b      	ldrh	r3, [r3, #0]
 80112ec:	1979      	adds	r1, r7, r5
 80112ee:	1c5c      	adds	r4, r3, #1
 80112f0:	800c      	strh	r4, [r1, #0]
 80112f2:	18d3      	adds	r3, r2, r3
 80112f4:	b2c2      	uxtb	r2, r0
 80112f6:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	6998      	ldr	r0, [r3, #24]
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	681a      	ldr	r2, [r3, #0]
 8011300:	197b      	adds	r3, r7, r5
 8011302:	881b      	ldrh	r3, [r3, #0]
 8011304:	1979      	adds	r1, r7, r5
 8011306:	1c5c      	adds	r4, r3, #1
 8011308:	800c      	strh	r4, [r1, #0]
 801130a:	18d3      	adds	r3, r2, r3
 801130c:	b2c2      	uxtb	r2, r0
 801130e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	699b      	ldr	r3, [r3, #24]
 8011314:	0a18      	lsrs	r0, r3, #8
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	681a      	ldr	r2, [r3, #0]
 801131a:	197b      	adds	r3, r7, r5
 801131c:	881b      	ldrh	r3, [r3, #0]
 801131e:	1979      	adds	r1, r7, r5
 8011320:	1c5c      	adds	r4, r3, #1
 8011322:	800c      	strh	r4, [r1, #0]
 8011324:	18d3      	adds	r3, r2, r3
 8011326:	b2c2      	uxtb	r2, r0
 8011328:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	699b      	ldr	r3, [r3, #24]
 801132e:	0c18      	lsrs	r0, r3, #16
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681a      	ldr	r2, [r3, #0]
 8011334:	197b      	adds	r3, r7, r5
 8011336:	881b      	ldrh	r3, [r3, #0]
 8011338:	1979      	adds	r1, r7, r5
 801133a:	1c5c      	adds	r4, r3, #1
 801133c:	800c      	strh	r4, [r1, #0]
 801133e:	18d3      	adds	r3, r2, r3
 8011340:	b2c2      	uxtb	r2, r0
 8011342:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	699b      	ldr	r3, [r3, #24]
 8011348:	0e18      	lsrs	r0, r3, #24
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681a      	ldr	r2, [r3, #0]
 801134e:	197b      	adds	r3, r7, r5
 8011350:	881b      	ldrh	r3, [r3, #0]
 8011352:	1979      	adds	r1, r7, r5
 8011354:	1c5c      	adds	r4, r3, #1
 8011356:	800c      	strh	r4, [r1, #0]
 8011358:	18d3      	adds	r3, r2, r3
 801135a:	b2c2      	uxtb	r2, r0
 801135c:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801135e:	197b      	adds	r3, r7, r5
 8011360:	881b      	ldrh	r3, [r3, #0]
 8011362:	b2da      	uxtb	r2, r3
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8011368:	2300      	movs	r3, #0
}
 801136a:	0018      	movs	r0, r3
 801136c:	46bd      	mov	sp, r7
 801136e:	b004      	add	sp, #16
 8011370:	bdb0      	pop	{r4, r5, r7, pc}

08011372 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8011372:	b5b0      	push	{r4, r5, r7, lr}
 8011374:	b084      	sub	sp, #16
 8011376:	af00      	add	r7, sp, #0
 8011378:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d003      	beq.n	8011388 <LoRaMacSerializerData+0x16>
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d101      	bne.n	801138c <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8011388:	2301      	movs	r3, #1
 801138a:	e117      	b.n	80115bc <LoRaMacSerializerData+0x24a>
    }

    uint16_t bufItr = 0;
 801138c:	230e      	movs	r3, #14
 801138e:	18fb      	adds	r3, r7, r3
 8011390:	2200      	movs	r2, #0
 8011392:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8011394:	200c      	movs	r0, #12
 8011396:	183b      	adds	r3, r7, r0
 8011398:	2208      	movs	r2, #8
 801139a:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADD_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	7b1b      	ldrb	r3, [r3, #12]
 80113a0:	071b      	lsls	r3, r3, #28
 80113a2:	0f1b      	lsrs	r3, r3, #28
 80113a4:	b2db      	uxtb	r3, r3
 80113a6:	0019      	movs	r1, r3
 80113a8:	183b      	adds	r3, r7, r0
 80113aa:	183a      	adds	r2, r7, r0
 80113ac:	8812      	ldrh	r2, [r2, #0]
 80113ae:	188a      	adds	r2, r1, r2
 80113b0:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	2228      	movs	r2, #40	@ 0x28
 80113b6:	5c9b      	ldrb	r3, [r3, r2]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d004      	beq.n	80113c6 <LoRaMacSerializerData+0x54>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80113bc:	183b      	adds	r3, r7, r0
 80113be:	183a      	adds	r2, r7, r0
 80113c0:	8812      	ldrh	r2, [r2, #0]
 80113c2:	3201      	adds	r2, #1
 80113c4:	801a      	strh	r2, [r3, #0]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	2228      	movs	r2, #40	@ 0x28
 80113ca:	5c9b      	ldrb	r3, [r3, r2]
 80113cc:	0019      	movs	r1, r3
 80113ce:	200c      	movs	r0, #12
 80113d0:	183b      	adds	r3, r7, r0
 80113d2:	183a      	adds	r2, r7, r0
 80113d4:	8812      	ldrh	r2, [r2, #0]
 80113d6:	188a      	adds	r2, r1, r2
 80113d8:	801a      	strh	r2, [r3, #0]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80113da:	0001      	movs	r1, r0
 80113dc:	187b      	adds	r3, r7, r1
 80113de:	187a      	adds	r2, r7, r1
 80113e0:	8812      	ldrh	r2, [r2, #0]
 80113e2:	3204      	adds	r2, #4
 80113e4:	801a      	strh	r2, [r3, #0]

    if( macMsg->BufSize < computedBufSize )
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	791b      	ldrb	r3, [r3, #4]
 80113ea:	001a      	movs	r2, r3
 80113ec:	187b      	adds	r3, r7, r1
 80113ee:	881b      	ldrh	r3, [r3, #0]
 80113f0:	4293      	cmp	r3, r2
 80113f2:	d901      	bls.n	80113f8 <LoRaMacSerializerData+0x86>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80113f4:	2302      	movs	r3, #2
 80113f6:	e0e1      	b.n	80115bc <LoRaMacSerializerData+0x24a>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681a      	ldr	r2, [r3, #0]
 80113fc:	250e      	movs	r5, #14
 80113fe:	197b      	adds	r3, r7, r5
 8011400:	881b      	ldrh	r3, [r3, #0]
 8011402:	1979      	adds	r1, r7, r5
 8011404:	1c58      	adds	r0, r3, #1
 8011406:	8008      	strh	r0, [r1, #0]
 8011408:	18d3      	adds	r3, r2, r3
 801140a:	687a      	ldr	r2, [r7, #4]
 801140c:	7952      	ldrb	r2, [r2, #5]
 801140e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	6898      	ldr	r0, [r3, #8]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	681a      	ldr	r2, [r3, #0]
 8011418:	197b      	adds	r3, r7, r5
 801141a:	881b      	ldrh	r3, [r3, #0]
 801141c:	1979      	adds	r1, r7, r5
 801141e:	1c5c      	adds	r4, r3, #1
 8011420:	800c      	strh	r4, [r1, #0]
 8011422:	18d3      	adds	r3, r2, r3
 8011424:	b2c2      	uxtb	r2, r0
 8011426:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	689b      	ldr	r3, [r3, #8]
 801142c:	0a18      	lsrs	r0, r3, #8
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681a      	ldr	r2, [r3, #0]
 8011432:	197b      	adds	r3, r7, r5
 8011434:	881b      	ldrh	r3, [r3, #0]
 8011436:	1979      	adds	r1, r7, r5
 8011438:	1c5c      	adds	r4, r3, #1
 801143a:	800c      	strh	r4, [r1, #0]
 801143c:	18d3      	adds	r3, r2, r3
 801143e:	b2c2      	uxtb	r2, r0
 8011440:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	689b      	ldr	r3, [r3, #8]
 8011446:	0c18      	lsrs	r0, r3, #16
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	681a      	ldr	r2, [r3, #0]
 801144c:	197b      	adds	r3, r7, r5
 801144e:	881b      	ldrh	r3, [r3, #0]
 8011450:	1979      	adds	r1, r7, r5
 8011452:	1c5c      	adds	r4, r3, #1
 8011454:	800c      	strh	r4, [r1, #0]
 8011456:	18d3      	adds	r3, r2, r3
 8011458:	b2c2      	uxtb	r2, r0
 801145a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	689b      	ldr	r3, [r3, #8]
 8011460:	0e18      	lsrs	r0, r3, #24
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	681a      	ldr	r2, [r3, #0]
 8011466:	197b      	adds	r3, r7, r5
 8011468:	881b      	ldrh	r3, [r3, #0]
 801146a:	1979      	adds	r1, r7, r5
 801146c:	1c5c      	adds	r4, r3, #1
 801146e:	800c      	strh	r4, [r1, #0]
 8011470:	18d3      	adds	r3, r2, r3
 8011472:	b2c2      	uxtb	r2, r0
 8011474:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	681a      	ldr	r2, [r3, #0]
 801147a:	197b      	adds	r3, r7, r5
 801147c:	881b      	ldrh	r3, [r3, #0]
 801147e:	1979      	adds	r1, r7, r5
 8011480:	1c58      	adds	r0, r3, #1
 8011482:	8008      	strh	r0, [r1, #0]
 8011484:	18d3      	adds	r3, r2, r3
 8011486:	687a      	ldr	r2, [r7, #4]
 8011488:	7b12      	ldrb	r2, [r2, #12]
 801148a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	89d8      	ldrh	r0, [r3, #14]
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	681a      	ldr	r2, [r3, #0]
 8011494:	197b      	adds	r3, r7, r5
 8011496:	881b      	ldrh	r3, [r3, #0]
 8011498:	1979      	adds	r1, r7, r5
 801149a:	1c5c      	adds	r4, r3, #1
 801149c:	800c      	strh	r4, [r1, #0]
 801149e:	18d3      	adds	r3, r2, r3
 80114a0:	b2c2      	uxtb	r2, r0
 80114a2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	89db      	ldrh	r3, [r3, #14]
 80114a8:	0a1b      	lsrs	r3, r3, #8
 80114aa:	b298      	uxth	r0, r3
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	681a      	ldr	r2, [r3, #0]
 80114b0:	197b      	adds	r3, r7, r5
 80114b2:	881b      	ldrh	r3, [r3, #0]
 80114b4:	1979      	adds	r1, r7, r5
 80114b6:	1c5c      	adds	r4, r3, #1
 80114b8:	800c      	strh	r4, [r1, #0]
 80114ba:	18d3      	adds	r3, r2, r3
 80114bc:	b2c2      	uxtb	r2, r0
 80114be:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681a      	ldr	r2, [r3, #0]
 80114c4:	002c      	movs	r4, r5
 80114c6:	197b      	adds	r3, r7, r5
 80114c8:	881b      	ldrh	r3, [r3, #0]
 80114ca:	18d0      	adds	r0, r2, r3
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	3310      	adds	r3, #16
 80114d0:	0019      	movs	r1, r3
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	7b1b      	ldrb	r3, [r3, #12]
 80114d6:	071b      	lsls	r3, r3, #28
 80114d8:	0f1b      	lsrs	r3, r3, #28
 80114da:	b2db      	uxtb	r3, r3
 80114dc:	001a      	movs	r2, r3
 80114de:	f004 f8db 	bl	8015698 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	7b1b      	ldrb	r3, [r3, #12]
 80114e6:	071b      	lsls	r3, r3, #28
 80114e8:	0f1b      	lsrs	r3, r3, #28
 80114ea:	b2db      	uxtb	r3, r3
 80114ec:	0019      	movs	r1, r3
 80114ee:	193b      	adds	r3, r7, r4
 80114f0:	193a      	adds	r2, r7, r4
 80114f2:	8812      	ldrh	r2, [r2, #0]
 80114f4:	188a      	adds	r2, r1, r2
 80114f6:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	2228      	movs	r2, #40	@ 0x28
 80114fc:	5c9b      	ldrb	r3, [r3, r2]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d00b      	beq.n	801151a <LoRaMacSerializerData+0x1a8>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	681a      	ldr	r2, [r3, #0]
 8011506:	193b      	adds	r3, r7, r4
 8011508:	881b      	ldrh	r3, [r3, #0]
 801150a:	1939      	adds	r1, r7, r4
 801150c:	1c58      	adds	r0, r3, #1
 801150e:	8008      	strh	r0, [r1, #0]
 8011510:	18d3      	adds	r3, r2, r3
 8011512:	687a      	ldr	r2, [r7, #4]
 8011514:	2120      	movs	r1, #32
 8011516:	5c52      	ldrb	r2, [r2, r1]
 8011518:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681a      	ldr	r2, [r3, #0]
 801151e:	240e      	movs	r4, #14
 8011520:	193b      	adds	r3, r7, r4
 8011522:	881b      	ldrh	r3, [r3, #0]
 8011524:	18d0      	adds	r0, r2, r3
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	2228      	movs	r2, #40	@ 0x28
 801152e:	5c9b      	ldrb	r3, [r3, r2]
 8011530:	001a      	movs	r2, r3
 8011532:	f004 f8b1 	bl	8015698 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	2228      	movs	r2, #40	@ 0x28
 801153a:	5c9b      	ldrb	r3, [r3, r2]
 801153c:	0019      	movs	r1, r3
 801153e:	193b      	adds	r3, r7, r4
 8011540:	193a      	adds	r2, r7, r4
 8011542:	8812      	ldrh	r2, [r2, #0]
 8011544:	188a      	adds	r2, r1, r2
 8011546:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	681a      	ldr	r2, [r3, #0]
 8011550:	193b      	adds	r3, r7, r4
 8011552:	881b      	ldrh	r3, [r3, #0]
 8011554:	0025      	movs	r5, r4
 8011556:	1939      	adds	r1, r7, r4
 8011558:	1c5c      	adds	r4, r3, #1
 801155a:	800c      	strh	r4, [r1, #0]
 801155c:	18d3      	adds	r3, r2, r3
 801155e:	b2c2      	uxtb	r2, r0
 8011560:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011566:	0a18      	lsrs	r0, r3, #8
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	681a      	ldr	r2, [r3, #0]
 801156c:	197b      	adds	r3, r7, r5
 801156e:	881b      	ldrh	r3, [r3, #0]
 8011570:	1979      	adds	r1, r7, r5
 8011572:	1c5c      	adds	r4, r3, #1
 8011574:	800c      	strh	r4, [r1, #0]
 8011576:	18d3      	adds	r3, r2, r3
 8011578:	b2c2      	uxtb	r2, r0
 801157a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011580:	0c18      	lsrs	r0, r3, #16
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	681a      	ldr	r2, [r3, #0]
 8011586:	197b      	adds	r3, r7, r5
 8011588:	881b      	ldrh	r3, [r3, #0]
 801158a:	1979      	adds	r1, r7, r5
 801158c:	1c5c      	adds	r4, r3, #1
 801158e:	800c      	strh	r4, [r1, #0]
 8011590:	18d3      	adds	r3, r2, r3
 8011592:	b2c2      	uxtb	r2, r0
 8011594:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801159a:	0e18      	lsrs	r0, r3, #24
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681a      	ldr	r2, [r3, #0]
 80115a0:	197b      	adds	r3, r7, r5
 80115a2:	881b      	ldrh	r3, [r3, #0]
 80115a4:	1979      	adds	r1, r7, r5
 80115a6:	1c5c      	adds	r4, r3, #1
 80115a8:	800c      	strh	r4, [r1, #0]
 80115aa:	18d3      	adds	r3, r2, r3
 80115ac:	b2c2      	uxtb	r2, r0
 80115ae:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80115b0:	197b      	adds	r3, r7, r5
 80115b2:	881b      	ldrh	r3, [r3, #0]
 80115b4:	b2da      	uxtb	r2, r3
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80115ba:	2300      	movs	r3, #0
}
 80115bc:	0018      	movs	r0, r3
 80115be:	46bd      	mov	sp, r7
 80115c0:	b004      	add	sp, #16
 80115c2:	bdb0      	pop	{r4, r5, r7, pc}

080115c4 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b082      	sub	sp, #8
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	0002      	movs	r2, r0
 80115cc:	1dfb      	adds	r3, r7, #7
 80115ce:	701a      	strb	r2, [r3, #0]
    switch( region )
 80115d0:	1dfb      	adds	r3, r7, #7
 80115d2:	781b      	ldrb	r3, [r3, #0]
 80115d4:	2b07      	cmp	r3, #7
 80115d6:	d101      	bne.n	80115dc <RegionIsActive+0x18>
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
 80115d8:	2301      	movs	r3, #1
 80115da:	e000      	b.n	80115de <RegionIsActive+0x1a>
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80115dc:	2300      	movs	r3, #0
        }
    }
}
 80115de:	0018      	movs	r0, r3
 80115e0:	46bd      	mov	sp, r7
 80115e2:	b002      	add	sp, #8
 80115e4:	bd80      	pop	{r7, pc}

080115e6 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80115e6:	b580      	push	{r7, lr}
 80115e8:	b084      	sub	sp, #16
 80115ea:	af00      	add	r7, sp, #0
 80115ec:	0002      	movs	r2, r0
 80115ee:	6039      	str	r1, [r7, #0]
 80115f0:	1dfb      	adds	r3, r7, #7
 80115f2:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
 80115f4:	2308      	movs	r3, #8
 80115f6:	18fb      	adds	r3, r7, r3
 80115f8:	2200      	movs	r2, #0
 80115fa:	601a      	str	r2, [r3, #0]
    switch( region )
 80115fc:	1dfb      	adds	r3, r7, #7
 80115fe:	781b      	ldrb	r3, [r3, #0]
 8011600:	2b07      	cmp	r3, #7
 8011602:	d109      	bne.n	8011618 <RegionGetPhyParam+0x32>
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
 8011604:	683b      	ldr	r3, [r7, #0]
 8011606:	0018      	movs	r0, r3
 8011608:	f001 f8b8 	bl	801277c <RegionIN865GetPhyParam>
 801160c:	0003      	movs	r3, r0
 801160e:	001a      	movs	r2, r3
 8011610:	230c      	movs	r3, #12
 8011612:	18fb      	adds	r3, r7, r3
 8011614:	601a      	str	r2, [r3, #0]
 8011616:	e005      	b.n	8011624 <RegionGetPhyParam+0x3e>
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8011618:	230c      	movs	r3, #12
 801161a:	18fb      	adds	r3, r7, r3
 801161c:	2208      	movs	r2, #8
 801161e:	18ba      	adds	r2, r7, r2
 8011620:	6812      	ldr	r2, [r2, #0]
 8011622:	601a      	str	r2, [r3, #0]
        }
    }
}
 8011624:	230c      	movs	r3, #12
 8011626:	18fb      	adds	r3, r7, r3
 8011628:	681a      	ldr	r2, [r3, #0]
 801162a:	0013      	movs	r3, r2
 801162c:	0018      	movs	r0, r3
 801162e:	46bd      	mov	sp, r7
 8011630:	b004      	add	sp, #16
 8011632:	bd80      	pop	{r7, pc}

08011634 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af00      	add	r7, sp, #0
 801163a:	0002      	movs	r2, r0
 801163c:	6039      	str	r1, [r7, #0]
 801163e:	1dfb      	adds	r3, r7, #7
 8011640:	701a      	strb	r2, [r3, #0]
    switch( region )
 8011642:	1dfb      	adds	r3, r7, #7
 8011644:	781b      	ldrb	r3, [r3, #0]
 8011646:	2b07      	cmp	r3, #7
 8011648:	d104      	bne.n	8011654 <RegionSetBandTxDone+0x20>
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
        KR920_SET_BAND_TX_DONE( );
        IN865_SET_BAND_TX_DONE( );
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	0018      	movs	r0, r3
 801164e:	f001 f999 	bl	8012984 <RegionIN865SetBandTxDone>
 8011652:	e000      	b.n	8011656 <RegionSetBandTxDone+0x22>
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8011654:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 8011656:	46bd      	mov	sp, r7
 8011658:	b002      	add	sp, #8
 801165a:	bd80      	pop	{r7, pc}

0801165c <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b082      	sub	sp, #8
 8011660:	af00      	add	r7, sp, #0
 8011662:	0002      	movs	r2, r0
 8011664:	6039      	str	r1, [r7, #0]
 8011666:	1dfb      	adds	r3, r7, #7
 8011668:	701a      	strb	r2, [r3, #0]
    switch( region )
 801166a:	1dfb      	adds	r3, r7, #7
 801166c:	781b      	ldrb	r3, [r3, #0]
 801166e:	2b07      	cmp	r3, #7
 8011670:	d104      	bne.n	801167c <RegionInitDefaults+0x20>
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
        KR920_INIT_DEFAULTS( );
        IN865_INIT_DEFAULTS( );
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	0018      	movs	r0, r3
 8011676:	f001 f9a5 	bl	80129c4 <RegionIN865InitDefaults>
 801167a:	e000      	b.n	801167e <RegionInitDefaults+0x22>
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801167c:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 801167e:	46c0      	nop			@ (mov r8, r8)
 8011680:	46bd      	mov	sp, r7
 8011682:	b002      	add	sp, #8
 8011684:	bd80      	pop	{r7, pc}

08011686 <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 8011686:	b580      	push	{r7, lr}
 8011688:	b082      	sub	sp, #8
 801168a:	af00      	add	r7, sp, #0
 801168c:	0002      	movs	r2, r0
 801168e:	6039      	str	r1, [r7, #0]
 8011690:	1dfb      	adds	r3, r7, #7
 8011692:	701a      	strb	r2, [r3, #0]
    switch( region )
 8011694:	1dfb      	adds	r3, r7, #7
 8011696:	781b      	ldrb	r3, [r3, #0]
 8011698:	2b07      	cmp	r3, #7
 801169a:	d105      	bne.n	80116a8 <RegionGetNvmCtx+0x22>
        CN470_GET_NVM_CTX( );
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
        KR920_GET_NVM_CTX( );
        IN865_GET_NVM_CTX( );
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	0018      	movs	r0, r3
 80116a0:	f001 fa0a 	bl	8012ab8 <RegionIN865GetNvmCtx>
 80116a4:	0003      	movs	r3, r0
 80116a6:	e000      	b.n	80116aa <RegionGetNvmCtx+0x24>
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 80116a8:	2300      	movs	r3, #0
        }
    }
}
 80116aa:	0018      	movs	r0, r3
 80116ac:	46bd      	mov	sp, r7
 80116ae:	b002      	add	sp, #8
 80116b0:	bd80      	pop	{r7, pc}

080116b2 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80116b2:	b580      	push	{r7, lr}
 80116b4:	b082      	sub	sp, #8
 80116b6:	af00      	add	r7, sp, #0
 80116b8:	6039      	str	r1, [r7, #0]
 80116ba:	0011      	movs	r1, r2
 80116bc:	1dfb      	adds	r3, r7, #7
 80116be:	1c02      	adds	r2, r0, #0
 80116c0:	701a      	strb	r2, [r3, #0]
 80116c2:	1dbb      	adds	r3, r7, #6
 80116c4:	1c0a      	adds	r2, r1, #0
 80116c6:	701a      	strb	r2, [r3, #0]
    switch( region )
 80116c8:	1dfb      	adds	r3, r7, #7
 80116ca:	781b      	ldrb	r3, [r3, #0]
 80116cc:	2b07      	cmp	r3, #7
 80116ce:	d108      	bne.n	80116e2 <RegionVerify+0x30>
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
        KR920_VERIFY( );
        IN865_VERIFY( );
 80116d0:	1dbb      	adds	r3, r7, #6
 80116d2:	781a      	ldrb	r2, [r3, #0]
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	0011      	movs	r1, r2
 80116d8:	0018      	movs	r0, r3
 80116da:	f001 f9fb 	bl	8012ad4 <RegionIN865Verify>
 80116de:	0003      	movs	r3, r0
 80116e0:	e000      	b.n	80116e4 <RegionVerify+0x32>
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 80116e2:	2300      	movs	r3, #0
        }
    }
}
 80116e4:	0018      	movs	r0, r3
 80116e6:	46bd      	mov	sp, r7
 80116e8:	b002      	add	sp, #8
 80116ea:	bd80      	pop	{r7, pc}

080116ec <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b082      	sub	sp, #8
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	0002      	movs	r2, r0
 80116f4:	6039      	str	r1, [r7, #0]
 80116f6:	1dfb      	adds	r3, r7, #7
 80116f8:	701a      	strb	r2, [r3, #0]
    switch( region )
 80116fa:	1dfb      	adds	r3, r7, #7
 80116fc:	781b      	ldrb	r3, [r3, #0]
 80116fe:	2b07      	cmp	r3, #7
 8011700:	d104      	bne.n	801170c <RegionApplyCFList+0x20>
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
        KR920_APPLY_CF_LIST( );
        IN865_APPLY_CF_LIST( );
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	0018      	movs	r0, r3
 8011706:	f001 fa47 	bl	8012b98 <RegionIN865ApplyCFList>
 801170a:	e000      	b.n	801170e <RegionApplyCFList+0x22>
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 801170c:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 801170e:	46c0      	nop			@ (mov r8, r8)
 8011710:	46bd      	mov	sp, r7
 8011712:	b002      	add	sp, #8
 8011714:	bd80      	pop	{r7, pc}

08011716 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8011716:	b580      	push	{r7, lr}
 8011718:	b082      	sub	sp, #8
 801171a:	af00      	add	r7, sp, #0
 801171c:	0002      	movs	r2, r0
 801171e:	6039      	str	r1, [r7, #0]
 8011720:	1dfb      	adds	r3, r7, #7
 8011722:	701a      	strb	r2, [r3, #0]
    switch( region )
 8011724:	1dfb      	adds	r3, r7, #7
 8011726:	781b      	ldrb	r3, [r3, #0]
 8011728:	2b07      	cmp	r3, #7
 801172a:	d105      	bne.n	8011738 <RegionChanMaskSet+0x22>
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	0018      	movs	r0, r3
 8011730:	f001 fac2 	bl	8012cb8 <RegionIN865ChanMaskSet>
 8011734:	0003      	movs	r3, r0
 8011736:	e000      	b.n	801173a <RegionChanMaskSet+0x24>
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8011738:	2300      	movs	r3, #0
        }
    }
}
 801173a:	0018      	movs	r0, r3
 801173c:	46bd      	mov	sp, r7
 801173e:	b002      	add	sp, #8
 8011740:	bd80      	pop	{r7, pc}

08011742 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8011742:	b590      	push	{r4, r7, lr}
 8011744:	b083      	sub	sp, #12
 8011746:	af00      	add	r7, sp, #0
 8011748:	0004      	movs	r4, r0
 801174a:	0008      	movs	r0, r1
 801174c:	0011      	movs	r1, r2
 801174e:	603b      	str	r3, [r7, #0]
 8011750:	1dfb      	adds	r3, r7, #7
 8011752:	1c22      	adds	r2, r4, #0
 8011754:	701a      	strb	r2, [r3, #0]
 8011756:	1dbb      	adds	r3, r7, #6
 8011758:	1c02      	adds	r2, r0, #0
 801175a:	701a      	strb	r2, [r3, #0]
 801175c:	1d7b      	adds	r3, r7, #5
 801175e:	1c0a      	adds	r2, r1, #0
 8011760:	701a      	strb	r2, [r3, #0]
    switch( region )
 8011762:	1dfb      	adds	r3, r7, #7
 8011764:	781b      	ldrb	r3, [r3, #0]
 8011766:	2b07      	cmp	r3, #7
 8011768:	d10a      	bne.n	8011780 <RegionComputeRxWindowParameters+0x3e>
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
        KR920_COMPUTE_RX_WINDOW_PARAMETERS( );
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
 801176a:	69bc      	ldr	r4, [r7, #24]
 801176c:	683a      	ldr	r2, [r7, #0]
 801176e:	1d7b      	adds	r3, r7, #5
 8011770:	7819      	ldrb	r1, [r3, #0]
 8011772:	1dbb      	adds	r3, r7, #6
 8011774:	2000      	movs	r0, #0
 8011776:	5618      	ldrsb	r0, [r3, r0]
 8011778:	0023      	movs	r3, r4
 801177a:	f001 fac3 	bl	8012d04 <RegionIN865ComputeRxWindowParameters>
 801177e:	e000      	b.n	8011782 <RegionComputeRxWindowParameters+0x40>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8011780:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 8011782:	46c0      	nop			@ (mov r8, r8)
 8011784:	46bd      	mov	sp, r7
 8011786:	b003      	add	sp, #12
 8011788:	bd90      	pop	{r4, r7, pc}

0801178a <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801178a:	b580      	push	{r7, lr}
 801178c:	b084      	sub	sp, #16
 801178e:	af00      	add	r7, sp, #0
 8011790:	60b9      	str	r1, [r7, #8]
 8011792:	607a      	str	r2, [r7, #4]
 8011794:	210f      	movs	r1, #15
 8011796:	187b      	adds	r3, r7, r1
 8011798:	1c02      	adds	r2, r0, #0
 801179a:	701a      	strb	r2, [r3, #0]
    switch( region )
 801179c:	187b      	adds	r3, r7, r1
 801179e:	781b      	ldrb	r3, [r3, #0]
 80117a0:	2b07      	cmp	r3, #7
 80117a2:	d107      	bne.n	80117b4 <RegionRxConfig+0x2a>
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
 80117a4:	687a      	ldr	r2, [r7, #4]
 80117a6:	68bb      	ldr	r3, [r7, #8]
 80117a8:	0011      	movs	r1, r2
 80117aa:	0018      	movs	r0, r3
 80117ac:	f001 fb14 	bl	8012dd8 <RegionIN865RxConfig>
 80117b0:	0003      	movs	r3, r0
 80117b2:	e000      	b.n	80117b6 <RegionRxConfig+0x2c>
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80117b4:	2300      	movs	r3, #0
        }
    }
}
 80117b6:	0018      	movs	r0, r3
 80117b8:	46bd      	mov	sp, r7
 80117ba:	b004      	add	sp, #16
 80117bc:	bd80      	pop	{r7, pc}

080117be <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80117be:	b580      	push	{r7, lr}
 80117c0:	b084      	sub	sp, #16
 80117c2:	af00      	add	r7, sp, #0
 80117c4:	60b9      	str	r1, [r7, #8]
 80117c6:	607a      	str	r2, [r7, #4]
 80117c8:	603b      	str	r3, [r7, #0]
 80117ca:	210f      	movs	r1, #15
 80117cc:	187b      	adds	r3, r7, r1
 80117ce:	1c02      	adds	r2, r0, #0
 80117d0:	701a      	strb	r2, [r3, #0]
    switch( region )
 80117d2:	187b      	adds	r3, r7, r1
 80117d4:	781b      	ldrb	r3, [r3, #0]
 80117d6:	2b07      	cmp	r3, #7
 80117d8:	d107      	bne.n	80117ea <RegionTxConfig+0x2c>
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
 80117da:	683a      	ldr	r2, [r7, #0]
 80117dc:	6879      	ldr	r1, [r7, #4]
 80117de:	68bb      	ldr	r3, [r7, #8]
 80117e0:	0018      	movs	r0, r3
 80117e2:	f001 fbe3 	bl	8012fac <RegionIN865TxConfig>
 80117e6:	0003      	movs	r3, r0
 80117e8:	e000      	b.n	80117ec <RegionTxConfig+0x2e>
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 80117ea:	2300      	movs	r3, #0
        }
    }
}
 80117ec:	0018      	movs	r0, r3
 80117ee:	46bd      	mov	sp, r7
 80117f0:	b004      	add	sp, #16
 80117f2:	bd80      	pop	{r7, pc}

080117f4 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80117f4:	b590      	push	{r4, r7, lr}
 80117f6:	b087      	sub	sp, #28
 80117f8:	af02      	add	r7, sp, #8
 80117fa:	60b9      	str	r1, [r7, #8]
 80117fc:	607a      	str	r2, [r7, #4]
 80117fe:	603b      	str	r3, [r7, #0]
 8011800:	210f      	movs	r1, #15
 8011802:	187b      	adds	r3, r7, r1
 8011804:	1c02      	adds	r2, r0, #0
 8011806:	701a      	strb	r2, [r3, #0]
    switch( region )
 8011808:	187b      	adds	r3, r7, r1
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	2b07      	cmp	r3, #7
 801180e:	d10a      	bne.n	8011826 <RegionLinkAdrReq+0x32>
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
 8011810:	6a3c      	ldr	r4, [r7, #32]
 8011812:	683a      	ldr	r2, [r7, #0]
 8011814:	6879      	ldr	r1, [r7, #4]
 8011816:	68b8      	ldr	r0, [r7, #8]
 8011818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801181a:	9300      	str	r3, [sp, #0]
 801181c:	0023      	movs	r3, r4
 801181e:	f001 fc9d 	bl	801315c <RegionIN865LinkAdrReq>
 8011822:	0003      	movs	r3, r0
 8011824:	e000      	b.n	8011828 <RegionLinkAdrReq+0x34>
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8011826:	2300      	movs	r3, #0
        }
    }
}
 8011828:	0018      	movs	r0, r3
 801182a:	46bd      	mov	sp, r7
 801182c:	b005      	add	sp, #20
 801182e:	bd90      	pop	{r4, r7, pc}

08011830 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b082      	sub	sp, #8
 8011834:	af00      	add	r7, sp, #0
 8011836:	0002      	movs	r2, r0
 8011838:	6039      	str	r1, [r7, #0]
 801183a:	1dfb      	adds	r3, r7, #7
 801183c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801183e:	1dfb      	adds	r3, r7, #7
 8011840:	781b      	ldrb	r3, [r3, #0]
 8011842:	2b07      	cmp	r3, #7
 8011844:	d105      	bne.n	8011852 <RegionRxParamSetupReq+0x22>
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	0018      	movs	r0, r3
 801184a:	f001 fde3 	bl	8013414 <RegionIN865RxParamSetupReq>
 801184e:	0003      	movs	r3, r0
 8011850:	e000      	b.n	8011854 <RegionRxParamSetupReq+0x24>
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8011852:	2300      	movs	r3, #0
        }
    }
}
 8011854:	0018      	movs	r0, r3
 8011856:	46bd      	mov	sp, r7
 8011858:	b002      	add	sp, #8
 801185a:	bd80      	pop	{r7, pc}

0801185c <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b082      	sub	sp, #8
 8011860:	af00      	add	r7, sp, #0
 8011862:	0002      	movs	r2, r0
 8011864:	6039      	str	r1, [r7, #0]
 8011866:	1dfb      	adds	r3, r7, #7
 8011868:	701a      	strb	r2, [r3, #0]
    switch( region )
 801186a:	1dfb      	adds	r3, r7, #7
 801186c:	781b      	ldrb	r3, [r3, #0]
 801186e:	2b07      	cmp	r3, #7
 8011870:	d105      	bne.n	801187e <RegionNewChannelReq+0x22>
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	0018      	movs	r0, r3
 8011876:	f001 fe10 	bl	801349a <RegionIN865NewChannelReq>
 801187a:	0003      	movs	r3, r0
 801187c:	e000      	b.n	8011880 <RegionNewChannelReq+0x24>
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 801187e:	2300      	movs	r3, #0
        }
    }
}
 8011880:	0018      	movs	r0, r3
 8011882:	46bd      	mov	sp, r7
 8011884:	b002      	add	sp, #8
 8011886:	bd80      	pop	{r7, pc}

08011888 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b082      	sub	sp, #8
 801188c:	af00      	add	r7, sp, #0
 801188e:	0002      	movs	r2, r0
 8011890:	6039      	str	r1, [r7, #0]
 8011892:	1dfb      	adds	r3, r7, #7
 8011894:	701a      	strb	r2, [r3, #0]
    switch( region )
 8011896:	1dfb      	adds	r3, r7, #7
 8011898:	781b      	ldrb	r3, [r3, #0]
 801189a:	2b07      	cmp	r3, #7
 801189c:	d105      	bne.n	80118aa <RegionTxParamSetupReq+0x22>
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
 801189e:	683b      	ldr	r3, [r7, #0]
 80118a0:	0018      	movs	r0, r3
 80118a2:	f001 fe62 	bl	801356a <RegionIN865TxParamSetupReq>
 80118a6:	0003      	movs	r3, r0
 80118a8:	e000      	b.n	80118ac <RegionTxParamSetupReq+0x24>
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80118aa:	2300      	movs	r3, #0
        }
    }
}
 80118ac:	0018      	movs	r0, r3
 80118ae:	46bd      	mov	sp, r7
 80118b0:	b002      	add	sp, #8
 80118b2:	bd80      	pop	{r7, pc}

080118b4 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b082      	sub	sp, #8
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	0002      	movs	r2, r0
 80118bc:	6039      	str	r1, [r7, #0]
 80118be:	1dfb      	adds	r3, r7, #7
 80118c0:	701a      	strb	r2, [r3, #0]
    switch( region )
 80118c2:	1dfb      	adds	r3, r7, #7
 80118c4:	781b      	ldrb	r3, [r3, #0]
 80118c6:	2b07      	cmp	r3, #7
 80118c8:	d105      	bne.n	80118d6 <RegionDlChannelReq+0x22>
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
 80118ca:	683b      	ldr	r3, [r7, #0]
 80118cc:	0018      	movs	r0, r3
 80118ce:	f001 fe57 	bl	8013580 <RegionIN865DlChannelReq>
 80118d2:	0003      	movs	r3, r0
 80118d4:	e000      	b.n	80118d8 <RegionDlChannelReq+0x24>
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80118d6:	2300      	movs	r3, #0
        }
    }
}
 80118d8:	0018      	movs	r0, r3
 80118da:	46bd      	mov	sp, r7
 80118dc:	b002      	add	sp, #8
 80118de:	bd80      	pop	{r7, pc}

080118e0 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80118e0:	b590      	push	{r4, r7, lr}
 80118e2:	b083      	sub	sp, #12
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	0004      	movs	r4, r0
 80118e8:	0008      	movs	r0, r1
 80118ea:	0011      	movs	r1, r2
 80118ec:	1dfb      	adds	r3, r7, #7
 80118ee:	1c22      	adds	r2, r4, #0
 80118f0:	701a      	strb	r2, [r3, #0]
 80118f2:	1dbb      	adds	r3, r7, #6
 80118f4:	1c02      	adds	r2, r0, #0
 80118f6:	701a      	strb	r2, [r3, #0]
 80118f8:	1d7b      	adds	r3, r7, #5
 80118fa:	1c0a      	adds	r2, r1, #0
 80118fc:	701a      	strb	r2, [r3, #0]
    switch( region )
 80118fe:	1dfb      	adds	r3, r7, #7
 8011900:	781b      	ldrb	r3, [r3, #0]
 8011902:	2b07      	cmp	r3, #7
 8011904:	d10a      	bne.n	801191c <RegionAlternateDr+0x3c>
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
 8011906:	1d7b      	adds	r3, r7, #5
 8011908:	781a      	ldrb	r2, [r3, #0]
 801190a:	1dbb      	adds	r3, r7, #6
 801190c:	781b      	ldrb	r3, [r3, #0]
 801190e:	b25b      	sxtb	r3, r3
 8011910:	0011      	movs	r1, r2
 8011912:	0018      	movs	r0, r3
 8011914:	f001 fe7c 	bl	8013610 <RegionIN865AlternateDr>
 8011918:	0003      	movs	r3, r0
 801191a:	e000      	b.n	801191e <RegionAlternateDr+0x3e>
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 801191c:	2300      	movs	r3, #0
        }
    }
}
 801191e:	0018      	movs	r0, r3
 8011920:	46bd      	mov	sp, r7
 8011922:	b003      	add	sp, #12
 8011924:	bd90      	pop	{r4, r7, pc}

08011926 <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
 8011926:	b580      	push	{r7, lr}
 8011928:	b082      	sub	sp, #8
 801192a:	af00      	add	r7, sp, #0
 801192c:	0002      	movs	r2, r0
 801192e:	6039      	str	r1, [r7, #0]
 8011930:	1dfb      	adds	r3, r7, #7
 8011932:	701a      	strb	r2, [r3, #0]
    switch( region )
 8011934:	1dfb      	adds	r3, r7, #7
 8011936:	781b      	ldrb	r3, [r3, #0]
 8011938:	2b07      	cmp	r3, #7
 801193a:	d104      	bne.n	8011946 <RegionCalcBackOff+0x20>
        CN470_CALC_BACKOFF( );
        CN779_CALC_BACKOFF( );
        EU433_CALC_BACKOFF( );
        EU868_CALC_BACKOFF( );
        KR920_CALC_BACKOFF( );
        IN865_CALC_BACKOFF( );
 801193c:	683b      	ldr	r3, [r7, #0]
 801193e:	0018      	movs	r0, r3
 8011940:	f001 fe76 	bl	8013630 <RegionIN865CalcBackOff>
 8011944:	e000      	b.n	8011948 <RegionCalcBackOff+0x22>
        US915_CALC_BACKOFF( );
        RU864_CALC_BACKOFF( );
        default:
        {
            break;
 8011946:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 8011948:	46c0      	nop			@ (mov r8, r8)
 801194a:	46bd      	mov	sp, r7
 801194c:	b002      	add	sp, #8
 801194e:	bd80      	pop	{r7, pc}

08011950 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b084      	sub	sp, #16
 8011954:	af00      	add	r7, sp, #0
 8011956:	60b9      	str	r1, [r7, #8]
 8011958:	607a      	str	r2, [r7, #4]
 801195a:	603b      	str	r3, [r7, #0]
 801195c:	210f      	movs	r1, #15
 801195e:	187b      	adds	r3, r7, r1
 8011960:	1c02      	adds	r2, r0, #0
 8011962:	701a      	strb	r2, [r3, #0]
    switch( region )
 8011964:	187b      	adds	r3, r7, r1
 8011966:	781b      	ldrb	r3, [r3, #0]
 8011968:	2b07      	cmp	r3, #7
 801196a:	d107      	bne.n	801197c <RegionNextChannel+0x2c>
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
 801196c:	69bb      	ldr	r3, [r7, #24]
 801196e:	683a      	ldr	r2, [r7, #0]
 8011970:	6879      	ldr	r1, [r7, #4]
 8011972:	68b8      	ldr	r0, [r7, #8]
 8011974:	f001 fe8c 	bl	8013690 <RegionIN865NextChannel>
 8011978:	0003      	movs	r3, r0
 801197a:	e000      	b.n	801197e <RegionNextChannel+0x2e>
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801197c:	2309      	movs	r3, #9
        }
    }
}
 801197e:	0018      	movs	r0, r3
 8011980:	46bd      	mov	sp, r7
 8011982:	b004      	add	sp, #16
 8011984:	bd80      	pop	{r7, pc}

08011986 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8011986:	b580      	push	{r7, lr}
 8011988:	b082      	sub	sp, #8
 801198a:	af00      	add	r7, sp, #0
 801198c:	0002      	movs	r2, r0
 801198e:	6039      	str	r1, [r7, #0]
 8011990:	1dfb      	adds	r3, r7, #7
 8011992:	701a      	strb	r2, [r3, #0]
    switch( region )
 8011994:	1dfb      	adds	r3, r7, #7
 8011996:	781b      	ldrb	r3, [r3, #0]
 8011998:	2b07      	cmp	r3, #7
 801199a:	d104      	bne.n	80119a6 <RegionSetContinuousWave+0x20>
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
        KR920_SET_CONTINUOUS_WAVE( );
        IN865_SET_CONTINUOUS_WAVE( );
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	0018      	movs	r0, r3
 80119a0:	f002 f802 	bl	80139a8 <RegionIN865SetContinuousWave>
 80119a4:	e000      	b.n	80119a8 <RegionSetContinuousWave+0x22>
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 80119a6:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 80119a8:	46c0      	nop			@ (mov r8, r8)
 80119aa:	46bd      	mov	sp, r7
 80119ac:	b002      	add	sp, #8
 80119ae:	bd80      	pop	{r7, pc}

080119b0 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80119b0:	b5b0      	push	{r4, r5, r7, lr}
 80119b2:	b082      	sub	sp, #8
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	0005      	movs	r5, r0
 80119b8:	000c      	movs	r4, r1
 80119ba:	0010      	movs	r0, r2
 80119bc:	0019      	movs	r1, r3
 80119be:	1dfb      	adds	r3, r7, #7
 80119c0:	1c2a      	adds	r2, r5, #0
 80119c2:	701a      	strb	r2, [r3, #0]
 80119c4:	1dbb      	adds	r3, r7, #6
 80119c6:	1c22      	adds	r2, r4, #0
 80119c8:	701a      	strb	r2, [r3, #0]
 80119ca:	1d7b      	adds	r3, r7, #5
 80119cc:	1c02      	adds	r2, r0, #0
 80119ce:	701a      	strb	r2, [r3, #0]
 80119d0:	1d3b      	adds	r3, r7, #4
 80119d2:	1c0a      	adds	r2, r1, #0
 80119d4:	701a      	strb	r2, [r3, #0]
    switch( region )
 80119d6:	1dfb      	adds	r3, r7, #7
 80119d8:	781b      	ldrb	r3, [r3, #0]
 80119da:	2b07      	cmp	r3, #7
 80119dc:	d10c      	bne.n	80119f8 <RegionApplyDrOffset+0x48>
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
 80119de:	1d3b      	adds	r3, r7, #4
 80119e0:	2200      	movs	r2, #0
 80119e2:	569a      	ldrsb	r2, [r3, r2]
 80119e4:	1d7b      	adds	r3, r7, #5
 80119e6:	2100      	movs	r1, #0
 80119e8:	5659      	ldrsb	r1, [r3, r1]
 80119ea:	1dbb      	adds	r3, r7, #6
 80119ec:	781b      	ldrb	r3, [r3, #0]
 80119ee:	0018      	movs	r0, r3
 80119f0:	f002 f82e 	bl	8013a50 <RegionIN865ApplyDrOffset>
 80119f4:	0003      	movs	r3, r0
 80119f6:	e001      	b.n	80119fc <RegionApplyDrOffset+0x4c>
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80119f8:	1d7b      	adds	r3, r7, #5
 80119fa:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
 80119fc:	0018      	movs	r0, r3
 80119fe:	46bd      	mov	sp, r7
 8011a00:	b002      	add	sp, #8
 8011a02:	bdb0      	pop	{r4, r5, r7, pc}

08011a04 <CountChannels>:
#define BACKOFF_DC_1_HOUR       100
#define BACKOFF_DC_10_HOURS     1000
#define BACKOFF_DC_24_HOURS     10000

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b084      	sub	sp, #16
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	0002      	movs	r2, r0
 8011a0c:	1dbb      	adds	r3, r7, #6
 8011a0e:	801a      	strh	r2, [r3, #0]
 8011a10:	1d7b      	adds	r3, r7, #5
 8011a12:	1c0a      	adds	r2, r1, #0
 8011a14:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
 8011a16:	230f      	movs	r3, #15
 8011a18:	18fb      	adds	r3, r7, r3
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
 8011a1e:	230e      	movs	r3, #14
 8011a20:	18fb      	adds	r3, r7, r3
 8011a22:	2200      	movs	r2, #0
 8011a24:	701a      	strb	r2, [r3, #0]
 8011a26:	e01b      	b.n	8011a60 <CountChannels+0x5c>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8011a28:	1dbb      	adds	r3, r7, #6
 8011a2a:	881b      	ldrh	r3, [r3, #0]
 8011a2c:	200e      	movs	r0, #14
 8011a2e:	183a      	adds	r2, r7, r0
 8011a30:	7812      	ldrb	r2, [r2, #0]
 8011a32:	2101      	movs	r1, #1
 8011a34:	4091      	lsls	r1, r2
 8011a36:	000a      	movs	r2, r1
 8011a38:	401a      	ands	r2, r3
 8011a3a:	183b      	adds	r3, r7, r0
 8011a3c:	781b      	ldrb	r3, [r3, #0]
 8011a3e:	2101      	movs	r1, #1
 8011a40:	4099      	lsls	r1, r3
 8011a42:	000b      	movs	r3, r1
 8011a44:	429a      	cmp	r2, r3
 8011a46:	d105      	bne.n	8011a54 <CountChannels+0x50>
        {
            nbActiveBits++;
 8011a48:	210f      	movs	r1, #15
 8011a4a:	187b      	adds	r3, r7, r1
 8011a4c:	781a      	ldrb	r2, [r3, #0]
 8011a4e:	187b      	adds	r3, r7, r1
 8011a50:	3201      	adds	r2, #1
 8011a52:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
 8011a54:	210e      	movs	r1, #14
 8011a56:	187b      	adds	r3, r7, r1
 8011a58:	781a      	ldrb	r2, [r3, #0]
 8011a5a:	187b      	adds	r3, r7, r1
 8011a5c:	3201      	adds	r2, #1
 8011a5e:	701a      	strb	r2, [r3, #0]
 8011a60:	230e      	movs	r3, #14
 8011a62:	18fa      	adds	r2, r7, r3
 8011a64:	1d7b      	adds	r3, r7, #5
 8011a66:	7812      	ldrb	r2, [r2, #0]
 8011a68:	781b      	ldrb	r3, [r3, #0]
 8011a6a:	429a      	cmp	r2, r3
 8011a6c:	d3dc      	bcc.n	8011a28 <CountChannels+0x24>
        }
    }
    return nbActiveBits;
 8011a6e:	230f      	movs	r3, #15
 8011a70:	18fb      	adds	r3, r7, r3
 8011a72:	781b      	ldrb	r3, [r3, #0]
}
 8011a74:	0018      	movs	r0, r3
 8011a76:	46bd      	mov	sp, r7
 8011a78:	b004      	add	sp, #16
 8011a7a:	bd80      	pop	{r7, pc}

08011a7c <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b084      	sub	sp, #16
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
    uint16_t dutyCycle = 0;
 8011a84:	210e      	movs	r1, #14
 8011a86:	187b      	adds	r3, r7, r1
 8011a88:	2200      	movs	r2, #0
 8011a8a:	801a      	strh	r2, [r3, #0]

    if( elapsedTime < 3600000 )
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8011ac8 <RegionCommonGetJoinDc+0x4c>)
 8011a90:	4293      	cmp	r3, r2
 8011a92:	d803      	bhi.n	8011a9c <RegionCommonGetJoinDc+0x20>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 8011a94:	187b      	adds	r3, r7, r1
 8011a96:	2264      	movs	r2, #100	@ 0x64
 8011a98:	801a      	strh	r2, [r3, #0]
 8011a9a:	e00d      	b.n	8011ab8 <RegionCommonGetJoinDc+0x3c>
    }
    else if( elapsedTime < ( 3600000 + 36000000 ) )
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	4a0b      	ldr	r2, [pc, #44]	@ (8011acc <RegionCommonGetJoinDc+0x50>)
 8011aa0:	4293      	cmp	r3, r2
 8011aa2:	d805      	bhi.n	8011ab0 <RegionCommonGetJoinDc+0x34>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 8011aa4:	230e      	movs	r3, #14
 8011aa6:	18fb      	adds	r3, r7, r3
 8011aa8:	22fa      	movs	r2, #250	@ 0xfa
 8011aaa:	0092      	lsls	r2, r2, #2
 8011aac:	801a      	strh	r2, [r3, #0]
 8011aae:	e003      	b.n	8011ab8 <RegionCommonGetJoinDc+0x3c>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 8011ab0:	230e      	movs	r3, #14
 8011ab2:	18fb      	adds	r3, r7, r3
 8011ab4:	4a06      	ldr	r2, [pc, #24]	@ (8011ad0 <RegionCommonGetJoinDc+0x54>)
 8011ab6:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
 8011ab8:	230e      	movs	r3, #14
 8011aba:	18fb      	adds	r3, r7, r3
 8011abc:	881b      	ldrh	r3, [r3, #0]
}
 8011abe:	0018      	movs	r0, r3
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	b004      	add	sp, #16
 8011ac4:	bd80      	pop	{r7, pc}
 8011ac6:	46c0      	nop			@ (mov r8, r8)
 8011ac8:	0036ee7f 	.word	0x0036ee7f
 8011acc:	025c3f7f 	.word	0x025c3f7f
 8011ad0:	00002710 	.word	0x00002710

08011ad4 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8011ad4:	b590      	push	{r4, r7, lr}
 8011ad6:	b085      	sub	sp, #20
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	0004      	movs	r4, r0
 8011adc:	6039      	str	r1, [r7, #0]
 8011ade:	0010      	movs	r0, r2
 8011ae0:	0019      	movs	r1, r3
 8011ae2:	1dfb      	adds	r3, r7, #7
 8011ae4:	1c22      	adds	r2, r4, #0
 8011ae6:	701a      	strb	r2, [r3, #0]
 8011ae8:	1dbb      	adds	r3, r7, #6
 8011aea:	1c02      	adds	r2, r0, #0
 8011aec:	701a      	strb	r2, [r3, #0]
 8011aee:	1d7b      	adds	r3, r7, #5
 8011af0:	1c0a      	adds	r2, r1, #0
 8011af2:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8011af4:	2320      	movs	r3, #32
 8011af6:	18fb      	adds	r3, r7, r3
 8011af8:	2200      	movs	r2, #0
 8011afa:	569a      	ldrsb	r2, [r3, r2]
 8011afc:	1d7b      	adds	r3, r7, #5
 8011afe:	2100      	movs	r1, #0
 8011b00:	5659      	ldrsb	r1, [r3, r1]
 8011b02:	1dbb      	adds	r3, r7, #6
 8011b04:	781b      	ldrb	r3, [r3, #0]
 8011b06:	b25b      	sxtb	r3, r3
 8011b08:	0018      	movs	r0, r3
 8011b0a:	f000 f87c 	bl	8011c06 <RegionCommonValueInRange>
 8011b0e:	1e03      	subs	r3, r0, #0
 8011b10:	d101      	bne.n	8011b16 <RegionCommonChanVerifyDr+0x42>
    {
        return false;
 8011b12:	2300      	movs	r3, #0
 8011b14:	e073      	b.n	8011bfe <RegionCommonChanVerifyDr+0x12a>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8011b16:	230f      	movs	r3, #15
 8011b18:	18fb      	adds	r3, r7, r3
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	701a      	strb	r2, [r3, #0]
 8011b1e:	230e      	movs	r3, #14
 8011b20:	18fb      	adds	r3, r7, r3
 8011b22:	2200      	movs	r2, #0
 8011b24:	701a      	strb	r2, [r3, #0]
 8011b26:	e062      	b.n	8011bee <RegionCommonChanVerifyDr+0x11a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8011b28:	230d      	movs	r3, #13
 8011b2a:	18fb      	adds	r3, r7, r3
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	701a      	strb	r2, [r3, #0]
 8011b30:	e04c      	b.n	8011bcc <RegionCommonChanVerifyDr+0xf8>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8011b32:	230e      	movs	r3, #14
 8011b34:	18fb      	adds	r3, r7, r3
 8011b36:	781b      	ldrb	r3, [r3, #0]
 8011b38:	005b      	lsls	r3, r3, #1
 8011b3a:	683a      	ldr	r2, [r7, #0]
 8011b3c:	18d3      	adds	r3, r2, r3
 8011b3e:	881b      	ldrh	r3, [r3, #0]
 8011b40:	001a      	movs	r2, r3
 8011b42:	200d      	movs	r0, #13
 8011b44:	183b      	adds	r3, r7, r0
 8011b46:	781b      	ldrb	r3, [r3, #0]
 8011b48:	411a      	asrs	r2, r3
 8011b4a:	0013      	movs	r3, r2
 8011b4c:	2201      	movs	r2, #1
 8011b4e:	4013      	ands	r3, r2
 8011b50:	d036      	beq.n	8011bc0 <RegionCommonChanVerifyDr+0xec>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8011b52:	240f      	movs	r4, #15
 8011b54:	193b      	adds	r3, r7, r4
 8011b56:	781a      	ldrb	r2, [r3, #0]
 8011b58:	183b      	adds	r3, r7, r0
 8011b5a:	781b      	ldrb	r3, [r3, #0]
 8011b5c:	18d3      	adds	r3, r2, r3
 8011b5e:	001a      	movs	r2, r3
 8011b60:	0013      	movs	r3, r2
 8011b62:	005b      	lsls	r3, r3, #1
 8011b64:	189b      	adds	r3, r3, r2
 8011b66:	009b      	lsls	r3, r3, #2
 8011b68:	001a      	movs	r2, r3
 8011b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b6c:	189b      	adds	r3, r3, r2
 8011b6e:	7a1b      	ldrb	r3, [r3, #8]
 8011b70:	011b      	lsls	r3, r3, #4
 8011b72:	b25b      	sxtb	r3, r3
 8011b74:	111b      	asrs	r3, r3, #4
 8011b76:	b25b      	sxtb	r3, r3
 8011b78:	001a      	movs	r2, r3
 8011b7a:	230f      	movs	r3, #15
 8011b7c:	4013      	ands	r3, r2
 8011b7e:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8011b80:	193b      	adds	r3, r7, r4
 8011b82:	781a      	ldrb	r2, [r3, #0]
 8011b84:	183b      	adds	r3, r7, r0
 8011b86:	781b      	ldrb	r3, [r3, #0]
 8011b88:	18d3      	adds	r3, r2, r3
 8011b8a:	001a      	movs	r2, r3
 8011b8c:	0013      	movs	r3, r2
 8011b8e:	005b      	lsls	r3, r3, #1
 8011b90:	189b      	adds	r3, r3, r2
 8011b92:	009b      	lsls	r3, r3, #2
 8011b94:	001a      	movs	r2, r3
 8011b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b98:	189b      	adds	r3, r3, r2
 8011b9a:	7a1b      	ldrb	r3, [r3, #8]
 8011b9c:	b25b      	sxtb	r3, r3
 8011b9e:	111b      	asrs	r3, r3, #4
 8011ba0:	b25b      	sxtb	r3, r3
 8011ba2:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8011ba4:	230f      	movs	r3, #15
 8011ba6:	4013      	ands	r3, r2
 8011ba8:	b25a      	sxtb	r2, r3
 8011baa:	1dbb      	adds	r3, r7, #6
 8011bac:	781b      	ldrb	r3, [r3, #0]
 8011bae:	b25b      	sxtb	r3, r3
 8011bb0:	0018      	movs	r0, r3
 8011bb2:	f000 f828 	bl	8011c06 <RegionCommonValueInRange>
 8011bb6:	0003      	movs	r3, r0
 8011bb8:	2b01      	cmp	r3, #1
 8011bba:	d101      	bne.n	8011bc0 <RegionCommonChanVerifyDr+0xec>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	e01e      	b.n	8011bfe <RegionCommonChanVerifyDr+0x12a>
        for( uint8_t j = 0; j < 16; j++ )
 8011bc0:	210d      	movs	r1, #13
 8011bc2:	187b      	adds	r3, r7, r1
 8011bc4:	781a      	ldrb	r2, [r3, #0]
 8011bc6:	187b      	adds	r3, r7, r1
 8011bc8:	3201      	adds	r2, #1
 8011bca:	701a      	strb	r2, [r3, #0]
 8011bcc:	230d      	movs	r3, #13
 8011bce:	18fb      	adds	r3, r7, r3
 8011bd0:	781b      	ldrb	r3, [r3, #0]
 8011bd2:	2b0f      	cmp	r3, #15
 8011bd4:	d9ad      	bls.n	8011b32 <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8011bd6:	220f      	movs	r2, #15
 8011bd8:	18bb      	adds	r3, r7, r2
 8011bda:	18ba      	adds	r2, r7, r2
 8011bdc:	7812      	ldrb	r2, [r2, #0]
 8011bde:	3210      	adds	r2, #16
 8011be0:	701a      	strb	r2, [r3, #0]
 8011be2:	210e      	movs	r1, #14
 8011be4:	187b      	adds	r3, r7, r1
 8011be6:	781a      	ldrb	r2, [r3, #0]
 8011be8:	187b      	adds	r3, r7, r1
 8011bea:	3201      	adds	r2, #1
 8011bec:	701a      	strb	r2, [r3, #0]
 8011bee:	230f      	movs	r3, #15
 8011bf0:	18fa      	adds	r2, r7, r3
 8011bf2:	1dfb      	adds	r3, r7, #7
 8011bf4:	7812      	ldrb	r2, [r2, #0]
 8011bf6:	781b      	ldrb	r3, [r3, #0]
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	d395      	bcc.n	8011b28 <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
 8011bfc:	2300      	movs	r3, #0
}
 8011bfe:	0018      	movs	r0, r3
 8011c00:	46bd      	mov	sp, r7
 8011c02:	b005      	add	sp, #20
 8011c04:	bd90      	pop	{r4, r7, pc}

08011c06 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8011c06:	b590      	push	{r4, r7, lr}
 8011c08:	b083      	sub	sp, #12
 8011c0a:	af00      	add	r7, sp, #0
 8011c0c:	0004      	movs	r4, r0
 8011c0e:	0008      	movs	r0, r1
 8011c10:	0011      	movs	r1, r2
 8011c12:	1dfb      	adds	r3, r7, #7
 8011c14:	1c22      	adds	r2, r4, #0
 8011c16:	701a      	strb	r2, [r3, #0]
 8011c18:	1dbb      	adds	r3, r7, #6
 8011c1a:	1c02      	adds	r2, r0, #0
 8011c1c:	701a      	strb	r2, [r3, #0]
 8011c1e:	1d7b      	adds	r3, r7, #5
 8011c20:	1c0a      	adds	r2, r1, #0
 8011c22:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
 8011c24:	1dfa      	adds	r2, r7, #7
 8011c26:	1dbb      	adds	r3, r7, #6
 8011c28:	7812      	ldrb	r2, [r2, #0]
 8011c2a:	b252      	sxtb	r2, r2
 8011c2c:	781b      	ldrb	r3, [r3, #0]
 8011c2e:	b25b      	sxtb	r3, r3
 8011c30:	429a      	cmp	r2, r3
 8011c32:	db09      	blt.n	8011c48 <RegionCommonValueInRange+0x42>
 8011c34:	1dfa      	adds	r2, r7, #7
 8011c36:	1d7b      	adds	r3, r7, #5
 8011c38:	7812      	ldrb	r2, [r2, #0]
 8011c3a:	b252      	sxtb	r2, r2
 8011c3c:	781b      	ldrb	r3, [r3, #0]
 8011c3e:	b25b      	sxtb	r3, r3
 8011c40:	429a      	cmp	r2, r3
 8011c42:	dc01      	bgt.n	8011c48 <RegionCommonValueInRange+0x42>
    {
        return 1;
 8011c44:	2301      	movs	r3, #1
 8011c46:	e000      	b.n	8011c4a <RegionCommonValueInRange+0x44>
    }
    return 0;
 8011c48:	2300      	movs	r3, #0
}
 8011c4a:	0018      	movs	r0, r3
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	b003      	add	sp, #12
 8011c50:	bd90      	pop	{r4, r7, pc}

08011c52 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8011c52:	b580      	push	{r7, lr}
 8011c54:	b084      	sub	sp, #16
 8011c56:	af00      	add	r7, sp, #0
 8011c58:	6078      	str	r0, [r7, #4]
 8011c5a:	0008      	movs	r0, r1
 8011c5c:	0011      	movs	r1, r2
 8011c5e:	1cfb      	adds	r3, r7, #3
 8011c60:	1c02      	adds	r2, r0, #0
 8011c62:	701a      	strb	r2, [r3, #0]
 8011c64:	1cbb      	adds	r3, r7, #2
 8011c66:	1c0a      	adds	r2, r1, #0
 8011c68:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
 8011c6a:	210f      	movs	r1, #15
 8011c6c:	187b      	adds	r3, r7, r1
 8011c6e:	1cfa      	adds	r2, r7, #3
 8011c70:	7812      	ldrb	r2, [r2, #0]
 8011c72:	0912      	lsrs	r2, r2, #4
 8011c74:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8011c76:	1cbb      	adds	r3, r7, #2
 8011c78:	781b      	ldrb	r3, [r3, #0]
 8011c7a:	091b      	lsrs	r3, r3, #4
 8011c7c:	b2db      	uxtb	r3, r3
 8011c7e:	187a      	adds	r2, r7, r1
 8011c80:	7812      	ldrb	r2, [r2, #0]
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d805      	bhi.n	8011c92 <RegionCommonChanDisable+0x40>
 8011c86:	1cfa      	adds	r2, r7, #3
 8011c88:	1cbb      	adds	r3, r7, #2
 8011c8a:	7812      	ldrb	r2, [r2, #0]
 8011c8c:	781b      	ldrb	r3, [r3, #0]
 8011c8e:	429a      	cmp	r2, r3
 8011c90:	d301      	bcc.n	8011c96 <RegionCommonChanDisable+0x44>
    {
        return false;
 8011c92:	2300      	movs	r3, #0
 8011c94:	e01b      	b.n	8011cce <RegionCommonChanDisable+0x7c>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8011c96:	200f      	movs	r0, #15
 8011c98:	183b      	adds	r3, r7, r0
 8011c9a:	781b      	ldrb	r3, [r3, #0]
 8011c9c:	005b      	lsls	r3, r3, #1
 8011c9e:	687a      	ldr	r2, [r7, #4]
 8011ca0:	18d3      	adds	r3, r2, r3
 8011ca2:	881b      	ldrh	r3, [r3, #0]
 8011ca4:	b21b      	sxth	r3, r3
 8011ca6:	1cfa      	adds	r2, r7, #3
 8011ca8:	7812      	ldrb	r2, [r2, #0]
 8011caa:	210f      	movs	r1, #15
 8011cac:	400a      	ands	r2, r1
 8011cae:	2101      	movs	r1, #1
 8011cb0:	4091      	lsls	r1, r2
 8011cb2:	000a      	movs	r2, r1
 8011cb4:	b212      	sxth	r2, r2
 8011cb6:	43d2      	mvns	r2, r2
 8011cb8:	b212      	sxth	r2, r2
 8011cba:	4013      	ands	r3, r2
 8011cbc:	b219      	sxth	r1, r3
 8011cbe:	183b      	adds	r3, r7, r0
 8011cc0:	781b      	ldrb	r3, [r3, #0]
 8011cc2:	005b      	lsls	r3, r3, #1
 8011cc4:	687a      	ldr	r2, [r7, #4]
 8011cc6:	18d3      	adds	r3, r2, r3
 8011cc8:	b28a      	uxth	r2, r1
 8011cca:	801a      	strh	r2, [r3, #0]

    return true;
 8011ccc:	2301      	movs	r3, #1
}
 8011cce:	0018      	movs	r0, r3
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	b004      	add	sp, #16
 8011cd4:	bd80      	pop	{r7, pc}

08011cd6 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8011cd6:	b590      	push	{r4, r7, lr}
 8011cd8:	b085      	sub	sp, #20
 8011cda:	af00      	add	r7, sp, #0
 8011cdc:	6078      	str	r0, [r7, #4]
 8011cde:	0008      	movs	r0, r1
 8011ce0:	0011      	movs	r1, r2
 8011ce2:	1cfb      	adds	r3, r7, #3
 8011ce4:	1c02      	adds	r2, r0, #0
 8011ce6:	701a      	strb	r2, [r3, #0]
 8011ce8:	1cbb      	adds	r3, r7, #2
 8011cea:	1c0a      	adds	r2, r1, #0
 8011cec:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
 8011cee:	230f      	movs	r3, #15
 8011cf0:	18fb      	adds	r3, r7, r3
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d101      	bne.n	8011d00 <RegionCommonCountChannels+0x2a>
    {
        return 0;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	e027      	b.n	8011d50 <RegionCommonCountChannels+0x7a>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8011d00:	230e      	movs	r3, #14
 8011d02:	18fb      	adds	r3, r7, r3
 8011d04:	1cfa      	adds	r2, r7, #3
 8011d06:	7812      	ldrb	r2, [r2, #0]
 8011d08:	701a      	strb	r2, [r3, #0]
 8011d0a:	e017      	b.n	8011d3c <RegionCommonCountChannels+0x66>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8011d0c:	240e      	movs	r4, #14
 8011d0e:	193b      	adds	r3, r7, r4
 8011d10:	781b      	ldrb	r3, [r3, #0]
 8011d12:	005b      	lsls	r3, r3, #1
 8011d14:	687a      	ldr	r2, [r7, #4]
 8011d16:	18d3      	adds	r3, r2, r3
 8011d18:	881b      	ldrh	r3, [r3, #0]
 8011d1a:	2110      	movs	r1, #16
 8011d1c:	0018      	movs	r0, r3
 8011d1e:	f7ff fe71 	bl	8011a04 <CountChannels>
 8011d22:	0003      	movs	r3, r0
 8011d24:	0019      	movs	r1, r3
 8011d26:	220f      	movs	r2, #15
 8011d28:	18bb      	adds	r3, r7, r2
 8011d2a:	18ba      	adds	r2, r7, r2
 8011d2c:	7812      	ldrb	r2, [r2, #0]
 8011d2e:	188a      	adds	r2, r1, r2
 8011d30:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8011d32:	193b      	adds	r3, r7, r4
 8011d34:	781a      	ldrb	r2, [r3, #0]
 8011d36:	193b      	adds	r3, r7, r4
 8011d38:	3201      	adds	r2, #1
 8011d3a:	701a      	strb	r2, [r3, #0]
 8011d3c:	230e      	movs	r3, #14
 8011d3e:	18fa      	adds	r2, r7, r3
 8011d40:	1cbb      	adds	r3, r7, #2
 8011d42:	7812      	ldrb	r2, [r2, #0]
 8011d44:	781b      	ldrb	r3, [r3, #0]
 8011d46:	429a      	cmp	r2, r3
 8011d48:	d3e0      	bcc.n	8011d0c <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
 8011d4a:	230f      	movs	r3, #15
 8011d4c:	18fb      	adds	r3, r7, r3
 8011d4e:	781b      	ldrb	r3, [r3, #0]
}
 8011d50:	0018      	movs	r0, r3
 8011d52:	46bd      	mov	sp, r7
 8011d54:	b005      	add	sp, #20
 8011d56:	bd90      	pop	{r4, r7, pc}

08011d58 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b086      	sub	sp, #24
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	60f8      	str	r0, [r7, #12]
 8011d60:	60b9      	str	r1, [r7, #8]
 8011d62:	1dfb      	adds	r3, r7, #7
 8011d64:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d020      	beq.n	8011dae <RegionCommonChanMaskCopy+0x56>
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d01d      	beq.n	8011dae <RegionCommonChanMaskCopy+0x56>
    {
        for( uint8_t i = 0; i < len; i++ )
 8011d72:	2317      	movs	r3, #23
 8011d74:	18fb      	adds	r3, r7, r3
 8011d76:	2200      	movs	r2, #0
 8011d78:	701a      	strb	r2, [r3, #0]
 8011d7a:	e011      	b.n	8011da0 <RegionCommonChanMaskCopy+0x48>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8011d7c:	2017      	movs	r0, #23
 8011d7e:	183b      	adds	r3, r7, r0
 8011d80:	781b      	ldrb	r3, [r3, #0]
 8011d82:	005b      	lsls	r3, r3, #1
 8011d84:	68ba      	ldr	r2, [r7, #8]
 8011d86:	18d2      	adds	r2, r2, r3
 8011d88:	183b      	adds	r3, r7, r0
 8011d8a:	781b      	ldrb	r3, [r3, #0]
 8011d8c:	005b      	lsls	r3, r3, #1
 8011d8e:	68f9      	ldr	r1, [r7, #12]
 8011d90:	18cb      	adds	r3, r1, r3
 8011d92:	8812      	ldrh	r2, [r2, #0]
 8011d94:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8011d96:	183b      	adds	r3, r7, r0
 8011d98:	781a      	ldrb	r2, [r3, #0]
 8011d9a:	183b      	adds	r3, r7, r0
 8011d9c:	3201      	adds	r2, #1
 8011d9e:	701a      	strb	r2, [r3, #0]
 8011da0:	2317      	movs	r3, #23
 8011da2:	18fa      	adds	r2, r7, r3
 8011da4:	1dfb      	adds	r3, r7, #7
 8011da6:	7812      	ldrb	r2, [r2, #0]
 8011da8:	781b      	ldrb	r3, [r3, #0]
 8011daa:	429a      	cmp	r2, r3
 8011dac:	d3e6      	bcc.n	8011d7c <RegionCommonChanMaskCopy+0x24>
        }
    }
}
 8011dae:	46c0      	nop			@ (mov r8, r8)
 8011db0:	46bd      	mov	sp, r7
 8011db2:	b006      	add	sp, #24
 8011db4:	bd80      	pop	{r7, pc}

08011db6 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
 8011db6:	b580      	push	{r7, lr}
 8011db8:	b084      	sub	sp, #16
 8011dba:	af00      	add	r7, sp, #0
 8011dbc:	60b9      	str	r1, [r7, #8]
 8011dbe:	607a      	str	r2, [r7, #4]
 8011dc0:	210f      	movs	r1, #15
 8011dc2:	187b      	adds	r3, r7, r1
 8011dc4:	1c02      	adds	r2, r0, #0
 8011dc6:	701a      	strb	r2, [r3, #0]
    if( joined == true )
 8011dc8:	187b      	adds	r3, r7, r1
 8011dca:	781b      	ldrb	r3, [r3, #0]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d003      	beq.n	8011dd8 <RegionCommonSetBandTxDone+0x22>
    {
        band->LastTxDoneTime = lastTxDone;
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	687a      	ldr	r2, [r7, #4]
 8011dd4:	609a      	str	r2, [r3, #8]
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
    }
}
 8011dd6:	e005      	b.n	8011de4 <RegionCommonSetBandTxDone+0x2e>
        band->LastTxDoneTime = lastTxDone;
 8011dd8:	68bb      	ldr	r3, [r7, #8]
 8011dda:	687a      	ldr	r2, [r7, #4]
 8011ddc:	609a      	str	r2, [r3, #8]
        band->LastJoinTxDoneTime = lastTxDone;
 8011dde:	68bb      	ldr	r3, [r7, #8]
 8011de0:	687a      	ldr	r2, [r7, #4]
 8011de2:	605a      	str	r2, [r3, #4]
}
 8011de4:	46c0      	nop			@ (mov r8, r8)
 8011de6:	46bd      	mov	sp, r7
 8011de8:	b004      	add	sp, #16
 8011dea:	bd80      	pop	{r7, pc}

08011dec <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 8011dec:	b590      	push	{r4, r7, lr}
 8011dee:	b089      	sub	sp, #36	@ 0x24
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	0004      	movs	r4, r0
 8011df4:	0008      	movs	r0, r1
 8011df6:	603a      	str	r2, [r7, #0]
 8011df8:	0019      	movs	r1, r3
 8011dfa:	1dfb      	adds	r3, r7, #7
 8011dfc:	1c22      	adds	r2, r4, #0
 8011dfe:	701a      	strb	r2, [r3, #0]
 8011e00:	1dbb      	adds	r3, r7, #6
 8011e02:	1c02      	adds	r2, r0, #0
 8011e04:	701a      	strb	r2, [r3, #0]
 8011e06:	1d7b      	adds	r3, r7, #5
 8011e08:	1c0a      	adds	r2, r1, #0
 8011e0a:	701a      	strb	r2, [r3, #0]
    TimerTime_t nextTxDelay = TIMERTIME_T_MAX;
 8011e0c:	2301      	movs	r3, #1
 8011e0e:	425b      	negs	r3, r3
 8011e10:	61fb      	str	r3, [r7, #28]

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
 8011e12:	231b      	movs	r3, #27
 8011e14:	18fb      	adds	r3, r7, r3
 8011e16:	2200      	movs	r2, #0
 8011e18:	701a      	strb	r2, [r3, #0]
 8011e1a:	e098      	b.n	8011f4e <RegionCommonUpdateBandTimeOff+0x162>
    {
        if( joined == false )
 8011e1c:	1dfb      	adds	r3, r7, #7
 8011e1e:	781b      	ldrb	r3, [r3, #0]
 8011e20:	2201      	movs	r2, #1
 8011e22:	4053      	eors	r3, r2
 8011e24:	b2db      	uxtb	r3, r3
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d04a      	beq.n	8011ec0 <RegionCommonUpdateBandTimeOff+0xd4>
        {
            TimerTime_t elapsedJoin = TimerGetElapsedTime( bands[i].LastJoinTxDoneTime );
 8011e2a:	241b      	movs	r4, #27
 8011e2c:	193b      	adds	r3, r7, r4
 8011e2e:	781b      	ldrb	r3, [r3, #0]
 8011e30:	011b      	lsls	r3, r3, #4
 8011e32:	683a      	ldr	r2, [r7, #0]
 8011e34:	18d3      	adds	r3, r2, r3
 8011e36:	685b      	ldr	r3, [r3, #4]
 8011e38:	0018      	movs	r0, r3
 8011e3a:	f003 fa62 	bl	8015302 <TimerGetElapsedTime>
 8011e3e:	0003      	movs	r3, r0
 8011e40:	613b      	str	r3, [r7, #16]
            TimerTime_t elapsedTx = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 8011e42:	193b      	adds	r3, r7, r4
 8011e44:	781b      	ldrb	r3, [r3, #0]
 8011e46:	011b      	lsls	r3, r3, #4
 8011e48:	683a      	ldr	r2, [r7, #0]
 8011e4a:	18d3      	adds	r3, r2, r3
 8011e4c:	689b      	ldr	r3, [r3, #8]
 8011e4e:	0018      	movs	r0, r3
 8011e50:	f003 fa57 	bl	8015302 <TimerGetElapsedTime>
 8011e54:	0003      	movs	r3, r0
 8011e56:	60fb      	str	r3, [r7, #12]
            TimerTime_t txDoneTime =  MAX( elapsedJoin,
 8011e58:	1dbb      	adds	r3, r7, #6
 8011e5a:	781b      	ldrb	r3, [r3, #0]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d001      	beq.n	8011e64 <RegionCommonUpdateBandTimeOff+0x78>
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	e000      	b.n	8011e66 <RegionCommonUpdateBandTimeOff+0x7a>
 8011e64:	2300      	movs	r3, #0
 8011e66:	693a      	ldr	r2, [r7, #16]
 8011e68:	4293      	cmp	r3, r2
 8011e6a:	d200      	bcs.n	8011e6e <RegionCommonUpdateBandTimeOff+0x82>
 8011e6c:	0013      	movs	r3, r2
 8011e6e:	60bb      	str	r3, [r7, #8]
                                        ( dutyCycle == true ) ? elapsedTx : 0 );

            if( bands[i].TimeOff <= txDoneTime )
 8011e70:	211b      	movs	r1, #27
 8011e72:	187b      	adds	r3, r7, r1
 8011e74:	781b      	ldrb	r3, [r3, #0]
 8011e76:	011b      	lsls	r3, r3, #4
 8011e78:	683a      	ldr	r2, [r7, #0]
 8011e7a:	18d3      	adds	r3, r2, r3
 8011e7c:	68db      	ldr	r3, [r3, #12]
 8011e7e:	68ba      	ldr	r2, [r7, #8]
 8011e80:	429a      	cmp	r2, r3
 8011e82:	d306      	bcc.n	8011e92 <RegionCommonUpdateBandTimeOff+0xa6>
            {
                bands[i].TimeOff = 0;
 8011e84:	187b      	adds	r3, r7, r1
 8011e86:	781b      	ldrb	r3, [r3, #0]
 8011e88:	011b      	lsls	r3, r3, #4
 8011e8a:	683a      	ldr	r2, [r7, #0]
 8011e8c:	18d3      	adds	r3, r2, r3
 8011e8e:	2200      	movs	r2, #0
 8011e90:	60da      	str	r2, [r3, #12]
            }
            if( bands[i].TimeOff != 0 )
 8011e92:	211b      	movs	r1, #27
 8011e94:	187b      	adds	r3, r7, r1
 8011e96:	781b      	ldrb	r3, [r3, #0]
 8011e98:	011b      	lsls	r3, r3, #4
 8011e9a:	683a      	ldr	r2, [r7, #0]
 8011e9c:	18d3      	adds	r3, r2, r3
 8011e9e:	68db      	ldr	r3, [r3, #12]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d04e      	beq.n	8011f42 <RegionCommonUpdateBandTimeOff+0x156>
            {
                nextTxDelay = MIN( bands[i].TimeOff - txDoneTime, nextTxDelay );
 8011ea4:	187b      	adds	r3, r7, r1
 8011ea6:	781b      	ldrb	r3, [r3, #0]
 8011ea8:	011b      	lsls	r3, r3, #4
 8011eaa:	683a      	ldr	r2, [r7, #0]
 8011eac:	18d3      	adds	r3, r2, r3
 8011eae:	68da      	ldr	r2, [r3, #12]
 8011eb0:	68bb      	ldr	r3, [r7, #8]
 8011eb2:	1ad2      	subs	r2, r2, r3
 8011eb4:	69fb      	ldr	r3, [r7, #28]
 8011eb6:	4293      	cmp	r3, r2
 8011eb8:	d900      	bls.n	8011ebc <RegionCommonUpdateBandTimeOff+0xd0>
 8011eba:	0013      	movs	r3, r2
 8011ebc:	61fb      	str	r3, [r7, #28]
 8011ebe:	e040      	b.n	8011f42 <RegionCommonUpdateBandTimeOff+0x156>
            }
        }
        else
        {
            if( dutyCycle == true )
 8011ec0:	1dbb      	adds	r3, r7, #6
 8011ec2:	781b      	ldrb	r3, [r3, #0]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d032      	beq.n	8011f2e <RegionCommonUpdateBandTimeOff+0x142>
            {
                TimerTime_t elapsed = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 8011ec8:	241b      	movs	r4, #27
 8011eca:	193b      	adds	r3, r7, r4
 8011ecc:	781b      	ldrb	r3, [r3, #0]
 8011ece:	011b      	lsls	r3, r3, #4
 8011ed0:	683a      	ldr	r2, [r7, #0]
 8011ed2:	18d3      	adds	r3, r2, r3
 8011ed4:	689b      	ldr	r3, [r3, #8]
 8011ed6:	0018      	movs	r0, r3
 8011ed8:	f003 fa13 	bl	8015302 <TimerGetElapsedTime>
 8011edc:	0003      	movs	r3, r0
 8011ede:	617b      	str	r3, [r7, #20]
                if( bands[i].TimeOff <= elapsed )
 8011ee0:	193b      	adds	r3, r7, r4
 8011ee2:	781b      	ldrb	r3, [r3, #0]
 8011ee4:	011b      	lsls	r3, r3, #4
 8011ee6:	683a      	ldr	r2, [r7, #0]
 8011ee8:	18d3      	adds	r3, r2, r3
 8011eea:	68db      	ldr	r3, [r3, #12]
 8011eec:	697a      	ldr	r2, [r7, #20]
 8011eee:	429a      	cmp	r2, r3
 8011ef0:	d306      	bcc.n	8011f00 <RegionCommonUpdateBandTimeOff+0x114>
                {
                    bands[i].TimeOff = 0;
 8011ef2:	193b      	adds	r3, r7, r4
 8011ef4:	781b      	ldrb	r3, [r3, #0]
 8011ef6:	011b      	lsls	r3, r3, #4
 8011ef8:	683a      	ldr	r2, [r7, #0]
 8011efa:	18d3      	adds	r3, r2, r3
 8011efc:	2200      	movs	r2, #0
 8011efe:	60da      	str	r2, [r3, #12]
                }
                if( bands[i].TimeOff != 0 )
 8011f00:	211b      	movs	r1, #27
 8011f02:	187b      	adds	r3, r7, r1
 8011f04:	781b      	ldrb	r3, [r3, #0]
 8011f06:	011b      	lsls	r3, r3, #4
 8011f08:	683a      	ldr	r2, [r7, #0]
 8011f0a:	18d3      	adds	r3, r2, r3
 8011f0c:	68db      	ldr	r3, [r3, #12]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d017      	beq.n	8011f42 <RegionCommonUpdateBandTimeOff+0x156>
                {
                    nextTxDelay = MIN( bands[i].TimeOff - elapsed, nextTxDelay );
 8011f12:	187b      	adds	r3, r7, r1
 8011f14:	781b      	ldrb	r3, [r3, #0]
 8011f16:	011b      	lsls	r3, r3, #4
 8011f18:	683a      	ldr	r2, [r7, #0]
 8011f1a:	18d3      	adds	r3, r2, r3
 8011f1c:	68da      	ldr	r2, [r3, #12]
 8011f1e:	697b      	ldr	r3, [r7, #20]
 8011f20:	1ad2      	subs	r2, r2, r3
 8011f22:	69fb      	ldr	r3, [r7, #28]
 8011f24:	4293      	cmp	r3, r2
 8011f26:	d900      	bls.n	8011f2a <RegionCommonUpdateBandTimeOff+0x13e>
 8011f28:	0013      	movs	r3, r2
 8011f2a:	61fb      	str	r3, [r7, #28]
 8011f2c:	e009      	b.n	8011f42 <RegionCommonUpdateBandTimeOff+0x156>
                }
            }
            else
            {
                nextTxDelay = 0;
 8011f2e:	2300      	movs	r3, #0
 8011f30:	61fb      	str	r3, [r7, #28]
                bands[i].TimeOff = 0;
 8011f32:	231b      	movs	r3, #27
 8011f34:	18fb      	adds	r3, r7, r3
 8011f36:	781b      	ldrb	r3, [r3, #0]
 8011f38:	011b      	lsls	r3, r3, #4
 8011f3a:	683a      	ldr	r2, [r7, #0]
 8011f3c:	18d3      	adds	r3, r2, r3
 8011f3e:	2200      	movs	r2, #0
 8011f40:	60da      	str	r2, [r3, #12]
    for( uint8_t i = 0; i < nbBands; i++ )
 8011f42:	211b      	movs	r1, #27
 8011f44:	187b      	adds	r3, r7, r1
 8011f46:	781a      	ldrb	r2, [r3, #0]
 8011f48:	187b      	adds	r3, r7, r1
 8011f4a:	3201      	adds	r2, #1
 8011f4c:	701a      	strb	r2, [r3, #0]
 8011f4e:	231b      	movs	r3, #27
 8011f50:	18fa      	adds	r2, r7, r3
 8011f52:	1d7b      	adds	r3, r7, #5
 8011f54:	7812      	ldrb	r2, [r2, #0]
 8011f56:	781b      	ldrb	r3, [r3, #0]
 8011f58:	429a      	cmp	r2, r3
 8011f5a:	d200      	bcs.n	8011f5e <RegionCommonUpdateBandTimeOff+0x172>
 8011f5c:	e75e      	b.n	8011e1c <RegionCommonUpdateBandTimeOff+0x30>
            }
        }
    }

    return ( nextTxDelay == TIMERTIME_T_MAX ) ? 0 : nextTxDelay;
 8011f5e:	69fb      	ldr	r3, [r7, #28]
 8011f60:	3301      	adds	r3, #1
 8011f62:	d001      	beq.n	8011f68 <RegionCommonUpdateBandTimeOff+0x17c>
 8011f64:	69fb      	ldr	r3, [r7, #28]
 8011f66:	e000      	b.n	8011f6a <RegionCommonUpdateBandTimeOff+0x17e>
 8011f68:	2300      	movs	r3, #0
}
 8011f6a:	0018      	movs	r0, r3
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	b009      	add	sp, #36	@ 0x24
 8011f70:	bd90      	pop	{r4, r7, pc}

08011f72 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8011f72:	b580      	push	{r7, lr}
 8011f74:	b084      	sub	sp, #16
 8011f76:	af00      	add	r7, sp, #0
 8011f78:	6078      	str	r0, [r7, #4]
 8011f7a:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8011f7c:	210f      	movs	r1, #15
 8011f7e:	187b      	adds	r3, r7, r1
 8011f80:	2200      	movs	r2, #0
 8011f82:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	781b      	ldrb	r3, [r3, #0]
 8011f88:	2b03      	cmp	r3, #3
 8011f8a:	d140      	bne.n	801200e <RegionCommonParseLinkAdrReq+0x9c>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	3301      	adds	r3, #1
 8011f90:	781b      	ldrb	r3, [r3, #0]
 8011f92:	b25a      	sxtb	r2, r3
 8011f94:	683b      	ldr	r3, [r7, #0]
 8011f96:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	785b      	ldrb	r3, [r3, #1]
 8011f9c:	b25b      	sxtb	r3, r3
 8011f9e:	220f      	movs	r2, #15
 8011fa0:	4013      	ands	r3, r2
 8011fa2:	b25a      	sxtb	r2, r3
 8011fa4:	683b      	ldr	r3, [r7, #0]
 8011fa6:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8011fa8:	683b      	ldr	r3, [r7, #0]
 8011faa:	785b      	ldrb	r3, [r3, #1]
 8011fac:	b25b      	sxtb	r3, r3
 8011fae:	b2db      	uxtb	r3, r3
 8011fb0:	091b      	lsrs	r3, r3, #4
 8011fb2:	b2db      	uxtb	r3, r3
 8011fb4:	b25a      	sxtb	r2, r3
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	3302      	adds	r3, #2
 8011fbe:	781b      	ldrb	r3, [r3, #0]
 8011fc0:	001a      	movs	r2, r3
 8011fc2:	683b      	ldr	r3, [r7, #0]
 8011fc4:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8011fc6:	683b      	ldr	r3, [r7, #0]
 8011fc8:	889b      	ldrh	r3, [r3, #4]
 8011fca:	b21a      	sxth	r2, r3
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	3303      	adds	r3, #3
 8011fd0:	781b      	ldrb	r3, [r3, #0]
 8011fd2:	021b      	lsls	r3, r3, #8
 8011fd4:	b21b      	sxth	r3, r3
 8011fd6:	4313      	orrs	r3, r2
 8011fd8:	b21b      	sxth	r3, r3
 8011fda:	b29a      	uxth	r2, r3
 8011fdc:	683b      	ldr	r3, [r7, #0]
 8011fde:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	791a      	ldrb	r2, [r3, #4]
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	091b      	lsrs	r3, r3, #4
 8011fee:	b2db      	uxtb	r3, r3
 8011ff0:	2207      	movs	r2, #7
 8011ff2:	4013      	ands	r3, r2
 8011ff4:	b2da      	uxtb	r2, r3
 8011ff6:	683b      	ldr	r3, [r7, #0]
 8011ff8:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8011ffa:	683b      	ldr	r3, [r7, #0]
 8011ffc:	781b      	ldrb	r3, [r3, #0]
 8011ffe:	220f      	movs	r2, #15
 8012000:	4013      	ands	r3, r2
 8012002:	b2da      	uxtb	r2, r3
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8012008:	187b      	adds	r3, r7, r1
 801200a:	2205      	movs	r2, #5
 801200c:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
 801200e:	230f      	movs	r3, #15
 8012010:	18fb      	adds	r3, r7, r3
 8012012:	781b      	ldrb	r3, [r3, #0]
}
 8012014:	0018      	movs	r0, r3
 8012016:	46bd      	mov	sp, r7
 8012018:	b004      	add	sp, #16
 801201a:	bd80      	pop	{r7, pc}

0801201c <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801201c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801201e:	b089      	sub	sp, #36	@ 0x24
 8012020:	af02      	add	r7, sp, #8
 8012022:	60f8      	str	r0, [r7, #12]
 8012024:	60b9      	str	r1, [r7, #8]
 8012026:	607a      	str	r2, [r7, #4]
 8012028:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 801202a:	2317      	movs	r3, #23
 801202c:	18fb      	adds	r3, r7, r3
 801202e:	68fa      	ldr	r2, [r7, #12]
 8012030:	7912      	ldrb	r2, [r2, #4]
 8012032:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
 8012034:	2116      	movs	r1, #22
 8012036:	187b      	adds	r3, r7, r1
 8012038:	68fa      	ldr	r2, [r7, #12]
 801203a:	7992      	ldrb	r2, [r2, #6]
 801203c:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
 801203e:	2015      	movs	r0, #21
 8012040:	183b      	adds	r3, r7, r0
 8012042:	68fa      	ldr	r2, [r7, #12]
 8012044:	79d2      	ldrb	r2, [r2, #7]
 8012046:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	7a1a      	ldrb	r2, [r3, #8]
 801204c:	2414      	movs	r4, #20
 801204e:	193b      	adds	r3, r7, r4
 8012050:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	795b      	ldrb	r3, [r3, #5]
 8012056:	2201      	movs	r2, #1
 8012058:	4053      	eors	r3, r2
 801205a:	b2db      	uxtb	r3, r3
 801205c:	2b00      	cmp	r3, #0
 801205e:	d00b      	beq.n	8012078 <RegionCommonLinkAdrReqVerifyParams+0x5c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8012060:	193b      	adds	r3, r7, r4
 8012062:	68fa      	ldr	r2, [r7, #12]
 8012064:	7ad2      	ldrb	r2, [r2, #11]
 8012066:	701a      	strb	r2, [r3, #0]
        datarate =  verifyParams->CurrentDatarate;
 8012068:	187b      	adds	r3, r7, r1
 801206a:	68fa      	ldr	r2, [r7, #12]
 801206c:	7a52      	ldrb	r2, [r2, #9]
 801206e:	701a      	strb	r2, [r3, #0]
        txPower =  verifyParams->CurrentTxPower;
 8012070:	183b      	adds	r3, r7, r0
 8012072:	68fa      	ldr	r2, [r7, #12]
 8012074:	7a92      	ldrb	r2, [r2, #10]
 8012076:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
 8012078:	2617      	movs	r6, #23
 801207a:	19bb      	adds	r3, r7, r6
 801207c:	781b      	ldrb	r3, [r3, #0]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d046      	beq.n	8012110 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	7b18      	ldrb	r0, [r3, #12]
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	691c      	ldr	r4, [r3, #16]
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	2514      	movs	r5, #20
 801208e:	575d      	ldrsb	r5, [r3, r5]
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	2215      	movs	r2, #21
 8012094:	569a      	ldrsb	r2, [r3, r2]
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	699b      	ldr	r3, [r3, #24]
 801209a:	2116      	movs	r1, #22
 801209c:	1879      	adds	r1, r7, r1
 801209e:	7809      	ldrb	r1, [r1, #0]
 80120a0:	b249      	sxtb	r1, r1
 80120a2:	9301      	str	r3, [sp, #4]
 80120a4:	9200      	str	r2, [sp, #0]
 80120a6:	002b      	movs	r3, r5
 80120a8:	000a      	movs	r2, r1
 80120aa:	0021      	movs	r1, r4
 80120ac:	f7ff fd12 	bl	8011ad4 <RegionCommonChanVerifyDr>
 80120b0:	0003      	movs	r3, r0
 80120b2:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80120b4:	2301      	movs	r3, #1
 80120b6:	4053      	eors	r3, r2
 80120b8:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d005      	beq.n	80120ca <RegionCommonLinkAdrReqVerifyParams+0xae>
        {
            status &= 0xFD; // Datarate KO
 80120be:	19bb      	adds	r3, r7, r6
 80120c0:	19ba      	adds	r2, r7, r6
 80120c2:	7812      	ldrb	r2, [r2, #0]
 80120c4:	2102      	movs	r1, #2
 80120c6:	438a      	bics	r2, r1
 80120c8:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	211d      	movs	r1, #29
 80120ce:	5659      	ldrsb	r1, [r3, r1]
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	221c      	movs	r2, #28
 80120d4:	569a      	ldrsb	r2, [r3, r2]
 80120d6:	2415      	movs	r4, #21
 80120d8:	193b      	adds	r3, r7, r4
 80120da:	781b      	ldrb	r3, [r3, #0]
 80120dc:	b25b      	sxtb	r3, r3
 80120de:	0018      	movs	r0, r3
 80120e0:	f7ff fd91 	bl	8011c06 <RegionCommonValueInRange>
 80120e4:	1e03      	subs	r3, r0, #0
 80120e6:	d113      	bne.n	8012110 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	7f5b      	ldrb	r3, [r3, #29]
 80120ec:	b25b      	sxtb	r3, r3
 80120ee:	193a      	adds	r2, r7, r4
 80120f0:	7812      	ldrb	r2, [r2, #0]
 80120f2:	b252      	sxtb	r2, r2
 80120f4:	429a      	cmp	r2, r3
 80120f6:	da04      	bge.n	8012102 <RegionCommonLinkAdrReqVerifyParams+0xe6>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80120f8:	193b      	adds	r3, r7, r4
 80120fa:	68fa      	ldr	r2, [r7, #12]
 80120fc:	7f52      	ldrb	r2, [r2, #29]
 80120fe:	701a      	strb	r2, [r3, #0]
 8012100:	e006      	b.n	8012110 <RegionCommonLinkAdrReqVerifyParams+0xf4>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8012102:	2217      	movs	r2, #23
 8012104:	18bb      	adds	r3, r7, r2
 8012106:	18ba      	adds	r2, r7, r2
 8012108:	7812      	ldrb	r2, [r2, #0]
 801210a:	2104      	movs	r1, #4
 801210c:	438a      	bics	r2, r1
 801210e:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8012110:	2317      	movs	r3, #23
 8012112:	18fb      	adds	r3, r7, r3
 8012114:	781b      	ldrb	r3, [r3, #0]
 8012116:	2b07      	cmp	r3, #7
 8012118:	d108      	bne.n	801212c <RegionCommonLinkAdrReqVerifyParams+0x110>
    {
        if( nbRepetitions == 0 )
 801211a:	2214      	movs	r2, #20
 801211c:	18bb      	adds	r3, r7, r2
 801211e:	781b      	ldrb	r3, [r3, #0]
 8012120:	b25b      	sxtb	r3, r3
 8012122:	2b00      	cmp	r3, #0
 8012124:	d102      	bne.n	801212c <RegionCommonLinkAdrReqVerifyParams+0x110>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8012126:	18bb      	adds	r3, r7, r2
 8012128:	2201      	movs	r2, #1
 801212a:	701a      	strb	r2, [r3, #0]
        }
    }

    // Apply changes
    *dr = datarate;
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	2216      	movs	r2, #22
 8012130:	18ba      	adds	r2, r7, r2
 8012132:	7812      	ldrb	r2, [r2, #0]
 8012134:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	2215      	movs	r2, #21
 801213a:	18ba      	adds	r2, r7, r2
 801213c:	7812      	ldrb	r2, [r2, #0]
 801213e:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8012140:	2314      	movs	r3, #20
 8012142:	18fb      	adds	r3, r7, r3
 8012144:	781a      	ldrb	r2, [r3, #0]
 8012146:	683b      	ldr	r3, [r7, #0]
 8012148:	701a      	strb	r2, [r3, #0]

    return status;
 801214a:	2317      	movs	r3, #23
 801214c:	18fb      	adds	r3, r7, r3
 801214e:	781b      	ldrb	r3, [r3, #0]
}
 8012150:	0018      	movs	r0, r3
 8012152:	46bd      	mov	sp, r7
 8012154:	b007      	add	sp, #28
 8012156:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012158 <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 8012158:	b5b0      	push	{r4, r5, r7, lr}
 801215a:	b082      	sub	sp, #8
 801215c:	af00      	add	r7, sp, #0
 801215e:	0002      	movs	r2, r0
 8012160:	6039      	str	r1, [r7, #0]
 8012162:	1dfb      	adds	r3, r7, #7
 8012164:	701a      	strb	r2, [r3, #0]
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 8012166:	1dfb      	adds	r3, r7, #7
 8012168:	781b      	ldrb	r3, [r3, #0]
 801216a:	2201      	movs	r2, #1
 801216c:	409a      	lsls	r2, r3
 801216e:	0013      	movs	r3, r2
 8012170:	0018      	movs	r0, r3
 8012172:	f7f0 fe55 	bl	8002e20 <__aeabi_i2d>
 8012176:	0004      	movs	r4, r0
 8012178:	000d      	movs	r5, r1
 801217a:	6838      	ldr	r0, [r7, #0]
 801217c:	f7f0 fe7e 	bl	8002e7c <__aeabi_ui2d>
 8012180:	0002      	movs	r2, r0
 8012182:	000b      	movs	r3, r1
 8012184:	0020      	movs	r0, r4
 8012186:	0029      	movs	r1, r5
 8012188:	f7ef fb66 	bl	8001858 <__aeabi_ddiv>
 801218c:	0002      	movs	r2, r0
 801218e:	000b      	movs	r3, r1
 8012190:	0010      	movs	r0, r2
 8012192:	0019      	movs	r1, r3
 8012194:	2200      	movs	r2, #0
 8012196:	4b05      	ldr	r3, [pc, #20]	@ (80121ac <RegionCommonComputeSymbolTimeLoRa+0x54>)
 8012198:	f7ef ffa2 	bl	80020e0 <__aeabi_dmul>
 801219c:	0002      	movs	r2, r0
 801219e:	000b      	movs	r3, r1
}
 80121a0:	0010      	movs	r0, r2
 80121a2:	0019      	movs	r1, r3
 80121a4:	46bd      	mov	sp, r7
 80121a6:	b002      	add	sp, #8
 80121a8:	bdb0      	pop	{r4, r5, r7, pc}
 80121aa:	46c0      	nop			@ (mov r8, r8)
 80121ac:	408f4000 	.word	0x408f4000

080121b0 <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b082      	sub	sp, #8
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	0002      	movs	r2, r0
 80121b8:	1dfb      	adds	r3, r7, #7
 80121ba:	701a      	strb	r2, [r3, #0]
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
 80121bc:	1dfb      	adds	r3, r7, #7
 80121be:	781b      	ldrb	r3, [r3, #0]
 80121c0:	0018      	movs	r0, r3
 80121c2:	f7f0 fe5b 	bl	8002e7c <__aeabi_ui2d>
 80121c6:	0002      	movs	r2, r0
 80121c8:	000b      	movs	r3, r1
 80121ca:	2000      	movs	r0, #0
 80121cc:	4904      	ldr	r1, [pc, #16]	@ (80121e0 <RegionCommonComputeSymbolTimeFsk+0x30>)
 80121ce:	f7ef fb43 	bl	8001858 <__aeabi_ddiv>
 80121d2:	0002      	movs	r2, r0
 80121d4:	000b      	movs	r3, r1
}
 80121d6:	0010      	movs	r0, r2
 80121d8:	0019      	movs	r1, r3
 80121da:	46bd      	mov	sp, r7
 80121dc:	b002      	add	sp, #8
 80121de:	bd80      	pop	{r7, pc}
 80121e0:	40200000 	.word	0x40200000

080121e4 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 80121e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121e6:	b085      	sub	sp, #20
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	60b8      	str	r0, [r7, #8]
 80121ec:	60f9      	str	r1, [r7, #12]
 80121ee:	603b      	str	r3, [r7, #0]
 80121f0:	1dfb      	adds	r3, r7, #7
 80121f2:	701a      	strb	r2, [r3, #0]
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 80121f4:	1dfb      	adds	r3, r7, #7
 80121f6:	781e      	ldrb	r6, [r3, #0]
 80121f8:	1dfb      	adds	r3, r7, #7
 80121fa:	781b      	ldrb	r3, [r3, #0]
 80121fc:	3b04      	subs	r3, #4
 80121fe:	005b      	lsls	r3, r3, #1
 8012200:	0018      	movs	r0, r3
 8012202:	f7f0 fe0d 	bl	8002e20 <__aeabi_i2d>
 8012206:	68ba      	ldr	r2, [r7, #8]
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	f7ef ff69 	bl	80020e0 <__aeabi_dmul>
 801220e:	0002      	movs	r2, r0
 8012210:	000b      	movs	r3, r1
 8012212:	0014      	movs	r4, r2
 8012214:	001d      	movs	r5, r3
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	005b      	lsls	r3, r3, #1
 801221a:	0018      	movs	r0, r3
 801221c:	f7f0 fe2e 	bl	8002e7c <__aeabi_ui2d>
 8012220:	0002      	movs	r2, r0
 8012222:	000b      	movs	r3, r1
 8012224:	0020      	movs	r0, r4
 8012226:	0029      	movs	r1, r5
 8012228:	f7ee ffb2 	bl	8001190 <__aeabi_dadd>
 801222c:	0002      	movs	r2, r0
 801222e:	000b      	movs	r3, r1
 8012230:	0010      	movs	r0, r2
 8012232:	0019      	movs	r1, r3
 8012234:	68ba      	ldr	r2, [r7, #8]
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	f7ef fb0e 	bl	8001858 <__aeabi_ddiv>
 801223c:	0002      	movs	r2, r0
 801223e:	000b      	movs	r3, r1
 8012240:	0010      	movs	r0, r2
 8012242:	0019      	movs	r1, r3
 8012244:	f008 f8ba 	bl	801a3bc <ceil>
 8012248:	0002      	movs	r2, r0
 801224a:	000b      	movs	r3, r1
 801224c:	0010      	movs	r0, r2
 801224e:	0019      	movs	r1, r3
 8012250:	f7ee f98a 	bl	8000568 <__aeabi_d2uiz>
 8012254:	0002      	movs	r2, r0
 8012256:	0033      	movs	r3, r6
 8012258:	4293      	cmp	r3, r2
 801225a:	d200      	bcs.n	801225e <RegionCommonComputeRxWindowParameters+0x7a>
 801225c:	0013      	movs	r3, r2
 801225e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012260:	6013      	str	r3, [r2, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 8012262:	2200      	movs	r2, #0
 8012264:	4b20      	ldr	r3, [pc, #128]	@ (80122e8 <RegionCommonComputeRxWindowParameters+0x104>)
 8012266:	68b8      	ldr	r0, [r7, #8]
 8012268:	68f9      	ldr	r1, [r7, #12]
 801226a:	f7ef ff39 	bl	80020e0 <__aeabi_dmul>
 801226e:	0002      	movs	r2, r0
 8012270:	000b      	movs	r3, r1
 8012272:	0014      	movs	r4, r2
 8012274:	001d      	movs	r5, r3
 8012276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	0018      	movs	r0, r3
 801227c:	f7f0 fdfe 	bl	8002e7c <__aeabi_ui2d>
 8012280:	68ba      	ldr	r2, [r7, #8]
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	f7ef ff2c 	bl	80020e0 <__aeabi_dmul>
 8012288:	0002      	movs	r2, r0
 801228a:	000b      	movs	r3, r1
 801228c:	0010      	movs	r0, r2
 801228e:	0019      	movs	r1, r3
 8012290:	2200      	movs	r2, #0
 8012292:	2380      	movs	r3, #128	@ 0x80
 8012294:	05db      	lsls	r3, r3, #23
 8012296:	f7ef fadf 	bl	8001858 <__aeabi_ddiv>
 801229a:	0002      	movs	r2, r0
 801229c:	000b      	movs	r3, r1
 801229e:	0020      	movs	r0, r4
 80122a0:	0029      	movs	r1, r5
 80122a2:	f7f0 f9e5 	bl	8002670 <__aeabi_dsub>
 80122a6:	0002      	movs	r2, r0
 80122a8:	000b      	movs	r3, r1
 80122aa:	0014      	movs	r4, r2
 80122ac:	001d      	movs	r5, r3
 80122ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80122b0:	f7f0 fde4 	bl	8002e7c <__aeabi_ui2d>
 80122b4:	0002      	movs	r2, r0
 80122b6:	000b      	movs	r3, r1
 80122b8:	0020      	movs	r0, r4
 80122ba:	0029      	movs	r1, r5
 80122bc:	f7f0 f9d8 	bl	8002670 <__aeabi_dsub>
 80122c0:	0002      	movs	r2, r0
 80122c2:	000b      	movs	r3, r1
 80122c4:	0010      	movs	r0, r2
 80122c6:	0019      	movs	r1, r3
 80122c8:	f008 f878 	bl	801a3bc <ceil>
 80122cc:	0002      	movs	r2, r0
 80122ce:	000b      	movs	r3, r1
 80122d0:	0010      	movs	r0, r2
 80122d2:	0019      	movs	r1, r3
 80122d4:	f7f0 fd68 	bl	8002da8 <__aeabi_d2iz>
 80122d8:	0002      	movs	r2, r0
 80122da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122dc:	601a      	str	r2, [r3, #0]
}
 80122de:	46c0      	nop			@ (mov r8, r8)
 80122e0:	46bd      	mov	sp, r7
 80122e2:	b005      	add	sp, #20
 80122e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122e6:	46c0      	nop			@ (mov r8, r8)
 80122e8:	40100000 	.word	0x40100000

080122ec <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80122ec:	b5b0      	push	{r4, r5, r7, lr}
 80122ee:	b086      	sub	sp, #24
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	60b9      	str	r1, [r7, #8]
 80122f4:	607a      	str	r2, [r7, #4]
 80122f6:	210f      	movs	r1, #15
 80122f8:	187b      	adds	r3, r7, r1
 80122fa:	1c02      	adds	r2, r0, #0
 80122fc:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 0;
 80122fe:	2417      	movs	r4, #23
 8012300:	193b      	adds	r3, r7, r4
 8012302:	2200      	movs	r2, #0
 8012304:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8012306:	187b      	adds	r3, r7, r1
 8012308:	781b      	ldrb	r3, [r3, #0]
 801230a:	b25b      	sxtb	r3, r3
 801230c:	005b      	lsls	r3, r3, #1
 801230e:	0018      	movs	r0, r3
 8012310:	f7ee fefc 	bl	800110c <__aeabi_ui2f>
 8012314:	1c03      	adds	r3, r0, #0
 8012316:	1c19      	adds	r1, r3, #0
 8012318:	68b8      	ldr	r0, [r7, #8]
 801231a:	f7ee fd33 	bl	8000d84 <__aeabi_fsub>
 801231e:	1c03      	adds	r3, r0, #0
 8012320:	6879      	ldr	r1, [r7, #4]
 8012322:	1c18      	adds	r0, r3, #0
 8012324:	f7ee fd2e 	bl	8000d84 <__aeabi_fsub>
 8012328:	1c03      	adds	r3, r0, #0
 801232a:	1c18      	adds	r0, r3, #0
 801232c:	f7f0 fdca 	bl	8002ec4 <__aeabi_f2d>
 8012330:	0002      	movs	r2, r0
 8012332:	000b      	movs	r3, r1
 8012334:	0010      	movs	r0, r2
 8012336:	0019      	movs	r1, r3
 8012338:	f008 f8b8 	bl	801a4ac <floor>
 801233c:	0002      	movs	r2, r0
 801233e:	000b      	movs	r3, r1
 8012340:	0025      	movs	r5, r4
 8012342:	193c      	adds	r4, r7, r4
 8012344:	0010      	movs	r0, r2
 8012346:	0019      	movs	r1, r3
 8012348:	f7f0 fd2e 	bl	8002da8 <__aeabi_d2iz>
 801234c:	0003      	movs	r3, r0
 801234e:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
 8012350:	197b      	adds	r3, r7, r5
 8012352:	781b      	ldrb	r3, [r3, #0]
 8012354:	b25b      	sxtb	r3, r3
}
 8012356:	0018      	movs	r0, r3
 8012358:	46bd      	mov	sp, r7
 801235a:	b006      	add	sp, #24
 801235c:	bdb0      	pop	{r4, r5, r7, pc}

0801235e <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
 801235e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012360:	b085      	sub	sp, #20
 8012362:	af00      	add	r7, sp, #0
 8012364:	6078      	str	r0, [r7, #4]
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681a      	ldr	r2, [r3, #0]
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	7adb      	ldrb	r3, [r3, #11]
 801236e:	0019      	movs	r1, r3
 8012370:	000b      	movs	r3, r1
 8012372:	005b      	lsls	r3, r3, #1
 8012374:	185b      	adds	r3, r3, r1
 8012376:	009b      	lsls	r3, r3, #2
 8012378:	18d2      	adds	r2, r2, r3
 801237a:	210f      	movs	r1, #15
 801237c:	187b      	adds	r3, r7, r1
 801237e:	7a52      	ldrb	r2, [r2, #9]
 8012380:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	685a      	ldr	r2, [r3, #4]
 8012386:	187b      	adds	r3, r7, r1
 8012388:	781b      	ldrb	r3, [r3, #0]
 801238a:	011b      	lsls	r3, r3, #4
 801238c:	18d2      	adds	r2, r2, r3
 801238e:	250c      	movs	r5, #12
 8012390:	197b      	adds	r3, r7, r5
 8012392:	8812      	ldrh	r2, [r2, #0]
 8012394:	801a      	strh	r2, [r3, #0]
    uint16_t joinDutyCycle = 0;
 8012396:	200a      	movs	r0, #10
 8012398:	183b      	adds	r3, r7, r0
 801239a:	2200      	movs	r2, #0
 801239c:	801a      	strh	r2, [r3, #0]

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	685a      	ldr	r2, [r3, #4]
 80123a2:	187b      	adds	r3, r7, r1
 80123a4:	781b      	ldrb	r3, [r3, #0]
 80123a6:	011b      	lsls	r3, r3, #4
 80123a8:	18d3      	adds	r3, r2, r3
 80123aa:	2200      	movs	r2, #0
 80123ac:	60da      	str	r2, [r3, #12]

    if( calcBackOffParams->Joined == false )
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	7a5b      	ldrb	r3, [r3, #9]
 80123b2:	2201      	movs	r2, #1
 80123b4:	4053      	eors	r3, r2
 80123b6:	b2db      	uxtb	r3, r3
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d03b      	beq.n	8012434 <RegionCommonCalcBackOff+0xd6>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	68db      	ldr	r3, [r3, #12]
 80123c0:	0006      	movs	r6, r0
 80123c2:	183c      	adds	r4, r7, r0
 80123c4:	0018      	movs	r0, r3
 80123c6:	f7ff fb59 	bl	8011a7c <RegionCommonGetJoinDc>
 80123ca:	0003      	movs	r3, r0
 80123cc:	8023      	strh	r3, [r4, #0]
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80123ce:	197a      	adds	r2, r7, r5
 80123d0:	19bb      	adds	r3, r7, r6
 80123d2:	1979      	adds	r1, r7, r5
 80123d4:	880c      	ldrh	r4, [r1, #0]
 80123d6:	881b      	ldrh	r3, [r3, #0]
 80123d8:	b298      	uxth	r0, r3
 80123da:	b2a1      	uxth	r1, r4
 80123dc:	4288      	cmp	r0, r1
 80123de:	d200      	bcs.n	80123e2 <RegionCommonCalcBackOff+0x84>
 80123e0:	1c23      	adds	r3, r4, #0
 80123e2:	8013      	strh	r3, [r2, #0]
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	7a9b      	ldrb	r3, [r3, #10]
 80123e8:	2201      	movs	r2, #1
 80123ea:	4053      	eors	r3, r2
 80123ec:	b2db      	uxtb	r3, r3
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d010      	beq.n	8012414 <RegionCommonCalcBackOff+0xb6>
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	7a1b      	ldrb	r3, [r3, #8]
 80123f6:	2201      	movs	r2, #1
 80123f8:	4053      	eors	r3, r2
 80123fa:	b2db      	uxtb	r3, r3
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d009      	beq.n	8012414 <RegionCommonCalcBackOff+0xb6>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	685a      	ldr	r2, [r3, #4]
 8012404:	230f      	movs	r3, #15
 8012406:	18fb      	adds	r3, r7, r3
 8012408:	781b      	ldrb	r3, [r3, #0]
 801240a:	011b      	lsls	r3, r3, #4
 801240c:	18d3      	adds	r3, r2, r3
 801240e:	2200      	movs	r2, #0
 8012410:	60da      	str	r2, [r3, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
 8012412:	e02c      	b.n	801246e <RegionCommonCalcBackOff+0x110>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 8012414:	230c      	movs	r3, #12
 8012416:	18fb      	adds	r3, r7, r3
 8012418:	881b      	ldrh	r3, [r3, #0]
 801241a:	1e5a      	subs	r2, r3, #1
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	6919      	ldr	r1, [r3, #16]
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	6858      	ldr	r0, [r3, #4]
 8012424:	230f      	movs	r3, #15
 8012426:	18fb      	adds	r3, r7, r3
 8012428:	781b      	ldrb	r3, [r3, #0]
 801242a:	011b      	lsls	r3, r3, #4
 801242c:	18c3      	adds	r3, r0, r3
 801242e:	434a      	muls	r2, r1
 8012430:	60da      	str	r2, [r3, #12]
}
 8012432:	e01c      	b.n	801246e <RegionCommonCalcBackOff+0x110>
        if( calcBackOffParams->DutyCycleEnabled == true )
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	7a9b      	ldrb	r3, [r3, #10]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d00f      	beq.n	801245c <RegionCommonCalcBackOff+0xfe>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 801243c:	230c      	movs	r3, #12
 801243e:	18fb      	adds	r3, r7, r3
 8012440:	881b      	ldrh	r3, [r3, #0]
 8012442:	1e5a      	subs	r2, r3, #1
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	6919      	ldr	r1, [r3, #16]
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	6858      	ldr	r0, [r3, #4]
 801244c:	230f      	movs	r3, #15
 801244e:	18fb      	adds	r3, r7, r3
 8012450:	781b      	ldrb	r3, [r3, #0]
 8012452:	011b      	lsls	r3, r3, #4
 8012454:	18c3      	adds	r3, r0, r3
 8012456:	434a      	muls	r2, r1
 8012458:	60da      	str	r2, [r3, #12]
}
 801245a:	e008      	b.n	801246e <RegionCommonCalcBackOff+0x110>
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	685a      	ldr	r2, [r3, #4]
 8012460:	230f      	movs	r3, #15
 8012462:	18fb      	adds	r3, r7, r3
 8012464:	781b      	ldrb	r3, [r3, #0]
 8012466:	011b      	lsls	r3, r3, #4
 8012468:	18d3      	adds	r3, r2, r3
 801246a:	2200      	movs	r2, #0
 801246c:	60da      	str	r2, [r3, #12]
}
 801246e:	46c0      	nop			@ (mov r8, r8)
 8012470:	46bd      	mov	sp, r7
 8012472:	b005      	add	sp, #20
 8012474:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012476 <GetNextLowerTxDr>:
 */
static RegionIN865NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8012476:	b580      	push	{r7, lr}
 8012478:	b084      	sub	sp, #16
 801247a:	af00      	add	r7, sp, #0
 801247c:	0002      	movs	r2, r0
 801247e:	1dfb      	adds	r3, r7, #7
 8012480:	701a      	strb	r2, [r3, #0]
 8012482:	1dbb      	adds	r3, r7, #6
 8012484:	1c0a      	adds	r2, r1, #0
 8012486:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8012488:	210f      	movs	r1, #15
 801248a:	187b      	adds	r3, r7, r1
 801248c:	2200      	movs	r2, #0
 801248e:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8012490:	1dfa      	adds	r2, r7, #7
 8012492:	1dbb      	adds	r3, r7, #6
 8012494:	7812      	ldrb	r2, [r2, #0]
 8012496:	b252      	sxtb	r2, r2
 8012498:	781b      	ldrb	r3, [r3, #0]
 801249a:	b25b      	sxtb	r3, r3
 801249c:	429a      	cmp	r2, r3
 801249e:	d104      	bne.n	80124aa <GetNextLowerTxDr+0x34>
    {
        nextLowerDr = minDr;
 80124a0:	187b      	adds	r3, r7, r1
 80124a2:	1dba      	adds	r2, r7, #6
 80124a4:	7812      	ldrb	r2, [r2, #0]
 80124a6:	701a      	strb	r2, [r3, #0]
 80124a8:	e00f      	b.n	80124ca <GetNextLowerTxDr+0x54>
    }
    else if( dr == DR_7 )
 80124aa:	1dfb      	adds	r3, r7, #7
 80124ac:	781b      	ldrb	r3, [r3, #0]
 80124ae:	b25b      	sxtb	r3, r3
 80124b0:	2b07      	cmp	r3, #7
 80124b2:	d104      	bne.n	80124be <GetNextLowerTxDr+0x48>
    {
        nextLowerDr = DR_5;
 80124b4:	230f      	movs	r3, #15
 80124b6:	18fb      	adds	r3, r7, r3
 80124b8:	2205      	movs	r2, #5
 80124ba:	701a      	strb	r2, [r3, #0]
 80124bc:	e005      	b.n	80124ca <GetNextLowerTxDr+0x54>
    }
    else
    {
        nextLowerDr = dr - 1;
 80124be:	1dfb      	adds	r3, r7, #7
 80124c0:	781a      	ldrb	r2, [r3, #0]
 80124c2:	230f      	movs	r3, #15
 80124c4:	18fb      	adds	r3, r7, r3
 80124c6:	3a01      	subs	r2, #1
 80124c8:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 80124ca:	230f      	movs	r3, #15
 80124cc:	18fb      	adds	r3, r7, r3
 80124ce:	781b      	ldrb	r3, [r3, #0]
 80124d0:	b25b      	sxtb	r3, r3
}
 80124d2:	0018      	movs	r0, r3
 80124d4:	46bd      	mov	sp, r7
 80124d6:	b004      	add	sp, #16
 80124d8:	bd80      	pop	{r7, pc}
	...

080124dc <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b082      	sub	sp, #8
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
    switch( BandwidthsIN865[drIndex] )
 80124e4:	4b09      	ldr	r3, [pc, #36]	@ (801250c <GetBandwidth+0x30>)
 80124e6:	687a      	ldr	r2, [r7, #4]
 80124e8:	0092      	lsls	r2, r2, #2
 80124ea:	58d3      	ldr	r3, [r2, r3]
 80124ec:	4a08      	ldr	r2, [pc, #32]	@ (8012510 <GetBandwidth+0x34>)
 80124ee:	4293      	cmp	r3, r2
 80124f0:	d004      	beq.n	80124fc <GetBandwidth+0x20>
 80124f2:	4a08      	ldr	r2, [pc, #32]	@ (8012514 <GetBandwidth+0x38>)
 80124f4:	4293      	cmp	r3, r2
 80124f6:	d003      	beq.n	8012500 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 80124f8:	2300      	movs	r3, #0
 80124fa:	e002      	b.n	8012502 <GetBandwidth+0x26>
        case 250000:
            return 1;
 80124fc:	2301      	movs	r3, #1
 80124fe:	e000      	b.n	8012502 <GetBandwidth+0x26>
        case 500000:
            return 2;
 8012500:	2302      	movs	r3, #2
    }
}
 8012502:	0018      	movs	r0, r3
 8012504:	46bd      	mov	sp, r7
 8012506:	b002      	add	sp, #8
 8012508:	bd80      	pop	{r7, pc}
 801250a:	46c0      	nop			@ (mov r8, r8)
 801250c:	0801b508 	.word	0x0801b508
 8012510:	0003d090 	.word	0x0003d090
 8012514:	0007a120 	.word	0x0007a120

08012518 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8012518:	b590      	push	{r4, r7, lr}
 801251a:	b085      	sub	sp, #20
 801251c:	af00      	add	r7, sp, #0
 801251e:	0004      	movs	r4, r0
 8012520:	0008      	movs	r0, r1
 8012522:	0011      	movs	r1, r2
 8012524:	603b      	str	r3, [r7, #0]
 8012526:	1dfb      	adds	r3, r7, #7
 8012528:	1c22      	adds	r2, r4, #0
 801252a:	701a      	strb	r2, [r3, #0]
 801252c:	1dbb      	adds	r3, r7, #6
 801252e:	1c02      	adds	r2, r0, #0
 8012530:	701a      	strb	r2, [r3, #0]
 8012532:	1d7b      	adds	r3, r7, #5
 8012534:	1c0a      	adds	r2, r1, #0
 8012536:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8012538:	210f      	movs	r1, #15
 801253a:	187b      	adds	r3, r7, r1
 801253c:	1dfa      	adds	r2, r7, #7
 801253e:	7812      	ldrb	r2, [r2, #0]
 8012540:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8012542:	187a      	adds	r2, r7, r1
 8012544:	1dbb      	adds	r3, r7, #6
 8012546:	1df9      	adds	r1, r7, #7
 8012548:	780c      	ldrb	r4, [r1, #0]
 801254a:	781b      	ldrb	r3, [r3, #0]
 801254c:	b258      	sxtb	r0, r3
 801254e:	b261      	sxtb	r1, r4
 8012550:	4288      	cmp	r0, r1
 8012552:	da00      	bge.n	8012556 <LimitTxPower+0x3e>
 8012554:	1c23      	adds	r3, r4, #0
 8012556:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8012558:	230f      	movs	r3, #15
 801255a:	18fb      	adds	r3, r7, r3
 801255c:	781b      	ldrb	r3, [r3, #0]
 801255e:	b25b      	sxtb	r3, r3
}
 8012560:	0018      	movs	r0, r3
 8012562:	46bd      	mov	sp, r7
 8012564:	b005      	add	sp, #20
 8012566:	bd90      	pop	{r4, r7, pc}

08012568 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b082      	sub	sp, #8
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8012570:	4b0e      	ldr	r3, [pc, #56]	@ (80125ac <VerifyRfFreq+0x44>)
 8012572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012574:	687a      	ldr	r2, [r7, #4]
 8012576:	0010      	movs	r0, r2
 8012578:	4798      	blx	r3
 801257a:	0003      	movs	r3, r0
 801257c:	001a      	movs	r2, r3
 801257e:	2301      	movs	r3, #1
 8012580:	4053      	eors	r3, r2
 8012582:	b2db      	uxtb	r3, r3
 8012584:	2b00      	cmp	r3, #0
 8012586:	d001      	beq.n	801258c <VerifyRfFreq+0x24>
    {
        return false;
 8012588:	2300      	movs	r3, #0
 801258a:	e00a      	b.n	80125a2 <VerifyRfFreq+0x3a>
    }

    if( ( freq < 865000000 ) || ( freq > 867000000 ) )
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	4a08      	ldr	r2, [pc, #32]	@ (80125b0 <VerifyRfFreq+0x48>)
 8012590:	4293      	cmp	r3, r2
 8012592:	d903      	bls.n	801259c <VerifyRfFreq+0x34>
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	4a07      	ldr	r2, [pc, #28]	@ (80125b4 <VerifyRfFreq+0x4c>)
 8012598:	4293      	cmp	r3, r2
 801259a:	d901      	bls.n	80125a0 <VerifyRfFreq+0x38>
    {
        return false;
 801259c:	2300      	movs	r3, #0
 801259e:	e000      	b.n	80125a2 <VerifyRfFreq+0x3a>
    }
    return true;
 80125a0:	2301      	movs	r3, #1
}
 80125a2:	0018      	movs	r0, r3
 80125a4:	46bd      	mov	sp, r7
 80125a6:	b002      	add	sp, #8
 80125a8:	bd80      	pop	{r7, pc}
 80125aa:	46c0      	nop			@ (mov r8, r8)
 80125ac:	0801adcc 	.word	0x0801adcc
 80125b0:	338eda3f 	.word	0x338eda3f
 80125b4:	33ad5ec0 	.word	0x33ad5ec0

080125b8 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 80125b8:	b5b0      	push	{r4, r5, r7, lr}
 80125ba:	b086      	sub	sp, #24
 80125bc:	af00      	add	r7, sp, #0
 80125be:	60ba      	str	r2, [r7, #8]
 80125c0:	607b      	str	r3, [r7, #4]
 80125c2:	230f      	movs	r3, #15
 80125c4:	18fb      	adds	r3, r7, r3
 80125c6:	1c02      	adds	r2, r0, #0
 80125c8:	701a      	strb	r2, [r3, #0]
 80125ca:	230e      	movs	r3, #14
 80125cc:	18fb      	adds	r3, r7, r3
 80125ce:	1c0a      	adds	r2, r1, #0
 80125d0:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 80125d2:	2317      	movs	r3, #23
 80125d4:	18fb      	adds	r3, r7, r3
 80125d6:	2200      	movs	r2, #0
 80125d8:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 80125da:	2316      	movs	r3, #22
 80125dc:	18fb      	adds	r3, r7, r3
 80125de:	2200      	movs	r2, #0
 80125e0:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < IN865_MAX_NB_CHANNELS; i += 16, k++ )
 80125e2:	2315      	movs	r3, #21
 80125e4:	18fb      	adds	r3, r7, r3
 80125e6:	2200      	movs	r2, #0
 80125e8:	701a      	strb	r2, [r3, #0]
 80125ea:	2314      	movs	r3, #20
 80125ec:	18fb      	adds	r3, r7, r3
 80125ee:	2200      	movs	r2, #0
 80125f0:	701a      	strb	r2, [r3, #0]
 80125f2:	e0b0      	b.n	8012756 <CountNbOfEnabledChannels+0x19e>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80125f4:	2313      	movs	r3, #19
 80125f6:	18fb      	adds	r3, r7, r3
 80125f8:	2200      	movs	r2, #0
 80125fa:	701a      	strb	r2, [r3, #0]
 80125fc:	e099      	b.n	8012732 <CountNbOfEnabledChannels+0x17a>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 80125fe:	2314      	movs	r3, #20
 8012600:	18fb      	adds	r3, r7, r3
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	005b      	lsls	r3, r3, #1
 8012606:	68ba      	ldr	r2, [r7, #8]
 8012608:	18d3      	adds	r3, r2, r3
 801260a:	881b      	ldrh	r3, [r3, #0]
 801260c:	001a      	movs	r2, r3
 801260e:	2113      	movs	r1, #19
 8012610:	187b      	adds	r3, r7, r1
 8012612:	781b      	ldrb	r3, [r3, #0]
 8012614:	411a      	asrs	r2, r3
 8012616:	0013      	movs	r3, r2
 8012618:	2201      	movs	r2, #1
 801261a:	4013      	ands	r3, r2
 801261c:	d100      	bne.n	8012620 <CountNbOfEnabledChannels+0x68>
 801261e:	e082      	b.n	8012726 <CountNbOfEnabledChannels+0x16e>
            {
                if( channels[i + j].Frequency == 0 )
 8012620:	2315      	movs	r3, #21
 8012622:	18fb      	adds	r3, r7, r3
 8012624:	781a      	ldrb	r2, [r3, #0]
 8012626:	187b      	adds	r3, r7, r1
 8012628:	781b      	ldrb	r3, [r3, #0]
 801262a:	18d3      	adds	r3, r2, r3
 801262c:	001a      	movs	r2, r3
 801262e:	0013      	movs	r3, r2
 8012630:	005b      	lsls	r3, r3, #1
 8012632:	189b      	adds	r3, r3, r2
 8012634:	009b      	lsls	r3, r3, #2
 8012636:	001a      	movs	r2, r3
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	189b      	adds	r3, r3, r2
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d06c      	beq.n	801271c <CountNbOfEnabledChannels+0x164>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 8012642:	230f      	movs	r3, #15
 8012644:	18fb      	adds	r3, r7, r3
 8012646:	781b      	ldrb	r3, [r3, #0]
 8012648:	2201      	movs	r2, #1
 801264a:	4053      	eors	r3, r2
 801264c:	b2db      	uxtb	r3, r3
 801264e:	2b00      	cmp	r3, #0
 8012650:	d007      	beq.n	8012662 <CountNbOfEnabledChannels+0xaa>
                {
                    if( ( IN865_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 8012652:	187b      	adds	r3, r7, r1
 8012654:	781b      	ldrb	r3, [r3, #0]
 8012656:	2207      	movs	r2, #7
 8012658:	411a      	asrs	r2, r3
 801265a:	0013      	movs	r3, r2
 801265c:	2201      	movs	r2, #1
 801265e:	4013      	ands	r3, r2
 8012660:	d05e      	beq.n	8012720 <CountNbOfEnabledChannels+0x168>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8012662:	230e      	movs	r3, #14
 8012664:	18fb      	adds	r3, r7, r3
 8012666:	2000      	movs	r0, #0
 8012668:	5618      	ldrsb	r0, [r3, r0]
 801266a:	2415      	movs	r4, #21
 801266c:	193b      	adds	r3, r7, r4
 801266e:	781a      	ldrb	r2, [r3, #0]
 8012670:	2513      	movs	r5, #19
 8012672:	197b      	adds	r3, r7, r5
 8012674:	781b      	ldrb	r3, [r3, #0]
 8012676:	18d3      	adds	r3, r2, r3
 8012678:	001a      	movs	r2, r3
 801267a:	0013      	movs	r3, r2
 801267c:	005b      	lsls	r3, r3, #1
 801267e:	189b      	adds	r3, r3, r2
 8012680:	009b      	lsls	r3, r3, #2
 8012682:	001a      	movs	r2, r3
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	189b      	adds	r3, r3, r2
 8012688:	7a1b      	ldrb	r3, [r3, #8]
 801268a:	011b      	lsls	r3, r3, #4
 801268c:	b25b      	sxtb	r3, r3
 801268e:	111b      	asrs	r3, r3, #4
 8012690:	b25b      	sxtb	r3, r3
 8012692:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8012694:	193b      	adds	r3, r7, r4
 8012696:	781a      	ldrb	r2, [r3, #0]
 8012698:	197b      	adds	r3, r7, r5
 801269a:	781b      	ldrb	r3, [r3, #0]
 801269c:	18d3      	adds	r3, r2, r3
 801269e:	001a      	movs	r2, r3
 80126a0:	0013      	movs	r3, r2
 80126a2:	005b      	lsls	r3, r3, #1
 80126a4:	189b      	adds	r3, r3, r2
 80126a6:	009b      	lsls	r3, r3, #2
 80126a8:	001a      	movs	r2, r3
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	189b      	adds	r3, r3, r2
 80126ae:	7a1b      	ldrb	r3, [r3, #8]
 80126b0:	b25b      	sxtb	r3, r3
 80126b2:	111b      	asrs	r3, r3, #4
 80126b4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 80126b6:	001a      	movs	r2, r3
 80126b8:	f7ff faa5 	bl	8011c06 <RegionCommonValueInRange>
 80126bc:	1e03      	subs	r3, r0, #0
 80126be:	d031      	beq.n	8012724 <CountNbOfEnabledChannels+0x16c>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 80126c0:	193b      	adds	r3, r7, r4
 80126c2:	781a      	ldrb	r2, [r3, #0]
 80126c4:	197b      	adds	r3, r7, r5
 80126c6:	781b      	ldrb	r3, [r3, #0]
 80126c8:	18d3      	adds	r3, r2, r3
 80126ca:	001a      	movs	r2, r3
 80126cc:	0013      	movs	r3, r2
 80126ce:	005b      	lsls	r3, r3, #1
 80126d0:	189b      	adds	r3, r3, r2
 80126d2:	009b      	lsls	r3, r3, #2
 80126d4:	001a      	movs	r2, r3
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	189b      	adds	r3, r3, r2
 80126da:	7a5b      	ldrb	r3, [r3, #9]
 80126dc:	011b      	lsls	r3, r3, #4
 80126de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80126e0:	18d3      	adds	r3, r2, r3
 80126e2:	68db      	ldr	r3, [r3, #12]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d006      	beq.n	80126f6 <CountNbOfEnabledChannels+0x13e>
                { // Check if the band is available for transmission
                    delayTransmission++;
 80126e8:	2116      	movs	r1, #22
 80126ea:	187b      	adds	r3, r7, r1
 80126ec:	781a      	ldrb	r2, [r3, #0]
 80126ee:	187b      	adds	r3, r7, r1
 80126f0:	3201      	adds	r2, #1
 80126f2:	701a      	strb	r2, [r3, #0]
                    continue;
 80126f4:	e017      	b.n	8012726 <CountNbOfEnabledChannels+0x16e>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 80126f6:	2217      	movs	r2, #23
 80126f8:	18bb      	adds	r3, r7, r2
 80126fa:	781b      	ldrb	r3, [r3, #0]
 80126fc:	18ba      	adds	r2, r7, r2
 80126fe:	1c59      	adds	r1, r3, #1
 8012700:	7011      	strb	r1, [r2, #0]
 8012702:	001a      	movs	r2, r3
 8012704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012706:	189b      	adds	r3, r3, r2
 8012708:	2215      	movs	r2, #21
 801270a:	18b9      	adds	r1, r7, r2
 801270c:	2213      	movs	r2, #19
 801270e:	18ba      	adds	r2, r7, r2
 8012710:	7809      	ldrb	r1, [r1, #0]
 8012712:	7812      	ldrb	r2, [r2, #0]
 8012714:	188a      	adds	r2, r1, r2
 8012716:	b2d2      	uxtb	r2, r2
 8012718:	701a      	strb	r2, [r3, #0]
 801271a:	e004      	b.n	8012726 <CountNbOfEnabledChannels+0x16e>
                    continue;
 801271c:	46c0      	nop			@ (mov r8, r8)
 801271e:	e002      	b.n	8012726 <CountNbOfEnabledChannels+0x16e>
                        continue;
 8012720:	46c0      	nop			@ (mov r8, r8)
 8012722:	e000      	b.n	8012726 <CountNbOfEnabledChannels+0x16e>
                    continue;
 8012724:	46c0      	nop			@ (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 8012726:	2113      	movs	r1, #19
 8012728:	187b      	adds	r3, r7, r1
 801272a:	781a      	ldrb	r2, [r3, #0]
 801272c:	187b      	adds	r3, r7, r1
 801272e:	3201      	adds	r2, #1
 8012730:	701a      	strb	r2, [r3, #0]
 8012732:	2313      	movs	r3, #19
 8012734:	18fb      	adds	r3, r7, r3
 8012736:	781b      	ldrb	r3, [r3, #0]
 8012738:	2b0f      	cmp	r3, #15
 801273a:	d800      	bhi.n	801273e <CountNbOfEnabledChannels+0x186>
 801273c:	e75f      	b.n	80125fe <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < IN865_MAX_NB_CHANNELS; i += 16, k++ )
 801273e:	2215      	movs	r2, #21
 8012740:	18bb      	adds	r3, r7, r2
 8012742:	18ba      	adds	r2, r7, r2
 8012744:	7812      	ldrb	r2, [r2, #0]
 8012746:	3210      	adds	r2, #16
 8012748:	701a      	strb	r2, [r3, #0]
 801274a:	2114      	movs	r1, #20
 801274c:	187b      	adds	r3, r7, r1
 801274e:	781a      	ldrb	r2, [r3, #0]
 8012750:	187b      	adds	r3, r7, r1
 8012752:	3201      	adds	r2, #1
 8012754:	701a      	strb	r2, [r3, #0]
 8012756:	2315      	movs	r3, #21
 8012758:	18fb      	adds	r3, r7, r3
 801275a:	781b      	ldrb	r3, [r3, #0]
 801275c:	2b0f      	cmp	r3, #15
 801275e:	d800      	bhi.n	8012762 <CountNbOfEnabledChannels+0x1aa>
 8012760:	e748      	b.n	80125f4 <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
 8012762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012764:	2216      	movs	r2, #22
 8012766:	18ba      	adds	r2, r7, r2
 8012768:	7812      	ldrb	r2, [r2, #0]
 801276a:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 801276c:	2317      	movs	r3, #23
 801276e:	18fb      	adds	r3, r7, r3
 8012770:	781b      	ldrb	r3, [r3, #0]
}
 8012772:	0018      	movs	r0, r3
 8012774:	46bd      	mov	sp, r7
 8012776:	b006      	add	sp, #24
 8012778:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801277c <RegionIN865GetPhyParam>:

PhyParam_t RegionIN865GetPhyParam( GetPhyParams_t* getPhy )
{
 801277c:	b580      	push	{r7, lr}
 801277e:	b084      	sub	sp, #16
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8012784:	2308      	movs	r3, #8
 8012786:	18fb      	adds	r3, r7, r3
 8012788:	2200      	movs	r2, #0
 801278a:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	781b      	ldrb	r3, [r3, #0]
 8012790:	2b35      	cmp	r3, #53	@ 0x35
 8012792:	d900      	bls.n	8012796 <RegionIN865GetPhyParam+0x1a>
 8012794:	e0cd      	b.n	8012932 <RegionIN865GetPhyParam+0x1b6>
 8012796:	009a      	lsls	r2, r3, #2
 8012798:	4b6d      	ldr	r3, [pc, #436]	@ (8012950 <RegionIN865GetPhyParam+0x1d4>)
 801279a:	18d3      	adds	r3, r2, r3
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = IN865_RX_MIN_DATARATE;
 80127a0:	2308      	movs	r3, #8
 80127a2:	18fb      	adds	r3, r7, r3
 80127a4:	2200      	movs	r2, #0
 80127a6:	601a      	str	r2, [r3, #0]
            break;
 80127a8:	e0c4      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = IN865_TX_MIN_DATARATE;
 80127aa:	2308      	movs	r3, #8
 80127ac:	18fb      	adds	r3, r7, r3
 80127ae:	2200      	movs	r2, #0
 80127b0:	601a      	str	r2, [r3, #0]
            break;
 80127b2:	e0bf      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = IN865_DEFAULT_DATARATE;
 80127b4:	2308      	movs	r3, #8
 80127b6:	18fb      	adds	r3, r7, r3
 80127b8:	2200      	movs	r2, #0
 80127ba:	601a      	str	r2, [r3, #0]
            break;
 80127bc:	e0ba      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, IN865_TX_MIN_DATARATE );
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	785b      	ldrb	r3, [r3, #1]
 80127c2:	b25b      	sxtb	r3, r3
 80127c4:	2100      	movs	r1, #0
 80127c6:	0018      	movs	r0, r3
 80127c8:	f7ff fe55 	bl	8012476 <GetNextLowerTxDr>
 80127cc:	0003      	movs	r3, r0
 80127ce:	001a      	movs	r2, r3
 80127d0:	2308      	movs	r3, #8
 80127d2:	18fb      	adds	r3, r7, r3
 80127d4:	601a      	str	r2, [r3, #0]
            break;
 80127d6:	e0ad      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = IN865_MAX_TX_POWER;
 80127d8:	2308      	movs	r3, #8
 80127da:	18fb      	adds	r3, r7, r3
 80127dc:	2200      	movs	r2, #0
 80127de:	601a      	str	r2, [r3, #0]
            break;
 80127e0:	e0a8      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = IN865_DEFAULT_TX_POWER;
 80127e2:	2308      	movs	r3, #8
 80127e4:	18fb      	adds	r3, r7, r3
 80127e6:	2200      	movs	r2, #0
 80127e8:	601a      	str	r2, [r3, #0]
            break;
 80127ea:	e0a3      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = IN865_ADR_ACK_LIMIT;
 80127ec:	2308      	movs	r3, #8
 80127ee:	18fb      	adds	r3, r7, r3
 80127f0:	2240      	movs	r2, #64	@ 0x40
 80127f2:	601a      	str	r2, [r3, #0]
            break;
 80127f4:	e09e      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = IN865_ADR_ACK_DELAY;
 80127f6:	2308      	movs	r3, #8
 80127f8:	18fb      	adds	r3, r7, r3
 80127fa:	2220      	movs	r2, #32
 80127fc:	601a      	str	r2, [r3, #0]
            break;
 80127fe:	e099      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateIN865[getPhy->Datarate];
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	785b      	ldrb	r3, [r3, #1]
 8012804:	b25b      	sxtb	r3, r3
 8012806:	001a      	movs	r2, r3
 8012808:	4b52      	ldr	r3, [pc, #328]	@ (8012954 <RegionIN865GetPhyParam+0x1d8>)
 801280a:	5c9b      	ldrb	r3, [r3, r2]
 801280c:	001a      	movs	r2, r3
 801280e:	2308      	movs	r3, #8
 8012810:	18fb      	adds	r3, r7, r3
 8012812:	601a      	str	r2, [r3, #0]
            break;
 8012814:	e08e      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterIN865[getPhy->Datarate];
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	785b      	ldrb	r3, [r3, #1]
 801281a:	b25b      	sxtb	r3, r3
 801281c:	001a      	movs	r2, r3
 801281e:	4b4e      	ldr	r3, [pc, #312]	@ (8012958 <RegionIN865GetPhyParam+0x1dc>)
 8012820:	5c9b      	ldrb	r3, [r3, r2]
 8012822:	001a      	movs	r2, r3
 8012824:	2308      	movs	r3, #8
 8012826:	18fb      	adds	r3, r7, r3
 8012828:	601a      	str	r2, [r3, #0]
            break;
 801282a:	e083      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = IN865_DUTY_CYCLE_ENABLED;
 801282c:	2308      	movs	r3, #8
 801282e:	18fb      	adds	r3, r7, r3
 8012830:	2201      	movs	r2, #1
 8012832:	601a      	str	r2, [r3, #0]
            break;
 8012834:	e07e      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = IN865_MAX_RX_WINDOW;
 8012836:	2308      	movs	r3, #8
 8012838:	18fb      	adds	r3, r7, r3
 801283a:	4a48      	ldr	r2, [pc, #288]	@ (801295c <RegionIN865GetPhyParam+0x1e0>)
 801283c:	601a      	str	r2, [r3, #0]
            break;
 801283e:	e079      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = IN865_RECEIVE_DELAY1;
 8012840:	2308      	movs	r3, #8
 8012842:	18fb      	adds	r3, r7, r3
 8012844:	22fa      	movs	r2, #250	@ 0xfa
 8012846:	0092      	lsls	r2, r2, #2
 8012848:	601a      	str	r2, [r3, #0]
            break;
 801284a:	e073      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = IN865_RECEIVE_DELAY2;
 801284c:	2308      	movs	r3, #8
 801284e:	18fb      	adds	r3, r7, r3
 8012850:	22fa      	movs	r2, #250	@ 0xfa
 8012852:	00d2      	lsls	r2, r2, #3
 8012854:	601a      	str	r2, [r3, #0]
            break;
 8012856:	e06d      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = IN865_JOIN_ACCEPT_DELAY1;
 8012858:	2308      	movs	r3, #8
 801285a:	18fb      	adds	r3, r7, r3
 801285c:	4a40      	ldr	r2, [pc, #256]	@ (8012960 <RegionIN865GetPhyParam+0x1e4>)
 801285e:	601a      	str	r2, [r3, #0]
            break;
 8012860:	e068      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = IN865_JOIN_ACCEPT_DELAY2;
 8012862:	2308      	movs	r3, #8
 8012864:	18fb      	adds	r3, r7, r3
 8012866:	4a3f      	ldr	r2, [pc, #252]	@ (8012964 <RegionIN865GetPhyParam+0x1e8>)
 8012868:	601a      	str	r2, [r3, #0]
            break;
 801286a:	e063      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = IN865_MAX_FCNT_GAP;
 801286c:	2308      	movs	r3, #8
 801286e:	18fb      	adds	r3, r7, r3
 8012870:	2280      	movs	r2, #128	@ 0x80
 8012872:	01d2      	lsls	r2, r2, #7
 8012874:	601a      	str	r2, [r3, #0]
            break;
 8012876:	e05d      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( IN865_ACKTIMEOUT + randr( -IN865_ACK_TIMEOUT_RND, IN865_ACK_TIMEOUT_RND ) );
 8012878:	23fa      	movs	r3, #250	@ 0xfa
 801287a:	009b      	lsls	r3, r3, #2
 801287c:	4a3a      	ldr	r2, [pc, #232]	@ (8012968 <RegionIN865GetPhyParam+0x1ec>)
 801287e:	0019      	movs	r1, r3
 8012880:	0010      	movs	r0, r2
 8012882:	f002 fef3 	bl	801566c <randr>
 8012886:	0003      	movs	r3, r0
 8012888:	22fa      	movs	r2, #250	@ 0xfa
 801288a:	00d2      	lsls	r2, r2, #3
 801288c:	4694      	mov	ip, r2
 801288e:	4463      	add	r3, ip
 8012890:	001a      	movs	r2, r3
 8012892:	2308      	movs	r3, #8
 8012894:	18fb      	adds	r3, r7, r3
 8012896:	601a      	str	r2, [r3, #0]
            break;
 8012898:	e04c      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = IN865_DEFAULT_RX1_DR_OFFSET;
 801289a:	2308      	movs	r3, #8
 801289c:	18fb      	adds	r3, r7, r3
 801289e:	2200      	movs	r2, #0
 80128a0:	601a      	str	r2, [r3, #0]
            break;
 80128a2:	e047      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = IN865_RX_WND_2_FREQ;
 80128a4:	2308      	movs	r3, #8
 80128a6:	18fb      	adds	r3, r7, r3
 80128a8:	4a30      	ldr	r2, [pc, #192]	@ (801296c <RegionIN865GetPhyParam+0x1f0>)
 80128aa:	601a      	str	r2, [r3, #0]
            break;
 80128ac:	e042      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = IN865_RX_WND_2_DR;
 80128ae:	2308      	movs	r3, #8
 80128b0:	18fb      	adds	r3, r7, r3
 80128b2:	2202      	movs	r2, #2
 80128b4:	601a      	str	r2, [r3, #0]
            break;
 80128b6:	e03d      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 80128b8:	2308      	movs	r3, #8
 80128ba:	18fb      	adds	r3, r7, r3
 80128bc:	4a2c      	ldr	r2, [pc, #176]	@ (8012970 <RegionIN865GetPhyParam+0x1f4>)
 80128be:	601a      	str	r2, [r3, #0]
            break;
 80128c0:	e038      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 80128c2:	2308      	movs	r3, #8
 80128c4:	18fb      	adds	r3, r7, r3
 80128c6:	4a2b      	ldr	r2, [pc, #172]	@ (8012974 <RegionIN865GetPhyParam+0x1f8>)
 80128c8:	601a      	str	r2, [r3, #0]
            break;
 80128ca:	e033      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = IN865_MAX_NB_CHANNELS;
 80128cc:	2308      	movs	r3, #8
 80128ce:	18fb      	adds	r3, r7, r3
 80128d0:	2210      	movs	r2, #16
 80128d2:	601a      	str	r2, [r3, #0]
            break;
 80128d4:	e02e      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 80128d6:	2308      	movs	r3, #8
 80128d8:	18fb      	adds	r3, r7, r3
 80128da:	4a27      	ldr	r2, [pc, #156]	@ (8012978 <RegionIN865GetPhyParam+0x1fc>)
 80128dc:	601a      	str	r2, [r3, #0]
            break;
 80128de:	e029      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 80128e0:	2308      	movs	r3, #8
 80128e2:	18fb      	adds	r3, r7, r3
 80128e4:	2200      	movs	r2, #0
 80128e6:	601a      	str	r2, [r3, #0]
            break;
 80128e8:	e024      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = IN865_DEFAULT_MAX_EIRP;
 80128ea:	2308      	movs	r3, #8
 80128ec:	18fb      	adds	r3, r7, r3
 80128ee:	4a23      	ldr	r2, [pc, #140]	@ (801297c <RegionIN865GetPhyParam+0x200>)
 80128f0:	601a      	str	r2, [r3, #0]
            break;
 80128f2:	e01f      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = IN865_DEFAULT_ANTENNA_GAIN;
 80128f4:	2308      	movs	r3, #8
 80128f6:	18fb      	adds	r3, r7, r3
 80128f8:	4a21      	ldr	r2, [pc, #132]	@ (8012980 <RegionIN865GetPhyParam+0x204>)
 80128fa:	601a      	str	r2, [r3, #0]
            break;
 80128fc:	e01a      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = IN865_BEACON_CHANNEL_FREQ;
 80128fe:	2308      	movs	r3, #8
 8012900:	18fb      	adds	r3, r7, r3
 8012902:	4a1a      	ldr	r2, [pc, #104]	@ (801296c <RegionIN865GetPhyParam+0x1f0>)
 8012904:	601a      	str	r2, [r3, #0]
            break;
 8012906:	e015      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = IN865_BEACON_SIZE;
 8012908:	2108      	movs	r1, #8
 801290a:	187b      	adds	r3, r7, r1
 801290c:	2213      	movs	r2, #19
 801290e:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = IN865_RFU1_SIZE;
 8012910:	187b      	adds	r3, r7, r1
 8012912:	2201      	movs	r2, #1
 8012914:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = IN865_RFU2_SIZE;
 8012916:	187b      	adds	r3, r7, r1
 8012918:	2203      	movs	r2, #3
 801291a:	709a      	strb	r2, [r3, #2]
            break;
 801291c:	e00a      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = IN865_BEACON_CHANNEL_DR;
 801291e:	2308      	movs	r3, #8
 8012920:	18fb      	adds	r3, r7, r3
 8012922:	2204      	movs	r2, #4
 8012924:	601a      	str	r2, [r3, #0]
            break;
 8012926:	e005      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = IN865_PING_SLOT_CHANNEL_DR;
 8012928:	2308      	movs	r3, #8
 801292a:	18fb      	adds	r3, r7, r3
 801292c:	2204      	movs	r2, #4
 801292e:	601a      	str	r2, [r3, #0]
            break;
 8012930:	e000      	b.n	8012934 <RegionIN865GetPhyParam+0x1b8>
        }
        default:
        {
            break;
 8012932:	46c0      	nop			@ (mov r8, r8)
        }
    }

    return phyParam;
 8012934:	210c      	movs	r1, #12
 8012936:	187b      	adds	r3, r7, r1
 8012938:	2208      	movs	r2, #8
 801293a:	18ba      	adds	r2, r7, r2
 801293c:	6812      	ldr	r2, [r2, #0]
 801293e:	601a      	str	r2, [r3, #0]
 8012940:	187b      	adds	r3, r7, r1
 8012942:	681a      	ldr	r2, [r3, #0]
 8012944:	0013      	movs	r3, r2
}
 8012946:	0018      	movs	r0, r3
 8012948:	46bd      	mov	sp, r7
 801294a:	b004      	add	sp, #16
 801294c:	bd80      	pop	{r7, pc}
 801294e:	46c0      	nop			@ (mov r8, r8)
 8012950:	0801b540 	.word	0x0801b540
 8012954:	0801b528 	.word	0x0801b528
 8012958:	0801b530 	.word	0x0801b530
 801295c:	00000bb8 	.word	0x00000bb8
 8012960:	00001388 	.word	0x00001388
 8012964:	00001770 	.word	0x00001770
 8012968:	fffffc18 	.word	0xfffffc18
 801296c:	33a680f0 	.word	0x33a680f0
 8012970:	20001254 	.word	0x20001254
 8012974:	20001256 	.word	0x20001256
 8012978:	20001184 	.word	0x20001184
 801297c:	41f00000 	.word	0x41f00000
 8012980:	4009999a 	.word	0x4009999a

08012984 <RegionIN865SetBandTxDone>:

void RegionIN865SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b082      	sub	sp, #8
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	7858      	ldrb	r0, [r3, #1]
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	781b      	ldrb	r3, [r3, #0]
 8012994:	0019      	movs	r1, r3
 8012996:	4a0a      	ldr	r2, [pc, #40]	@ (80129c0 <RegionIN865SetBandTxDone+0x3c>)
 8012998:	000b      	movs	r3, r1
 801299a:	005b      	lsls	r3, r3, #1
 801299c:	185b      	adds	r3, r3, r1
 801299e:	009b      	lsls	r3, r3, #2
 80129a0:	18d3      	adds	r3, r2, r3
 80129a2:	3309      	adds	r3, #9
 80129a4:	781b      	ldrb	r3, [r3, #0]
 80129a6:	330c      	adds	r3, #12
 80129a8:	011a      	lsls	r2, r3, #4
 80129aa:	4b05      	ldr	r3, [pc, #20]	@ (80129c0 <RegionIN865SetBandTxDone+0x3c>)
 80129ac:	18d1      	adds	r1, r2, r3
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	685b      	ldr	r3, [r3, #4]
 80129b2:	001a      	movs	r2, r3
 80129b4:	f7ff f9ff 	bl	8011db6 <RegionCommonSetBandTxDone>
}
 80129b8:	46c0      	nop			@ (mov r8, r8)
 80129ba:	46bd      	mov	sp, r7
 80129bc:	b002      	add	sp, #8
 80129be:	bd80      	pop	{r7, pc}
 80129c0:	20001184 	.word	0x20001184

080129c4 <RegionIN865InitDefaults>:

void RegionIN865InitDefaults( InitDefaultsParams_t* params )
{
 80129c4:	b590      	push	{r4, r7, lr}
 80129c6:	b099      	sub	sp, #100	@ 0x64
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
    Band_t bands[IN865_MAX_NB_BANDS] =
 80129cc:	2150      	movs	r1, #80	@ 0x50
 80129ce:	187b      	adds	r3, r7, r1
 80129d0:	2201      	movs	r2, #1
 80129d2:	801a      	strh	r2, [r3, #0]
 80129d4:	187b      	adds	r3, r7, r1
 80129d6:	2200      	movs	r2, #0
 80129d8:	709a      	strb	r2, [r3, #2]
 80129da:	187b      	adds	r3, r7, r1
 80129dc:	2200      	movs	r2, #0
 80129de:	605a      	str	r2, [r3, #4]
 80129e0:	187b      	adds	r3, r7, r1
 80129e2:	2200      	movs	r2, #0
 80129e4:	609a      	str	r2, [r3, #8]
 80129e6:	187b      	adds	r3, r7, r1
 80129e8:	2200      	movs	r2, #0
 80129ea:	60da      	str	r2, [r3, #12]
    {
        IN865_BAND0
    };

    switch( params->Type )
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	791b      	ldrb	r3, [r3, #4]
 80129f0:	2b02      	cmp	r3, #2
 80129f2:	d025      	beq.n	8012a40 <RegionIN865InitDefaults+0x7c>
 80129f4:	dc4a      	bgt.n	8012a8c <RegionIN865InitDefaults+0xc8>
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d002      	beq.n	8012a00 <RegionIN865InitDefaults+0x3c>
 80129fa:	2b01      	cmp	r3, #1
 80129fc:	d02c      	beq.n	8012a58 <RegionIN865InitDefaults+0x94>
            NvmCtx.Channels[2] = ( ChannelParams_t ) IN865_LC3;
            break;
        }
        default:
        {
            break;
 80129fe:	e045      	b.n	8012a8c <RegionIN865InitDefaults+0xc8>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * IN865_MAX_NB_BANDS );
 8012a00:	2350      	movs	r3, #80	@ 0x50
 8012a02:	18f9      	adds	r1, r7, r3
 8012a04:	4b25      	ldr	r3, [pc, #148]	@ (8012a9c <RegionIN865InitDefaults+0xd8>)
 8012a06:	2210      	movs	r2, #16
 8012a08:	0018      	movs	r0, r3
 8012a0a:	f002 fe45 	bl	8015698 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) IN865_LC1;
 8012a0e:	4b24      	ldr	r3, [pc, #144]	@ (8012aa0 <RegionIN865InitDefaults+0xdc>)
 8012a10:	4a24      	ldr	r2, [pc, #144]	@ (8012aa4 <RegionIN865InitDefaults+0xe0>)
 8012a12:	ca13      	ldmia	r2!, {r0, r1, r4}
 8012a14:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) IN865_LC2;
 8012a16:	4b22      	ldr	r3, [pc, #136]	@ (8012aa0 <RegionIN865InitDefaults+0xdc>)
 8012a18:	4a23      	ldr	r2, [pc, #140]	@ (8012aa8 <RegionIN865InitDefaults+0xe4>)
 8012a1a:	330c      	adds	r3, #12
 8012a1c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8012a1e:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) IN865_LC3;
 8012a20:	4b1f      	ldr	r3, [pc, #124]	@ (8012aa0 <RegionIN865InitDefaults+0xdc>)
 8012a22:	4a22      	ldr	r2, [pc, #136]	@ (8012aac <RegionIN865InitDefaults+0xe8>)
 8012a24:	3318      	adds	r3, #24
 8012a26:	ca13      	ldmia	r2!, {r0, r1, r4}
 8012a28:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8012a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8012aa0 <RegionIN865InitDefaults+0xdc>)
 8012a2c:	22d2      	movs	r2, #210	@ 0xd2
 8012a2e:	2107      	movs	r1, #7
 8012a30:	5299      	strh	r1, [r3, r2]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 8012a32:	491f      	ldr	r1, [pc, #124]	@ (8012ab0 <RegionIN865InitDefaults+0xec>)
 8012a34:	4b1f      	ldr	r3, [pc, #124]	@ (8012ab4 <RegionIN865InitDefaults+0xf0>)
 8012a36:	2201      	movs	r2, #1
 8012a38:	0018      	movs	r0, r3
 8012a3a:	f7ff f98d 	bl	8011d58 <RegionCommonChanMaskCopy>
            break;
 8012a3e:	e028      	b.n	8012a92 <RegionIN865InitDefaults+0xce>
            if( params->NvmCtx != 0 )
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d023      	beq.n	8012a90 <RegionIN865InitDefaults+0xcc>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	6819      	ldr	r1, [r3, #0]
 8012a4c:	4b14      	ldr	r3, [pc, #80]	@ (8012aa0 <RegionIN865InitDefaults+0xdc>)
 8012a4e:	22d4      	movs	r2, #212	@ 0xd4
 8012a50:	0018      	movs	r0, r3
 8012a52:	f002 fe21 	bl	8015698 <memcpy1>
            break;
 8012a56:	e01b      	b.n	8012a90 <RegionIN865InitDefaults+0xcc>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 8012a58:	4b11      	ldr	r3, [pc, #68]	@ (8012aa0 <RegionIN865InitDefaults+0xdc>)
 8012a5a:	22d0      	movs	r2, #208	@ 0xd0
 8012a5c:	5a9a      	ldrh	r2, [r3, r2]
 8012a5e:	4b10      	ldr	r3, [pc, #64]	@ (8012aa0 <RegionIN865InitDefaults+0xdc>)
 8012a60:	21d2      	movs	r1, #210	@ 0xd2
 8012a62:	5a5b      	ldrh	r3, [r3, r1]
 8012a64:	4313      	orrs	r3, r2
 8012a66:	b299      	uxth	r1, r3
 8012a68:	4b0d      	ldr	r3, [pc, #52]	@ (8012aa0 <RegionIN865InitDefaults+0xdc>)
 8012a6a:	22d0      	movs	r2, #208	@ 0xd0
 8012a6c:	5299      	strh	r1, [r3, r2]
            NvmCtx.Channels[0] = ( ChannelParams_t ) IN865_LC1;
 8012a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8012aa0 <RegionIN865InitDefaults+0xdc>)
 8012a70:	4a0c      	ldr	r2, [pc, #48]	@ (8012aa4 <RegionIN865InitDefaults+0xe0>)
 8012a72:	ca13      	ldmia	r2!, {r0, r1, r4}
 8012a74:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) IN865_LC2;
 8012a76:	4b0a      	ldr	r3, [pc, #40]	@ (8012aa0 <RegionIN865InitDefaults+0xdc>)
 8012a78:	4a0b      	ldr	r2, [pc, #44]	@ (8012aa8 <RegionIN865InitDefaults+0xe4>)
 8012a7a:	330c      	adds	r3, #12
 8012a7c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8012a7e:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) IN865_LC3;
 8012a80:	4b07      	ldr	r3, [pc, #28]	@ (8012aa0 <RegionIN865InitDefaults+0xdc>)
 8012a82:	4a0a      	ldr	r2, [pc, #40]	@ (8012aac <RegionIN865InitDefaults+0xe8>)
 8012a84:	3318      	adds	r3, #24
 8012a86:	ca13      	ldmia	r2!, {r0, r1, r4}
 8012a88:	c313      	stmia	r3!, {r0, r1, r4}
            break;
 8012a8a:	e002      	b.n	8012a92 <RegionIN865InitDefaults+0xce>
            break;
 8012a8c:	46c0      	nop			@ (mov r8, r8)
 8012a8e:	e000      	b.n	8012a92 <RegionIN865InitDefaults+0xce>
            break;
 8012a90:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 8012a92:	46c0      	nop			@ (mov r8, r8)
 8012a94:	46bd      	mov	sp, r7
 8012a96:	b019      	add	sp, #100	@ 0x64
 8012a98:	bd90      	pop	{r4, r7, pc}
 8012a9a:	46c0      	nop			@ (mov r8, r8)
 8012a9c:	20001244 	.word	0x20001244
 8012aa0:	20001184 	.word	0x20001184
 8012aa4:	0801a76c 	.word	0x0801a76c
 8012aa8:	0801a778 	.word	0x0801a778
 8012aac:	0801a784 	.word	0x0801a784
 8012ab0:	20001256 	.word	0x20001256
 8012ab4:	20001254 	.word	0x20001254

08012ab8 <RegionIN865GetNvmCtx>:

void* RegionIN865GetNvmCtx( GetNvmCtxParams_t* params )
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b082      	sub	sp, #8
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
    params->nvmCtxSize = sizeof( RegionIN865NvmCtx_t );
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	22d4      	movs	r2, #212	@ 0xd4
 8012ac4:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 8012ac6:	4b02      	ldr	r3, [pc, #8]	@ (8012ad0 <RegionIN865GetNvmCtx+0x18>)
}
 8012ac8:	0018      	movs	r0, r3
 8012aca:	46bd      	mov	sp, r7
 8012acc:	b002      	add	sp, #8
 8012ace:	bd80      	pop	{r7, pc}
 8012ad0:	20001184 	.word	0x20001184

08012ad4 <RegionIN865Verify>:

bool RegionIN865Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b082      	sub	sp, #8
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
 8012adc:	000a      	movs	r2, r1
 8012ade:	1cfb      	adds	r3, r7, #3
 8012ae0:	701a      	strb	r2, [r3, #0]
    switch( phyAttribute )
 8012ae2:	1cfb      	adds	r3, r7, #3
 8012ae4:	781b      	ldrb	r3, [r3, #0]
 8012ae6:	2b0f      	cmp	r3, #15
 8012ae8:	d84f      	bhi.n	8012b8a <RegionIN865Verify+0xb6>
 8012aea:	009a      	lsls	r2, r3, #2
 8012aec:	4b29      	ldr	r3, [pc, #164]	@ (8012b94 <RegionIN865Verify+0xc0>)
 8012aee:	18d3      	adds	r3, r2, r3
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	469f      	mov	pc, r3
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	0018      	movs	r0, r3
 8012afa:	f7ff fd35 	bl	8012568 <VerifyRfFreq>
 8012afe:	0003      	movs	r3, r0
 8012b00:	e044      	b.n	8012b8c <RegionIN865Verify+0xb8>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.Datarate == DR_6 )
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	781b      	ldrb	r3, [r3, #0]
 8012b06:	b25b      	sxtb	r3, r3
 8012b08:	2b06      	cmp	r3, #6
 8012b0a:	d101      	bne.n	8012b10 <RegionIN865Verify+0x3c>
            {// DR_6 is not supported by this region
                return false;
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	e03d      	b.n	8012b8c <RegionIN865Verify+0xb8>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE );
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	781b      	ldrb	r3, [r3, #0]
 8012b14:	b25b      	sxtb	r3, r3
 8012b16:	2207      	movs	r2, #7
 8012b18:	2100      	movs	r1, #0
 8012b1a:	0018      	movs	r0, r3
 8012b1c:	f7ff f873 	bl	8011c06 <RegionCommonValueInRange>
 8012b20:	0003      	movs	r3, r0
 8012b22:	1e5a      	subs	r2, r3, #1
 8012b24:	4193      	sbcs	r3, r2
 8012b26:	b2db      	uxtb	r3, r3
 8012b28:	e030      	b.n	8012b8c <RegionIN865Verify+0xb8>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	781b      	ldrb	r3, [r3, #0]
 8012b2e:	b25b      	sxtb	r3, r3
 8012b30:	2205      	movs	r2, #5
 8012b32:	2100      	movs	r1, #0
 8012b34:	0018      	movs	r0, r3
 8012b36:	f7ff f866 	bl	8011c06 <RegionCommonValueInRange>
 8012b3a:	0003      	movs	r3, r0
 8012b3c:	1e5a      	subs	r2, r3, #1
 8012b3e:	4193      	sbcs	r3, r2
 8012b40:	b2db      	uxtb	r3, r3
 8012b42:	e023      	b.n	8012b8c <RegionIN865Verify+0xb8>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.Datarate == DR_6 )
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	781b      	ldrb	r3, [r3, #0]
 8012b48:	b25b      	sxtb	r3, r3
 8012b4a:	2b06      	cmp	r3, #6
 8012b4c:	d101      	bne.n	8012b52 <RegionIN865Verify+0x7e>
            {// DR_6 is not supported by this region
                return false;
 8012b4e:	2300      	movs	r3, #0
 8012b50:	e01c      	b.n	8012b8c <RegionIN865Verify+0xb8>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE );
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	781b      	ldrb	r3, [r3, #0]
 8012b56:	b25b      	sxtb	r3, r3
 8012b58:	2207      	movs	r2, #7
 8012b5a:	2100      	movs	r1, #0
 8012b5c:	0018      	movs	r0, r3
 8012b5e:	f7ff f852 	bl	8011c06 <RegionCommonValueInRange>
 8012b62:	0003      	movs	r3, r0
 8012b64:	1e5a      	subs	r2, r3, #1
 8012b66:	4193      	sbcs	r3, r2
 8012b68:	b2db      	uxtb	r3, r3
 8012b6a:	e00f      	b.n	8012b8c <RegionIN865Verify+0xb8>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, IN865_MAX_TX_POWER, IN865_MIN_TX_POWER );
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	781b      	ldrb	r3, [r3, #0]
 8012b70:	b25b      	sxtb	r3, r3
 8012b72:	220a      	movs	r2, #10
 8012b74:	2100      	movs	r1, #0
 8012b76:	0018      	movs	r0, r3
 8012b78:	f7ff f845 	bl	8011c06 <RegionCommonValueInRange>
 8012b7c:	0003      	movs	r3, r0
 8012b7e:	1e5a      	subs	r2, r3, #1
 8012b80:	4193      	sbcs	r3, r2
 8012b82:	b2db      	uxtb	r3, r3
 8012b84:	e002      	b.n	8012b8c <RegionIN865Verify+0xb8>
        }
        case PHY_DUTY_CYCLE:
        {
            return IN865_DUTY_CYCLE_ENABLED;
 8012b86:	2301      	movs	r3, #1
 8012b88:	e000      	b.n	8012b8c <RegionIN865Verify+0xb8>
        }
        default:
            return false;
 8012b8a:	2300      	movs	r3, #0
    }
}
 8012b8c:	0018      	movs	r0, r3
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	b002      	add	sp, #8
 8012b92:	bd80      	pop	{r7, pc}
 8012b94:	0801b618 	.word	0x0801b618

08012b98 <RegionIN865ApplyCFList>:

void RegionIN865ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8012b98:	b590      	push	{r4, r7, lr}
 8012b9a:	b08b      	sub	sp, #44	@ 0x2c
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8012ba0:	2318      	movs	r3, #24
 8012ba2:	18fb      	adds	r3, r7, r3
 8012ba4:	2250      	movs	r2, #80	@ 0x50
 8012ba6:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	791b      	ldrb	r3, [r3, #4]
 8012bac:	2b10      	cmp	r3, #16
 8012bae:	d000      	beq.n	8012bb2 <RegionIN865ApplyCFList+0x1a>
 8012bb0:	e07c      	b.n	8012cac <RegionIN865ApplyCFList+0x114>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	330f      	adds	r3, #15
 8012bb8:	781b      	ldrb	r3, [r3, #0]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d000      	beq.n	8012bc0 <RegionIN865ApplyCFList+0x28>
 8012bbe:	e077      	b.n	8012cb0 <RegionIN865ApplyCFList+0x118>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8012bc0:	2327      	movs	r3, #39	@ 0x27
 8012bc2:	18fb      	adds	r3, r7, r3
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	701a      	strb	r2, [r3, #0]
 8012bc8:	2326      	movs	r3, #38	@ 0x26
 8012bca:	18fb      	adds	r3, r7, r3
 8012bcc:	2203      	movs	r2, #3
 8012bce:	701a      	strb	r2, [r3, #0]
 8012bd0:	e066      	b.n	8012ca0 <RegionIN865ApplyCFList+0x108>
    {
        if( chanIdx < ( IN865_NUMB_CHANNELS_CF_LIST + IN865_NUMB_DEFAULT_CHANNELS ) )
 8012bd2:	2326      	movs	r3, #38	@ 0x26
 8012bd4:	18fb      	adds	r3, r7, r3
 8012bd6:	781b      	ldrb	r3, [r3, #0]
 8012bd8:	2b07      	cmp	r3, #7
 8012bda:	d82e      	bhi.n	8012c3a <RegionIN865ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	681a      	ldr	r2, [r3, #0]
 8012be0:	2427      	movs	r4, #39	@ 0x27
 8012be2:	193b      	adds	r3, r7, r4
 8012be4:	781b      	ldrb	r3, [r3, #0]
 8012be6:	18d3      	adds	r3, r2, r3
 8012be8:	781b      	ldrb	r3, [r3, #0]
 8012bea:	001a      	movs	r2, r3
 8012bec:	2018      	movs	r0, #24
 8012bee:	183b      	adds	r3, r7, r0
 8012bf0:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8012bf2:	183b      	adds	r3, r7, r0
 8012bf4:	681a      	ldr	r2, [r3, #0]
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	6819      	ldr	r1, [r3, #0]
 8012bfa:	193b      	adds	r3, r7, r4
 8012bfc:	781b      	ldrb	r3, [r3, #0]
 8012bfe:	3301      	adds	r3, #1
 8012c00:	18cb      	adds	r3, r1, r3
 8012c02:	781b      	ldrb	r3, [r3, #0]
 8012c04:	021b      	lsls	r3, r3, #8
 8012c06:	431a      	orrs	r2, r3
 8012c08:	183b      	adds	r3, r7, r0
 8012c0a:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8012c0c:	183b      	adds	r3, r7, r0
 8012c0e:	681a      	ldr	r2, [r3, #0]
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	6819      	ldr	r1, [r3, #0]
 8012c14:	193b      	adds	r3, r7, r4
 8012c16:	781b      	ldrb	r3, [r3, #0]
 8012c18:	3302      	adds	r3, #2
 8012c1a:	18cb      	adds	r3, r1, r3
 8012c1c:	781b      	ldrb	r3, [r3, #0]
 8012c1e:	041b      	lsls	r3, r3, #16
 8012c20:	431a      	orrs	r2, r3
 8012c22:	183b      	adds	r3, r7, r0
 8012c24:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 8012c26:	183b      	adds	r3, r7, r0
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	2264      	movs	r2, #100	@ 0x64
 8012c2c:	435a      	muls	r2, r3
 8012c2e:	183b      	adds	r3, r7, r0
 8012c30:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8012c32:	183b      	adds	r3, r7, r0
 8012c34:	2200      	movs	r2, #0
 8012c36:	605a      	str	r2, [r3, #4]
 8012c38:	e009      	b.n	8012c4e <RegionIN865ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 8012c3a:	2118      	movs	r1, #24
 8012c3c:	187b      	adds	r3, r7, r1
 8012c3e:	2200      	movs	r2, #0
 8012c40:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 8012c42:	187b      	adds	r3, r7, r1
 8012c44:	2200      	movs	r2, #0
 8012c46:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 8012c48:	187b      	adds	r3, r7, r1
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 8012c4e:	2218      	movs	r2, #24
 8012c50:	18bb      	adds	r3, r7, r2
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d00d      	beq.n	8012c74 <RegionIN865ApplyCFList+0xdc>
        {
            channelAdd.NewChannel = &newChannel;
 8012c58:	2110      	movs	r1, #16
 8012c5a:	187b      	adds	r3, r7, r1
 8012c5c:	18ba      	adds	r2, r7, r2
 8012c5e:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 8012c60:	187b      	adds	r3, r7, r1
 8012c62:	2226      	movs	r2, #38	@ 0x26
 8012c64:	18ba      	adds	r2, r7, r2
 8012c66:	7812      	ldrb	r2, [r2, #0]
 8012c68:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionIN865ChannelAdd( &channelAdd );
 8012c6a:	187b      	adds	r3, r7, r1
 8012c6c:	0018      	movs	r0, r3
 8012c6e:	f000 fdb5 	bl	80137dc <RegionIN865ChannelAdd>
 8012c72:	e009      	b.n	8012c88 <RegionIN865ApplyCFList+0xf0>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8012c74:	210c      	movs	r1, #12
 8012c76:	187b      	adds	r3, r7, r1
 8012c78:	2226      	movs	r2, #38	@ 0x26
 8012c7a:	18ba      	adds	r2, r7, r2
 8012c7c:	7812      	ldrb	r2, [r2, #0]
 8012c7e:	701a      	strb	r2, [r3, #0]

            RegionIN865ChannelsRemove( &channelRemove );
 8012c80:	187b      	adds	r3, r7, r1
 8012c82:	0018      	movs	r0, r3
 8012c84:	f000 fe62 	bl	801394c <RegionIN865ChannelsRemove>
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8012c88:	2227      	movs	r2, #39	@ 0x27
 8012c8a:	18bb      	adds	r3, r7, r2
 8012c8c:	18ba      	adds	r2, r7, r2
 8012c8e:	7812      	ldrb	r2, [r2, #0]
 8012c90:	3203      	adds	r2, #3
 8012c92:	701a      	strb	r2, [r3, #0]
 8012c94:	2126      	movs	r1, #38	@ 0x26
 8012c96:	187b      	adds	r3, r7, r1
 8012c98:	781a      	ldrb	r2, [r3, #0]
 8012c9a:	187b      	adds	r3, r7, r1
 8012c9c:	3201      	adds	r2, #1
 8012c9e:	701a      	strb	r2, [r3, #0]
 8012ca0:	2326      	movs	r3, #38	@ 0x26
 8012ca2:	18fb      	adds	r3, r7, r3
 8012ca4:	781b      	ldrb	r3, [r3, #0]
 8012ca6:	2b0f      	cmp	r3, #15
 8012ca8:	d993      	bls.n	8012bd2 <RegionIN865ApplyCFList+0x3a>
 8012caa:	e002      	b.n	8012cb2 <RegionIN865ApplyCFList+0x11a>
        return;
 8012cac:	46c0      	nop			@ (mov r8, r8)
 8012cae:	e000      	b.n	8012cb2 <RegionIN865ApplyCFList+0x11a>
        return;
 8012cb0:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	b00b      	add	sp, #44	@ 0x2c
 8012cb6:	bd90      	pop	{r4, r7, pc}

08012cb8 <RegionIN865ChanMaskSet>:

bool RegionIN865ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b082      	sub	sp, #8
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	791b      	ldrb	r3, [r3, #4]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d002      	beq.n	8012cce <RegionIN865ChanMaskSet+0x16>
 8012cc8:	2b01      	cmp	r3, #1
 8012cca:	d008      	beq.n	8012cde <RegionIN865ChanMaskSet+0x26>
 8012ccc:	e00f      	b.n	8012cee <RegionIN865ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	6819      	ldr	r1, [r3, #0]
 8012cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8012cfc <RegionIN865ChanMaskSet+0x44>)
 8012cd4:	2201      	movs	r2, #1
 8012cd6:	0018      	movs	r0, r3
 8012cd8:	f7ff f83e 	bl	8011d58 <RegionCommonChanMaskCopy>
            break;
 8012cdc:	e009      	b.n	8012cf2 <RegionIN865ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	6819      	ldr	r1, [r3, #0]
 8012ce2:	4b07      	ldr	r3, [pc, #28]	@ (8012d00 <RegionIN865ChanMaskSet+0x48>)
 8012ce4:	2201      	movs	r2, #1
 8012ce6:	0018      	movs	r0, r3
 8012ce8:	f7ff f836 	bl	8011d58 <RegionCommonChanMaskCopy>
            break;
 8012cec:	e001      	b.n	8012cf2 <RegionIN865ChanMaskSet+0x3a>
        }
        default:
            return false;
 8012cee:	2300      	movs	r3, #0
 8012cf0:	e000      	b.n	8012cf4 <RegionIN865ChanMaskSet+0x3c>
    }
    return true;
 8012cf2:	2301      	movs	r3, #1
}
 8012cf4:	0018      	movs	r0, r3
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	b002      	add	sp, #8
 8012cfa:	bd80      	pop	{r7, pc}
 8012cfc:	20001254 	.word	0x20001254
 8012d00:	20001256 	.word	0x20001256

08012d04 <RegionIN865ComputeRxWindowParameters>:

void RegionIN865ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8012d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d06:	b08b      	sub	sp, #44	@ 0x2c
 8012d08:	af04      	add	r7, sp, #16
 8012d0a:	60ba      	str	r2, [r7, #8]
 8012d0c:	607b      	str	r3, [r7, #4]
 8012d0e:	240f      	movs	r4, #15
 8012d10:	193b      	adds	r3, r7, r4
 8012d12:	1c02      	adds	r2, r0, #0
 8012d14:	701a      	strb	r2, [r3, #0]
 8012d16:	230e      	movs	r3, #14
 8012d18:	18fb      	adds	r3, r7, r3
 8012d1a:	1c0a      	adds	r2, r1, #0
 8012d1c:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 8012d1e:	2200      	movs	r2, #0
 8012d20:	2300      	movs	r3, #0
 8012d22:	613a      	str	r2, [r7, #16]
 8012d24:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, IN865_RX_MAX_DATARATE );
 8012d26:	193b      	adds	r3, r7, r4
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	b25a      	sxtb	r2, r3
 8012d2c:	2a07      	cmp	r2, #7
 8012d2e:	dd00      	ble.n	8012d32 <RegionIN865ComputeRxWindowParameters+0x2e>
 8012d30:	2307      	movs	r3, #7
 8012d32:	b25a      	sxtb	r2, r3
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	785b      	ldrb	r3, [r3, #1]
 8012d3c:	b25b      	sxtb	r3, r3
 8012d3e:	0018      	movs	r0, r3
 8012d40:	f7ff fbcc 	bl	80124dc <GetBandwidth>
 8012d44:	0003      	movs	r3, r0
 8012d46:	b2da      	uxtb	r2, r3
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	785b      	ldrb	r3, [r3, #1]
 8012d50:	b25b      	sxtb	r3, r3
 8012d52:	2b07      	cmp	r3, #7
 8012d54:	d10d      	bne.n	8012d72 <RegionIN865ComputeRxWindowParameters+0x6e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesIN865[rxConfigParams->Datarate] );
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	785b      	ldrb	r3, [r3, #1]
 8012d5a:	b25b      	sxtb	r3, r3
 8012d5c:	001a      	movs	r2, r3
 8012d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8012dcc <RegionIN865ComputeRxWindowParameters+0xc8>)
 8012d60:	5c9b      	ldrb	r3, [r3, r2]
 8012d62:	0018      	movs	r0, r3
 8012d64:	f7ff fa24 	bl	80121b0 <RegionCommonComputeSymbolTimeFsk>
 8012d68:	0002      	movs	r2, r0
 8012d6a:	000b      	movs	r3, r1
 8012d6c:	613a      	str	r2, [r7, #16]
 8012d6e:	617b      	str	r3, [r7, #20]
 8012d70:	e013      	b.n	8012d9a <RegionIN865ComputeRxWindowParameters+0x96>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesIN865[rxConfigParams->Datarate], BandwidthsIN865[rxConfigParams->Datarate] );
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	785b      	ldrb	r3, [r3, #1]
 8012d76:	b25b      	sxtb	r3, r3
 8012d78:	001a      	movs	r2, r3
 8012d7a:	4b14      	ldr	r3, [pc, #80]	@ (8012dcc <RegionIN865ComputeRxWindowParameters+0xc8>)
 8012d7c:	5c98      	ldrb	r0, [r3, r2]
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	785b      	ldrb	r3, [r3, #1]
 8012d82:	b25b      	sxtb	r3, r3
 8012d84:	001a      	movs	r2, r3
 8012d86:	4b12      	ldr	r3, [pc, #72]	@ (8012dd0 <RegionIN865ComputeRxWindowParameters+0xcc>)
 8012d88:	0092      	lsls	r2, r2, #2
 8012d8a:	58d3      	ldr	r3, [r2, r3]
 8012d8c:	0019      	movs	r1, r3
 8012d8e:	f7ff f9e3 	bl	8012158 <RegionCommonComputeSymbolTimeLoRa>
 8012d92:	0002      	movs	r2, r0
 8012d94:	000b      	movs	r3, r1
 8012d96:	613a      	str	r2, [r7, #16]
 8012d98:	617b      	str	r3, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8012d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8012dd4 <RegionIN865ComputeRxWindowParameters+0xd0>)
 8012d9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012d9e:	4798      	blx	r3
 8012da0:	0006      	movs	r6, r0
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	3308      	adds	r3, #8
 8012da6:	687a      	ldr	r2, [r7, #4]
 8012da8:	320c      	adds	r2, #12
 8012daa:	68bd      	ldr	r5, [r7, #8]
 8012dac:	210e      	movs	r1, #14
 8012dae:	1879      	adds	r1, r7, r1
 8012db0:	780c      	ldrb	r4, [r1, #0]
 8012db2:	6938      	ldr	r0, [r7, #16]
 8012db4:	6979      	ldr	r1, [r7, #20]
 8012db6:	9202      	str	r2, [sp, #8]
 8012db8:	9301      	str	r3, [sp, #4]
 8012dba:	9600      	str	r6, [sp, #0]
 8012dbc:	002b      	movs	r3, r5
 8012dbe:	0022      	movs	r2, r4
 8012dc0:	f7ff fa10 	bl	80121e4 <RegionCommonComputeRxWindowParameters>
}
 8012dc4:	46c0      	nop			@ (mov r8, r8)
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	b007      	add	sp, #28
 8012dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dcc:	0801b500 	.word	0x0801b500
 8012dd0:	0801b508 	.word	0x0801b508
 8012dd4:	0801adcc 	.word	0x0801adcc

08012dd8 <RegionIN865RxConfig>:

bool RegionIN865RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8012dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012dda:	b091      	sub	sp, #68	@ 0x44
 8012ddc:	af0a      	add	r7, sp, #40	@ 0x28
 8012dde:	6078      	str	r0, [r7, #4]
 8012de0:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8012de2:	230f      	movs	r3, #15
 8012de4:	18fb      	adds	r3, r7, r3
 8012de6:	687a      	ldr	r2, [r7, #4]
 8012de8:	7852      	ldrb	r2, [r2, #1]
 8012dea:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 8012dec:	2316      	movs	r3, #22
 8012dee:	18fb      	adds	r3, r7, r3
 8012df0:	2200      	movs	r2, #0
 8012df2:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 8012df4:	230e      	movs	r3, #14
 8012df6:	18fb      	adds	r3, r7, r3
 8012df8:	2200      	movs	r2, #0
 8012dfa:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	685b      	ldr	r3, [r3, #4]
 8012e00:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8012e02:	4b63      	ldr	r3, [pc, #396]	@ (8012f90 <RegionIN865RxConfig+0x1b8>)
 8012e04:	68db      	ldr	r3, [r3, #12]
 8012e06:	4798      	blx	r3
 8012e08:	1e03      	subs	r3, r0, #0
 8012e0a:	d001      	beq.n	8012e10 <RegionIN865RxConfig+0x38>
    {
        return false;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	e0bb      	b.n	8012f88 <RegionIN865RxConfig+0x1b0>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	7cdb      	ldrb	r3, [r3, #19]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d122      	bne.n	8012e5e <RegionIN865RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	781b      	ldrb	r3, [r3, #0]
 8012e1c:	0019      	movs	r1, r3
 8012e1e:	4a5d      	ldr	r2, [pc, #372]	@ (8012f94 <RegionIN865RxConfig+0x1bc>)
 8012e20:	000b      	movs	r3, r1
 8012e22:	005b      	lsls	r3, r3, #1
 8012e24:	185b      	adds	r3, r3, r1
 8012e26:	009b      	lsls	r3, r3, #2
 8012e28:	589b      	ldr	r3, [r3, r2]
 8012e2a:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	781b      	ldrb	r3, [r3, #0]
 8012e30:	0019      	movs	r1, r3
 8012e32:	4a58      	ldr	r2, [pc, #352]	@ (8012f94 <RegionIN865RxConfig+0x1bc>)
 8012e34:	000b      	movs	r3, r1
 8012e36:	005b      	lsls	r3, r3, #1
 8012e38:	185b      	adds	r3, r3, r1
 8012e3a:	009b      	lsls	r3, r3, #2
 8012e3c:	18d3      	adds	r3, r2, r3
 8012e3e:	3304      	adds	r3, #4
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d00b      	beq.n	8012e5e <RegionIN865RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	781b      	ldrb	r3, [r3, #0]
 8012e4a:	0019      	movs	r1, r3
 8012e4c:	4a51      	ldr	r2, [pc, #324]	@ (8012f94 <RegionIN865RxConfig+0x1bc>)
 8012e4e:	000b      	movs	r3, r1
 8012e50:	005b      	lsls	r3, r3, #1
 8012e52:	185b      	adds	r3, r3, r1
 8012e54:	009b      	lsls	r3, r3, #2
 8012e56:	18d3      	adds	r3, r2, r3
 8012e58:	3304      	adds	r3, #4
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesIN865[dr];
 8012e5e:	240f      	movs	r4, #15
 8012e60:	193b      	adds	r3, r7, r4
 8012e62:	781b      	ldrb	r3, [r3, #0]
 8012e64:	b25b      	sxtb	r3, r3
 8012e66:	4a4c      	ldr	r2, [pc, #304]	@ (8012f98 <RegionIN865RxConfig+0x1c0>)
 8012e68:	5cd2      	ldrb	r2, [r2, r3]
 8012e6a:	250e      	movs	r5, #14
 8012e6c:	197b      	adds	r3, r7, r5
 8012e6e:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 8012e70:	4b47      	ldr	r3, [pc, #284]	@ (8012f90 <RegionIN865RxConfig+0x1b8>)
 8012e72:	695b      	ldr	r3, [r3, #20]
 8012e74:	693a      	ldr	r2, [r7, #16]
 8012e76:	0010      	movs	r0, r2
 8012e78:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8012e7a:	193b      	adds	r3, r7, r4
 8012e7c:	781b      	ldrb	r3, [r3, #0]
 8012e7e:	b25b      	sxtb	r3, r3
 8012e80:	2b07      	cmp	r3, #7
 8012e82:	d12e      	bne.n	8012ee2 <RegionIN865RxConfig+0x10a>
    {
        modem = MODEM_FSK;
 8012e84:	2117      	movs	r1, #23
 8012e86:	187b      	adds	r3, r7, r1
 8012e88:	2200      	movs	r2, #0
 8012e8a:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8012e8c:	4b40      	ldr	r3, [pc, #256]	@ (8012f90 <RegionIN865RxConfig+0x1b8>)
 8012e8e:	6a1c      	ldr	r4, [r3, #32]
 8012e90:	197b      	adds	r3, r7, r5
 8012e92:	2200      	movs	r2, #0
 8012e94:	569a      	ldrsb	r2, [r3, r2]
 8012e96:	0013      	movs	r3, r2
 8012e98:	015b      	lsls	r3, r3, #5
 8012e9a:	1a9b      	subs	r3, r3, r2
 8012e9c:	009b      	lsls	r3, r3, #2
 8012e9e:	189b      	adds	r3, r3, r2
 8012ea0:	00db      	lsls	r3, r3, #3
 8012ea2:	001e      	movs	r6, r3
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	689b      	ldr	r3, [r3, #8]
 8012ea8:	b29b      	uxth	r3, r3
 8012eaa:	687a      	ldr	r2, [r7, #4]
 8012eac:	7c92      	ldrb	r2, [r2, #18]
 8012eae:	4d3b      	ldr	r5, [pc, #236]	@ (8012f9c <RegionIN865RxConfig+0x1c4>)
 8012eb0:	1879      	adds	r1, r7, r1
 8012eb2:	7808      	ldrb	r0, [r1, #0]
 8012eb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	9208      	str	r2, [sp, #32]
 8012eba:	2200      	movs	r2, #0
 8012ebc:	9207      	str	r2, [sp, #28]
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	9206      	str	r2, [sp, #24]
 8012ec2:	2201      	movs	r2, #1
 8012ec4:	9205      	str	r2, [sp, #20]
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	9204      	str	r2, [sp, #16]
 8012eca:	2200      	movs	r2, #0
 8012ecc:	9203      	str	r2, [sp, #12]
 8012ece:	9302      	str	r3, [sp, #8]
 8012ed0:	2305      	movs	r3, #5
 8012ed2:	9301      	str	r3, [sp, #4]
 8012ed4:	4b32      	ldr	r3, [pc, #200]	@ (8012fa0 <RegionIN865RxConfig+0x1c8>)
 8012ed6:	9300      	str	r3, [sp, #0]
 8012ed8:	2300      	movs	r3, #0
 8012eda:	0032      	movs	r2, r6
 8012edc:	0029      	movs	r1, r5
 8012ede:	47a0      	blx	r4
 8012ee0:	e029      	b.n	8012f36 <RegionIN865RxConfig+0x15e>
    }
    else
    {
        modem = MODEM_LORA;
 8012ee2:	2117      	movs	r1, #23
 8012ee4:	187b      	adds	r3, r7, r1
 8012ee6:	2201      	movs	r2, #1
 8012ee8:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8012eea:	4b29      	ldr	r3, [pc, #164]	@ (8012f90 <RegionIN865RxConfig+0x1b8>)
 8012eec:	6a1c      	ldr	r4, [r3, #32]
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	789b      	ldrb	r3, [r3, #2]
 8012ef2:	001e      	movs	r6, r3
 8012ef4:	230e      	movs	r3, #14
 8012ef6:	18fb      	adds	r3, r7, r3
 8012ef8:	2500      	movs	r5, #0
 8012efa:	575d      	ldrsb	r5, [r3, r5]
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	689b      	ldr	r3, [r3, #8]
 8012f00:	b29b      	uxth	r3, r3
 8012f02:	687a      	ldr	r2, [r7, #4]
 8012f04:	7c92      	ldrb	r2, [r2, #18]
 8012f06:	1879      	adds	r1, r7, r1
 8012f08:	7808      	ldrb	r0, [r1, #0]
 8012f0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8012f0c:	2201      	movs	r2, #1
 8012f0e:	9208      	str	r2, [sp, #32]
 8012f10:	2200      	movs	r2, #0
 8012f12:	9207      	str	r2, [sp, #28]
 8012f14:	2200      	movs	r2, #0
 8012f16:	9206      	str	r2, [sp, #24]
 8012f18:	2200      	movs	r2, #0
 8012f1a:	9205      	str	r2, [sp, #20]
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	9204      	str	r2, [sp, #16]
 8012f20:	2200      	movs	r2, #0
 8012f22:	9203      	str	r2, [sp, #12]
 8012f24:	9302      	str	r3, [sp, #8]
 8012f26:	2308      	movs	r3, #8
 8012f28:	9301      	str	r3, [sp, #4]
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	9300      	str	r3, [sp, #0]
 8012f2e:	2301      	movs	r3, #1
 8012f30:	002a      	movs	r2, r5
 8012f32:	0031      	movs	r1, r6
 8012f34:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	7c5b      	ldrb	r3, [r3, #17]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d009      	beq.n	8012f52 <RegionIN865RxConfig+0x17a>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterIN865[dr];
 8012f3e:	230f      	movs	r3, #15
 8012f40:	18fb      	adds	r3, r7, r3
 8012f42:	2200      	movs	r2, #0
 8012f44:	569a      	ldrsb	r2, [r3, r2]
 8012f46:	2316      	movs	r3, #22
 8012f48:	18fb      	adds	r3, r7, r3
 8012f4a:	4916      	ldr	r1, [pc, #88]	@ (8012fa4 <RegionIN865RxConfig+0x1cc>)
 8012f4c:	5c8a      	ldrb	r2, [r1, r2]
 8012f4e:	701a      	strb	r2, [r3, #0]
 8012f50:	e008      	b.n	8012f64 <RegionIN865RxConfig+0x18c>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateIN865[dr];
 8012f52:	230f      	movs	r3, #15
 8012f54:	18fb      	adds	r3, r7, r3
 8012f56:	2200      	movs	r2, #0
 8012f58:	569a      	ldrsb	r2, [r3, r2]
 8012f5a:	2316      	movs	r3, #22
 8012f5c:	18fb      	adds	r3, r7, r3
 8012f5e:	4912      	ldr	r1, [pc, #72]	@ (8012fa8 <RegionIN865RxConfig+0x1d0>)
 8012f60:	5c8a      	ldrb	r2, [r1, r2]
 8012f62:	701a      	strb	r2, [r3, #0]
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 8012f64:	4b0a      	ldr	r3, [pc, #40]	@ (8012f90 <RegionIN865RxConfig+0x1b8>)
 8012f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012f68:	2216      	movs	r2, #22
 8012f6a:	18ba      	adds	r2, r7, r2
 8012f6c:	7812      	ldrb	r2, [r2, #0]
 8012f6e:	320d      	adds	r2, #13
 8012f70:	b2d1      	uxtb	r1, r2
 8012f72:	2217      	movs	r2, #23
 8012f74:	18ba      	adds	r2, r7, r2
 8012f76:	7812      	ldrb	r2, [r2, #0]
 8012f78:	0010      	movs	r0, r2
 8012f7a:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 8012f7c:	683b      	ldr	r3, [r7, #0]
 8012f7e:	220f      	movs	r2, #15
 8012f80:	18ba      	adds	r2, r7, r2
 8012f82:	7812      	ldrb	r2, [r2, #0]
 8012f84:	701a      	strb	r2, [r3, #0]
    return true;
 8012f86:	2301      	movs	r3, #1
}
 8012f88:	0018      	movs	r0, r3
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	b007      	add	sp, #28
 8012f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f90:	0801adcc 	.word	0x0801adcc
 8012f94:	20001184 	.word	0x20001184
 8012f98:	0801b500 	.word	0x0801b500
 8012f9c:	0000c350 	.word	0x0000c350
 8012fa0:	00014585 	.word	0x00014585
 8012fa4:	0801b530 	.word	0x0801b530
 8012fa8:	0801b528 	.word	0x0801b528

08012fac <RegionIN865TxConfig>:

bool RegionIN865TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8012fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fae:	b093      	sub	sp, #76	@ 0x4c
 8012fb0:	af0a      	add	r7, sp, #40	@ 0x28
 8012fb2:	60f8      	str	r0, [r7, #12]
 8012fb4:	60b9      	str	r1, [r7, #8]
 8012fb6:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesIN865[txConfig->Datarate];
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	785b      	ldrb	r3, [r3, #1]
 8012fbc:	b25b      	sxtb	r3, r3
 8012fbe:	001a      	movs	r2, r3
 8012fc0:	4b61      	ldr	r3, [pc, #388]	@ (8013148 <RegionIN865TxConfig+0x19c>)
 8012fc2:	5c9a      	ldrb	r2, [r3, r2]
 8012fc4:	251e      	movs	r5, #30
 8012fc6:	197b      	adds	r3, r7, r5
 8012fc8:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	2002      	movs	r0, #2
 8012fce:	5618      	ldrsb	r0, [r3, r0]
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	781b      	ldrb	r3, [r3, #0]
 8012fd4:	0019      	movs	r1, r3
 8012fd6:	4a5d      	ldr	r2, [pc, #372]	@ (801314c <RegionIN865TxConfig+0x1a0>)
 8012fd8:	000b      	movs	r3, r1
 8012fda:	005b      	lsls	r3, r3, #1
 8012fdc:	185b      	adds	r3, r3, r1
 8012fde:	009b      	lsls	r3, r3, #2
 8012fe0:	18d3      	adds	r3, r2, r3
 8012fe2:	3309      	adds	r3, #9
 8012fe4:	781b      	ldrb	r3, [r3, #0]
 8012fe6:	4a59      	ldr	r2, [pc, #356]	@ (801314c <RegionIN865TxConfig+0x1a0>)
 8012fe8:	330c      	adds	r3, #12
 8012fea:	011b      	lsls	r3, r3, #4
 8012fec:	18d3      	adds	r3, r2, r3
 8012fee:	3302      	adds	r3, #2
 8012ff0:	2100      	movs	r1, #0
 8012ff2:	5659      	ldrsb	r1, [r3, r1]
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	2201      	movs	r2, #1
 8012ff8:	569a      	ldrsb	r2, [r3, r2]
 8012ffa:	261d      	movs	r6, #29
 8012ffc:	19bc      	adds	r4, r7, r6
 8012ffe:	4b54      	ldr	r3, [pc, #336]	@ (8013150 <RegionIN865TxConfig+0x1a4>)
 8013000:	f7ff fa8a 	bl	8012518 <LimitTxPower>
 8013004:	0003      	movs	r3, r0
 8013006:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	785b      	ldrb	r3, [r3, #1]
 801300c:	b25b      	sxtb	r3, r3
 801300e:	0018      	movs	r0, r3
 8013010:	f7ff fa64 	bl	80124dc <GetBandwidth>
 8013014:	0003      	movs	r3, r0
 8013016:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 8013018:	2017      	movs	r0, #23
 801301a:	183b      	adds	r3, r7, r0
 801301c:	2200      	movs	r2, #0
 801301e:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	6859      	ldr	r1, [r3, #4]
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	689a      	ldr	r2, [r3, #8]
 8013028:	183c      	adds	r4, r7, r0
 801302a:	19bb      	adds	r3, r7, r6
 801302c:	781b      	ldrb	r3, [r3, #0]
 801302e:	b25b      	sxtb	r3, r3
 8013030:	0018      	movs	r0, r3
 8013032:	f7ff f95b 	bl	80122ec <RegionCommonComputeTxPower>
 8013036:	0003      	movs	r3, r0
 8013038:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 801303a:	4b46      	ldr	r3, [pc, #280]	@ (8013154 <RegionIN865TxConfig+0x1a8>)
 801303c:	695a      	ldr	r2, [r3, #20]
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	781b      	ldrb	r3, [r3, #0]
 8013042:	0018      	movs	r0, r3
 8013044:	4941      	ldr	r1, [pc, #260]	@ (801314c <RegionIN865TxConfig+0x1a0>)
 8013046:	0003      	movs	r3, r0
 8013048:	005b      	lsls	r3, r3, #1
 801304a:	181b      	adds	r3, r3, r0
 801304c:	009b      	lsls	r3, r3, #2
 801304e:	585b      	ldr	r3, [r3, r1]
 8013050:	0018      	movs	r0, r3
 8013052:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	785b      	ldrb	r3, [r3, #1]
 8013058:	b25b      	sxtb	r3, r3
 801305a:	2b07      	cmp	r3, #7
 801305c:	d12e      	bne.n	80130bc <RegionIN865TxConfig+0x110>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801305e:	231f      	movs	r3, #31
 8013060:	18fb      	adds	r3, r7, r3
 8013062:	2200      	movs	r2, #0
 8013064:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8013066:	4b3b      	ldr	r3, [pc, #236]	@ (8013154 <RegionIN865TxConfig+0x1a8>)
 8013068:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801306a:	197b      	adds	r3, r7, r5
 801306c:	2200      	movs	r2, #0
 801306e:	569a      	ldrsb	r2, [r3, r2]
 8013070:	0013      	movs	r3, r2
 8013072:	015b      	lsls	r3, r3, #5
 8013074:	1a9b      	subs	r3, r3, r2
 8013076:	009b      	lsls	r3, r3, #2
 8013078:	189b      	adds	r3, r3, r2
 801307a:	00db      	lsls	r3, r3, #3
 801307c:	001e      	movs	r6, r3
 801307e:	69ba      	ldr	r2, [r7, #24]
 8013080:	4d35      	ldr	r5, [pc, #212]	@ (8013158 <RegionIN865TxConfig+0x1ac>)
 8013082:	2017      	movs	r0, #23
 8013084:	183b      	adds	r3, r7, r0
 8013086:	2100      	movs	r1, #0
 8013088:	5659      	ldrsb	r1, [r3, r1]
 801308a:	231f      	movs	r3, #31
 801308c:	18fb      	adds	r3, r7, r3
 801308e:	7818      	ldrb	r0, [r3, #0]
 8013090:	23fa      	movs	r3, #250	@ 0xfa
 8013092:	011b      	lsls	r3, r3, #4
 8013094:	9308      	str	r3, [sp, #32]
 8013096:	2300      	movs	r3, #0
 8013098:	9307      	str	r3, [sp, #28]
 801309a:	2300      	movs	r3, #0
 801309c:	9306      	str	r3, [sp, #24]
 801309e:	2300      	movs	r3, #0
 80130a0:	9305      	str	r3, [sp, #20]
 80130a2:	2301      	movs	r3, #1
 80130a4:	9304      	str	r3, [sp, #16]
 80130a6:	2300      	movs	r3, #0
 80130a8:	9303      	str	r3, [sp, #12]
 80130aa:	2305      	movs	r3, #5
 80130ac:	9302      	str	r3, [sp, #8]
 80130ae:	2300      	movs	r3, #0
 80130b0:	9301      	str	r3, [sp, #4]
 80130b2:	9600      	str	r6, [sp, #0]
 80130b4:	0013      	movs	r3, r2
 80130b6:	002a      	movs	r2, r5
 80130b8:	47a0      	blx	r4
 80130ba:	e025      	b.n	8013108 <RegionIN865TxConfig+0x15c>
    }
    else
    {
        modem = MODEM_LORA;
 80130bc:	201f      	movs	r0, #31
 80130be:	183b      	adds	r3, r7, r0
 80130c0:	2201      	movs	r2, #1
 80130c2:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80130c4:	4b23      	ldr	r3, [pc, #140]	@ (8013154 <RegionIN865TxConfig+0x1a8>)
 80130c6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80130c8:	231e      	movs	r3, #30
 80130ca:	18fb      	adds	r3, r7, r3
 80130cc:	781b      	ldrb	r3, [r3, #0]
 80130ce:	b25b      	sxtb	r3, r3
 80130d0:	69bd      	ldr	r5, [r7, #24]
 80130d2:	2217      	movs	r2, #23
 80130d4:	18ba      	adds	r2, r7, r2
 80130d6:	2100      	movs	r1, #0
 80130d8:	5651      	ldrsb	r1, [r2, r1]
 80130da:	183a      	adds	r2, r7, r0
 80130dc:	7810      	ldrb	r0, [r2, #0]
 80130de:	22fa      	movs	r2, #250	@ 0xfa
 80130e0:	0112      	lsls	r2, r2, #4
 80130e2:	9208      	str	r2, [sp, #32]
 80130e4:	2200      	movs	r2, #0
 80130e6:	9207      	str	r2, [sp, #28]
 80130e8:	2200      	movs	r2, #0
 80130ea:	9206      	str	r2, [sp, #24]
 80130ec:	2200      	movs	r2, #0
 80130ee:	9205      	str	r2, [sp, #20]
 80130f0:	2201      	movs	r2, #1
 80130f2:	9204      	str	r2, [sp, #16]
 80130f4:	2200      	movs	r2, #0
 80130f6:	9203      	str	r2, [sp, #12]
 80130f8:	2208      	movs	r2, #8
 80130fa:	9202      	str	r2, [sp, #8]
 80130fc:	2201      	movs	r2, #1
 80130fe:	9201      	str	r2, [sp, #4]
 8013100:	9300      	str	r3, [sp, #0]
 8013102:	002b      	movs	r3, r5
 8013104:	2200      	movs	r2, #0
 8013106:	47a0      	blx	r4
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8013108:	4b12      	ldr	r3, [pc, #72]	@ (8013154 <RegionIN865TxConfig+0x1a8>)
 801310a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801310c:	68fa      	ldr	r2, [r7, #12]
 801310e:	8992      	ldrh	r2, [r2, #12]
 8013110:	b2d1      	uxtb	r1, r2
 8013112:	241f      	movs	r4, #31
 8013114:	193a      	adds	r2, r7, r4
 8013116:	7812      	ldrb	r2, [r2, #0]
 8013118:	0010      	movs	r0, r2
 801311a:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 801311c:	4b0d      	ldr	r3, [pc, #52]	@ (8013154 <RegionIN865TxConfig+0x1a8>)
 801311e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013120:	68fa      	ldr	r2, [r7, #12]
 8013122:	8992      	ldrh	r2, [r2, #12]
 8013124:	b2d1      	uxtb	r1, r2
 8013126:	193a      	adds	r2, r7, r4
 8013128:	7812      	ldrb	r2, [r2, #0]
 801312a:	0010      	movs	r0, r2
 801312c:	4798      	blx	r3
 801312e:	0002      	movs	r2, r0
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8013134:	68bb      	ldr	r3, [r7, #8]
 8013136:	221d      	movs	r2, #29
 8013138:	18ba      	adds	r2, r7, r2
 801313a:	7812      	ldrb	r2, [r2, #0]
 801313c:	701a      	strb	r2, [r3, #0]
    return true;
 801313e:	2301      	movs	r3, #1
}
 8013140:	0018      	movs	r0, r3
 8013142:	46bd      	mov	sp, r7
 8013144:	b009      	add	sp, #36	@ 0x24
 8013146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013148:	0801b500 	.word	0x0801b500
 801314c:	20001184 	.word	0x20001184
 8013150:	20001254 	.word	0x20001254
 8013154:	0801adcc 	.word	0x0801adcc
 8013158:	000061a8 	.word	0x000061a8

0801315c <RegionIN865LinkAdrReq>:

uint8_t RegionIN865LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801315c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801315e:	b093      	sub	sp, #76	@ 0x4c
 8013160:	af00      	add	r7, sp, #0
 8013162:	60f8      	str	r0, [r7, #12]
 8013164:	60b9      	str	r1, [r7, #8]
 8013166:	607a      	str	r2, [r7, #4]
 8013168:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801316a:	2347      	movs	r3, #71	@ 0x47
 801316c:	18fb      	adds	r3, r7, r3
 801316e:	2207      	movs	r2, #7
 8013170:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 8013172:	2344      	movs	r3, #68	@ 0x44
 8013174:	18fb      	adds	r3, r7, r3
 8013176:	2200      	movs	r2, #0
 8013178:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 801317a:	2346      	movs	r3, #70	@ 0x46
 801317c:	18fb      	adds	r3, r7, r3
 801317e:	2200      	movs	r2, #0
 8013180:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 8013182:	233a      	movs	r3, #58	@ 0x3a
 8013184:	18fb      	adds	r3, r7, r3
 8013186:	2200      	movs	r2, #0
 8013188:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801318a:	e098      	b.n	80132be <RegionIN865LinkAdrReq+0x162>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	685a      	ldr	r2, [r3, #4]
 8013190:	2546      	movs	r5, #70	@ 0x46
 8013192:	197b      	adds	r3, r7, r5
 8013194:	781b      	ldrb	r3, [r3, #0]
 8013196:	18d3      	adds	r3, r2, r3
 8013198:	2644      	movs	r6, #68	@ 0x44
 801319a:	19bc      	adds	r4, r7, r6
 801319c:	203c      	movs	r0, #60	@ 0x3c
 801319e:	183a      	adds	r2, r7, r0
 80131a0:	0011      	movs	r1, r2
 80131a2:	0018      	movs	r0, r3
 80131a4:	f7fe fee5 	bl	8011f72 <RegionCommonParseLinkAdrReq>
 80131a8:	0003      	movs	r3, r0
 80131aa:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 80131ac:	0032      	movs	r2, r6
 80131ae:	18bb      	adds	r3, r7, r2
 80131b0:	781b      	ldrb	r3, [r3, #0]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d100      	bne.n	80131b8 <RegionIN865LinkAdrReq+0x5c>
 80131b6:	e08b      	b.n	80132d0 <RegionIN865LinkAdrReq+0x174>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80131b8:	197b      	adds	r3, r7, r5
 80131ba:	1979      	adds	r1, r7, r5
 80131bc:	18ba      	adds	r2, r7, r2
 80131be:	7809      	ldrb	r1, [r1, #0]
 80131c0:	7812      	ldrb	r2, [r2, #0]
 80131c2:	188a      	adds	r2, r1, r2
 80131c4:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80131c6:	2147      	movs	r1, #71	@ 0x47
 80131c8:	187b      	adds	r3, r7, r1
 80131ca:	2207      	movs	r2, #7
 80131cc:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80131ce:	203c      	movs	r0, #60	@ 0x3c
 80131d0:	183b      	adds	r3, r7, r0
 80131d2:	889a      	ldrh	r2, [r3, #4]
 80131d4:	243a      	movs	r4, #58	@ 0x3a
 80131d6:	193b      	adds	r3, r7, r4
 80131d8:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80131da:	183b      	adds	r3, r7, r0
 80131dc:	78db      	ldrb	r3, [r3, #3]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d10a      	bne.n	80131f8 <RegionIN865LinkAdrReq+0x9c>
 80131e2:	193b      	adds	r3, r7, r4
 80131e4:	881b      	ldrh	r3, [r3, #0]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d106      	bne.n	80131f8 <RegionIN865LinkAdrReq+0x9c>
        {
            status &= 0xFE; // Channel mask KO
 80131ea:	187b      	adds	r3, r7, r1
 80131ec:	187a      	adds	r2, r7, r1
 80131ee:	7812      	ldrb	r2, [r2, #0]
 80131f0:	2101      	movs	r1, #1
 80131f2:	438a      	bics	r2, r1
 80131f4:	701a      	strb	r2, [r3, #0]
 80131f6:	e062      	b.n	80132be <RegionIN865LinkAdrReq+0x162>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80131f8:	223c      	movs	r2, #60	@ 0x3c
 80131fa:	18bb      	adds	r3, r7, r2
 80131fc:	78db      	ldrb	r3, [r3, #3]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d003      	beq.n	801320a <RegionIN865LinkAdrReq+0xae>
 8013202:	18bb      	adds	r3, r7, r2
 8013204:	78db      	ldrb	r3, [r3, #3]
 8013206:	2b05      	cmp	r3, #5
 8013208:	d904      	bls.n	8013214 <RegionIN865LinkAdrReq+0xb8>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801320a:	233c      	movs	r3, #60	@ 0x3c
 801320c:	18fb      	adds	r3, r7, r3
 801320e:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8013210:	2b06      	cmp	r3, #6
 8013212:	d907      	bls.n	8013224 <RegionIN865LinkAdrReq+0xc8>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8013214:	2247      	movs	r2, #71	@ 0x47
 8013216:	18bb      	adds	r3, r7, r2
 8013218:	18ba      	adds	r2, r7, r2
 801321a:	7812      	ldrb	r2, [r2, #0]
 801321c:	2101      	movs	r1, #1
 801321e:	438a      	bics	r2, r1
 8013220:	701a      	strb	r2, [r3, #0]
 8013222:	e04c      	b.n	80132be <RegionIN865LinkAdrReq+0x162>
        }
        else
        {
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 8013224:	2345      	movs	r3, #69	@ 0x45
 8013226:	18fb      	adds	r3, r7, r3
 8013228:	2200      	movs	r2, #0
 801322a:	701a      	strb	r2, [r3, #0]
 801322c:	e042      	b.n	80132b4 <RegionIN865LinkAdrReq+0x158>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 801322e:	233c      	movs	r3, #60	@ 0x3c
 8013230:	18fb      	adds	r3, r7, r3
 8013232:	78db      	ldrb	r3, [r3, #3]
 8013234:	2b06      	cmp	r3, #6
 8013236:	d11a      	bne.n	801326e <RegionIN865LinkAdrReq+0x112>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 8013238:	2045      	movs	r0, #69	@ 0x45
 801323a:	183b      	adds	r3, r7, r0
 801323c:	781a      	ldrb	r2, [r3, #0]
 801323e:	4973      	ldr	r1, [pc, #460]	@ (801340c <RegionIN865LinkAdrReq+0x2b0>)
 8013240:	0013      	movs	r3, r2
 8013242:	005b      	lsls	r3, r3, #1
 8013244:	189b      	adds	r3, r3, r2
 8013246:	009b      	lsls	r3, r3, #2
 8013248:	585b      	ldr	r3, [r3, r1]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d02c      	beq.n	80132a8 <RegionIN865LinkAdrReq+0x14c>
                    {
                        chMask |= 1 << i;
 801324e:	183b      	adds	r3, r7, r0
 8013250:	781b      	ldrb	r3, [r3, #0]
 8013252:	2201      	movs	r2, #1
 8013254:	409a      	lsls	r2, r3
 8013256:	0013      	movs	r3, r2
 8013258:	b21a      	sxth	r2, r3
 801325a:	213a      	movs	r1, #58	@ 0x3a
 801325c:	187b      	adds	r3, r7, r1
 801325e:	881b      	ldrh	r3, [r3, #0]
 8013260:	b21b      	sxth	r3, r3
 8013262:	4313      	orrs	r3, r2
 8013264:	b21b      	sxth	r3, r3
 8013266:	b29a      	uxth	r2, r3
 8013268:	187b      	adds	r3, r7, r1
 801326a:	801a      	strh	r2, [r3, #0]
 801326c:	e01c      	b.n	80132a8 <RegionIN865LinkAdrReq+0x14c>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801326e:	233a      	movs	r3, #58	@ 0x3a
 8013270:	18fb      	adds	r3, r7, r3
 8013272:	881b      	ldrh	r3, [r3, #0]
 8013274:	001a      	movs	r2, r3
 8013276:	2145      	movs	r1, #69	@ 0x45
 8013278:	187b      	adds	r3, r7, r1
 801327a:	781b      	ldrb	r3, [r3, #0]
 801327c:	411a      	asrs	r2, r3
 801327e:	0013      	movs	r3, r2
 8013280:	2201      	movs	r2, #1
 8013282:	4013      	ands	r3, r2
 8013284:	d010      	beq.n	80132a8 <RegionIN865LinkAdrReq+0x14c>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8013286:	187b      	adds	r3, r7, r1
 8013288:	781a      	ldrb	r2, [r3, #0]
 801328a:	4960      	ldr	r1, [pc, #384]	@ (801340c <RegionIN865LinkAdrReq+0x2b0>)
 801328c:	0013      	movs	r3, r2
 801328e:	005b      	lsls	r3, r3, #1
 8013290:	189b      	adds	r3, r3, r2
 8013292:	009b      	lsls	r3, r3, #2
 8013294:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8013296:	2b00      	cmp	r3, #0
 8013298:	d106      	bne.n	80132a8 <RegionIN865LinkAdrReq+0x14c>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801329a:	2247      	movs	r2, #71	@ 0x47
 801329c:	18bb      	adds	r3, r7, r2
 801329e:	18ba      	adds	r2, r7, r2
 80132a0:	7812      	ldrb	r2, [r2, #0]
 80132a2:	2101      	movs	r1, #1
 80132a4:	438a      	bics	r2, r1
 80132a6:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 80132a8:	2145      	movs	r1, #69	@ 0x45
 80132aa:	187b      	adds	r3, r7, r1
 80132ac:	781a      	ldrb	r2, [r3, #0]
 80132ae:	187b      	adds	r3, r7, r1
 80132b0:	3201      	adds	r2, #1
 80132b2:	701a      	strb	r2, [r3, #0]
 80132b4:	2345      	movs	r3, #69	@ 0x45
 80132b6:	18fb      	adds	r3, r7, r3
 80132b8:	781b      	ldrb	r3, [r3, #0]
 80132ba:	2b0f      	cmp	r3, #15
 80132bc:	d9b7      	bls.n	801322e <RegionIN865LinkAdrReq+0xd2>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	7a1b      	ldrb	r3, [r3, #8]
 80132c2:	2246      	movs	r2, #70	@ 0x46
 80132c4:	18ba      	adds	r2, r7, r2
 80132c6:	7812      	ldrb	r2, [r2, #0]
 80132c8:	429a      	cmp	r2, r3
 80132ca:	d200      	bcs.n	80132ce <RegionIN865LinkAdrReq+0x172>
 80132cc:	e75e      	b.n	801318c <RegionIN865LinkAdrReq+0x30>
 80132ce:	e000      	b.n	80132d2 <RegionIN865LinkAdrReq+0x176>
            break; // break loop, since no more request has been found
 80132d0:	46c0      	nop			@ (mov r8, r8)
                }
            }
        }
    }

    if( linkAdrParams.Datarate != DR_6 )
 80132d2:	253c      	movs	r5, #60	@ 0x3c
 80132d4:	197b      	adds	r3, r7, r5
 80132d6:	785b      	ldrb	r3, [r3, #1]
 80132d8:	b25b      	sxtb	r3, r3
 80132da:	2b06      	cmp	r3, #6
 80132dc:	d062      	beq.n	80133a4 <RegionIN865LinkAdrReq+0x248>
    {
        // Get the minimum possible datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80132de:	2134      	movs	r1, #52	@ 0x34
 80132e0:	187b      	adds	r3, r7, r1
 80132e2:	2202      	movs	r2, #2
 80132e4:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	7a5a      	ldrb	r2, [r3, #9]
 80132ea:	187b      	adds	r3, r7, r1
 80132ec:	709a      	strb	r2, [r3, #2]
        phyParam = RegionIN865GetPhyParam( &getPhy );
 80132ee:	187b      	adds	r3, r7, r1
 80132f0:	0018      	movs	r0, r3
 80132f2:	f7ff fa43 	bl	801277c <RegionIN865GetPhyParam>
 80132f6:	0003      	movs	r3, r0
 80132f8:	001a      	movs	r2, r3
 80132fa:	2030      	movs	r0, #48	@ 0x30
 80132fc:	183b      	adds	r3, r7, r0
 80132fe:	601a      	str	r2, [r3, #0]

        linkAdrVerifyParams.Status = status;
 8013300:	2110      	movs	r1, #16
 8013302:	187b      	adds	r3, r7, r1
 8013304:	2447      	movs	r4, #71	@ 0x47
 8013306:	193a      	adds	r2, r7, r4
 8013308:	7812      	ldrb	r2, [r2, #0]
 801330a:	711a      	strb	r2, [r3, #4]
        linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	7a9a      	ldrb	r2, [r3, #10]
 8013310:	187b      	adds	r3, r7, r1
 8013312:	715a      	strb	r2, [r3, #5]
        linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8013314:	197b      	adds	r3, r7, r5
 8013316:	2201      	movs	r2, #1
 8013318:	569a      	ldrsb	r2, [r3, r2]
 801331a:	187b      	adds	r3, r7, r1
 801331c:	719a      	strb	r2, [r3, #6]
        linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801331e:	197b      	adds	r3, r7, r5
 8013320:	2202      	movs	r2, #2
 8013322:	569a      	ldrsb	r2, [r3, r2]
 8013324:	187b      	adds	r3, r7, r1
 8013326:	71da      	strb	r2, [r3, #7]
        linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8013328:	197b      	adds	r3, r7, r5
 801332a:	781a      	ldrb	r2, [r3, #0]
 801332c:	187b      	adds	r3, r7, r1
 801332e:	721a      	strb	r2, [r3, #8]
        linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	220b      	movs	r2, #11
 8013334:	569a      	ldrsb	r2, [r3, r2]
 8013336:	187b      	adds	r3, r7, r1
 8013338:	725a      	strb	r2, [r3, #9]
        linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	220c      	movs	r2, #12
 801333e:	569a      	ldrsb	r2, [r3, r2]
 8013340:	187b      	adds	r3, r7, r1
 8013342:	729a      	strb	r2, [r3, #10]
        linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	7b5b      	ldrb	r3, [r3, #13]
 8013348:	b25a      	sxtb	r2, r3
 801334a:	187b      	adds	r3, r7, r1
 801334c:	72da      	strb	r2, [r3, #11]
        linkAdrVerifyParams.NbChannels = IN865_MAX_NB_CHANNELS;
 801334e:	187b      	adds	r3, r7, r1
 8013350:	2210      	movs	r2, #16
 8013352:	731a      	strb	r2, [r3, #12]
        linkAdrVerifyParams.ChannelsMask = &chMask;
 8013354:	187b      	adds	r3, r7, r1
 8013356:	223a      	movs	r2, #58	@ 0x3a
 8013358:	18ba      	adds	r2, r7, r2
 801335a:	611a      	str	r2, [r3, #16]
        linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801335c:	183b      	adds	r3, r7, r0
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	b25a      	sxtb	r2, r3
 8013362:	0008      	movs	r0, r1
 8013364:	183b      	adds	r3, r7, r0
 8013366:	751a      	strb	r2, [r3, #20]
        linkAdrVerifyParams.MaxDatarate = IN865_TX_MAX_DATARATE;
 8013368:	183b      	adds	r3, r7, r0
 801336a:	2207      	movs	r2, #7
 801336c:	755a      	strb	r2, [r3, #21]
        linkAdrVerifyParams.Channels = NvmCtx.Channels;
 801336e:	183b      	adds	r3, r7, r0
 8013370:	4a26      	ldr	r2, [pc, #152]	@ (801340c <RegionIN865LinkAdrReq+0x2b0>)
 8013372:	619a      	str	r2, [r3, #24]
        linkAdrVerifyParams.MinTxPower = IN865_MIN_TX_POWER;
 8013374:	183b      	adds	r3, r7, r0
 8013376:	220a      	movs	r2, #10
 8013378:	771a      	strb	r2, [r3, #28]
        linkAdrVerifyParams.MaxTxPower = IN865_MAX_TX_POWER;
 801337a:	183b      	adds	r3, r7, r0
 801337c:	2200      	movs	r2, #0
 801337e:	775a      	strb	r2, [r3, #29]
        linkAdrVerifyParams.Version = linkAdrReq->Version;
 8013380:	183b      	adds	r3, r7, r0
 8013382:	68fa      	ldr	r2, [r7, #12]
 8013384:	6812      	ldr	r2, [r2, #0]
 8013386:	601a      	str	r2, [r3, #0]

        // Verify the parameters and update, if necessary
        status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8013388:	193c      	adds	r4, r7, r4
 801338a:	0029      	movs	r1, r5
 801338c:	187d      	adds	r5, r7, r1
 801338e:	187b      	adds	r3, r7, r1
 8013390:	1c9a      	adds	r2, r3, #2
 8013392:	187b      	adds	r3, r7, r1
 8013394:	1c59      	adds	r1, r3, #1
 8013396:	1838      	adds	r0, r7, r0
 8013398:	002b      	movs	r3, r5
 801339a:	f7fe fe3f 	bl	801201c <RegionCommonLinkAdrReqVerifyParams>
 801339e:	0003      	movs	r3, r0
 80133a0:	7023      	strb	r3, [r4, #0]
 80133a2:	e006      	b.n	80133b2 <RegionIN865LinkAdrReq+0x256>
    }
    else
    {// DR_6 is not supported by this region
        status &= 0xFD; // Datarate KO
 80133a4:	2247      	movs	r2, #71	@ 0x47
 80133a6:	18bb      	adds	r3, r7, r2
 80133a8:	18ba      	adds	r2, r7, r2
 80133aa:	7812      	ldrb	r2, [r2, #0]
 80133ac:	2102      	movs	r1, #2
 80133ae:	438a      	bics	r2, r1
 80133b0:	701a      	strb	r2, [r3, #0]
    }

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80133b2:	2347      	movs	r3, #71	@ 0x47
 80133b4:	18fb      	adds	r3, r7, r3
 80133b6:	781b      	ldrb	r3, [r3, #0]
 80133b8:	2b07      	cmp	r3, #7
 80133ba:	d10b      	bne.n	80133d4 <RegionIN865LinkAdrReq+0x278>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 80133bc:	4b14      	ldr	r3, [pc, #80]	@ (8013410 <RegionIN865LinkAdrReq+0x2b4>)
 80133be:	2202      	movs	r2, #2
 80133c0:	2100      	movs	r1, #0
 80133c2:	0018      	movs	r0, r3
 80133c4:	f002 f9a6 	bl	8015714 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 80133c8:	233a      	movs	r3, #58	@ 0x3a
 80133ca:	18fb      	adds	r3, r7, r3
 80133cc:	8819      	ldrh	r1, [r3, #0]
 80133ce:	4b0f      	ldr	r3, [pc, #60]	@ (801340c <RegionIN865LinkAdrReq+0x2b0>)
 80133d0:	22d0      	movs	r2, #208	@ 0xd0
 80133d2:	5299      	strh	r1, [r3, r2]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80133d4:	213c      	movs	r1, #60	@ 0x3c
 80133d6:	187b      	adds	r3, r7, r1
 80133d8:	2201      	movs	r2, #1
 80133da:	569a      	ldrsb	r2, [r3, r2]
 80133dc:	68bb      	ldr	r3, [r7, #8]
 80133de:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80133e0:	187b      	adds	r3, r7, r1
 80133e2:	2202      	movs	r2, #2
 80133e4:	569a      	ldrsb	r2, [r3, r2]
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80133ea:	187b      	adds	r3, r7, r1
 80133ec:	781a      	ldrb	r2, [r3, #0]
 80133ee:	683b      	ldr	r3, [r7, #0]
 80133f0:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80133f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80133f4:	2246      	movs	r2, #70	@ 0x46
 80133f6:	18ba      	adds	r2, r7, r2
 80133f8:	7812      	ldrb	r2, [r2, #0]
 80133fa:	701a      	strb	r2, [r3, #0]

    return status;
 80133fc:	2347      	movs	r3, #71	@ 0x47
 80133fe:	18fb      	adds	r3, r7, r3
 8013400:	781b      	ldrb	r3, [r3, #0]
}
 8013402:	0018      	movs	r0, r3
 8013404:	46bd      	mov	sp, r7
 8013406:	b013      	add	sp, #76	@ 0x4c
 8013408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801340a:	46c0      	nop			@ (mov r8, r8)
 801340c:	20001184 	.word	0x20001184
 8013410:	20001254 	.word	0x20001254

08013414 <RegionIN865RxParamSetupReq>:

uint8_t RegionIN865RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8013414:	b590      	push	{r4, r7, lr}
 8013416:	b085      	sub	sp, #20
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801341c:	240f      	movs	r4, #15
 801341e:	193b      	adds	r3, r7, r4
 8013420:	2207      	movs	r2, #7
 8013422:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	685b      	ldr	r3, [r3, #4]
 8013428:	0018      	movs	r0, r3
 801342a:	f7ff f89d 	bl	8012568 <VerifyRfFreq>
 801342e:	0003      	movs	r3, r0
 8013430:	001a      	movs	r2, r3
 8013432:	2301      	movs	r3, #1
 8013434:	4053      	eors	r3, r2
 8013436:	b2db      	uxtb	r3, r3
 8013438:	2b00      	cmp	r3, #0
 801343a:	d005      	beq.n	8013448 <RegionIN865RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 801343c:	193b      	adds	r3, r7, r4
 801343e:	193a      	adds	r2, r7, r4
 8013440:	7812      	ldrb	r2, [r2, #0]
 8013442:	2101      	movs	r1, #1
 8013444:	438a      	bics	r2, r1
 8013446:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE ) == false )
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	781b      	ldrb	r3, [r3, #0]
 801344c:	b25b      	sxtb	r3, r3
 801344e:	2207      	movs	r2, #7
 8013450:	2100      	movs	r1, #0
 8013452:	0018      	movs	r0, r3
 8013454:	f7fe fbd7 	bl	8011c06 <RegionCommonValueInRange>
 8013458:	1e03      	subs	r3, r0, #0
 801345a:	d106      	bne.n	801346a <RegionIN865RxParamSetupReq+0x56>
    {
        status &= 0xFD; // Datarate KO
 801345c:	220f      	movs	r2, #15
 801345e:	18bb      	adds	r3, r7, r2
 8013460:	18ba      	adds	r2, r7, r2
 8013462:	7812      	ldrb	r2, [r2, #0]
 8013464:	2102      	movs	r1, #2
 8013466:	438a      	bics	r2, r1
 8013468:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, IN865_MIN_RX1_DR_OFFSET, IN865_MAX_RX1_DR_OFFSET ) == false )
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	785b      	ldrb	r3, [r3, #1]
 801346e:	b25b      	sxtb	r3, r3
 8013470:	2207      	movs	r2, #7
 8013472:	2100      	movs	r1, #0
 8013474:	0018      	movs	r0, r3
 8013476:	f7fe fbc6 	bl	8011c06 <RegionCommonValueInRange>
 801347a:	1e03      	subs	r3, r0, #0
 801347c:	d106      	bne.n	801348c <RegionIN865RxParamSetupReq+0x78>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801347e:	220f      	movs	r2, #15
 8013480:	18bb      	adds	r3, r7, r2
 8013482:	18ba      	adds	r2, r7, r2
 8013484:	7812      	ldrb	r2, [r2, #0]
 8013486:	2104      	movs	r1, #4
 8013488:	438a      	bics	r2, r1
 801348a:	701a      	strb	r2, [r3, #0]
    }

    return status;
 801348c:	230f      	movs	r3, #15
 801348e:	18fb      	adds	r3, r7, r3
 8013490:	781b      	ldrb	r3, [r3, #0]
}
 8013492:	0018      	movs	r0, r3
 8013494:	46bd      	mov	sp, r7
 8013496:	b005      	add	sp, #20
 8013498:	bd90      	pop	{r4, r7, pc}

0801349a <RegionIN865NewChannelReq>:

uint8_t RegionIN865NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801349a:	b590      	push	{r4, r7, lr}
 801349c:	b087      	sub	sp, #28
 801349e:	af00      	add	r7, sp, #0
 80134a0:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80134a2:	2417      	movs	r4, #23
 80134a4:	193b      	adds	r3, r7, r4
 80134a6:	2203      	movs	r2, #3
 80134a8:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d118      	bne.n	80134e6 <RegionIN865NewChannelReq+0x4c>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	791b      	ldrb	r3, [r3, #4]
 80134b8:	b25b      	sxtb	r3, r3
 80134ba:	b2da      	uxtb	r2, r3
 80134bc:	2108      	movs	r1, #8
 80134be:	187b      	adds	r3, r7, r1
 80134c0:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionIN865ChannelsRemove( &channelRemove ) == false )
 80134c2:	187b      	adds	r3, r7, r1
 80134c4:	0018      	movs	r0, r3
 80134c6:	f000 fa41 	bl	801394c <RegionIN865ChannelsRemove>
 80134ca:	0003      	movs	r3, r0
 80134cc:	001a      	movs	r2, r3
 80134ce:	2301      	movs	r3, #1
 80134d0:	4053      	eors	r3, r2
 80134d2:	b2db      	uxtb	r3, r3
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d041      	beq.n	801355c <RegionIN865NewChannelReq+0xc2>
        {
            status &= 0xFC;
 80134d8:	193b      	adds	r3, r7, r4
 80134da:	193a      	adds	r2, r7, r4
 80134dc:	7812      	ldrb	r2, [r2, #0]
 80134de:	2103      	movs	r1, #3
 80134e0:	438a      	bics	r2, r1
 80134e2:	701a      	strb	r2, [r3, #0]
 80134e4:	e03a      	b.n	801355c <RegionIN865NewChannelReq+0xc2>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	681a      	ldr	r2, [r3, #0]
 80134ea:	210c      	movs	r1, #12
 80134ec:	187b      	adds	r3, r7, r1
 80134ee:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	791b      	ldrb	r3, [r3, #4]
 80134f4:	b25b      	sxtb	r3, r3
 80134f6:	b2da      	uxtb	r2, r3
 80134f8:	187b      	adds	r3, r7, r1
 80134fa:	711a      	strb	r2, [r3, #4]

        switch( RegionIN865ChannelAdd( &channelAdd ) )
 80134fc:	187b      	adds	r3, r7, r1
 80134fe:	0018      	movs	r0, r3
 8013500:	f000 f96c 	bl	80137dc <RegionIN865ChannelAdd>
 8013504:	0003      	movs	r3, r0
 8013506:	2b06      	cmp	r3, #6
 8013508:	d017      	beq.n	801353a <RegionIN865NewChannelReq+0xa0>
 801350a:	dc1e      	bgt.n	801354a <RegionIN865NewChannelReq+0xb0>
 801350c:	2b05      	cmp	r3, #5
 801350e:	d00c      	beq.n	801352a <RegionIN865NewChannelReq+0x90>
 8013510:	dc1b      	bgt.n	801354a <RegionIN865NewChannelReq+0xb0>
 8013512:	2b00      	cmp	r3, #0
 8013514:	d021      	beq.n	801355a <RegionIN865NewChannelReq+0xc0>
 8013516:	2b04      	cmp	r3, #4
 8013518:	d117      	bne.n	801354a <RegionIN865NewChannelReq+0xb0>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 801351a:	2217      	movs	r2, #23
 801351c:	18bb      	adds	r3, r7, r2
 801351e:	18ba      	adds	r2, r7, r2
 8013520:	7812      	ldrb	r2, [r2, #0]
 8013522:	2101      	movs	r1, #1
 8013524:	438a      	bics	r2, r1
 8013526:	701a      	strb	r2, [r3, #0]
                break;
 8013528:	e018      	b.n	801355c <RegionIN865NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801352a:	2217      	movs	r2, #23
 801352c:	18bb      	adds	r3, r7, r2
 801352e:	18ba      	adds	r2, r7, r2
 8013530:	7812      	ldrb	r2, [r2, #0]
 8013532:	2102      	movs	r1, #2
 8013534:	438a      	bics	r2, r1
 8013536:	701a      	strb	r2, [r3, #0]
                break;
 8013538:	e010      	b.n	801355c <RegionIN865NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 801353a:	2217      	movs	r2, #23
 801353c:	18bb      	adds	r3, r7, r2
 801353e:	18ba      	adds	r2, r7, r2
 8013540:	7812      	ldrb	r2, [r2, #0]
 8013542:	2103      	movs	r1, #3
 8013544:	438a      	bics	r2, r1
 8013546:	701a      	strb	r2, [r3, #0]
                break;
 8013548:	e008      	b.n	801355c <RegionIN865NewChannelReq+0xc2>
            }
            default:
            {
                status &= 0xFC;
 801354a:	2217      	movs	r2, #23
 801354c:	18bb      	adds	r3, r7, r2
 801354e:	18ba      	adds	r2, r7, r2
 8013550:	7812      	ldrb	r2, [r2, #0]
 8013552:	2103      	movs	r1, #3
 8013554:	438a      	bics	r2, r1
 8013556:	701a      	strb	r2, [r3, #0]
                break;
 8013558:	e000      	b.n	801355c <RegionIN865NewChannelReq+0xc2>
                break;
 801355a:	46c0      	nop			@ (mov r8, r8)
            }
        }
    }

    return status;
 801355c:	2317      	movs	r3, #23
 801355e:	18fb      	adds	r3, r7, r3
 8013560:	781b      	ldrb	r3, [r3, #0]
}
 8013562:	0018      	movs	r0, r3
 8013564:	46bd      	mov	sp, r7
 8013566:	b007      	add	sp, #28
 8013568:	bd90      	pop	{r4, r7, pc}

0801356a <RegionIN865TxParamSetupReq>:

int8_t RegionIN865TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801356a:	b580      	push	{r7, lr}
 801356c:	b082      	sub	sp, #8
 801356e:	af00      	add	r7, sp, #0
 8013570:	6078      	str	r0, [r7, #4]
    return -1;
 8013572:	2301      	movs	r3, #1
 8013574:	425b      	negs	r3, r3
}
 8013576:	0018      	movs	r0, r3
 8013578:	46bd      	mov	sp, r7
 801357a:	b002      	add	sp, #8
 801357c:	bd80      	pop	{r7, pc}
	...

08013580 <RegionIN865DlChannelReq>:

uint8_t RegionIN865DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8013580:	b590      	push	{r4, r7, lr}
 8013582:	b085      	sub	sp, #20
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8013588:	240f      	movs	r4, #15
 801358a:	193b      	adds	r3, r7, r4
 801358c:	2203      	movs	r2, #3
 801358e:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	685b      	ldr	r3, [r3, #4]
 8013594:	0018      	movs	r0, r3
 8013596:	f7fe ffe7 	bl	8012568 <VerifyRfFreq>
 801359a:	0003      	movs	r3, r0
 801359c:	001a      	movs	r2, r3
 801359e:	2301      	movs	r3, #1
 80135a0:	4053      	eors	r3, r2
 80135a2:	b2db      	uxtb	r3, r3
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d005      	beq.n	80135b4 <RegionIN865DlChannelReq+0x34>
    {
        status &= 0xFE;
 80135a8:	193b      	adds	r3, r7, r4
 80135aa:	193a      	adds	r2, r7, r4
 80135ac:	7812      	ldrb	r2, [r2, #0]
 80135ae:	2101      	movs	r1, #1
 80135b0:	438a      	bics	r2, r1
 80135b2:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	781b      	ldrb	r3, [r3, #0]
 80135b8:	0019      	movs	r1, r3
 80135ba:	4a14      	ldr	r2, [pc, #80]	@ (801360c <RegionIN865DlChannelReq+0x8c>)
 80135bc:	000b      	movs	r3, r1
 80135be:	005b      	lsls	r3, r3, #1
 80135c0:	185b      	adds	r3, r3, r1
 80135c2:	009b      	lsls	r3, r3, #2
 80135c4:	589b      	ldr	r3, [r3, r2]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d106      	bne.n	80135d8 <RegionIN865DlChannelReq+0x58>
    {
        status &= 0xFD;
 80135ca:	220f      	movs	r2, #15
 80135cc:	18bb      	adds	r3, r7, r2
 80135ce:	18ba      	adds	r2, r7, r2
 80135d0:	7812      	ldrb	r2, [r2, #0]
 80135d2:	2102      	movs	r1, #2
 80135d4:	438a      	bics	r2, r1
 80135d6:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80135d8:	230f      	movs	r3, #15
 80135da:	18fb      	adds	r3, r7, r3
 80135dc:	781b      	ldrb	r3, [r3, #0]
 80135de:	2b03      	cmp	r3, #3
 80135e0:	d10c      	bne.n	80135fc <RegionIN865DlChannelReq+0x7c>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	781b      	ldrb	r3, [r3, #0]
 80135e6:	0018      	movs	r0, r3
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	685a      	ldr	r2, [r3, #4]
 80135ec:	4907      	ldr	r1, [pc, #28]	@ (801360c <RegionIN865DlChannelReq+0x8c>)
 80135ee:	0003      	movs	r3, r0
 80135f0:	005b      	lsls	r3, r3, #1
 80135f2:	181b      	adds	r3, r3, r0
 80135f4:	009b      	lsls	r3, r3, #2
 80135f6:	18cb      	adds	r3, r1, r3
 80135f8:	3304      	adds	r3, #4
 80135fa:	601a      	str	r2, [r3, #0]
    }

    return status;
 80135fc:	230f      	movs	r3, #15
 80135fe:	18fb      	adds	r3, r7, r3
 8013600:	781b      	ldrb	r3, [r3, #0]
}
 8013602:	0018      	movs	r0, r3
 8013604:	46bd      	mov	sp, r7
 8013606:	b005      	add	sp, #20
 8013608:	bd90      	pop	{r4, r7, pc}
 801360a:	46c0      	nop			@ (mov r8, r8)
 801360c:	20001184 	.word	0x20001184

08013610 <RegionIN865AlternateDr>:

int8_t RegionIN865AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b082      	sub	sp, #8
 8013614:	af00      	add	r7, sp, #0
 8013616:	0002      	movs	r2, r0
 8013618:	1dfb      	adds	r3, r7, #7
 801361a:	701a      	strb	r2, [r3, #0]
 801361c:	1dbb      	adds	r3, r7, #6
 801361e:	1c0a      	adds	r2, r1, #0
 8013620:	701a      	strb	r2, [r3, #0]
    return currentDr;
 8013622:	1dfb      	adds	r3, r7, #7
 8013624:	781b      	ldrb	r3, [r3, #0]
 8013626:	b25b      	sxtb	r3, r3
}
 8013628:	0018      	movs	r0, r3
 801362a:	46bd      	mov	sp, r7
 801362c:	b002      	add	sp, #8
 801362e:	bd80      	pop	{r7, pc}

08013630 <RegionIN865CalcBackOff>:

void RegionIN865CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 8013630:	b580      	push	{r7, lr}
 8013632:	b088      	sub	sp, #32
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 8013638:	210c      	movs	r1, #12
 801363a:	187b      	adds	r3, r7, r1
 801363c:	4a12      	ldr	r2, [pc, #72]	@ (8013688 <RegionIN865CalcBackOff+0x58>)
 801363e:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 8013640:	187b      	adds	r3, r7, r1
 8013642:	4a12      	ldr	r2, [pc, #72]	@ (801368c <RegionIN865CalcBackOff+0x5c>)
 8013644:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	785a      	ldrb	r2, [r3, #1]
 801364a:	187b      	adds	r3, r7, r1
 801364c:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	781a      	ldrb	r2, [r3, #0]
 8013652:	187b      	adds	r3, r7, r1
 8013654:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	789a      	ldrb	r2, [r3, #2]
 801365a:	187b      	adds	r3, r7, r1
 801365c:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	78da      	ldrb	r2, [r3, #3]
 8013662:	187b      	adds	r3, r7, r1
 8013664:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	685a      	ldr	r2, [r3, #4]
 801366a:	187b      	adds	r3, r7, r1
 801366c:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	689a      	ldr	r2, [r3, #8]
 8013672:	187b      	adds	r3, r7, r1
 8013674:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 8013676:	187b      	adds	r3, r7, r1
 8013678:	0018      	movs	r0, r3
 801367a:	f7fe fe70 	bl	801235e <RegionCommonCalcBackOff>
}
 801367e:	46c0      	nop			@ (mov r8, r8)
 8013680:	46bd      	mov	sp, r7
 8013682:	b008      	add	sp, #32
 8013684:	bd80      	pop	{r7, pc}
 8013686:	46c0      	nop			@ (mov r8, r8)
 8013688:	20001184 	.word	0x20001184
 801368c:	20001244 	.word	0x20001244

08013690 <RegionIN865NextChannel>:

LoRaMacStatus_t RegionIN865NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8013690:	b5b0      	push	{r4, r5, r7, lr}
 8013692:	b090      	sub	sp, #64	@ 0x40
 8013694:	af04      	add	r7, sp, #16
 8013696:	60f8      	str	r0, [r7, #12]
 8013698:	60b9      	str	r1, [r7, #8]
 801369a:	607a      	str	r2, [r7, #4]
 801369c:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 801369e:	232f      	movs	r3, #47	@ 0x2f
 80136a0:	18fb      	adds	r3, r7, r3
 80136a2:	2200      	movs	r2, #0
 80136a4:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 80136a6:	2323      	movs	r3, #35	@ 0x23
 80136a8:	18fb      	adds	r3, r7, r3
 80136aa:	2200      	movs	r2, #0
 80136ac:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[IN865_MAX_NB_CHANNELS] = { 0 };
 80136ae:	2310      	movs	r3, #16
 80136b0:	18fb      	adds	r3, r7, r3
 80136b2:	2200      	movs	r2, #0
 80136b4:	601a      	str	r2, [r3, #0]
 80136b6:	3304      	adds	r3, #4
 80136b8:	220c      	movs	r2, #12
 80136ba:	2100      	movs	r1, #0
 80136bc:	0018      	movs	r0, r3
 80136be:	f006 fa05 	bl	8019acc <memset>
    TimerTime_t nextTxDelay = 0;
 80136c2:	2300      	movs	r3, #0
 80136c4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 80136c6:	4b42      	ldr	r3, [pc, #264]	@ (80137d0 <RegionIN865NextChannel+0x140>)
 80136c8:	2201      	movs	r2, #1
 80136ca:	2100      	movs	r1, #0
 80136cc:	0018      	movs	r0, r3
 80136ce:	f7fe fb02 	bl	8011cd6 <RegionCommonCountChannels>
 80136d2:	1e03      	subs	r3, r0, #0
 80136d4:	d108      	bne.n	80136e8 <RegionIN865NextChannel+0x58>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80136d6:	4b3f      	ldr	r3, [pc, #252]	@ (80137d4 <RegionIN865NextChannel+0x144>)
 80136d8:	22d0      	movs	r2, #208	@ 0xd0
 80136da:	5a9b      	ldrh	r3, [r3, r2]
 80136dc:	2207      	movs	r2, #7
 80136de:	4313      	orrs	r3, r2
 80136e0:	b299      	uxth	r1, r3
 80136e2:	4b3c      	ldr	r3, [pc, #240]	@ (80137d4 <RegionIN865NextChannel+0x144>)
 80136e4:	22d0      	movs	r2, #208	@ 0xd0
 80136e6:	5299      	strh	r1, [r3, r2]
    }

    TimerTime_t elapsed = TimerGetElapsedTime( nextChanParams->LastAggrTx );
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	685b      	ldr	r3, [r3, #4]
 80136ec:	0018      	movs	r0, r3
 80136ee:	f001 fe08 	bl	8015302 <TimerGetElapsedTime>
 80136f2:	0003      	movs	r3, r0
 80136f4:	627b      	str	r3, [r7, #36]	@ 0x24
    if( ( nextChanParams->LastAggrTx == 0 ) || ( nextChanParams->AggrTimeOff <= elapsed ) )
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	685b      	ldr	r3, [r3, #4]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d004      	beq.n	8013708 <RegionIN865NextChannel+0x78>
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013704:	429a      	cmp	r2, r3
 8013706:	d324      	bcc.n	8013752 <RegionIN865NextChannel+0xc2>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	2200      	movs	r2, #0
 801370c:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, IN865_MAX_NB_BANDS );
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	7a58      	ldrb	r0, [r3, #9]
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	7a99      	ldrb	r1, [r3, #10]
 8013716:	4a30      	ldr	r2, [pc, #192]	@ (80137d8 <RegionIN865NextChannel+0x148>)
 8013718:	2301      	movs	r3, #1
 801371a:	f7fe fb67 	bl	8011dec <RegionCommonUpdateBandTimeOff>
 801371e:	0003      	movs	r3, r0
 8013720:	62bb      	str	r3, [r7, #40]	@ 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	7a58      	ldrb	r0, [r3, #9]
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	7a1b      	ldrb	r3, [r3, #8]
 801372a:	b25b      	sxtb	r3, r3
 801372c:	b2d9      	uxtb	r1, r3
 801372e:	232f      	movs	r3, #47	@ 0x2f
 8013730:	18fc      	adds	r4, r7, r3
 8013732:	4d28      	ldr	r5, [pc, #160]	@ (80137d4 <RegionIN865NextChannel+0x144>)
 8013734:	4a26      	ldr	r2, [pc, #152]	@ (80137d0 <RegionIN865NextChannel+0x140>)
 8013736:	2323      	movs	r3, #35	@ 0x23
 8013738:	18fb      	adds	r3, r7, r3
 801373a:	9302      	str	r3, [sp, #8]
 801373c:	2310      	movs	r3, #16
 801373e:	18fb      	adds	r3, r7, r3
 8013740:	9301      	str	r3, [sp, #4]
 8013742:	4b25      	ldr	r3, [pc, #148]	@ (80137d8 <RegionIN865NextChannel+0x148>)
 8013744:	9300      	str	r3, [sp, #0]
 8013746:	002b      	movs	r3, r5
 8013748:	f7fe ff36 	bl	80125b8 <CountNbOfEnabledChannels>
 801374c:	0003      	movs	r3, r0
 801374e:	7023      	strb	r3, [r4, #0]
 8013750:	e00b      	b.n	801376a <RegionIN865NextChannel+0xda>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 8013752:	2123      	movs	r1, #35	@ 0x23
 8013754:	187b      	adds	r3, r7, r1
 8013756:	781b      	ldrb	r3, [r3, #0]
 8013758:	3301      	adds	r3, #1
 801375a:	b2da      	uxtb	r2, r3
 801375c:	187b      	adds	r3, r7, r1
 801375e:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - elapsed;
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	681a      	ldr	r2, [r3, #0]
 8013764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013766:	1ad3      	subs	r3, r2, r3
 8013768:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if( nbEnabledChannels > 0 )
 801376a:	222f      	movs	r2, #47	@ 0x2f
 801376c:	18bb      	adds	r3, r7, r2
 801376e:	781b      	ldrb	r3, [r3, #0]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d011      	beq.n	8013798 <RegionIN865NextChannel+0x108>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8013774:	18bb      	adds	r3, r7, r2
 8013776:	781b      	ldrb	r3, [r3, #0]
 8013778:	3b01      	subs	r3, #1
 801377a:	0019      	movs	r1, r3
 801377c:	2000      	movs	r0, #0
 801377e:	f001 ff75 	bl	801566c <randr>
 8013782:	0002      	movs	r2, r0
 8013784:	2310      	movs	r3, #16
 8013786:	18fb      	adds	r3, r7, r3
 8013788:	5c9a      	ldrb	r2, [r3, r2]
 801378a:	68bb      	ldr	r3, [r7, #8]
 801378c:	701a      	strb	r2, [r3, #0]

        *time = 0;
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	2200      	movs	r2, #0
 8013792:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8013794:	2300      	movs	r3, #0
 8013796:	e016      	b.n	80137c6 <RegionIN865NextChannel+0x136>
    }
    else
    {
        if( delayTx > 0 )
 8013798:	2323      	movs	r3, #35	@ 0x23
 801379a:	18fb      	adds	r3, r7, r3
 801379c:	781b      	ldrb	r3, [r3, #0]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d004      	beq.n	80137ac <RegionIN865NextChannel+0x11c>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80137a6:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80137a8:	230b      	movs	r3, #11
 80137aa:	e00c      	b.n	80137c6 <RegionIN865NextChannel+0x136>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80137ac:	4b09      	ldr	r3, [pc, #36]	@ (80137d4 <RegionIN865NextChannel+0x144>)
 80137ae:	22d0      	movs	r2, #208	@ 0xd0
 80137b0:	5a9b      	ldrh	r3, [r3, r2]
 80137b2:	2207      	movs	r2, #7
 80137b4:	4313      	orrs	r3, r2
 80137b6:	b299      	uxth	r1, r3
 80137b8:	4b06      	ldr	r3, [pc, #24]	@ (80137d4 <RegionIN865NextChannel+0x144>)
 80137ba:	22d0      	movs	r2, #208	@ 0xd0
 80137bc:	5299      	strh	r1, [r3, r2]
        *time = 0;
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	2200      	movs	r2, #0
 80137c2:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80137c4:	230c      	movs	r3, #12
    }
}
 80137c6:	0018      	movs	r0, r3
 80137c8:	46bd      	mov	sp, r7
 80137ca:	b00c      	add	sp, #48	@ 0x30
 80137cc:	bdb0      	pop	{r4, r5, r7, pc}
 80137ce:	46c0      	nop			@ (mov r8, r8)
 80137d0:	20001254 	.word	0x20001254
 80137d4:	20001184 	.word	0x20001184
 80137d8:	20001244 	.word	0x20001244

080137dc <RegionIN865ChannelAdd>:

LoRaMacStatus_t RegionIN865ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80137dc:	b590      	push	{r4, r7, lr}
 80137de:	b085      	sub	sp, #20
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
    bool drInvalid = false;
 80137e4:	230f      	movs	r3, #15
 80137e6:	18fb      	adds	r3, r7, r3
 80137e8:	2200      	movs	r2, #0
 80137ea:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 80137ec:	230e      	movs	r3, #14
 80137ee:	18fb      	adds	r3, r7, r3
 80137f0:	2200      	movs	r2, #0
 80137f2:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 80137f4:	210d      	movs	r1, #13
 80137f6:	187b      	adds	r3, r7, r1
 80137f8:	687a      	ldr	r2, [r7, #4]
 80137fa:	7912      	ldrb	r2, [r2, #4]
 80137fc:	701a      	strb	r2, [r3, #0]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 80137fe:	187b      	adds	r3, r7, r1
 8013800:	781b      	ldrb	r3, [r3, #0]
 8013802:	2b02      	cmp	r3, #2
 8013804:	d801      	bhi.n	801380a <RegionIN865ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8013806:	2306      	movs	r3, #6
 8013808:	e09a      	b.n	8013940 <RegionIN865ChannelAdd+0x164>
    }

    if( id >= IN865_MAX_NB_CHANNELS )
 801380a:	230d      	movs	r3, #13
 801380c:	18fb      	adds	r3, r7, r3
 801380e:	781b      	ldrb	r3, [r3, #0]
 8013810:	2b0f      	cmp	r3, #15
 8013812:	d901      	bls.n	8013818 <RegionIN865ChannelAdd+0x3c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013814:	2303      	movs	r3, #3
 8013816:	e093      	b.n	8013940 <RegionIN865ChannelAdd+0x164>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	7a1b      	ldrb	r3, [r3, #8]
 801381e:	011b      	lsls	r3, r3, #4
 8013820:	b25b      	sxtb	r3, r3
 8013822:	111b      	asrs	r3, r3, #4
 8013824:	b25b      	sxtb	r3, r3
 8013826:	2207      	movs	r2, #7
 8013828:	2100      	movs	r1, #0
 801382a:	0018      	movs	r0, r3
 801382c:	f7fe f9eb 	bl	8011c06 <RegionCommonValueInRange>
 8013830:	1e03      	subs	r3, r0, #0
 8013832:	d103      	bne.n	801383c <RegionIN865ChannelAdd+0x60>
    {
        drInvalid = true;
 8013834:	230f      	movs	r3, #15
 8013836:	18fb      	adds	r3, r7, r3
 8013838:	2201      	movs	r2, #1
 801383a:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	7a1b      	ldrb	r3, [r3, #8]
 8013842:	b25b      	sxtb	r3, r3
 8013844:	111b      	asrs	r3, r3, #4
 8013846:	b25b      	sxtb	r3, r3
 8013848:	2207      	movs	r2, #7
 801384a:	2100      	movs	r1, #0
 801384c:	0018      	movs	r0, r3
 801384e:	f7fe f9da 	bl	8011c06 <RegionCommonValueInRange>
 8013852:	1e03      	subs	r3, r0, #0
 8013854:	d103      	bne.n	801385e <RegionIN865ChannelAdd+0x82>
    {
        drInvalid = true;
 8013856:	230f      	movs	r3, #15
 8013858:	18fb      	adds	r3, r7, r3
 801385a:	2201      	movs	r2, #1
 801385c:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	7a1b      	ldrb	r3, [r3, #8]
 8013864:	011b      	lsls	r3, r3, #4
 8013866:	b25b      	sxtb	r3, r3
 8013868:	111b      	asrs	r3, r3, #4
 801386a:	b25a      	sxtb	r2, r3
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	7a1b      	ldrb	r3, [r3, #8]
 8013872:	b25b      	sxtb	r3, r3
 8013874:	111b      	asrs	r3, r3, #4
 8013876:	b25b      	sxtb	r3, r3
 8013878:	429a      	cmp	r2, r3
 801387a:	dd03      	ble.n	8013884 <RegionIN865ChannelAdd+0xa8>
    {
        drInvalid = true;
 801387c:	230f      	movs	r3, #15
 801387e:	18fb      	adds	r3, r7, r3
 8013880:	2201      	movs	r2, #1
 8013882:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 8013884:	240e      	movs	r4, #14
 8013886:	193b      	adds	r3, r7, r4
 8013888:	781b      	ldrb	r3, [r3, #0]
 801388a:	2201      	movs	r2, #1
 801388c:	4053      	eors	r3, r2
 801388e:	b2db      	uxtb	r3, r3
 8013890:	2b00      	cmp	r3, #0
 8013892:	d00f      	beq.n	80138b4 <RegionIN865ChannelAdd+0xd8>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	0018      	movs	r0, r3
 801389c:	f7fe fe64 	bl	8012568 <VerifyRfFreq>
 80138a0:	0003      	movs	r3, r0
 80138a2:	001a      	movs	r2, r3
 80138a4:	2301      	movs	r3, #1
 80138a6:	4053      	eors	r3, r2
 80138a8:	b2db      	uxtb	r3, r3
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d002      	beq.n	80138b4 <RegionIN865ChannelAdd+0xd8>
        {
            freqInvalid = true;
 80138ae:	193b      	adds	r3, r7, r4
 80138b0:	2201      	movs	r2, #1
 80138b2:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80138b4:	230f      	movs	r3, #15
 80138b6:	18fb      	adds	r3, r7, r3
 80138b8:	781b      	ldrb	r3, [r3, #0]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d006      	beq.n	80138cc <RegionIN865ChannelAdd+0xf0>
 80138be:	230e      	movs	r3, #14
 80138c0:	18fb      	adds	r3, r7, r3
 80138c2:	781b      	ldrb	r3, [r3, #0]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d001      	beq.n	80138cc <RegionIN865ChannelAdd+0xf0>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80138c8:	2306      	movs	r3, #6
 80138ca:	e039      	b.n	8013940 <RegionIN865ChannelAdd+0x164>
    }
    if( drInvalid == true )
 80138cc:	230f      	movs	r3, #15
 80138ce:	18fb      	adds	r3, r7, r3
 80138d0:	781b      	ldrb	r3, [r3, #0]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d001      	beq.n	80138da <RegionIN865ChannelAdd+0xfe>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80138d6:	2305      	movs	r3, #5
 80138d8:	e032      	b.n	8013940 <RegionIN865ChannelAdd+0x164>
    }
    if( freqInvalid == true )
 80138da:	230e      	movs	r3, #14
 80138dc:	18fb      	adds	r3, r7, r3
 80138de:	781b      	ldrb	r3, [r3, #0]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d001      	beq.n	80138e8 <RegionIN865ChannelAdd+0x10c>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80138e4:	2304      	movs	r3, #4
 80138e6:	e02b      	b.n	8013940 <RegionIN865ChannelAdd+0x164>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 80138e8:	240d      	movs	r4, #13
 80138ea:	193b      	adds	r3, r7, r4
 80138ec:	781a      	ldrb	r2, [r3, #0]
 80138ee:	0013      	movs	r3, r2
 80138f0:	005b      	lsls	r3, r3, #1
 80138f2:	189b      	adds	r3, r3, r2
 80138f4:	009b      	lsls	r3, r3, #2
 80138f6:	4a14      	ldr	r2, [pc, #80]	@ (8013948 <RegionIN865ChannelAdd+0x16c>)
 80138f8:	1898      	adds	r0, r3, r2
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	220c      	movs	r2, #12
 8013900:	0019      	movs	r1, r3
 8013902:	f001 fec9 	bl	8015698 <memcpy1>
    NvmCtx.Channels[id].Band = 0;
 8013906:	0020      	movs	r0, r4
 8013908:	183b      	adds	r3, r7, r0
 801390a:	781a      	ldrb	r2, [r3, #0]
 801390c:	490e      	ldr	r1, [pc, #56]	@ (8013948 <RegionIN865ChannelAdd+0x16c>)
 801390e:	0013      	movs	r3, r2
 8013910:	005b      	lsls	r3, r3, #1
 8013912:	189b      	adds	r3, r3, r2
 8013914:	009b      	lsls	r3, r3, #2
 8013916:	18cb      	adds	r3, r1, r3
 8013918:	3309      	adds	r3, #9
 801391a:	2200      	movs	r2, #0
 801391c:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 801391e:	4b0a      	ldr	r3, [pc, #40]	@ (8013948 <RegionIN865ChannelAdd+0x16c>)
 8013920:	22d0      	movs	r2, #208	@ 0xd0
 8013922:	5a9b      	ldrh	r3, [r3, r2]
 8013924:	b21a      	sxth	r2, r3
 8013926:	183b      	adds	r3, r7, r0
 8013928:	781b      	ldrb	r3, [r3, #0]
 801392a:	2101      	movs	r1, #1
 801392c:	4099      	lsls	r1, r3
 801392e:	000b      	movs	r3, r1
 8013930:	b21b      	sxth	r3, r3
 8013932:	4313      	orrs	r3, r2
 8013934:	b21b      	sxth	r3, r3
 8013936:	b299      	uxth	r1, r3
 8013938:	4b03      	ldr	r3, [pc, #12]	@ (8013948 <RegionIN865ChannelAdd+0x16c>)
 801393a:	22d0      	movs	r2, #208	@ 0xd0
 801393c:	5299      	strh	r1, [r3, r2]
    return LORAMAC_STATUS_OK;
 801393e:	2300      	movs	r3, #0
}
 8013940:	0018      	movs	r0, r3
 8013942:	46bd      	mov	sp, r7
 8013944:	b005      	add	sp, #20
 8013946:	bd90      	pop	{r4, r7, pc}
 8013948:	20001184 	.word	0x20001184

0801394c <RegionIN865ChannelsRemove>:

bool RegionIN865ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 801394c:	b590      	push	{r4, r7, lr}
 801394e:	b087      	sub	sp, #28
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8013954:	2117      	movs	r1, #23
 8013956:	187b      	adds	r3, r7, r1
 8013958:	687a      	ldr	r2, [r7, #4]
 801395a:	7812      	ldrb	r2, [r2, #0]
 801395c:	701a      	strb	r2, [r3, #0]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 801395e:	187b      	adds	r3, r7, r1
 8013960:	781b      	ldrb	r3, [r3, #0]
 8013962:	2b02      	cmp	r3, #2
 8013964:	d801      	bhi.n	801396a <RegionIN865ChannelsRemove+0x1e>
    {
        return false;
 8013966:	2300      	movs	r3, #0
 8013968:	e015      	b.n	8013996 <RegionIN865ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801396a:	2417      	movs	r4, #23
 801396c:	193b      	adds	r3, r7, r4
 801396e:	781a      	ldrb	r2, [r3, #0]
 8013970:	490b      	ldr	r1, [pc, #44]	@ (80139a0 <RegionIN865ChannelsRemove+0x54>)
 8013972:	0013      	movs	r3, r2
 8013974:	005b      	lsls	r3, r3, #1
 8013976:	189b      	adds	r3, r3, r2
 8013978:	009b      	lsls	r3, r3, #2
 801397a:	18cb      	adds	r3, r1, r3
 801397c:	220c      	movs	r2, #12
 801397e:	2100      	movs	r1, #0
 8013980:	0018      	movs	r0, r3
 8013982:	f006 f8a3 	bl	8019acc <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, IN865_MAX_NB_CHANNELS );
 8013986:	193b      	adds	r3, r7, r4
 8013988:	7819      	ldrb	r1, [r3, #0]
 801398a:	4b06      	ldr	r3, [pc, #24]	@ (80139a4 <RegionIN865ChannelsRemove+0x58>)
 801398c:	2210      	movs	r2, #16
 801398e:	0018      	movs	r0, r3
 8013990:	f7fe f95f 	bl	8011c52 <RegionCommonChanDisable>
 8013994:	0003      	movs	r3, r0
}
 8013996:	0018      	movs	r0, r3
 8013998:	46bd      	mov	sp, r7
 801399a:	b007      	add	sp, #28
 801399c:	bd90      	pop	{r4, r7, pc}
 801399e:	46c0      	nop			@ (mov r8, r8)
 80139a0:	20001184 	.word	0x20001184
 80139a4:	20001254 	.word	0x20001254

080139a8 <RegionIN865SetContinuousWave>:

void RegionIN865SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 80139a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139aa:	b085      	sub	sp, #20
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	2002      	movs	r0, #2
 80139b4:	5618      	ldrsb	r0, [r3, r0]
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	781b      	ldrb	r3, [r3, #0]
 80139ba:	0019      	movs	r1, r3
 80139bc:	4a21      	ldr	r2, [pc, #132]	@ (8013a44 <RegionIN865SetContinuousWave+0x9c>)
 80139be:	000b      	movs	r3, r1
 80139c0:	005b      	lsls	r3, r3, #1
 80139c2:	185b      	adds	r3, r3, r1
 80139c4:	009b      	lsls	r3, r3, #2
 80139c6:	18d3      	adds	r3, r2, r3
 80139c8:	3309      	adds	r3, #9
 80139ca:	781b      	ldrb	r3, [r3, #0]
 80139cc:	4a1d      	ldr	r2, [pc, #116]	@ (8013a44 <RegionIN865SetContinuousWave+0x9c>)
 80139ce:	330c      	adds	r3, #12
 80139d0:	011b      	lsls	r3, r3, #4
 80139d2:	18d3      	adds	r3, r2, r3
 80139d4:	3302      	adds	r3, #2
 80139d6:	2100      	movs	r1, #0
 80139d8:	5659      	ldrsb	r1, [r3, r1]
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	2201      	movs	r2, #1
 80139de:	569a      	ldrsb	r2, [r3, r2]
 80139e0:	260f      	movs	r6, #15
 80139e2:	19bc      	adds	r4, r7, r6
 80139e4:	4b18      	ldr	r3, [pc, #96]	@ (8013a48 <RegionIN865SetContinuousWave+0xa0>)
 80139e6:	f7fe fd97 	bl	8012518 <LimitTxPower>
 80139ea:	0003      	movs	r3, r0
 80139ec:	7023      	strb	r3, [r4, #0]
    int8_t phyTxPower = 0;
 80139ee:	200e      	movs	r0, #14
 80139f0:	183b      	adds	r3, r7, r0
 80139f2:	2200      	movs	r2, #0
 80139f4:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	781b      	ldrb	r3, [r3, #0]
 80139fa:	0019      	movs	r1, r3
 80139fc:	4a11      	ldr	r2, [pc, #68]	@ (8013a44 <RegionIN865SetContinuousWave+0x9c>)
 80139fe:	000b      	movs	r3, r1
 8013a00:	005b      	lsls	r3, r3, #1
 8013a02:	185b      	adds	r3, r3, r1
 8013a04:	009b      	lsls	r3, r3, #2
 8013a06:	589b      	ldr	r3, [r3, r2]
 8013a08:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	6859      	ldr	r1, [r3, #4]
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	689a      	ldr	r2, [r3, #8]
 8013a12:	0005      	movs	r5, r0
 8013a14:	183c      	adds	r4, r7, r0
 8013a16:	19bb      	adds	r3, r7, r6
 8013a18:	781b      	ldrb	r3, [r3, #0]
 8013a1a:	b25b      	sxtb	r3, r3
 8013a1c:	0018      	movs	r0, r3
 8013a1e:	f7fe fc65 	bl	80122ec <RegionCommonComputeTxPower>
 8013a22:	0003      	movs	r3, r0
 8013a24:	7023      	strb	r3, [r4, #0]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8013a26:	4b09      	ldr	r3, [pc, #36]	@ (8013a4c <RegionIN865SetContinuousWave+0xa4>)
 8013a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a2a:	687a      	ldr	r2, [r7, #4]
 8013a2c:	8994      	ldrh	r4, [r2, #12]
 8013a2e:	197a      	adds	r2, r7, r5
 8013a30:	2100      	movs	r1, #0
 8013a32:	5651      	ldrsb	r1, [r2, r1]
 8013a34:	68b8      	ldr	r0, [r7, #8]
 8013a36:	0022      	movs	r2, r4
 8013a38:	4798      	blx	r3
}
 8013a3a:	46c0      	nop			@ (mov r8, r8)
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	b005      	add	sp, #20
 8013a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a42:	46c0      	nop			@ (mov r8, r8)
 8013a44:	20001184 	.word	0x20001184
 8013a48:	20001254 	.word	0x20001254
 8013a4c:	0801adcc 	.word	0x0801adcc

08013a50 <RegionIN865ApplyDrOffset>:

uint8_t RegionIN865ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8013a50:	b590      	push	{r4, r7, lr}
 8013a52:	b083      	sub	sp, #12
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	0004      	movs	r4, r0
 8013a58:	0008      	movs	r0, r1
 8013a5a:	0011      	movs	r1, r2
 8013a5c:	1dfb      	adds	r3, r7, #7
 8013a5e:	1c22      	adds	r2, r4, #0
 8013a60:	701a      	strb	r2, [r3, #0]
 8013a62:	1dbb      	adds	r3, r7, #6
 8013a64:	1c02      	adds	r2, r0, #0
 8013a66:	701a      	strb	r2, [r3, #0]
 8013a68:	1d7b      	adds	r3, r7, #5
 8013a6a:	1c0a      	adds	r2, r1, #0
 8013a6c:	701a      	strb	r2, [r3, #0]
    // Apply offset formula
    return MIN( DR_5, MAX( DR_0, dr - EffectiveRx1DrOffsetIN865[drOffset] ) );
 8013a6e:	1dbb      	adds	r3, r7, #6
 8013a70:	781b      	ldrb	r3, [r3, #0]
 8013a72:	b25b      	sxtb	r3, r3
 8013a74:	1d7a      	adds	r2, r7, #5
 8013a76:	7812      	ldrb	r2, [r2, #0]
 8013a78:	b252      	sxtb	r2, r2
 8013a7a:	490b      	ldr	r1, [pc, #44]	@ (8013aa8 <RegionIN865ApplyDrOffset+0x58>)
 8013a7c:	568a      	ldrsb	r2, [r1, r2]
 8013a7e:	1a9b      	subs	r3, r3, r2
 8013a80:	2b05      	cmp	r3, #5
 8013a82:	dc0c      	bgt.n	8013a9e <RegionIN865ApplyDrOffset+0x4e>
 8013a84:	1dbb      	adds	r3, r7, #6
 8013a86:	781b      	ldrb	r3, [r3, #0]
 8013a88:	b25b      	sxtb	r3, r3
 8013a8a:	1d7a      	adds	r2, r7, #5
 8013a8c:	7812      	ldrb	r2, [r2, #0]
 8013a8e:	b252      	sxtb	r2, r2
 8013a90:	4905      	ldr	r1, [pc, #20]	@ (8013aa8 <RegionIN865ApplyDrOffset+0x58>)
 8013a92:	568a      	ldrsb	r2, [r1, r2]
 8013a94:	1a9b      	subs	r3, r3, r2
 8013a96:	d500      	bpl.n	8013a9a <RegionIN865ApplyDrOffset+0x4a>
 8013a98:	2300      	movs	r3, #0
 8013a9a:	b2db      	uxtb	r3, r3
 8013a9c:	e000      	b.n	8013aa0 <RegionIN865ApplyDrOffset+0x50>
 8013a9e:	2305      	movs	r3, #5
}
 8013aa0:	0018      	movs	r0, r3
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	b003      	add	sp, #12
 8013aa6:	bd90      	pop	{r4, r7, pc}
 8013aa8:	0801b538 	.word	0x0801b538

08013aac <certif_running>:
static void OnCertifTxNextPacketTimerEvent( void* context );
static bool certif_tx( void );

/* Exported functions definition---------------------------------------------------------*/
bool certif_running(void)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	af00      	add	r7, sp, #0
    return certifParam.Running;
 8013ab0:	4b02      	ldr	r3, [pc, #8]	@ (8013abc <certif_running+0x10>)
 8013ab2:	781b      	ldrb	r3, [r3, #0]
}
 8013ab4:	0018      	movs	r0, r3
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	bd80      	pop	{r7, pc}
 8013aba:	46c0      	nop			@ (mov r8, r8)
 8013abc:	20001270 	.word	0x20001270

08013ac0 <certif_DownLinkIncrement>:

void certif_DownLinkIncrement( void )
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	af00      	add	r7, sp, #0
    certifParam.DownLinkCounter++;
 8013ac4:	4b05      	ldr	r3, [pc, #20]	@ (8013adc <certif_DownLinkIncrement+0x1c>)
 8013ac6:	22f6      	movs	r2, #246	@ 0xf6
 8013ac8:	5a9b      	ldrh	r3, [r3, r2]
 8013aca:	3301      	adds	r3, #1
 8013acc:	b299      	uxth	r1, r3
 8013ace:	4b03      	ldr	r3, [pc, #12]	@ (8013adc <certif_DownLinkIncrement+0x1c>)
 8013ad0:	22f6      	movs	r2, #246	@ 0xf6
 8013ad2:	5299      	strh	r1, [r3, r2]
}
 8013ad4:	46c0      	nop			@ (mov r8, r8)
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	bd80      	pop	{r7, pc}
 8013ada:	46c0      	nop			@ (mov r8, r8)
 8013adc:	20001270 	.word	0x20001270

08013ae0 <certif_linkCheck>:

void certif_linkCheck(MlmeConfirm_t *mlmeConfirm)
{
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b082      	sub	sp, #8
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	6078      	str	r0, [r7, #4]
  certifParam.LinkCheck = true;
 8013ae8:	4b08      	ldr	r3, [pc, #32]	@ (8013b0c <certif_linkCheck+0x2c>)
 8013aea:	22f8      	movs	r2, #248	@ 0xf8
 8013aec:	2101      	movs	r1, #1
 8013aee:	5499      	strb	r1, [r3, r2]
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	7a19      	ldrb	r1, [r3, #8]
 8013af4:	4b05      	ldr	r3, [pc, #20]	@ (8013b0c <certif_linkCheck+0x2c>)
 8013af6:	22f9      	movs	r2, #249	@ 0xf9
 8013af8:	5499      	strb	r1, [r3, r2]
  certifParam.NbGateways = mlmeConfirm->NbGateways;
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	7a59      	ldrb	r1, [r3, #9]
 8013afe:	4b03      	ldr	r3, [pc, #12]	@ (8013b0c <certif_linkCheck+0x2c>)
 8013b00:	22fa      	movs	r2, #250	@ 0xfa
 8013b02:	5499      	strb	r1, [r3, r2]
}
 8013b04:	46c0      	nop			@ (mov r8, r8)
 8013b06:	46bd      	mov	sp, r7
 8013b08:	b002      	add	sp, #8
 8013b0a:	bd80      	pop	{r7, pc}
 8013b0c:	20001270 	.word	0x20001270

08013b10 <certif_tx>:

static bool certif_tx( void )
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b086      	sub	sp, #24
 8013b14:	af00      	add	r7, sp, #0
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;
  
  if( certifParam.LinkCheck == true )
 8013b16:	4b47      	ldr	r3, [pc, #284]	@ (8013c34 <certif_tx+0x124>)
 8013b18:	22f8      	movs	r2, #248	@ 0xf8
 8013b1a:	5c9b      	ldrb	r3, [r3, r2]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d017      	beq.n	8013b50 <certif_tx+0x40>
  {
    certifParam.LinkCheck = false;
 8013b20:	4b44      	ldr	r3, [pc, #272]	@ (8013c34 <certif_tx+0x124>)
 8013b22:	22f8      	movs	r2, #248	@ 0xf8
 8013b24:	2100      	movs	r1, #0
 8013b26:	5499      	strb	r1, [r3, r2]
    certifParam.DataBufferSize = 3;
 8013b28:	4b42      	ldr	r3, [pc, #264]	@ (8013c34 <certif_tx+0x124>)
 8013b2a:	2203      	movs	r2, #3
 8013b2c:	70da      	strb	r2, [r3, #3]
    certifParam.DataBuffer[0] = 5;
 8013b2e:	4b41      	ldr	r3, [pc, #260]	@ (8013c34 <certif_tx+0x124>)
 8013b30:	2205      	movs	r2, #5
 8013b32:	711a      	strb	r2, [r3, #4]
    certifParam.DataBuffer[1] = certifParam.DemodMargin;
 8013b34:	4b3f      	ldr	r3, [pc, #252]	@ (8013c34 <certif_tx+0x124>)
 8013b36:	22f9      	movs	r2, #249	@ 0xf9
 8013b38:	5c9a      	ldrb	r2, [r3, r2]
 8013b3a:	4b3e      	ldr	r3, [pc, #248]	@ (8013c34 <certif_tx+0x124>)
 8013b3c:	715a      	strb	r2, [r3, #5]
    certifParam.DataBuffer[2] = certifParam.NbGateways;
 8013b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8013c34 <certif_tx+0x124>)
 8013b40:	22fa      	movs	r2, #250	@ 0xfa
 8013b42:	5c9a      	ldrb	r2, [r3, r2]
 8013b44:	4b3b      	ldr	r3, [pc, #236]	@ (8013c34 <certif_tx+0x124>)
 8013b46:	719a      	strb	r2, [r3, #6]
    certifParam.State = 1;
 8013b48:	4b3a      	ldr	r3, [pc, #232]	@ (8013c34 <certif_tx+0x124>)
 8013b4a:	2201      	movs	r2, #1
 8013b4c:	705a      	strb	r2, [r3, #1]
 8013b4e:	e01b      	b.n	8013b88 <certif_tx+0x78>
  }
  else
  {
    switch( certifParam.State )
 8013b50:	4b38      	ldr	r3, [pc, #224]	@ (8013c34 <certif_tx+0x124>)
 8013b52:	785b      	ldrb	r3, [r3, #1]
 8013b54:	2b01      	cmp	r3, #1
 8013b56:	d005      	beq.n	8013b64 <certif_tx+0x54>
 8013b58:	2b04      	cmp	r3, #4
 8013b5a:	d115      	bne.n	8013b88 <certif_tx+0x78>
    {
    case 4:
      certifParam.State = 1;
 8013b5c:	4b35      	ldr	r3, [pc, #212]	@ (8013c34 <certif_tx+0x124>)
 8013b5e:	2201      	movs	r2, #1
 8013b60:	705a      	strb	r2, [r3, #1]
      break;
 8013b62:	e011      	b.n	8013b88 <certif_tx+0x78>
    case 1:
      certifParam.DataBufferSize = 2;
 8013b64:	4b33      	ldr	r3, [pc, #204]	@ (8013c34 <certif_tx+0x124>)
 8013b66:	2202      	movs	r2, #2
 8013b68:	70da      	strb	r2, [r3, #3]
      certifParam.DataBuffer[0] = certifParam.DownLinkCounter >> 8;
 8013b6a:	4b32      	ldr	r3, [pc, #200]	@ (8013c34 <certif_tx+0x124>)
 8013b6c:	22f6      	movs	r2, #246	@ 0xf6
 8013b6e:	5a9b      	ldrh	r3, [r3, r2]
 8013b70:	0a1b      	lsrs	r3, r3, #8
 8013b72:	b29b      	uxth	r3, r3
 8013b74:	b2da      	uxtb	r2, r3
 8013b76:	4b2f      	ldr	r3, [pc, #188]	@ (8013c34 <certif_tx+0x124>)
 8013b78:	711a      	strb	r2, [r3, #4]
      certifParam.DataBuffer[1] = certifParam.DownLinkCounter;
 8013b7a:	4b2e      	ldr	r3, [pc, #184]	@ (8013c34 <certif_tx+0x124>)
 8013b7c:	22f6      	movs	r2, #246	@ 0xf6
 8013b7e:	5a9b      	ldrh	r3, [r3, r2]
 8013b80:	b2da      	uxtb	r2, r3
 8013b82:	4b2c      	ldr	r3, [pc, #176]	@ (8013c34 <certif_tx+0x124>)
 8013b84:	715a      	strb	r2, [r3, #5]
      break;
 8013b86:	46c0      	nop			@ (mov r8, r8)
    }
  }
    
  if( LoRaMacQueryTxPossible( certifParam.DataBufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8013b88:	4b2a      	ldr	r3, [pc, #168]	@ (8013c34 <certif_tx+0x124>)
 8013b8a:	78db      	ldrb	r3, [r3, #3]
 8013b8c:	1d3a      	adds	r2, r7, #4
 8013b8e:	0011      	movs	r1, r2
 8013b90:	0018      	movs	r0, r3
 8013b92:	f7fa f803 	bl	800db9c <LoRaMacQueryTxPossible>
 8013b96:	1e03      	subs	r3, r0, #0
 8013b98:	d00d      	beq.n	8013bb6 <certif_tx+0xa6>
  {
      // Send empty frame in order to flush MAC commands
      mcpsReq.Type = MCPS_UNCONFIRMED;
 8013b9a:	2108      	movs	r1, #8
 8013b9c:	187b      	adds	r3, r7, r1
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	701a      	strb	r2, [r3, #0]
      mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8013ba2:	187b      	adds	r3, r7, r1
 8013ba4:	2200      	movs	r2, #0
 8013ba6:	609a      	str	r2, [r3, #8]
      mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8013ba8:	187b      	adds	r3, r7, r1
 8013baa:	2200      	movs	r2, #0
 8013bac:	819a      	strh	r2, [r3, #12]
      mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 8013bae:	187b      	adds	r3, r7, r1
 8013bb0:	2200      	movs	r2, #0
 8013bb2:	739a      	strb	r2, [r3, #14]
 8013bb4:	e02b      	b.n	8013c0e <certif_tx+0xfe>
  }
  else
  {
      if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 8013bb6:	4b20      	ldr	r3, [pc, #128]	@ (8013c38 <certif_tx+0x128>)
 8013bb8:	781b      	ldrb	r3, [r3, #0]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d112      	bne.n	8013be4 <certif_tx+0xd4>
      {
          mcpsReq.Type = MCPS_UNCONFIRMED;
 8013bbe:	2108      	movs	r1, #8
 8013bc0:	187b      	adds	r3, r7, r1
 8013bc2:	2200      	movs	r2, #0
 8013bc4:	701a      	strb	r2, [r3, #0]
          mcpsReq.Req.Unconfirmed.fPort = CERTIF_PORT;
 8013bc6:	187b      	adds	r3, r7, r1
 8013bc8:	22e0      	movs	r2, #224	@ 0xe0
 8013bca:	711a      	strb	r2, [r3, #4]
          mcpsReq.Req.Unconfirmed.fBufferSize = certifParam.DataBufferSize;
 8013bcc:	4b19      	ldr	r3, [pc, #100]	@ (8013c34 <certif_tx+0x124>)
 8013bce:	78db      	ldrb	r3, [r3, #3]
 8013bd0:	001a      	movs	r2, r3
 8013bd2:	187b      	adds	r3, r7, r1
 8013bd4:	819a      	strh	r2, [r3, #12]
          mcpsReq.Req.Unconfirmed.fBuffer = &(certifParam.DataBuffer);
 8013bd6:	187b      	adds	r3, r7, r1
 8013bd8:	4a18      	ldr	r2, [pc, #96]	@ (8013c3c <certif_tx+0x12c>)
 8013bda:	609a      	str	r2, [r3, #8]
          mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 8013bdc:	187b      	adds	r3, r7, r1
 8013bde:	2200      	movs	r2, #0
 8013be0:	739a      	strb	r2, [r3, #14]
 8013be2:	e014      	b.n	8013c0e <certif_tx+0xfe>
      }
      else
      {
          mcpsReq.Type = MCPS_CONFIRMED;
 8013be4:	2108      	movs	r1, #8
 8013be6:	187b      	adds	r3, r7, r1
 8013be8:	2201      	movs	r2, #1
 8013bea:	701a      	strb	r2, [r3, #0]
          mcpsReq.Req.Confirmed.fPort = CERTIF_PORT;
 8013bec:	187b      	adds	r3, r7, r1
 8013bee:	22e0      	movs	r2, #224	@ 0xe0
 8013bf0:	711a      	strb	r2, [r3, #4]
          mcpsReq.Req.Confirmed.fBufferSize = certifParam.DataBufferSize;
 8013bf2:	4b10      	ldr	r3, [pc, #64]	@ (8013c34 <certif_tx+0x124>)
 8013bf4:	78db      	ldrb	r3, [r3, #3]
 8013bf6:	001a      	movs	r2, r3
 8013bf8:	187b      	adds	r3, r7, r1
 8013bfa:	819a      	strh	r2, [r3, #12]
          mcpsReq.Req.Confirmed.fBuffer = &(certifParam.DataBuffer);
 8013bfc:	187b      	adds	r3, r7, r1
 8013bfe:	4a0f      	ldr	r2, [pc, #60]	@ (8013c3c <certif_tx+0x12c>)
 8013c00:	609a      	str	r2, [r3, #8]
          mcpsReq.Req.Confirmed.NbTrials = 8;
 8013c02:	187b      	adds	r3, r7, r1
 8013c04:	2208      	movs	r2, #8
 8013c06:	73da      	strb	r2, [r3, #15]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
 8013c08:	187b      	adds	r3, r7, r1
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	739a      	strb	r2, [r3, #14]
      }
  }

  /*cerification test on-going*/
  TimerStart( &CertifTxNextPacketTimer );
 8013c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8013c40 <certif_tx+0x130>)
 8013c10:	0018      	movs	r0, r3
 8013c12:	f001 f9e5 	bl	8014fe0 <TimerStart>
	
  if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 8013c16:	2308      	movs	r3, #8
 8013c18:	18fb      	adds	r3, r7, r3
 8013c1a:	0018      	movs	r0, r3
 8013c1c:	f7fb f80e 	bl	800ec3c <LoRaMacMcpsRequest>
 8013c20:	1e03      	subs	r3, r0, #0
 8013c22:	d101      	bne.n	8013c28 <certif_tx+0x118>
  {
      return false;
 8013c24:	2300      	movs	r3, #0
 8013c26:	e000      	b.n	8013c2a <certif_tx+0x11a>
  }
    return true;
 8013c28:	2301      	movs	r3, #1
}
 8013c2a:	0018      	movs	r0, r3
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	b006      	add	sp, #24
 8013c30:	bd80      	pop	{r7, pc}
 8013c32:	46c0      	nop			@ (mov r8, r8)
 8013c34:	20001270 	.word	0x20001270
 8013c38:	2000136c 	.word	0x2000136c
 8013c3c:	20001274 	.word	0x20001274
 8013c40:	20001258 	.word	0x20001258

08013c44 <certif_rx>:

void certif_rx( McpsIndication_t *mcpsIndication, MlmeReqJoin_t* JoinParameters)
{
 8013c44:	b590      	push	{r4, r7, lr}
 8013c46:	b0a1      	sub	sp, #132	@ 0x84
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
 8013c4c:	6039      	str	r1, [r7, #0]
  if( certifParam.Running == false )
 8013c4e:	4bb0      	ldr	r3, [pc, #704]	@ (8013f10 <certif_rx+0x2cc>)
 8013c50:	781b      	ldrb	r3, [r3, #0]
 8013c52:	2201      	movs	r2, #1
 8013c54:	4053      	eors	r3, r2
 8013c56:	b2db      	uxtb	r3, r3
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d062      	beq.n	8013d22 <certif_rx+0xde>
  {
      // Check compliance test enable command (i)
      if( ( mcpsIndication->BufferSize == 4 ) &&
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	7b1b      	ldrb	r3, [r3, #12]
 8013c60:	2b04      	cmp	r3, #4
 8013c62:	d000      	beq.n	8013c66 <certif_rx+0x22>
 8013c64:	e144      	b.n	8013ef0 <certif_rx+0x2ac>
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	689b      	ldr	r3, [r3, #8]
 8013c6a:	781b      	ldrb	r3, [r3, #0]
      if( ( mcpsIndication->BufferSize == 4 ) &&
 8013c6c:	2b01      	cmp	r3, #1
 8013c6e:	d000      	beq.n	8013c72 <certif_rx+0x2e>
 8013c70:	e13e      	b.n	8013ef0 <certif_rx+0x2ac>
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	689b      	ldr	r3, [r3, #8]
 8013c76:	3301      	adds	r3, #1
 8013c78:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8013c7a:	2b01      	cmp	r3, #1
 8013c7c:	d000      	beq.n	8013c80 <certif_rx+0x3c>
 8013c7e:	e137      	b.n	8013ef0 <certif_rx+0x2ac>
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	689b      	ldr	r3, [r3, #8]
 8013c84:	3302      	adds	r3, #2
 8013c86:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8013c88:	2b01      	cmp	r3, #1
 8013c8a:	d000      	beq.n	8013c8e <certif_rx+0x4a>
 8013c8c:	e130      	b.n	8013ef0 <certif_rx+0x2ac>
          ( mcpsIndication->Buffer[3] == 0x01 ) )
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	689b      	ldr	r3, [r3, #8]
 8013c92:	3303      	adds	r3, #3
 8013c94:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8013c96:	2b01      	cmp	r3, #1
 8013c98:	d000      	beq.n	8013c9c <certif_rx+0x58>
 8013c9a:	e129      	b.n	8013ef0 <certif_rx+0x2ac>
      {
          MibRequestConfirm_t mibReq;
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 8013c9c:	4b9d      	ldr	r3, [pc, #628]	@ (8013f14 <certif_rx+0x2d0>)
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	701a      	strb	r2, [r3, #0]
          certifParam.DataBufferSize = 2;
 8013ca2:	4b9b      	ldr	r3, [pc, #620]	@ (8013f10 <certif_rx+0x2cc>)
 8013ca4:	2202      	movs	r2, #2
 8013ca6:	70da      	strb	r2, [r3, #3]
          certifParam.DownLinkCounter = 0;
 8013ca8:	4b99      	ldr	r3, [pc, #612]	@ (8013f10 <certif_rx+0x2cc>)
 8013caa:	22f6      	movs	r2, #246	@ 0xf6
 8013cac:	2100      	movs	r1, #0
 8013cae:	5299      	strh	r1, [r3, r2]
          certifParam.LinkCheck = false;
 8013cb0:	4b97      	ldr	r3, [pc, #604]	@ (8013f10 <certif_rx+0x2cc>)
 8013cb2:	22f8      	movs	r2, #248	@ 0xf8
 8013cb4:	2100      	movs	r1, #0
 8013cb6:	5499      	strb	r1, [r3, r2]
          certifParam.DemodMargin = 0;
 8013cb8:	4b95      	ldr	r3, [pc, #596]	@ (8013f10 <certif_rx+0x2cc>)
 8013cba:	22f9      	movs	r2, #249	@ 0xf9
 8013cbc:	2100      	movs	r1, #0
 8013cbe:	5499      	strb	r1, [r3, r2]
          certifParam.NbGateways = 0;
 8013cc0:	4b93      	ldr	r3, [pc, #588]	@ (8013f10 <certif_rx+0x2cc>)
 8013cc2:	22fa      	movs	r2, #250	@ 0xfa
 8013cc4:	2100      	movs	r1, #0
 8013cc6:	5499      	strb	r1, [r3, r2]
          certifParam.Running = true;
 8013cc8:	4b91      	ldr	r3, [pc, #580]	@ (8013f10 <certif_rx+0x2cc>)
 8013cca:	2201      	movs	r2, #1
 8013ccc:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8013cce:	4b90      	ldr	r3, [pc, #576]	@ (8013f10 <certif_rx+0x2cc>)
 8013cd0:	2201      	movs	r2, #1
 8013cd2:	705a      	strb	r2, [r3, #1]

          mibReq.Type = MIB_ADR;
 8013cd4:	210c      	movs	r1, #12
 8013cd6:	187b      	adds	r3, r7, r1
 8013cd8:	2204      	movs	r2, #4
 8013cda:	701a      	strb	r2, [r3, #0]

          LoRaMacMibGetRequestConfirm( &mibReq );
 8013cdc:	000c      	movs	r4, r1
 8013cde:	187b      	adds	r3, r7, r1
 8013ce0:	0018      	movs	r0, r3
 8013ce2:	f7fa f809 	bl	800dcf8 <LoRaMacMibGetRequestConfirm>
          AdrEnableInit=mibReq.Param.AdrEnable;
 8013ce6:	0021      	movs	r1, r4
 8013ce8:	187b      	adds	r3, r7, r1
 8013cea:	791a      	ldrb	r2, [r3, #4]
 8013cec:	4b8a      	ldr	r3, [pc, #552]	@ (8013f18 <certif_rx+0x2d4>)
 8013cee:	701a      	strb	r2, [r3, #0]
          
          mibReq.Type = MIB_ADR;
 8013cf0:	187b      	adds	r3, r7, r1
 8013cf2:	2204      	movs	r2, #4
 8013cf4:	701a      	strb	r2, [r3, #0]
          mibReq.Param.AdrEnable = true;
 8013cf6:	187b      	adds	r3, r7, r1
 8013cf8:	2201      	movs	r2, #1
 8013cfa:	711a      	strb	r2, [r3, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 8013cfc:	187b      	adds	r3, r7, r1
 8013cfe:	0018      	movs	r0, r3
 8013d00:	f7fa f956 	bl	800dfb0 <LoRaMacMibSetRequestConfirm>
#if defined( REGION_EU868 ) || defined( REGION_RU864 ) || defined( REGION_CN779 ) || defined( REGION_EU433 )
          LoRaMacTestSetDutyCycleOn( false );
#endif

         
        TimerInit( &CertifTxNextPacketTimer, OnCertifTxNextPacketTimerEvent );
 8013d04:	4a85      	ldr	r2, [pc, #532]	@ (8013f1c <certif_rx+0x2d8>)
 8013d06:	4b86      	ldr	r3, [pc, #536]	@ (8013f20 <certif_rx+0x2dc>)
 8013d08:	0011      	movs	r1, r2
 8013d0a:	0018      	movs	r0, r3
 8013d0c:	f001 f949 	bl	8014fa2 <TimerInit>
        TimerSetValue( &CertifTxNextPacketTimer,  TEST_TX_DUTYCYCLE); 
 8013d10:	4a84      	ldr	r2, [pc, #528]	@ (8013f24 <certif_rx+0x2e0>)
 8013d12:	4b83      	ldr	r3, [pc, #524]	@ (8013f20 <certif_rx+0x2dc>)
 8013d14:	0011      	movs	r1, r2
 8013d16:	0018      	movs	r0, r3
 8013d18:	f001 fabe 	bl	8015298 <TimerSetValue>
        
        /*confirm test mode activation */
        certif_tx( );
 8013d1c:	f7ff fef8 	bl	8013b10 <certif_tx>
 8013d20:	e0e6      	b.n	8013ef0 <certif_rx+0x2ac>
      }
  }

  else
  {
      certifParam.State = mcpsIndication->Buffer[0];
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	689b      	ldr	r3, [r3, #8]
 8013d26:	781a      	ldrb	r2, [r3, #0]
 8013d28:	4b79      	ldr	r3, [pc, #484]	@ (8013f10 <certif_rx+0x2cc>)
 8013d2a:	705a      	strb	r2, [r3, #1]
      switch( certifParam.State )
 8013d2c:	4b78      	ldr	r3, [pc, #480]	@ (8013f10 <certif_rx+0x2cc>)
 8013d2e:	785b      	ldrb	r3, [r3, #1]
 8013d30:	2b08      	cmp	r3, #8
 8013d32:	d900      	bls.n	8013d36 <certif_rx+0xf2>
 8013d34:	e0db      	b.n	8013eee <certif_rx+0x2aa>
 8013d36:	009a      	lsls	r2, r3, #2
 8013d38:	4b7b      	ldr	r3, [pc, #492]	@ (8013f28 <certif_rx+0x2e4>)
 8013d3a:	18d3      	adds	r3, r2, r3
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	469f      	mov	pc, r3
      {
        case 0: // Check compliance test disable command (ii)
        {
          
          certifParam.DownLinkCounter = 0;
 8013d40:	4b73      	ldr	r3, [pc, #460]	@ (8013f10 <certif_rx+0x2cc>)
 8013d42:	22f6      	movs	r2, #246	@ 0xf6
 8013d44:	2100      	movs	r1, #0
 8013d46:	5299      	strh	r1, [r3, r2]
          certifParam.Running = false;
 8013d48:	4b71      	ldr	r3, [pc, #452]	@ (8013f10 <certif_rx+0x2cc>)
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	701a      	strb	r2, [r3, #0]
          
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_ADR;
 8013d4e:	210c      	movs	r1, #12
 8013d50:	187b      	adds	r3, r7, r1
 8013d52:	2204      	movs	r2, #4
 8013d54:	701a      	strb	r2, [r3, #0]
          mibReq.Param.AdrEnable = AdrEnableInit;
 8013d56:	4b70      	ldr	r3, [pc, #448]	@ (8013f18 <certif_rx+0x2d4>)
 8013d58:	781a      	ldrb	r2, [r3, #0]
 8013d5a:	187b      	adds	r3, r7, r1
 8013d5c:	711a      	strb	r2, [r3, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 8013d5e:	187b      	adds	r3, r7, r1
 8013d60:	0018      	movs	r0, r3
 8013d62:	f7fa f925 	bl	800dfb0 <LoRaMacMibSetRequestConfirm>
#if defined( REGION_EU868 ) || defined( REGION_RU864 ) || defined( REGION_CN779 ) || defined( REGION_EU433 )
          LoRaMacTestSetDutyCycleOn( true );
#endif
          
          break;
 8013d66:	e0c3      	b.n	8013ef0 <certif_rx+0x2ac>
        }
        case 1: // (iii, iv)
          certifParam.DataBufferSize = 2;
 8013d68:	4b69      	ldr	r3, [pc, #420]	@ (8013f10 <certif_rx+0x2cc>)
 8013d6a:	2202      	movs	r2, #2
 8013d6c:	70da      	strb	r2, [r3, #3]
          break;
 8013d6e:	e0bf      	b.n	8013ef0 <certif_rx+0x2ac>
        case 2: // Enable confirmed messages (v)
          IsTxConfirmed = LORAWAN_CONFIRMED_MSG;
 8013d70:	4b68      	ldr	r3, [pc, #416]	@ (8013f14 <certif_rx+0x2d0>)
 8013d72:	2201      	movs	r2, #1
 8013d74:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8013d76:	4b66      	ldr	r3, [pc, #408]	@ (8013f10 <certif_rx+0x2cc>)
 8013d78:	2201      	movs	r2, #1
 8013d7a:	705a      	strb	r2, [r3, #1]
          break;
 8013d7c:	e0b8      	b.n	8013ef0 <certif_rx+0x2ac>
        case 3:  // Disable confirmed messages (vi)
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 8013d7e:	4b65      	ldr	r3, [pc, #404]	@ (8013f14 <certif_rx+0x2d0>)
 8013d80:	2200      	movs	r2, #0
 8013d82:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8013d84:	4b62      	ldr	r3, [pc, #392]	@ (8013f10 <certif_rx+0x2cc>)
 8013d86:	2201      	movs	r2, #1
 8013d88:	705a      	strb	r2, [r3, #1]
          break;
 8013d8a:	e0b1      	b.n	8013ef0 <certif_rx+0x2ac>
        case 4: // (vii)
          certifParam.DataBufferSize = mcpsIndication->BufferSize;
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	7b1a      	ldrb	r2, [r3, #12]
 8013d90:	4b5f      	ldr	r3, [pc, #380]	@ (8013f10 <certif_rx+0x2cc>)
 8013d92:	70da      	strb	r2, [r3, #3]

          certifParam.DataBuffer[0] = 4;
 8013d94:	4b5e      	ldr	r3, [pc, #376]	@ (8013f10 <certif_rx+0x2cc>)
 8013d96:	2204      	movs	r2, #4
 8013d98:	711a      	strb	r2, [r3, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 8013d9a:	237f      	movs	r3, #127	@ 0x7f
 8013d9c:	18fb      	adds	r3, r7, r3
 8013d9e:	2201      	movs	r2, #1
 8013da0:	701a      	strb	r2, [r3, #0]
 8013da2:	e013      	b.n	8013dcc <certif_rx+0x188>
          {
              certifParam.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	689a      	ldr	r2, [r3, #8]
 8013da8:	207f      	movs	r0, #127	@ 0x7f
 8013daa:	183b      	adds	r3, r7, r0
 8013dac:	781b      	ldrb	r3, [r3, #0]
 8013dae:	18d3      	adds	r3, r2, r3
 8013db0:	781a      	ldrb	r2, [r3, #0]
 8013db2:	183b      	adds	r3, r7, r0
 8013db4:	781b      	ldrb	r3, [r3, #0]
 8013db6:	3201      	adds	r2, #1
 8013db8:	b2d1      	uxtb	r1, r2
 8013dba:	4a55      	ldr	r2, [pc, #340]	@ (8013f10 <certif_rx+0x2cc>)
 8013dbc:	18d3      	adds	r3, r2, r3
 8013dbe:	1c0a      	adds	r2, r1, #0
 8013dc0:	711a      	strb	r2, [r3, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 8013dc2:	183b      	adds	r3, r7, r0
 8013dc4:	781a      	ldrb	r2, [r3, #0]
 8013dc6:	183b      	adds	r3, r7, r0
 8013dc8:	3201      	adds	r2, #1
 8013dca:	701a      	strb	r2, [r3, #0]
 8013dcc:	4b50      	ldr	r3, [pc, #320]	@ (8013f10 <certif_rx+0x2cc>)
 8013dce:	78db      	ldrb	r3, [r3, #3]
 8013dd0:	227f      	movs	r2, #127	@ 0x7f
 8013dd2:	18ba      	adds	r2, r7, r2
 8013dd4:	7812      	ldrb	r2, [r2, #0]
 8013dd6:	429a      	cmp	r2, r3
 8013dd8:	d3e4      	bcc.n	8013da4 <certif_rx+0x160>
          }
          break;
 8013dda:	e089      	b.n	8013ef0 <certif_rx+0x2ac>
        case 5: // (viii)
        {
          MlmeReq_t mlmeReq;
          mlmeReq.Type = MLME_LINK_CHECK;
 8013ddc:	216c      	movs	r1, #108	@ 0x6c
 8013dde:	187b      	adds	r3, r7, r1
 8013de0:	2203      	movs	r2, #3
 8013de2:	701a      	strb	r2, [r3, #0]
          LoRaMacMlmeRequest( &mlmeReq );
 8013de4:	187b      	adds	r3, r7, r1
 8013de6:	0018      	movs	r0, r3
 8013de8:	f7fa fdd6 	bl	800e998 <LoRaMacMlmeRequest>
          break;
 8013dec:	e080      	b.n	8013ef0 <certif_rx+0x2ac>
        {
            MlmeReq_t mlmeReq;

            // Disable TestMode and revert back to normal operation

            certifParam.DownLinkCounter = 0;
 8013dee:	4b48      	ldr	r3, [pc, #288]	@ (8013f10 <certif_rx+0x2cc>)
 8013df0:	22f6      	movs	r2, #246	@ 0xf6
 8013df2:	2100      	movs	r1, #0
 8013df4:	5299      	strh	r1, [r3, r2]
            certifParam.Running = false;
 8013df6:	4b46      	ldr	r3, [pc, #280]	@ (8013f10 <certif_rx+0x2cc>)
 8013df8:	2200      	movs	r2, #0
 8013dfa:	701a      	strb	r2, [r3, #0]

            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_ADR;
 8013dfc:	210c      	movs	r1, #12
 8013dfe:	187b      	adds	r3, r7, r1
 8013e00:	2204      	movs	r2, #4
 8013e02:	701a      	strb	r2, [r3, #0]
            mibReq.Param.AdrEnable = AdrEnableInit;
 8013e04:	4b44      	ldr	r3, [pc, #272]	@ (8013f18 <certif_rx+0x2d4>)
 8013e06:	781a      	ldrb	r2, [r3, #0]
 8013e08:	187b      	adds	r3, r7, r1
 8013e0a:	711a      	strb	r2, [r3, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8013e0c:	187b      	adds	r3, r7, r1
 8013e0e:	0018      	movs	r0, r3
 8013e10:	f7fa f8ce 	bl	800dfb0 <LoRaMacMibSetRequestConfirm>

            mlmeReq.Type = MLME_JOIN;
 8013e14:	215c      	movs	r1, #92	@ 0x5c
 8013e16:	187b      	adds	r3, r7, r1
 8013e18:	2200      	movs	r2, #0
 8013e1a:	701a      	strb	r2, [r3, #0]
            mlmeReq.Req.Join = *JoinParameters;
 8013e1c:	187b      	adds	r3, r7, r1
 8013e1e:	683a      	ldr	r2, [r7, #0]
 8013e20:	7812      	ldrb	r2, [r2, #0]
 8013e22:	711a      	strb	r2, [r3, #4]

            LoRaMacMlmeRequest( &mlmeReq );
 8013e24:	187b      	adds	r3, r7, r1
 8013e26:	0018      	movs	r0, r3
 8013e28:	f7fa fdb6 	bl	800e998 <LoRaMacMlmeRequest>
            break;
 8013e2c:	e060      	b.n	8013ef0 <certif_rx+0x2ac>
        }

        case 7: // (x)
        {
          if( mcpsIndication->BufferSize == 3 )
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	7b1b      	ldrb	r3, [r3, #12]
 8013e32:	2b03      	cmp	r3, #3
 8013e34:	d118      	bne.n	8013e68 <certif_rx+0x224>
          {
              MlmeReq_t mlmeReq;
              mlmeReq.Type = MLME_TXCW;
 8013e36:	214c      	movs	r1, #76	@ 0x4c
 8013e38:	187b      	adds	r3, r7, r1
 8013e3a:	2204      	movs	r2, #4
 8013e3c:	701a      	strb	r2, [r3, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	689b      	ldr	r3, [r3, #8]
 8013e42:	3301      	adds	r3, #1
 8013e44:	781b      	ldrb	r3, [r3, #0]
 8013e46:	021b      	lsls	r3, r3, #8
 8013e48:	b21a      	sxth	r2, r3
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	689b      	ldr	r3, [r3, #8]
 8013e4e:	3302      	adds	r3, #2
 8013e50:	781b      	ldrb	r3, [r3, #0]
 8013e52:	b21b      	sxth	r3, r3
 8013e54:	4313      	orrs	r3, r2
 8013e56:	b21b      	sxth	r3, r3
 8013e58:	b29a      	uxth	r2, r3
 8013e5a:	187b      	adds	r3, r7, r1
 8013e5c:	809a      	strh	r2, [r3, #4]
              LoRaMacMlmeRequest( &mlmeReq );
 8013e5e:	187b      	adds	r3, r7, r1
 8013e60:	0018      	movs	r0, r3
 8013e62:	f7fa fd99 	bl	800e998 <LoRaMacMlmeRequest>
 8013e66:	e035      	b.n	8013ed4 <certif_rx+0x290>
          }
          else if( mcpsIndication->BufferSize == 7 )
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	7b1b      	ldrb	r3, [r3, #12]
 8013e6c:	2b07      	cmp	r3, #7
 8013e6e:	d131      	bne.n	8013ed4 <certif_rx+0x290>
          {
              MlmeReq_t mlmeReq;
              mlmeReq.Type = MLME_TXCW_1;
 8013e70:	213c      	movs	r1, #60	@ 0x3c
 8013e72:	187b      	adds	r3, r7, r1
 8013e74:	2205      	movs	r2, #5
 8013e76:	701a      	strb	r2, [r3, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	689b      	ldr	r3, [r3, #8]
 8013e7c:	3301      	adds	r3, #1
 8013e7e:	781b      	ldrb	r3, [r3, #0]
 8013e80:	021b      	lsls	r3, r3, #8
 8013e82:	b21a      	sxth	r2, r3
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	689b      	ldr	r3, [r3, #8]
 8013e88:	3302      	adds	r3, #2
 8013e8a:	781b      	ldrb	r3, [r3, #0]
 8013e8c:	b21b      	sxth	r3, r3
 8013e8e:	4313      	orrs	r3, r2
 8013e90:	b21b      	sxth	r3, r3
 8013e92:	b29a      	uxth	r2, r3
 8013e94:	187b      	adds	r3, r7, r1
 8013e96:	809a      	strh	r2, [r3, #4]
              mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	689b      	ldr	r3, [r3, #8]
 8013e9c:	3303      	adds	r3, #3
 8013e9e:	781b      	ldrb	r3, [r3, #0]
 8013ea0:	041a      	lsls	r2, r3, #16
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	689b      	ldr	r3, [r3, #8]
 8013ea6:	3304      	adds	r3, #4
 8013ea8:	781b      	ldrb	r3, [r3, #0]
 8013eaa:	021b      	lsls	r3, r3, #8
 8013eac:	431a      	orrs	r2, r3
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	689b      	ldr	r3, [r3, #8]
 8013eb2:	3305      	adds	r3, #5
 8013eb4:	781b      	ldrb	r3, [r3, #0]
 8013eb6:	4313      	orrs	r3, r2
 8013eb8:	001a      	movs	r2, r3
 8013eba:	2364      	movs	r3, #100	@ 0x64
 8013ebc:	435a      	muls	r2, r3
 8013ebe:	187b      	adds	r3, r7, r1
 8013ec0:	609a      	str	r2, [r3, #8]
              mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	689b      	ldr	r3, [r3, #8]
 8013ec6:	799a      	ldrb	r2, [r3, #6]
 8013ec8:	187b      	adds	r3, r7, r1
 8013eca:	731a      	strb	r2, [r3, #12]
              LoRaMacMlmeRequest( &mlmeReq );
 8013ecc:	187b      	adds	r3, r7, r1
 8013ece:	0018      	movs	r0, r3
 8013ed0:	f7fa fd62 	bl	800e998 <LoRaMacMlmeRequest>
          }
          certifParam.State = 1;
 8013ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8013f10 <certif_rx+0x2cc>)
 8013ed6:	2201      	movs	r2, #1
 8013ed8:	705a      	strb	r2, [r3, #1]
          break;
 8013eda:	e009      	b.n	8013ef0 <certif_rx+0x2ac>
		
        case 8: // Send DeviceTimeReq
        {
          MlmeReq_t mlmeReq;

          mlmeReq.Type = MLME_DEVICE_TIME;
 8013edc:	212c      	movs	r1, #44	@ 0x2c
 8013ede:	187b      	adds	r3, r7, r1
 8013ee0:	2209      	movs	r2, #9
 8013ee2:	701a      	strb	r2, [r3, #0]

          LoRaMacMlmeRequest( &mlmeReq );
 8013ee4:	187b      	adds	r3, r7, r1
 8013ee6:	0018      	movs	r0, r3
 8013ee8:	f7fa fd56 	bl	800e998 <LoRaMacMlmeRequest>
          break;
 8013eec:	e000      	b.n	8013ef0 <certif_rx+0x2ac>
          LoRaMacMlmeRequest( &mlmeReq );
          break;
        }
#endif /* LORAMAC_CLASSB_ENABLED */
        default:                  
          break;
 8013eee:	46c0      	nop			@ (mov r8, r8)
        }
    }
  
    if ( certifParam.Running == false )
 8013ef0:	4b07      	ldr	r3, [pc, #28]	@ (8013f10 <certif_rx+0x2cc>)
 8013ef2:	781b      	ldrb	r3, [r3, #0]
 8013ef4:	2201      	movs	r2, #1
 8013ef6:	4053      	eors	r3, r2
 8013ef8:	b2db      	uxtb	r3, r3
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d003      	beq.n	8013f06 <certif_rx+0x2c2>
    {
      /*cerification test stops*/
      TimerStop( &CertifTxNextPacketTimer );
 8013efe:	4b08      	ldr	r3, [pc, #32]	@ (8013f20 <certif_rx+0x2dc>)
 8013f00:	0018      	movs	r0, r3
 8013f02:	f001 f94b 	bl	801519c <TimerStop>
    }
}
 8013f06:	46c0      	nop			@ (mov r8, r8)
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	b021      	add	sp, #132	@ 0x84
 8013f0c:	bd90      	pop	{r4, r7, pc}
 8013f0e:	46c0      	nop			@ (mov r8, r8)
 8013f10:	20001270 	.word	0x20001270
 8013f14:	2000136c 	.word	0x2000136c
 8013f18:	2000136d 	.word	0x2000136d
 8013f1c:	08013f2d 	.word	0x08013f2d
 8013f20:	20001258 	.word	0x20001258
 8013f24:	00001388 	.word	0x00001388
 8013f28:	0801b658 	.word	0x0801b658

08013f2c <OnCertifTxNextPacketTimerEvent>:

/*!
 * \brief Function executed on TxNextPacket Timeout event
 */
static void OnCertifTxNextPacketTimerEvent( void* context )
{
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b082      	sub	sp, #8
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	6078      	str	r0, [r7, #4]
    certif_tx( );
 8013f34:	f7ff fdec 	bl	8013b10 <certif_tx>

}
 8013f38:	46c0      	nop			@ (mov r8, r8)
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	b002      	add	sp, #8
 8013f3e:	bd80      	pop	{r7, pc}

08013f40 <McpsConfirm>:
 *
 * \param   [IN] McpsConfirm - Pointer to the confirm structure,
 *               containing confirm attributes.
 */
static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b084      	sub	sp, #16
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
    TVL2( PRINTNOW(); PRINTF("APP> McpsConfirm STATUS: %s\r\n", EventInfoStatusStrings[mcpsConfirm->Status] ); )
  
    if( mcpsConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	785b      	ldrb	r3, [r3, #1]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d110      	bne.n	8013f72 <McpsConfirm+0x32>
    {
        switch( mcpsConfirm->McpsRequest )
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	781b      	ldrb	r3, [r3, #0]
 8013f54:	2b03      	cmp	r3, #3
 8013f56:	d005      	beq.n	8013f64 <McpsConfirm+0x24>
 8013f58:	dc06      	bgt.n	8013f68 <McpsConfirm+0x28>
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d006      	beq.n	8013f6c <McpsConfirm+0x2c>
 8013f5e:	2b01      	cmp	r3, #1
 8013f60:	d006      	beq.n	8013f70 <McpsConfirm+0x30>
            case MCPS_PROPRIETARY:
            {
                break;
            }
            default:
                break;
 8013f62:	e001      	b.n	8013f68 <McpsConfirm+0x28>
                break;
 8013f64:	46c0      	nop			@ (mov r8, r8)
 8013f66:	e004      	b.n	8013f72 <McpsConfirm+0x32>
                break;
 8013f68:	46c0      	nop			@ (mov r8, r8)
 8013f6a:	e002      	b.n	8013f72 <McpsConfirm+0x32>
                break;
 8013f6c:	46c0      	nop			@ (mov r8, r8)
 8013f6e:	e000      	b.n	8013f72 <McpsConfirm+0x32>
                break;
 8013f70:	46c0      	nop			@ (mov r8, r8)
        }
    }
    
    /*implicitely desactivated when VERBOSE_LEVEL < 2*/
    TraceUpLinkFrame(mcpsConfirm);
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	0018      	movs	r0, r3
 8013f76:	f000 fbb7 	bl	80146e8 <TraceUpLinkFrame>
}
 8013f7a:	46c0      	nop			@ (mov r8, r8)
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	b004      	add	sp, #16
 8013f80:	bd80      	pop	{r7, pc}
	...

08013f84 <McpsIndication>:
 *
 * \param   [IN] mcpsIndication - Pointer to the indication structure,
 *               containing indication attributes.
 */
static void McpsIndication( McpsIndication_t *mcpsIndication )
{
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b086      	sub	sp, #24
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	6078      	str	r0, [r7, #4]
    TVL2( PRINTNOW(); PRINTF("APP> McpsInd STATUS: %s\r\n", EventInfoStatusStrings[mcpsIndication->Status] );)
    
    lora_AppData_t AppData;
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	785b      	ldrb	r3, [r3, #1]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d14b      	bne.n	801402c <McpsIndication+0xa8>
    {
        return;
    }

    switch( mcpsIndication->McpsIndication )
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	781b      	ldrb	r3, [r3, #0]
 8013f98:	2b03      	cmp	r3, #3
 8013f9a:	d008      	beq.n	8013fae <McpsIndication+0x2a>
 8013f9c:	dc09      	bgt.n	8013fb2 <McpsIndication+0x2e>
 8013f9e:	2b02      	cmp	r3, #2
 8013fa0:	d009      	beq.n	8013fb6 <McpsIndication+0x32>
 8013fa2:	dc06      	bgt.n	8013fb2 <McpsIndication+0x2e>
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d008      	beq.n	8013fba <McpsIndication+0x36>
 8013fa8:	2b01      	cmp	r3, #1
 8013faa:	d008      	beq.n	8013fbe <McpsIndication+0x3a>
        case MCPS_MULTICAST:
        {
            break;
        }
        default:
            break;
 8013fac:	e001      	b.n	8013fb2 <McpsIndication+0x2e>
            break;
 8013fae:	46c0      	nop			@ (mov r8, r8)
 8013fb0:	e006      	b.n	8013fc0 <McpsIndication+0x3c>
            break;
 8013fb2:	46c0      	nop			@ (mov r8, r8)
 8013fb4:	e004      	b.n	8013fc0 <McpsIndication+0x3c>
            break;
 8013fb6:	46c0      	nop			@ (mov r8, r8)
 8013fb8:	e002      	b.n	8013fc0 <McpsIndication+0x3c>
            break;
 8013fba:	46c0      	nop			@ (mov r8, r8)
 8013fbc:	e000      	b.n	8013fc0 <McpsIndication+0x3c>
            break;
 8013fbe:	46c0      	nop			@ (mov r8, r8)

    // Check Multicast
    // Check Port
    // Check Datarate
    // Check FramePending
    if( mcpsIndication->FramePending == true )
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	795b      	ldrb	r3, [r3, #5]
 8013fc4:	2b01      	cmp	r3, #1
 8013fc6:	d103      	bne.n	8013fd0 <McpsIndication+0x4c>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        LoRaMainCallbacks->LORA_TxNeeded( );
 8013fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8014034 <McpsIndication+0xb0>)
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	69db      	ldr	r3, [r3, #28]
 8013fce:	4798      	blx	r3
    // Check Buffer
    // Check BufferSize
    // Check Rssi
    // Check Snr
    // Check RxSlot
    if (certif_running() == true )
 8013fd0:	f7ff fd6c 	bl	8013aac <certif_running>
 8013fd4:	1e03      	subs	r3, r0, #0
 8013fd6:	d001      	beq.n	8013fdc <McpsIndication+0x58>
    {
      certif_DownLinkIncrement( );
 8013fd8:	f7ff fd72 	bl	8013ac0 <certif_DownLinkIncrement>
    }

    if( mcpsIndication->RxData == true )
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	7b5b      	ldrb	r3, [r3, #13]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d01e      	beq.n	8014022 <McpsIndication+0x9e>
    {
      switch( mcpsIndication->Port )
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	78db      	ldrb	r3, [r3, #3]
 8013fe8:	2be0      	cmp	r3, #224	@ 0xe0
 8013fea:	d106      	bne.n	8013ffa <McpsIndication+0x76>
      {
        case CERTIF_PORT:
          certif_rx( mcpsIndication, &JoinParameters );
 8013fec:	4a12      	ldr	r2, [pc, #72]	@ (8014038 <McpsIndication+0xb4>)
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	0011      	movs	r1, r2
 8013ff2:	0018      	movs	r0, r3
 8013ff4:	f7ff fe26 	bl	8013c44 <certif_rx>
          break;
 8013ff8:	e013      	b.n	8014022 <McpsIndication+0x9e>
        default:
          
          AppData.Port = mcpsIndication->Port;
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	78da      	ldrb	r2, [r3, #3]
 8013ffe:	2110      	movs	r1, #16
 8014000:	187b      	adds	r3, r7, r1
 8014002:	715a      	strb	r2, [r3, #5]
          AppData.BuffSize = mcpsIndication->BufferSize;
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	7b1a      	ldrb	r2, [r3, #12]
 8014008:	187b      	adds	r3, r7, r1
 801400a:	711a      	strb	r2, [r3, #4]
          AppData.Buff = mcpsIndication->Buffer;
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	689a      	ldr	r2, [r3, #8]
 8014010:	187b      	adds	r3, r7, r1
 8014012:	601a      	str	r2, [r3, #0]
        
          LoRaMainCallbacks->LORA_RxData( &AppData );
 8014014:	4b07      	ldr	r3, [pc, #28]	@ (8014034 <McpsIndication+0xb0>)
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	691b      	ldr	r3, [r3, #16]
 801401a:	187a      	adds	r2, r7, r1
 801401c:	0010      	movs	r0, r2
 801401e:	4798      	blx	r3
          break;
 8014020:	46c0      	nop			@ (mov r8, r8)
      }
    }
    
    /*implicitely desactivated when VERBOSE_LEVEL < 2*/
    TraceDownLinkFrame(mcpsIndication);
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	0018      	movs	r0, r3
 8014026:	f000 fb89 	bl	801473c <TraceDownLinkFrame>
 801402a:	e000      	b.n	801402e <McpsIndication+0xaa>
        return;
 801402c:	46c0      	nop			@ (mov r8, r8)
}
 801402e:	46bd      	mov	sp, r7
 8014030:	b006      	add	sp, #24
 8014032:	bd80      	pop	{r7, pc}
 8014034:	200013d8 	.word	0x200013d8
 8014038:	20001390 	.word	0x20001390

0801403c <MlmeConfirm>:
 *
 * \param   [IN] MlmeConfirm - Pointer to the confirm structure,
 *               containing confirm attributes.
 */
static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b084      	sub	sp, #16
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
#endif /* LORAMAC_CLASSB_ENABLED */

    TVL2( PRINTNOW(); PRINTF("APP> MlmeConfirm STATUS: %s\r\n", EventInfoStatusStrings[mlmeConfirm->Status] );)
    
    switch( mlmeConfirm->MlmeRequest )
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	781b      	ldrb	r3, [r3, #0]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d002      	beq.n	8014052 <MlmeConfirm+0x16>
 801404c:	2b03      	cmp	r3, #3
 801404e:	d00c      	beq.n	801406a <MlmeConfirm+0x2e>
            }  
        }              
#endif /* USE_DEVICE_TIMING */
#endif /* LORAMAC_CLASSB_ENABLED */
        default:
            break;
 8014050:	e018      	b.n	8014084 <MlmeConfirm+0x48>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	785b      	ldrb	r3, [r3, #1]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d104      	bne.n	8014064 <MlmeConfirm+0x28>
              LoRaMainCallbacks->LORA_HasJoined();
 801405a:	4b0c      	ldr	r3, [pc, #48]	@ (801408c <MlmeConfirm+0x50>)
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	695b      	ldr	r3, [r3, #20]
 8014060:	4798      	blx	r3
            break;
 8014062:	e00f      	b.n	8014084 <MlmeConfirm+0x48>
                LORA_Join();
 8014064:	f000 f9c6 	bl	80143f4 <LORA_Join>
            break;
 8014068:	e00c      	b.n	8014084 <MlmeConfirm+0x48>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	785b      	ldrb	r3, [r3, #1]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d107      	bne.n	8014082 <MlmeConfirm+0x46>
                if (certif_running() == true )
 8014072:	f7ff fd1b 	bl	8013aac <certif_running>
 8014076:	1e03      	subs	r3, r0, #0
 8014078:	d003      	beq.n	8014082 <MlmeConfirm+0x46>
                     certif_linkCheck( mlmeConfirm);
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	0018      	movs	r0, r3
 801407e:	f7ff fd2f 	bl	8013ae0 <certif_linkCheck>
            break;
 8014082:	46c0      	nop			@ (mov r8, r8)
    }
}
 8014084:	46c0      	nop			@ (mov r8, r8)
 8014086:	46bd      	mov	sp, r7
 8014088:	b004      	add	sp, #16
 801408a:	bd80      	pop	{r7, pc}
 801408c:	200013d8 	.word	0x200013d8

08014090 <MlmeIndication>:
 * \brief   MLME-Indication event function
 *
 * \param   [IN] MlmeIndication - Pointer to the indication structure.
 */
static void MlmeIndication( MlmeIndication_t *MlmeIndication )
{
 8014090:	b580      	push	{r7, lr}
 8014092:	b084      	sub	sp, #16
 8014094:	af00      	add	r7, sp, #0
 8014096:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
#endif /* LORAMAC_CLASSB_ENABLED */

    TVL2( PRINTNOW(); PRINTF("APP> MLMEInd STATUS: %s\r\n", EventInfoStatusStrings[MlmeIndication->Status] );    )

    switch( MlmeIndication->MlmeIndication )
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	781b      	ldrb	r3, [r3, #0]
 801409c:	2b06      	cmp	r3, #6
 801409e:	d104      	bne.n	80140aa <MlmeIndication+0x1a>
    {
        case MLME_SCHEDULE_UPLINK:
        {
            // The MAC signals that we shall provide an uplink as soon as possible
            LoRaMainCallbacks->LORA_TxNeeded( );			
 80140a0:	4b04      	ldr	r3, [pc, #16]	@ (80140b4 <MlmeIndication+0x24>)
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	69db      	ldr	r3, [r3, #28]
 80140a6:	4798      	blx	r3
            break;
 80140a8:	e000      	b.n	80140ac <MlmeIndication+0x1c>
            break;

        }
#endif /* LORAMAC_CLASSB_ENABLED */
        default:
            break;
 80140aa:	46c0      	nop			@ (mov r8, r8)
    }
}
 80140ac:	46c0      	nop			@ (mov r8, r8)
 80140ae:	46bd      	mov	sp, r7
 80140b0:	b004      	add	sp, #16
 80140b2:	bd80      	pop	{r7, pc}
 80140b4:	200013d8 	.word	0x200013d8

080140b8 <LORA_Init>:
/**
 *  lora Init
 */
void LORA_Init (LoRaMainCallback_t *callbacks, LoRaParam_t* LoRaParam )
{
 80140b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140ba:	46de      	mov	lr, fp
 80140bc:	4657      	mov	r7, sl
 80140be:	464e      	mov	r6, r9
 80140c0:	4645      	mov	r5, r8
 80140c2:	b5e0      	push	{r5, r6, r7, lr}
 80140c4:	b09b      	sub	sp, #108	@ 0x6c
 80140c6:	af0e      	add	r7, sp, #56	@ 0x38
 80140c8:	61f8      	str	r0, [r7, #28]
 80140ca:	61b9      	str	r1, [r7, #24]
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 80140cc:	2310      	movs	r3, #16
 80140ce:	2418      	movs	r4, #24
 80140d0:	191b      	adds	r3, r3, r4
 80140d2:	19db      	adds	r3, r3, r7
 80140d4:	4ab3      	ldr	r2, [pc, #716]	@ (80143a4 <LORA_Init+0x2ec>)
 80140d6:	ca03      	ldmia	r2!, {r0, r1}
 80140d8:	c303      	stmia	r3!, {r0, r1}
  uint8_t joinEui[] = LORAWAN_JOIN_EUI;
 80140da:	2308      	movs	r3, #8
 80140dc:	191b      	adds	r3, r3, r4
 80140de:	19db      	adds	r3, r3, r7
 80140e0:	4ab0      	ldr	r2, [pc, #704]	@ (80143a4 <LORA_Init+0x2ec>)
 80140e2:	ca03      	ldmia	r2!, {r0, r1}
 80140e4:	c303      	stmia	r3!, {r0, r1}
  
  /* init the Tx Duty Cycle*/
  LoRaParamInit = LoRaParam;
 80140e6:	4bb0      	ldr	r3, [pc, #704]	@ (80143a8 <LORA_Init+0x2f0>)
 80140e8:	69ba      	ldr	r2, [r7, #24]
 80140ea:	601a      	str	r2, [r3, #0]
  
  /* init the main call backs*/
  LoRaMainCallbacks = callbacks;
 80140ec:	4baf      	ldr	r3, [pc, #700]	@ (80143ac <LORA_Init+0x2f4>)
 80140ee:	69fa      	ldr	r2, [r7, #28]
 80140f0:	601a      	str	r2, [r3, #0]
  // Random seed initialization
  srand1( LoRaMainCallbacks->BoardGetRandomSeed( ) );
  // Choose a random device address
  DevAddr = randr( 0, 0x01FFFFFF );
#endif
  PPRINTF( "ABP\n\r"); 
 80140f2:	4baf      	ldr	r3, [pc, #700]	@ (80143b0 <LORA_Init+0x2f8>)
 80140f4:	0018      	movs	r0, r3
 80140f6:	f001 f9c5 	bl	8015484 <TraceSend>
 80140fa:	1e03      	subs	r3, r0, #0
 80140fc:	d1f9      	bne.n	80140f2 <LORA_Init+0x3a>
  PPRINTF( "DevEui= %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\n\r", HEX8(devEui));
 80140fe:	2010      	movs	r0, #16
 8014100:	2518      	movs	r5, #24
 8014102:	1943      	adds	r3, r0, r5
 8014104:	19db      	adds	r3, r3, r7
 8014106:	781b      	ldrb	r3, [r3, #0]
 8014108:	001e      	movs	r6, r3
 801410a:	1943      	adds	r3, r0, r5
 801410c:	19db      	adds	r3, r3, r7
 801410e:	785b      	ldrb	r3, [r3, #1]
 8014110:	469c      	mov	ip, r3
 8014112:	1943      	adds	r3, r0, r5
 8014114:	19db      	adds	r3, r3, r7
 8014116:	789b      	ldrb	r3, [r3, #2]
 8014118:	4698      	mov	r8, r3
 801411a:	1943      	adds	r3, r0, r5
 801411c:	19db      	adds	r3, r3, r7
 801411e:	78db      	ldrb	r3, [r3, #3]
 8014120:	001a      	movs	r2, r3
 8014122:	1943      	adds	r3, r0, r5
 8014124:	19db      	adds	r3, r3, r7
 8014126:	791b      	ldrb	r3, [r3, #4]
 8014128:	0019      	movs	r1, r3
 801412a:	1943      	adds	r3, r0, r5
 801412c:	19db      	adds	r3, r3, r7
 801412e:	795b      	ldrb	r3, [r3, #5]
 8014130:	001c      	movs	r4, r3
 8014132:	1943      	adds	r3, r0, r5
 8014134:	19db      	adds	r3, r3, r7
 8014136:	799b      	ldrb	r3, [r3, #6]
 8014138:	001d      	movs	r5, r3
 801413a:	2318      	movs	r3, #24
 801413c:	18c3      	adds	r3, r0, r3
 801413e:	19db      	adds	r3, r3, r7
 8014140:	79db      	ldrb	r3, [r3, #7]
 8014142:	489c      	ldr	r0, [pc, #624]	@ (80143b4 <LORA_Init+0x2fc>)
 8014144:	9304      	str	r3, [sp, #16]
 8014146:	9503      	str	r5, [sp, #12]
 8014148:	9402      	str	r4, [sp, #8]
 801414a:	9101      	str	r1, [sp, #4]
 801414c:	9200      	str	r2, [sp, #0]
 801414e:	4643      	mov	r3, r8
 8014150:	4662      	mov	r2, ip
 8014152:	0031      	movs	r1, r6
 8014154:	f001 f996 	bl	8015484 <TraceSend>
 8014158:	1e03      	subs	r3, r0, #0
 801415a:	d1d0      	bne.n	80140fe <LORA_Init+0x46>
  PPRINTF( "DevAdd=  %08X\n\r", DevAddr) ;
 801415c:	4b96      	ldr	r3, [pc, #600]	@ (80143b8 <LORA_Init+0x300>)
 801415e:	681a      	ldr	r2, [r3, #0]
 8014160:	4b96      	ldr	r3, [pc, #600]	@ (80143bc <LORA_Init+0x304>)
 8014162:	0011      	movs	r1, r2
 8014164:	0018      	movs	r0, r3
 8014166:	f001 f98d 	bl	8015484 <TraceSend>
 801416a:	1e03      	subs	r3, r0, #0
 801416c:	d1f6      	bne.n	801415c <LORA_Init+0xa4>
  PPRINTF( "NwkSKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(NwkSEncKey));
 801416e:	4b94      	ldr	r3, [pc, #592]	@ (80143c0 <LORA_Init+0x308>)
 8014170:	781b      	ldrb	r3, [r3, #0]
 8014172:	617b      	str	r3, [r7, #20]
 8014174:	4b92      	ldr	r3, [pc, #584]	@ (80143c0 <LORA_Init+0x308>)
 8014176:	785b      	ldrb	r3, [r3, #1]
 8014178:	613b      	str	r3, [r7, #16]
 801417a:	4b91      	ldr	r3, [pc, #580]	@ (80143c0 <LORA_Init+0x308>)
 801417c:	789b      	ldrb	r3, [r3, #2]
 801417e:	60fb      	str	r3, [r7, #12]
 8014180:	4b8f      	ldr	r3, [pc, #572]	@ (80143c0 <LORA_Init+0x308>)
 8014182:	78db      	ldrb	r3, [r3, #3]
 8014184:	001d      	movs	r5, r3
 8014186:	4b8e      	ldr	r3, [pc, #568]	@ (80143c0 <LORA_Init+0x308>)
 8014188:	791b      	ldrb	r3, [r3, #4]
 801418a:	001e      	movs	r6, r3
 801418c:	4b8c      	ldr	r3, [pc, #560]	@ (80143c0 <LORA_Init+0x308>)
 801418e:	795b      	ldrb	r3, [r3, #5]
 8014190:	469c      	mov	ip, r3
 8014192:	4b8b      	ldr	r3, [pc, #556]	@ (80143c0 <LORA_Init+0x308>)
 8014194:	799b      	ldrb	r3, [r3, #6]
 8014196:	4698      	mov	r8, r3
 8014198:	4b89      	ldr	r3, [pc, #548]	@ (80143c0 <LORA_Init+0x308>)
 801419a:	79db      	ldrb	r3, [r3, #7]
 801419c:	4699      	mov	r9, r3
 801419e:	4b88      	ldr	r3, [pc, #544]	@ (80143c0 <LORA_Init+0x308>)
 80141a0:	7a1b      	ldrb	r3, [r3, #8]
 80141a2:	469a      	mov	sl, r3
 80141a4:	4b86      	ldr	r3, [pc, #536]	@ (80143c0 <LORA_Init+0x308>)
 80141a6:	7a5b      	ldrb	r3, [r3, #9]
 80141a8:	469b      	mov	fp, r3
 80141aa:	4b85      	ldr	r3, [pc, #532]	@ (80143c0 <LORA_Init+0x308>)
 80141ac:	7a9b      	ldrb	r3, [r3, #10]
 80141ae:	60bb      	str	r3, [r7, #8]
 80141b0:	4b83      	ldr	r3, [pc, #524]	@ (80143c0 <LORA_Init+0x308>)
 80141b2:	7adb      	ldrb	r3, [r3, #11]
 80141b4:	607b      	str	r3, [r7, #4]
 80141b6:	4b82      	ldr	r3, [pc, #520]	@ (80143c0 <LORA_Init+0x308>)
 80141b8:	7b1b      	ldrb	r3, [r3, #12]
 80141ba:	001c      	movs	r4, r3
 80141bc:	4b80      	ldr	r3, [pc, #512]	@ (80143c0 <LORA_Init+0x308>)
 80141be:	7b5b      	ldrb	r3, [r3, #13]
 80141c0:	0019      	movs	r1, r3
 80141c2:	4b7f      	ldr	r3, [pc, #508]	@ (80143c0 <LORA_Init+0x308>)
 80141c4:	7b9b      	ldrb	r3, [r3, #14]
 80141c6:	001a      	movs	r2, r3
 80141c8:	4b7d      	ldr	r3, [pc, #500]	@ (80143c0 <LORA_Init+0x308>)
 80141ca:	7bdb      	ldrb	r3, [r3, #15]
 80141cc:	487d      	ldr	r0, [pc, #500]	@ (80143c4 <LORA_Init+0x30c>)
 80141ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80141d0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80141d2:	910a      	str	r1, [sp, #40]	@ 0x28
 80141d4:	9409      	str	r4, [sp, #36]	@ 0x24
 80141d6:	687c      	ldr	r4, [r7, #4]
 80141d8:	9408      	str	r4, [sp, #32]
 80141da:	68bc      	ldr	r4, [r7, #8]
 80141dc:	9407      	str	r4, [sp, #28]
 80141de:	465c      	mov	r4, fp
 80141e0:	9406      	str	r4, [sp, #24]
 80141e2:	4654      	mov	r4, sl
 80141e4:	9405      	str	r4, [sp, #20]
 80141e6:	464c      	mov	r4, r9
 80141e8:	9404      	str	r4, [sp, #16]
 80141ea:	4644      	mov	r4, r8
 80141ec:	9403      	str	r4, [sp, #12]
 80141ee:	4664      	mov	r4, ip
 80141f0:	9402      	str	r4, [sp, #8]
 80141f2:	9601      	str	r6, [sp, #4]
 80141f4:	9500      	str	r5, [sp, #0]
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	693a      	ldr	r2, [r7, #16]
 80141fa:	6979      	ldr	r1, [r7, #20]
 80141fc:	f001 f942 	bl	8015484 <TraceSend>
 8014200:	1e03      	subs	r3, r0, #0
 8014202:	d1b4      	bne.n	801416e <LORA_Init+0xb6>
  PPRINTF( "AppSKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(AppSKey));
 8014204:	4b70      	ldr	r3, [pc, #448]	@ (80143c8 <LORA_Init+0x310>)
 8014206:	781b      	ldrb	r3, [r3, #0]
 8014208:	617b      	str	r3, [r7, #20]
 801420a:	4b6f      	ldr	r3, [pc, #444]	@ (80143c8 <LORA_Init+0x310>)
 801420c:	785b      	ldrb	r3, [r3, #1]
 801420e:	613b      	str	r3, [r7, #16]
 8014210:	4b6d      	ldr	r3, [pc, #436]	@ (80143c8 <LORA_Init+0x310>)
 8014212:	789b      	ldrb	r3, [r3, #2]
 8014214:	60fb      	str	r3, [r7, #12]
 8014216:	4b6c      	ldr	r3, [pc, #432]	@ (80143c8 <LORA_Init+0x310>)
 8014218:	78db      	ldrb	r3, [r3, #3]
 801421a:	001d      	movs	r5, r3
 801421c:	4b6a      	ldr	r3, [pc, #424]	@ (80143c8 <LORA_Init+0x310>)
 801421e:	791b      	ldrb	r3, [r3, #4]
 8014220:	001e      	movs	r6, r3
 8014222:	4b69      	ldr	r3, [pc, #420]	@ (80143c8 <LORA_Init+0x310>)
 8014224:	795b      	ldrb	r3, [r3, #5]
 8014226:	469c      	mov	ip, r3
 8014228:	4b67      	ldr	r3, [pc, #412]	@ (80143c8 <LORA_Init+0x310>)
 801422a:	799b      	ldrb	r3, [r3, #6]
 801422c:	4698      	mov	r8, r3
 801422e:	4b66      	ldr	r3, [pc, #408]	@ (80143c8 <LORA_Init+0x310>)
 8014230:	79db      	ldrb	r3, [r3, #7]
 8014232:	4699      	mov	r9, r3
 8014234:	4b64      	ldr	r3, [pc, #400]	@ (80143c8 <LORA_Init+0x310>)
 8014236:	7a1b      	ldrb	r3, [r3, #8]
 8014238:	469a      	mov	sl, r3
 801423a:	4b63      	ldr	r3, [pc, #396]	@ (80143c8 <LORA_Init+0x310>)
 801423c:	7a5b      	ldrb	r3, [r3, #9]
 801423e:	469b      	mov	fp, r3
 8014240:	4b61      	ldr	r3, [pc, #388]	@ (80143c8 <LORA_Init+0x310>)
 8014242:	7a9b      	ldrb	r3, [r3, #10]
 8014244:	60bb      	str	r3, [r7, #8]
 8014246:	4b60      	ldr	r3, [pc, #384]	@ (80143c8 <LORA_Init+0x310>)
 8014248:	7adb      	ldrb	r3, [r3, #11]
 801424a:	607b      	str	r3, [r7, #4]
 801424c:	4b5e      	ldr	r3, [pc, #376]	@ (80143c8 <LORA_Init+0x310>)
 801424e:	7b1b      	ldrb	r3, [r3, #12]
 8014250:	001c      	movs	r4, r3
 8014252:	4b5d      	ldr	r3, [pc, #372]	@ (80143c8 <LORA_Init+0x310>)
 8014254:	7b5b      	ldrb	r3, [r3, #13]
 8014256:	0019      	movs	r1, r3
 8014258:	4b5b      	ldr	r3, [pc, #364]	@ (80143c8 <LORA_Init+0x310>)
 801425a:	7b9b      	ldrb	r3, [r3, #14]
 801425c:	001a      	movs	r2, r3
 801425e:	4b5a      	ldr	r3, [pc, #360]	@ (80143c8 <LORA_Init+0x310>)
 8014260:	7bdb      	ldrb	r3, [r3, #15]
 8014262:	485a      	ldr	r0, [pc, #360]	@ (80143cc <LORA_Init+0x314>)
 8014264:	930c      	str	r3, [sp, #48]	@ 0x30
 8014266:	920b      	str	r2, [sp, #44]	@ 0x2c
 8014268:	910a      	str	r1, [sp, #40]	@ 0x28
 801426a:	9409      	str	r4, [sp, #36]	@ 0x24
 801426c:	687c      	ldr	r4, [r7, #4]
 801426e:	9408      	str	r4, [sp, #32]
 8014270:	68bc      	ldr	r4, [r7, #8]
 8014272:	9407      	str	r4, [sp, #28]
 8014274:	465c      	mov	r4, fp
 8014276:	9406      	str	r4, [sp, #24]
 8014278:	4654      	mov	r4, sl
 801427a:	9405      	str	r4, [sp, #20]
 801427c:	464c      	mov	r4, r9
 801427e:	9404      	str	r4, [sp, #16]
 8014280:	4644      	mov	r4, r8
 8014282:	9403      	str	r4, [sp, #12]
 8014284:	4664      	mov	r4, ip
 8014286:	9402      	str	r4, [sp, #8]
 8014288:	9601      	str	r6, [sp, #4]
 801428a:	9500      	str	r5, [sp, #0]
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	693a      	ldr	r2, [r7, #16]
 8014290:	6979      	ldr	r1, [r7, #20]
 8014292:	f001 f8f7 	bl	8015484 <TraceSend>
 8014296:	1e03      	subs	r3, r0, #0
 8014298:	d1b4      	bne.n	8014204 <LORA_Init+0x14c>
#endif
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 801429a:	4b4d      	ldr	r3, [pc, #308]	@ (80143d0 <LORA_Init+0x318>)
 801429c:	4a4d      	ldr	r2, [pc, #308]	@ (80143d4 <LORA_Init+0x31c>)
 801429e:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 80142a0:	4b4b      	ldr	r3, [pc, #300]	@ (80143d0 <LORA_Init+0x318>)
 80142a2:	4a4d      	ldr	r2, [pc, #308]	@ (80143d8 <LORA_Init+0x320>)
 80142a4:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 80142a6:	4b4a      	ldr	r3, [pc, #296]	@ (80143d0 <LORA_Init+0x318>)
 80142a8:	4a4c      	ldr	r2, [pc, #304]	@ (80143dc <LORA_Init+0x324>)
 80142aa:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 80142ac:	4b48      	ldr	r3, [pc, #288]	@ (80143d0 <LORA_Init+0x318>)
 80142ae:	4a4c      	ldr	r2, [pc, #304]	@ (80143e0 <LORA_Init+0x328>)
 80142b0:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = LoRaMainCallbacks->BoardGetBatteryLevel;
 80142b2:	4b3e      	ldr	r3, [pc, #248]	@ (80143ac <LORA_Init+0x2f4>)
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	681a      	ldr	r2, [r3, #0]
 80142b8:	4b4a      	ldr	r3, [pc, #296]	@ (80143e4 <LORA_Init+0x32c>)
 80142ba:	601a      	str	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = LoRaMainCallbacks->BoardGetTemperatureLevel;
 80142bc:	4b3b      	ldr	r3, [pc, #236]	@ (80143ac <LORA_Init+0x2f4>)
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	685a      	ldr	r2, [r3, #4]
 80142c2:	4b48      	ldr	r3, [pc, #288]	@ (80143e4 <LORA_Init+0x32c>)
 80142c4:	605a      	str	r2, [r3, #4]
  LoRaMacCallbacks.MacProcessNotify = LoRaMainCallbacks->MacProcessNotify;
 80142c6:	4b39      	ldr	r3, [pc, #228]	@ (80143ac <LORA_Init+0x2f4>)
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	6a1a      	ldr	r2, [r3, #32]
 80142cc:	4b45      	ldr	r3, [pc, #276]	@ (80143e4 <LORA_Init+0x32c>)
 80142ce:	60da      	str	r2, [r3, #12]
#elif defined( REGION_CN779 )
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_CN779 );
#elif defined( REGION_EU433 )
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU433 );
#elif defined( REGION_IN865 )
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_IN865 );
 80142d0:	4944      	ldr	r1, [pc, #272]	@ (80143e4 <LORA_Init+0x32c>)
 80142d2:	4b3f      	ldr	r3, [pc, #252]	@ (80143d0 <LORA_Init+0x318>)
 80142d4:	2207      	movs	r2, #7
 80142d6:	0018      	movs	r0, r3
 80142d8:	f7f9 f8aa 	bl	800d430 <LoRaMacInitialization>
  mibReq.Param.ChannelsDefaultMask = channelMask;
  LoRaMacMibSetRequestConfirm( &mibReq );
#endif
#endif

  mibReq.Type = MIB_DEV_EUI;
 80142dc:	4b42      	ldr	r3, [pc, #264]	@ (80143e8 <LORA_Init+0x330>)
 80142de:	2202      	movs	r2, #2
 80142e0:	701a      	strb	r2, [r3, #0]
  mibReq.Param.DevEui = devEui;
 80142e2:	4b41      	ldr	r3, [pc, #260]	@ (80143e8 <LORA_Init+0x330>)
 80142e4:	2210      	movs	r2, #16
 80142e6:	2418      	movs	r4, #24
 80142e8:	1912      	adds	r2, r2, r4
 80142ea:	19d2      	adds	r2, r2, r7
 80142ec:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 80142ee:	4b3e      	ldr	r3, [pc, #248]	@ (80143e8 <LORA_Init+0x330>)
 80142f0:	0018      	movs	r0, r3
 80142f2:	f7f9 fe5d 	bl	800dfb0 <LoRaMacMibSetRequestConfirm>
  
  mibReq.Type = MIB_JOIN_EUI;
 80142f6:	4b3c      	ldr	r3, [pc, #240]	@ (80143e8 <LORA_Init+0x330>)
 80142f8:	2203      	movs	r2, #3
 80142fa:	701a      	strb	r2, [r3, #0]
  mibReq.Param.JoinEui = joinEui;
 80142fc:	4b3a      	ldr	r3, [pc, #232]	@ (80143e8 <LORA_Init+0x330>)
 80142fe:	2208      	movs	r2, #8
 8014300:	1912      	adds	r2, r2, r4
 8014302:	19d2      	adds	r2, r2, r7
 8014304:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 8014306:	4b38      	ldr	r3, [pc, #224]	@ (80143e8 <LORA_Init+0x330>)
 8014308:	0018      	movs	r0, r3
 801430a:	f7f9 fe51 	bl	800dfb0 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_ADR;
 801430e:	4b36      	ldr	r3, [pc, #216]	@ (80143e8 <LORA_Init+0x330>)
 8014310:	2204      	movs	r2, #4
 8014312:	701a      	strb	r2, [r3, #0]
  mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 8014314:	4b24      	ldr	r3, [pc, #144]	@ (80143a8 <LORA_Init+0x2f0>)
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	781a      	ldrb	r2, [r3, #0]
 801431a:	4b33      	ldr	r3, [pc, #204]	@ (80143e8 <LORA_Init+0x330>)
 801431c:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 801431e:	4b32      	ldr	r3, [pc, #200]	@ (80143e8 <LORA_Init+0x330>)
 8014320:	0018      	movs	r0, r3
 8014322:	f7f9 fe45 	bl	800dfb0 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_PUBLIC_NETWORK;
 8014326:	4b30      	ldr	r3, [pc, #192]	@ (80143e8 <LORA_Init+0x330>)
 8014328:	221d      	movs	r2, #29
 801432a:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnablePublicNetwork = LoRaParamInit->EnablePublicNetwork;
 801432c:	4b1e      	ldr	r3, [pc, #120]	@ (80143a8 <LORA_Init+0x2f0>)
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	789a      	ldrb	r2, [r3, #2]
 8014332:	4b2d      	ldr	r3, [pc, #180]	@ (80143e8 <LORA_Init+0x330>)
 8014334:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 8014336:	4b2c      	ldr	r3, [pc, #176]	@ (80143e8 <LORA_Init+0x330>)
 8014338:	0018      	movs	r0, r3
 801433a:	f7f9 fe39 	bl	800dfb0 <LoRaMacMibSetRequestConfirm>
  
  mibReq.Type = MIB_APP_KEY;
 801433e:	4b2a      	ldr	r3, [pc, #168]	@ (80143e8 <LORA_Init+0x330>)
 8014340:	2208      	movs	r2, #8
 8014342:	701a      	strb	r2, [r3, #0]
  mibReq.Param.AppKey = AppKey;
 8014344:	4b28      	ldr	r3, [pc, #160]	@ (80143e8 <LORA_Init+0x330>)
 8014346:	4a29      	ldr	r2, [pc, #164]	@ (80143ec <LORA_Init+0x334>)
 8014348:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 801434a:	4b27      	ldr	r3, [pc, #156]	@ (80143e8 <LORA_Init+0x330>)
 801434c:	0018      	movs	r0, r3
 801434e:	f7f9 fe2f 	bl	800dfb0 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_NWK_KEY;
 8014352:	4b25      	ldr	r3, [pc, #148]	@ (80143e8 <LORA_Init+0x330>)
 8014354:	2209      	movs	r2, #9
 8014356:	701a      	strb	r2, [r3, #0]
  mibReq.Param.NwkKey = NwkKey;
 8014358:	4b23      	ldr	r3, [pc, #140]	@ (80143e8 <LORA_Init+0x330>)
 801435a:	4a25      	ldr	r2, [pc, #148]	@ (80143f0 <LORA_Init+0x338>)
 801435c:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 801435e:	4b22      	ldr	r3, [pc, #136]	@ (80143e8 <LORA_Init+0x330>)
 8014360:	0018      	movs	r0, r3
 8014362:	f7f9 fe25 	bl	800dfb0 <LoRaMacMibSetRequestConfirm>
                      
  mibReq.Type = MIB_DEVICE_CLASS;
 8014366:	4b20      	ldr	r3, [pc, #128]	@ (80143e8 <LORA_Init+0x330>)
 8014368:	2200      	movs	r2, #0
 801436a:	701a      	strb	r2, [r3, #0]
  mibReq.Param.Class= CLASS_A;
 801436c:	4b1e      	ldr	r3, [pc, #120]	@ (80143e8 <LORA_Init+0x330>)
 801436e:	2200      	movs	r2, #0
 8014370:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 8014372:	4b1d      	ldr	r3, [pc, #116]	@ (80143e8 <LORA_Init+0x330>)
 8014374:	0018      	movs	r0, r3
 8014376:	f7f9 fe1b 	bl	800dfb0 <LoRaMacMibSetRequestConfirm>

#if defined( REGION_EU868 ) || defined( REGION_RU864 ) || defined( REGION_CN779 ) || defined( REGION_EU433 )
  LoRaMacTestSetDutyCycleOn( LORAWAN_DUTYCYCLE_ON );
#endif
      
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 801437a:	4b1b      	ldr	r3, [pc, #108]	@ (80143e8 <LORA_Init+0x330>)
 801437c:	2230      	movs	r2, #48	@ 0x30
 801437e:	701a      	strb	r2, [r3, #0]
  mibReq.Param.SystemMaxRxError = 20;
 8014380:	4b19      	ldr	r3, [pc, #100]	@ (80143e8 <LORA_Init+0x330>)
 8014382:	2214      	movs	r2, #20
 8014384:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 8014386:	4b18      	ldr	r3, [pc, #96]	@ (80143e8 <LORA_Init+0x330>)
 8014388:	0018      	movs	r0, r3
 801438a:	f7f9 fe11 	bl	800dfb0 <LoRaMacMibSetRequestConfirm>

  /*set Mac statein Idle*/
  LoRaMacStart( );
 801438e:	f7f9 fbf7 	bl	800db80 <LoRaMacStart>
}
 8014392:	46c0      	nop			@ (mov r8, r8)
 8014394:	46bd      	mov	sp, r7
 8014396:	b00d      	add	sp, #52	@ 0x34
 8014398:	bcf0      	pop	{r4, r5, r6, r7}
 801439a:	46bb      	mov	fp, r7
 801439c:	46b2      	mov	sl, r6
 801439e:	46a9      	mov	r9, r5
 80143a0:	46a0      	mov	r8, r4
 80143a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143a4:	0801ac60 	.word	0x0801ac60
 80143a8:	20001394 	.word	0x20001394
 80143ac:	200013d8 	.word	0x200013d8
 80143b0:	0801ab5c 	.word	0x0801ab5c
 80143b4:	0801ab64 	.word	0x0801ab64
 80143b8:	200000c8 	.word	0x200000c8
 80143bc:	0801ab98 	.word	0x0801ab98
 80143c0:	200000a8 	.word	0x200000a8
 80143c4:	0801aba8 	.word	0x0801aba8
 80143c8:	200000b8 	.word	0x200000b8
 80143cc:	0801ac04 	.word	0x0801ac04
 80143d0:	20001398 	.word	0x20001398
 80143d4:	08013f41 	.word	0x08013f41
 80143d8:	08013f85 	.word	0x08013f85
 80143dc:	0801403d 	.word	0x0801403d
 80143e0:	08014091 	.word	0x08014091
 80143e4:	200013a8 	.word	0x200013a8
 80143e8:	200013b8 	.word	0x200013b8
 80143ec:	20001370 	.word	0x20001370
 80143f0:	20001380 	.word	0x20001380

080143f4 <LORA_Join>:


void LORA_Join( void)
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b086      	sub	sp, #24
 80143f8:	af00      	add	r7, sp, #0
    MlmeReq_t mlmeReq;
  
    mlmeReq.Type = MLME_JOIN;
 80143fa:	2108      	movs	r1, #8
 80143fc:	187b      	adds	r3, r7, r1
 80143fe:	2200      	movs	r2, #0
 8014400:	701a      	strb	r2, [r3, #0]
    mlmeReq.Req.Join.Datarate = LoRaParamInit->TxDatarate;
 8014402:	4b38      	ldr	r3, [pc, #224]	@ (80144e4 <LORA_Join+0xf0>)
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	785b      	ldrb	r3, [r3, #1]
 8014408:	b25b      	sxtb	r3, r3
 801440a:	b2da      	uxtb	r2, r3
 801440c:	187b      	adds	r3, r7, r1
 801440e:	711a      	strb	r2, [r3, #4]
  
    JoinParameters = mlmeReq.Req.Join;
 8014410:	4b35      	ldr	r3, [pc, #212]	@ (80144e8 <LORA_Join+0xf4>)
 8014412:	187a      	adds	r2, r7, r1
 8014414:	7912      	ldrb	r2, [r2, #4]
 8014416:	701a      	strb	r2, [r3, #0]

#if( OVER_THE_AIR_ACTIVATION != 0 )
    LoRaMacMlmeRequest( &mlmeReq );
#else
    mibReq.Type = MIB_NET_ID;
 8014418:	4b34      	ldr	r3, [pc, #208]	@ (80144ec <LORA_Join+0xf8>)
 801441a:	2205      	movs	r2, #5
 801441c:	701a      	strb	r2, [r3, #0]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 801441e:	4b33      	ldr	r3, [pc, #204]	@ (80144ec <LORA_Join+0xf8>)
 8014420:	2200      	movs	r2, #0
 8014422:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8014424:	4b31      	ldr	r3, [pc, #196]	@ (80144ec <LORA_Join+0xf8>)
 8014426:	0018      	movs	r0, r3
 8014428:	f7f9 fdc2 	bl	800dfb0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_ADDR;
 801442c:	4b2f      	ldr	r3, [pc, #188]	@ (80144ec <LORA_Join+0xf8>)
 801442e:	2206      	movs	r2, #6
 8014430:	701a      	strb	r2, [r3, #0]
    mibReq.Param.DevAddr = DevAddr;
 8014432:	4b2f      	ldr	r3, [pc, #188]	@ (80144f0 <LORA_Join+0xfc>)
 8014434:	681a      	ldr	r2, [r3, #0]
 8014436:	4b2d      	ldr	r3, [pc, #180]	@ (80144ec <LORA_Join+0xf8>)
 8014438:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801443a:	4b2c      	ldr	r3, [pc, #176]	@ (80144ec <LORA_Join+0xf8>)
 801443c:	0018      	movs	r0, r3
 801443e:	f7f9 fdb7 	bl	800dfb0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_F_NWK_S_INT_KEY;
 8014442:	4b2a      	ldr	r3, [pc, #168]	@ (80144ec <LORA_Join+0xf8>)
 8014444:	220c      	movs	r2, #12
 8014446:	701a      	strb	r2, [r3, #0]
    mibReq.Param.FNwkSIntKey = FNwkSIntKey;
 8014448:	4b28      	ldr	r3, [pc, #160]	@ (80144ec <LORA_Join+0xf8>)
 801444a:	4a2a      	ldr	r2, [pc, #168]	@ (80144f4 <LORA_Join+0x100>)
 801444c:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801444e:	4b27      	ldr	r3, [pc, #156]	@ (80144ec <LORA_Join+0xf8>)
 8014450:	0018      	movs	r0, r3
 8014452:	f7f9 fdad 	bl	800dfb0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_S_NWK_S_INT_KEY;
 8014456:	4b25      	ldr	r3, [pc, #148]	@ (80144ec <LORA_Join+0xf8>)
 8014458:	220d      	movs	r2, #13
 801445a:	701a      	strb	r2, [r3, #0]
    mibReq.Param.SNwkSIntKey = SNwkSIntKey;
 801445c:	4b23      	ldr	r3, [pc, #140]	@ (80144ec <LORA_Join+0xf8>)
 801445e:	4a26      	ldr	r2, [pc, #152]	@ (80144f8 <LORA_Join+0x104>)
 8014460:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8014462:	4b22      	ldr	r3, [pc, #136]	@ (80144ec <LORA_Join+0xf8>)
 8014464:	0018      	movs	r0, r3
 8014466:	f7f9 fda3 	bl	800dfb0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NWK_S_ENC_KEY;
 801446a:	4b20      	ldr	r3, [pc, #128]	@ (80144ec <LORA_Join+0xf8>)
 801446c:	220e      	movs	r2, #14
 801446e:	701a      	strb	r2, [r3, #0]
    mibReq.Param.NwkSEncKey = NwkSEncKey;
 8014470:	4b1e      	ldr	r3, [pc, #120]	@ (80144ec <LORA_Join+0xf8>)
 8014472:	4a22      	ldr	r2, [pc, #136]	@ (80144fc <LORA_Join+0x108>)
 8014474:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8014476:	4b1d      	ldr	r3, [pc, #116]	@ (80144ec <LORA_Join+0xf8>)
 8014478:	0018      	movs	r0, r3
 801447a:	f7f9 fd99 	bl	800dfb0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_APP_S_KEY;
 801447e:	4b1b      	ldr	r3, [pc, #108]	@ (80144ec <LORA_Join+0xf8>)
 8014480:	220f      	movs	r2, #15
 8014482:	701a      	strb	r2, [r3, #0]
    mibReq.Param.AppSKey = AppSKey;
 8014484:	4b19      	ldr	r3, [pc, #100]	@ (80144ec <LORA_Join+0xf8>)
 8014486:	4a1e      	ldr	r2, [pc, #120]	@ (8014500 <LORA_Join+0x10c>)
 8014488:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801448a:	4b18      	ldr	r3, [pc, #96]	@ (80144ec <LORA_Join+0xf8>)
 801448c:	0018      	movs	r0, r3
 801448e:	f7f9 fd8f 	bl	800dfb0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8014492:	4b16      	ldr	r3, [pc, #88]	@ (80144ec <LORA_Join+0xf8>)
 8014494:	2201      	movs	r2, #1
 8014496:	701a      	strb	r2, [r3, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8014498:	4b14      	ldr	r3, [pc, #80]	@ (80144ec <LORA_Join+0xf8>)
 801449a:	2201      	movs	r2, #1
 801449c:	711a      	strb	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801449e:	4b13      	ldr	r3, [pc, #76]	@ (80144ec <LORA_Join+0xf8>)
 80144a0:	0018      	movs	r0, r3
 80144a2:	f7f9 fd85 	bl	800dfb0 <LoRaMacMibSetRequestConfirm>
    
    // Enable legacy mode to operate according to LoRaWAN Spec. 1.0.3
    Version_t abpLrWanVersion;

    abpLrWanVersion.Fields.Major    = 1;
 80144a6:	1d3b      	adds	r3, r7, #4
 80144a8:	2201      	movs	r2, #1
 80144aa:	70da      	strb	r2, [r3, #3]
    abpLrWanVersion.Fields.Minor    = 0;
 80144ac:	1d3b      	adds	r3, r7, #4
 80144ae:	2200      	movs	r2, #0
 80144b0:	709a      	strb	r2, [r3, #2]
    abpLrWanVersion.Fields.Revision = 3;
 80144b2:	1d3b      	adds	r3, r7, #4
 80144b4:	2203      	movs	r2, #3
 80144b6:	705a      	strb	r2, [r3, #1]
    abpLrWanVersion.Fields.Rfu      = 0;
 80144b8:	1d3b      	adds	r3, r7, #4
 80144ba:	2200      	movs	r2, #0
 80144bc:	701a      	strb	r2, [r3, #0]

    mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80144be:	4b0b      	ldr	r3, [pc, #44]	@ (80144ec <LORA_Join+0xf8>)
 80144c0:	2235      	movs	r2, #53	@ 0x35
 80144c2:	701a      	strb	r2, [r3, #0]
    mibReq.Param.AbpLrWanVersion = abpLrWanVersion;
 80144c4:	4b09      	ldr	r3, [pc, #36]	@ (80144ec <LORA_Join+0xf8>)
 80144c6:	687a      	ldr	r2, [r7, #4]
 80144c8:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80144ca:	4b08      	ldr	r3, [pc, #32]	@ (80144ec <LORA_Join+0xf8>)
 80144cc:	0018      	movs	r0, r3
 80144ce:	f7f9 fd6f 	bl	800dfb0 <LoRaMacMibSetRequestConfirm>

    LoRaMainCallbacks->LORA_HasJoined();
 80144d2:	4b0c      	ldr	r3, [pc, #48]	@ (8014504 <LORA_Join+0x110>)
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	695b      	ldr	r3, [r3, #20]
 80144d8:	4798      	blx	r3
#endif
}
 80144da:	46c0      	nop			@ (mov r8, r8)
 80144dc:	46bd      	mov	sp, r7
 80144de:	b006      	add	sp, #24
 80144e0:	bd80      	pop	{r7, pc}
 80144e2:	46c0      	nop			@ (mov r8, r8)
 80144e4:	20001394 	.word	0x20001394
 80144e8:	20001390 	.word	0x20001390
 80144ec:	200013b8 	.word	0x200013b8
 80144f0:	200000c8 	.word	0x200000c8
 80144f4:	20000088 	.word	0x20000088
 80144f8:	20000098 	.word	0x20000098
 80144fc:	200000a8 	.word	0x200000a8
 8014500:	200000b8 	.word	0x200000b8
 8014504:	200013d8 	.word	0x200013d8

08014508 <LORA_JoinStatus>:

LoraFlagStatus LORA_JoinStatus( void)
{
 8014508:	b580      	push	{r7, lr}
 801450a:	b088      	sub	sp, #32
 801450c:	af00      	add	r7, sp, #0
  MibRequestConfirm_t mibReq;

  mibReq.Type = MIB_NETWORK_ACTIVATION;
 801450e:	003b      	movs	r3, r7
 8014510:	2201      	movs	r2, #1
 8014512:	701a      	strb	r2, [r3, #0]
  
  LoRaMacMibGetRequestConfirm( &mibReq );
 8014514:	003b      	movs	r3, r7
 8014516:	0018      	movs	r0, r3
 8014518:	f7f9 fbee 	bl	800dcf8 <LoRaMacMibGetRequestConfirm>

  if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 801451c:	003b      	movs	r3, r7
 801451e:	791b      	ldrb	r3, [r3, #4]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d101      	bne.n	8014528 <LORA_JoinStatus+0x20>
  {
    return LORA_RESET;
 8014524:	2300      	movs	r3, #0
 8014526:	e000      	b.n	801452a <LORA_JoinStatus+0x22>
  }
  else
  {
    return LORA_SET;
 8014528:	2301      	movs	r3, #1
  }
}
 801452a:	0018      	movs	r0, r3
 801452c:	46bd      	mov	sp, r7
 801452e:	b008      	add	sp, #32
 8014530:	bd80      	pop	{r7, pc}
	...

08014534 <LORA_send>:



bool LORA_send(lora_AppData_t* AppData, LoraConfirm_t IsTxConfirmed)
{
 8014534:	b580      	push	{r7, lr}
 8014536:	b088      	sub	sp, #32
 8014538:	af00      	add	r7, sp, #0
 801453a:	6078      	str	r0, [r7, #4]
 801453c:	000a      	movs	r2, r1
 801453e:	1cfb      	adds	r3, r7, #3
 8014540:	701a      	strb	r2, [r3, #0]
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;
  
    /*if certification test are on going, application data is not sent*/
    if (certif_running() == true)
 8014542:	f7ff fab3 	bl	8013aac <certif_running>
 8014546:	1e03      	subs	r3, r0, #0
 8014548:	d001      	beq.n	801454e <LORA_send+0x1a>
    {
      return false;
 801454a:	2300      	movs	r3, #0
 801454c:	e05a      	b.n	8014604 <LORA_send+0xd0>
    }
    
    if( LoRaMacQueryTxPossible( AppData->BuffSize, &txInfo ) != LORAMAC_STATUS_OK )
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	791b      	ldrb	r3, [r3, #4]
 8014552:	220c      	movs	r2, #12
 8014554:	18ba      	adds	r2, r7, r2
 8014556:	0011      	movs	r1, r2
 8014558:	0018      	movs	r0, r3
 801455a:	f7f9 fb1f 	bl	800db9c <LoRaMacQueryTxPossible>
 801455e:	1e03      	subs	r3, r0, #0
 8014560:	d010      	beq.n	8014584 <LORA_send+0x50>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8014562:	2110      	movs	r1, #16
 8014564:	187b      	adds	r3, r7, r1
 8014566:	2200      	movs	r2, #0
 8014568:	701a      	strb	r2, [r3, #0]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 801456a:	187b      	adds	r3, r7, r1
 801456c:	2200      	movs	r2, #0
 801456e:	609a      	str	r2, [r3, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8014570:	187b      	adds	r3, r7, r1
 8014572:	2200      	movs	r2, #0
 8014574:	819a      	strh	r2, [r3, #12]
        mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 8014576:	4b25      	ldr	r3, [pc, #148]	@ (801460c <LORA_send+0xd8>)
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	2201      	movs	r2, #1
 801457c:	569a      	ldrsb	r2, [r3, r2]
 801457e:	187b      	adds	r3, r7, r1
 8014580:	739a      	strb	r2, [r3, #14]
 8014582:	e035      	b.n	80145f0 <LORA_send+0xbc>
    }
    else
    {
        if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 8014584:	1cfb      	adds	r3, r7, #3
 8014586:	781b      	ldrb	r3, [r3, #0]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d117      	bne.n	80145bc <LORA_send+0x88>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 801458c:	2110      	movs	r1, #16
 801458e:	187b      	adds	r3, r7, r1
 8014590:	2200      	movs	r2, #0
 8014592:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Unconfirmed.fPort = AppData->Port;
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	795a      	ldrb	r2, [r3, #5]
 8014598:	187b      	adds	r3, r7, r1
 801459a:	711a      	strb	r2, [r3, #4]
            mcpsReq.Req.Unconfirmed.fBufferSize = AppData->BuffSize;
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	791b      	ldrb	r3, [r3, #4]
 80145a0:	001a      	movs	r2, r3
 80145a2:	187b      	adds	r3, r7, r1
 80145a4:	819a      	strh	r2, [r3, #12]
            mcpsReq.Req.Unconfirmed.fBuffer = AppData->Buff;
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	681a      	ldr	r2, [r3, #0]
 80145aa:	187b      	adds	r3, r7, r1
 80145ac:	609a      	str	r2, [r3, #8]
            mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 80145ae:	4b17      	ldr	r3, [pc, #92]	@ (801460c <LORA_send+0xd8>)
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	2201      	movs	r2, #1
 80145b4:	569a      	ldrsb	r2, [r3, r2]
 80145b6:	187b      	adds	r3, r7, r1
 80145b8:	739a      	strb	r2, [r3, #14]
 80145ba:	e019      	b.n	80145f0 <LORA_send+0xbc>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 80145bc:	2110      	movs	r1, #16
 80145be:	187b      	adds	r3, r7, r1
 80145c0:	2201      	movs	r2, #1
 80145c2:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Confirmed.fPort = AppData->Port;
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	795a      	ldrb	r2, [r3, #5]
 80145c8:	187b      	adds	r3, r7, r1
 80145ca:	711a      	strb	r2, [r3, #4]
            mcpsReq.Req.Confirmed.fBufferSize = AppData->BuffSize;
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	791b      	ldrb	r3, [r3, #4]
 80145d0:	001a      	movs	r2, r3
 80145d2:	187b      	adds	r3, r7, r1
 80145d4:	819a      	strh	r2, [r3, #12]
            mcpsReq.Req.Confirmed.fBuffer = AppData->Buff;
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	681a      	ldr	r2, [r3, #0]
 80145da:	187b      	adds	r3, r7, r1
 80145dc:	609a      	str	r2, [r3, #8]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 80145de:	187b      	adds	r3, r7, r1
 80145e0:	2208      	movs	r2, #8
 80145e2:	73da      	strb	r2, [r3, #15]
            mcpsReq.Req.Confirmed.Datarate = LoRaParamInit->TxDatarate;
 80145e4:	4b09      	ldr	r3, [pc, #36]	@ (801460c <LORA_send+0xd8>)
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	2201      	movs	r2, #1
 80145ea:	569a      	ldrsb	r2, [r3, r2]
 80145ec:	187b      	adds	r3, r7, r1
 80145ee:	739a      	strb	r2, [r3, #14]
        }
    }
    if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 80145f0:	2310      	movs	r3, #16
 80145f2:	18fb      	adds	r3, r7, r3
 80145f4:	0018      	movs	r0, r3
 80145f6:	f7fa fb21 	bl	800ec3c <LoRaMacMcpsRequest>
 80145fa:	1e03      	subs	r3, r0, #0
 80145fc:	d101      	bne.n	8014602 <LORA_send+0xce>
    {
        return false;
 80145fe:	2300      	movs	r3, #0
 8014600:	e000      	b.n	8014604 <LORA_send+0xd0>
    }
    return true;
 8014602:	2301      	movs	r3, #1
}  
 8014604:	0018      	movs	r0, r3
 8014606:	46bd      	mov	sp, r7
 8014608:	b008      	add	sp, #32
 801460a:	bd80      	pop	{r7, pc}
 801460c:	20001394 	.word	0x20001394

08014610 <LORA_RequestClass>:
  }
}
#endif /* LORAMAC_CLASSB_ENABLED */

LoraErrorStatus LORA_RequestClass( DeviceClass_t newClass )
{
 8014610:	b590      	push	{r4, r7, lr}
 8014612:	b08d      	sub	sp, #52	@ 0x34
 8014614:	af00      	add	r7, sp, #0
 8014616:	0002      	movs	r2, r0
 8014618:	1dfb      	adds	r3, r7, #7
 801461a:	701a      	strb	r2, [r3, #0]
  LoraErrorStatus Errorstatus = LORA_SUCCESS;
 801461c:	232f      	movs	r3, #47	@ 0x2f
 801461e:	18fb      	adds	r3, r7, r3
 8014620:	2200      	movs	r2, #0
 8014622:	701a      	strb	r2, [r3, #0]
  MibRequestConfirm_t mibReq;
  DeviceClass_t currentClass;
  
  mibReq.Type = MIB_DEVICE_CLASS;
 8014624:	240c      	movs	r4, #12
 8014626:	193b      	adds	r3, r7, r4
 8014628:	2200      	movs	r2, #0
 801462a:	701a      	strb	r2, [r3, #0]
  LoRaMacMibGetRequestConfirm( &mibReq );
 801462c:	193b      	adds	r3, r7, r4
 801462e:	0018      	movs	r0, r3
 8014630:	f7f9 fb62 	bl	800dcf8 <LoRaMacMibGetRequestConfirm>
  
  currentClass = mibReq.Param.Class;
 8014634:	212e      	movs	r1, #46	@ 0x2e
 8014636:	187b      	adds	r3, r7, r1
 8014638:	193a      	adds	r2, r7, r4
 801463a:	7912      	ldrb	r2, [r2, #4]
 801463c:	701a      	strb	r2, [r3, #0]
  /*attempt to swicth only if class update*/
  if (currentClass != newClass)
 801463e:	187a      	adds	r2, r7, r1
 8014640:	1dfb      	adds	r3, r7, #7
 8014642:	7812      	ldrb	r2, [r2, #0]
 8014644:	781b      	ldrb	r3, [r3, #0]
 8014646:	429a      	cmp	r2, r3
 8014648:	d042      	beq.n	80146d0 <LORA_RequestClass+0xc0>
  {
    switch (newClass)
 801464a:	1dfb      	adds	r3, r7, #7
 801464c:	781b      	ldrb	r3, [r3, #0]
 801464e:	2b02      	cmp	r3, #2
 8014650:	d01f      	beq.n	8014692 <LORA_RequestClass+0x82>
 8014652:	dc3c      	bgt.n	80146ce <LORA_RequestClass+0xbe>
 8014654:	2b00      	cmp	r3, #0
 8014656:	d002      	beq.n	801465e <LORA_RequestClass+0x4e>
 8014658:	2b01      	cmp	r3, #1
 801465a:	d015      	beq.n	8014688 <LORA_RequestClass+0x78>
            Errorstatus = LORA_ERROR;
        }
        break;
      }
      default:
        break;
 801465c:	e037      	b.n	80146ce <LORA_RequestClass+0xbe>
        mibReq.Param.Class = CLASS_A;
 801465e:	210c      	movs	r1, #12
 8014660:	187b      	adds	r3, r7, r1
 8014662:	2200      	movs	r2, #0
 8014664:	711a      	strb	r2, [r3, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8014666:	187b      	adds	r3, r7, r1
 8014668:	0018      	movs	r0, r3
 801466a:	f7f9 fca1 	bl	800dfb0 <LoRaMacMibSetRequestConfirm>
 801466e:	1e03      	subs	r3, r0, #0
 8014670:	d105      	bne.n	801467e <LORA_RequestClass+0x6e>
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_A);
 8014672:	4b1b      	ldr	r3, [pc, #108]	@ (80146e0 <LORA_RequestClass+0xd0>)
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	699b      	ldr	r3, [r3, #24]
 8014678:	2000      	movs	r0, #0
 801467a:	4798      	blx	r3
        break;
 801467c:	e028      	b.n	80146d0 <LORA_RequestClass+0xc0>
          Errorstatus = LORA_ERROR;
 801467e:	232f      	movs	r3, #47	@ 0x2f
 8014680:	18fb      	adds	r3, r7, r3
 8014682:	22ff      	movs	r2, #255	@ 0xff
 8014684:	701a      	strb	r2, [r3, #0]
        break;
 8014686:	e023      	b.n	80146d0 <LORA_RequestClass+0xc0>
        PRINTF( "warning: LORAMAC_CLASSB_ENABLED has not been defined at compilation\n\r");
 8014688:	4b16      	ldr	r3, [pc, #88]	@ (80146e4 <LORA_RequestClass+0xd4>)
 801468a:	0018      	movs	r0, r3
 801468c:	f000 fefa 	bl	8015484 <TraceSend>
        break;
 8014690:	e01e      	b.n	80146d0 <LORA_RequestClass+0xc0>
        if (currentClass != CLASS_A)
 8014692:	232e      	movs	r3, #46	@ 0x2e
 8014694:	18fb      	adds	r3, r7, r3
 8014696:	781b      	ldrb	r3, [r3, #0]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d003      	beq.n	80146a4 <LORA_RequestClass+0x94>
          Errorstatus = LORA_ERROR;
 801469c:	232f      	movs	r3, #47	@ 0x2f
 801469e:	18fb      	adds	r3, r7, r3
 80146a0:	22ff      	movs	r2, #255	@ 0xff
 80146a2:	701a      	strb	r2, [r3, #0]
        mibReq.Param.Class = CLASS_C;
 80146a4:	210c      	movs	r1, #12
 80146a6:	187b      	adds	r3, r7, r1
 80146a8:	2202      	movs	r2, #2
 80146aa:	711a      	strb	r2, [r3, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80146ac:	187b      	adds	r3, r7, r1
 80146ae:	0018      	movs	r0, r3
 80146b0:	f7f9 fc7e 	bl	800dfb0 <LoRaMacMibSetRequestConfirm>
 80146b4:	1e03      	subs	r3, r0, #0
 80146b6:	d105      	bne.n	80146c4 <LORA_RequestClass+0xb4>
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_C);
 80146b8:	4b09      	ldr	r3, [pc, #36]	@ (80146e0 <LORA_RequestClass+0xd0>)
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	699b      	ldr	r3, [r3, #24]
 80146be:	2002      	movs	r0, #2
 80146c0:	4798      	blx	r3
        break;
 80146c2:	e005      	b.n	80146d0 <LORA_RequestClass+0xc0>
            Errorstatus = LORA_ERROR;
 80146c4:	232f      	movs	r3, #47	@ 0x2f
 80146c6:	18fb      	adds	r3, r7, r3
 80146c8:	22ff      	movs	r2, #255	@ 0xff
 80146ca:	701a      	strb	r2, [r3, #0]
        break;
 80146cc:	e000      	b.n	80146d0 <LORA_RequestClass+0xc0>
        break;
 80146ce:	46c0      	nop			@ (mov r8, r8)
    } 
  }
  return Errorstatus;
 80146d0:	232f      	movs	r3, #47	@ 0x2f
 80146d2:	18fb      	adds	r3, r7, r3
 80146d4:	781b      	ldrb	r3, [r3, #0]
 80146d6:	b25b      	sxtb	r3, r3
}
 80146d8:	0018      	movs	r0, r3
 80146da:	46bd      	mov	sp, r7
 80146dc:	b00d      	add	sp, #52	@ 0x34
 80146de:	bd90      	pop	{r4, r7, pc}
 80146e0:	200013d8 	.word	0x200013d8
 80146e4:	0801ac68 	.word	0x0801ac68

080146e8 <TraceUpLinkFrame>:
  *currentClass = mibReq.Param.Class;
}


static void TraceUpLinkFrame(McpsConfirm_t *mcpsConfirm)
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b096      	sub	sp, #88	@ 0x58
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]

    MibRequestConfirm_t mibGet;
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_DEVICE_CLASS;
 80146f0:	2114      	movs	r1, #20
 80146f2:	187b      	adds	r3, r7, r1
 80146f4:	2200      	movs	r2, #0
 80146f6:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 80146f8:	187b      	adds	r3, r7, r1
 80146fa:	0018      	movs	r0, r3
 80146fc:	f7f9 fafc 	bl	800dcf8 <LoRaMacMibGetRequestConfirm>
                             "ABC"[mibReq.Param.Class], \
                             AppData.Port, \
                             AppData.BuffSize, \
                             mcpsConfirm->TxPower );)

    mibGet.Type  = MIB_CHANNELS_MASK;
 8014700:	2134      	movs	r1, #52	@ 0x34
 8014702:	187b      	adds	r3, r7, r1
 8014704:	2224      	movs	r2, #36	@ 0x24
 8014706:	701a      	strb	r2, [r3, #0]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 8014708:	187b      	adds	r3, r7, r1
 801470a:	0018      	movs	r0, r3
 801470c:	f7f9 faf4 	bl	800dcf8 <LoRaMacMibGetRequestConfirm>
 8014710:	1e03      	subs	r3, r0, #0
 8014712:	d10f      	bne.n	8014734 <TraceUpLinkFrame+0x4c>
#if defined( REGION_AS923 ) || defined( REGION_CN779 ) || \
    defined( REGION_EU868 ) || defined( REGION_IN865 ) || \
    defined( REGION_KR920 ) || defined( REGION_EU433 ) || \
    defined( REGION_RU864 )

        for( uint8_t i = 0; i < 1; i++)
 8014714:	2357      	movs	r3, #87	@ 0x57
 8014716:	18fb      	adds	r3, r7, r3
 8014718:	2200      	movs	r2, #0
 801471a:	701a      	strb	r2, [r3, #0]
 801471c:	e005      	b.n	801472a <TraceUpLinkFrame+0x42>
 801471e:	2157      	movs	r1, #87	@ 0x57
 8014720:	187b      	adds	r3, r7, r1
 8014722:	781a      	ldrb	r2, [r3, #0]
 8014724:	187b      	adds	r3, r7, r1
 8014726:	3201      	adds	r2, #1
 8014728:	701a      	strb	r2, [r3, #0]
 801472a:	2357      	movs	r3, #87	@ 0x57
 801472c:	18fb      	adds	r3, r7, r3
 801472e:	781b      	ldrb	r3, [r3, #0]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d0f4      	beq.n	801471e <TraceUpLinkFrame+0x36>
            TVL2( PRINTF( "%04X ", mibGet.Param.ChannelsMask[i] );)
        }
    }

    TVL2( PRINTF("\r\n\r\n" );)
} 
 8014734:	46c0      	nop			@ (mov r8, r8)
 8014736:	46bd      	mov	sp, r7
 8014738:	b016      	add	sp, #88	@ 0x58
 801473a:	bd80      	pop	{r7, pc}

0801473c <TraceDownLinkFrame>:


static void TraceDownLinkFrame(McpsIndication_t *mcpsIndication)
{
 801473c:	b590      	push	{r4, r7, lr}
 801473e:	b08b      	sub	sp, #44	@ 0x2c
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
    const char *slotStrings[] = { "1", "2", "C", "Ping-Slot", "Multicast Ping-Slot" };
 8014744:	2314      	movs	r3, #20
 8014746:	18fb      	adds	r3, r7, r3
 8014748:	4a04      	ldr	r2, [pc, #16]	@ (801475c <TraceDownLinkFrame+0x20>)
 801474a:	ca13      	ldmia	r2!, {r0, r1, r4}
 801474c:	c313      	stmia	r3!, {r0, r1, r4}
 801474e:	ca03      	ldmia	r2!, {r0, r1}
 8014750:	c303      	stmia	r3!, {r0, r1}
                             slotStrings[mcpsIndication->RxSlot], \
                             mcpsIndication->Port, \
                             mcpsIndication->BufferSize, \
                             mcpsIndication->Rssi, \
                             mcpsIndication->Snr );)
}  
 8014752:	46c0      	nop			@ (mov r8, r8)
 8014754:	46bd      	mov	sp, r7
 8014756:	b00b      	add	sp, #44	@ 0x2c
 8014758:	bd90      	pop	{r4, r7, pc}
 801475a:	46c0      	nop			@ (mov r8, r8)
 801475c:	0801acdc 	.word	0x0801acdc

08014760 <LPM_SetOffMode>:

/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void LPM_SetOffMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b086      	sub	sp, #24
 8014764:	af00      	add	r7, sp, #0
 8014766:	0002      	movs	r2, r0
 8014768:	1dfb      	adds	r3, r7, #7
 801476a:	701a      	strb	r2, [r3, #0]
 801476c:	1dbb      	adds	r3, r7, #6
 801476e:	1c0a      	adds	r2, r1, #0
 8014770:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014772:	f3ef 8310 	mrs	r3, PRIMASK
 8014776:	613b      	str	r3, [r7, #16]
  return(result);
 8014778:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 801477a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801477c:	b672      	cpsid	i
}
 801477e:	46c0      	nop			@ (mov r8, r8)
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 8014780:	1dbb      	adds	r3, r7, #6
 8014782:	781b      	ldrb	r3, [r3, #0]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d009      	beq.n	801479c <LPM_SetOffMode+0x3c>
 8014788:	2b01      	cmp	r3, #1
 801478a:	d110      	bne.n	80147ae <LPM_SetOffMode+0x4e>
  {
    case LPM_Disable:
    {
      OffModeDisable |= (uint32_t)id;
 801478c:	1dfb      	adds	r3, r7, #7
 801478e:	781a      	ldrb	r2, [r3, #0]
 8014790:	4b0c      	ldr	r3, [pc, #48]	@ (80147c4 <LPM_SetOffMode+0x64>)
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	431a      	orrs	r2, r3
 8014796:	4b0b      	ldr	r3, [pc, #44]	@ (80147c4 <LPM_SetOffMode+0x64>)
 8014798:	601a      	str	r2, [r3, #0]
      break;
 801479a:	e009      	b.n	80147b0 <LPM_SetOffMode+0x50>
    }
    case LPM_Enable:
    {
      OffModeDisable &= ~(uint32_t)id;
 801479c:	1dfb      	adds	r3, r7, #7
 801479e:	781b      	ldrb	r3, [r3, #0]
 80147a0:	43da      	mvns	r2, r3
 80147a2:	4b08      	ldr	r3, [pc, #32]	@ (80147c4 <LPM_SetOffMode+0x64>)
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	401a      	ands	r2, r3
 80147a8:	4b06      	ldr	r3, [pc, #24]	@ (80147c4 <LPM_SetOffMode+0x64>)
 80147aa:	601a      	str	r2, [r3, #0]
      break;
 80147ac:	e000      	b.n	80147b0 <LPM_SetOffMode+0x50>
    }
    default:
      break;
 80147ae:	46c0      	nop			@ (mov r8, r8)
 80147b0:	697b      	ldr	r3, [r7, #20]
 80147b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	f383 8810 	msr	PRIMASK, r3
}
 80147ba:	46c0      	nop			@ (mov r8, r8)
  }
  
  RESTORE_PRIMASK( );

  return;
 80147bc:	46c0      	nop			@ (mov r8, r8)
}
 80147be:	46bd      	mov	sp, r7
 80147c0:	b006      	add	sp, #24
 80147c2:	bd80      	pop	{r7, pc}
 80147c4:	200013e0 	.word	0x200013e0

080147c8 <LPM_SetStopMode>:

void LPM_SetStopMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b086      	sub	sp, #24
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	0002      	movs	r2, r0
 80147d0:	1dfb      	adds	r3, r7, #7
 80147d2:	701a      	strb	r2, [r3, #0]
 80147d4:	1dbb      	adds	r3, r7, #6
 80147d6:	1c0a      	adds	r2, r1, #0
 80147d8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80147da:	f3ef 8310 	mrs	r3, PRIMASK
 80147de:	613b      	str	r3, [r7, #16]
  return(result);
 80147e0:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 80147e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80147e4:	b672      	cpsid	i
}
 80147e6:	46c0      	nop			@ (mov r8, r8)
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 80147e8:	1dbb      	adds	r3, r7, #6
 80147ea:	781b      	ldrb	r3, [r3, #0]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d009      	beq.n	8014804 <LPM_SetStopMode+0x3c>
 80147f0:	2b01      	cmp	r3, #1
 80147f2:	d110      	bne.n	8014816 <LPM_SetStopMode+0x4e>
  {
    case LPM_Disable:
    {
      StopModeDisable |= (uint32_t)id;
 80147f4:	1dfb      	adds	r3, r7, #7
 80147f6:	781a      	ldrb	r2, [r3, #0]
 80147f8:	4b0c      	ldr	r3, [pc, #48]	@ (801482c <LPM_SetStopMode+0x64>)
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	431a      	orrs	r2, r3
 80147fe:	4b0b      	ldr	r3, [pc, #44]	@ (801482c <LPM_SetStopMode+0x64>)
 8014800:	601a      	str	r2, [r3, #0]
      break;
 8014802:	e009      	b.n	8014818 <LPM_SetStopMode+0x50>
    }
    case LPM_Enable:
    {
      StopModeDisable &= ~(uint32_t)id;
 8014804:	1dfb      	adds	r3, r7, #7
 8014806:	781b      	ldrb	r3, [r3, #0]
 8014808:	43da      	mvns	r2, r3
 801480a:	4b08      	ldr	r3, [pc, #32]	@ (801482c <LPM_SetStopMode+0x64>)
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	401a      	ands	r2, r3
 8014810:	4b06      	ldr	r3, [pc, #24]	@ (801482c <LPM_SetStopMode+0x64>)
 8014812:	601a      	str	r2, [r3, #0]
      break;
 8014814:	e000      	b.n	8014818 <LPM_SetStopMode+0x50>
    }
    default:
      break;
 8014816:	46c0      	nop			@ (mov r8, r8)
 8014818:	697b      	ldr	r3, [r7, #20]
 801481a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	f383 8810 	msr	PRIMASK, r3
}
 8014822:	46c0      	nop			@ (mov r8, r8)
  }
  RESTORE_PRIMASK( );

  return;
 8014824:	46c0      	nop			@ (mov r8, r8)
}
 8014826:	46bd      	mov	sp, r7
 8014828:	b006      	add	sp, #24
 801482a:	bd80      	pop	{r7, pc}
 801482c:	200013dc 	.word	0x200013dc

08014830 <LPM_EnterLowPower>:

void LPM_EnterLowPower(void)
{
 8014830:	b580      	push	{r7, lr}
 8014832:	af00      	add	r7, sp, #0
  if( StopModeDisable )
 8014834:	4b0c      	ldr	r3, [pc, #48]	@ (8014868 <LPM_EnterLowPower+0x38>)
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d004      	beq.n	8014846 <LPM_EnterLowPower+0x16>
  {
    /**
     * SLEEP mode is required
     */
    LPM_EnterSleepMode();
 801483c:	f7ef f812 	bl	8003864 <LPM_EnterSleepMode>
    LPM_ExitSleepMode();
 8014840:	f000 f848 	bl	80148d4 <LPM_ExitSleepMode>
      LPM_EnterOffMode();
      LPM_ExitOffMode();
    }
  }

  return;
 8014844:	e00d      	b.n	8014862 <LPM_EnterLowPower+0x32>
    if( OffModeDisable )
 8014846:	4b09      	ldr	r3, [pc, #36]	@ (801486c <LPM_EnterLowPower+0x3c>)
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d004      	beq.n	8014858 <LPM_EnterLowPower+0x28>
      LPM_EnterStopMode();
 801484e:	f7ee ffa5 	bl	800379c <LPM_EnterStopMode>
      LPM_ExitStopMode();
 8014852:	f7ee ffc7 	bl	80037e4 <LPM_ExitStopMode>
  return;
 8014856:	e004      	b.n	8014862 <LPM_EnterLowPower+0x32>
      LPM_EnterOffMode();
 8014858:	f000 f841 	bl	80148de <LPM_EnterOffMode>
      LPM_ExitOffMode();
 801485c:	f000 f844 	bl	80148e8 <LPM_ExitOffMode>
  return;
 8014860:	46c0      	nop			@ (mov r8, r8)
}
 8014862:	46bd      	mov	sp, r7
 8014864:	bd80      	pop	{r7, pc}
 8014866:	46c0      	nop			@ (mov r8, r8)
 8014868:	200013dc 	.word	0x200013dc
 801486c:	200013e0 	.word	0x200013e0

08014870 <LPM_GetMode>:

LPM_GetMode_t LPM_GetMode(void)
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b084      	sub	sp, #16
 8014874:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014876:	f3ef 8310 	mrs	r3, PRIMASK
 801487a:	607b      	str	r3, [r7, #4]
  return(result);
 801487c:	687b      	ldr	r3, [r7, #4]
  LPM_GetMode_t mode_selected;

  BACKUP_PRIMASK();
 801487e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8014880:	b672      	cpsid	i
}
 8014882:	46c0      	nop			@ (mov r8, r8)
  
  DISABLE_IRQ( );

  if(StopModeDisable )
 8014884:	4b11      	ldr	r3, [pc, #68]	@ (80148cc <LPM_GetMode+0x5c>)
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d004      	beq.n	8014896 <LPM_GetMode+0x26>
  {
    mode_selected = LPM_SleepMode;
 801488c:	230f      	movs	r3, #15
 801488e:	18fb      	adds	r3, r7, r3
 8014890:	2200      	movs	r2, #0
 8014892:	701a      	strb	r2, [r3, #0]
 8014894:	e00c      	b.n	80148b0 <LPM_GetMode+0x40>
  }
  else
  {
    if(OffModeDisable)
 8014896:	4b0e      	ldr	r3, [pc, #56]	@ (80148d0 <LPM_GetMode+0x60>)
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d004      	beq.n	80148a8 <LPM_GetMode+0x38>
    {
      mode_selected = LPM_StopMode;
 801489e:	230f      	movs	r3, #15
 80148a0:	18fb      	adds	r3, r7, r3
 80148a2:	2201      	movs	r2, #1
 80148a4:	701a      	strb	r2, [r3, #0]
 80148a6:	e003      	b.n	80148b0 <LPM_GetMode+0x40>
    }
    else
    {
      mode_selected = LPM_OffMode;
 80148a8:	230f      	movs	r3, #15
 80148aa:	18fb      	adds	r3, r7, r3
 80148ac:	2202      	movs	r2, #2
 80148ae:	701a      	strb	r2, [r3, #0]
 80148b0:	68bb      	ldr	r3, [r7, #8]
 80148b2:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80148b4:	683b      	ldr	r3, [r7, #0]
 80148b6:	f383 8810 	msr	PRIMASK, r3
}
 80148ba:	46c0      	nop			@ (mov r8, r8)
    }
  }

  RESTORE_PRIMASK( );

  return mode_selected;
 80148bc:	230f      	movs	r3, #15
 80148be:	18fb      	adds	r3, r7, r3
 80148c0:	781b      	ldrb	r3, [r3, #0]
}
 80148c2:	0018      	movs	r0, r3
 80148c4:	46bd      	mov	sp, r7
 80148c6:	b004      	add	sp, #16
 80148c8:	bd80      	pop	{r7, pc}
 80148ca:	46c0      	nop			@ (mov r8, r8)
 80148cc:	200013dc 	.word	0x200013dc
 80148d0:	200013e0 	.word	0x200013e0

080148d4 <LPM_ExitSleepMode>:

__weak void LPM_EnterSleepMode(void) {}
__weak void LPM_ExitSleepMode(void) {}
 80148d4:	b580      	push	{r7, lr}
 80148d6:	af00      	add	r7, sp, #0
 80148d8:	46c0      	nop			@ (mov r8, r8)
 80148da:	46bd      	mov	sp, r7
 80148dc:	bd80      	pop	{r7, pc}

080148de <LPM_EnterOffMode>:
__weak void LPM_EnterStopMode(void) {}
__weak void LPM_ExitStopMode(void) {}
__weak void LPM_EnterOffMode(void) {}
 80148de:	b580      	push	{r7, lr}
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	46c0      	nop			@ (mov r8, r8)
 80148e4:	46bd      	mov	sp, r7
 80148e6:	bd80      	pop	{r7, pc}

080148e8 <LPM_ExitOffMode>:
__weak void LPM_ExitOffMode(void) {}
 80148e8:	b580      	push	{r7, lr}
 80148ea:	af00      	add	r7, sp, #0
 80148ec:	46c0      	nop			@ (mov r8, r8)
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bd80      	pop	{r7, pc}

080148f2 <circular_queue_init>:
static int16_t circular_queue_get_free_size(queue_param_t* queue);
static void add_elementSize_and_inc_writeIdx(queue_param_t* queue,uint16_t element_size);

/* Public functions ----------------------------------------------------------*/
void circular_queue_init(queue_param_t* queue, uint8_t* queue_buff, uint16_t queue_size)
{
 80148f2:	b580      	push	{r7, lr}
 80148f4:	b084      	sub	sp, #16
 80148f6:	af00      	add	r7, sp, #0
 80148f8:	60f8      	str	r0, [r7, #12]
 80148fa:	60b9      	str	r1, [r7, #8]
 80148fc:	1dbb      	adds	r3, r7, #6
 80148fe:	801a      	strh	r2, [r3, #0]
  queue->queue_read_idx=0;
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	2200      	movs	r2, #0
 8014904:	801a      	strh	r2, [r3, #0]
  queue->queue_write_idx=0;
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	2200      	movs	r2, #0
 801490a:	805a      	strh	r2, [r3, #2]
  queue->queue_nb_element=0;
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	2200      	movs	r2, #0
 8014910:	809a      	strh	r2, [r3, #4]
  queue->queue_buff=queue_buff;
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	68ba      	ldr	r2, [r7, #8]
 8014916:	609a      	str	r2, [r3, #8]
  queue->queue_size=queue_size;
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	1dba      	adds	r2, r7, #6
 801491c:	8812      	ldrh	r2, [r2, #0]
 801491e:	80da      	strh	r2, [r3, #6]
  queue->queue_full=0;
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	2200      	movs	r2, #0
 8014924:	731a      	strb	r2, [r3, #12]
}
 8014926:	46c0      	nop			@ (mov r8, r8)
 8014928:	46bd      	mov	sp, r7
 801492a:	b004      	add	sp, #16
 801492c:	bd80      	pop	{r7, pc}

0801492e <circular_queue_add>:

int circular_queue_add(queue_param_t* queue, uint8_t* buff, uint16_t buff_size)
{
 801492e:	b5b0      	push	{r4, r5, r7, lr}
 8014930:	b086      	sub	sp, #24
 8014932:	af00      	add	r7, sp, #0
 8014934:	60f8      	str	r0, [r7, #12]
 8014936:	60b9      	str	r1, [r7, #8]
 8014938:	1dbb      	adds	r3, r7, #6
 801493a:	801a      	strh	r2, [r3, #0]
  int status;  
  int16_t free_buff_len=circular_queue_get_free_size(queue);
 801493c:	2512      	movs	r5, #18
 801493e:	197c      	adds	r4, r7, r5
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	0018      	movs	r0, r3
 8014944:	f000 f983 	bl	8014c4e <circular_queue_get_free_size>
 8014948:	0003      	movs	r3, r0
 801494a:	8023      	strh	r3, [r4, #0]
  
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 801494c:	1dbb      	adds	r3, r7, #6
 801494e:	881b      	ldrh	r3, [r3, #0]
 8014950:	1c5a      	adds	r2, r3, #1
 8014952:	197b      	adds	r3, r7, r5
 8014954:	2100      	movs	r1, #0
 8014956:	5e5b      	ldrsh	r3, [r3, r1]
 8014958:	429a      	cmp	r2, r3
 801495a:	da47      	bge.n	80149ec <circular_queue_add+0xbe>
      ((queue->queue_write_idx+buff_size+ELEMENT_SIZE_LEN<=queue->queue_size) 
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	885b      	ldrh	r3, [r3, #2]
 8014960:	001a      	movs	r2, r3
 8014962:	1dbb      	adds	r3, r7, #6
 8014964:	881b      	ldrh	r3, [r3, #0]
 8014966:	18d3      	adds	r3, r2, r3
 8014968:	3301      	adds	r3, #1
 801496a:	68fa      	ldr	r2, [r7, #12]
 801496c:	88d2      	ldrh	r2, [r2, #6]
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 801496e:	4293      	cmp	r3, r2
 8014970:	db07      	blt.n	8014982 <circular_queue_add+0x54>
        || (queue->queue_write_idx>=queue->queue_size-ELEMENT_SIZE_LEN))) /*elementSize cut in 2 or elementSize at Top*/
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	885b      	ldrh	r3, [r3, #2]
 8014976:	001a      	movs	r2, r3
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	88db      	ldrh	r3, [r3, #6]
 801497c:	3b02      	subs	r3, #2
 801497e:	429a      	cmp	r2, r3
 8014980:	db34      	blt.n	80149ec <circular_queue_add+0xbe>
  {
    //add in one element
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 8014982:	1dbb      	adds	r3, r7, #6
 8014984:	881a      	ldrh	r2, [r3, #0]
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	0011      	movs	r1, r2
 801498a:	0018      	movs	r0, r3
 801498c:	f000 f9ac 	bl	8014ce8 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,buff_size);
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	689b      	ldr	r3, [r3, #8]
 8014994:	68fa      	ldr	r2, [r7, #12]
 8014996:	8852      	ldrh	r2, [r2, #2]
 8014998:	1898      	adds	r0, r3, r2
 801499a:	1dbb      	adds	r3, r7, #6
 801499c:	881a      	ldrh	r2, [r3, #0]
 801499e:	68bb      	ldr	r3, [r7, #8]
 80149a0:	0019      	movs	r1, r3
 80149a2:	f000 f985 	bl	8014cb0 <queue_copy>
    queue->queue_write_idx+=buff_size;
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	885a      	ldrh	r2, [r3, #2]
 80149aa:	1dbb      	adds	r3, r7, #6
 80149ac:	881b      	ldrh	r3, [r3, #0]
 80149ae:	18d3      	adds	r3, r2, r3
 80149b0:	b29a      	uxth	r2, r3
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	805a      	strh	r2, [r3, #2]
    /*modulo queue_size*/
    if (queue->queue_write_idx==queue->queue_size)
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	885a      	ldrh	r2, [r3, #2]
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	88db      	ldrh	r3, [r3, #6]
 80149be:	429a      	cmp	r2, r3
 80149c0:	d102      	bne.n	80149c8 <circular_queue_add+0x9a>
    {
        queue->queue_write_idx=0;
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	2200      	movs	r2, #0
 80149c6:	805a      	strh	r2, [r3, #2]
    }
    //add one element
    queue->queue_nb_element++; 
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	889b      	ldrh	r3, [r3, #4]
 80149cc:	3301      	adds	r3, #1
 80149ce:	b29a      	uxth	r2, r3
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	809a      	strh	r2, [r3, #4]
    /*in case que is full*/
    if (queue->queue_write_idx== queue->queue_read_idx)
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	885a      	ldrh	r2, [r3, #2]
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	881b      	ldrh	r3, [r3, #0]
 80149dc:	429a      	cmp	r2, r3
 80149de:	d102      	bne.n	80149e6 <circular_queue_add+0xb8>
    {
      queue->queue_full=1;
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	2201      	movs	r2, #1
 80149e4:	731a      	strb	r2, [r3, #12]
    }
    status=0;
 80149e6:	2300      	movs	r3, #0
 80149e8:	617b      	str	r3, [r7, #20]
 80149ea:	e060      	b.n	8014aae <circular_queue_add+0x180>
  }
  else if (buff_size+2*ELEMENT_SIZE_LEN<=free_buff_len)
 80149ec:	1dbb      	adds	r3, r7, #6
 80149ee:	881b      	ldrh	r3, [r3, #0]
 80149f0:	1cda      	adds	r2, r3, #3
 80149f2:	2312      	movs	r3, #18
 80149f4:	18fb      	adds	r3, r7, r3
 80149f6:	2100      	movs	r1, #0
 80149f8:	5e5b      	ldrsh	r3, [r3, r1]
 80149fa:	429a      	cmp	r2, r3
 80149fc:	da54      	bge.n	8014aa8 <circular_queue_add+0x17a>
  {
    //split buffer in two elements
    /*fill top of queue with first element of size top_size*/
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	88da      	ldrh	r2, [r3, #6]
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	885b      	ldrh	r3, [r3, #2]
 8014a06:	1ad3      	subs	r3, r2, r3
 8014a08:	b29a      	uxth	r2, r3
 8014a0a:	2410      	movs	r4, #16
 8014a0c:	193b      	adds	r3, r7, r4
 8014a0e:	3a02      	subs	r2, #2
 8014a10:	801a      	strh	r2, [r3, #0]
    add_elementSize_and_inc_writeIdx(queue,top_size);
 8014a12:	193b      	adds	r3, r7, r4
 8014a14:	881a      	ldrh	r2, [r3, #0]
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	0011      	movs	r1, r2
 8014a1a:	0018      	movs	r0, r3
 8014a1c:	f000 f964 	bl	8014ce8 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,top_size);
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	689b      	ldr	r3, [r3, #8]
 8014a24:	68fa      	ldr	r2, [r7, #12]
 8014a26:	8852      	ldrh	r2, [r2, #2]
 8014a28:	1898      	adds	r0, r3, r2
 8014a2a:	193b      	adds	r3, r7, r4
 8014a2c:	881a      	ldrh	r2, [r3, #0]
 8014a2e:	68bb      	ldr	r3, [r7, #8]
 8014a30:	0019      	movs	r1, r3
 8014a32:	f000 f93d 	bl	8014cb0 <queue_copy>
    queue->queue_write_idx=0;
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	2200      	movs	r2, #0
 8014a3a:	805a      	strh	r2, [r3, #2]

    /*fill bottom of queue with second element of size buff_size-top_size*/
    buff_size-=top_size;
 8014a3c:	1dbb      	adds	r3, r7, #6
 8014a3e:	1db9      	adds	r1, r7, #6
 8014a40:	193a      	adds	r2, r7, r4
 8014a42:	8809      	ldrh	r1, [r1, #0]
 8014a44:	8812      	ldrh	r2, [r2, #0]
 8014a46:	1a8a      	subs	r2, r1, r2
 8014a48:	801a      	strh	r2, [r3, #0]
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 8014a4a:	1dbb      	adds	r3, r7, #6
 8014a4c:	881a      	ldrh	r2, [r3, #0]
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	0011      	movs	r1, r2
 8014a52:	0018      	movs	r0, r3
 8014a54:	f000 f948 	bl	8014ce8 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff+top_size,buff_size);
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	689b      	ldr	r3, [r3, #8]
 8014a5c:	68fa      	ldr	r2, [r7, #12]
 8014a5e:	8852      	ldrh	r2, [r2, #2]
 8014a60:	1898      	adds	r0, r3, r2
 8014a62:	193b      	adds	r3, r7, r4
 8014a64:	881b      	ldrh	r3, [r3, #0]
 8014a66:	68ba      	ldr	r2, [r7, #8]
 8014a68:	18d1      	adds	r1, r2, r3
 8014a6a:	1dbb      	adds	r3, r7, #6
 8014a6c:	881b      	ldrh	r3, [r3, #0]
 8014a6e:	001a      	movs	r2, r3
 8014a70:	f000 f91e 	bl	8014cb0 <queue_copy>
    queue->queue_write_idx+=buff_size;
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	885a      	ldrh	r2, [r3, #2]
 8014a78:	1dbb      	adds	r3, r7, #6
 8014a7a:	881b      	ldrh	r3, [r3, #0]
 8014a7c:	18d3      	adds	r3, r2, r3
 8014a7e:	b29a      	uxth	r2, r3
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	805a      	strh	r2, [r3, #2]
    // add two elements
    queue->queue_nb_element+=2;
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	889b      	ldrh	r3, [r3, #4]
 8014a88:	3302      	adds	r3, #2
 8014a8a:	b29a      	uxth	r2, r3
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	809a      	strh	r2, [r3, #4]
    /*in case que is full*/
    if (queue->queue_write_idx== queue->queue_read_idx)
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	885a      	ldrh	r2, [r3, #2]
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	881b      	ldrh	r3, [r3, #0]
 8014a98:	429a      	cmp	r2, r3
 8014a9a:	d102      	bne.n	8014aa2 <circular_queue_add+0x174>
    {
      queue->queue_full=1;
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	2201      	movs	r2, #1
 8014aa0:	731a      	strb	r2, [r3, #12]
    }    
    status =0;
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	617b      	str	r3, [r7, #20]
 8014aa6:	e002      	b.n	8014aae <circular_queue_add+0x180>
  }
  else
  {
    status=-1;
 8014aa8:	2301      	movs	r3, #1
 8014aaa:	425b      	negs	r3, r3
 8014aac:	617b      	str	r3, [r7, #20]
  }
  return status;
 8014aae:	697b      	ldr	r3, [r7, #20]
}
 8014ab0:	0018      	movs	r0, r3
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	b006      	add	sp, #24
 8014ab6:	bdb0      	pop	{r4, r5, r7, pc}

08014ab8 <circular_queue_get>:

int circular_queue_get(queue_param_t* queue, uint8_t** buff, uint16_t* buff_size)
{
 8014ab8:	b590      	push	{r4, r7, lr}
 8014aba:	b087      	sub	sp, #28
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	60f8      	str	r0, [r7, #12]
 8014ac0:	60b9      	str	r1, [r7, #8]
 8014ac2:	607a      	str	r2, [r7, #4]
  int status;
  if (queue->queue_nb_element==0)
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	889b      	ldrh	r3, [r3, #4]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d103      	bne.n	8014ad4 <circular_queue_get+0x1c>
  {
    status=-1;
 8014acc:	2301      	movs	r3, #1
 8014ace:	425b      	negs	r3, r3
 8014ad0:	617b      	str	r3, [r7, #20]
 8014ad2:	e044      	b.n	8014b5e <circular_queue_get+0xa6>
  }
  else
  {
    uint16_t size;
    uint16_t read_idx=queue->queue_read_idx;
 8014ad4:	2412      	movs	r4, #18
 8014ad6:	193b      	adds	r3, r7, r4
 8014ad8:	68fa      	ldr	r2, [r7, #12]
 8014ada:	8812      	ldrh	r2, [r2, #0]
 8014adc:	801a      	strh	r2, [r3, #0]
    /*retreive and remove 1st element' size and content*/
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	689a      	ldr	r2, [r3, #8]
 8014ae2:	193b      	adds	r3, r7, r4
 8014ae4:	881b      	ldrh	r3, [r3, #0]
 8014ae6:	1939      	adds	r1, r7, r4
 8014ae8:	1c58      	adds	r0, r3, #1
 8014aea:	8008      	strh	r0, [r1, #0]
 8014aec:	18d3      	adds	r3, r2, r3
 8014aee:	781b      	ldrb	r3, [r3, #0]
 8014af0:	001a      	movs	r2, r3
 8014af2:	2310      	movs	r3, #16
 8014af4:	18fb      	adds	r3, r7, r3
 8014af6:	0212      	lsls	r2, r2, #8
 8014af8:	801a      	strh	r2, [r3, #0]
    /*wrap if needed*/
    if (read_idx==queue->queue_size)
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	88db      	ldrh	r3, [r3, #6]
 8014afe:	193a      	adds	r2, r7, r4
 8014b00:	8812      	ldrh	r2, [r2, #0]
 8014b02:	429a      	cmp	r2, r3
 8014b04:	d102      	bne.n	8014b0c <circular_queue_get+0x54>
    {
      read_idx=0;
 8014b06:	193b      	adds	r3, r7, r4
 8014b08:	2200      	movs	r2, #0
 8014b0a:	801a      	strh	r2, [r3, #0]
    }
    size|=(uint16_t) queue->queue_buff[read_idx++];
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	689a      	ldr	r2, [r3, #8]
 8014b10:	2412      	movs	r4, #18
 8014b12:	193b      	adds	r3, r7, r4
 8014b14:	881b      	ldrh	r3, [r3, #0]
 8014b16:	1939      	adds	r1, r7, r4
 8014b18:	1c58      	adds	r0, r3, #1
 8014b1a:	8008      	strh	r0, [r1, #0]
 8014b1c:	18d3      	adds	r3, r2, r3
 8014b1e:	781b      	ldrb	r3, [r3, #0]
 8014b20:	0019      	movs	r1, r3
 8014b22:	2210      	movs	r2, #16
 8014b24:	18bb      	adds	r3, r7, r2
 8014b26:	18ba      	adds	r2, r7, r2
 8014b28:	8812      	ldrh	r2, [r2, #0]
 8014b2a:	430a      	orrs	r2, r1
 8014b2c:	801a      	strh	r2, [r3, #0]
    /*wrap if needed*/
    if (read_idx==queue->queue_size)
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	88db      	ldrh	r3, [r3, #6]
 8014b32:	193a      	adds	r2, r7, r4
 8014b34:	8812      	ldrh	r2, [r2, #0]
 8014b36:	429a      	cmp	r2, r3
 8014b38:	d102      	bne.n	8014b40 <circular_queue_get+0x88>
    {
      read_idx=0;
 8014b3a:	193b      	adds	r3, r7, r4
 8014b3c:	2200      	movs	r2, #0
 8014b3e:	801a      	strh	r2, [r3, #0]
    }
    *buff= queue->queue_buff+read_idx;
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	689a      	ldr	r2, [r3, #8]
 8014b44:	2312      	movs	r3, #18
 8014b46:	18fb      	adds	r3, r7, r3
 8014b48:	881b      	ldrh	r3, [r3, #0]
 8014b4a:	18d2      	adds	r2, r2, r3
 8014b4c:	68bb      	ldr	r3, [r7, #8]
 8014b4e:	601a      	str	r2, [r3, #0]

    * buff_size=size;
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	2210      	movs	r2, #16
 8014b54:	18ba      	adds	r2, r7, r2
 8014b56:	8812      	ldrh	r2, [r2, #0]
 8014b58:	801a      	strh	r2, [r3, #0]
    status=0;
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	617b      	str	r3, [r7, #20]
  }
  return status;
 8014b5e:	697b      	ldr	r3, [r7, #20]
}
 8014b60:	0018      	movs	r0, r3
 8014b62:	46bd      	mov	sp, r7
 8014b64:	b007      	add	sp, #28
 8014b66:	bd90      	pop	{r4, r7, pc}

08014b68 <circular_queue_remove>:

int circular_queue_remove(queue_param_t* queue)
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b084      	sub	sp, #16
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
  int status;
  if (queue->queue_nb_element==0)
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	889b      	ldrh	r3, [r3, #4]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d103      	bne.n	8014b80 <circular_queue_remove+0x18>
  {
      status=-1;
 8014b78:	2301      	movs	r3, #1
 8014b7a:	425b      	negs	r3, r3
 8014b7c:	60fb      	str	r3, [r7, #12]
 8014b7e:	e04e      	b.n	8014c1e <circular_queue_remove+0xb6>
  }
  else
  {
    uint16_t size;
    /*retreive and remove 1st element' size and content*/
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	689a      	ldr	r2, [r3, #8]
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	881b      	ldrh	r3, [r3, #0]
 8014b88:	1c59      	adds	r1, r3, #1
 8014b8a:	b288      	uxth	r0, r1
 8014b8c:	6879      	ldr	r1, [r7, #4]
 8014b8e:	8008      	strh	r0, [r1, #0]
 8014b90:	18d3      	adds	r3, r2, r3
 8014b92:	781b      	ldrb	r3, [r3, #0]
 8014b94:	001a      	movs	r2, r3
 8014b96:	230a      	movs	r3, #10
 8014b98:	18fb      	adds	r3, r7, r3
 8014b9a:	0212      	lsls	r2, r2, #8
 8014b9c:	801a      	strh	r2, [r3, #0]
    if (queue->queue_read_idx==queue->queue_size)
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	881a      	ldrh	r2, [r3, #0]
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	88db      	ldrh	r3, [r3, #6]
 8014ba6:	429a      	cmp	r2, r3
 8014ba8:	d102      	bne.n	8014bb0 <circular_queue_remove+0x48>
    {
      queue->queue_read_idx=0;
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	2200      	movs	r2, #0
 8014bae:	801a      	strh	r2, [r3, #0]
    }
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	689a      	ldr	r2, [r3, #8]
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	881b      	ldrh	r3, [r3, #0]
 8014bb8:	1c59      	adds	r1, r3, #1
 8014bba:	b288      	uxth	r0, r1
 8014bbc:	6879      	ldr	r1, [r7, #4]
 8014bbe:	8008      	strh	r0, [r1, #0]
 8014bc0:	18d3      	adds	r3, r2, r3
 8014bc2:	781b      	ldrb	r3, [r3, #0]
 8014bc4:	0019      	movs	r1, r3
 8014bc6:	220a      	movs	r2, #10
 8014bc8:	18bb      	adds	r3, r7, r2
 8014bca:	18ba      	adds	r2, r7, r2
 8014bcc:	8812      	ldrh	r2, [r2, #0]
 8014bce:	430a      	orrs	r2, r1
 8014bd0:	801a      	strh	r2, [r3, #0]
    if (queue->queue_read_idx==queue->queue_size)
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	881a      	ldrh	r2, [r3, #0]
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	88db      	ldrh	r3, [r3, #6]
 8014bda:	429a      	cmp	r2, r3
 8014bdc:	d102      	bne.n	8014be4 <circular_queue_remove+0x7c>
    {
      queue->queue_read_idx=0;
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	2200      	movs	r2, #0
 8014be2:	801a      	strh	r2, [r3, #0]
    }
    /* increment read index*/
    queue->queue_read_idx+=size;
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	881a      	ldrh	r2, [r3, #0]
 8014be8:	230a      	movs	r3, #10
 8014bea:	18fb      	adds	r3, r7, r3
 8014bec:	881b      	ldrh	r3, [r3, #0]
 8014bee:	18d3      	adds	r3, r2, r3
 8014bf0:	b29a      	uxth	r2, r3
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	801a      	strh	r2, [r3, #0]
    /*modulo queue_size*/
    if (queue->queue_read_idx==queue->queue_size)
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	881a      	ldrh	r2, [r3, #0]
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	88db      	ldrh	r3, [r3, #6]
 8014bfe:	429a      	cmp	r2, r3
 8014c00:	d102      	bne.n	8014c08 <circular_queue_remove+0xa0>
    {
        queue->queue_read_idx=0;
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	2200      	movs	r2, #0
 8014c06:	801a      	strh	r2, [r3, #0]
    }
    /* decrement number of element*/
    queue->queue_nb_element--;
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	889b      	ldrh	r3, [r3, #4]
 8014c0c:	3b01      	subs	r3, #1
 8014c0e:	b29a      	uxth	r2, r3
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	809a      	strh	r2, [r3, #4]
    queue->queue_full=0;
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	2200      	movs	r2, #0
 8014c18:	731a      	strb	r2, [r3, #12]
    status=0;
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	60fb      	str	r3, [r7, #12]
  }
  return status;
 8014c1e:	68fb      	ldr	r3, [r7, #12]
}
 8014c20:	0018      	movs	r0, r3
 8014c22:	46bd      	mov	sp, r7
 8014c24:	b004      	add	sp, #16
 8014c26:	bd80      	pop	{r7, pc}

08014c28 <circular_queue_sense>:

int circular_queue_sense(queue_param_t* queue)
{
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	b084      	sub	sp, #16
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	6078      	str	r0, [r7, #4]
  int status;
  if (queue->queue_nb_element==0)
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	889b      	ldrh	r3, [r3, #4]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d103      	bne.n	8014c40 <circular_queue_sense+0x18>
  {
    status=-1;
 8014c38:	2301      	movs	r3, #1
 8014c3a:	425b      	negs	r3, r3
 8014c3c:	60fb      	str	r3, [r7, #12]
 8014c3e:	e001      	b.n	8014c44 <circular_queue_sense+0x1c>
  }
  else
  {
    status=0;
 8014c40:	2300      	movs	r3, #0
 8014c42:	60fb      	str	r3, [r7, #12]
  }
  return status;
 8014c44:	68fb      	ldr	r3, [r7, #12]
}
 8014c46:	0018      	movs	r0, r3
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	b004      	add	sp, #16
 8014c4c:	bd80      	pop	{r7, pc}

08014c4e <circular_queue_get_free_size>:

/* Private functions ---------------------------------------------------------*/
static int16_t circular_queue_get_free_size(queue_param_t* queue)
{
 8014c4e:	b580      	push	{r7, lr}
 8014c50:	b084      	sub	sp, #16
 8014c52:	af00      	add	r7, sp, #0
 8014c54:	6078      	str	r0, [r7, #4]
  int16_t free_size;
  if (queue->queue_write_idx>=queue->queue_read_idx)
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	885a      	ldrh	r2, [r3, #2]
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	881b      	ldrh	r3, [r3, #0]
 8014c5e:	429a      	cmp	r2, r3
 8014c60:	d30d      	bcc.n	8014c7e <circular_queue_get_free_size+0x30>
  {
    free_size=queue->queue_size-(queue->queue_write_idx-queue->queue_read_idx); 
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	88da      	ldrh	r2, [r3, #6]
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	8819      	ldrh	r1, [r3, #0]
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	885b      	ldrh	r3, [r3, #2]
 8014c6e:	1acb      	subs	r3, r1, r3
 8014c70:	b29b      	uxth	r3, r3
 8014c72:	18d3      	adds	r3, r2, r3
 8014c74:	b29a      	uxth	r2, r3
 8014c76:	230e      	movs	r3, #14
 8014c78:	18fb      	adds	r3, r7, r3
 8014c7a:	801a      	strh	r2, [r3, #0]
 8014c7c:	e008      	b.n	8014c90 <circular_queue_get_free_size+0x42>
  }
  else
  {
    free_size=(queue->queue_read_idx-queue->queue_write_idx); 
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	881a      	ldrh	r2, [r3, #0]
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	885b      	ldrh	r3, [r3, #2]
 8014c86:	1ad3      	subs	r3, r2, r3
 8014c88:	b29a      	uxth	r2, r3
 8014c8a:	230e      	movs	r3, #14
 8014c8c:	18fb      	adds	r3, r7, r3
 8014c8e:	801a      	strh	r2, [r3, #0]
  }
  if ( queue->queue_full==1)
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	7b1b      	ldrb	r3, [r3, #12]
 8014c94:	2b01      	cmp	r3, #1
 8014c96:	d103      	bne.n	8014ca0 <circular_queue_get_free_size+0x52>
  {
    free_size=0;
 8014c98:	230e      	movs	r3, #14
 8014c9a:	18fb      	adds	r3, r7, r3
 8014c9c:	2200      	movs	r2, #0
 8014c9e:	801a      	strh	r2, [r3, #0]
  }
  return free_size;
 8014ca0:	230e      	movs	r3, #14
 8014ca2:	18fb      	adds	r3, r7, r3
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	5e9b      	ldrsh	r3, [r3, r2]
}
 8014ca8:	0018      	movs	r0, r3
 8014caa:	46bd      	mov	sp, r7
 8014cac:	b004      	add	sp, #16
 8014cae:	bd80      	pop	{r7, pc}

08014cb0 <queue_copy>:

static void queue_copy(uint8_t* out, const uint8_t* in, uint16_t size)
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b084      	sub	sp, #16
 8014cb4:	af00      	add	r7, sp, #0
 8014cb6:	60f8      	str	r0, [r7, #12]
 8014cb8:	60b9      	str	r1, [r7, #8]
 8014cba:	1dbb      	adds	r3, r7, #6
 8014cbc:	801a      	strh	r2, [r3, #0]
  while(size--)
 8014cbe:	e007      	b.n	8014cd0 <queue_copy+0x20>
  {
    *out++= *in++;
 8014cc0:	68ba      	ldr	r2, [r7, #8]
 8014cc2:	1c53      	adds	r3, r2, #1
 8014cc4:	60bb      	str	r3, [r7, #8]
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	1c59      	adds	r1, r3, #1
 8014cca:	60f9      	str	r1, [r7, #12]
 8014ccc:	7812      	ldrb	r2, [r2, #0]
 8014cce:	701a      	strb	r2, [r3, #0]
  while(size--)
 8014cd0:	1dbb      	adds	r3, r7, #6
 8014cd2:	881b      	ldrh	r3, [r3, #0]
 8014cd4:	1dba      	adds	r2, r7, #6
 8014cd6:	1e59      	subs	r1, r3, #1
 8014cd8:	8011      	strh	r1, [r2, #0]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d1f0      	bne.n	8014cc0 <queue_copy+0x10>
  }
}
 8014cde:	46c0      	nop			@ (mov r8, r8)
 8014ce0:	46c0      	nop			@ (mov r8, r8)
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	b004      	add	sp, #16
 8014ce6:	bd80      	pop	{r7, pc}

08014ce8 <add_elementSize_and_inc_writeIdx>:

static void add_elementSize_and_inc_writeIdx(queue_param_t* queue,uint16_t element_size)
{
 8014ce8:	b590      	push	{r4, r7, lr}
 8014cea:	b083      	sub	sp, #12
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
 8014cf0:	000a      	movs	r2, r1
 8014cf2:	1cbb      	adds	r3, r7, #2
 8014cf4:	801a      	strh	r2, [r3, #0]
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 8014cf6:	1cbb      	adds	r3, r7, #2
 8014cf8:	881b      	ldrh	r3, [r3, #0]
 8014cfa:	0a1b      	lsrs	r3, r3, #8
 8014cfc:	b298      	uxth	r0, r3
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	689a      	ldr	r2, [r3, #8]
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	885b      	ldrh	r3, [r3, #2]
 8014d06:	1c59      	adds	r1, r3, #1
 8014d08:	b28c      	uxth	r4, r1
 8014d0a:	6879      	ldr	r1, [r7, #4]
 8014d0c:	804c      	strh	r4, [r1, #2]
 8014d0e:	18d3      	adds	r3, r2, r3
 8014d10:	b2c2      	uxtb	r2, r0
 8014d12:	701a      	strb	r2, [r3, #0]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	885a      	ldrh	r2, [r3, #2]
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	88db      	ldrh	r3, [r3, #6]
 8014d1c:	429a      	cmp	r2, r3
 8014d1e:	d102      	bne.n	8014d26 <add_elementSize_and_inc_writeIdx+0x3e>
  {
    queue->queue_write_idx=0;
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	2200      	movs	r2, #0
 8014d24:	805a      	strh	r2, [r3, #2]
  }
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size);
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	689a      	ldr	r2, [r3, #8]
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	885b      	ldrh	r3, [r3, #2]
 8014d2e:	1c59      	adds	r1, r3, #1
 8014d30:	b288      	uxth	r0, r1
 8014d32:	6879      	ldr	r1, [r7, #4]
 8014d34:	8048      	strh	r0, [r1, #2]
 8014d36:	18d3      	adds	r3, r2, r3
 8014d38:	1cba      	adds	r2, r7, #2
 8014d3a:	8812      	ldrh	r2, [r2, #0]
 8014d3c:	b2d2      	uxtb	r2, r2
 8014d3e:	701a      	strb	r2, [r3, #0]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	885a      	ldrh	r2, [r3, #2]
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	88db      	ldrh	r3, [r3, #6]
 8014d48:	429a      	cmp	r2, r3
 8014d4a:	d102      	bne.n	8014d52 <add_elementSize_and_inc_writeIdx+0x6a>
  {
    queue->queue_write_idx=0;
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	2200      	movs	r2, #0
 8014d50:	805a      	strh	r2, [r3, #2]
  }
}
 8014d52:	46c0      	nop			@ (mov r8, r8)
 8014d54:	46bd      	mov	sp, r7
 8014d56:	b003      	add	sp, #12
 8014d58:	bd90      	pop	{r4, r7, pc}
	...

08014d5c <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8014d5c:	b082      	sub	sp, #8
 8014d5e:	b580      	push	{r7, lr}
 8014d60:	b086      	sub	sp, #24
 8014d62:	af00      	add	r7, sp, #0
 8014d64:	60f8      	str	r0, [r7, #12]
 8014d66:	1d38      	adds	r0, r7, #4
 8014d68:	6001      	str	r1, [r0, #0]
 8014d6a:	6042      	str	r2, [r0, #4]
 8014d6c:	2204      	movs	r2, #4
 8014d6e:	2020      	movs	r0, #32
 8014d70:	1812      	adds	r2, r2, r0
 8014d72:	19d2      	adds	r2, r2, r7
 8014d74:	6013      	str	r3, [r2, #0]
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8014d76:	2110      	movs	r1, #16
 8014d78:	187b      	adds	r3, r7, r1
 8014d7a:	2200      	movs	r2, #0
 8014d7c:	601a      	str	r2, [r3, #0]
 8014d7e:	187b      	adds	r3, r7, r1
 8014d80:	2200      	movs	r2, #0
 8014d82:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds + b.Seconds;
 8014d84:	1d3b      	adds	r3, r7, #4
 8014d86:	681a      	ldr	r2, [r3, #0]
 8014d88:	2304      	movs	r3, #4
 8014d8a:	181b      	adds	r3, r3, r0
 8014d8c:	19db      	adds	r3, r3, r7
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	18d2      	adds	r2, r2, r3
 8014d92:	187b      	adds	r3, r7, r1
 8014d94:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8014d96:	1d3b      	adds	r3, r7, #4
 8014d98:	2204      	movs	r2, #4
 8014d9a:	5e9b      	ldrsh	r3, [r3, r2]
 8014d9c:	b29a      	uxth	r2, r3
 8014d9e:	2304      	movs	r3, #4
 8014da0:	181b      	adds	r3, r3, r0
 8014da2:	19db      	adds	r3, r3, r7
 8014da4:	2004      	movs	r0, #4
 8014da6:	5e1b      	ldrsh	r3, [r3, r0]
 8014da8:	b29b      	uxth	r3, r3
 8014daa:	18d3      	adds	r3, r2, r3
 8014dac:	b29b      	uxth	r3, r3
 8014dae:	b21a      	sxth	r2, r3
 8014db0:	187b      	adds	r3, r7, r1
 8014db2:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds >= 1000 )
 8014db4:	187b      	adds	r3, r7, r1
 8014db6:	2204      	movs	r2, #4
 8014db8:	5e9a      	ldrsh	r2, [r3, r2]
 8014dba:	23fa      	movs	r3, #250	@ 0xfa
 8014dbc:	009b      	lsls	r3, r3, #2
 8014dbe:	429a      	cmp	r2, r3
 8014dc0:	db0f      	blt.n	8014de2 <SysTimeAdd+0x86>
    {
        c.Seconds++;
 8014dc2:	187b      	adds	r3, r7, r1
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	1c5a      	adds	r2, r3, #1
 8014dc8:	187b      	adds	r3, r7, r1
 8014dca:	601a      	str	r2, [r3, #0]
        c.SubSeconds -= 1000;
 8014dcc:	187b      	adds	r3, r7, r1
 8014dce:	2204      	movs	r2, #4
 8014dd0:	5e9b      	ldrsh	r3, [r3, r2]
 8014dd2:	b29b      	uxth	r3, r3
 8014dd4:	4a09      	ldr	r2, [pc, #36]	@ (8014dfc <SysTimeAdd+0xa0>)
 8014dd6:	4694      	mov	ip, r2
 8014dd8:	4463      	add	r3, ip
 8014dda:	b29b      	uxth	r3, r3
 8014ddc:	b21a      	sxth	r2, r3
 8014dde:	187b      	adds	r3, r7, r1
 8014de0:	809a      	strh	r2, [r3, #4]
    }
    return c;
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	2210      	movs	r2, #16
 8014de6:	18ba      	adds	r2, r7, r2
 8014de8:	ca03      	ldmia	r2!, {r0, r1}
 8014dea:	c303      	stmia	r3!, {r0, r1}
}
 8014dec:	68f8      	ldr	r0, [r7, #12]
 8014dee:	46bd      	mov	sp, r7
 8014df0:	b006      	add	sp, #24
 8014df2:	bc80      	pop	{r7}
 8014df4:	bc08      	pop	{r3}
 8014df6:	b002      	add	sp, #8
 8014df8:	4718      	bx	r3
 8014dfa:	46c0      	nop			@ (mov r8, r8)
 8014dfc:	fffffc18 	.word	0xfffffc18

08014e00 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8014e00:	b082      	sub	sp, #8
 8014e02:	b580      	push	{r7, lr}
 8014e04:	b086      	sub	sp, #24
 8014e06:	af00      	add	r7, sp, #0
 8014e08:	60f8      	str	r0, [r7, #12]
 8014e0a:	1d38      	adds	r0, r7, #4
 8014e0c:	6001      	str	r1, [r0, #0]
 8014e0e:	6042      	str	r2, [r0, #4]
 8014e10:	2204      	movs	r2, #4
 8014e12:	2020      	movs	r0, #32
 8014e14:	1812      	adds	r2, r2, r0
 8014e16:	19d2      	adds	r2, r2, r7
 8014e18:	6013      	str	r3, [r2, #0]
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8014e1a:	2110      	movs	r1, #16
 8014e1c:	187b      	adds	r3, r7, r1
 8014e1e:	2200      	movs	r2, #0
 8014e20:	601a      	str	r2, [r3, #0]
 8014e22:	187b      	adds	r3, r7, r1
 8014e24:	2200      	movs	r2, #0
 8014e26:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds - b.Seconds;
 8014e28:	1d3b      	adds	r3, r7, #4
 8014e2a:	681a      	ldr	r2, [r3, #0]
 8014e2c:	2304      	movs	r3, #4
 8014e2e:	181b      	adds	r3, r3, r0
 8014e30:	19db      	adds	r3, r3, r7
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	1ad2      	subs	r2, r2, r3
 8014e36:	187b      	adds	r3, r7, r1
 8014e38:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8014e3a:	1d3b      	adds	r3, r7, #4
 8014e3c:	2204      	movs	r2, #4
 8014e3e:	5e9b      	ldrsh	r3, [r3, r2]
 8014e40:	b29a      	uxth	r2, r3
 8014e42:	2304      	movs	r3, #4
 8014e44:	181b      	adds	r3, r3, r0
 8014e46:	19db      	adds	r3, r3, r7
 8014e48:	2004      	movs	r0, #4
 8014e4a:	5e1b      	ldrsh	r3, [r3, r0]
 8014e4c:	b29b      	uxth	r3, r3
 8014e4e:	1ad3      	subs	r3, r2, r3
 8014e50:	b29b      	uxth	r3, r3
 8014e52:	b21a      	sxth	r2, r3
 8014e54:	187b      	adds	r3, r7, r1
 8014e56:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds < 0 )
 8014e58:	187b      	adds	r3, r7, r1
 8014e5a:	2204      	movs	r2, #4
 8014e5c:	5e9b      	ldrsh	r3, [r3, r2]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	da10      	bge.n	8014e84 <SysTimeSub+0x84>
    {
        c.Seconds--;
 8014e62:	187b      	adds	r3, r7, r1
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	1e5a      	subs	r2, r3, #1
 8014e68:	187b      	adds	r3, r7, r1
 8014e6a:	601a      	str	r2, [r3, #0]
        c.SubSeconds += 1000;
 8014e6c:	187b      	adds	r3, r7, r1
 8014e6e:	2204      	movs	r2, #4
 8014e70:	5e9b      	ldrsh	r3, [r3, r2]
 8014e72:	b29b      	uxth	r3, r3
 8014e74:	22fa      	movs	r2, #250	@ 0xfa
 8014e76:	0092      	lsls	r2, r2, #2
 8014e78:	4694      	mov	ip, r2
 8014e7a:	4463      	add	r3, ip
 8014e7c:	b29b      	uxth	r3, r3
 8014e7e:	b21a      	sxth	r2, r3
 8014e80:	187b      	adds	r3, r7, r1
 8014e82:	809a      	strh	r2, [r3, #4]
    }
    return c;
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	2210      	movs	r2, #16
 8014e88:	18ba      	adds	r2, r7, r2
 8014e8a:	ca03      	ldmia	r2!, {r0, r1}
 8014e8c:	c303      	stmia	r3!, {r0, r1}
}
 8014e8e:	68f8      	ldr	r0, [r7, #12]
 8014e90:	46bd      	mov	sp, r7
 8014e92:	b006      	add	sp, #24
 8014e94:	bc80      	pop	{r7}
 8014e96:	bc08      	pop	{r3}
 8014e98:	b002      	add	sp, #8
 8014e9a:	4718      	bx	r3

08014e9c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8014e9c:	b5b0      	push	{r4, r5, r7, lr}
 8014e9e:	b088      	sub	sp, #32
 8014ea0:	af02      	add	r7, sp, #8
 8014ea2:	003b      	movs	r3, r7
 8014ea4:	6018      	str	r0, [r3, #0]
 8014ea6:	6059      	str	r1, [r3, #4]
    SysTime_t DeltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8014ea8:	2408      	movs	r4, #8
 8014eaa:	193b      	adds	r3, r7, r4
 8014eac:	2200      	movs	r2, #0
 8014eae:	601a      	str	r2, [r3, #0]
 8014eb0:	193b      	adds	r3, r7, r4
 8014eb2:	2200      	movs	r2, #0
 8014eb4:	809a      	strh	r2, [r3, #4]

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8014eb6:	193b      	adds	r3, r7, r4
 8014eb8:	3304      	adds	r3, #4
 8014eba:	0018      	movs	r0, r3
 8014ebc:	f7ef fae4 	bl	8004488 <HW_RTC_GetCalendarTime>
 8014ec0:	0002      	movs	r2, r0
 8014ec2:	0021      	movs	r1, r4
 8014ec4:	187b      	adds	r3, r7, r1
 8014ec6:	601a      	str	r2, [r3, #0]

    // sysTime is epoch
    DeltaTime = SysTimeSub( sysTime, calendarTime );
 8014ec8:	2510      	movs	r5, #16
 8014eca:	197c      	adds	r4, r7, r5
 8014ecc:	187b      	adds	r3, r7, r1
 8014ece:	003a      	movs	r2, r7
 8014ed0:	4669      	mov	r1, sp
 8014ed2:	6858      	ldr	r0, [r3, #4]
 8014ed4:	6008      	str	r0, [r1, #0]
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	6811      	ldr	r1, [r2, #0]
 8014eda:	6852      	ldr	r2, [r2, #4]
 8014edc:	0020      	movs	r0, r4
 8014ede:	f7ff ff8f 	bl	8014e00 <SysTimeSub>

    HW_RTC_BKUPWrite( DeltaTime.Seconds, ( uint32_t )DeltaTime.SubSeconds );
 8014ee2:	197b      	adds	r3, r7, r5
 8014ee4:	681a      	ldr	r2, [r3, #0]
 8014ee6:	197b      	adds	r3, r7, r5
 8014ee8:	2104      	movs	r1, #4
 8014eea:	5e5b      	ldrsh	r3, [r3, r1]
 8014eec:	0019      	movs	r1, r3
 8014eee:	0010      	movs	r0, r2
 8014ef0:	f7ef faf4 	bl	80044dc <HW_RTC_BKUPWrite>
}
 8014ef4:	46c0      	nop			@ (mov r8, r8)
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	b006      	add	sp, #24
 8014efa:	bdb0      	pop	{r4, r5, r7, pc}

08014efc <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8014efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014efe:	b08b      	sub	sp, #44	@ 0x2c
 8014f00:	af02      	add	r7, sp, #8
 8014f02:	6078      	str	r0, [r7, #4]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8014f04:	2518      	movs	r5, #24
 8014f06:	197b      	adds	r3, r7, r5
 8014f08:	2200      	movs	r2, #0
 8014f0a:	601a      	str	r2, [r3, #0]
 8014f0c:	197b      	adds	r3, r7, r5
 8014f0e:	2200      	movs	r2, #0
 8014f10:	809a      	strh	r2, [r3, #4]
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8014f12:	2410      	movs	r4, #16
 8014f14:	193b      	adds	r3, r7, r4
 8014f16:	2200      	movs	r2, #0
 8014f18:	601a      	str	r2, [r3, #0]
 8014f1a:	193b      	adds	r3, r7, r4
 8014f1c:	2200      	movs	r2, #0
 8014f1e:	809a      	strh	r2, [r3, #4]
    SysTime_t DeltaTime;

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8014f20:	197b      	adds	r3, r7, r5
 8014f22:	3304      	adds	r3, #4
 8014f24:	0018      	movs	r0, r3
 8014f26:	f7ef faaf 	bl	8004488 <HW_RTC_GetCalendarTime>
 8014f2a:	0002      	movs	r2, r0
 8014f2c:	197b      	adds	r3, r7, r5
 8014f2e:	601a      	str	r2, [r3, #0]

    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 8014f30:	2108      	movs	r1, #8
 8014f32:	187b      	adds	r3, r7, r1
 8014f34:	1d1a      	adds	r2, r3, #4
 8014f36:	187b      	adds	r3, r7, r1
 8014f38:	0011      	movs	r1, r2
 8014f3a:	0018      	movs	r0, r3
 8014f3c:	f7ef fae6 	bl	800450c <HW_RTC_BKUPRead>

    sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8014f40:	0026      	movs	r6, r4
 8014f42:	193c      	adds	r4, r7, r4
 8014f44:	197b      	adds	r3, r7, r5
 8014f46:	2108      	movs	r1, #8
 8014f48:	187a      	adds	r2, r7, r1
 8014f4a:	4669      	mov	r1, sp
 8014f4c:	6858      	ldr	r0, [r3, #4]
 8014f4e:	6008      	str	r0, [r1, #0]
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	6811      	ldr	r1, [r2, #0]
 8014f54:	6852      	ldr	r2, [r2, #4]
 8014f56:	0020      	movs	r0, r4
 8014f58:	f7ff ff00 	bl	8014d5c <SysTimeAdd>

    return sysTime;
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	19ba      	adds	r2, r7, r6
 8014f60:	ca03      	ldmia	r2!, {r0, r1}
 8014f62:	c303      	stmia	r3!, {r0, r1}
}
 8014f64:	6878      	ldr	r0, [r7, #4]
 8014f66:	46bd      	mov	sp, r7
 8014f68:	b009      	add	sp, #36	@ 0x24
 8014f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014f6c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8014f6c:	b590      	push	{r4, r7, lr}
 8014f6e:	b085      	sub	sp, #20
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	6078      	str	r0, [r7, #4]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8014f74:	2408      	movs	r4, #8
 8014f76:	193b      	adds	r3, r7, r4
 8014f78:	2200      	movs	r2, #0
 8014f7a:	601a      	str	r2, [r3, #0]
 8014f7c:	193b      	adds	r3, r7, r4
 8014f7e:	2200      	movs	r2, #0
 8014f80:	809a      	strh	r2, [r3, #4]

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8014f82:	193b      	adds	r3, r7, r4
 8014f84:	3304      	adds	r3, #4
 8014f86:	0018      	movs	r0, r3
 8014f88:	f7ef fa7e 	bl	8004488 <HW_RTC_GetCalendarTime>
 8014f8c:	0002      	movs	r2, r0
 8014f8e:	193b      	adds	r3, r7, r4
 8014f90:	601a      	str	r2, [r3, #0]
    
    return calendarTime;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	193a      	adds	r2, r7, r4
 8014f96:	ca03      	ldmia	r2!, {r0, r1}
 8014f98:	c303      	stmia	r3!, {r0, r1}
}
 8014f9a:	6878      	ldr	r0, [r7, #4]
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	b005      	add	sp, #20
 8014fa0:	bd90      	pop	{r4, r7, pc}

08014fa2 <TimerInit>:
 * \retval true (the object is already in the list) or false
 */
static bool TimerExists( TimerEvent_t *obj );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
 8014fa2:	b580      	push	{r7, lr}
 8014fa4:	b082      	sub	sp, #8
 8014fa6:	af00      	add	r7, sp, #0
 8014fa8:	6078      	str	r0, [r7, #4]
 8014faa:	6039      	str	r1, [r7, #0]
  obj->Timestamp = 0;
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	2200      	movs	r2, #0
 8014fb0:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = 0;
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	2200      	movs	r2, #0
 8014fb6:	605a      	str	r2, [r3, #4]
  obj->IsStarted = false;
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	2200      	movs	r2, #0
 8014fbc:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	725a      	strb	r2, [r3, #9]
  obj->Callback = callback;
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	683a      	ldr	r2, [r7, #0]
 8014fc8:	60da      	str	r2, [r3, #12]
  obj->Context = NULL;
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	2200      	movs	r2, #0
 8014fce:	611a      	str	r2, [r3, #16]
  obj->Next = NULL;
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	2200      	movs	r2, #0
 8014fd4:	615a      	str	r2, [r3, #20]
}
 8014fd6:	46c0      	nop			@ (mov r8, r8)
 8014fd8:	46bd      	mov	sp, r7
 8014fda:	b002      	add	sp, #8
 8014fdc:	bd80      	pop	{r7, pc}
	...

08014fe0 <TimerStart>:
{
  obj->Context = context;
}

void TimerStart( TimerEvent_t *obj )
{
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b088      	sub	sp, #32
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
  uint32_t elapsedTime = 0;
 8014fe8:	2300      	movs	r3, #0
 8014fea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014fec:	f3ef 8310 	mrs	r3, PRIMASK
 8014ff0:	617b      	str	r3, [r7, #20]
  return(result);
 8014ff2:	697b      	ldr	r3, [r7, #20]
  
  BACKUP_PRIMASK();
 8014ff4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8014ff6:	b672      	cpsid	i
}
 8014ff8:	46c0      	nop			@ (mov r8, r8)
  
  DISABLE_IRQ( );
  

  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d005      	beq.n	801500c <TimerStart+0x2c>
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	0018      	movs	r0, r3
 8015004:	f000 f99c 	bl	8015340 <TimerExists>
 8015008:	1e03      	subs	r3, r0, #0
 801500a:	d006      	beq.n	801501a <TimerStart+0x3a>
 801500c:	69bb      	ldr	r3, [r7, #24]
 801500e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015010:	693b      	ldr	r3, [r7, #16]
 8015012:	f383 8810 	msr	PRIMASK, r3
}
 8015016:	46c0      	nop			@ (mov r8, r8)
  {
    RESTORE_PRIMASK( );
    return;
 8015018:	e034      	b.n	8015084 <TimerStart+0xa4>
  }
  obj->Timestamp = obj->ReloadValue;
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	685a      	ldr	r2, [r3, #4]
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	601a      	str	r2, [r3, #0]
  obj->IsStarted = true;
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	2201      	movs	r2, #1
 8015026:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	2200      	movs	r2, #0
 801502c:	725a      	strb	r2, [r3, #9]

  if( TimerListHead == NULL )
 801502e:	4b17      	ldr	r3, [pc, #92]	@ (801508c <TimerStart+0xac>)
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d106      	bne.n	8015044 <TimerStart+0x64>
  {
    HW_RTC_SetTimerContext( );
 8015036:	f7ee ffe7 	bl	8004008 <HW_RTC_SetTimerContext>
    TimerInsertNewHeadTimer( obj ); // insert a timeout at now+obj->Timestamp
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	0018      	movs	r0, r3
 801503e:	f000 f9ed 	bl	801541c <TimerInsertNewHeadTimer>
 8015042:	e019      	b.n	8015078 <TimerStart+0x98>
  }
  else 
  {
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 8015044:	f7ee ff3e 	bl	8003ec4 <HW_RTC_GetTimerElapsedTime>
 8015048:	0003      	movs	r3, r0
 801504a:	61fb      	str	r3, [r7, #28]
    obj->Timestamp += elapsedTime;
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	681a      	ldr	r2, [r3, #0]
 8015050:	69fb      	ldr	r3, [r7, #28]
 8015052:	18d2      	adds	r2, r2, r3
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	601a      	str	r2, [r3, #0]
  
    if( obj->Timestamp < TimerListHead->Timestamp )
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	681a      	ldr	r2, [r3, #0]
 801505c:	4b0b      	ldr	r3, [pc, #44]	@ (801508c <TimerStart+0xac>)
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	429a      	cmp	r2, r3
 8015064:	d204      	bcs.n	8015070 <TimerStart+0x90>
    {
      TimerInsertNewHeadTimer( obj);
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	0018      	movs	r0, r3
 801506a:	f000 f9d7 	bl	801541c <TimerInsertNewHeadTimer>
 801506e:	e003      	b.n	8015078 <TimerStart+0x98>
    }
    else
    {
      TimerInsertTimer( obj);
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	0018      	movs	r0, r3
 8015074:	f000 f9a4 	bl	80153c0 <TimerInsertTimer>
 8015078:	69bb      	ldr	r3, [r7, #24]
 801507a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	f383 8810 	msr	PRIMASK, r3
}
 8015082:	46c0      	nop			@ (mov r8, r8)
    }
  }
  RESTORE_PRIMASK( );
}
 8015084:	46bd      	mov	sp, r7
 8015086:	b008      	add	sp, #32
 8015088:	bd80      	pop	{r7, pc}
 801508a:	46c0      	nop			@ (mov r8, r8)
 801508c:	200013e4 	.word	0x200013e4

08015090 <TimerIrqHandler>:
{
  return obj->IsStarted;
}

void TimerIrqHandler( void )
{
 8015090:	b590      	push	{r4, r7, lr}
 8015092:	b087      	sub	sp, #28
 8015094:	af00      	add	r7, sp, #0
  TimerEvent_t* cur;
  TimerEvent_t* next;
  

  
  uint32_t old =  HW_RTC_GetTimerContext( );
 8015096:	f7ee ffcf 	bl	8004038 <HW_RTC_GetTimerContext>
 801509a:	0003      	movs	r3, r0
 801509c:	613b      	str	r3, [r7, #16]
  uint32_t now =  HW_RTC_SetTimerContext( );
 801509e:	f7ee ffb3 	bl	8004008 <HW_RTC_SetTimerContext>
 80150a2:	0003      	movs	r3, r0
 80150a4:	60fb      	str	r3, [r7, #12]
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 80150a6:	68fa      	ldr	r2, [r7, #12]
 80150a8:	693b      	ldr	r3, [r7, #16]
 80150aa:	1ad3      	subs	r3, r2, r3
 80150ac:	60bb      	str	r3, [r7, #8]
  
  /* Update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 80150ae:	4b3a      	ldr	r3, [pc, #232]	@ (8015198 <TimerIrqHandler+0x108>)
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d01c      	beq.n	80150f0 <TimerIrqHandler+0x60>
  {
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 80150b6:	4b38      	ldr	r3, [pc, #224]	@ (8015198 <TimerIrqHandler+0x108>)
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	617b      	str	r3, [r7, #20]
 80150bc:	e014      	b.n	80150e8 <TimerIrqHandler+0x58>
    {
      next =cur->Next;
 80150be:	697b      	ldr	r3, [r7, #20]
 80150c0:	695b      	ldr	r3, [r3, #20]
 80150c2:	607b      	str	r3, [r7, #4]
      if (next->Timestamp > DeltaContext)
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	68ba      	ldr	r2, [r7, #8]
 80150ca:	429a      	cmp	r2, r3
 80150cc:	d206      	bcs.n	80150dc <TimerIrqHandler+0x4c>
      {
        next->Timestamp -= DeltaContext;
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	681a      	ldr	r2, [r3, #0]
 80150d2:	68bb      	ldr	r3, [r7, #8]
 80150d4:	1ad2      	subs	r2, r2, r3
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	601a      	str	r2, [r3, #0]
 80150da:	e002      	b.n	80150e2 <TimerIrqHandler+0x52>
      }
      else
      {
        next->Timestamp = 0 ;
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	2200      	movs	r2, #0
 80150e0:	601a      	str	r2, [r3, #0]
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 80150e2:	697b      	ldr	r3, [r7, #20]
 80150e4:	695b      	ldr	r3, [r3, #20]
 80150e6:	617b      	str	r3, [r7, #20]
 80150e8:	697b      	ldr	r3, [r7, #20]
 80150ea:	695b      	ldr	r3, [r3, #20]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d1e6      	bne.n	80150be <TimerIrqHandler+0x2e>
      }
    }
  }
  
  /* execute imediately the alarm callback */
  if ( TimerListHead != NULL )
 80150f0:	4b29      	ldr	r3, [pc, #164]	@ (8015198 <TimerIrqHandler+0x108>)
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d02e      	beq.n	8015156 <TimerIrqHandler+0xc6>
  {
    cur = TimerListHead;
 80150f8:	4b27      	ldr	r3, [pc, #156]	@ (8015198 <TimerIrqHandler+0x108>)
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	617b      	str	r3, [r7, #20]
    TimerListHead = TimerListHead->Next;
 80150fe:	4b26      	ldr	r3, [pc, #152]	@ (8015198 <TimerIrqHandler+0x108>)
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	695a      	ldr	r2, [r3, #20]
 8015104:	4b24      	ldr	r3, [pc, #144]	@ (8015198 <TimerIrqHandler+0x108>)
 8015106:	601a      	str	r2, [r3, #0]
    cur->IsStarted = false;
 8015108:	697b      	ldr	r3, [r7, #20]
 801510a:	2200      	movs	r2, #0
 801510c:	721a      	strb	r2, [r3, #8]
    exec_cb( cur->Callback, cur->Context );
 801510e:	697b      	ldr	r3, [r7, #20]
 8015110:	68db      	ldr	r3, [r3, #12]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d101      	bne.n	801511a <TimerIrqHandler+0x8a>
 8015116:	46c0      	nop			@ (mov r8, r8)
 8015118:	e7fd      	b.n	8015116 <TimerIrqHandler+0x86>
 801511a:	697b      	ldr	r3, [r7, #20]
 801511c:	68da      	ldr	r2, [r3, #12]
 801511e:	697b      	ldr	r3, [r7, #20]
 8015120:	691b      	ldr	r3, [r3, #16]
 8015122:	0018      	movs	r0, r3
 8015124:	4790      	blx	r2
  }


  // remove all the expired object from the list
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 8015126:	e016      	b.n	8015156 <TimerIrqHandler+0xc6>
  {
   cur = TimerListHead;
 8015128:	4b1b      	ldr	r3, [pc, #108]	@ (8015198 <TimerIrqHandler+0x108>)
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	617b      	str	r3, [r7, #20]
   TimerListHead = TimerListHead->Next;
 801512e:	4b1a      	ldr	r3, [pc, #104]	@ (8015198 <TimerIrqHandler+0x108>)
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	695a      	ldr	r2, [r3, #20]
 8015134:	4b18      	ldr	r3, [pc, #96]	@ (8015198 <TimerIrqHandler+0x108>)
 8015136:	601a      	str	r2, [r3, #0]
   cur->IsStarted = false;
 8015138:	697b      	ldr	r3, [r7, #20]
 801513a:	2200      	movs	r2, #0
 801513c:	721a      	strb	r2, [r3, #8]
   exec_cb( cur->Callback, cur->Context );
 801513e:	697b      	ldr	r3, [r7, #20]
 8015140:	68db      	ldr	r3, [r3, #12]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d101      	bne.n	801514a <TimerIrqHandler+0xba>
 8015146:	46c0      	nop			@ (mov r8, r8)
 8015148:	e7fd      	b.n	8015146 <TimerIrqHandler+0xb6>
 801514a:	697b      	ldr	r3, [r7, #20]
 801514c:	68da      	ldr	r2, [r3, #12]
 801514e:	697b      	ldr	r3, [r7, #20]
 8015150:	691b      	ldr	r3, [r3, #16]
 8015152:	0018      	movs	r0, r3
 8015154:	4790      	blx	r2
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 8015156:	4b10      	ldr	r3, [pc, #64]	@ (8015198 <TimerIrqHandler+0x108>)
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d007      	beq.n	801516e <TimerIrqHandler+0xde>
 801515e:	4b0e      	ldr	r3, [pc, #56]	@ (8015198 <TimerIrqHandler+0x108>)
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	681c      	ldr	r4, [r3, #0]
 8015164:	f7ee feae 	bl	8003ec4 <HW_RTC_GetTimerElapsedTime>
 8015168:	0003      	movs	r3, r0
 801516a:	429c      	cmp	r4, r3
 801516c:	d3dc      	bcc.n	8015128 <TimerIrqHandler+0x98>
  }

  /* start the next TimerListHead if it exists AND NOT running */
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 801516e:	4b0a      	ldr	r3, [pc, #40]	@ (8015198 <TimerIrqHandler+0x108>)
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d00c      	beq.n	8015190 <TimerIrqHandler+0x100>
 8015176:	4b08      	ldr	r3, [pc, #32]	@ (8015198 <TimerIrqHandler+0x108>)
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	7a5b      	ldrb	r3, [r3, #9]
 801517c:	2201      	movs	r2, #1
 801517e:	4053      	eors	r3, r2
 8015180:	b2db      	uxtb	r3, r3
 8015182:	2b00      	cmp	r3, #0
 8015184:	d004      	beq.n	8015190 <TimerIrqHandler+0x100>
  {
    TimerSetTimeout( TimerListHead );
 8015186:	4b04      	ldr	r3, [pc, #16]	@ (8015198 <TimerIrqHandler+0x108>)
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	0018      	movs	r0, r3
 801518c:	f000 f8f4 	bl	8015378 <TimerSetTimeout>
  }
}
 8015190:	46c0      	nop			@ (mov r8, r8)
 8015192:	46bd      	mov	sp, r7
 8015194:	b007      	add	sp, #28
 8015196:	bd90      	pop	{r4, r7, pc}
 8015198:	200013e4 	.word	0x200013e4

0801519c <TimerStop>:

void TimerStop( TimerEvent_t *obj ) 
{
 801519c:	b580      	push	{r7, lr}
 801519e:	b088      	sub	sp, #32
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80151a4:	f3ef 8310 	mrs	r3, PRIMASK
 80151a8:	613b      	str	r3, [r7, #16]
  return(result);
 80151aa:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 80151ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80151ae:	b672      	cpsid	i
}
 80151b0:	46c0      	nop			@ (mov r8, r8)
  
  DISABLE_IRQ( );
  
  TimerEvent_t* prev = TimerListHead;
 80151b2:	4b38      	ldr	r3, [pc, #224]	@ (8015294 <TimerStop+0xf8>)
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	61fb      	str	r3, [r7, #28]
  TimerEvent_t* cur = TimerListHead;
 80151b8:	4b36      	ldr	r3, [pc, #216]	@ (8015294 <TimerStop+0xf8>)
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	61bb      	str	r3, [r7, #24]

  // List is empty or the Obj to stop does not exist 
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 80151be:	4b35      	ldr	r3, [pc, #212]	@ (8015294 <TimerStop+0xf8>)
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d002      	beq.n	80151cc <TimerStop+0x30>
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d106      	bne.n	80151da <TimerStop+0x3e>
 80151cc:	697b      	ldr	r3, [r7, #20]
 80151ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	f383 8810 	msr	PRIMASK, r3
}
 80151d6:	46c0      	nop			@ (mov r8, r8)
  {
    RESTORE_PRIMASK( );
    return;
 80151d8:	e058      	b.n	801528c <TimerStop+0xf0>
  }

  obj->IsStarted = false;
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	2200      	movs	r2, #0
 80151de:	721a      	strb	r2, [r3, #8]

  if( TimerListHead == obj ) // Stop the Head                  
 80151e0:	4b2c      	ldr	r3, [pc, #176]	@ (8015294 <TimerStop+0xf8>)
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	687a      	ldr	r2, [r7, #4]
 80151e6:	429a      	cmp	r2, r3
 80151e8:	d147      	bne.n	801527a <TimerStop+0xde>
  {
    if( TimerListHead->IsNext2Expire == true ) // The head is already running 
 80151ea:	4b2a      	ldr	r3, [pc, #168]	@ (8015294 <TimerStop+0xf8>)
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	7a5b      	ldrb	r3, [r3, #9]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d019      	beq.n	8015228 <TimerStop+0x8c>
    {  
	  
      TimerListHead->IsNext2Expire = false;
 80151f4:	4b27      	ldr	r3, [pc, #156]	@ (8015294 <TimerStop+0xf8>)
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	2200      	movs	r2, #0
 80151fa:	725a      	strb	r2, [r3, #9]
      if( TimerListHead->Next != NULL )
 80151fc:	4b25      	ldr	r3, [pc, #148]	@ (8015294 <TimerStop+0xf8>)
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	695b      	ldr	r3, [r3, #20]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d00a      	beq.n	801521c <TimerStop+0x80>
      {
        TimerListHead = TimerListHead->Next;
 8015206:	4b23      	ldr	r3, [pc, #140]	@ (8015294 <TimerStop+0xf8>)
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	695a      	ldr	r2, [r3, #20]
 801520c:	4b21      	ldr	r3, [pc, #132]	@ (8015294 <TimerStop+0xf8>)
 801520e:	601a      	str	r2, [r3, #0]
        TimerSetTimeout( TimerListHead );
 8015210:	4b20      	ldr	r3, [pc, #128]	@ (8015294 <TimerStop+0xf8>)
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	0018      	movs	r0, r3
 8015216:	f000 f8af 	bl	8015378 <TimerSetTimeout>
 801521a:	e031      	b.n	8015280 <TimerStop+0xe4>
      }
      else
      {
        HW_RTC_StopAlarm( );
 801521c:	f7ee fe7e 	bl	8003f1c <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 8015220:	4b1c      	ldr	r3, [pc, #112]	@ (8015294 <TimerStop+0xf8>)
 8015222:	2200      	movs	r2, #0
 8015224:	601a      	str	r2, [r3, #0]
 8015226:	e02b      	b.n	8015280 <TimerStop+0xe4>
      }
    }
    else // Stop the head before it is started
    {   
      if( TimerListHead->Next != NULL )   
 8015228:	4b1a      	ldr	r3, [pc, #104]	@ (8015294 <TimerStop+0xf8>)
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	695b      	ldr	r3, [r3, #20]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d005      	beq.n	801523e <TimerStop+0xa2>
      {
        TimerListHead = TimerListHead->Next;
 8015232:	4b18      	ldr	r3, [pc, #96]	@ (8015294 <TimerStop+0xf8>)
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	695a      	ldr	r2, [r3, #20]
 8015238:	4b16      	ldr	r3, [pc, #88]	@ (8015294 <TimerStop+0xf8>)
 801523a:	601a      	str	r2, [r3, #0]
 801523c:	e020      	b.n	8015280 <TimerStop+0xe4>
      }
      else
      {
        TimerListHead = NULL;
 801523e:	4b15      	ldr	r3, [pc, #84]	@ (8015294 <TimerStop+0xf8>)
 8015240:	2200      	movs	r2, #0
 8015242:	601a      	str	r2, [r3, #0]
 8015244:	e01c      	b.n	8015280 <TimerStop+0xe4>
  }
  else // Stop an object within the list
  {      
    while( cur != NULL )
    {
      if( cur == obj )
 8015246:	69ba      	ldr	r2, [r7, #24]
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	429a      	cmp	r2, r3
 801524c:	d110      	bne.n	8015270 <TimerStop+0xd4>
      {
        if( cur->Next != NULL )
 801524e:	69bb      	ldr	r3, [r7, #24]
 8015250:	695b      	ldr	r3, [r3, #20]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d006      	beq.n	8015264 <TimerStop+0xc8>
        {
          cur = cur->Next;
 8015256:	69bb      	ldr	r3, [r7, #24]
 8015258:	695b      	ldr	r3, [r3, #20]
 801525a:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 801525c:	69fb      	ldr	r3, [r7, #28]
 801525e:	69ba      	ldr	r2, [r7, #24]
 8015260:	615a      	str	r2, [r3, #20]
        else
        {
          cur = NULL;
          prev->Next = cur;
        }
        break;
 8015262:	e00d      	b.n	8015280 <TimerStop+0xe4>
          cur = NULL;
 8015264:	2300      	movs	r3, #0
 8015266:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 8015268:	69fb      	ldr	r3, [r7, #28]
 801526a:	69ba      	ldr	r2, [r7, #24]
 801526c:	615a      	str	r2, [r3, #20]
        break;
 801526e:	e007      	b.n	8015280 <TimerStop+0xe4>
      }
      else
      {
        prev = cur;
 8015270:	69bb      	ldr	r3, [r7, #24]
 8015272:	61fb      	str	r3, [r7, #28]
        cur = cur->Next;
 8015274:	69bb      	ldr	r3, [r7, #24]
 8015276:	695b      	ldr	r3, [r3, #20]
 8015278:	61bb      	str	r3, [r7, #24]
    while( cur != NULL )
 801527a:	69bb      	ldr	r3, [r7, #24]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d1e2      	bne.n	8015246 <TimerStop+0xaa>
 8015280:	697b      	ldr	r3, [r7, #20]
 8015282:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015284:	68bb      	ldr	r3, [r7, #8]
 8015286:	f383 8810 	msr	PRIMASK, r3
}
 801528a:	46c0      	nop			@ (mov r8, r8)
      }
    }   
  }
  
  RESTORE_PRIMASK( );
}  
 801528c:	46bd      	mov	sp, r7
 801528e:	b008      	add	sp, #32
 8015290:	bd80      	pop	{r7, pc}
 8015292:	46c0      	nop			@ (mov r8, r8)
 8015294:	200013e4 	.word	0x200013e4

08015298 <TimerSetValue>:
  TimerStop( obj );
  TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 8015298:	b580      	push	{r7, lr}
 801529a:	b084      	sub	sp, #16
 801529c:	af00      	add	r7, sp, #0
 801529e:	6078      	str	r0, [r7, #4]
 80152a0:	6039      	str	r1, [r7, #0]
  uint32_t minValue = 0;
 80152a2:	2300      	movs	r3, #0
 80152a4:	60bb      	str	r3, [r7, #8]
  uint32_t ticks = HW_RTC_ms2Tick( value );
 80152a6:	683b      	ldr	r3, [r7, #0]
 80152a8:	0018      	movs	r0, r3
 80152aa:	f7ee fda1 	bl	8003df0 <HW_RTC_ms2Tick>
 80152ae:	0003      	movs	r3, r0
 80152b0:	60fb      	str	r3, [r7, #12]

  TimerStop( obj );
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	0018      	movs	r0, r3
 80152b6:	f7ff ff71 	bl	801519c <TimerStop>

  minValue = HW_RTC_GetMinimumTimeout( );
 80152ba:	f7ee fd93 	bl	8003de4 <HW_RTC_GetMinimumTimeout>
 80152be:	0003      	movs	r3, r0
 80152c0:	60bb      	str	r3, [r7, #8]
  
  if( ticks < minValue )
 80152c2:	68fa      	ldr	r2, [r7, #12]
 80152c4:	68bb      	ldr	r3, [r7, #8]
 80152c6:	429a      	cmp	r2, r3
 80152c8:	d201      	bcs.n	80152ce <TimerSetValue+0x36>
  {
    ticks = minValue;
 80152ca:	68bb      	ldr	r3, [r7, #8]
 80152cc:	60fb      	str	r3, [r7, #12]
  }

  obj->Timestamp = ticks;
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	68fa      	ldr	r2, [r7, #12]
 80152d2:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = ticks;
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	68fa      	ldr	r2, [r7, #12]
 80152d8:	605a      	str	r2, [r3, #4]
}
 80152da:	46c0      	nop			@ (mov r8, r8)
 80152dc:	46bd      	mov	sp, r7
 80152de:	b004      	add	sp, #16
 80152e0:	bd80      	pop	{r7, pc}

080152e2 <TimerGetCurrentTime>:

TimerTime_t TimerGetCurrentTime( void )
{
 80152e2:	b580      	push	{r7, lr}
 80152e4:	b082      	sub	sp, #8
 80152e6:	af00      	add	r7, sp, #0
  uint32_t now = HW_RTC_GetTimerValue( );
 80152e8:	f7ee fe04 	bl	8003ef4 <HW_RTC_GetTimerValue>
 80152ec:	0003      	movs	r3, r0
 80152ee:	607b      	str	r3, [r7, #4]
  return  HW_RTC_Tick2ms(now);
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	0018      	movs	r0, r3
 80152f4:	f7ee fd95 	bl	8003e22 <HW_RTC_Tick2ms>
 80152f8:	0003      	movs	r3, r0
}
 80152fa:	0018      	movs	r0, r3
 80152fc:	46bd      	mov	sp, r7
 80152fe:	b002      	add	sp, #8
 8015300:	bd80      	pop	{r7, pc}

08015302 <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 8015302:	b580      	push	{r7, lr}
 8015304:	b084      	sub	sp, #16
 8015306:	af00      	add	r7, sp, #0
 8015308:	6078      	str	r0, [r7, #4]
  if ( past == 0 )
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d101      	bne.n	8015314 <TimerGetElapsedTime+0x12>
  {
    return 0;
 8015310:	2300      	movs	r3, #0
 8015312:	e010      	b.n	8015336 <TimerGetElapsedTime+0x34>
  }
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 8015314:	f7ee fdee 	bl	8003ef4 <HW_RTC_GetTimerValue>
 8015318:	0003      	movs	r3, r0
 801531a:	60fb      	str	r3, [r7, #12]
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	0018      	movs	r0, r3
 8015320:	f7ee fd66 	bl	8003df0 <HW_RTC_ms2Tick>
 8015324:	0003      	movs	r3, r0
 8015326:	60bb      	str	r3, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 8015328:	68fa      	ldr	r2, [r7, #12]
 801532a:	68bb      	ldr	r3, [r7, #8]
 801532c:	1ad3      	subs	r3, r2, r3
 801532e:	0018      	movs	r0, r3
 8015330:	f7ee fd77 	bl	8003e22 <HW_RTC_Tick2ms>
 8015334:	0003      	movs	r3, r0
}
 8015336:	0018      	movs	r0, r3
 8015338:	46bd      	mov	sp, r7
 801533a:	b004      	add	sp, #16
 801533c:	bd80      	pop	{r7, pc}
	...

08015340 <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 8015340:	b580      	push	{r7, lr}
 8015342:	b084      	sub	sp, #16
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 8015348:	4b0a      	ldr	r3, [pc, #40]	@ (8015374 <TimerExists+0x34>)
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801534e:	e008      	b.n	8015362 <TimerExists+0x22>
  {
    if( cur == obj )
 8015350:	68fa      	ldr	r2, [r7, #12]
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	429a      	cmp	r2, r3
 8015356:	d101      	bne.n	801535c <TimerExists+0x1c>
    {
      return true;
 8015358:	2301      	movs	r3, #1
 801535a:	e006      	b.n	801536a <TimerExists+0x2a>
    }
    cur = cur->Next;
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	695b      	ldr	r3, [r3, #20]
 8015360:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	2b00      	cmp	r3, #0
 8015366:	d1f3      	bne.n	8015350 <TimerExists+0x10>
  }
  return false;
 8015368:	2300      	movs	r3, #0
}
 801536a:	0018      	movs	r0, r3
 801536c:	46bd      	mov	sp, r7
 801536e:	b004      	add	sp, #16
 8015370:	bd80      	pop	{r7, pc}
 8015372:	46c0      	nop			@ (mov r8, r8)
 8015374:	200013e4 	.word	0x200013e4

08015378 <TimerSetTimeout>:
static void TimerSetTimeout( TimerEvent_t *obj )
{
 8015378:	b590      	push	{r4, r7, lr}
 801537a:	b085      	sub	sp, #20
 801537c:	af00      	add	r7, sp, #0
 801537e:	6078      	str	r0, [r7, #4]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 8015380:	f7ee fd30 	bl	8003de4 <HW_RTC_GetMinimumTimeout>
 8015384:	0003      	movs	r3, r0
 8015386:	60fb      	str	r3, [r7, #12]
  obj->IsNext2Expire = true; 
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	2201      	movs	r2, #1
 801538c:	725a      	strb	r2, [r3, #9]

  // In case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	681c      	ldr	r4, [r3, #0]
 8015392:	f7ee fd97 	bl	8003ec4 <HW_RTC_GetTimerElapsedTime>
 8015396:	0002      	movs	r2, r0
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	18d3      	adds	r3, r2, r3
 801539c:	429c      	cmp	r4, r3
 801539e:	d206      	bcs.n	80153ae <TimerSetTimeout+0x36>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 80153a0:	f7ee fd90 	bl	8003ec4 <HW_RTC_GetTimerElapsedTime>
 80153a4:	0002      	movs	r2, r0
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	18d2      	adds	r2, r2, r3
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	601a      	str	r2, [r3, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	0018      	movs	r0, r3
 80153b4:	f7ee fd56 	bl	8003e64 <HW_RTC_SetAlarm>
}
 80153b8:	46c0      	nop			@ (mov r8, r8)
 80153ba:	46bd      	mov	sp, r7
 80153bc:	b005      	add	sp, #20
 80153be:	bd90      	pop	{r4, r7, pc}

080153c0 <TimerInsertTimer>:
    return RtcTempCompensation( period, temperature );
}


static void TimerInsertTimer( TimerEvent_t *obj)
{
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b084      	sub	sp, #16
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 80153c8:	4b13      	ldr	r3, [pc, #76]	@ (8015418 <TimerInsertTimer+0x58>)
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	60fb      	str	r3, [r7, #12]
  TimerEvent_t* next = TimerListHead->Next;
 80153ce:	4b12      	ldr	r3, [pc, #72]	@ (8015418 <TimerInsertTimer+0x58>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	695b      	ldr	r3, [r3, #20]
 80153d4:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 80153d6:	e012      	b.n	80153fe <TimerInsertTimer+0x3e>
  {  
    if( obj->Timestamp  > next->Timestamp )
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	681a      	ldr	r2, [r3, #0]
 80153dc:	68bb      	ldr	r3, [r7, #8]
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	429a      	cmp	r2, r3
 80153e2:	d905      	bls.n	80153f0 <TimerInsertTimer+0x30>
    {
        cur = next;
 80153e4:	68bb      	ldr	r3, [r7, #8]
 80153e6:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 80153e8:	68bb      	ldr	r3, [r7, #8]
 80153ea:	695b      	ldr	r3, [r3, #20]
 80153ec:	60bb      	str	r3, [r7, #8]
 80153ee:	e006      	b.n	80153fe <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = obj;
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	687a      	ldr	r2, [r7, #4]
 80153f4:	615a      	str	r2, [r3, #20]
        obj->Next = next;
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	68ba      	ldr	r2, [r7, #8]
 80153fa:	615a      	str	r2, [r3, #20]
        return;
 80153fc:	e009      	b.n	8015412 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	695b      	ldr	r3, [r3, #20]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d1e8      	bne.n	80153d8 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = obj;
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	687a      	ldr	r2, [r7, #4]
 801540a:	615a      	str	r2, [r3, #20]
  obj->Next = NULL;
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	2200      	movs	r2, #0
 8015410:	615a      	str	r2, [r3, #20]
}
 8015412:	46bd      	mov	sp, r7
 8015414:	b004      	add	sp, #16
 8015416:	bd80      	pop	{r7, pc}
 8015418:	200013e4 	.word	0x200013e4

0801541c <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
 801541c:	b580      	push	{r7, lr}
 801541e:	b084      	sub	sp, #16
 8015420:	af00      	add	r7, sp, #0
 8015422:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 8015424:	4b0b      	ldr	r3, [pc, #44]	@ (8015454 <TimerInsertNewHeadTimer+0x38>)
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d002      	beq.n	8015436 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsNext2Expire = false;
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	2200      	movs	r2, #0
 8015434:	725a      	strb	r2, [r3, #9]
  }

  obj->Next = cur;
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	68fa      	ldr	r2, [r7, #12]
 801543a:	615a      	str	r2, [r3, #20]
  TimerListHead = obj;
 801543c:	4b05      	ldr	r3, [pc, #20]	@ (8015454 <TimerInsertNewHeadTimer+0x38>)
 801543e:	687a      	ldr	r2, [r7, #4]
 8015440:	601a      	str	r2, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8015442:	4b04      	ldr	r3, [pc, #16]	@ (8015454 <TimerInsertNewHeadTimer+0x38>)
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	0018      	movs	r0, r3
 8015448:	f7ff ff96 	bl	8015378 <TimerSetTimeout>
}
 801544c:	46c0      	nop			@ (mov r8, r8)
 801544e:	46bd      	mov	sp, r7
 8015450:	b004      	add	sp, #16
 8015452:	bd80      	pop	{r7, pc}
 8015454:	200013e4 	.word	0x200013e4

08015458 <TraceInit>:
 */
static void Trace_TxCpltCallback(void);

/* Functions Definition ------------------------------------------------------*/
void TraceInit( void )
{
 8015458:	b580      	push	{r7, lr}
 801545a:	af00      	add	r7, sp, #0
  OutputInit(Trace_TxCpltCallback);
 801545c:	4b06      	ldr	r3, [pc, #24]	@ (8015478 <TraceInit+0x20>)
 801545e:	0018      	movs	r0, r3
 8015460:	f7ef fc54 	bl	8004d0c <vcom_Init>

  circular_queue_init(&MsgTraceQueue, MsgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE);
 8015464:	2380      	movs	r3, #128	@ 0x80
 8015466:	005a      	lsls	r2, r3, #1
 8015468:	4904      	ldr	r1, [pc, #16]	@ (801547c <TraceInit+0x24>)
 801546a:	4b05      	ldr	r3, [pc, #20]	@ (8015480 <TraceInit+0x28>)
 801546c:	0018      	movs	r0, r3
 801546e:	f7ff fa40 	bl	80148f2 <circular_queue_init>

  return;
 8015472:	46c0      	nop			@ (mov r8, r8)
}
 8015474:	46bd      	mov	sp, r7
 8015476:	bd80      	pop	{r7, pc}
 8015478:	08015595 	.word	0x08015595
 801547c:	200013f8 	.word	0x200013f8
 8015480:	200013e8 	.word	0x200013e8

08015484 <TraceSend>:

int32_t TraceSend( const char *strFormat, ...)
{
 8015484:	b40f      	push	{r0, r1, r2, r3}
 8015486:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015488:	b0c9      	sub	sp, #292	@ 0x124
 801548a:	af00      	add	r7, sp, #0
  char buf[TEMPBUFSIZE];
  va_list vaArgs;
  uint8_t* buffer;
  va_start( vaArgs, strFormat);
 801548c:	2396      	movs	r3, #150	@ 0x96
 801548e:	005b      	lsls	r3, r3, #1
 8015490:	2110      	movs	r1, #16
 8015492:	185b      	adds	r3, r3, r1
 8015494:	19db      	adds	r3, r3, r7
 8015496:	60bb      	str	r3, [r7, #8]
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 8015498:	68bb      	ldr	r3, [r7, #8]
 801549a:	2294      	movs	r2, #148	@ 0x94
 801549c:	0052      	lsls	r2, r2, #1
 801549e:	1852      	adds	r2, r2, r1
 80154a0:	19d2      	adds	r2, r2, r7
 80154a2:	6812      	ldr	r2, [r2, #0]
 80154a4:	2180      	movs	r1, #128	@ 0x80
 80154a6:	0049      	lsls	r1, r1, #1
 80154a8:	260c      	movs	r6, #12
 80154aa:	19b8      	adds	r0, r7, r6
 80154ac:	f004 fb02 	bl	8019ab4 <vsniprintf>
 80154b0:	0003      	movs	r3, r0
 80154b2:	b29a      	uxth	r2, r3
 80154b4:	4b34      	ldr	r3, [pc, #208]	@ (8015588 <TraceSend+0x104>)
 80154b6:	2490      	movs	r4, #144	@ 0x90
 80154b8:	0064      	lsls	r4, r4, #1
 80154ba:	191b      	adds	r3, r3, r4
 80154bc:	19db      	adds	r3, r3, r7
 80154be:	801a      	strh	r2, [r3, #0]
  va_end(vaArgs);
  int status=0;
 80154c0:	2300      	movs	r3, #0
 80154c2:	258e      	movs	r5, #142	@ 0x8e
 80154c4:	006d      	lsls	r5, r5, #1
 80154c6:	197a      	adds	r2, r7, r5
 80154c8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80154ca:	f3ef 8310 	mrs	r3, PRIMASK
 80154ce:	228a      	movs	r2, #138	@ 0x8a
 80154d0:	0052      	lsls	r2, r2, #1
 80154d2:	18b9      	adds	r1, r7, r2
 80154d4:	600b      	str	r3, [r1, #0]
  return(result);
 80154d6:	18bb      	adds	r3, r7, r2
 80154d8:	681b      	ldr	r3, [r3, #0]
  
  BACKUP_PRIMASK();
 80154da:	228c      	movs	r2, #140	@ 0x8c
 80154dc:	0052      	lsls	r2, r2, #1
 80154de:	18b9      	adds	r1, r7, r2
 80154e0:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80154e2:	b672      	cpsid	i
}
 80154e4:	46c0      	nop			@ (mov r8, r8)
  
  DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  //DBG_GPIO_SET(GPIOB, GPIO_PIN_15);
  //DBG_GPIO_RST(GPIOB, GPIO_PIN_15);
  status =circular_queue_add(&MsgTraceQueue,(uint8_t*)buf, bufSize);
 80154e6:	4b28      	ldr	r3, [pc, #160]	@ (8015588 <TraceSend+0x104>)
 80154e8:	191b      	adds	r3, r3, r4
 80154ea:	19db      	adds	r3, r3, r7
 80154ec:	881a      	ldrh	r2, [r3, #0]
 80154ee:	19b9      	adds	r1, r7, r6
 80154f0:	4b26      	ldr	r3, [pc, #152]	@ (801558c <TraceSend+0x108>)
 80154f2:	0018      	movs	r0, r3
 80154f4:	f7ff fa1b 	bl	801492e <circular_queue_add>
 80154f8:	0003      	movs	r3, r0
 80154fa:	1979      	adds	r1, r7, r5
 80154fc:	600b      	str	r3, [r1, #0]
  
  if ((status==0 ) && (TracePeripheralReady==SET))
 80154fe:	197b      	adds	r3, r7, r5
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d128      	bne.n	8015558 <TraceSend+0xd4>
 8015506:	4b22      	ldr	r3, [pc, #136]	@ (8015590 <TraceSend+0x10c>)
 8015508:	781b      	ldrb	r3, [r3, #0]
 801550a:	b2db      	uxtb	r3, r3
 801550c:	2b01      	cmp	r3, #1
 801550e:	d123      	bne.n	8015558 <TraceSend+0xd4>
  {
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 8015510:	1cba      	adds	r2, r7, #2
 8015512:	1d39      	adds	r1, r7, #4
 8015514:	4b1d      	ldr	r3, [pc, #116]	@ (801558c <TraceSend+0x108>)
 8015516:	0018      	movs	r0, r3
 8015518:	f7ff face 	bl	8014ab8 <circular_queue_get>
    TracePeripheralReady = RESET;
 801551c:	4b1c      	ldr	r3, [pc, #112]	@ (8015590 <TraceSend+0x10c>)
 801551e:	2200      	movs	r2, #0
 8015520:	701a      	strb	r2, [r3, #0]
    //DBG_GPIO_RST(GPIOB, GPIO_PIN_12);
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 8015522:	2101      	movs	r1, #1
 8015524:	2020      	movs	r0, #32
 8015526:	f7ff f94f 	bl	80147c8 <LPM_SetStopMode>
 801552a:	228c      	movs	r2, #140	@ 0x8c
 801552c:	0052      	lsls	r2, r2, #1
 801552e:	18bb      	adds	r3, r7, r2
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	2288      	movs	r2, #136	@ 0x88
 8015534:	0052      	lsls	r2, r2, #1
 8015536:	18b9      	adds	r1, r7, r2
 8015538:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801553a:	18bb      	adds	r3, r7, r2
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	f383 8810 	msr	PRIMASK, r3
}
 8015542:	46c0      	nop			@ (mov r8, r8)

    RESTORE_PRIMASK();
    OutputTrace(buffer, bufSize);
 8015544:	687a      	ldr	r2, [r7, #4]
 8015546:	4b10      	ldr	r3, [pc, #64]	@ (8015588 <TraceSend+0x104>)
 8015548:	191b      	adds	r3, r3, r4
 801554a:	19db      	adds	r3, r3, r7
 801554c:	881b      	ldrh	r3, [r3, #0]
 801554e:	0019      	movs	r1, r3
 8015550:	0010      	movs	r0, r2
 8015552:	f7ef fc0b 	bl	8004d6c <vcom_Trace>
 8015556:	e00c      	b.n	8015572 <TraceSend+0xee>
 8015558:	238c      	movs	r3, #140	@ 0x8c
 801555a:	005b      	lsls	r3, r3, #1
 801555c:	18fb      	adds	r3, r7, r3
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	2286      	movs	r2, #134	@ 0x86
 8015562:	0052      	lsls	r2, r2, #1
 8015564:	18b9      	adds	r1, r7, r2
 8015566:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015568:	18bb      	adds	r3, r7, r2
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	f383 8810 	msr	PRIMASK, r3
}
 8015570:	46c0      	nop			@ (mov r8, r8)
  else
  {
    RESTORE_PRIMASK();
  }
  
  return status;
 8015572:	238e      	movs	r3, #142	@ 0x8e
 8015574:	005b      	lsls	r3, r3, #1
 8015576:	18fb      	adds	r3, r7, r3
 8015578:	681b      	ldr	r3, [r3, #0]
}
 801557a:	0018      	movs	r0, r3
 801557c:	46bd      	mov	sp, r7
 801557e:	b049      	add	sp, #292	@ 0x124
 8015580:	bcf0      	pop	{r4, r5, r6, r7}
 8015582:	bc08      	pop	{r3}
 8015584:	b004      	add	sp, #16
 8015586:	4718      	bx	r3
 8015588:	fffffee2 	.word	0xfffffee2
 801558c:	200013e8 	.word	0x200013e8
 8015590:	200000cc 	.word	0x200000cc

08015594 <Trace_TxCpltCallback>:
}

/* Private Functions Definition ------------------------------------------------------*/

static void Trace_TxCpltCallback(void)
{
 8015594:	b580      	push	{r7, lr}
 8015596:	b088      	sub	sp, #32
 8015598:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801559a:	f3ef 8310 	mrs	r3, PRIMASK
 801559e:	617b      	str	r3, [r7, #20]
  return(result);
 80155a0:	697b      	ldr	r3, [r7, #20]
  int status;
  uint8_t* buffer;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 80155a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80155a4:	b672      	cpsid	i
}
 80155a6:	46c0      	nop			@ (mov r8, r8)

  DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  circular_queue_remove(&MsgTraceQueue);
 80155a8:	4b19      	ldr	r3, [pc, #100]	@ (8015610 <Trace_TxCpltCallback+0x7c>)
 80155aa:	0018      	movs	r0, r3
 80155ac:	f7ff fadc 	bl	8014b68 <circular_queue_remove>
  //DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
  //DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
  /* Sense if new data to be sent */
  status=circular_queue_sense(&MsgTraceQueue);
 80155b0:	4b17      	ldr	r3, [pc, #92]	@ (8015610 <Trace_TxCpltCallback+0x7c>)
 80155b2:	0018      	movs	r0, r3
 80155b4:	f7ff fb38 	bl	8014c28 <circular_queue_sense>
 80155b8:	0003      	movs	r3, r0
 80155ba:	61bb      	str	r3, [r7, #24]

  if ( status == 0) 
 80155bc:	69bb      	ldr	r3, [r7, #24]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d114      	bne.n	80155ec <Trace_TxCpltCallback+0x58>
  {
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 80155c2:	1dba      	adds	r2, r7, #6
 80155c4:	2308      	movs	r3, #8
 80155c6:	18f9      	adds	r1, r7, r3
 80155c8:	4b11      	ldr	r3, [pc, #68]	@ (8015610 <Trace_TxCpltCallback+0x7c>)
 80155ca:	0018      	movs	r0, r3
 80155cc:	f7ff fa74 	bl	8014ab8 <circular_queue_get>
 80155d0:	69fb      	ldr	r3, [r7, #28]
 80155d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80155d4:	693b      	ldr	r3, [r7, #16]
 80155d6:	f383 8810 	msr	PRIMASK, r3
}
 80155da:	46c0      	nop			@ (mov r8, r8)
    RESTORE_PRIMASK();
    //DBG_GPIO_SET(GPIOB, GPIO_PIN_14);
    //DBG_GPIO_RST(GPIOB, GPIO_PIN_14);
    OutputTrace(buffer, bufSize);
 80155dc:	68ba      	ldr	r2, [r7, #8]
 80155de:	1dbb      	adds	r3, r7, #6
 80155e0:	881b      	ldrh	r3, [r3, #0]
 80155e2:	0019      	movs	r1, r3
 80155e4:	0010      	movs	r0, r2
 80155e6:	f7ef fbc1 	bl	8004d6c <vcom_Trace>

    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
    TracePeripheralReady = SET;
    RESTORE_PRIMASK();
  }
}
 80155ea:	e00c      	b.n	8015606 <Trace_TxCpltCallback+0x72>
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
 80155ec:	2100      	movs	r1, #0
 80155ee:	2020      	movs	r0, #32
 80155f0:	f7ff f8ea 	bl	80147c8 <LPM_SetStopMode>
    TracePeripheralReady = SET;
 80155f4:	4b07      	ldr	r3, [pc, #28]	@ (8015614 <Trace_TxCpltCallback+0x80>)
 80155f6:	2201      	movs	r2, #1
 80155f8:	701a      	strb	r2, [r3, #0]
 80155fa:	69fb      	ldr	r3, [r7, #28]
 80155fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	f383 8810 	msr	PRIMASK, r3
}
 8015604:	46c0      	nop			@ (mov r8, r8)
}
 8015606:	46c0      	nop			@ (mov r8, r8)
 8015608:	46bd      	mov	sp, r7
 801560a:	b008      	add	sp, #32
 801560c:	bd80      	pop	{r7, pc}
 801560e:	46c0      	nop			@ (mov r8, r8)
 8015610:	200013e8 	.word	0x200013e8
 8015614:	200000cc 	.word	0x200000cc

08015618 <rand1>:
#define RAND_LOCAL_MAX 2147483647L

static uint32_t next = 1;

int32_t rand1( void )
{
 8015618:	b580      	push	{r7, lr}
 801561a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801561c:	4b08      	ldr	r3, [pc, #32]	@ (8015640 <rand1+0x28>)
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	4a08      	ldr	r2, [pc, #32]	@ (8015644 <rand1+0x2c>)
 8015622:	4353      	muls	r3, r2
 8015624:	4a08      	ldr	r2, [pc, #32]	@ (8015648 <rand1+0x30>)
 8015626:	189a      	adds	r2, r3, r2
 8015628:	4b05      	ldr	r3, [pc, #20]	@ (8015640 <rand1+0x28>)
 801562a:	601a      	str	r2, [r3, #0]
 801562c:	4b04      	ldr	r3, [pc, #16]	@ (8015640 <rand1+0x28>)
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	4906      	ldr	r1, [pc, #24]	@ (801564c <rand1+0x34>)
 8015632:	0018      	movs	r0, r3
 8015634:	f7ea fdf8 	bl	8000228 <__aeabi_uidivmod>
 8015638:	000b      	movs	r3, r1
}
 801563a:	0018      	movs	r0, r3
 801563c:	46bd      	mov	sp, r7
 801563e:	bd80      	pop	{r7, pc}
 8015640:	200000d0 	.word	0x200000d0
 8015644:	41c64e6d 	.word	0x41c64e6d
 8015648:	00003039 	.word	0x00003039
 801564c:	7fffffff 	.word	0x7fffffff

08015650 <srand1>:

void srand1( uint32_t seed )
{
 8015650:	b580      	push	{r7, lr}
 8015652:	b082      	sub	sp, #8
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
    next = seed;
 8015658:	4b03      	ldr	r3, [pc, #12]	@ (8015668 <srand1+0x18>)
 801565a:	687a      	ldr	r2, [r7, #4]
 801565c:	601a      	str	r2, [r3, #0]
}
 801565e:	46c0      	nop			@ (mov r8, r8)
 8015660:	46bd      	mov	sp, r7
 8015662:	b002      	add	sp, #8
 8015664:	bd80      	pop	{r7, pc}
 8015666:	46c0      	nop			@ (mov r8, r8)
 8015668:	200000d0 	.word	0x200000d0

0801566c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801566c:	b580      	push	{r7, lr}
 801566e:	b082      	sub	sp, #8
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
 8015674:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8015676:	f7ff ffcf 	bl	8015618 <rand1>
 801567a:	683a      	ldr	r2, [r7, #0]
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	1ad3      	subs	r3, r2, r3
 8015680:	3301      	adds	r3, #1
 8015682:	0019      	movs	r1, r3
 8015684:	f7ea feba 	bl	80003fc <__aeabi_idivmod>
 8015688:	000b      	movs	r3, r1
 801568a:	001a      	movs	r2, r3
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	18d3      	adds	r3, r2, r3
}
 8015690:	0018      	movs	r0, r3
 8015692:	46bd      	mov	sp, r7
 8015694:	b002      	add	sp, #8
 8015696:	bd80      	pop	{r7, pc}

08015698 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b084      	sub	sp, #16
 801569c:	af00      	add	r7, sp, #0
 801569e:	60f8      	str	r0, [r7, #12]
 80156a0:	60b9      	str	r1, [r7, #8]
 80156a2:	1dbb      	adds	r3, r7, #6
 80156a4:	801a      	strh	r2, [r3, #0]
    while( size-- )
 80156a6:	e007      	b.n	80156b8 <memcpy1+0x20>
    {
        *dst++ = *src++;
 80156a8:	68ba      	ldr	r2, [r7, #8]
 80156aa:	1c53      	adds	r3, r2, #1
 80156ac:	60bb      	str	r3, [r7, #8]
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	1c59      	adds	r1, r3, #1
 80156b2:	60f9      	str	r1, [r7, #12]
 80156b4:	7812      	ldrb	r2, [r2, #0]
 80156b6:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80156b8:	1dbb      	adds	r3, r7, #6
 80156ba:	881b      	ldrh	r3, [r3, #0]
 80156bc:	1dba      	adds	r2, r7, #6
 80156be:	1e59      	subs	r1, r3, #1
 80156c0:	8011      	strh	r1, [r2, #0]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d1f0      	bne.n	80156a8 <memcpy1+0x10>
    }
}
 80156c6:	46c0      	nop			@ (mov r8, r8)
 80156c8:	46c0      	nop			@ (mov r8, r8)
 80156ca:	46bd      	mov	sp, r7
 80156cc:	b004      	add	sp, #16
 80156ce:	bd80      	pop	{r7, pc}

080156d0 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80156d0:	b580      	push	{r7, lr}
 80156d2:	b084      	sub	sp, #16
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	60f8      	str	r0, [r7, #12]
 80156d8:	60b9      	str	r1, [r7, #8]
 80156da:	1dbb      	adds	r3, r7, #6
 80156dc:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
 80156de:	1dbb      	adds	r3, r7, #6
 80156e0:	881b      	ldrh	r3, [r3, #0]
 80156e2:	3b01      	subs	r3, #1
 80156e4:	68fa      	ldr	r2, [r7, #12]
 80156e6:	18d3      	adds	r3, r2, r3
 80156e8:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80156ea:	e007      	b.n	80156fc <memcpyr+0x2c>
    {
        *dst-- = *src++;
 80156ec:	68ba      	ldr	r2, [r7, #8]
 80156ee:	1c53      	adds	r3, r2, #1
 80156f0:	60bb      	str	r3, [r7, #8]
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	1e59      	subs	r1, r3, #1
 80156f6:	60f9      	str	r1, [r7, #12]
 80156f8:	7812      	ldrb	r2, [r2, #0]
 80156fa:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80156fc:	1dbb      	adds	r3, r7, #6
 80156fe:	881b      	ldrh	r3, [r3, #0]
 8015700:	1dba      	adds	r2, r7, #6
 8015702:	1e59      	subs	r1, r3, #1
 8015704:	8011      	strh	r1, [r2, #0]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d1f0      	bne.n	80156ec <memcpyr+0x1c>
    }
}
 801570a:	46c0      	nop			@ (mov r8, r8)
 801570c:	46c0      	nop			@ (mov r8, r8)
 801570e:	46bd      	mov	sp, r7
 8015710:	b004      	add	sp, #16
 8015712:	bd80      	pop	{r7, pc}

08015714 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b082      	sub	sp, #8
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
 801571c:	0008      	movs	r0, r1
 801571e:	0011      	movs	r1, r2
 8015720:	1cfb      	adds	r3, r7, #3
 8015722:	1c02      	adds	r2, r0, #0
 8015724:	701a      	strb	r2, [r3, #0]
 8015726:	003b      	movs	r3, r7
 8015728:	1c0a      	adds	r2, r1, #0
 801572a:	801a      	strh	r2, [r3, #0]
    while( size-- )
 801572c:	e005      	b.n	801573a <memset1+0x26>
    {
        *dst++ = value;
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	1c5a      	adds	r2, r3, #1
 8015732:	607a      	str	r2, [r7, #4]
 8015734:	1cfa      	adds	r2, r7, #3
 8015736:	7812      	ldrb	r2, [r2, #0]
 8015738:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801573a:	003b      	movs	r3, r7
 801573c:	881b      	ldrh	r3, [r3, #0]
 801573e:	003a      	movs	r2, r7
 8015740:	1e59      	subs	r1, r3, #1
 8015742:	8011      	strh	r1, [r2, #0]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d1f2      	bne.n	801572e <memset1+0x1a>
    }
}
 8015748:	46c0      	nop			@ (mov r8, r8)
 801574a:	46c0      	nop			@ (mov r8, r8)
 801574c:	46bd      	mov	sp, r7
 801574e:	b002      	add	sp, #8
 8015750:	bd80      	pop	{r7, pc}
	...

08015754 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015754:	b580      	push	{r7, lr}
 8015756:	b082      	sub	sp, #8
 8015758:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801575a:	1dfb      	adds	r3, r7, #7
 801575c:	2200      	movs	r2, #0
 801575e:	701a      	strb	r2, [r3, #0]
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8015760:	4b0b      	ldr	r3, [pc, #44]	@ (8015790 <HAL_Init+0x3c>)
 8015762:	681a      	ldr	r2, [r3, #0]
 8015764:	4b0a      	ldr	r3, [pc, #40]	@ (8015790 <HAL_Init+0x3c>)
 8015766:	2102      	movs	r1, #2
 8015768:	430a      	orrs	r2, r1
 801576a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801576c:	2003      	movs	r0, #3
 801576e:	f7ed fc1b 	bl	8002fa8 <HAL_InitTick>
 8015772:	1e03      	subs	r3, r0, #0
 8015774:	d003      	beq.n	801577e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8015776:	1dfb      	adds	r3, r7, #7
 8015778:	2201      	movs	r2, #1
 801577a:	701a      	strb	r2, [r3, #0]
 801577c:	e001      	b.n	8015782 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801577e:	f7ed fc29 	bl	8002fd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8015782:	1dfb      	adds	r3, r7, #7
 8015784:	781b      	ldrb	r3, [r3, #0]
}
 8015786:	0018      	movs	r0, r3
 8015788:	46bd      	mov	sp, r7
 801578a:	b002      	add	sp, #8
 801578c:	bd80      	pop	{r7, pc}
 801578e:	46c0      	nop			@ (mov r8, r8)
 8015790:	40022000 	.word	0x40022000

08015794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015794:	b580      	push	{r7, lr}
 8015796:	af00      	add	r7, sp, #0
  uwTick++;
 8015798:	4b03      	ldr	r3, [pc, #12]	@ (80157a8 <HAL_IncTick+0x14>)
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	1c5a      	adds	r2, r3, #1
 801579e:	4b02      	ldr	r3, [pc, #8]	@ (80157a8 <HAL_IncTick+0x14>)
 80157a0:	601a      	str	r2, [r3, #0]
}
 80157a2:	46c0      	nop			@ (mov r8, r8)
 80157a4:	46bd      	mov	sp, r7
 80157a6:	bd80      	pop	{r7, pc}
 80157a8:	200014f8 	.word	0x200014f8

080157ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	af00      	add	r7, sp, #0
  return uwTick;
 80157b0:	4b02      	ldr	r3, [pc, #8]	@ (80157bc <HAL_GetTick+0x10>)
 80157b2:	681b      	ldr	r3, [r3, #0]
}
 80157b4:	0018      	movs	r0, r3
 80157b6:	46bd      	mov	sp, r7
 80157b8:	bd80      	pop	{r7, pc}
 80157ba:	46c0      	nop			@ (mov r8, r8)
 80157bc:	200014f8 	.word	0x200014f8

080157c0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80157c0:	b580      	push	{r7, lr}
 80157c2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80157c4:	4b04      	ldr	r3, [pc, #16]	@ (80157d8 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 80157c6:	685a      	ldr	r2, [r3, #4]
 80157c8:	4b03      	ldr	r3, [pc, #12]	@ (80157d8 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 80157ca:	2101      	movs	r1, #1
 80157cc:	430a      	orrs	r2, r1
 80157ce:	605a      	str	r2, [r3, #4]
}
 80157d0:	46c0      	nop			@ (mov r8, r8)
 80157d2:	46bd      	mov	sp, r7
 80157d4:	bd80      	pop	{r7, pc}
 80157d6:	46c0      	nop			@ (mov r8, r8)
 80157d8:	40015800 	.word	0x40015800

080157dc <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80157dc:	b580      	push	{r7, lr}
 80157de:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80157e0:	4b04      	ldr	r3, [pc, #16]	@ (80157f4 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80157e2:	685a      	ldr	r2, [r3, #4]
 80157e4:	4b03      	ldr	r3, [pc, #12]	@ (80157f4 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80157e6:	2102      	movs	r1, #2
 80157e8:	430a      	orrs	r2, r1
 80157ea:	605a      	str	r2, [r3, #4]
}
 80157ec:	46c0      	nop			@ (mov r8, r8)
 80157ee:	46bd      	mov	sp, r7
 80157f0:	bd80      	pop	{r7, pc}
 80157f2:	46c0      	nop			@ (mov r8, r8)
 80157f4:	40015800 	.word	0x40015800

080157f8 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80157f8:	b580      	push	{r7, lr}
 80157fa:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80157fc:	4b04      	ldr	r3, [pc, #16]	@ (8015810 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80157fe:	685a      	ldr	r2, [r3, #4]
 8015800:	4b03      	ldr	r3, [pc, #12]	@ (8015810 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8015802:	2104      	movs	r1, #4
 8015804:	430a      	orrs	r2, r1
 8015806:	605a      	str	r2, [r3, #4]
}
 8015808:	46c0      	nop			@ (mov r8, r8)
 801580a:	46bd      	mov	sp, r7
 801580c:	bd80      	pop	{r7, pc}
 801580e:	46c0      	nop			@ (mov r8, r8)
 8015810:	40015800 	.word	0x40015800

08015814 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8015814:	b580      	push	{r7, lr}
 8015816:	b082      	sub	sp, #8
 8015818:	af00      	add	r7, sp, #0
 801581a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d101      	bne.n	8015826 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8015822:	2301      	movs	r3, #1
 8015824:	e159      	b.n	8015ada <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801582a:	2b00      	cmp	r3, #0
 801582c:	d10a      	bne.n	8015844 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	2200      	movs	r2, #0
 8015832:	659a      	str	r2, [r3, #88]	@ 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	2250      	movs	r2, #80	@ 0x50
 8015838:	2100      	movs	r1, #0
 801583a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	0018      	movs	r0, r3
 8015840:	f000 f9f8 	bl	8015c34 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015848:	2210      	movs	r2, #16
 801584a:	4013      	ands	r3, r2
 801584c:	2b10      	cmp	r3, #16
 801584e:	d005      	beq.n	801585c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	689b      	ldr	r3, [r3, #8]
 8015856:	2204      	movs	r2, #4
 8015858:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 801585a:	d00b      	beq.n	8015874 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015860:	2210      	movs	r2, #16
 8015862:	431a      	orrs	r2, r3
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	655a      	str	r2, [r3, #84]	@ 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	2250      	movs	r2, #80	@ 0x50
 801586c:	2100      	movs	r1, #0
 801586e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8015870:	2301      	movs	r3, #1
 8015872:	e132      	b.n	8015ada <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015878:	4a9a      	ldr	r2, [pc, #616]	@ (8015ae4 <HAL_ADC_Init+0x2d0>)
 801587a:	4013      	ands	r3, r2
 801587c:	2202      	movs	r2, #2
 801587e:	431a      	orrs	r2, r3
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	689b      	ldr	r3, [r3, #8]
 801588a:	2203      	movs	r2, #3
 801588c:	4013      	ands	r3, r2
 801588e:	2b01      	cmp	r3, #1
 8015890:	d108      	bne.n	80158a4 <HAL_ADC_Init+0x90>
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	2201      	movs	r2, #1
 801589a:	4013      	ands	r3, r2
 801589c:	2b01      	cmp	r3, #1
 801589e:	d101      	bne.n	80158a4 <HAL_ADC_Init+0x90>
 80158a0:	2301      	movs	r3, #1
 80158a2:	e000      	b.n	80158a6 <HAL_ADC_Init+0x92>
 80158a4:	2300      	movs	r3, #0
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d149      	bne.n	801593e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	685a      	ldr	r2, [r3, #4]
 80158ae:	23c0      	movs	r3, #192	@ 0xc0
 80158b0:	061b      	lsls	r3, r3, #24
 80158b2:	429a      	cmp	r2, r3
 80158b4:	d00b      	beq.n	80158ce <HAL_ADC_Init+0xba>
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	685a      	ldr	r2, [r3, #4]
 80158ba:	2380      	movs	r3, #128	@ 0x80
 80158bc:	05db      	lsls	r3, r3, #23
 80158be:	429a      	cmp	r2, r3
 80158c0:	d005      	beq.n	80158ce <HAL_ADC_Init+0xba>
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	685a      	ldr	r2, [r3, #4]
 80158c6:	2380      	movs	r3, #128	@ 0x80
 80158c8:	061b      	lsls	r3, r3, #24
 80158ca:	429a      	cmp	r2, r3
 80158cc:	d111      	bne.n	80158f2 <HAL_ADC_Init+0xde>
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	691a      	ldr	r2, [r3, #16]
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	0092      	lsls	r2, r2, #2
 80158da:	0892      	lsrs	r2, r2, #2
 80158dc:	611a      	str	r2, [r3, #16]
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	6919      	ldr	r1, [r3, #16]
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	685a      	ldr	r2, [r3, #4]
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	430a      	orrs	r2, r1
 80158ee:	611a      	str	r2, [r3, #16]
 80158f0:	e014      	b.n	801591c <HAL_ADC_Init+0x108>
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	691a      	ldr	r2, [r3, #16]
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	0092      	lsls	r2, r2, #2
 80158fe:	0892      	lsrs	r2, r2, #2
 8015900:	611a      	str	r2, [r3, #16]
 8015902:	4b79      	ldr	r3, [pc, #484]	@ (8015ae8 <HAL_ADC_Init+0x2d4>)
 8015904:	681a      	ldr	r2, [r3, #0]
 8015906:	4b78      	ldr	r3, [pc, #480]	@ (8015ae8 <HAL_ADC_Init+0x2d4>)
 8015908:	4978      	ldr	r1, [pc, #480]	@ (8015aec <HAL_ADC_Init+0x2d8>)
 801590a:	400a      	ands	r2, r1
 801590c:	601a      	str	r2, [r3, #0]
 801590e:	4b76      	ldr	r3, [pc, #472]	@ (8015ae8 <HAL_ADC_Init+0x2d4>)
 8015910:	6819      	ldr	r1, [r3, #0]
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	685a      	ldr	r2, [r3, #4]
 8015916:	4b74      	ldr	r3, [pc, #464]	@ (8015ae8 <HAL_ADC_Init+0x2d4>)
 8015918:	430a      	orrs	r2, r1
 801591a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	68da      	ldr	r2, [r3, #12]
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	2118      	movs	r1, #24
 8015928:	438a      	bics	r2, r1
 801592a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	68d9      	ldr	r1, [r3, #12]
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	689a      	ldr	r2, [r3, #8]
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	430a      	orrs	r2, r1
 801593c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 801593e:	4b6a      	ldr	r3, [pc, #424]	@ (8015ae8 <HAL_ADC_Init+0x2d4>)
 8015940:	681a      	ldr	r2, [r3, #0]
 8015942:	4b69      	ldr	r3, [pc, #420]	@ (8015ae8 <HAL_ADC_Init+0x2d4>)
 8015944:	496a      	ldr	r1, [pc, #424]	@ (8015af0 <HAL_ADC_Init+0x2dc>)
 8015946:	400a      	ands	r2, r1
 8015948:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 801594a:	4b67      	ldr	r3, [pc, #412]	@ (8015ae8 <HAL_ADC_Init+0x2d4>)
 801594c:	6819      	ldr	r1, [r3, #0]
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015952:	065a      	lsls	r2, r3, #25
 8015954:	4b64      	ldr	r3, [pc, #400]	@ (8015ae8 <HAL_ADC_Init+0x2d4>)
 8015956:	430a      	orrs	r2, r1
 8015958:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	689a      	ldr	r2, [r3, #8]
 8015960:	2380      	movs	r3, #128	@ 0x80
 8015962:	055b      	lsls	r3, r3, #21
 8015964:	4013      	ands	r3, r2
 8015966:	d108      	bne.n	801597a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	689a      	ldr	r2, [r3, #8]
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	2180      	movs	r1, #128	@ 0x80
 8015974:	0549      	lsls	r1, r1, #21
 8015976:	430a      	orrs	r2, r1
 8015978:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	68da      	ldr	r2, [r3, #12]
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	495b      	ldr	r1, [pc, #364]	@ (8015af4 <HAL_ADC_Init+0x2e0>)
 8015986:	400a      	ands	r2, r1
 8015988:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	68d9      	ldr	r1, [r3, #12]
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	691b      	ldr	r3, [r3, #16]
 8015998:	2b02      	cmp	r3, #2
 801599a:	d101      	bne.n	80159a0 <HAL_ADC_Init+0x18c>
 801599c:	2304      	movs	r3, #4
 801599e:	e000      	b.n	80159a2 <HAL_ADC_Init+0x18e>
 80159a0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80159a2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	2020      	movs	r0, #32
 80159a8:	5c1b      	ldrb	r3, [r3, r0]
 80159aa:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80159ac:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	202c      	movs	r0, #44	@ 0x2c
 80159b2:	5c1b      	ldrb	r3, [r3, r0]
 80159b4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80159b6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80159bc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	699b      	ldr	r3, [r3, #24]
 80159c2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80159c4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	69db      	ldr	r3, [r3, #28]
 80159ca:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80159cc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	430a      	orrs	r2, r1
 80159d4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80159da:	23c2      	movs	r3, #194	@ 0xc2
 80159dc:	33ff      	adds	r3, #255	@ 0xff
 80159de:	429a      	cmp	r2, r3
 80159e0:	d00b      	beq.n	80159fa <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	68d9      	ldr	r1, [r3, #12]
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80159f0:	431a      	orrs	r2, r3
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	430a      	orrs	r2, r1
 80159f8:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	2221      	movs	r2, #33	@ 0x21
 80159fe:	5c9b      	ldrb	r3, [r3, r2]
 8015a00:	2b01      	cmp	r3, #1
 8015a02:	d11a      	bne.n	8015a3a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	2220      	movs	r2, #32
 8015a08:	5c9b      	ldrb	r3, [r3, r2]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d109      	bne.n	8015a22 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	68da      	ldr	r2, [r3, #12]
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	2180      	movs	r1, #128	@ 0x80
 8015a1a:	0249      	lsls	r1, r1, #9
 8015a1c:	430a      	orrs	r2, r1
 8015a1e:	60da      	str	r2, [r3, #12]
 8015a20:	e00b      	b.n	8015a3a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015a26:	2220      	movs	r2, #32
 8015a28:	431a      	orrs	r2, r3
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015a32:	2201      	movs	r2, #1
 8015a34:	431a      	orrs	r2, r3
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015a3e:	2b01      	cmp	r3, #1
 8015a40:	d11f      	bne.n	8015a82 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	691a      	ldr	r2, [r3, #16]
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	492a      	ldr	r1, [pc, #168]	@ (8015af8 <HAL_ADC_Init+0x2e4>)
 8015a4e:	400a      	ands	r2, r1
 8015a50:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	6919      	ldr	r1, [r3, #16]
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8015a60:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8015a66:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	430a      	orrs	r2, r1
 8015a6e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	691a      	ldr	r2, [r3, #16]
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	2101      	movs	r1, #1
 8015a7c:	430a      	orrs	r2, r1
 8015a7e:	611a      	str	r2, [r3, #16]
 8015a80:	e00e      	b.n	8015aa0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	691b      	ldr	r3, [r3, #16]
 8015a88:	2201      	movs	r2, #1
 8015a8a:	4013      	ands	r3, r2
 8015a8c:	2b01      	cmp	r3, #1
 8015a8e:	d107      	bne.n	8015aa0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	691a      	ldr	r2, [r3, #16]
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	2101      	movs	r1, #1
 8015a9c:	438a      	bics	r2, r1
 8015a9e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	695a      	ldr	r2, [r3, #20]
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	2107      	movs	r1, #7
 8015aac:	438a      	bics	r2, r1
 8015aae:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	6959      	ldr	r1, [r3, #20]
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	430a      	orrs	r2, r1
 8015ac0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015acc:	2203      	movs	r2, #3
 8015ace:	4393      	bics	r3, r2
 8015ad0:	2201      	movs	r2, #1
 8015ad2:	431a      	orrs	r2, r3
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8015ad8:	2300      	movs	r3, #0
}
 8015ada:	0018      	movs	r0, r3
 8015adc:	46bd      	mov	sp, r7
 8015ade:	b002      	add	sp, #8
 8015ae0:	bd80      	pop	{r7, pc}
 8015ae2:	46c0      	nop			@ (mov r8, r8)
 8015ae4:	fffffefd 	.word	0xfffffefd
 8015ae8:	40012708 	.word	0x40012708
 8015aec:	ffc3ffff 	.word	0xffc3ffff
 8015af0:	fdffffff 	.word	0xfdffffff
 8015af4:	fffe0219 	.word	0xfffe0219
 8015af8:	fffffc03 	.word	0xfffffc03

08015afc <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8015afc:	b5b0      	push	{r4, r5, r7, lr}
 8015afe:	b084      	sub	sp, #16
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8015b04:	230f      	movs	r3, #15
 8015b06:	18fb      	adds	r3, r7, r3
 8015b08:	2200      	movs	r2, #0
 8015b0a:	701a      	strb	r2, [r3, #0]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d101      	bne.n	8015b16 <HAL_ADC_DeInit+0x1a>
  {
    return HAL_ERROR;
 8015b12:	2301      	movs	r3, #1
 8015b14:	e07d      	b.n	8015c12 <HAL_ADC_DeInit+0x116>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015b1a:	2202      	movs	r2, #2
 8015b1c:	431a      	orrs	r2, r3
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	655a      	str	r2, [r3, #84]	@ 0x54
  
  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8015b22:	250f      	movs	r5, #15
 8015b24:	197c      	adds	r4, r7, r5
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	0018      	movs	r0, r3
 8015b2a:	f000 facf 	bl	80160cc <ADC_ConversionStop>
 8015b2e:	0003      	movs	r3, r0
 8015b30:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8015b32:	197b      	adds	r3, r7, r5
 8015b34:	781b      	ldrb	r3, [r3, #0]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d10d      	bne.n	8015b56 <HAL_ADC_DeInit+0x5a>
  {   
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8015b3a:	197c      	adds	r4, r7, r5
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	0018      	movs	r0, r3
 8015b40:	f000 fa64 	bl	801600c <ADC_Disable>
 8015b44:	0003      	movs	r3, r0
 8015b46:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status != HAL_ERROR)
 8015b48:	197b      	adds	r3, r7, r5
 8015b4a:	781b      	ldrb	r3, [r3, #0]
 8015b4c:	2b01      	cmp	r3, #1
 8015b4e:	d002      	beq.n	8015b56 <HAL_ADC_DeInit+0x5a>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	2201      	movs	r2, #1
 8015b54:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status != HAL_ERROR)
 8015b56:	230f      	movs	r3, #15
 8015b58:	18fb      	adds	r3, r7, r3
 8015b5a:	781b      	ldrb	r3, [r3, #0]
 8015b5c:	2b01      	cmp	r3, #1
 8015b5e:	d051      	beq.n	8015c04 <HAL_ADC_DeInit+0x108>
  {
    
    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	685a      	ldr	r2, [r3, #4]
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	492c      	ldr	r1, [pc, #176]	@ (8015c1c <HAL_ADC_DeInit+0x120>)
 8015b6c:	400a      	ands	r2, r1
 8015b6e:	605a      	str	r2, [r3, #4]
                                ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP ));
  
        
    /* Reset register ISR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	4a2a      	ldr	r2, [pc, #168]	@ (8015c20 <HAL_ADC_DeInit+0x124>)
 8015b76:	601a      	str	r2, [r3, #0]
    
    /* Reset register CR */
    /* Disable voltage regulator */
    /* Note: Regulator disable useful for power saving */
    /* Reset ADVREGEN bit */
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	689a      	ldr	r2, [r3, #8]
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	4928      	ldr	r1, [pc, #160]	@ (8015c24 <HAL_ADC_DeInit+0x128>)
 8015b84:	400a      	ands	r2, r1
 8015b86:	609a      	str	r2, [r3, #8]
    
    /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable */
    /* No action */
    
    /* Reset register CFGR1 */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	68da      	ldr	r2, [r3, #12]
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	4925      	ldr	r1, [pc, #148]	@ (8015c28 <HAL_ADC_DeInit+0x12c>)
 8015b94:	400a      	ands	r2, r1
 8015b96:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
                               ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
                               ADC_CFGR1_SCANDIR| ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);
  
    /* Reset register CFGR2 */
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	691a      	ldr	r2, [r3, #16]
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	4922      	ldr	r1, [pc, #136]	@ (8015c2c <HAL_ADC_DeInit+0x130>)
 8015ba4:	400a      	ands	r2, r1
 8015ba6:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE );
  
    
    /* Reset register SMPR */
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	695a      	ldr	r2, [r3, #20]
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	2107      	movs	r1, #7
 8015bb4:	438a      	bics	r2, r1
 8015bb6:	615a      	str	r2, [r3, #20]
    
    /* Reset register TR */
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	6a1a      	ldr	r2, [r3, #32]
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	491b      	ldr	r1, [pc, #108]	@ (8015c30 <HAL_ADC_DeInit+0x134>)
 8015bc4:	400a      	ands	r2, r1
 8015bc6:	621a      	str	r2, [r3, #32]
    
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	22b4      	movs	r2, #180	@ 0xb4
 8015bce:	589a      	ldr	r2, [r3, r2]
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	217f      	movs	r1, #127	@ 0x7f
 8015bd6:	438a      	bics	r2, r1
 8015bd8:	21b4      	movs	r1, #180	@ 0xb4
 8015bda:	505a      	str	r2, [r3, r1]
    
    /* Reset register DR */
    /* bits in access mode read only, no direct reset applicable*/
  
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	22b4      	movs	r2, #180	@ 0xb4
 8015be2:	589a      	ldr	r2, [r3, r2]
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	217f      	movs	r1, #127	@ 0x7f
 8015bea:	438a      	bics	r2, r1
 8015bec:	21b4      	movs	r1, #180	@ 0xb4
 8015bee:	505a      	str	r2, [r3, r1]
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	0018      	movs	r0, r3
 8015bf4:	f000 f826 	bl	8015c44 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	2200      	movs	r2, #0
 8015bfc:	659a      	str	r2, [r3, #88]	@ 0x58
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	2200      	movs	r2, #0
 8015c02:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	2250      	movs	r2, #80	@ 0x50
 8015c08:	2100      	movs	r1, #0
 8015c0a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8015c0c:	230f      	movs	r3, #15
 8015c0e:	18fb      	adds	r3, r7, r3
 8015c10:	781b      	ldrb	r3, [r3, #0]
}
 8015c12:	0018      	movs	r0, r3
 8015c14:	46bd      	mov	sp, r7
 8015c16:	b004      	add	sp, #16
 8015c18:	bdb0      	pop	{r4, r5, r7, pc}
 8015c1a:	46c0      	nop			@ (mov r8, r8)
 8015c1c:	fffff760 	.word	0xfffff760
 8015c20:	0000089f 	.word	0x0000089f
 8015c24:	efffffff 	.word	0xefffffff
 8015c28:	833e0200 	.word	0x833e0200
 8015c2c:	3ffffc02 	.word	0x3ffffc02
 8015c30:	f000f000 	.word	0xf000f000

08015c34 <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8015c34:	b580      	push	{r7, lr}
 8015c36:	b082      	sub	sp, #8
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 8015c3c:	46c0      	nop			@ (mov r8, r8)
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	b002      	add	sp, #8
 8015c42:	bd80      	pop	{r7, pc}

08015c44 <HAL_ADC_MspDeInit>:
  * @brief  DeInitialize the ADC MSP.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8015c44:	b580      	push	{r7, lr}
 8015c46:	b082      	sub	sp, #8
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspDeInit must be implemented in the user file.
   */ 
}
 8015c4c:	46c0      	nop			@ (mov r8, r8)
 8015c4e:	46bd      	mov	sp, r7
 8015c50:	b002      	add	sp, #8
 8015c52:	bd80      	pop	{r7, pc}

08015c54 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8015c54:	b590      	push	{r4, r7, lr}
 8015c56:	b085      	sub	sp, #20
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8015c5c:	230f      	movs	r3, #15
 8015c5e:	18fb      	adds	r3, r7, r3
 8015c60:	2200      	movs	r2, #0
 8015c62:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	689b      	ldr	r3, [r3, #8]
 8015c6a:	2204      	movs	r2, #4
 8015c6c:	4013      	ands	r3, r2
 8015c6e:	d138      	bne.n	8015ce2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	2250      	movs	r2, #80	@ 0x50
 8015c74:	5c9b      	ldrb	r3, [r3, r2]
 8015c76:	2b01      	cmp	r3, #1
 8015c78:	d101      	bne.n	8015c7e <HAL_ADC_Start+0x2a>
 8015c7a:	2302      	movs	r3, #2
 8015c7c:	e038      	b.n	8015cf0 <HAL_ADC_Start+0x9c>
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	2250      	movs	r2, #80	@ 0x50
 8015c82:	2101      	movs	r1, #1
 8015c84:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	69db      	ldr	r3, [r3, #28]
 8015c8a:	2b01      	cmp	r3, #1
 8015c8c:	d007      	beq.n	8015c9e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8015c8e:	230f      	movs	r3, #15
 8015c90:	18fc      	adds	r4, r7, r3
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	0018      	movs	r0, r3
 8015c96:	f000 f959 	bl	8015f4c <ADC_Enable>
 8015c9a:	0003      	movs	r3, r0
 8015c9c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8015c9e:	230f      	movs	r3, #15
 8015ca0:	18fb      	adds	r3, r7, r3
 8015ca2:	781b      	ldrb	r3, [r3, #0]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d120      	bne.n	8015cea <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015cac:	4a12      	ldr	r2, [pc, #72]	@ (8015cf8 <HAL_ADC_Start+0xa4>)
 8015cae:	4013      	ands	r3, r2
 8015cb0:	2280      	movs	r2, #128	@ 0x80
 8015cb2:	0052      	lsls	r2, r2, #1
 8015cb4:	431a      	orrs	r2, r3
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	2200      	movs	r2, #0
 8015cbe:	659a      	str	r2, [r3, #88]	@ 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	2250      	movs	r2, #80	@ 0x50
 8015cc4:	2100      	movs	r1, #0
 8015cc6:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	221c      	movs	r2, #28
 8015cce:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	689a      	ldr	r2, [r3, #8]
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	2104      	movs	r1, #4
 8015cdc:	430a      	orrs	r2, r1
 8015cde:	609a      	str	r2, [r3, #8]
 8015ce0:	e003      	b.n	8015cea <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8015ce2:	230f      	movs	r3, #15
 8015ce4:	18fb      	adds	r3, r7, r3
 8015ce6:	2202      	movs	r2, #2
 8015ce8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8015cea:	230f      	movs	r3, #15
 8015cec:	18fb      	adds	r3, r7, r3
 8015cee:	781b      	ldrb	r3, [r3, #0]
}
 8015cf0:	0018      	movs	r0, r3
 8015cf2:	46bd      	mov	sp, r7
 8015cf4:	b005      	add	sp, #20
 8015cf6:	bd90      	pop	{r4, r7, pc}
 8015cf8:	fffff0fe 	.word	0xfffff0fe

08015cfc <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	b084      	sub	sp, #16
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	6078      	str	r0, [r7, #4]
 8015d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8015d06:	2300      	movs	r3, #0
 8015d08:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	695b      	ldr	r3, [r3, #20]
 8015d12:	2b08      	cmp	r3, #8
 8015d14:	d102      	bne.n	8015d1c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8015d16:	2308      	movs	r3, #8
 8015d18:	60fb      	str	r3, [r7, #12]
 8015d1a:	e014      	b.n	8015d46 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	68db      	ldr	r3, [r3, #12]
 8015d22:	2201      	movs	r2, #1
 8015d24:	4013      	ands	r3, r2
 8015d26:	2b01      	cmp	r3, #1
 8015d28:	d10b      	bne.n	8015d42 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015d2e:	2220      	movs	r2, #32
 8015d30:	431a      	orrs	r2, r3
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	2250      	movs	r2, #80	@ 0x50
 8015d3a:	2100      	movs	r1, #0
 8015d3c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8015d3e:	2301      	movs	r3, #1
 8015d40:	e06c      	b.n	8015e1c <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8015d42:	230c      	movs	r3, #12
 8015d44:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8015d46:	f7ff fd31 	bl	80157ac <HAL_GetTick>
 8015d4a:	0003      	movs	r3, r0
 8015d4c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8015d4e:	e019      	b.n	8015d84 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8015d50:	683b      	ldr	r3, [r7, #0]
 8015d52:	3301      	adds	r3, #1
 8015d54:	d016      	beq.n	8015d84 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8015d56:	683b      	ldr	r3, [r7, #0]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d007      	beq.n	8015d6c <HAL_ADC_PollForConversion+0x70>
 8015d5c:	f7ff fd26 	bl	80157ac <HAL_GetTick>
 8015d60:	0002      	movs	r2, r0
 8015d62:	68bb      	ldr	r3, [r7, #8]
 8015d64:	1ad3      	subs	r3, r2, r3
 8015d66:	683a      	ldr	r2, [r7, #0]
 8015d68:	429a      	cmp	r2, r3
 8015d6a:	d20b      	bcs.n	8015d84 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015d70:	2204      	movs	r2, #4
 8015d72:	431a      	orrs	r2, r3
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	2250      	movs	r2, #80	@ 0x50
 8015d7c:	2100      	movs	r1, #0
 8015d7e:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8015d80:	2303      	movs	r3, #3
 8015d82:	e04b      	b.n	8015e1c <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	68fa      	ldr	r2, [r7, #12]
 8015d8c:	4013      	ands	r3, r2
 8015d8e:	d0df      	beq.n	8015d50 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015d94:	2280      	movs	r2, #128	@ 0x80
 8015d96:	0092      	lsls	r2, r2, #2
 8015d98:	431a      	orrs	r2, r3
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	655a      	str	r2, [r3, #84]	@ 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	68da      	ldr	r2, [r3, #12]
 8015da4:	23c0      	movs	r3, #192	@ 0xc0
 8015da6:	011b      	lsls	r3, r3, #4
 8015da8:	4013      	ands	r3, r2
 8015daa:	d12e      	bne.n	8015e0a <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	2220      	movs	r2, #32
 8015db0:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d129      	bne.n	8015e0a <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	2208      	movs	r2, #8
 8015dbe:	4013      	ands	r3, r2
 8015dc0:	2b08      	cmp	r3, #8
 8015dc2:	d122      	bne.n	8015e0a <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	689b      	ldr	r3, [r3, #8]
 8015dca:	2204      	movs	r2, #4
 8015dcc:	4013      	ands	r3, r2
 8015dce:	d110      	bne.n	8015df2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	685a      	ldr	r2, [r3, #4]
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	210c      	movs	r1, #12
 8015ddc:	438a      	bics	r2, r1
 8015dde:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015de4:	4a0f      	ldr	r2, [pc, #60]	@ (8015e24 <HAL_ADC_PollForConversion+0x128>)
 8015de6:	4013      	ands	r3, r2
 8015de8:	2201      	movs	r2, #1
 8015dea:	431a      	orrs	r2, r3
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	655a      	str	r2, [r3, #84]	@ 0x54
 8015df0:	e00b      	b.n	8015e0a <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015df6:	2220      	movs	r2, #32
 8015df8:	431a      	orrs	r2, r3
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015e02:	2201      	movs	r2, #1
 8015e04:	431a      	orrs	r2, r3
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	659a      	str	r2, [r3, #88]	@ 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	699b      	ldr	r3, [r3, #24]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d103      	bne.n	8015e1a <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	220c      	movs	r2, #12
 8015e18:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8015e1a:	2300      	movs	r3, #0
}
 8015e1c:	0018      	movs	r0, r3
 8015e1e:	46bd      	mov	sp, r7
 8015e20:	b004      	add	sp, #16
 8015e22:	bd80      	pop	{r7, pc}
 8015e24:	fffffefe 	.word	0xfffffefe

08015e28 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8015e28:	b580      	push	{r7, lr}
 8015e2a:	b082      	sub	sp, #8
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8015e36:	0018      	movs	r0, r3
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	b002      	add	sp, #8
 8015e3c:	bd80      	pop	{r7, pc}
	...

08015e40 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b082      	sub	sp, #8
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	6078      	str	r0, [r7, #4]
 8015e48:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	2250      	movs	r2, #80	@ 0x50
 8015e4e:	5c9b      	ldrb	r3, [r3, r2]
 8015e50:	2b01      	cmp	r3, #1
 8015e52:	d101      	bne.n	8015e58 <HAL_ADC_ConfigChannel+0x18>
 8015e54:	2302      	movs	r3, #2
 8015e56:	e06c      	b.n	8015f32 <HAL_ADC_ConfigChannel+0xf2>
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	2250      	movs	r2, #80	@ 0x50
 8015e5c:	2101      	movs	r1, #1
 8015e5e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	689b      	ldr	r3, [r3, #8]
 8015e66:	2204      	movs	r2, #4
 8015e68:	4013      	ands	r3, r2
 8015e6a:	d00b      	beq.n	8015e84 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015e70:	2220      	movs	r2, #32
 8015e72:	431a      	orrs	r2, r3
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	2250      	movs	r2, #80	@ 0x50
 8015e7c:	2100      	movs	r1, #0
 8015e7e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8015e80:	2301      	movs	r3, #1
 8015e82:	e056      	b.n	8015f32 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8015e84:	683b      	ldr	r3, [r7, #0]
 8015e86:	685b      	ldr	r3, [r3, #4]
 8015e88:	4a2c      	ldr	r2, [pc, #176]	@ (8015f3c <HAL_ADC_ConfigChannel+0xfc>)
 8015e8a:	4293      	cmp	r3, r2
 8015e8c:	d028      	beq.n	8015ee0 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8015e94:	683b      	ldr	r3, [r7, #0]
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	035b      	lsls	r3, r3, #13
 8015e9a:	0b5a      	lsrs	r2, r3, #13
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	430a      	orrs	r2, r1
 8015ea2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8015ea4:	683b      	ldr	r3, [r7, #0]
 8015ea6:	681a      	ldr	r2, [r3, #0]
 8015ea8:	2380      	movs	r3, #128	@ 0x80
 8015eaa:	02db      	lsls	r3, r3, #11
 8015eac:	4013      	ands	r3, r2
 8015eae:	d009      	beq.n	8015ec4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8015eb0:	4b23      	ldr	r3, [pc, #140]	@ (8015f40 <HAL_ADC_ConfigChannel+0x100>)
 8015eb2:	681a      	ldr	r2, [r3, #0]
 8015eb4:	4b22      	ldr	r3, [pc, #136]	@ (8015f40 <HAL_ADC_ConfigChannel+0x100>)
 8015eb6:	2180      	movs	r1, #128	@ 0x80
 8015eb8:	0409      	lsls	r1, r1, #16
 8015eba:	430a      	orrs	r2, r1
 8015ebc:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8015ebe:	200a      	movs	r0, #10
 8015ec0:	f000 f94a 	bl	8016158 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8015ec4:	683b      	ldr	r3, [r7, #0]
 8015ec6:	681a      	ldr	r2, [r3, #0]
 8015ec8:	2380      	movs	r3, #128	@ 0x80
 8015eca:	029b      	lsls	r3, r3, #10
 8015ecc:	4013      	ands	r3, r2
 8015ece:	d02b      	beq.n	8015f28 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8015ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8015f40 <HAL_ADC_ConfigChannel+0x100>)
 8015ed2:	681a      	ldr	r2, [r3, #0]
 8015ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8015f40 <HAL_ADC_ConfigChannel+0x100>)
 8015ed6:	2180      	movs	r1, #128	@ 0x80
 8015ed8:	03c9      	lsls	r1, r1, #15
 8015eda:	430a      	orrs	r2, r1
 8015edc:	601a      	str	r2, [r3, #0]
 8015ede:	e023      	b.n	8015f28 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015ee6:	683b      	ldr	r3, [r7, #0]
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	035b      	lsls	r3, r3, #13
 8015eec:	0b5b      	lsrs	r3, r3, #13
 8015eee:	43d9      	mvns	r1, r3
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	400a      	ands	r2, r1
 8015ef6:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8015ef8:	683b      	ldr	r3, [r7, #0]
 8015efa:	681a      	ldr	r2, [r3, #0]
 8015efc:	2380      	movs	r3, #128	@ 0x80
 8015efe:	02db      	lsls	r3, r3, #11
 8015f00:	4013      	ands	r3, r2
 8015f02:	d005      	beq.n	8015f10 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8015f04:	4b0e      	ldr	r3, [pc, #56]	@ (8015f40 <HAL_ADC_ConfigChannel+0x100>)
 8015f06:	681a      	ldr	r2, [r3, #0]
 8015f08:	4b0d      	ldr	r3, [pc, #52]	@ (8015f40 <HAL_ADC_ConfigChannel+0x100>)
 8015f0a:	490e      	ldr	r1, [pc, #56]	@ (8015f44 <HAL_ADC_ConfigChannel+0x104>)
 8015f0c:	400a      	ands	r2, r1
 8015f0e:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8015f10:	683b      	ldr	r3, [r7, #0]
 8015f12:	681a      	ldr	r2, [r3, #0]
 8015f14:	2380      	movs	r3, #128	@ 0x80
 8015f16:	029b      	lsls	r3, r3, #10
 8015f18:	4013      	ands	r3, r2
 8015f1a:	d005      	beq.n	8015f28 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8015f1c:	4b08      	ldr	r3, [pc, #32]	@ (8015f40 <HAL_ADC_ConfigChannel+0x100>)
 8015f1e:	681a      	ldr	r2, [r3, #0]
 8015f20:	4b07      	ldr	r3, [pc, #28]	@ (8015f40 <HAL_ADC_ConfigChannel+0x100>)
 8015f22:	4909      	ldr	r1, [pc, #36]	@ (8015f48 <HAL_ADC_ConfigChannel+0x108>)
 8015f24:	400a      	ands	r2, r1
 8015f26:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	2250      	movs	r2, #80	@ 0x50
 8015f2c:	2100      	movs	r1, #0
 8015f2e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8015f30:	2300      	movs	r3, #0
}
 8015f32:	0018      	movs	r0, r3
 8015f34:	46bd      	mov	sp, r7
 8015f36:	b002      	add	sp, #8
 8015f38:	bd80      	pop	{r7, pc}
 8015f3a:	46c0      	nop			@ (mov r8, r8)
 8015f3c:	00001001 	.word	0x00001001
 8015f40:	40012708 	.word	0x40012708
 8015f44:	ff7fffff 	.word	0xff7fffff
 8015f48:	ffbfffff 	.word	0xffbfffff

08015f4c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8015f4c:	b580      	push	{r7, lr}
 8015f4e:	b084      	sub	sp, #16
 8015f50:	af00      	add	r7, sp, #0
 8015f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8015f54:	2300      	movs	r3, #0
 8015f56:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	689b      	ldr	r3, [r3, #8]
 8015f5e:	2203      	movs	r2, #3
 8015f60:	4013      	ands	r3, r2
 8015f62:	2b01      	cmp	r3, #1
 8015f64:	d108      	bne.n	8015f78 <ADC_Enable+0x2c>
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	2201      	movs	r2, #1
 8015f6e:	4013      	ands	r3, r2
 8015f70:	2b01      	cmp	r3, #1
 8015f72:	d101      	bne.n	8015f78 <ADC_Enable+0x2c>
 8015f74:	2301      	movs	r3, #1
 8015f76:	e000      	b.n	8015f7a <ADC_Enable+0x2e>
 8015f78:	2300      	movs	r3, #0
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d13f      	bne.n	8015ffe <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	689b      	ldr	r3, [r3, #8]
 8015f84:	4a20      	ldr	r2, [pc, #128]	@ (8016008 <ADC_Enable+0xbc>)
 8015f86:	4013      	ands	r3, r2
 8015f88:	d00d      	beq.n	8015fa6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015f8e:	2210      	movs	r2, #16
 8015f90:	431a      	orrs	r2, r3
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015f9a:	2201      	movs	r2, #1
 8015f9c:	431a      	orrs	r2, r3
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	659a      	str	r2, [r3, #88]	@ 0x58
      
      return HAL_ERROR;
 8015fa2:	2301      	movs	r3, #1
 8015fa4:	e02c      	b.n	8016000 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	689a      	ldr	r2, [r3, #8]
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	2101      	movs	r1, #1
 8015fb2:	430a      	orrs	r2, r1
 8015fb4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8015fb6:	2001      	movs	r0, #1
 8015fb8:	f000 f8ce 	bl	8016158 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8015fbc:	f7ff fbf6 	bl	80157ac <HAL_GetTick>
 8015fc0:	0003      	movs	r3, r0
 8015fc2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8015fc4:	e014      	b.n	8015ff0 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8015fc6:	f7ff fbf1 	bl	80157ac <HAL_GetTick>
 8015fca:	0002      	movs	r2, r0
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	1ad3      	subs	r3, r2, r3
 8015fd0:	2b0a      	cmp	r3, #10
 8015fd2:	d90d      	bls.n	8015ff0 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015fd8:	2210      	movs	r2, #16
 8015fda:	431a      	orrs	r2, r3
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015fe4:	2201      	movs	r2, #1
 8015fe6:	431a      	orrs	r2, r3
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	659a      	str	r2, [r3, #88]	@ 0x58
        
        return HAL_ERROR;
 8015fec:	2301      	movs	r3, #1
 8015fee:	e007      	b.n	8016000 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	2201      	movs	r2, #1
 8015ff8:	4013      	ands	r3, r2
 8015ffa:	2b01      	cmp	r3, #1
 8015ffc:	d1e3      	bne.n	8015fc6 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8015ffe:	2300      	movs	r3, #0
}
 8016000:	0018      	movs	r0, r3
 8016002:	46bd      	mov	sp, r7
 8016004:	b004      	add	sp, #16
 8016006:	bd80      	pop	{r7, pc}
 8016008:	80000017 	.word	0x80000017

0801600c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 801600c:	b580      	push	{r7, lr}
 801600e:	b084      	sub	sp, #16
 8016010:	af00      	add	r7, sp, #0
 8016012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016014:	2300      	movs	r3, #0
 8016016:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	689b      	ldr	r3, [r3, #8]
 801601e:	2203      	movs	r2, #3
 8016020:	4013      	ands	r3, r2
 8016022:	2b01      	cmp	r3, #1
 8016024:	d108      	bne.n	8016038 <ADC_Disable+0x2c>
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	2201      	movs	r2, #1
 801602e:	4013      	ands	r3, r2
 8016030:	2b01      	cmp	r3, #1
 8016032:	d101      	bne.n	8016038 <ADC_Disable+0x2c>
 8016034:	2301      	movs	r3, #1
 8016036:	e000      	b.n	801603a <ADC_Disable+0x2e>
 8016038:	2300      	movs	r3, #0
 801603a:	2b00      	cmp	r3, #0
 801603c:	d041      	beq.n	80160c2 <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	689b      	ldr	r3, [r3, #8]
 8016044:	2205      	movs	r2, #5
 8016046:	4013      	ands	r3, r2
 8016048:	2b01      	cmp	r3, #1
 801604a:	d110      	bne.n	801606e <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	689a      	ldr	r2, [r3, #8]
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	2102      	movs	r1, #2
 8016058:	430a      	orrs	r2, r1
 801605a:	609a      	str	r2, [r3, #8]
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	2203      	movs	r2, #3
 8016062:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8016064:	f7ff fba2 	bl	80157ac <HAL_GetTick>
 8016068:	0003      	movs	r3, r0
 801606a:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 801606c:	e022      	b.n	80160b4 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016072:	2210      	movs	r2, #16
 8016074:	431a      	orrs	r2, r3
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801607e:	2201      	movs	r2, #1
 8016080:	431a      	orrs	r2, r3
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8016086:	2301      	movs	r3, #1
 8016088:	e01c      	b.n	80160c4 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801608a:	f7ff fb8f 	bl	80157ac <HAL_GetTick>
 801608e:	0002      	movs	r2, r0
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	1ad3      	subs	r3, r2, r3
 8016094:	2b0a      	cmp	r3, #10
 8016096:	d90d      	bls.n	80160b4 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801609c:	2210      	movs	r2, #16
 801609e:	431a      	orrs	r2, r3
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80160a8:	2201      	movs	r2, #1
 80160aa:	431a      	orrs	r2, r3
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	659a      	str	r2, [r3, #88]	@ 0x58
        
        return HAL_ERROR;
 80160b0:	2301      	movs	r3, #1
 80160b2:	e007      	b.n	80160c4 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	689b      	ldr	r3, [r3, #8]
 80160ba:	2201      	movs	r2, #1
 80160bc:	4013      	ands	r3, r2
 80160be:	2b01      	cmp	r3, #1
 80160c0:	d0e3      	beq.n	801608a <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80160c2:	2300      	movs	r3, #0
}
 80160c4:	0018      	movs	r0, r3
 80160c6:	46bd      	mov	sp, r7
 80160c8:	b004      	add	sp, #16
 80160ca:	bd80      	pop	{r7, pc}

080160cc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80160cc:	b580      	push	{r7, lr}
 80160ce:	b084      	sub	sp, #16
 80160d0:	af00      	add	r7, sp, #0
 80160d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80160d4:	2300      	movs	r3, #0
 80160d6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	689b      	ldr	r3, [r3, #8]
 80160de:	2204      	movs	r2, #4
 80160e0:	4013      	ands	r3, r2
 80160e2:	d034      	beq.n	801614e <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	689b      	ldr	r3, [r3, #8]
 80160ea:	2204      	movs	r2, #4
 80160ec:	4013      	ands	r3, r2
 80160ee:	2b04      	cmp	r3, #4
 80160f0:	d10d      	bne.n	801610e <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	689b      	ldr	r3, [r3, #8]
 80160f8:	2202      	movs	r2, #2
 80160fa:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80160fc:	d107      	bne.n	801610e <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	689a      	ldr	r2, [r3, #8]
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	2110      	movs	r1, #16
 801610a:	430a      	orrs	r2, r1
 801610c:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 801610e:	f7ff fb4d 	bl	80157ac <HAL_GetTick>
 8016112:	0003      	movs	r3, r0
 8016114:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8016116:	e014      	b.n	8016142 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8016118:	f7ff fb48 	bl	80157ac <HAL_GetTick>
 801611c:	0002      	movs	r2, r0
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	1ad3      	subs	r3, r2, r3
 8016122:	2b0a      	cmp	r3, #10
 8016124:	d90d      	bls.n	8016142 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801612a:	2210      	movs	r2, #16
 801612c:	431a      	orrs	r2, r3
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	655a      	str	r2, [r3, #84]	@ 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016136:	2201      	movs	r2, #1
 8016138:	431a      	orrs	r2, r3
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	659a      	str	r2, [r3, #88]	@ 0x58
        
        return HAL_ERROR;
 801613e:	2301      	movs	r3, #1
 8016140:	e006      	b.n	8016150 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	689b      	ldr	r3, [r3, #8]
 8016148:	2204      	movs	r2, #4
 801614a:	4013      	ands	r3, r2
 801614c:	d1e4      	bne.n	8016118 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 801614e:	2300      	movs	r3, #0
}
 8016150:	0018      	movs	r0, r3
 8016152:	46bd      	mov	sp, r7
 8016154:	b004      	add	sp, #16
 8016156:	bd80      	pop	{r7, pc}

08016158 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8016158:	b580      	push	{r7, lr}
 801615a:	b084      	sub	sp, #16
 801615c:	af00      	add	r7, sp, #0
 801615e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8016160:	4b0b      	ldr	r3, [pc, #44]	@ (8016190 <ADC_DelayMicroSecond+0x38>)
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	490b      	ldr	r1, [pc, #44]	@ (8016194 <ADC_DelayMicroSecond+0x3c>)
 8016166:	0018      	movs	r0, r3
 8016168:	f7e9 ffd8 	bl	800011c <__udivsi3>
 801616c:	0003      	movs	r3, r0
 801616e:	001a      	movs	r2, r3
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	4353      	muls	r3, r2
 8016174:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8016176:	e002      	b.n	801617e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	3b01      	subs	r3, #1
 801617c:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	2b00      	cmp	r3, #0
 8016182:	d1f9      	bne.n	8016178 <ADC_DelayMicroSecond+0x20>
  } 
}
 8016184:	46c0      	nop			@ (mov r8, r8)
 8016186:	46c0      	nop			@ (mov r8, r8)
 8016188:	46bd      	mov	sp, r7
 801618a:	b004      	add	sp, #16
 801618c:	bd80      	pop	{r7, pc}
 801618e:	46c0      	nop			@ (mov r8, r8)
 8016190:	20000070 	.word	0x20000070
 8016194:	000f4240 	.word	0x000f4240

08016198 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8016198:	b580      	push	{r7, lr}
 801619a:	b086      	sub	sp, #24
 801619c:	af00      	add	r7, sp, #0
 801619e:	6078      	str	r0, [r7, #4]
 80161a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80161a2:	2317      	movs	r3, #23
 80161a4:	18fb      	adds	r3, r7, r3
 80161a6:	2200      	movs	r2, #0
 80161a8:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80161aa:	2300      	movs	r3, #0
 80161ac:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80161ae:	2300      	movs	r3, #0
 80161b0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	2250      	movs	r2, #80	@ 0x50
 80161b6:	5c9b      	ldrb	r3, [r3, r2]
 80161b8:	2b01      	cmp	r3, #1
 80161ba:	d101      	bne.n	80161c0 <HAL_ADCEx_Calibration_Start+0x28>
 80161bc:	2302      	movs	r3, #2
 80161be:	e07a      	b.n	80162b6 <HAL_ADCEx_Calibration_Start+0x11e>
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	2250      	movs	r2, #80	@ 0x50
 80161c4:	2101      	movs	r1, #1
 80161c6:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	689b      	ldr	r3, [r3, #8]
 80161ce:	2203      	movs	r2, #3
 80161d0:	4013      	ands	r3, r2
 80161d2:	2b01      	cmp	r3, #1
 80161d4:	d108      	bne.n	80161e8 <HAL_ADCEx_Calibration_Start+0x50>
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	2201      	movs	r2, #1
 80161de:	4013      	ands	r3, r2
 80161e0:	2b01      	cmp	r3, #1
 80161e2:	d101      	bne.n	80161e8 <HAL_ADCEx_Calibration_Start+0x50>
 80161e4:	2301      	movs	r3, #1
 80161e6:	e000      	b.n	80161ea <HAL_ADCEx_Calibration_Start+0x52>
 80161e8:	2300      	movs	r3, #0
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d152      	bne.n	8016294 <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80161f2:	4a33      	ldr	r2, [pc, #204]	@ (80162c0 <HAL_ADCEx_Calibration_Start+0x128>)
 80161f4:	4013      	ands	r3, r2
 80161f6:	2202      	movs	r2, #2
 80161f8:	431a      	orrs	r2, r3
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	68db      	ldr	r3, [r3, #12]
 8016204:	2203      	movs	r2, #3
 8016206:	4013      	ands	r3, r2
 8016208:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	68da      	ldr	r2, [r3, #12]
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	2103      	movs	r1, #3
 8016216:	438a      	bics	r2, r1
 8016218:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	689a      	ldr	r2, [r3, #8]
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	2180      	movs	r1, #128	@ 0x80
 8016226:	0609      	lsls	r1, r1, #24
 8016228:	430a      	orrs	r2, r1
 801622a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 801622c:	f7ff fabe 	bl	80157ac <HAL_GetTick>
 8016230:	0003      	movs	r3, r0
 8016232:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8016234:	e014      	b.n	8016260 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8016236:	f7ff fab9 	bl	80157ac <HAL_GetTick>
 801623a:	0002      	movs	r2, r0
 801623c:	693b      	ldr	r3, [r7, #16]
 801623e:	1ad3      	subs	r3, r2, r3
 8016240:	2b0a      	cmp	r3, #10
 8016242:	d90d      	bls.n	8016260 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016248:	2212      	movs	r2, #18
 801624a:	4393      	bics	r3, r2
 801624c:	2210      	movs	r2, #16
 801624e:	431a      	orrs	r2, r3
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	2250      	movs	r2, #80	@ 0x50
 8016258:	2100      	movs	r1, #0
 801625a:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 801625c:	2301      	movs	r3, #1
 801625e:	e02a      	b.n	80162b6 <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	689b      	ldr	r3, [r3, #8]
 8016266:	0fdb      	lsrs	r3, r3, #31
 8016268:	07da      	lsls	r2, r3, #31
 801626a:	2380      	movs	r3, #128	@ 0x80
 801626c:	061b      	lsls	r3, r3, #24
 801626e:	429a      	cmp	r2, r3
 8016270:	d0e1      	beq.n	8016236 <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	68d9      	ldr	r1, [r3, #12]
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	68fa      	ldr	r2, [r7, #12]
 801627e:	430a      	orrs	r2, r1
 8016280:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016286:	2203      	movs	r2, #3
 8016288:	4393      	bics	r3, r2
 801628a:	2201      	movs	r2, #1
 801628c:	431a      	orrs	r2, r3
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	655a      	str	r2, [r3, #84]	@ 0x54
 8016292:	e009      	b.n	80162a8 <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016298:	2220      	movs	r2, #32
 801629a:	431a      	orrs	r2, r3
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    tmp_hal_status = HAL_ERROR;
 80162a0:	2317      	movs	r3, #23
 80162a2:	18fb      	adds	r3, r7, r3
 80162a4:	2201      	movs	r2, #1
 80162a6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	2250      	movs	r2, #80	@ 0x50
 80162ac:	2100      	movs	r1, #0
 80162ae:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80162b0:	2317      	movs	r3, #23
 80162b2:	18fb      	adds	r3, r7, r3
 80162b4:	781b      	ldrb	r3, [r3, #0]
}
 80162b6:	0018      	movs	r0, r3
 80162b8:	46bd      	mov	sp, r7
 80162ba:	b006      	add	sp, #24
 80162bc:	bd80      	pop	{r7, pc}
 80162be:	46c0      	nop			@ (mov r8, r8)
 80162c0:	fffffefd 	.word	0xfffffefd

080162c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80162c4:	b580      	push	{r7, lr}
 80162c6:	b082      	sub	sp, #8
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	0002      	movs	r2, r0
 80162cc:	1dfb      	adds	r3, r7, #7
 80162ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80162d0:	1dfb      	adds	r3, r7, #7
 80162d2:	781b      	ldrb	r3, [r3, #0]
 80162d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80162d6:	d809      	bhi.n	80162ec <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80162d8:	1dfb      	adds	r3, r7, #7
 80162da:	781b      	ldrb	r3, [r3, #0]
 80162dc:	001a      	movs	r2, r3
 80162de:	231f      	movs	r3, #31
 80162e0:	401a      	ands	r2, r3
 80162e2:	4b04      	ldr	r3, [pc, #16]	@ (80162f4 <__NVIC_EnableIRQ+0x30>)
 80162e4:	2101      	movs	r1, #1
 80162e6:	4091      	lsls	r1, r2
 80162e8:	000a      	movs	r2, r1
 80162ea:	601a      	str	r2, [r3, #0]
  }
}
 80162ec:	46c0      	nop			@ (mov r8, r8)
 80162ee:	46bd      	mov	sp, r7
 80162f0:	b002      	add	sp, #8
 80162f2:	bd80      	pop	{r7, pc}
 80162f4:	e000e100 	.word	0xe000e100

080162f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80162f8:	b590      	push	{r4, r7, lr}
 80162fa:	b083      	sub	sp, #12
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	0002      	movs	r2, r0
 8016300:	6039      	str	r1, [r7, #0]
 8016302:	1dfb      	adds	r3, r7, #7
 8016304:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8016306:	1dfb      	adds	r3, r7, #7
 8016308:	781b      	ldrb	r3, [r3, #0]
 801630a:	2b7f      	cmp	r3, #127	@ 0x7f
 801630c:	d828      	bhi.n	8016360 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801630e:	4a2f      	ldr	r2, [pc, #188]	@ (80163cc <__NVIC_SetPriority+0xd4>)
 8016310:	1dfb      	adds	r3, r7, #7
 8016312:	781b      	ldrb	r3, [r3, #0]
 8016314:	b25b      	sxtb	r3, r3
 8016316:	089b      	lsrs	r3, r3, #2
 8016318:	33c0      	adds	r3, #192	@ 0xc0
 801631a:	009b      	lsls	r3, r3, #2
 801631c:	589b      	ldr	r3, [r3, r2]
 801631e:	1dfa      	adds	r2, r7, #7
 8016320:	7812      	ldrb	r2, [r2, #0]
 8016322:	0011      	movs	r1, r2
 8016324:	2203      	movs	r2, #3
 8016326:	400a      	ands	r2, r1
 8016328:	00d2      	lsls	r2, r2, #3
 801632a:	21ff      	movs	r1, #255	@ 0xff
 801632c:	4091      	lsls	r1, r2
 801632e:	000a      	movs	r2, r1
 8016330:	43d2      	mvns	r2, r2
 8016332:	401a      	ands	r2, r3
 8016334:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8016336:	683b      	ldr	r3, [r7, #0]
 8016338:	019b      	lsls	r3, r3, #6
 801633a:	22ff      	movs	r2, #255	@ 0xff
 801633c:	401a      	ands	r2, r3
 801633e:	1dfb      	adds	r3, r7, #7
 8016340:	781b      	ldrb	r3, [r3, #0]
 8016342:	0018      	movs	r0, r3
 8016344:	2303      	movs	r3, #3
 8016346:	4003      	ands	r3, r0
 8016348:	00db      	lsls	r3, r3, #3
 801634a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801634c:	481f      	ldr	r0, [pc, #124]	@ (80163cc <__NVIC_SetPriority+0xd4>)
 801634e:	1dfb      	adds	r3, r7, #7
 8016350:	781b      	ldrb	r3, [r3, #0]
 8016352:	b25b      	sxtb	r3, r3
 8016354:	089b      	lsrs	r3, r3, #2
 8016356:	430a      	orrs	r2, r1
 8016358:	33c0      	adds	r3, #192	@ 0xc0
 801635a:	009b      	lsls	r3, r3, #2
 801635c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 801635e:	e031      	b.n	80163c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8016360:	4a1b      	ldr	r2, [pc, #108]	@ (80163d0 <__NVIC_SetPriority+0xd8>)
 8016362:	1dfb      	adds	r3, r7, #7
 8016364:	781b      	ldrb	r3, [r3, #0]
 8016366:	0019      	movs	r1, r3
 8016368:	230f      	movs	r3, #15
 801636a:	400b      	ands	r3, r1
 801636c:	3b08      	subs	r3, #8
 801636e:	089b      	lsrs	r3, r3, #2
 8016370:	3306      	adds	r3, #6
 8016372:	009b      	lsls	r3, r3, #2
 8016374:	18d3      	adds	r3, r2, r3
 8016376:	3304      	adds	r3, #4
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	1dfa      	adds	r2, r7, #7
 801637c:	7812      	ldrb	r2, [r2, #0]
 801637e:	0011      	movs	r1, r2
 8016380:	2203      	movs	r2, #3
 8016382:	400a      	ands	r2, r1
 8016384:	00d2      	lsls	r2, r2, #3
 8016386:	21ff      	movs	r1, #255	@ 0xff
 8016388:	4091      	lsls	r1, r2
 801638a:	000a      	movs	r2, r1
 801638c:	43d2      	mvns	r2, r2
 801638e:	401a      	ands	r2, r3
 8016390:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8016392:	683b      	ldr	r3, [r7, #0]
 8016394:	019b      	lsls	r3, r3, #6
 8016396:	22ff      	movs	r2, #255	@ 0xff
 8016398:	401a      	ands	r2, r3
 801639a:	1dfb      	adds	r3, r7, #7
 801639c:	781b      	ldrb	r3, [r3, #0]
 801639e:	0018      	movs	r0, r3
 80163a0:	2303      	movs	r3, #3
 80163a2:	4003      	ands	r3, r0
 80163a4:	00db      	lsls	r3, r3, #3
 80163a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80163a8:	4809      	ldr	r0, [pc, #36]	@ (80163d0 <__NVIC_SetPriority+0xd8>)
 80163aa:	1dfb      	adds	r3, r7, #7
 80163ac:	781b      	ldrb	r3, [r3, #0]
 80163ae:	001c      	movs	r4, r3
 80163b0:	230f      	movs	r3, #15
 80163b2:	4023      	ands	r3, r4
 80163b4:	3b08      	subs	r3, #8
 80163b6:	089b      	lsrs	r3, r3, #2
 80163b8:	430a      	orrs	r2, r1
 80163ba:	3306      	adds	r3, #6
 80163bc:	009b      	lsls	r3, r3, #2
 80163be:	18c3      	adds	r3, r0, r3
 80163c0:	3304      	adds	r3, #4
 80163c2:	601a      	str	r2, [r3, #0]
}
 80163c4:	46c0      	nop			@ (mov r8, r8)
 80163c6:	46bd      	mov	sp, r7
 80163c8:	b003      	add	sp, #12
 80163ca:	bd90      	pop	{r4, r7, pc}
 80163cc:	e000e100 	.word	0xe000e100
 80163d0:	e000ed00 	.word	0xe000ed00

080163d4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80163d4:	b580      	push	{r7, lr}
 80163d6:	b084      	sub	sp, #16
 80163d8:	af00      	add	r7, sp, #0
 80163da:	60b9      	str	r1, [r7, #8]
 80163dc:	607a      	str	r2, [r7, #4]
 80163de:	210f      	movs	r1, #15
 80163e0:	187b      	adds	r3, r7, r1
 80163e2:	1c02      	adds	r2, r0, #0
 80163e4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80163e6:	68ba      	ldr	r2, [r7, #8]
 80163e8:	187b      	adds	r3, r7, r1
 80163ea:	781b      	ldrb	r3, [r3, #0]
 80163ec:	b25b      	sxtb	r3, r3
 80163ee:	0011      	movs	r1, r2
 80163f0:	0018      	movs	r0, r3
 80163f2:	f7ff ff81 	bl	80162f8 <__NVIC_SetPriority>
}
 80163f6:	46c0      	nop			@ (mov r8, r8)
 80163f8:	46bd      	mov	sp, r7
 80163fa:	b004      	add	sp, #16
 80163fc:	bd80      	pop	{r7, pc}

080163fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80163fe:	b580      	push	{r7, lr}
 8016400:	b082      	sub	sp, #8
 8016402:	af00      	add	r7, sp, #0
 8016404:	0002      	movs	r2, r0
 8016406:	1dfb      	adds	r3, r7, #7
 8016408:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801640a:	1dfb      	adds	r3, r7, #7
 801640c:	781b      	ldrb	r3, [r3, #0]
 801640e:	b25b      	sxtb	r3, r3
 8016410:	0018      	movs	r0, r3
 8016412:	f7ff ff57 	bl	80162c4 <__NVIC_EnableIRQ>
}
 8016416:	46c0      	nop			@ (mov r8, r8)
 8016418:	46bd      	mov	sp, r7
 801641a:	b002      	add	sp, #8
 801641c:	bd80      	pop	{r7, pc}
	...

08016420 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8016420:	b580      	push	{r7, lr}
 8016422:	b084      	sub	sp, #16
 8016424:	af00      	add	r7, sp, #0
 8016426:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	2b00      	cmp	r3, #0
 801642c:	d101      	bne.n	8016432 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801642e:	2301      	movs	r3, #1
 8016430:	e061      	b.n	80164f6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	4a32      	ldr	r2, [pc, #200]	@ (8016500 <HAL_DMA_Init+0xe0>)
 8016438:	4694      	mov	ip, r2
 801643a:	4463      	add	r3, ip
 801643c:	2114      	movs	r1, #20
 801643e:	0018      	movs	r0, r3
 8016440:	f7e9 fe6c 	bl	800011c <__udivsi3>
 8016444:	0003      	movs	r3, r0
 8016446:	009a      	lsls	r2, r3, #2
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	4a2d      	ldr	r2, [pc, #180]	@ (8016504 <HAL_DMA_Init+0xe4>)
 8016450:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	2225      	movs	r2, #37	@ 0x25
 8016456:	2102      	movs	r1, #2
 8016458:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	4a28      	ldr	r2, [pc, #160]	@ (8016508 <HAL_DMA_Init+0xe8>)
 8016466:	4013      	ands	r3, r2
 8016468:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8016472:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	691b      	ldr	r3, [r3, #16]
 8016478:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801647e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	699b      	ldr	r3, [r3, #24]
 8016484:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801648a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	6a1b      	ldr	r3, [r3, #32]
 8016490:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8016492:	68fa      	ldr	r2, [r7, #12]
 8016494:	4313      	orrs	r3, r2
 8016496:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	68fa      	ldr	r2, [r7, #12]
 801649e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	689a      	ldr	r2, [r3, #8]
 80164a4:	2380      	movs	r3, #128	@ 0x80
 80164a6:	01db      	lsls	r3, r3, #7
 80164a8:	429a      	cmp	r2, r3
 80164aa:	d018      	beq.n	80164de <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80164ac:	4b17      	ldr	r3, [pc, #92]	@ (801650c <HAL_DMA_Init+0xec>)
 80164ae:	681a      	ldr	r2, [r3, #0]
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80164b4:	211c      	movs	r1, #28
 80164b6:	400b      	ands	r3, r1
 80164b8:	210f      	movs	r1, #15
 80164ba:	4099      	lsls	r1, r3
 80164bc:	000b      	movs	r3, r1
 80164be:	43d9      	mvns	r1, r3
 80164c0:	4b12      	ldr	r3, [pc, #72]	@ (801650c <HAL_DMA_Init+0xec>)
 80164c2:	400a      	ands	r2, r1
 80164c4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80164c6:	4b11      	ldr	r3, [pc, #68]	@ (801650c <HAL_DMA_Init+0xec>)
 80164c8:	6819      	ldr	r1, [r3, #0]
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	685a      	ldr	r2, [r3, #4]
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80164d2:	201c      	movs	r0, #28
 80164d4:	4003      	ands	r3, r0
 80164d6:	409a      	lsls	r2, r3
 80164d8:	4b0c      	ldr	r3, [pc, #48]	@ (801650c <HAL_DMA_Init+0xec>)
 80164da:	430a      	orrs	r2, r1
 80164dc:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	2200      	movs	r2, #0
 80164e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	2225      	movs	r2, #37	@ 0x25
 80164e8:	2101      	movs	r1, #1
 80164ea:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	2224      	movs	r2, #36	@ 0x24
 80164f0:	2100      	movs	r1, #0
 80164f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80164f4:	2300      	movs	r3, #0
}
 80164f6:	0018      	movs	r0, r3
 80164f8:	46bd      	mov	sp, r7
 80164fa:	b004      	add	sp, #16
 80164fc:	bd80      	pop	{r7, pc}
 80164fe:	46c0      	nop			@ (mov r8, r8)
 8016500:	bffdfff8 	.word	0xbffdfff8
 8016504:	40020000 	.word	0x40020000
 8016508:	ffff800f 	.word	0xffff800f
 801650c:	400200a8 	.word	0x400200a8

08016510 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b086      	sub	sp, #24
 8016514:	af00      	add	r7, sp, #0
 8016516:	60f8      	str	r0, [r7, #12]
 8016518:	60b9      	str	r1, [r7, #8]
 801651a:	607a      	str	r2, [r7, #4]
 801651c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801651e:	2317      	movs	r3, #23
 8016520:	18fb      	adds	r3, r7, r3
 8016522:	2200      	movs	r2, #0
 8016524:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	2224      	movs	r2, #36	@ 0x24
 801652a:	5c9b      	ldrb	r3, [r3, r2]
 801652c:	2b01      	cmp	r3, #1
 801652e:	d101      	bne.n	8016534 <HAL_DMA_Start_IT+0x24>
 8016530:	2302      	movs	r3, #2
 8016532:	e04f      	b.n	80165d4 <HAL_DMA_Start_IT+0xc4>
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	2224      	movs	r2, #36	@ 0x24
 8016538:	2101      	movs	r1, #1
 801653a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	2225      	movs	r2, #37	@ 0x25
 8016540:	5c9b      	ldrb	r3, [r3, r2]
 8016542:	b2db      	uxtb	r3, r3
 8016544:	2b01      	cmp	r3, #1
 8016546:	d13a      	bne.n	80165be <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	2225      	movs	r2, #37	@ 0x25
 801654c:	2102      	movs	r1, #2
 801654e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	2200      	movs	r2, #0
 8016554:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8016556:	68fb      	ldr	r3, [r7, #12]
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	681a      	ldr	r2, [r3, #0]
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	2101      	movs	r1, #1
 8016562:	438a      	bics	r2, r1
 8016564:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8016566:	683b      	ldr	r3, [r7, #0]
 8016568:	687a      	ldr	r2, [r7, #4]
 801656a:	68b9      	ldr	r1, [r7, #8]
 801656c:	68f8      	ldr	r0, [r7, #12]
 801656e:	f000 f92a 	bl	80167c6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016576:	2b00      	cmp	r3, #0
 8016578:	d008      	beq.n	801658c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801657a:	68fb      	ldr	r3, [r7, #12]
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	681a      	ldr	r2, [r3, #0]
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	210e      	movs	r1, #14
 8016586:	430a      	orrs	r2, r1
 8016588:	601a      	str	r2, [r3, #0]
 801658a:	e00f      	b.n	80165ac <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801658c:	68fb      	ldr	r3, [r7, #12]
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	681a      	ldr	r2, [r3, #0]
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	2104      	movs	r1, #4
 8016598:	438a      	bics	r2, r1
 801659a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	681a      	ldr	r2, [r3, #0]
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	210a      	movs	r1, #10
 80165a8:	430a      	orrs	r2, r1
 80165aa:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	681a      	ldr	r2, [r3, #0]
 80165b2:	68fb      	ldr	r3, [r7, #12]
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	2101      	movs	r1, #1
 80165b8:	430a      	orrs	r2, r1
 80165ba:	601a      	str	r2, [r3, #0]
 80165bc:	e007      	b.n	80165ce <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	2224      	movs	r2, #36	@ 0x24
 80165c2:	2100      	movs	r1, #0
 80165c4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80165c6:	2317      	movs	r3, #23
 80165c8:	18fb      	adds	r3, r7, r3
 80165ca:	2202      	movs	r2, #2
 80165cc:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80165ce:	2317      	movs	r3, #23
 80165d0:	18fb      	adds	r3, r7, r3
 80165d2:	781b      	ldrb	r3, [r3, #0]
}
 80165d4:	0018      	movs	r0, r3
 80165d6:	46bd      	mov	sp, r7
 80165d8:	b006      	add	sp, #24
 80165da:	bd80      	pop	{r7, pc}

080165dc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b084      	sub	sp, #16
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80165e4:	210f      	movs	r1, #15
 80165e6:	187b      	adds	r3, r7, r1
 80165e8:	2200      	movs	r2, #0
 80165ea:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	2225      	movs	r2, #37	@ 0x25
 80165f0:	5c9b      	ldrb	r3, [r3, r2]
 80165f2:	b2db      	uxtb	r3, r3
 80165f4:	2b02      	cmp	r3, #2
 80165f6:	d006      	beq.n	8016606 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	2204      	movs	r2, #4
 80165fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80165fe:	187b      	adds	r3, r7, r1
 8016600:	2201      	movs	r2, #1
 8016602:	701a      	strb	r2, [r3, #0]
 8016604:	e02a      	b.n	801665c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	681a      	ldr	r2, [r3, #0]
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	210e      	movs	r1, #14
 8016612:	438a      	bics	r2, r1
 8016614:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	681a      	ldr	r2, [r3, #0]
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	2101      	movs	r1, #1
 8016622:	438a      	bics	r2, r1
 8016624:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801662a:	221c      	movs	r2, #28
 801662c:	401a      	ands	r2, r3
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016632:	2101      	movs	r1, #1
 8016634:	4091      	lsls	r1, r2
 8016636:	000a      	movs	r2, r1
 8016638:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	2225      	movs	r2, #37	@ 0x25
 801663e:	2101      	movs	r1, #1
 8016640:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	2224      	movs	r2, #36	@ 0x24
 8016646:	2100      	movs	r1, #0
 8016648:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801664e:	2b00      	cmp	r3, #0
 8016650:	d004      	beq.n	801665c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016656:	687a      	ldr	r2, [r7, #4]
 8016658:	0010      	movs	r0, r2
 801665a:	4798      	blx	r3
    }
  }
  return status;
 801665c:	230f      	movs	r3, #15
 801665e:	18fb      	adds	r3, r7, r3
 8016660:	781b      	ldrb	r3, [r3, #0]
}
 8016662:	0018      	movs	r0, r3
 8016664:	46bd      	mov	sp, r7
 8016666:	b004      	add	sp, #16
 8016668:	bd80      	pop	{r7, pc}

0801666a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801666a:	b580      	push	{r7, lr}
 801666c:	b084      	sub	sp, #16
 801666e:	af00      	add	r7, sp, #0
 8016670:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016686:	221c      	movs	r2, #28
 8016688:	4013      	ands	r3, r2
 801668a:	2204      	movs	r2, #4
 801668c:	409a      	lsls	r2, r3
 801668e:	0013      	movs	r3, r2
 8016690:	68fa      	ldr	r2, [r7, #12]
 8016692:	4013      	ands	r3, r2
 8016694:	d026      	beq.n	80166e4 <HAL_DMA_IRQHandler+0x7a>
 8016696:	68bb      	ldr	r3, [r7, #8]
 8016698:	2204      	movs	r2, #4
 801669a:	4013      	ands	r3, r2
 801669c:	d022      	beq.n	80166e4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	2220      	movs	r2, #32
 80166a6:	4013      	ands	r3, r2
 80166a8:	d107      	bne.n	80166ba <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	681a      	ldr	r2, [r3, #0]
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	2104      	movs	r1, #4
 80166b6:	438a      	bics	r2, r1
 80166b8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80166be:	221c      	movs	r2, #28
 80166c0:	401a      	ands	r2, r3
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80166c6:	2104      	movs	r1, #4
 80166c8:	4091      	lsls	r1, r2
 80166ca:	000a      	movs	r2, r1
 80166cc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d100      	bne.n	80166d8 <HAL_DMA_IRQHandler+0x6e>
 80166d6:	e071      	b.n	80167bc <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80166dc:	687a      	ldr	r2, [r7, #4]
 80166de:	0010      	movs	r0, r2
 80166e0:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80166e2:	e06b      	b.n	80167bc <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80166e8:	221c      	movs	r2, #28
 80166ea:	4013      	ands	r3, r2
 80166ec:	2202      	movs	r2, #2
 80166ee:	409a      	lsls	r2, r3
 80166f0:	0013      	movs	r3, r2
 80166f2:	68fa      	ldr	r2, [r7, #12]
 80166f4:	4013      	ands	r3, r2
 80166f6:	d02d      	beq.n	8016754 <HAL_DMA_IRQHandler+0xea>
 80166f8:	68bb      	ldr	r3, [r7, #8]
 80166fa:	2202      	movs	r2, #2
 80166fc:	4013      	ands	r3, r2
 80166fe:	d029      	beq.n	8016754 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	2220      	movs	r2, #32
 8016708:	4013      	ands	r3, r2
 801670a:	d10b      	bne.n	8016724 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	681a      	ldr	r2, [r3, #0]
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	210a      	movs	r1, #10
 8016718:	438a      	bics	r2, r1
 801671a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	2225      	movs	r2, #37	@ 0x25
 8016720:	2101      	movs	r1, #1
 8016722:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016728:	221c      	movs	r2, #28
 801672a:	401a      	ands	r2, r3
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016730:	2102      	movs	r1, #2
 8016732:	4091      	lsls	r1, r2
 8016734:	000a      	movs	r2, r1
 8016736:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	2224      	movs	r2, #36	@ 0x24
 801673c:	2100      	movs	r1, #0
 801673e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016744:	2b00      	cmp	r3, #0
 8016746:	d039      	beq.n	80167bc <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801674c:	687a      	ldr	r2, [r7, #4]
 801674e:	0010      	movs	r0, r2
 8016750:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8016752:	e033      	b.n	80167bc <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016758:	221c      	movs	r2, #28
 801675a:	4013      	ands	r3, r2
 801675c:	2208      	movs	r2, #8
 801675e:	409a      	lsls	r2, r3
 8016760:	0013      	movs	r3, r2
 8016762:	68fa      	ldr	r2, [r7, #12]
 8016764:	4013      	ands	r3, r2
 8016766:	d02a      	beq.n	80167be <HAL_DMA_IRQHandler+0x154>
 8016768:	68bb      	ldr	r3, [r7, #8]
 801676a:	2208      	movs	r2, #8
 801676c:	4013      	ands	r3, r2
 801676e:	d026      	beq.n	80167be <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	681a      	ldr	r2, [r3, #0]
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	210e      	movs	r1, #14
 801677c:	438a      	bics	r2, r1
 801677e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016784:	221c      	movs	r2, #28
 8016786:	401a      	ands	r2, r3
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801678c:	2101      	movs	r1, #1
 801678e:	4091      	lsls	r1, r2
 8016790:	000a      	movs	r2, r1
 8016792:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	2201      	movs	r2, #1
 8016798:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	2225      	movs	r2, #37	@ 0x25
 801679e:	2101      	movs	r1, #1
 80167a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	2224      	movs	r2, #36	@ 0x24
 80167a6:	2100      	movs	r1, #0
 80167a8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d005      	beq.n	80167be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80167b6:	687a      	ldr	r2, [r7, #4]
 80167b8:	0010      	movs	r0, r2
 80167ba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80167bc:	46c0      	nop			@ (mov r8, r8)
 80167be:	46c0      	nop			@ (mov r8, r8)
}
 80167c0:	46bd      	mov	sp, r7
 80167c2:	b004      	add	sp, #16
 80167c4:	bd80      	pop	{r7, pc}

080167c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80167c6:	b580      	push	{r7, lr}
 80167c8:	b084      	sub	sp, #16
 80167ca:	af00      	add	r7, sp, #0
 80167cc:	60f8      	str	r0, [r7, #12]
 80167ce:	60b9      	str	r1, [r7, #8]
 80167d0:	607a      	str	r2, [r7, #4]
 80167d2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80167d8:	221c      	movs	r2, #28
 80167da:	401a      	ands	r2, r3
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80167e0:	2101      	movs	r1, #1
 80167e2:	4091      	lsls	r1, r2
 80167e4:	000a      	movs	r2, r1
 80167e6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	683a      	ldr	r2, [r7, #0]
 80167ee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	689b      	ldr	r3, [r3, #8]
 80167f4:	2b10      	cmp	r3, #16
 80167f6:	d108      	bne.n	801680a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	687a      	ldr	r2, [r7, #4]
 80167fe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	68ba      	ldr	r2, [r7, #8]
 8016806:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8016808:	e007      	b.n	801681a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	68ba      	ldr	r2, [r7, #8]
 8016810:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	687a      	ldr	r2, [r7, #4]
 8016818:	60da      	str	r2, [r3, #12]
}
 801681a:	46c0      	nop			@ (mov r8, r8)
 801681c:	46bd      	mov	sp, r7
 801681e:	b004      	add	sp, #16
 8016820:	bd80      	pop	{r7, pc}
	...

08016824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8016824:	b580      	push	{r7, lr}
 8016826:	b086      	sub	sp, #24
 8016828:	af00      	add	r7, sp, #0
 801682a:	6078      	str	r0, [r7, #4]
 801682c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801682e:	2300      	movs	r3, #0
 8016830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8016832:	2300      	movs	r3, #0
 8016834:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8016836:	2300      	movs	r3, #0
 8016838:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 801683a:	e155      	b.n	8016ae8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 801683c:	683b      	ldr	r3, [r7, #0]
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	2101      	movs	r1, #1
 8016842:	697a      	ldr	r2, [r7, #20]
 8016844:	4091      	lsls	r1, r2
 8016846:	000a      	movs	r2, r1
 8016848:	4013      	ands	r3, r2
 801684a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d100      	bne.n	8016854 <HAL_GPIO_Init+0x30>
 8016852:	e146      	b.n	8016ae2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8016854:	683b      	ldr	r3, [r7, #0]
 8016856:	685b      	ldr	r3, [r3, #4]
 8016858:	2b02      	cmp	r3, #2
 801685a:	d003      	beq.n	8016864 <HAL_GPIO_Init+0x40>
 801685c:	683b      	ldr	r3, [r7, #0]
 801685e:	685b      	ldr	r3, [r3, #4]
 8016860:	2b12      	cmp	r3, #18
 8016862:	d123      	bne.n	80168ac <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8016864:	697b      	ldr	r3, [r7, #20]
 8016866:	08da      	lsrs	r2, r3, #3
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	3208      	adds	r2, #8
 801686c:	0092      	lsls	r2, r2, #2
 801686e:	58d3      	ldr	r3, [r2, r3]
 8016870:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8016872:	697b      	ldr	r3, [r7, #20]
 8016874:	2207      	movs	r2, #7
 8016876:	4013      	ands	r3, r2
 8016878:	009b      	lsls	r3, r3, #2
 801687a:	220f      	movs	r2, #15
 801687c:	409a      	lsls	r2, r3
 801687e:	0013      	movs	r3, r2
 8016880:	43da      	mvns	r2, r3
 8016882:	693b      	ldr	r3, [r7, #16]
 8016884:	4013      	ands	r3, r2
 8016886:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8016888:	683b      	ldr	r3, [r7, #0]
 801688a:	691a      	ldr	r2, [r3, #16]
 801688c:	697b      	ldr	r3, [r7, #20]
 801688e:	2107      	movs	r1, #7
 8016890:	400b      	ands	r3, r1
 8016892:	009b      	lsls	r3, r3, #2
 8016894:	409a      	lsls	r2, r3
 8016896:	0013      	movs	r3, r2
 8016898:	693a      	ldr	r2, [r7, #16]
 801689a:	4313      	orrs	r3, r2
 801689c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801689e:	697b      	ldr	r3, [r7, #20]
 80168a0:	08da      	lsrs	r2, r3, #3
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	3208      	adds	r2, #8
 80168a6:	0092      	lsls	r2, r2, #2
 80168a8:	6939      	ldr	r1, [r7, #16]
 80168aa:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80168ac:	683b      	ldr	r3, [r7, #0]
 80168ae:	685b      	ldr	r3, [r3, #4]
 80168b0:	2b01      	cmp	r3, #1
 80168b2:	d00b      	beq.n	80168cc <HAL_GPIO_Init+0xa8>
 80168b4:	683b      	ldr	r3, [r7, #0]
 80168b6:	685b      	ldr	r3, [r3, #4]
 80168b8:	2b02      	cmp	r3, #2
 80168ba:	d007      	beq.n	80168cc <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80168bc:	683b      	ldr	r3, [r7, #0]
 80168be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80168c0:	2b11      	cmp	r3, #17
 80168c2:	d003      	beq.n	80168cc <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80168c4:	683b      	ldr	r3, [r7, #0]
 80168c6:	685b      	ldr	r3, [r3, #4]
 80168c8:	2b12      	cmp	r3, #18
 80168ca:	d130      	bne.n	801692e <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	689b      	ldr	r3, [r3, #8]
 80168d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80168d2:	697b      	ldr	r3, [r7, #20]
 80168d4:	005b      	lsls	r3, r3, #1
 80168d6:	2203      	movs	r2, #3
 80168d8:	409a      	lsls	r2, r3
 80168da:	0013      	movs	r3, r2
 80168dc:	43da      	mvns	r2, r3
 80168de:	693b      	ldr	r3, [r7, #16]
 80168e0:	4013      	ands	r3, r2
 80168e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80168e4:	683b      	ldr	r3, [r7, #0]
 80168e6:	68da      	ldr	r2, [r3, #12]
 80168e8:	697b      	ldr	r3, [r7, #20]
 80168ea:	005b      	lsls	r3, r3, #1
 80168ec:	409a      	lsls	r2, r3
 80168ee:	0013      	movs	r3, r2
 80168f0:	693a      	ldr	r2, [r7, #16]
 80168f2:	4313      	orrs	r3, r2
 80168f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	693a      	ldr	r2, [r7, #16]
 80168fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	685b      	ldr	r3, [r3, #4]
 8016900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8016902:	2201      	movs	r2, #1
 8016904:	697b      	ldr	r3, [r7, #20]
 8016906:	409a      	lsls	r2, r3
 8016908:	0013      	movs	r3, r2
 801690a:	43da      	mvns	r2, r3
 801690c:	693b      	ldr	r3, [r7, #16]
 801690e:	4013      	ands	r3, r2
 8016910:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8016912:	683b      	ldr	r3, [r7, #0]
 8016914:	685b      	ldr	r3, [r3, #4]
 8016916:	091b      	lsrs	r3, r3, #4
 8016918:	2201      	movs	r2, #1
 801691a:	401a      	ands	r2, r3
 801691c:	697b      	ldr	r3, [r7, #20]
 801691e:	409a      	lsls	r2, r3
 8016920:	0013      	movs	r3, r2
 8016922:	693a      	ldr	r2, [r7, #16]
 8016924:	4313      	orrs	r3, r2
 8016926:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	693a      	ldr	r2, [r7, #16]
 801692c:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8016934:	697b      	ldr	r3, [r7, #20]
 8016936:	005b      	lsls	r3, r3, #1
 8016938:	2203      	movs	r2, #3
 801693a:	409a      	lsls	r2, r3
 801693c:	0013      	movs	r3, r2
 801693e:	43da      	mvns	r2, r3
 8016940:	693b      	ldr	r3, [r7, #16]
 8016942:	4013      	ands	r3, r2
 8016944:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8016946:	683b      	ldr	r3, [r7, #0]
 8016948:	685b      	ldr	r3, [r3, #4]
 801694a:	2203      	movs	r2, #3
 801694c:	401a      	ands	r2, r3
 801694e:	697b      	ldr	r3, [r7, #20]
 8016950:	005b      	lsls	r3, r3, #1
 8016952:	409a      	lsls	r2, r3
 8016954:	0013      	movs	r3, r2
 8016956:	693a      	ldr	r2, [r7, #16]
 8016958:	4313      	orrs	r3, r2
 801695a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	693a      	ldr	r2, [r7, #16]
 8016960:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	68db      	ldr	r3, [r3, #12]
 8016966:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8016968:	697b      	ldr	r3, [r7, #20]
 801696a:	005b      	lsls	r3, r3, #1
 801696c:	2203      	movs	r2, #3
 801696e:	409a      	lsls	r2, r3
 8016970:	0013      	movs	r3, r2
 8016972:	43da      	mvns	r2, r3
 8016974:	693b      	ldr	r3, [r7, #16]
 8016976:	4013      	ands	r3, r2
 8016978:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 801697a:	683b      	ldr	r3, [r7, #0]
 801697c:	689a      	ldr	r2, [r3, #8]
 801697e:	697b      	ldr	r3, [r7, #20]
 8016980:	005b      	lsls	r3, r3, #1
 8016982:	409a      	lsls	r2, r3
 8016984:	0013      	movs	r3, r2
 8016986:	693a      	ldr	r2, [r7, #16]
 8016988:	4313      	orrs	r3, r2
 801698a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	693a      	ldr	r2, [r7, #16]
 8016990:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8016992:	683b      	ldr	r3, [r7, #0]
 8016994:	685a      	ldr	r2, [r3, #4]
 8016996:	2380      	movs	r3, #128	@ 0x80
 8016998:	055b      	lsls	r3, r3, #21
 801699a:	4013      	ands	r3, r2
 801699c:	d100      	bne.n	80169a0 <HAL_GPIO_Init+0x17c>
 801699e:	e0a0      	b.n	8016ae2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80169a0:	4b57      	ldr	r3, [pc, #348]	@ (8016b00 <HAL_GPIO_Init+0x2dc>)
 80169a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80169a4:	4b56      	ldr	r3, [pc, #344]	@ (8016b00 <HAL_GPIO_Init+0x2dc>)
 80169a6:	2101      	movs	r1, #1
 80169a8:	430a      	orrs	r2, r1
 80169aa:	635a      	str	r2, [r3, #52]	@ 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80169ac:	4a55      	ldr	r2, [pc, #340]	@ (8016b04 <HAL_GPIO_Init+0x2e0>)
 80169ae:	697b      	ldr	r3, [r7, #20]
 80169b0:	089b      	lsrs	r3, r3, #2
 80169b2:	3302      	adds	r3, #2
 80169b4:	009b      	lsls	r3, r3, #2
 80169b6:	589b      	ldr	r3, [r3, r2]
 80169b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80169ba:	697b      	ldr	r3, [r7, #20]
 80169bc:	2203      	movs	r2, #3
 80169be:	4013      	ands	r3, r2
 80169c0:	009b      	lsls	r3, r3, #2
 80169c2:	220f      	movs	r2, #15
 80169c4:	409a      	lsls	r2, r3
 80169c6:	0013      	movs	r3, r2
 80169c8:	43da      	mvns	r2, r3
 80169ca:	693b      	ldr	r3, [r7, #16]
 80169cc:	4013      	ands	r3, r2
 80169ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80169d0:	687a      	ldr	r2, [r7, #4]
 80169d2:	23a0      	movs	r3, #160	@ 0xa0
 80169d4:	05db      	lsls	r3, r3, #23
 80169d6:	429a      	cmp	r2, r3
 80169d8:	d01f      	beq.n	8016a1a <HAL_GPIO_Init+0x1f6>
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	4a4a      	ldr	r2, [pc, #296]	@ (8016b08 <HAL_GPIO_Init+0x2e4>)
 80169de:	4293      	cmp	r3, r2
 80169e0:	d019      	beq.n	8016a16 <HAL_GPIO_Init+0x1f2>
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	4a49      	ldr	r2, [pc, #292]	@ (8016b0c <HAL_GPIO_Init+0x2e8>)
 80169e6:	4293      	cmp	r3, r2
 80169e8:	d013      	beq.n	8016a12 <HAL_GPIO_Init+0x1ee>
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	4a48      	ldr	r2, [pc, #288]	@ (8016b10 <HAL_GPIO_Init+0x2ec>)
 80169ee:	4293      	cmp	r3, r2
 80169f0:	d00d      	beq.n	8016a0e <HAL_GPIO_Init+0x1ea>
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	4a47      	ldr	r2, [pc, #284]	@ (8016b14 <HAL_GPIO_Init+0x2f0>)
 80169f6:	4293      	cmp	r3, r2
 80169f8:	d007      	beq.n	8016a0a <HAL_GPIO_Init+0x1e6>
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	4a46      	ldr	r2, [pc, #280]	@ (8016b18 <HAL_GPIO_Init+0x2f4>)
 80169fe:	4293      	cmp	r3, r2
 8016a00:	d101      	bne.n	8016a06 <HAL_GPIO_Init+0x1e2>
 8016a02:	2305      	movs	r3, #5
 8016a04:	e00a      	b.n	8016a1c <HAL_GPIO_Init+0x1f8>
 8016a06:	2306      	movs	r3, #6
 8016a08:	e008      	b.n	8016a1c <HAL_GPIO_Init+0x1f8>
 8016a0a:	2304      	movs	r3, #4
 8016a0c:	e006      	b.n	8016a1c <HAL_GPIO_Init+0x1f8>
 8016a0e:	2303      	movs	r3, #3
 8016a10:	e004      	b.n	8016a1c <HAL_GPIO_Init+0x1f8>
 8016a12:	2302      	movs	r3, #2
 8016a14:	e002      	b.n	8016a1c <HAL_GPIO_Init+0x1f8>
 8016a16:	2301      	movs	r3, #1
 8016a18:	e000      	b.n	8016a1c <HAL_GPIO_Init+0x1f8>
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	697a      	ldr	r2, [r7, #20]
 8016a1e:	2103      	movs	r1, #3
 8016a20:	400a      	ands	r2, r1
 8016a22:	0092      	lsls	r2, r2, #2
 8016a24:	4093      	lsls	r3, r2
 8016a26:	693a      	ldr	r2, [r7, #16]
 8016a28:	4313      	orrs	r3, r2
 8016a2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8016a2c:	4935      	ldr	r1, [pc, #212]	@ (8016b04 <HAL_GPIO_Init+0x2e0>)
 8016a2e:	697b      	ldr	r3, [r7, #20]
 8016a30:	089b      	lsrs	r3, r3, #2
 8016a32:	3302      	adds	r3, #2
 8016a34:	009b      	lsls	r3, r3, #2
 8016a36:	693a      	ldr	r2, [r7, #16]
 8016a38:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8016a3a:	4b38      	ldr	r3, [pc, #224]	@ (8016b1c <HAL_GPIO_Init+0x2f8>)
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	43da      	mvns	r2, r3
 8016a44:	693b      	ldr	r3, [r7, #16]
 8016a46:	4013      	ands	r3, r2
 8016a48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8016a4a:	683b      	ldr	r3, [r7, #0]
 8016a4c:	685a      	ldr	r2, [r3, #4]
 8016a4e:	2380      	movs	r3, #128	@ 0x80
 8016a50:	025b      	lsls	r3, r3, #9
 8016a52:	4013      	ands	r3, r2
 8016a54:	d003      	beq.n	8016a5e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8016a56:	693a      	ldr	r2, [r7, #16]
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	4313      	orrs	r3, r2
 8016a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8016a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8016b1c <HAL_GPIO_Init+0x2f8>)
 8016a60:	693a      	ldr	r2, [r7, #16]
 8016a62:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8016a64:	4b2d      	ldr	r3, [pc, #180]	@ (8016b1c <HAL_GPIO_Init+0x2f8>)
 8016a66:	685b      	ldr	r3, [r3, #4]
 8016a68:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	43da      	mvns	r2, r3
 8016a6e:	693b      	ldr	r3, [r7, #16]
 8016a70:	4013      	ands	r3, r2
 8016a72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8016a74:	683b      	ldr	r3, [r7, #0]
 8016a76:	685a      	ldr	r2, [r3, #4]
 8016a78:	2380      	movs	r3, #128	@ 0x80
 8016a7a:	029b      	lsls	r3, r3, #10
 8016a7c:	4013      	ands	r3, r2
 8016a7e:	d003      	beq.n	8016a88 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8016a80:	693a      	ldr	r2, [r7, #16]
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	4313      	orrs	r3, r2
 8016a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8016a88:	4b24      	ldr	r3, [pc, #144]	@ (8016b1c <HAL_GPIO_Init+0x2f8>)
 8016a8a:	693a      	ldr	r2, [r7, #16]
 8016a8c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8016a8e:	4b23      	ldr	r3, [pc, #140]	@ (8016b1c <HAL_GPIO_Init+0x2f8>)
 8016a90:	689b      	ldr	r3, [r3, #8]
 8016a92:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	43da      	mvns	r2, r3
 8016a98:	693b      	ldr	r3, [r7, #16]
 8016a9a:	4013      	ands	r3, r2
 8016a9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8016a9e:	683b      	ldr	r3, [r7, #0]
 8016aa0:	685a      	ldr	r2, [r3, #4]
 8016aa2:	2380      	movs	r3, #128	@ 0x80
 8016aa4:	035b      	lsls	r3, r3, #13
 8016aa6:	4013      	ands	r3, r2
 8016aa8:	d003      	beq.n	8016ab2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8016aaa:	693a      	ldr	r2, [r7, #16]
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	4313      	orrs	r3, r2
 8016ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8016ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8016b1c <HAL_GPIO_Init+0x2f8>)
 8016ab4:	693a      	ldr	r2, [r7, #16]
 8016ab6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8016ab8:	4b18      	ldr	r3, [pc, #96]	@ (8016b1c <HAL_GPIO_Init+0x2f8>)
 8016aba:	68db      	ldr	r3, [r3, #12]
 8016abc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	43da      	mvns	r2, r3
 8016ac2:	693b      	ldr	r3, [r7, #16]
 8016ac4:	4013      	ands	r3, r2
 8016ac6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8016ac8:	683b      	ldr	r3, [r7, #0]
 8016aca:	685a      	ldr	r2, [r3, #4]
 8016acc:	2380      	movs	r3, #128	@ 0x80
 8016ace:	039b      	lsls	r3, r3, #14
 8016ad0:	4013      	ands	r3, r2
 8016ad2:	d003      	beq.n	8016adc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8016ad4:	693a      	ldr	r2, [r7, #16]
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	4313      	orrs	r3, r2
 8016ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8016adc:	4b0f      	ldr	r3, [pc, #60]	@ (8016b1c <HAL_GPIO_Init+0x2f8>)
 8016ade:	693a      	ldr	r2, [r7, #16]
 8016ae0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8016ae2:	697b      	ldr	r3, [r7, #20]
 8016ae4:	3301      	adds	r3, #1
 8016ae6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8016ae8:	683b      	ldr	r3, [r7, #0]
 8016aea:	681a      	ldr	r2, [r3, #0]
 8016aec:	697b      	ldr	r3, [r7, #20]
 8016aee:	40da      	lsrs	r2, r3
 8016af0:	1e13      	subs	r3, r2, #0
 8016af2:	d000      	beq.n	8016af6 <HAL_GPIO_Init+0x2d2>
 8016af4:	e6a2      	b.n	801683c <HAL_GPIO_Init+0x18>
  }
}
 8016af6:	46c0      	nop			@ (mov r8, r8)
 8016af8:	46c0      	nop			@ (mov r8, r8)
 8016afa:	46bd      	mov	sp, r7
 8016afc:	b006      	add	sp, #24
 8016afe:	bd80      	pop	{r7, pc}
 8016b00:	40021000 	.word	0x40021000
 8016b04:	40010000 	.word	0x40010000
 8016b08:	50000400 	.word	0x50000400
 8016b0c:	50000800 	.word	0x50000800
 8016b10:	50000c00 	.word	0x50000c00
 8016b14:	50001000 	.word	0x50001000
 8016b18:	50001c00 	.word	0x50001c00
 8016b1c:	40010400 	.word	0x40010400

08016b20 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8016b20:	b580      	push	{r7, lr}
 8016b22:	b082      	sub	sp, #8
 8016b24:	af00      	add	r7, sp, #0
 8016b26:	6078      	str	r0, [r7, #4]
 8016b28:	0008      	movs	r0, r1
 8016b2a:	0011      	movs	r1, r2
 8016b2c:	1cbb      	adds	r3, r7, #2
 8016b2e:	1c02      	adds	r2, r0, #0
 8016b30:	801a      	strh	r2, [r3, #0]
 8016b32:	1c7b      	adds	r3, r7, #1
 8016b34:	1c0a      	adds	r2, r1, #0
 8016b36:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8016b38:	1c7b      	adds	r3, r7, #1
 8016b3a:	781b      	ldrb	r3, [r3, #0]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d004      	beq.n	8016b4a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8016b40:	1cbb      	adds	r3, r7, #2
 8016b42:	881a      	ldrh	r2, [r3, #0]
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8016b48:	e003      	b.n	8016b52 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8016b4a:	1cbb      	adds	r3, r7, #2
 8016b4c:	881a      	ldrh	r2, [r3, #0]
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8016b52:	46c0      	nop			@ (mov r8, r8)
 8016b54:	46bd      	mov	sp, r7
 8016b56:	b002      	add	sp, #8
 8016b58:	bd80      	pop	{r7, pc}
	...

08016b5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8016b5c:	b580      	push	{r7, lr}
 8016b5e:	b082      	sub	sp, #8
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	0002      	movs	r2, r0
 8016b64:	1dbb      	adds	r3, r7, #6
 8016b66:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8016b68:	4b09      	ldr	r3, [pc, #36]	@ (8016b90 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8016b6a:	695b      	ldr	r3, [r3, #20]
 8016b6c:	1dba      	adds	r2, r7, #6
 8016b6e:	8812      	ldrh	r2, [r2, #0]
 8016b70:	4013      	ands	r3, r2
 8016b72:	d008      	beq.n	8016b86 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8016b74:	4b06      	ldr	r3, [pc, #24]	@ (8016b90 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8016b76:	1dba      	adds	r2, r7, #6
 8016b78:	8812      	ldrh	r2, [r2, #0]
 8016b7a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8016b7c:	1dbb      	adds	r3, r7, #6
 8016b7e:	881b      	ldrh	r3, [r3, #0]
 8016b80:	0018      	movs	r0, r3
 8016b82:	f7ec faa1 	bl	80030c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8016b86:	46c0      	nop			@ (mov r8, r8)
 8016b88:	46bd      	mov	sp, r7
 8016b8a:	b002      	add	sp, #8
 8016b8c:	bd80      	pop	{r7, pc}
 8016b8e:	46c0      	nop			@ (mov r8, r8)
 8016b90:	40010400 	.word	0x40010400

08016b94 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8016b94:	b580      	push	{r7, lr}
 8016b96:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8016b98:	4b04      	ldr	r3, [pc, #16]	@ (8016bac <HAL_PWR_DisablePVD+0x18>)
 8016b9a:	681a      	ldr	r2, [r3, #0]
 8016b9c:	4b03      	ldr	r3, [pc, #12]	@ (8016bac <HAL_PWR_DisablePVD+0x18>)
 8016b9e:	2110      	movs	r1, #16
 8016ba0:	438a      	bics	r2, r1
 8016ba2:	601a      	str	r2, [r3, #0]
}
 8016ba4:	46c0      	nop			@ (mov r8, r8)
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	bd80      	pop	{r7, pc}
 8016baa:	46c0      	nop			@ (mov r8, r8)
 8016bac:	40007000 	.word	0x40007000

08016bb0 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b084      	sub	sp, #16
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	6078      	str	r0, [r7, #4]
 8016bb8:	000a      	movs	r2, r1
 8016bba:	1cfb      	adds	r3, r7, #3
 8016bbc:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8016bc2:	4b11      	ldr	r3, [pc, #68]	@ (8016c08 <HAL_PWR_EnterSLEEPMode+0x58>)
 8016bc4:	681b      	ldr	r3, [r3, #0]
 8016bc6:	60fb      	str	r3, [r7, #12]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	2203      	movs	r2, #3
 8016bcc:	4393      	bics	r3, r2
 8016bce:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8016bd0:	68fa      	ldr	r2, [r7, #12]
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	4313      	orrs	r3, r2
 8016bd6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8016bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8016c08 <HAL_PWR_EnterSLEEPMode+0x58>)
 8016bda:	68fa      	ldr	r2, [r7, #12]
 8016bdc:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8016bde:	4b0b      	ldr	r3, [pc, #44]	@ (8016c0c <HAL_PWR_EnterSLEEPMode+0x5c>)
 8016be0:	691a      	ldr	r2, [r3, #16]
 8016be2:	4b0a      	ldr	r3, [pc, #40]	@ (8016c0c <HAL_PWR_EnterSLEEPMode+0x5c>)
 8016be4:	2104      	movs	r1, #4
 8016be6:	438a      	bics	r2, r1
 8016be8:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8016bea:	1cfb      	adds	r3, r7, #3
 8016bec:	781b      	ldrb	r3, [r3, #0]
 8016bee:	2b01      	cmp	r3, #1
 8016bf0:	d101      	bne.n	8016bf6 <HAL_PWR_EnterSLEEPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8016bf2:	bf30      	wfi
 8016bf4:	e002      	b.n	8016bfc <HAL_PWR_EnterSLEEPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8016bf6:	bf40      	sev
    __WFE();
 8016bf8:	bf20      	wfe
    __WFE();
 8016bfa:	bf20      	wfe
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8016bfc:	46c0      	nop			@ (mov r8, r8)

}
 8016bfe:	46c0      	nop			@ (mov r8, r8)
 8016c00:	46bd      	mov	sp, r7
 8016c02:	b004      	add	sp, #16
 8016c04:	bd80      	pop	{r7, pc}
 8016c06:	46c0      	nop			@ (mov r8, r8)
 8016c08:	40007000 	.word	0x40007000
 8016c0c:	e000ed00 	.word	0xe000ed00

08016c10 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8016c10:	b580      	push	{r7, lr}
 8016c12:	b084      	sub	sp, #16
 8016c14:	af00      	add	r7, sp, #0
 8016c16:	6078      	str	r0, [r7, #4]
 8016c18:	000a      	movs	r2, r1
 8016c1a:	1cfb      	adds	r3, r7, #3
 8016c1c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8016c1e:	2300      	movs	r3, #0
 8016c20:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8016c22:	4b13      	ldr	r3, [pc, #76]	@ (8016c70 <HAL_PWR_EnterSTOPMode+0x60>)
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	2203      	movs	r2, #3
 8016c2c:	4393      	bics	r3, r2
 8016c2e:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8016c30:	68fa      	ldr	r2, [r7, #12]
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	4313      	orrs	r3, r2
 8016c36:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8016c38:	4b0d      	ldr	r3, [pc, #52]	@ (8016c70 <HAL_PWR_EnterSTOPMode+0x60>)
 8016c3a:	68fa      	ldr	r2, [r7, #12]
 8016c3c:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8016c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8016c74 <HAL_PWR_EnterSTOPMode+0x64>)
 8016c40:	691a      	ldr	r2, [r3, #16]
 8016c42:	4b0c      	ldr	r3, [pc, #48]	@ (8016c74 <HAL_PWR_EnterSTOPMode+0x64>)
 8016c44:	2104      	movs	r1, #4
 8016c46:	430a      	orrs	r2, r1
 8016c48:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8016c4a:	1cfb      	adds	r3, r7, #3
 8016c4c:	781b      	ldrb	r3, [r3, #0]
 8016c4e:	2b01      	cmp	r3, #1
 8016c50:	d101      	bne.n	8016c56 <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8016c52:	bf30      	wfi
 8016c54:	e002      	b.n	8016c5c <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8016c56:	bf40      	sev
    __WFE();
 8016c58:	bf20      	wfe
    __WFE();
 8016c5a:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8016c5c:	4b05      	ldr	r3, [pc, #20]	@ (8016c74 <HAL_PWR_EnterSTOPMode+0x64>)
 8016c5e:	691a      	ldr	r2, [r3, #16]
 8016c60:	4b04      	ldr	r3, [pc, #16]	@ (8016c74 <HAL_PWR_EnterSTOPMode+0x64>)
 8016c62:	2104      	movs	r1, #4
 8016c64:	438a      	bics	r2, r1
 8016c66:	611a      	str	r2, [r3, #16]

}
 8016c68:	46c0      	nop			@ (mov r8, r8)
 8016c6a:	46bd      	mov	sp, r7
 8016c6c:	b004      	add	sp, #16
 8016c6e:	bd80      	pop	{r7, pc}
 8016c70:	40007000 	.word	0x40007000
 8016c74:	e000ed00 	.word	0xe000ed00

08016c78 <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8016c7c:	4b04      	ldr	r3, [pc, #16]	@ (8016c90 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8016c7e:	681a      	ldr	r2, [r3, #0]
 8016c80:	4b03      	ldr	r3, [pc, #12]	@ (8016c90 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8016c82:	2180      	movs	r1, #128	@ 0x80
 8016c84:	00c9      	lsls	r1, r1, #3
 8016c86:	430a      	orrs	r2, r1
 8016c88:	601a      	str	r2, [r3, #0]
}
 8016c8a:	46c0      	nop			@ (mov r8, r8)
 8016c8c:	46bd      	mov	sp, r7
 8016c8e:	bd80      	pop	{r7, pc}
 8016c90:	40007000 	.word	0x40007000

08016c94 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8016c94:	b580      	push	{r7, lr}
 8016c96:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8016c98:	4b04      	ldr	r3, [pc, #16]	@ (8016cac <HAL_PWREx_EnableUltraLowPower+0x18>)
 8016c9a:	681a      	ldr	r2, [r3, #0]
 8016c9c:	4b03      	ldr	r3, [pc, #12]	@ (8016cac <HAL_PWREx_EnableUltraLowPower+0x18>)
 8016c9e:	2180      	movs	r1, #128	@ 0x80
 8016ca0:	0089      	lsls	r1, r1, #2
 8016ca2:	430a      	orrs	r2, r1
 8016ca4:	601a      	str	r2, [r3, #0]
}
 8016ca6:	46c0      	nop			@ (mov r8, r8)
 8016ca8:	46bd      	mov	sp, r7
 8016caa:	bd80      	pop	{r7, pc}
 8016cac:	40007000 	.word	0x40007000

08016cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8016cb0:	b5b0      	push	{r4, r5, r7, lr}
 8016cb2:	b08a      	sub	sp, #40	@ 0x28
 8016cb4:	af00      	add	r7, sp, #0
 8016cb6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d102      	bne.n	8016cc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8016cbe:	2301      	movs	r3, #1
 8016cc0:	f000 fbbb 	bl	801743a <HAL_RCC_OscConfig+0x78a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8016cc4:	4bc8      	ldr	r3, [pc, #800]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016cc6:	68db      	ldr	r3, [r3, #12]
 8016cc8:	220c      	movs	r2, #12
 8016cca:	4013      	ands	r3, r2
 8016ccc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8016cce:	4bc6      	ldr	r3, [pc, #792]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016cd0:	68da      	ldr	r2, [r3, #12]
 8016cd2:	2380      	movs	r3, #128	@ 0x80
 8016cd4:	025b      	lsls	r3, r3, #9
 8016cd6:	4013      	ands	r3, r2
 8016cd8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	2201      	movs	r2, #1
 8016ce0:	4013      	ands	r3, r2
 8016ce2:	d100      	bne.n	8016ce6 <HAL_RCC_OscConfig+0x36>
 8016ce4:	e07e      	b.n	8016de4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8016ce6:	69fb      	ldr	r3, [r7, #28]
 8016ce8:	2b08      	cmp	r3, #8
 8016cea:	d007      	beq.n	8016cfc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8016cec:	69fb      	ldr	r3, [r7, #28]
 8016cee:	2b0c      	cmp	r3, #12
 8016cf0:	d112      	bne.n	8016d18 <HAL_RCC_OscConfig+0x68>
 8016cf2:	69ba      	ldr	r2, [r7, #24]
 8016cf4:	2380      	movs	r3, #128	@ 0x80
 8016cf6:	025b      	lsls	r3, r3, #9
 8016cf8:	429a      	cmp	r2, r3
 8016cfa:	d10d      	bne.n	8016d18 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016cfc:	4bba      	ldr	r3, [pc, #744]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016cfe:	681a      	ldr	r2, [r3, #0]
 8016d00:	2380      	movs	r3, #128	@ 0x80
 8016d02:	029b      	lsls	r3, r3, #10
 8016d04:	4013      	ands	r3, r2
 8016d06:	d100      	bne.n	8016d0a <HAL_RCC_OscConfig+0x5a>
 8016d08:	e06b      	b.n	8016de2 <HAL_RCC_OscConfig+0x132>
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	685b      	ldr	r3, [r3, #4]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d167      	bne.n	8016de2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8016d12:	2301      	movs	r3, #1
 8016d14:	f000 fb91 	bl	801743a <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	685a      	ldr	r2, [r3, #4]
 8016d1c:	2380      	movs	r3, #128	@ 0x80
 8016d1e:	025b      	lsls	r3, r3, #9
 8016d20:	429a      	cmp	r2, r3
 8016d22:	d107      	bne.n	8016d34 <HAL_RCC_OscConfig+0x84>
 8016d24:	4bb0      	ldr	r3, [pc, #704]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016d26:	681a      	ldr	r2, [r3, #0]
 8016d28:	4baf      	ldr	r3, [pc, #700]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016d2a:	2180      	movs	r1, #128	@ 0x80
 8016d2c:	0249      	lsls	r1, r1, #9
 8016d2e:	430a      	orrs	r2, r1
 8016d30:	601a      	str	r2, [r3, #0]
 8016d32:	e027      	b.n	8016d84 <HAL_RCC_OscConfig+0xd4>
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	685a      	ldr	r2, [r3, #4]
 8016d38:	23a0      	movs	r3, #160	@ 0xa0
 8016d3a:	02db      	lsls	r3, r3, #11
 8016d3c:	429a      	cmp	r2, r3
 8016d3e:	d10e      	bne.n	8016d5e <HAL_RCC_OscConfig+0xae>
 8016d40:	4ba9      	ldr	r3, [pc, #676]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016d42:	681a      	ldr	r2, [r3, #0]
 8016d44:	4ba8      	ldr	r3, [pc, #672]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016d46:	2180      	movs	r1, #128	@ 0x80
 8016d48:	02c9      	lsls	r1, r1, #11
 8016d4a:	430a      	orrs	r2, r1
 8016d4c:	601a      	str	r2, [r3, #0]
 8016d4e:	4ba6      	ldr	r3, [pc, #664]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016d50:	681a      	ldr	r2, [r3, #0]
 8016d52:	4ba5      	ldr	r3, [pc, #660]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016d54:	2180      	movs	r1, #128	@ 0x80
 8016d56:	0249      	lsls	r1, r1, #9
 8016d58:	430a      	orrs	r2, r1
 8016d5a:	601a      	str	r2, [r3, #0]
 8016d5c:	e012      	b.n	8016d84 <HAL_RCC_OscConfig+0xd4>
 8016d5e:	4ba2      	ldr	r3, [pc, #648]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016d60:	681a      	ldr	r2, [r3, #0]
 8016d62:	4ba1      	ldr	r3, [pc, #644]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016d64:	49a1      	ldr	r1, [pc, #644]	@ (8016fec <HAL_RCC_OscConfig+0x33c>)
 8016d66:	400a      	ands	r2, r1
 8016d68:	601a      	str	r2, [r3, #0]
 8016d6a:	4b9f      	ldr	r3, [pc, #636]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016d6c:	681a      	ldr	r2, [r3, #0]
 8016d6e:	2380      	movs	r3, #128	@ 0x80
 8016d70:	025b      	lsls	r3, r3, #9
 8016d72:	4013      	ands	r3, r2
 8016d74:	60fb      	str	r3, [r7, #12]
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	4b9b      	ldr	r3, [pc, #620]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016d7a:	681a      	ldr	r2, [r3, #0]
 8016d7c:	4b9a      	ldr	r3, [pc, #616]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016d7e:	499c      	ldr	r1, [pc, #624]	@ (8016ff0 <HAL_RCC_OscConfig+0x340>)
 8016d80:	400a      	ands	r2, r1
 8016d82:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	685b      	ldr	r3, [r3, #4]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d015      	beq.n	8016db8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016d8c:	f7fe fd0e 	bl	80157ac <HAL_GetTick>
 8016d90:	0003      	movs	r3, r0
 8016d92:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8016d94:	e009      	b.n	8016daa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8016d96:	f7fe fd09 	bl	80157ac <HAL_GetTick>
 8016d9a:	0002      	movs	r2, r0
 8016d9c:	697b      	ldr	r3, [r7, #20]
 8016d9e:	1ad3      	subs	r3, r2, r3
 8016da0:	2b64      	cmp	r3, #100	@ 0x64
 8016da2:	d902      	bls.n	8016daa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8016da4:	2303      	movs	r3, #3
 8016da6:	f000 fb48 	bl	801743a <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8016daa:	4b8f      	ldr	r3, [pc, #572]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016dac:	681a      	ldr	r2, [r3, #0]
 8016dae:	2380      	movs	r3, #128	@ 0x80
 8016db0:	029b      	lsls	r3, r3, #10
 8016db2:	4013      	ands	r3, r2
 8016db4:	d0ef      	beq.n	8016d96 <HAL_RCC_OscConfig+0xe6>
 8016db6:	e015      	b.n	8016de4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016db8:	f7fe fcf8 	bl	80157ac <HAL_GetTick>
 8016dbc:	0003      	movs	r3, r0
 8016dbe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8016dc0:	e008      	b.n	8016dd4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8016dc2:	f7fe fcf3 	bl	80157ac <HAL_GetTick>
 8016dc6:	0002      	movs	r2, r0
 8016dc8:	697b      	ldr	r3, [r7, #20]
 8016dca:	1ad3      	subs	r3, r2, r3
 8016dcc:	2b64      	cmp	r3, #100	@ 0x64
 8016dce:	d901      	bls.n	8016dd4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8016dd0:	2303      	movs	r3, #3
 8016dd2:	e332      	b.n	801743a <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8016dd4:	4b84      	ldr	r3, [pc, #528]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016dd6:	681a      	ldr	r2, [r3, #0]
 8016dd8:	2380      	movs	r3, #128	@ 0x80
 8016dda:	029b      	lsls	r3, r3, #10
 8016ddc:	4013      	ands	r3, r2
 8016dde:	d1f0      	bne.n	8016dc2 <HAL_RCC_OscConfig+0x112>
 8016de0:	e000      	b.n	8016de4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016de2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	2202      	movs	r2, #2
 8016dea:	4013      	ands	r3, r2
 8016dec:	d100      	bne.n	8016df0 <HAL_RCC_OscConfig+0x140>
 8016dee:	e098      	b.n	8016f22 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	68db      	ldr	r3, [r3, #12]
 8016df4:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8016df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016df8:	2220      	movs	r2, #32
 8016dfa:	4013      	ands	r3, r2
 8016dfc:	d009      	beq.n	8016e12 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8016dfe:	4b7a      	ldr	r3, [pc, #488]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016e00:	681a      	ldr	r2, [r3, #0]
 8016e02:	4b79      	ldr	r3, [pc, #484]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016e04:	2120      	movs	r1, #32
 8016e06:	430a      	orrs	r2, r1
 8016e08:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8016e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e0c:	2220      	movs	r2, #32
 8016e0e:	4393      	bics	r3, r2
 8016e10:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8016e12:	69fb      	ldr	r3, [r7, #28]
 8016e14:	2b04      	cmp	r3, #4
 8016e16:	d005      	beq.n	8016e24 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8016e18:	69fb      	ldr	r3, [r7, #28]
 8016e1a:	2b0c      	cmp	r3, #12
 8016e1c:	d13d      	bne.n	8016e9a <HAL_RCC_OscConfig+0x1ea>
 8016e1e:	69bb      	ldr	r3, [r7, #24]
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d13a      	bne.n	8016e9a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8016e24:	4b70      	ldr	r3, [pc, #448]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	2204      	movs	r2, #4
 8016e2a:	4013      	ands	r3, r2
 8016e2c:	d004      	beq.n	8016e38 <HAL_RCC_OscConfig+0x188>
 8016e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d101      	bne.n	8016e38 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8016e34:	2301      	movs	r3, #1
 8016e36:	e300      	b.n	801743a <HAL_RCC_OscConfig+0x78a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016e38:	4b6b      	ldr	r3, [pc, #428]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016e3a:	685b      	ldr	r3, [r3, #4]
 8016e3c:	4a6d      	ldr	r2, [pc, #436]	@ (8016ff4 <HAL_RCC_OscConfig+0x344>)
 8016e3e:	4013      	ands	r3, r2
 8016e40:	0019      	movs	r1, r3
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	691b      	ldr	r3, [r3, #16]
 8016e46:	021a      	lsls	r2, r3, #8
 8016e48:	4b67      	ldr	r3, [pc, #412]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016e4a:	430a      	orrs	r2, r1
 8016e4c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8016e4e:	4b66      	ldr	r3, [pc, #408]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	2209      	movs	r2, #9
 8016e54:	4393      	bics	r3, r2
 8016e56:	0019      	movs	r1, r3
 8016e58:	4b63      	ldr	r3, [pc, #396]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016e5c:	430a      	orrs	r2, r1
 8016e5e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8016e60:	f000 fc20 	bl	80176a4 <HAL_RCC_GetSysClockFreq>
 8016e64:	0001      	movs	r1, r0
 8016e66:	4b60      	ldr	r3, [pc, #384]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016e68:	68db      	ldr	r3, [r3, #12]
 8016e6a:	091b      	lsrs	r3, r3, #4
 8016e6c:	220f      	movs	r2, #15
 8016e6e:	4013      	ands	r3, r2
 8016e70:	4a61      	ldr	r2, [pc, #388]	@ (8016ff8 <HAL_RCC_OscConfig+0x348>)
 8016e72:	5cd3      	ldrb	r3, [r2, r3]
 8016e74:	000a      	movs	r2, r1
 8016e76:	40da      	lsrs	r2, r3
 8016e78:	4b60      	ldr	r3, [pc, #384]	@ (8016ffc <HAL_RCC_OscConfig+0x34c>)
 8016e7a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8016e7c:	2513      	movs	r5, #19
 8016e7e:	197c      	adds	r4, r7, r5
 8016e80:	2003      	movs	r0, #3
 8016e82:	f7ec f891 	bl	8002fa8 <HAL_InitTick>
 8016e86:	0003      	movs	r3, r0
 8016e88:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8016e8a:	002a      	movs	r2, r5
 8016e8c:	18bb      	adds	r3, r7, r2
 8016e8e:	781b      	ldrb	r3, [r3, #0]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d046      	beq.n	8016f22 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8016e94:	18bb      	adds	r3, r7, r2
 8016e96:	781b      	ldrb	r3, [r3, #0]
 8016e98:	e2cf      	b.n	801743a <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8016e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d027      	beq.n	8016ef0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8016ea0:	4b51      	ldr	r3, [pc, #324]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	2209      	movs	r2, #9
 8016ea6:	4393      	bics	r3, r2
 8016ea8:	0019      	movs	r1, r3
 8016eaa:	4b4f      	ldr	r3, [pc, #316]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016eac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016eae:	430a      	orrs	r2, r1
 8016eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016eb2:	f7fe fc7b 	bl	80157ac <HAL_GetTick>
 8016eb6:	0003      	movs	r3, r0
 8016eb8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8016eba:	e008      	b.n	8016ece <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8016ebc:	f7fe fc76 	bl	80157ac <HAL_GetTick>
 8016ec0:	0002      	movs	r2, r0
 8016ec2:	697b      	ldr	r3, [r7, #20]
 8016ec4:	1ad3      	subs	r3, r2, r3
 8016ec6:	2b02      	cmp	r3, #2
 8016ec8:	d901      	bls.n	8016ece <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8016eca:	2303      	movs	r3, #3
 8016ecc:	e2b5      	b.n	801743a <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8016ece:	4b46      	ldr	r3, [pc, #280]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	2204      	movs	r2, #4
 8016ed4:	4013      	ands	r3, r2
 8016ed6:	d0f1      	beq.n	8016ebc <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016ed8:	4b43      	ldr	r3, [pc, #268]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016eda:	685b      	ldr	r3, [r3, #4]
 8016edc:	4a45      	ldr	r2, [pc, #276]	@ (8016ff4 <HAL_RCC_OscConfig+0x344>)
 8016ede:	4013      	ands	r3, r2
 8016ee0:	0019      	movs	r1, r3
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	691b      	ldr	r3, [r3, #16]
 8016ee6:	021a      	lsls	r2, r3, #8
 8016ee8:	4b3f      	ldr	r3, [pc, #252]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016eea:	430a      	orrs	r2, r1
 8016eec:	605a      	str	r2, [r3, #4]
 8016eee:	e018      	b.n	8016f22 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8016ef0:	4b3d      	ldr	r3, [pc, #244]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016ef2:	681a      	ldr	r2, [r3, #0]
 8016ef4:	4b3c      	ldr	r3, [pc, #240]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016ef6:	2101      	movs	r1, #1
 8016ef8:	438a      	bics	r2, r1
 8016efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016efc:	f7fe fc56 	bl	80157ac <HAL_GetTick>
 8016f00:	0003      	movs	r3, r0
 8016f02:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8016f04:	e008      	b.n	8016f18 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8016f06:	f7fe fc51 	bl	80157ac <HAL_GetTick>
 8016f0a:	0002      	movs	r2, r0
 8016f0c:	697b      	ldr	r3, [r7, #20]
 8016f0e:	1ad3      	subs	r3, r2, r3
 8016f10:	2b02      	cmp	r3, #2
 8016f12:	d901      	bls.n	8016f18 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8016f14:	2303      	movs	r3, #3
 8016f16:	e290      	b.n	801743a <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8016f18:	4b33      	ldr	r3, [pc, #204]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	2204      	movs	r2, #4
 8016f1e:	4013      	ands	r3, r2
 8016f20:	d1f1      	bne.n	8016f06 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	2210      	movs	r2, #16
 8016f28:	4013      	ands	r3, r2
 8016f2a:	d100      	bne.n	8016f2e <HAL_RCC_OscConfig+0x27e>
 8016f2c:	e09f      	b.n	801706e <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8016f2e:	69fb      	ldr	r3, [r7, #28]
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d13f      	bne.n	8016fb4 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8016f34:	4b2c      	ldr	r3, [pc, #176]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016f36:	681a      	ldr	r2, [r3, #0]
 8016f38:	2380      	movs	r3, #128	@ 0x80
 8016f3a:	009b      	lsls	r3, r3, #2
 8016f3c:	4013      	ands	r3, r2
 8016f3e:	d005      	beq.n	8016f4c <HAL_RCC_OscConfig+0x29c>
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	69db      	ldr	r3, [r3, #28]
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d101      	bne.n	8016f4c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8016f48:	2301      	movs	r3, #1
 8016f4a:	e276      	b.n	801743a <HAL_RCC_OscConfig+0x78a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016f4c:	4b26      	ldr	r3, [pc, #152]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016f4e:	685b      	ldr	r3, [r3, #4]
 8016f50:	4a2b      	ldr	r2, [pc, #172]	@ (8017000 <HAL_RCC_OscConfig+0x350>)
 8016f52:	4013      	ands	r3, r2
 8016f54:	0019      	movs	r1, r3
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016f5a:	4b23      	ldr	r3, [pc, #140]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016f5c:	430a      	orrs	r2, r1
 8016f5e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016f60:	4b21      	ldr	r3, [pc, #132]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016f62:	685b      	ldr	r3, [r3, #4]
 8016f64:	021b      	lsls	r3, r3, #8
 8016f66:	0a19      	lsrs	r1, r3, #8
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	6a1b      	ldr	r3, [r3, #32]
 8016f6c:	061a      	lsls	r2, r3, #24
 8016f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016f70:	430a      	orrs	r2, r1
 8016f72:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f78:	0b5b      	lsrs	r3, r3, #13
 8016f7a:	3301      	adds	r3, #1
 8016f7c:	2280      	movs	r2, #128	@ 0x80
 8016f7e:	0212      	lsls	r2, r2, #8
 8016f80:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8016f82:	4b19      	ldr	r3, [pc, #100]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016f84:	68db      	ldr	r3, [r3, #12]
 8016f86:	091b      	lsrs	r3, r3, #4
 8016f88:	210f      	movs	r1, #15
 8016f8a:	400b      	ands	r3, r1
 8016f8c:	491a      	ldr	r1, [pc, #104]	@ (8016ff8 <HAL_RCC_OscConfig+0x348>)
 8016f8e:	5ccb      	ldrb	r3, [r1, r3]
 8016f90:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8016f92:	4b1a      	ldr	r3, [pc, #104]	@ (8016ffc <HAL_RCC_OscConfig+0x34c>)
 8016f94:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8016f96:	2513      	movs	r5, #19
 8016f98:	197c      	adds	r4, r7, r5
 8016f9a:	2003      	movs	r0, #3
 8016f9c:	f7ec f804 	bl	8002fa8 <HAL_InitTick>
 8016fa0:	0003      	movs	r3, r0
 8016fa2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8016fa4:	002a      	movs	r2, r5
 8016fa6:	18bb      	adds	r3, r7, r2
 8016fa8:	781b      	ldrb	r3, [r3, #0]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d05f      	beq.n	801706e <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8016fae:	18bb      	adds	r3, r7, r2
 8016fb0:	781b      	ldrb	r3, [r3, #0]
 8016fb2:	e242      	b.n	801743a <HAL_RCC_OscConfig+0x78a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	69db      	ldr	r3, [r3, #28]
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d03e      	beq.n	801703a <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8016fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016fbe:	681a      	ldr	r2, [r3, #0]
 8016fc0:	4b09      	ldr	r3, [pc, #36]	@ (8016fe8 <HAL_RCC_OscConfig+0x338>)
 8016fc2:	2180      	movs	r1, #128	@ 0x80
 8016fc4:	0049      	lsls	r1, r1, #1
 8016fc6:	430a      	orrs	r2, r1
 8016fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016fca:	f7fe fbef 	bl	80157ac <HAL_GetTick>
 8016fce:	0003      	movs	r3, r0
 8016fd0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8016fd2:	e017      	b.n	8017004 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8016fd4:	f7fe fbea 	bl	80157ac <HAL_GetTick>
 8016fd8:	0002      	movs	r2, r0
 8016fda:	697b      	ldr	r3, [r7, #20]
 8016fdc:	1ad3      	subs	r3, r2, r3
 8016fde:	2b02      	cmp	r3, #2
 8016fe0:	d910      	bls.n	8017004 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8016fe2:	2303      	movs	r3, #3
 8016fe4:	e229      	b.n	801743a <HAL_RCC_OscConfig+0x78a>
 8016fe6:	46c0      	nop			@ (mov r8, r8)
 8016fe8:	40021000 	.word	0x40021000
 8016fec:	fffeffff 	.word	0xfffeffff
 8016ff0:	fffbffff 	.word	0xfffbffff
 8016ff4:	ffffe0ff 	.word	0xffffe0ff
 8016ff8:	0801af44 	.word	0x0801af44
 8016ffc:	20000070 	.word	0x20000070
 8017000:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8017004:	4bca      	ldr	r3, [pc, #808]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 8017006:	681a      	ldr	r2, [r3, #0]
 8017008:	2380      	movs	r3, #128	@ 0x80
 801700a:	009b      	lsls	r3, r3, #2
 801700c:	4013      	ands	r3, r2
 801700e:	d0e1      	beq.n	8016fd4 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017010:	4bc7      	ldr	r3, [pc, #796]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 8017012:	685b      	ldr	r3, [r3, #4]
 8017014:	4ac7      	ldr	r2, [pc, #796]	@ (8017334 <HAL_RCC_OscConfig+0x684>)
 8017016:	4013      	ands	r3, r2
 8017018:	0019      	movs	r1, r3
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801701e:	4bc4      	ldr	r3, [pc, #784]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 8017020:	430a      	orrs	r2, r1
 8017022:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8017024:	4bc2      	ldr	r3, [pc, #776]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 8017026:	685b      	ldr	r3, [r3, #4]
 8017028:	021b      	lsls	r3, r3, #8
 801702a:	0a19      	lsrs	r1, r3, #8
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	6a1b      	ldr	r3, [r3, #32]
 8017030:	061a      	lsls	r2, r3, #24
 8017032:	4bbf      	ldr	r3, [pc, #764]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 8017034:	430a      	orrs	r2, r1
 8017036:	605a      	str	r2, [r3, #4]
 8017038:	e019      	b.n	801706e <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801703a:	4bbd      	ldr	r3, [pc, #756]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 801703c:	681a      	ldr	r2, [r3, #0]
 801703e:	4bbc      	ldr	r3, [pc, #752]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 8017040:	49bd      	ldr	r1, [pc, #756]	@ (8017338 <HAL_RCC_OscConfig+0x688>)
 8017042:	400a      	ands	r2, r1
 8017044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017046:	f7fe fbb1 	bl	80157ac <HAL_GetTick>
 801704a:	0003      	movs	r3, r0
 801704c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801704e:	e008      	b.n	8017062 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8017050:	f7fe fbac 	bl	80157ac <HAL_GetTick>
 8017054:	0002      	movs	r2, r0
 8017056:	697b      	ldr	r3, [r7, #20]
 8017058:	1ad3      	subs	r3, r2, r3
 801705a:	2b02      	cmp	r3, #2
 801705c:	d901      	bls.n	8017062 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 801705e:	2303      	movs	r3, #3
 8017060:	e1eb      	b.n	801743a <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8017062:	4bb3      	ldr	r3, [pc, #716]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 8017064:	681a      	ldr	r2, [r3, #0]
 8017066:	2380      	movs	r3, #128	@ 0x80
 8017068:	009b      	lsls	r3, r3, #2
 801706a:	4013      	ands	r3, r2
 801706c:	d1f0      	bne.n	8017050 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	681b      	ldr	r3, [r3, #0]
 8017072:	2208      	movs	r2, #8
 8017074:	4013      	ands	r3, r2
 8017076:	d036      	beq.n	80170e6 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	695b      	ldr	r3, [r3, #20]
 801707c:	2b00      	cmp	r3, #0
 801707e:	d019      	beq.n	80170b4 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8017080:	4bab      	ldr	r3, [pc, #684]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 8017082:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017084:	4baa      	ldr	r3, [pc, #680]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 8017086:	2101      	movs	r1, #1
 8017088:	430a      	orrs	r2, r1
 801708a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801708c:	f7fe fb8e 	bl	80157ac <HAL_GetTick>
 8017090:	0003      	movs	r3, r0
 8017092:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8017094:	e008      	b.n	80170a8 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8017096:	f7fe fb89 	bl	80157ac <HAL_GetTick>
 801709a:	0002      	movs	r2, r0
 801709c:	697b      	ldr	r3, [r7, #20]
 801709e:	1ad3      	subs	r3, r2, r3
 80170a0:	2b02      	cmp	r3, #2
 80170a2:	d901      	bls.n	80170a8 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80170a4:	2303      	movs	r3, #3
 80170a6:	e1c8      	b.n	801743a <HAL_RCC_OscConfig+0x78a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80170a8:	4ba1      	ldr	r3, [pc, #644]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 80170aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80170ac:	2202      	movs	r2, #2
 80170ae:	4013      	ands	r3, r2
 80170b0:	d0f1      	beq.n	8017096 <HAL_RCC_OscConfig+0x3e6>
 80170b2:	e018      	b.n	80170e6 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80170b4:	4b9e      	ldr	r3, [pc, #632]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 80170b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80170b8:	4b9d      	ldr	r3, [pc, #628]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 80170ba:	2101      	movs	r1, #1
 80170bc:	438a      	bics	r2, r1
 80170be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80170c0:	f7fe fb74 	bl	80157ac <HAL_GetTick>
 80170c4:	0003      	movs	r3, r0
 80170c6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80170c8:	e008      	b.n	80170dc <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80170ca:	f7fe fb6f 	bl	80157ac <HAL_GetTick>
 80170ce:	0002      	movs	r2, r0
 80170d0:	697b      	ldr	r3, [r7, #20]
 80170d2:	1ad3      	subs	r3, r2, r3
 80170d4:	2b02      	cmp	r3, #2
 80170d6:	d901      	bls.n	80170dc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80170d8:	2303      	movs	r3, #3
 80170da:	e1ae      	b.n	801743a <HAL_RCC_OscConfig+0x78a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80170dc:	4b94      	ldr	r3, [pc, #592]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 80170de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80170e0:	2202      	movs	r2, #2
 80170e2:	4013      	ands	r3, r2
 80170e4:	d1f1      	bne.n	80170ca <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	2204      	movs	r2, #4
 80170ec:	4013      	ands	r3, r2
 80170ee:	d100      	bne.n	80170f2 <HAL_RCC_OscConfig+0x442>
 80170f0:	e0ae      	b.n	8017250 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80170f2:	2023      	movs	r0, #35	@ 0x23
 80170f4:	183b      	adds	r3, r7, r0
 80170f6:	2200      	movs	r2, #0
 80170f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80170fa:	4b8d      	ldr	r3, [pc, #564]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 80170fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80170fe:	2380      	movs	r3, #128	@ 0x80
 8017100:	055b      	lsls	r3, r3, #21
 8017102:	4013      	ands	r3, r2
 8017104:	d109      	bne.n	801711a <HAL_RCC_OscConfig+0x46a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8017106:	4b8a      	ldr	r3, [pc, #552]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 8017108:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801710a:	4b89      	ldr	r3, [pc, #548]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 801710c:	2180      	movs	r1, #128	@ 0x80
 801710e:	0549      	lsls	r1, r1, #21
 8017110:	430a      	orrs	r2, r1
 8017112:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8017114:	183b      	adds	r3, r7, r0
 8017116:	2201      	movs	r2, #1
 8017118:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801711a:	4b88      	ldr	r3, [pc, #544]	@ (801733c <HAL_RCC_OscConfig+0x68c>)
 801711c:	681a      	ldr	r2, [r3, #0]
 801711e:	2380      	movs	r3, #128	@ 0x80
 8017120:	005b      	lsls	r3, r3, #1
 8017122:	4013      	ands	r3, r2
 8017124:	d11a      	bne.n	801715c <HAL_RCC_OscConfig+0x4ac>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8017126:	4b85      	ldr	r3, [pc, #532]	@ (801733c <HAL_RCC_OscConfig+0x68c>)
 8017128:	681a      	ldr	r2, [r3, #0]
 801712a:	4b84      	ldr	r3, [pc, #528]	@ (801733c <HAL_RCC_OscConfig+0x68c>)
 801712c:	2180      	movs	r1, #128	@ 0x80
 801712e:	0049      	lsls	r1, r1, #1
 8017130:	430a      	orrs	r2, r1
 8017132:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8017134:	f7fe fb3a 	bl	80157ac <HAL_GetTick>
 8017138:	0003      	movs	r3, r0
 801713a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801713c:	e008      	b.n	8017150 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801713e:	f7fe fb35 	bl	80157ac <HAL_GetTick>
 8017142:	0002      	movs	r2, r0
 8017144:	697b      	ldr	r3, [r7, #20]
 8017146:	1ad3      	subs	r3, r2, r3
 8017148:	2b64      	cmp	r3, #100	@ 0x64
 801714a:	d901      	bls.n	8017150 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 801714c:	2303      	movs	r3, #3
 801714e:	e174      	b.n	801743a <HAL_RCC_OscConfig+0x78a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017150:	4b7a      	ldr	r3, [pc, #488]	@ (801733c <HAL_RCC_OscConfig+0x68c>)
 8017152:	681a      	ldr	r2, [r3, #0]
 8017154:	2380      	movs	r3, #128	@ 0x80
 8017156:	005b      	lsls	r3, r3, #1
 8017158:	4013      	ands	r3, r2
 801715a:	d0f0      	beq.n	801713e <HAL_RCC_OscConfig+0x48e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	689a      	ldr	r2, [r3, #8]
 8017160:	2380      	movs	r3, #128	@ 0x80
 8017162:	005b      	lsls	r3, r3, #1
 8017164:	429a      	cmp	r2, r3
 8017166:	d107      	bne.n	8017178 <HAL_RCC_OscConfig+0x4c8>
 8017168:	4b71      	ldr	r3, [pc, #452]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 801716a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801716c:	4b70      	ldr	r3, [pc, #448]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 801716e:	2180      	movs	r1, #128	@ 0x80
 8017170:	0049      	lsls	r1, r1, #1
 8017172:	430a      	orrs	r2, r1
 8017174:	651a      	str	r2, [r3, #80]	@ 0x50
 8017176:	e031      	b.n	80171dc <HAL_RCC_OscConfig+0x52c>
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	689b      	ldr	r3, [r3, #8]
 801717c:	2b00      	cmp	r3, #0
 801717e:	d10c      	bne.n	801719a <HAL_RCC_OscConfig+0x4ea>
 8017180:	4b6b      	ldr	r3, [pc, #428]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 8017182:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017184:	4b6a      	ldr	r3, [pc, #424]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 8017186:	496c      	ldr	r1, [pc, #432]	@ (8017338 <HAL_RCC_OscConfig+0x688>)
 8017188:	400a      	ands	r2, r1
 801718a:	651a      	str	r2, [r3, #80]	@ 0x50
 801718c:	4b68      	ldr	r3, [pc, #416]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 801718e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017190:	4b67      	ldr	r3, [pc, #412]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 8017192:	496b      	ldr	r1, [pc, #428]	@ (8017340 <HAL_RCC_OscConfig+0x690>)
 8017194:	400a      	ands	r2, r1
 8017196:	651a      	str	r2, [r3, #80]	@ 0x50
 8017198:	e020      	b.n	80171dc <HAL_RCC_OscConfig+0x52c>
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	689a      	ldr	r2, [r3, #8]
 801719e:	23a0      	movs	r3, #160	@ 0xa0
 80171a0:	00db      	lsls	r3, r3, #3
 80171a2:	429a      	cmp	r2, r3
 80171a4:	d10e      	bne.n	80171c4 <HAL_RCC_OscConfig+0x514>
 80171a6:	4b62      	ldr	r3, [pc, #392]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 80171a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80171aa:	4b61      	ldr	r3, [pc, #388]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 80171ac:	2180      	movs	r1, #128	@ 0x80
 80171ae:	00c9      	lsls	r1, r1, #3
 80171b0:	430a      	orrs	r2, r1
 80171b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80171b4:	4b5e      	ldr	r3, [pc, #376]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 80171b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80171b8:	4b5d      	ldr	r3, [pc, #372]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 80171ba:	2180      	movs	r1, #128	@ 0x80
 80171bc:	0049      	lsls	r1, r1, #1
 80171be:	430a      	orrs	r2, r1
 80171c0:	651a      	str	r2, [r3, #80]	@ 0x50
 80171c2:	e00b      	b.n	80171dc <HAL_RCC_OscConfig+0x52c>
 80171c4:	4b5a      	ldr	r3, [pc, #360]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 80171c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80171c8:	4b59      	ldr	r3, [pc, #356]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 80171ca:	495b      	ldr	r1, [pc, #364]	@ (8017338 <HAL_RCC_OscConfig+0x688>)
 80171cc:	400a      	ands	r2, r1
 80171ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80171d0:	4b57      	ldr	r3, [pc, #348]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 80171d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80171d4:	4b56      	ldr	r3, [pc, #344]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 80171d6:	495a      	ldr	r1, [pc, #360]	@ (8017340 <HAL_RCC_OscConfig+0x690>)
 80171d8:	400a      	ands	r2, r1
 80171da:	651a      	str	r2, [r3, #80]	@ 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	689b      	ldr	r3, [r3, #8]
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d015      	beq.n	8017210 <HAL_RCC_OscConfig+0x560>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80171e4:	f7fe fae2 	bl	80157ac <HAL_GetTick>
 80171e8:	0003      	movs	r3, r0
 80171ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80171ec:	e009      	b.n	8017202 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80171ee:	f7fe fadd 	bl	80157ac <HAL_GetTick>
 80171f2:	0002      	movs	r2, r0
 80171f4:	697b      	ldr	r3, [r7, #20]
 80171f6:	1ad3      	subs	r3, r2, r3
 80171f8:	4a52      	ldr	r2, [pc, #328]	@ (8017344 <HAL_RCC_OscConfig+0x694>)
 80171fa:	4293      	cmp	r3, r2
 80171fc:	d901      	bls.n	8017202 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80171fe:	2303      	movs	r3, #3
 8017200:	e11b      	b.n	801743a <HAL_RCC_OscConfig+0x78a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8017202:	4b4b      	ldr	r3, [pc, #300]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 8017204:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017206:	2380      	movs	r3, #128	@ 0x80
 8017208:	009b      	lsls	r3, r3, #2
 801720a:	4013      	ands	r3, r2
 801720c:	d0ef      	beq.n	80171ee <HAL_RCC_OscConfig+0x53e>
 801720e:	e014      	b.n	801723a <HAL_RCC_OscConfig+0x58a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017210:	f7fe facc 	bl	80157ac <HAL_GetTick>
 8017214:	0003      	movs	r3, r0
 8017216:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8017218:	e009      	b.n	801722e <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801721a:	f7fe fac7 	bl	80157ac <HAL_GetTick>
 801721e:	0002      	movs	r2, r0
 8017220:	697b      	ldr	r3, [r7, #20]
 8017222:	1ad3      	subs	r3, r2, r3
 8017224:	4a47      	ldr	r2, [pc, #284]	@ (8017344 <HAL_RCC_OscConfig+0x694>)
 8017226:	4293      	cmp	r3, r2
 8017228:	d901      	bls.n	801722e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 801722a:	2303      	movs	r3, #3
 801722c:	e105      	b.n	801743a <HAL_RCC_OscConfig+0x78a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801722e:	4b40      	ldr	r3, [pc, #256]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 8017230:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017232:	2380      	movs	r3, #128	@ 0x80
 8017234:	009b      	lsls	r3, r3, #2
 8017236:	4013      	ands	r3, r2
 8017238:	d1ef      	bne.n	801721a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801723a:	2323      	movs	r3, #35	@ 0x23
 801723c:	18fb      	adds	r3, r7, r3
 801723e:	781b      	ldrb	r3, [r3, #0]
 8017240:	2b01      	cmp	r3, #1
 8017242:	d105      	bne.n	8017250 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8017244:	4b3a      	ldr	r3, [pc, #232]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 8017246:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017248:	4b39      	ldr	r3, [pc, #228]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 801724a:	493f      	ldr	r1, [pc, #252]	@ (8017348 <HAL_RCC_OscConfig+0x698>)
 801724c:	400a      	ands	r2, r1
 801724e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	681b      	ldr	r3, [r3, #0]
 8017254:	2220      	movs	r2, #32
 8017256:	4013      	ands	r3, r2
 8017258:	d049      	beq.n	80172ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	699b      	ldr	r3, [r3, #24]
 801725e:	2b00      	cmp	r3, #0
 8017260:	d026      	beq.n	80172b0 <HAL_RCC_OscConfig+0x600>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8017262:	4b33      	ldr	r3, [pc, #204]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 8017264:	689a      	ldr	r2, [r3, #8]
 8017266:	4b32      	ldr	r3, [pc, #200]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 8017268:	2101      	movs	r1, #1
 801726a:	430a      	orrs	r2, r1
 801726c:	609a      	str	r2, [r3, #8]
 801726e:	4b30      	ldr	r3, [pc, #192]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 8017270:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017272:	4b2f      	ldr	r3, [pc, #188]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 8017274:	2101      	movs	r1, #1
 8017276:	430a      	orrs	r2, r1
 8017278:	635a      	str	r2, [r3, #52]	@ 0x34
 801727a:	4b34      	ldr	r3, [pc, #208]	@ (801734c <HAL_RCC_OscConfig+0x69c>)
 801727c:	6a1a      	ldr	r2, [r3, #32]
 801727e:	4b33      	ldr	r3, [pc, #204]	@ (801734c <HAL_RCC_OscConfig+0x69c>)
 8017280:	2180      	movs	r1, #128	@ 0x80
 8017282:	0189      	lsls	r1, r1, #6
 8017284:	430a      	orrs	r2, r1
 8017286:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017288:	f7fe fa90 	bl	80157ac <HAL_GetTick>
 801728c:	0003      	movs	r3, r0
 801728e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8017290:	e008      	b.n	80172a4 <HAL_RCC_OscConfig+0x5f4>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8017292:	f7fe fa8b 	bl	80157ac <HAL_GetTick>
 8017296:	0002      	movs	r2, r0
 8017298:	697b      	ldr	r3, [r7, #20]
 801729a:	1ad3      	subs	r3, r2, r3
 801729c:	2b02      	cmp	r3, #2
 801729e:	d901      	bls.n	80172a4 <HAL_RCC_OscConfig+0x5f4>
          {
            return HAL_TIMEOUT;
 80172a0:	2303      	movs	r3, #3
 80172a2:	e0ca      	b.n	801743a <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80172a4:	4b22      	ldr	r3, [pc, #136]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 80172a6:	689b      	ldr	r3, [r3, #8]
 80172a8:	2202      	movs	r2, #2
 80172aa:	4013      	ands	r3, r2
 80172ac:	d0f1      	beq.n	8017292 <HAL_RCC_OscConfig+0x5e2>
 80172ae:	e01e      	b.n	80172ee <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80172b0:	4b1f      	ldr	r3, [pc, #124]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 80172b2:	689a      	ldr	r2, [r3, #8]
 80172b4:	4b1e      	ldr	r3, [pc, #120]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 80172b6:	2101      	movs	r1, #1
 80172b8:	438a      	bics	r2, r1
 80172ba:	609a      	str	r2, [r3, #8]
 80172bc:	4b23      	ldr	r3, [pc, #140]	@ (801734c <HAL_RCC_OscConfig+0x69c>)
 80172be:	6a1a      	ldr	r2, [r3, #32]
 80172c0:	4b22      	ldr	r3, [pc, #136]	@ (801734c <HAL_RCC_OscConfig+0x69c>)
 80172c2:	4923      	ldr	r1, [pc, #140]	@ (8017350 <HAL_RCC_OscConfig+0x6a0>)
 80172c4:	400a      	ands	r2, r1
 80172c6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80172c8:	f7fe fa70 	bl	80157ac <HAL_GetTick>
 80172cc:	0003      	movs	r3, r0
 80172ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80172d0:	e008      	b.n	80172e4 <HAL_RCC_OscConfig+0x634>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80172d2:	f7fe fa6b 	bl	80157ac <HAL_GetTick>
 80172d6:	0002      	movs	r2, r0
 80172d8:	697b      	ldr	r3, [r7, #20]
 80172da:	1ad3      	subs	r3, r2, r3
 80172dc:	2b02      	cmp	r3, #2
 80172de:	d901      	bls.n	80172e4 <HAL_RCC_OscConfig+0x634>
          {
            return HAL_TIMEOUT;
 80172e0:	2303      	movs	r3, #3
 80172e2:	e0aa      	b.n	801743a <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80172e4:	4b12      	ldr	r3, [pc, #72]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 80172e6:	689b      	ldr	r3, [r3, #8]
 80172e8:	2202      	movs	r2, #2
 80172ea:	4013      	ands	r3, r2
 80172ec:	d1f1      	bne.n	80172d2 <HAL_RCC_OscConfig+0x622>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d100      	bne.n	80172f8 <HAL_RCC_OscConfig+0x648>
 80172f6:	e09f      	b.n	8017438 <HAL_RCC_OscConfig+0x788>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80172f8:	69fb      	ldr	r3, [r7, #28]
 80172fa:	2b0c      	cmp	r3, #12
 80172fc:	d100      	bne.n	8017300 <HAL_RCC_OscConfig+0x650>
 80172fe:	e078      	b.n	80173f2 <HAL_RCC_OscConfig+0x742>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017304:	2b02      	cmp	r3, #2
 8017306:	d159      	bne.n	80173bc <HAL_RCC_OscConfig+0x70c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017308:	4b09      	ldr	r3, [pc, #36]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 801730a:	681a      	ldr	r2, [r3, #0]
 801730c:	4b08      	ldr	r3, [pc, #32]	@ (8017330 <HAL_RCC_OscConfig+0x680>)
 801730e:	4911      	ldr	r1, [pc, #68]	@ (8017354 <HAL_RCC_OscConfig+0x6a4>)
 8017310:	400a      	ands	r2, r1
 8017312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017314:	f7fe fa4a 	bl	80157ac <HAL_GetTick>
 8017318:	0003      	movs	r3, r0
 801731a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801731c:	e01c      	b.n	8017358 <HAL_RCC_OscConfig+0x6a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801731e:	f7fe fa45 	bl	80157ac <HAL_GetTick>
 8017322:	0002      	movs	r2, r0
 8017324:	697b      	ldr	r3, [r7, #20]
 8017326:	1ad3      	subs	r3, r2, r3
 8017328:	2b02      	cmp	r3, #2
 801732a:	d915      	bls.n	8017358 <HAL_RCC_OscConfig+0x6a8>
          {
            return HAL_TIMEOUT;
 801732c:	2303      	movs	r3, #3
 801732e:	e084      	b.n	801743a <HAL_RCC_OscConfig+0x78a>
 8017330:	40021000 	.word	0x40021000
 8017334:	ffff1fff 	.word	0xffff1fff
 8017338:	fffffeff 	.word	0xfffffeff
 801733c:	40007000 	.word	0x40007000
 8017340:	fffffbff 	.word	0xfffffbff
 8017344:	00001388 	.word	0x00001388
 8017348:	efffffff 	.word	0xefffffff
 801734c:	40010000 	.word	0x40010000
 8017350:	ffffdfff 	.word	0xffffdfff
 8017354:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8017358:	4b3a      	ldr	r3, [pc, #232]	@ (8017444 <HAL_RCC_OscConfig+0x794>)
 801735a:	681a      	ldr	r2, [r3, #0]
 801735c:	2380      	movs	r3, #128	@ 0x80
 801735e:	049b      	lsls	r3, r3, #18
 8017360:	4013      	ands	r3, r2
 8017362:	d1dc      	bne.n	801731e <HAL_RCC_OscConfig+0x66e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8017364:	4b37      	ldr	r3, [pc, #220]	@ (8017444 <HAL_RCC_OscConfig+0x794>)
 8017366:	68db      	ldr	r3, [r3, #12]
 8017368:	4a37      	ldr	r2, [pc, #220]	@ (8017448 <HAL_RCC_OscConfig+0x798>)
 801736a:	4013      	ands	r3, r2
 801736c:	0019      	movs	r1, r3
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017376:	431a      	orrs	r2, r3
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801737c:	431a      	orrs	r2, r3
 801737e:	4b31      	ldr	r3, [pc, #196]	@ (8017444 <HAL_RCC_OscConfig+0x794>)
 8017380:	430a      	orrs	r2, r1
 8017382:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8017384:	4b2f      	ldr	r3, [pc, #188]	@ (8017444 <HAL_RCC_OscConfig+0x794>)
 8017386:	681a      	ldr	r2, [r3, #0]
 8017388:	4b2e      	ldr	r3, [pc, #184]	@ (8017444 <HAL_RCC_OscConfig+0x794>)
 801738a:	2180      	movs	r1, #128	@ 0x80
 801738c:	0449      	lsls	r1, r1, #17
 801738e:	430a      	orrs	r2, r1
 8017390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017392:	f7fe fa0b 	bl	80157ac <HAL_GetTick>
 8017396:	0003      	movs	r3, r0
 8017398:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801739a:	e008      	b.n	80173ae <HAL_RCC_OscConfig+0x6fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801739c:	f7fe fa06 	bl	80157ac <HAL_GetTick>
 80173a0:	0002      	movs	r2, r0
 80173a2:	697b      	ldr	r3, [r7, #20]
 80173a4:	1ad3      	subs	r3, r2, r3
 80173a6:	2b02      	cmp	r3, #2
 80173a8:	d901      	bls.n	80173ae <HAL_RCC_OscConfig+0x6fe>
          {
            return HAL_TIMEOUT;
 80173aa:	2303      	movs	r3, #3
 80173ac:	e045      	b.n	801743a <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80173ae:	4b25      	ldr	r3, [pc, #148]	@ (8017444 <HAL_RCC_OscConfig+0x794>)
 80173b0:	681a      	ldr	r2, [r3, #0]
 80173b2:	2380      	movs	r3, #128	@ 0x80
 80173b4:	049b      	lsls	r3, r3, #18
 80173b6:	4013      	ands	r3, r2
 80173b8:	d0f0      	beq.n	801739c <HAL_RCC_OscConfig+0x6ec>
 80173ba:	e03d      	b.n	8017438 <HAL_RCC_OscConfig+0x788>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80173bc:	4b21      	ldr	r3, [pc, #132]	@ (8017444 <HAL_RCC_OscConfig+0x794>)
 80173be:	681a      	ldr	r2, [r3, #0]
 80173c0:	4b20      	ldr	r3, [pc, #128]	@ (8017444 <HAL_RCC_OscConfig+0x794>)
 80173c2:	4922      	ldr	r1, [pc, #136]	@ (801744c <HAL_RCC_OscConfig+0x79c>)
 80173c4:	400a      	ands	r2, r1
 80173c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80173c8:	f7fe f9f0 	bl	80157ac <HAL_GetTick>
 80173cc:	0003      	movs	r3, r0
 80173ce:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80173d0:	e008      	b.n	80173e4 <HAL_RCC_OscConfig+0x734>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80173d2:	f7fe f9eb 	bl	80157ac <HAL_GetTick>
 80173d6:	0002      	movs	r2, r0
 80173d8:	697b      	ldr	r3, [r7, #20]
 80173da:	1ad3      	subs	r3, r2, r3
 80173dc:	2b02      	cmp	r3, #2
 80173de:	d901      	bls.n	80173e4 <HAL_RCC_OscConfig+0x734>
          {
            return HAL_TIMEOUT;
 80173e0:	2303      	movs	r3, #3
 80173e2:	e02a      	b.n	801743a <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80173e4:	4b17      	ldr	r3, [pc, #92]	@ (8017444 <HAL_RCC_OscConfig+0x794>)
 80173e6:	681a      	ldr	r2, [r3, #0]
 80173e8:	2380      	movs	r3, #128	@ 0x80
 80173ea:	049b      	lsls	r3, r3, #18
 80173ec:	4013      	ands	r3, r2
 80173ee:	d1f0      	bne.n	80173d2 <HAL_RCC_OscConfig+0x722>
 80173f0:	e022      	b.n	8017438 <HAL_RCC_OscConfig+0x788>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80173f6:	2b01      	cmp	r3, #1
 80173f8:	d101      	bne.n	80173fe <HAL_RCC_OscConfig+0x74e>
      {
        return HAL_ERROR;
 80173fa:	2301      	movs	r3, #1
 80173fc:	e01d      	b.n	801743a <HAL_RCC_OscConfig+0x78a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80173fe:	4b11      	ldr	r3, [pc, #68]	@ (8017444 <HAL_RCC_OscConfig+0x794>)
 8017400:	68db      	ldr	r3, [r3, #12]
 8017402:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017404:	69ba      	ldr	r2, [r7, #24]
 8017406:	2380      	movs	r3, #128	@ 0x80
 8017408:	025b      	lsls	r3, r3, #9
 801740a:	401a      	ands	r2, r3
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017410:	429a      	cmp	r2, r3
 8017412:	d10f      	bne.n	8017434 <HAL_RCC_OscConfig+0x784>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8017414:	69ba      	ldr	r2, [r7, #24]
 8017416:	23f0      	movs	r3, #240	@ 0xf0
 8017418:	039b      	lsls	r3, r3, #14
 801741a:	401a      	ands	r2, r3
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017420:	429a      	cmp	r2, r3
 8017422:	d107      	bne.n	8017434 <HAL_RCC_OscConfig+0x784>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8017424:	69ba      	ldr	r2, [r7, #24]
 8017426:	23c0      	movs	r3, #192	@ 0xc0
 8017428:	041b      	lsls	r3, r3, #16
 801742a:	401a      	ands	r2, r3
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8017430:	429a      	cmp	r2, r3
 8017432:	d001      	beq.n	8017438 <HAL_RCC_OscConfig+0x788>
        {
          return HAL_ERROR;
 8017434:	2301      	movs	r3, #1
 8017436:	e000      	b.n	801743a <HAL_RCC_OscConfig+0x78a>
        }
      }
    }
  }

  return HAL_OK;
 8017438:	2300      	movs	r3, #0
}
 801743a:	0018      	movs	r0, r3
 801743c:	46bd      	mov	sp, r7
 801743e:	b00a      	add	sp, #40	@ 0x28
 8017440:	bdb0      	pop	{r4, r5, r7, pc}
 8017442:	46c0      	nop			@ (mov r8, r8)
 8017444:	40021000 	.word	0x40021000
 8017448:	ff02ffff 	.word	0xff02ffff
 801744c:	feffffff 	.word	0xfeffffff

08017450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8017450:	b5b0      	push	{r4, r5, r7, lr}
 8017452:	b084      	sub	sp, #16
 8017454:	af00      	add	r7, sp, #0
 8017456:	6078      	str	r0, [r7, #4]
 8017458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	2b00      	cmp	r3, #0
 801745e:	d101      	bne.n	8017464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8017460:	2301      	movs	r3, #1
 8017462:	e10d      	b.n	8017680 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8017464:	4b88      	ldr	r3, [pc, #544]	@ (8017688 <HAL_RCC_ClockConfig+0x238>)
 8017466:	681b      	ldr	r3, [r3, #0]
 8017468:	2201      	movs	r2, #1
 801746a:	4013      	ands	r3, r2
 801746c:	683a      	ldr	r2, [r7, #0]
 801746e:	429a      	cmp	r2, r3
 8017470:	d911      	bls.n	8017496 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017472:	4b85      	ldr	r3, [pc, #532]	@ (8017688 <HAL_RCC_ClockConfig+0x238>)
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	2201      	movs	r2, #1
 8017478:	4393      	bics	r3, r2
 801747a:	0019      	movs	r1, r3
 801747c:	4b82      	ldr	r3, [pc, #520]	@ (8017688 <HAL_RCC_ClockConfig+0x238>)
 801747e:	683a      	ldr	r2, [r7, #0]
 8017480:	430a      	orrs	r2, r1
 8017482:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8017484:	4b80      	ldr	r3, [pc, #512]	@ (8017688 <HAL_RCC_ClockConfig+0x238>)
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	2201      	movs	r2, #1
 801748a:	4013      	ands	r3, r2
 801748c:	683a      	ldr	r2, [r7, #0]
 801748e:	429a      	cmp	r2, r3
 8017490:	d001      	beq.n	8017496 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8017492:	2301      	movs	r3, #1
 8017494:	e0f4      	b.n	8017680 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	2202      	movs	r2, #2
 801749c:	4013      	ands	r3, r2
 801749e:	d009      	beq.n	80174b4 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80174a0:	4b7a      	ldr	r3, [pc, #488]	@ (801768c <HAL_RCC_ClockConfig+0x23c>)
 80174a2:	68db      	ldr	r3, [r3, #12]
 80174a4:	22f0      	movs	r2, #240	@ 0xf0
 80174a6:	4393      	bics	r3, r2
 80174a8:	0019      	movs	r1, r3
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	689a      	ldr	r2, [r3, #8]
 80174ae:	4b77      	ldr	r3, [pc, #476]	@ (801768c <HAL_RCC_ClockConfig+0x23c>)
 80174b0:	430a      	orrs	r2, r1
 80174b2:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	2201      	movs	r2, #1
 80174ba:	4013      	ands	r3, r2
 80174bc:	d100      	bne.n	80174c0 <HAL_RCC_ClockConfig+0x70>
 80174be:	e089      	b.n	80175d4 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	685b      	ldr	r3, [r3, #4]
 80174c4:	2b02      	cmp	r3, #2
 80174c6:	d107      	bne.n	80174d8 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80174c8:	4b70      	ldr	r3, [pc, #448]	@ (801768c <HAL_RCC_ClockConfig+0x23c>)
 80174ca:	681a      	ldr	r2, [r3, #0]
 80174cc:	2380      	movs	r3, #128	@ 0x80
 80174ce:	029b      	lsls	r3, r3, #10
 80174d0:	4013      	ands	r3, r2
 80174d2:	d120      	bne.n	8017516 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80174d4:	2301      	movs	r3, #1
 80174d6:	e0d3      	b.n	8017680 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	685b      	ldr	r3, [r3, #4]
 80174dc:	2b03      	cmp	r3, #3
 80174de:	d107      	bne.n	80174f0 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80174e0:	4b6a      	ldr	r3, [pc, #424]	@ (801768c <HAL_RCC_ClockConfig+0x23c>)
 80174e2:	681a      	ldr	r2, [r3, #0]
 80174e4:	2380      	movs	r3, #128	@ 0x80
 80174e6:	049b      	lsls	r3, r3, #18
 80174e8:	4013      	ands	r3, r2
 80174ea:	d114      	bne.n	8017516 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80174ec:	2301      	movs	r3, #1
 80174ee:	e0c7      	b.n	8017680 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	685b      	ldr	r3, [r3, #4]
 80174f4:	2b01      	cmp	r3, #1
 80174f6:	d106      	bne.n	8017506 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80174f8:	4b64      	ldr	r3, [pc, #400]	@ (801768c <HAL_RCC_ClockConfig+0x23c>)
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	2204      	movs	r2, #4
 80174fe:	4013      	ands	r3, r2
 8017500:	d109      	bne.n	8017516 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8017502:	2301      	movs	r3, #1
 8017504:	e0bc      	b.n	8017680 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8017506:	4b61      	ldr	r3, [pc, #388]	@ (801768c <HAL_RCC_ClockConfig+0x23c>)
 8017508:	681a      	ldr	r2, [r3, #0]
 801750a:	2380      	movs	r3, #128	@ 0x80
 801750c:	009b      	lsls	r3, r3, #2
 801750e:	4013      	ands	r3, r2
 8017510:	d101      	bne.n	8017516 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8017512:	2301      	movs	r3, #1
 8017514:	e0b4      	b.n	8017680 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8017516:	4b5d      	ldr	r3, [pc, #372]	@ (801768c <HAL_RCC_ClockConfig+0x23c>)
 8017518:	68db      	ldr	r3, [r3, #12]
 801751a:	2203      	movs	r2, #3
 801751c:	4393      	bics	r3, r2
 801751e:	0019      	movs	r1, r3
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	685a      	ldr	r2, [r3, #4]
 8017524:	4b59      	ldr	r3, [pc, #356]	@ (801768c <HAL_RCC_ClockConfig+0x23c>)
 8017526:	430a      	orrs	r2, r1
 8017528:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801752a:	f7fe f93f 	bl	80157ac <HAL_GetTick>
 801752e:	0003      	movs	r3, r0
 8017530:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	685b      	ldr	r3, [r3, #4]
 8017536:	2b02      	cmp	r3, #2
 8017538:	d111      	bne.n	801755e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801753a:	e009      	b.n	8017550 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801753c:	f7fe f936 	bl	80157ac <HAL_GetTick>
 8017540:	0002      	movs	r2, r0
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	1ad3      	subs	r3, r2, r3
 8017546:	4a52      	ldr	r2, [pc, #328]	@ (8017690 <HAL_RCC_ClockConfig+0x240>)
 8017548:	4293      	cmp	r3, r2
 801754a:	d901      	bls.n	8017550 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 801754c:	2303      	movs	r3, #3
 801754e:	e097      	b.n	8017680 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8017550:	4b4e      	ldr	r3, [pc, #312]	@ (801768c <HAL_RCC_ClockConfig+0x23c>)
 8017552:	68db      	ldr	r3, [r3, #12]
 8017554:	220c      	movs	r2, #12
 8017556:	4013      	ands	r3, r2
 8017558:	2b08      	cmp	r3, #8
 801755a:	d1ef      	bne.n	801753c <HAL_RCC_ClockConfig+0xec>
 801755c:	e03a      	b.n	80175d4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	685b      	ldr	r3, [r3, #4]
 8017562:	2b03      	cmp	r3, #3
 8017564:	d111      	bne.n	801758a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017566:	e009      	b.n	801757c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017568:	f7fe f920 	bl	80157ac <HAL_GetTick>
 801756c:	0002      	movs	r2, r0
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	1ad3      	subs	r3, r2, r3
 8017572:	4a47      	ldr	r2, [pc, #284]	@ (8017690 <HAL_RCC_ClockConfig+0x240>)
 8017574:	4293      	cmp	r3, r2
 8017576:	d901      	bls.n	801757c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8017578:	2303      	movs	r3, #3
 801757a:	e081      	b.n	8017680 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801757c:	4b43      	ldr	r3, [pc, #268]	@ (801768c <HAL_RCC_ClockConfig+0x23c>)
 801757e:	68db      	ldr	r3, [r3, #12]
 8017580:	220c      	movs	r2, #12
 8017582:	4013      	ands	r3, r2
 8017584:	2b0c      	cmp	r3, #12
 8017586:	d1ef      	bne.n	8017568 <HAL_RCC_ClockConfig+0x118>
 8017588:	e024      	b.n	80175d4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	685b      	ldr	r3, [r3, #4]
 801758e:	2b01      	cmp	r3, #1
 8017590:	d11b      	bne.n	80175ca <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8017592:	e009      	b.n	80175a8 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017594:	f7fe f90a 	bl	80157ac <HAL_GetTick>
 8017598:	0002      	movs	r2, r0
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	1ad3      	subs	r3, r2, r3
 801759e:	4a3c      	ldr	r2, [pc, #240]	@ (8017690 <HAL_RCC_ClockConfig+0x240>)
 80175a0:	4293      	cmp	r3, r2
 80175a2:	d901      	bls.n	80175a8 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80175a4:	2303      	movs	r3, #3
 80175a6:	e06b      	b.n	8017680 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80175a8:	4b38      	ldr	r3, [pc, #224]	@ (801768c <HAL_RCC_ClockConfig+0x23c>)
 80175aa:	68db      	ldr	r3, [r3, #12]
 80175ac:	220c      	movs	r2, #12
 80175ae:	4013      	ands	r3, r2
 80175b0:	2b04      	cmp	r3, #4
 80175b2:	d1ef      	bne.n	8017594 <HAL_RCC_ClockConfig+0x144>
 80175b4:	e00e      	b.n	80175d4 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80175b6:	f7fe f8f9 	bl	80157ac <HAL_GetTick>
 80175ba:	0002      	movs	r2, r0
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	1ad3      	subs	r3, r2, r3
 80175c0:	4a33      	ldr	r2, [pc, #204]	@ (8017690 <HAL_RCC_ClockConfig+0x240>)
 80175c2:	4293      	cmp	r3, r2
 80175c4:	d901      	bls.n	80175ca <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80175c6:	2303      	movs	r3, #3
 80175c8:	e05a      	b.n	8017680 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80175ca:	4b30      	ldr	r3, [pc, #192]	@ (801768c <HAL_RCC_ClockConfig+0x23c>)
 80175cc:	68db      	ldr	r3, [r3, #12]
 80175ce:	220c      	movs	r2, #12
 80175d0:	4013      	ands	r3, r2
 80175d2:	d1f0      	bne.n	80175b6 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80175d4:	4b2c      	ldr	r3, [pc, #176]	@ (8017688 <HAL_RCC_ClockConfig+0x238>)
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	2201      	movs	r2, #1
 80175da:	4013      	ands	r3, r2
 80175dc:	683a      	ldr	r2, [r7, #0]
 80175de:	429a      	cmp	r2, r3
 80175e0:	d211      	bcs.n	8017606 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80175e2:	4b29      	ldr	r3, [pc, #164]	@ (8017688 <HAL_RCC_ClockConfig+0x238>)
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	2201      	movs	r2, #1
 80175e8:	4393      	bics	r3, r2
 80175ea:	0019      	movs	r1, r3
 80175ec:	4b26      	ldr	r3, [pc, #152]	@ (8017688 <HAL_RCC_ClockConfig+0x238>)
 80175ee:	683a      	ldr	r2, [r7, #0]
 80175f0:	430a      	orrs	r2, r1
 80175f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80175f4:	4b24      	ldr	r3, [pc, #144]	@ (8017688 <HAL_RCC_ClockConfig+0x238>)
 80175f6:	681b      	ldr	r3, [r3, #0]
 80175f8:	2201      	movs	r2, #1
 80175fa:	4013      	ands	r3, r2
 80175fc:	683a      	ldr	r2, [r7, #0]
 80175fe:	429a      	cmp	r2, r3
 8017600:	d001      	beq.n	8017606 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8017602:	2301      	movs	r3, #1
 8017604:	e03c      	b.n	8017680 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	2204      	movs	r2, #4
 801760c:	4013      	ands	r3, r2
 801760e:	d009      	beq.n	8017624 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8017610:	4b1e      	ldr	r3, [pc, #120]	@ (801768c <HAL_RCC_ClockConfig+0x23c>)
 8017612:	68db      	ldr	r3, [r3, #12]
 8017614:	4a1f      	ldr	r2, [pc, #124]	@ (8017694 <HAL_RCC_ClockConfig+0x244>)
 8017616:	4013      	ands	r3, r2
 8017618:	0019      	movs	r1, r3
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	68da      	ldr	r2, [r3, #12]
 801761e:	4b1b      	ldr	r3, [pc, #108]	@ (801768c <HAL_RCC_ClockConfig+0x23c>)
 8017620:	430a      	orrs	r2, r1
 8017622:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	681b      	ldr	r3, [r3, #0]
 8017628:	2208      	movs	r2, #8
 801762a:	4013      	ands	r3, r2
 801762c:	d00a      	beq.n	8017644 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801762e:	4b17      	ldr	r3, [pc, #92]	@ (801768c <HAL_RCC_ClockConfig+0x23c>)
 8017630:	68db      	ldr	r3, [r3, #12]
 8017632:	4a19      	ldr	r2, [pc, #100]	@ (8017698 <HAL_RCC_ClockConfig+0x248>)
 8017634:	4013      	ands	r3, r2
 8017636:	0019      	movs	r1, r3
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	691b      	ldr	r3, [r3, #16]
 801763c:	00da      	lsls	r2, r3, #3
 801763e:	4b13      	ldr	r3, [pc, #76]	@ (801768c <HAL_RCC_ClockConfig+0x23c>)
 8017640:	430a      	orrs	r2, r1
 8017642:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8017644:	f000 f82e 	bl	80176a4 <HAL_RCC_GetSysClockFreq>
 8017648:	0001      	movs	r1, r0
 801764a:	4b10      	ldr	r3, [pc, #64]	@ (801768c <HAL_RCC_ClockConfig+0x23c>)
 801764c:	68db      	ldr	r3, [r3, #12]
 801764e:	091b      	lsrs	r3, r3, #4
 8017650:	220f      	movs	r2, #15
 8017652:	4013      	ands	r3, r2
 8017654:	4a11      	ldr	r2, [pc, #68]	@ (801769c <HAL_RCC_ClockConfig+0x24c>)
 8017656:	5cd3      	ldrb	r3, [r2, r3]
 8017658:	000a      	movs	r2, r1
 801765a:	40da      	lsrs	r2, r3
 801765c:	4b10      	ldr	r3, [pc, #64]	@ (80176a0 <HAL_RCC_ClockConfig+0x250>)
 801765e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8017660:	250b      	movs	r5, #11
 8017662:	197c      	adds	r4, r7, r5
 8017664:	2003      	movs	r0, #3
 8017666:	f7eb fc9f 	bl	8002fa8 <HAL_InitTick>
 801766a:	0003      	movs	r3, r0
 801766c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801766e:	002a      	movs	r2, r5
 8017670:	18bb      	adds	r3, r7, r2
 8017672:	781b      	ldrb	r3, [r3, #0]
 8017674:	2b00      	cmp	r3, #0
 8017676:	d002      	beq.n	801767e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8017678:	18bb      	adds	r3, r7, r2
 801767a:	781b      	ldrb	r3, [r3, #0]
 801767c:	e000      	b.n	8017680 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 801767e:	2300      	movs	r3, #0
}
 8017680:	0018      	movs	r0, r3
 8017682:	46bd      	mov	sp, r7
 8017684:	b004      	add	sp, #16
 8017686:	bdb0      	pop	{r4, r5, r7, pc}
 8017688:	40022000 	.word	0x40022000
 801768c:	40021000 	.word	0x40021000
 8017690:	00001388 	.word	0x00001388
 8017694:	fffff8ff 	.word	0xfffff8ff
 8017698:	ffffc7ff 	.word	0xffffc7ff
 801769c:	0801af44 	.word	0x0801af44
 80176a0:	20000070 	.word	0x20000070

080176a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80176a4:	b580      	push	{r7, lr}
 80176a6:	b086      	sub	sp, #24
 80176a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80176aa:	4b3c      	ldr	r3, [pc, #240]	@ (801779c <HAL_RCC_GetSysClockFreq+0xf8>)
 80176ac:	68db      	ldr	r3, [r3, #12]
 80176ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	220c      	movs	r2, #12
 80176b4:	4013      	ands	r3, r2
 80176b6:	2b0c      	cmp	r3, #12
 80176b8:	d013      	beq.n	80176e2 <HAL_RCC_GetSysClockFreq+0x3e>
 80176ba:	d85c      	bhi.n	8017776 <HAL_RCC_GetSysClockFreq+0xd2>
 80176bc:	2b04      	cmp	r3, #4
 80176be:	d002      	beq.n	80176c6 <HAL_RCC_GetSysClockFreq+0x22>
 80176c0:	2b08      	cmp	r3, #8
 80176c2:	d00b      	beq.n	80176dc <HAL_RCC_GetSysClockFreq+0x38>
 80176c4:	e057      	b.n	8017776 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80176c6:	4b35      	ldr	r3, [pc, #212]	@ (801779c <HAL_RCC_GetSysClockFreq+0xf8>)
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	2210      	movs	r2, #16
 80176cc:	4013      	ands	r3, r2
 80176ce:	d002      	beq.n	80176d6 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80176d0:	4b33      	ldr	r3, [pc, #204]	@ (80177a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80176d2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80176d4:	e05d      	b.n	8017792 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80176d6:	4b33      	ldr	r3, [pc, #204]	@ (80177a4 <HAL_RCC_GetSysClockFreq+0x100>)
 80176d8:	613b      	str	r3, [r7, #16]
      break;
 80176da:	e05a      	b.n	8017792 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80176dc:	4b32      	ldr	r3, [pc, #200]	@ (80177a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80176de:	613b      	str	r3, [r7, #16]
      break;
 80176e0:	e057      	b.n	8017792 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	0c9b      	lsrs	r3, r3, #18
 80176e6:	220f      	movs	r2, #15
 80176e8:	4013      	ands	r3, r2
 80176ea:	4a30      	ldr	r2, [pc, #192]	@ (80177ac <HAL_RCC_GetSysClockFreq+0x108>)
 80176ec:	5cd3      	ldrb	r3, [r2, r3]
 80176ee:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	0d9b      	lsrs	r3, r3, #22
 80176f4:	2203      	movs	r2, #3
 80176f6:	4013      	ands	r3, r2
 80176f8:	3301      	adds	r3, #1
 80176fa:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80176fc:	4b27      	ldr	r3, [pc, #156]	@ (801779c <HAL_RCC_GetSysClockFreq+0xf8>)
 80176fe:	68da      	ldr	r2, [r3, #12]
 8017700:	2380      	movs	r3, #128	@ 0x80
 8017702:	025b      	lsls	r3, r3, #9
 8017704:	4013      	ands	r3, r2
 8017706:	d00f      	beq.n	8017728 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8017708:	68b9      	ldr	r1, [r7, #8]
 801770a:	000a      	movs	r2, r1
 801770c:	0152      	lsls	r2, r2, #5
 801770e:	1a52      	subs	r2, r2, r1
 8017710:	0193      	lsls	r3, r2, #6
 8017712:	1a9b      	subs	r3, r3, r2
 8017714:	00db      	lsls	r3, r3, #3
 8017716:	185b      	adds	r3, r3, r1
 8017718:	025b      	lsls	r3, r3, #9
 801771a:	6879      	ldr	r1, [r7, #4]
 801771c:	0018      	movs	r0, r3
 801771e:	f7e8 fcfd 	bl	800011c <__udivsi3>
 8017722:	0003      	movs	r3, r0
 8017724:	617b      	str	r3, [r7, #20]
 8017726:	e023      	b.n	8017770 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8017728:	4b1c      	ldr	r3, [pc, #112]	@ (801779c <HAL_RCC_GetSysClockFreq+0xf8>)
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	2210      	movs	r2, #16
 801772e:	4013      	ands	r3, r2
 8017730:	d00f      	beq.n	8017752 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8017732:	68b9      	ldr	r1, [r7, #8]
 8017734:	000a      	movs	r2, r1
 8017736:	0152      	lsls	r2, r2, #5
 8017738:	1a52      	subs	r2, r2, r1
 801773a:	0193      	lsls	r3, r2, #6
 801773c:	1a9b      	subs	r3, r3, r2
 801773e:	00db      	lsls	r3, r3, #3
 8017740:	185b      	adds	r3, r3, r1
 8017742:	021b      	lsls	r3, r3, #8
 8017744:	6879      	ldr	r1, [r7, #4]
 8017746:	0018      	movs	r0, r3
 8017748:	f7e8 fce8 	bl	800011c <__udivsi3>
 801774c:	0003      	movs	r3, r0
 801774e:	617b      	str	r3, [r7, #20]
 8017750:	e00e      	b.n	8017770 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8017752:	68b9      	ldr	r1, [r7, #8]
 8017754:	000a      	movs	r2, r1
 8017756:	0152      	lsls	r2, r2, #5
 8017758:	1a52      	subs	r2, r2, r1
 801775a:	0193      	lsls	r3, r2, #6
 801775c:	1a9b      	subs	r3, r3, r2
 801775e:	00db      	lsls	r3, r3, #3
 8017760:	185b      	adds	r3, r3, r1
 8017762:	029b      	lsls	r3, r3, #10
 8017764:	6879      	ldr	r1, [r7, #4]
 8017766:	0018      	movs	r0, r3
 8017768:	f7e8 fcd8 	bl	800011c <__udivsi3>
 801776c:	0003      	movs	r3, r0
 801776e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8017770:	697b      	ldr	r3, [r7, #20]
 8017772:	613b      	str	r3, [r7, #16]
      break;
 8017774:	e00d      	b.n	8017792 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8017776:	4b09      	ldr	r3, [pc, #36]	@ (801779c <HAL_RCC_GetSysClockFreq+0xf8>)
 8017778:	685b      	ldr	r3, [r3, #4]
 801777a:	0b5b      	lsrs	r3, r3, #13
 801777c:	2207      	movs	r2, #7
 801777e:	4013      	ands	r3, r2
 8017780:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8017782:	683b      	ldr	r3, [r7, #0]
 8017784:	3301      	adds	r3, #1
 8017786:	2280      	movs	r2, #128	@ 0x80
 8017788:	0212      	lsls	r2, r2, #8
 801778a:	409a      	lsls	r2, r3
 801778c:	0013      	movs	r3, r2
 801778e:	613b      	str	r3, [r7, #16]
      break;
 8017790:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8017792:	693b      	ldr	r3, [r7, #16]
}
 8017794:	0018      	movs	r0, r3
 8017796:	46bd      	mov	sp, r7
 8017798:	b006      	add	sp, #24
 801779a:	bd80      	pop	{r7, pc}
 801779c:	40021000 	.word	0x40021000
 80177a0:	003d0900 	.word	0x003d0900
 80177a4:	00f42400 	.word	0x00f42400
 80177a8:	007a1200 	.word	0x007a1200
 80177ac:	0801af5c 	.word	0x0801af5c

080177b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80177b0:	b580      	push	{r7, lr}
 80177b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80177b4:	4b02      	ldr	r3, [pc, #8]	@ (80177c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80177b6:	681b      	ldr	r3, [r3, #0]
}
 80177b8:	0018      	movs	r0, r3
 80177ba:	46bd      	mov	sp, r7
 80177bc:	bd80      	pop	{r7, pc}
 80177be:	46c0      	nop			@ (mov r8, r8)
 80177c0:	20000070 	.word	0x20000070

080177c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80177c4:	b580      	push	{r7, lr}
 80177c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80177c8:	f7ff fff2 	bl	80177b0 <HAL_RCC_GetHCLKFreq>
 80177cc:	0001      	movs	r1, r0
 80177ce:	4b06      	ldr	r3, [pc, #24]	@ (80177e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80177d0:	68db      	ldr	r3, [r3, #12]
 80177d2:	0a1b      	lsrs	r3, r3, #8
 80177d4:	2207      	movs	r2, #7
 80177d6:	4013      	ands	r3, r2
 80177d8:	4a04      	ldr	r2, [pc, #16]	@ (80177ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80177da:	5cd3      	ldrb	r3, [r2, r3]
 80177dc:	40d9      	lsrs	r1, r3
 80177de:	000b      	movs	r3, r1
}
 80177e0:	0018      	movs	r0, r3
 80177e2:	46bd      	mov	sp, r7
 80177e4:	bd80      	pop	{r7, pc}
 80177e6:	46c0      	nop			@ (mov r8, r8)
 80177e8:	40021000 	.word	0x40021000
 80177ec:	0801af54 	.word	0x0801af54

080177f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80177f0:	b580      	push	{r7, lr}
 80177f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80177f4:	f7ff ffdc 	bl	80177b0 <HAL_RCC_GetHCLKFreq>
 80177f8:	0001      	movs	r1, r0
 80177fa:	4b06      	ldr	r3, [pc, #24]	@ (8017814 <HAL_RCC_GetPCLK2Freq+0x24>)
 80177fc:	68db      	ldr	r3, [r3, #12]
 80177fe:	0adb      	lsrs	r3, r3, #11
 8017800:	2207      	movs	r2, #7
 8017802:	4013      	ands	r3, r2
 8017804:	4a04      	ldr	r2, [pc, #16]	@ (8017818 <HAL_RCC_GetPCLK2Freq+0x28>)
 8017806:	5cd3      	ldrb	r3, [r2, r3]
 8017808:	40d9      	lsrs	r1, r3
 801780a:	000b      	movs	r3, r1
}
 801780c:	0018      	movs	r0, r3
 801780e:	46bd      	mov	sp, r7
 8017810:	bd80      	pop	{r7, pc}
 8017812:	46c0      	nop			@ (mov r8, r8)
 8017814:	40021000 	.word	0x40021000
 8017818:	0801af54 	.word	0x0801af54

0801781c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801781c:	b580      	push	{r7, lr}
 801781e:	b086      	sub	sp, #24
 8017820:	af00      	add	r7, sp, #0
 8017822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	2220      	movs	r2, #32
 801782a:	4013      	ands	r3, r2
 801782c:	d100      	bne.n	8017830 <HAL_RCCEx_PeriphCLKConfig+0x14>
 801782e:	e0c6      	b.n	80179be <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8017830:	2017      	movs	r0, #23
 8017832:	183b      	adds	r3, r7, r0
 8017834:	2200      	movs	r2, #0
 8017836:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8017838:	4b98      	ldr	r3, [pc, #608]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801783a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801783c:	2380      	movs	r3, #128	@ 0x80
 801783e:	055b      	lsls	r3, r3, #21
 8017840:	4013      	ands	r3, r2
 8017842:	d109      	bne.n	8017858 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8017844:	4b95      	ldr	r3, [pc, #596]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017846:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017848:	4b94      	ldr	r3, [pc, #592]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801784a:	2180      	movs	r1, #128	@ 0x80
 801784c:	0549      	lsls	r1, r1, #21
 801784e:	430a      	orrs	r2, r1
 8017850:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8017852:	183b      	adds	r3, r7, r0
 8017854:	2201      	movs	r2, #1
 8017856:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017858:	4b91      	ldr	r3, [pc, #580]	@ (8017aa0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 801785a:	681a      	ldr	r2, [r3, #0]
 801785c:	2380      	movs	r3, #128	@ 0x80
 801785e:	005b      	lsls	r3, r3, #1
 8017860:	4013      	ands	r3, r2
 8017862:	d11a      	bne.n	801789a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8017864:	4b8e      	ldr	r3, [pc, #568]	@ (8017aa0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8017866:	681a      	ldr	r2, [r3, #0]
 8017868:	4b8d      	ldr	r3, [pc, #564]	@ (8017aa0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 801786a:	2180      	movs	r1, #128	@ 0x80
 801786c:	0049      	lsls	r1, r1, #1
 801786e:	430a      	orrs	r2, r1
 8017870:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8017872:	f7fd ff9b 	bl	80157ac <HAL_GetTick>
 8017876:	0003      	movs	r3, r0
 8017878:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801787a:	e008      	b.n	801788e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801787c:	f7fd ff96 	bl	80157ac <HAL_GetTick>
 8017880:	0002      	movs	r2, r0
 8017882:	693b      	ldr	r3, [r7, #16]
 8017884:	1ad3      	subs	r3, r2, r3
 8017886:	2b64      	cmp	r3, #100	@ 0x64
 8017888:	d901      	bls.n	801788e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801788a:	2303      	movs	r3, #3
 801788c:	e102      	b.n	8017a94 <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801788e:	4b84      	ldr	r3, [pc, #528]	@ (8017aa0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8017890:	681a      	ldr	r2, [r3, #0]
 8017892:	2380      	movs	r3, #128	@ 0x80
 8017894:	005b      	lsls	r3, r3, #1
 8017896:	4013      	ands	r3, r2
 8017898:	d0f0      	beq.n	801787c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801789a:	4b80      	ldr	r3, [pc, #512]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801789c:	681a      	ldr	r2, [r3, #0]
 801789e:	23c0      	movs	r3, #192	@ 0xc0
 80178a0:	039b      	lsls	r3, r3, #14
 80178a2:	4013      	ands	r3, r2
 80178a4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	685a      	ldr	r2, [r3, #4]
 80178aa:	23c0      	movs	r3, #192	@ 0xc0
 80178ac:	039b      	lsls	r3, r3, #14
 80178ae:	4013      	ands	r3, r2
 80178b0:	68fa      	ldr	r2, [r7, #12]
 80178b2:	429a      	cmp	r2, r3
 80178b4:	d013      	beq.n	80178de <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	685a      	ldr	r2, [r3, #4]
 80178ba:	23c0      	movs	r3, #192	@ 0xc0
 80178bc:	029b      	lsls	r3, r3, #10
 80178be:	401a      	ands	r2, r3
 80178c0:	23c0      	movs	r3, #192	@ 0xc0
 80178c2:	029b      	lsls	r3, r3, #10
 80178c4:	429a      	cmp	r2, r3
 80178c6:	d10a      	bne.n	80178de <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80178c8:	4b74      	ldr	r3, [pc, #464]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80178ca:	681a      	ldr	r2, [r3, #0]
 80178cc:	2380      	movs	r3, #128	@ 0x80
 80178ce:	029b      	lsls	r3, r3, #10
 80178d0:	401a      	ands	r2, r3
 80178d2:	2380      	movs	r3, #128	@ 0x80
 80178d4:	029b      	lsls	r3, r3, #10
 80178d6:	429a      	cmp	r2, r3
 80178d8:	d101      	bne.n	80178de <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80178da:	2301      	movs	r3, #1
 80178dc:	e0da      	b.n	8017a94 <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80178de:	4b6f      	ldr	r3, [pc, #444]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80178e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80178e2:	23c0      	movs	r3, #192	@ 0xc0
 80178e4:	029b      	lsls	r3, r3, #10
 80178e6:	4013      	ands	r3, r2
 80178e8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d03b      	beq.n	8017968 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	685a      	ldr	r2, [r3, #4]
 80178f4:	23c0      	movs	r3, #192	@ 0xc0
 80178f6:	029b      	lsls	r3, r3, #10
 80178f8:	4013      	ands	r3, r2
 80178fa:	68fa      	ldr	r2, [r7, #12]
 80178fc:	429a      	cmp	r2, r3
 80178fe:	d033      	beq.n	8017968 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	2220      	movs	r2, #32
 8017906:	4013      	ands	r3, r2
 8017908:	d02e      	beq.n	8017968 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801790a:	4b64      	ldr	r3, [pc, #400]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801790c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801790e:	4a65      	ldr	r2, [pc, #404]	@ (8017aa4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8017910:	4013      	ands	r3, r2
 8017912:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8017914:	4b61      	ldr	r3, [pc, #388]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017916:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017918:	4b60      	ldr	r3, [pc, #384]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801791a:	2180      	movs	r1, #128	@ 0x80
 801791c:	0309      	lsls	r1, r1, #12
 801791e:	430a      	orrs	r2, r1
 8017920:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8017922:	4b5e      	ldr	r3, [pc, #376]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017924:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017926:	4b5d      	ldr	r3, [pc, #372]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017928:	495f      	ldr	r1, [pc, #380]	@ (8017aa8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801792a:	400a      	ands	r2, r1
 801792c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801792e:	4b5b      	ldr	r3, [pc, #364]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017930:	68fa      	ldr	r2, [r7, #12]
 8017932:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8017934:	68fa      	ldr	r2, [r7, #12]
 8017936:	2380      	movs	r3, #128	@ 0x80
 8017938:	005b      	lsls	r3, r3, #1
 801793a:	4013      	ands	r3, r2
 801793c:	d014      	beq.n	8017968 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801793e:	f7fd ff35 	bl	80157ac <HAL_GetTick>
 8017942:	0003      	movs	r3, r0
 8017944:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8017946:	e009      	b.n	801795c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8017948:	f7fd ff30 	bl	80157ac <HAL_GetTick>
 801794c:	0002      	movs	r2, r0
 801794e:	693b      	ldr	r3, [r7, #16]
 8017950:	1ad3      	subs	r3, r2, r3
 8017952:	4a56      	ldr	r2, [pc, #344]	@ (8017aac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8017954:	4293      	cmp	r3, r2
 8017956:	d901      	bls.n	801795c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8017958:	2303      	movs	r3, #3
 801795a:	e09b      	b.n	8017a94 <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801795c:	4b4f      	ldr	r3, [pc, #316]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801795e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017960:	2380      	movs	r3, #128	@ 0x80
 8017962:	009b      	lsls	r3, r3, #2
 8017964:	4013      	ands	r3, r2
 8017966:	d0ef      	beq.n	8017948 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	685a      	ldr	r2, [r3, #4]
 801796c:	23c0      	movs	r3, #192	@ 0xc0
 801796e:	029b      	lsls	r3, r3, #10
 8017970:	401a      	ands	r2, r3
 8017972:	23c0      	movs	r3, #192	@ 0xc0
 8017974:	029b      	lsls	r3, r3, #10
 8017976:	429a      	cmp	r2, r3
 8017978:	d10c      	bne.n	8017994 <HAL_RCCEx_PeriphCLKConfig+0x178>
 801797a:	4b48      	ldr	r3, [pc, #288]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	4a4c      	ldr	r2, [pc, #304]	@ (8017ab0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8017980:	4013      	ands	r3, r2
 8017982:	0019      	movs	r1, r3
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	685a      	ldr	r2, [r3, #4]
 8017988:	23c0      	movs	r3, #192	@ 0xc0
 801798a:	039b      	lsls	r3, r3, #14
 801798c:	401a      	ands	r2, r3
 801798e:	4b43      	ldr	r3, [pc, #268]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017990:	430a      	orrs	r2, r1
 8017992:	601a      	str	r2, [r3, #0]
 8017994:	4b41      	ldr	r3, [pc, #260]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017996:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	685a      	ldr	r2, [r3, #4]
 801799c:	23c0      	movs	r3, #192	@ 0xc0
 801799e:	029b      	lsls	r3, r3, #10
 80179a0:	401a      	ands	r2, r3
 80179a2:	4b3e      	ldr	r3, [pc, #248]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80179a4:	430a      	orrs	r2, r1
 80179a6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80179a8:	2317      	movs	r3, #23
 80179aa:	18fb      	adds	r3, r7, r3
 80179ac:	781b      	ldrb	r3, [r3, #0]
 80179ae:	2b01      	cmp	r3, #1
 80179b0:	d105      	bne.n	80179be <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80179b2:	4b3a      	ldr	r3, [pc, #232]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80179b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80179b6:	4b39      	ldr	r3, [pc, #228]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80179b8:	493e      	ldr	r1, [pc, #248]	@ (8017ab4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80179ba:	400a      	ands	r2, r1
 80179bc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	2201      	movs	r2, #1
 80179c4:	4013      	ands	r3, r2
 80179c6:	d009      	beq.n	80179dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80179c8:	4b34      	ldr	r3, [pc, #208]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80179ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80179cc:	2203      	movs	r2, #3
 80179ce:	4393      	bics	r3, r2
 80179d0:	0019      	movs	r1, r3
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	689a      	ldr	r2, [r3, #8]
 80179d6:	4b31      	ldr	r3, [pc, #196]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80179d8:	430a      	orrs	r2, r1
 80179da:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	2202      	movs	r2, #2
 80179e2:	4013      	ands	r3, r2
 80179e4:	d009      	beq.n	80179fa <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80179e6:	4b2d      	ldr	r3, [pc, #180]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80179e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80179ea:	220c      	movs	r2, #12
 80179ec:	4393      	bics	r3, r2
 80179ee:	0019      	movs	r1, r3
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	68da      	ldr	r2, [r3, #12]
 80179f4:	4b29      	ldr	r3, [pc, #164]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80179f6:	430a      	orrs	r2, r1
 80179f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	2204      	movs	r2, #4
 8017a00:	4013      	ands	r3, r2
 8017a02:	d009      	beq.n	8017a18 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8017a04:	4b25      	ldr	r3, [pc, #148]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017a08:	4a2b      	ldr	r2, [pc, #172]	@ (8017ab8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8017a0a:	4013      	ands	r3, r2
 8017a0c:	0019      	movs	r1, r3
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	691a      	ldr	r2, [r3, #16]
 8017a12:	4b22      	ldr	r3, [pc, #136]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017a14:	430a      	orrs	r2, r1
 8017a16:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	2208      	movs	r2, #8
 8017a1e:	4013      	ands	r3, r2
 8017a20:	d009      	beq.n	8017a36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8017a22:	4b1e      	ldr	r3, [pc, #120]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017a26:	4a25      	ldr	r2, [pc, #148]	@ (8017abc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8017a28:	4013      	ands	r3, r2
 8017a2a:	0019      	movs	r1, r3
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	695a      	ldr	r2, [r3, #20]
 8017a30:	4b1a      	ldr	r3, [pc, #104]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017a32:	430a      	orrs	r2, r1
 8017a34:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	681a      	ldr	r2, [r3, #0]
 8017a3a:	2380      	movs	r3, #128	@ 0x80
 8017a3c:	005b      	lsls	r3, r3, #1
 8017a3e:	4013      	ands	r3, r2
 8017a40:	d009      	beq.n	8017a56 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8017a42:	4b16      	ldr	r3, [pc, #88]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017a46:	4a17      	ldr	r2, [pc, #92]	@ (8017aa4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8017a48:	4013      	ands	r3, r2
 8017a4a:	0019      	movs	r1, r3
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	699a      	ldr	r2, [r3, #24]
 8017a50:	4b12      	ldr	r3, [pc, #72]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017a52:	430a      	orrs	r2, r1
 8017a54:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	2240      	movs	r2, #64	@ 0x40
 8017a5c:	4013      	ands	r3, r2
 8017a5e:	d009      	beq.n	8017a74 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8017a60:	4b0e      	ldr	r3, [pc, #56]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017a64:	4a16      	ldr	r2, [pc, #88]	@ (8017ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8017a66:	4013      	ands	r3, r2
 8017a68:	0019      	movs	r1, r3
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	6a1a      	ldr	r2, [r3, #32]
 8017a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017a70:	430a      	orrs	r2, r1
 8017a72:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	2280      	movs	r2, #128	@ 0x80
 8017a7a:	4013      	ands	r3, r2
 8017a7c:	d009      	beq.n	8017a92 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8017a7e:	4b07      	ldr	r3, [pc, #28]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017a82:	4a10      	ldr	r2, [pc, #64]	@ (8017ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8017a84:	4013      	ands	r3, r2
 8017a86:	0019      	movs	r1, r3
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	69da      	ldr	r2, [r3, #28]
 8017a8c:	4b03      	ldr	r3, [pc, #12]	@ (8017a9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017a8e:	430a      	orrs	r2, r1
 8017a90:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8017a92:	2300      	movs	r3, #0
}
 8017a94:	0018      	movs	r0, r3
 8017a96:	46bd      	mov	sp, r7
 8017a98:	b006      	add	sp, #24
 8017a9a:	bd80      	pop	{r7, pc}
 8017a9c:	40021000 	.word	0x40021000
 8017aa0:	40007000 	.word	0x40007000
 8017aa4:	fffcffff 	.word	0xfffcffff
 8017aa8:	fff7ffff 	.word	0xfff7ffff
 8017aac:	00001388 	.word	0x00001388
 8017ab0:	ffcfffff 	.word	0xffcfffff
 8017ab4:	efffffff 	.word	0xefffffff
 8017ab8:	fffff3ff 	.word	0xfffff3ff
 8017abc:	ffffcfff 	.word	0xffffcfff
 8017ac0:	fbffffff 	.word	0xfbffffff
 8017ac4:	fff3ffff 	.word	0xfff3ffff

08017ac8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b082      	sub	sp, #8
 8017acc:	af00      	add	r7, sp, #0
 8017ace:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d101      	bne.n	8017ada <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8017ad6:	2301      	movs	r3, #1
 8017ad8:	e08e      	b.n	8017bf8 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	2221      	movs	r2, #33	@ 0x21
 8017ade:	5c9b      	ldrb	r3, [r3, r2]
 8017ae0:	b2db      	uxtb	r3, r3
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d107      	bne.n	8017af6 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	2220      	movs	r2, #32
 8017aea:	2100      	movs	r1, #0
 8017aec:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	0018      	movs	r0, r3
 8017af2:	f7eb fa93 	bl	800301c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	2221      	movs	r2, #33	@ 0x21
 8017afa:	2102      	movs	r1, #2
 8017afc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	22ca      	movs	r2, #202	@ 0xca
 8017b04:	625a      	str	r2, [r3, #36]	@ 0x24
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	2253      	movs	r2, #83	@ 0x53
 8017b0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	0018      	movs	r0, r3
 8017b12:	f000 fca6 	bl	8018462 <RTC_EnterInitMode>
 8017b16:	1e03      	subs	r3, r0, #0
 8017b18:	d009      	beq.n	8017b2e <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	22ff      	movs	r2, #255	@ 0xff
 8017b20:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	2221      	movs	r2, #33	@ 0x21
 8017b26:	2104      	movs	r1, #4
 8017b28:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8017b2a:	2301      	movs	r3, #1
 8017b2c:	e064      	b.n	8017bf8 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	689a      	ldr	r2, [r3, #8]
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	4931      	ldr	r1, [pc, #196]	@ (8017c00 <HAL_RTC_Init+0x138>)
 8017b3a:	400a      	ands	r2, r1
 8017b3c:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	6899      	ldr	r1, [r3, #8]
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	685a      	ldr	r2, [r3, #4]
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	691b      	ldr	r3, [r3, #16]
 8017b4c:	431a      	orrs	r2, r3
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	699b      	ldr	r3, [r3, #24]
 8017b52:	431a      	orrs	r2, r3
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	430a      	orrs	r2, r1
 8017b5a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	687a      	ldr	r2, [r7, #4]
 8017b62:	68d2      	ldr	r2, [r2, #12]
 8017b64:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	681b      	ldr	r3, [r3, #0]
 8017b6a:	6919      	ldr	r1, [r3, #16]
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	689b      	ldr	r3, [r3, #8]
 8017b70:	041a      	lsls	r2, r3, #16
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	430a      	orrs	r2, r1
 8017b78:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	68da      	ldr	r2, [r3, #12]
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	681b      	ldr	r3, [r3, #0]
 8017b84:	2180      	movs	r1, #128	@ 0x80
 8017b86:	438a      	bics	r2, r1
 8017b88:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	2103      	movs	r1, #3
 8017b96:	438a      	bics	r2, r1
 8017b98:	64da      	str	r2, [r3, #76]	@ 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	69da      	ldr	r2, [r3, #28]
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	695b      	ldr	r3, [r3, #20]
 8017ba8:	431a      	orrs	r2, r3
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	430a      	orrs	r2, r1
 8017bb0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	689b      	ldr	r3, [r3, #8]
 8017bb8:	2220      	movs	r2, #32
 8017bba:	4013      	ands	r3, r2
 8017bbc:	d113      	bne.n	8017be6 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	0018      	movs	r0, r3
 8017bc2:	f000 fc27 	bl	8018414 <HAL_RTC_WaitForSynchro>
 8017bc6:	1e03      	subs	r3, r0, #0
 8017bc8:	d00d      	beq.n	8017be6 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	22ff      	movs	r2, #255	@ 0xff
 8017bd0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	2221      	movs	r2, #33	@ 0x21
 8017bd6:	2104      	movs	r1, #4
 8017bd8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	2220      	movs	r2, #32
 8017bde:	2100      	movs	r1, #0
 8017be0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8017be2:	2301      	movs	r3, #1
 8017be4:	e008      	b.n	8017bf8 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	22ff      	movs	r2, #255	@ 0xff
 8017bec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	2221      	movs	r2, #33	@ 0x21
 8017bf2:	2101      	movs	r1, #1
 8017bf4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8017bf6:	2300      	movs	r3, #0
  }
}
 8017bf8:	0018      	movs	r0, r3
 8017bfa:	46bd      	mov	sp, r7
 8017bfc:	b002      	add	sp, #8
 8017bfe:	bd80      	pop	{r7, pc}
 8017c00:	ff8fffbf 	.word	0xff8fffbf

08017c04 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8017c04:	b590      	push	{r4, r7, lr}
 8017c06:	b087      	sub	sp, #28
 8017c08:	af00      	add	r7, sp, #0
 8017c0a:	60f8      	str	r0, [r7, #12]
 8017c0c:	60b9      	str	r1, [r7, #8]
 8017c0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	2220      	movs	r2, #32
 8017c14:	5c9b      	ldrb	r3, [r3, r2]
 8017c16:	2b01      	cmp	r3, #1
 8017c18:	d101      	bne.n	8017c1e <HAL_RTC_SetTime+0x1a>
 8017c1a:	2302      	movs	r3, #2
 8017c1c:	e0ad      	b.n	8017d7a <HAL_RTC_SetTime+0x176>
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	2220      	movs	r2, #32
 8017c22:	2101      	movs	r1, #1
 8017c24:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	2221      	movs	r2, #33	@ 0x21
 8017c2a:	2102      	movs	r1, #2
 8017c2c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d125      	bne.n	8017c80 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8017c34:	68fb      	ldr	r3, [r7, #12]
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	689b      	ldr	r3, [r3, #8]
 8017c3a:	2240      	movs	r2, #64	@ 0x40
 8017c3c:	4013      	ands	r3, r2
 8017c3e:	d102      	bne.n	8017c46 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8017c40:	68bb      	ldr	r3, [r7, #8]
 8017c42:	2200      	movs	r2, #0
 8017c44:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8017c46:	68bb      	ldr	r3, [r7, #8]
 8017c48:	781b      	ldrb	r3, [r3, #0]
 8017c4a:	0018      	movs	r0, r3
 8017c4c:	f000 fc33 	bl	80184b6 <RTC_ByteToBcd2>
 8017c50:	0003      	movs	r3, r0
 8017c52:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8017c54:	68bb      	ldr	r3, [r7, #8]
 8017c56:	785b      	ldrb	r3, [r3, #1]
 8017c58:	0018      	movs	r0, r3
 8017c5a:	f000 fc2c 	bl	80184b6 <RTC_ByteToBcd2>
 8017c5e:	0003      	movs	r3, r0
 8017c60:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8017c62:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8017c64:	68bb      	ldr	r3, [r7, #8]
 8017c66:	789b      	ldrb	r3, [r3, #2]
 8017c68:	0018      	movs	r0, r3
 8017c6a:	f000 fc24 	bl	80184b6 <RTC_ByteToBcd2>
 8017c6e:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8017c70:	0022      	movs	r2, r4
 8017c72:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8017c74:	68bb      	ldr	r3, [r7, #8]
 8017c76:	78db      	ldrb	r3, [r3, #3]
 8017c78:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8017c7a:	4313      	orrs	r3, r2
 8017c7c:	617b      	str	r3, [r7, #20]
 8017c7e:	e017      	b.n	8017cb0 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	689b      	ldr	r3, [r3, #8]
 8017c86:	2240      	movs	r2, #64	@ 0x40
 8017c88:	4013      	ands	r3, r2
 8017c8a:	d102      	bne.n	8017c92 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8017c8c:	68bb      	ldr	r3, [r7, #8]
 8017c8e:	2200      	movs	r2, #0
 8017c90:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8017c92:	68bb      	ldr	r3, [r7, #8]
 8017c94:	781b      	ldrb	r3, [r3, #0]
 8017c96:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8017c98:	68bb      	ldr	r3, [r7, #8]
 8017c9a:	785b      	ldrb	r3, [r3, #1]
 8017c9c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8017c9e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8017ca0:	68ba      	ldr	r2, [r7, #8]
 8017ca2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8017ca4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8017ca6:	68bb      	ldr	r3, [r7, #8]
 8017ca8:	78db      	ldrb	r3, [r3, #3]
 8017caa:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8017cac:	4313      	orrs	r3, r2
 8017cae:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	681b      	ldr	r3, [r3, #0]
 8017cb4:	22ca      	movs	r2, #202	@ 0xca
 8017cb6:	625a      	str	r2, [r3, #36]	@ 0x24
 8017cb8:	68fb      	ldr	r3, [r7, #12]
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	2253      	movs	r2, #83	@ 0x53
 8017cbe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	0018      	movs	r0, r3
 8017cc4:	f000 fbcd 	bl	8018462 <RTC_EnterInitMode>
 8017cc8:	1e03      	subs	r3, r0, #0
 8017cca:	d00d      	beq.n	8017ce8 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017ccc:	68fb      	ldr	r3, [r7, #12]
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	22ff      	movs	r2, #255	@ 0xff
 8017cd2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	2221      	movs	r2, #33	@ 0x21
 8017cd8:	2104      	movs	r1, #4
 8017cda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8017cdc:	68fb      	ldr	r3, [r7, #12]
 8017cde:	2220      	movs	r2, #32
 8017ce0:	2100      	movs	r1, #0
 8017ce2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8017ce4:	2301      	movs	r3, #1
 8017ce6:	e048      	b.n	8017d7a <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	697a      	ldr	r2, [r7, #20]
 8017cee:	4925      	ldr	r1, [pc, #148]	@ (8017d84 <HAL_RTC_SetTime+0x180>)
 8017cf0:	400a      	ands	r2, r1
 8017cf2:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	689a      	ldr	r2, [r3, #8]
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	4922      	ldr	r1, [pc, #136]	@ (8017d88 <HAL_RTC_SetTime+0x184>)
 8017d00:	400a      	ands	r2, r1
 8017d02:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	6899      	ldr	r1, [r3, #8]
 8017d0a:	68bb      	ldr	r3, [r7, #8]
 8017d0c:	68da      	ldr	r2, [r3, #12]
 8017d0e:	68bb      	ldr	r3, [r7, #8]
 8017d10:	691b      	ldr	r3, [r3, #16]
 8017d12:	431a      	orrs	r2, r3
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	430a      	orrs	r2, r1
 8017d1a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8017d1c:	68fb      	ldr	r3, [r7, #12]
 8017d1e:	681b      	ldr	r3, [r3, #0]
 8017d20:	68da      	ldr	r2, [r3, #12]
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	681b      	ldr	r3, [r3, #0]
 8017d26:	2180      	movs	r1, #128	@ 0x80
 8017d28:	438a      	bics	r2, r1
 8017d2a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8017d2c:	68fb      	ldr	r3, [r7, #12]
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	689b      	ldr	r3, [r3, #8]
 8017d32:	2220      	movs	r2, #32
 8017d34:	4013      	ands	r3, r2
 8017d36:	d113      	bne.n	8017d60 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	0018      	movs	r0, r3
 8017d3c:	f000 fb6a 	bl	8018414 <HAL_RTC_WaitForSynchro>
 8017d40:	1e03      	subs	r3, r0, #0
 8017d42:	d00d      	beq.n	8017d60 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	22ff      	movs	r2, #255	@ 0xff
 8017d4a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	2221      	movs	r2, #33	@ 0x21
 8017d50:	2104      	movs	r1, #4
 8017d52:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8017d54:	68fb      	ldr	r3, [r7, #12]
 8017d56:	2220      	movs	r2, #32
 8017d58:	2100      	movs	r1, #0
 8017d5a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8017d5c:	2301      	movs	r3, #1
 8017d5e:	e00c      	b.n	8017d7a <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	681b      	ldr	r3, [r3, #0]
 8017d64:	22ff      	movs	r2, #255	@ 0xff
 8017d66:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	2221      	movs	r2, #33	@ 0x21
 8017d6c:	2101      	movs	r1, #1
 8017d6e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8017d70:	68fb      	ldr	r3, [r7, #12]
 8017d72:	2220      	movs	r2, #32
 8017d74:	2100      	movs	r1, #0
 8017d76:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8017d78:	2300      	movs	r3, #0
  }
}
 8017d7a:	0018      	movs	r0, r3
 8017d7c:	46bd      	mov	sp, r7
 8017d7e:	b007      	add	sp, #28
 8017d80:	bd90      	pop	{r4, r7, pc}
 8017d82:	46c0      	nop			@ (mov r8, r8)
 8017d84:	007f7f7f 	.word	0x007f7f7f
 8017d88:	fffbffff 	.word	0xfffbffff

08017d8c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	b086      	sub	sp, #24
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	60f8      	str	r0, [r7, #12]
 8017d94:	60b9      	str	r1, [r7, #8]
 8017d96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017d9e:	68bb      	ldr	r3, [r7, #8]
 8017da0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	691b      	ldr	r3, [r3, #16]
 8017da8:	045b      	lsls	r3, r3, #17
 8017daa:	0c5a      	lsrs	r2, r3, #17
 8017dac:	68bb      	ldr	r3, [r7, #8]
 8017dae:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	681b      	ldr	r3, [r3, #0]
 8017db6:	4a22      	ldr	r2, [pc, #136]	@ (8017e40 <HAL_RTC_GetTime+0xb4>)
 8017db8:	4013      	ands	r3, r2
 8017dba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8017dbc:	697b      	ldr	r3, [r7, #20]
 8017dbe:	0c1b      	lsrs	r3, r3, #16
 8017dc0:	b2db      	uxtb	r3, r3
 8017dc2:	223f      	movs	r2, #63	@ 0x3f
 8017dc4:	4013      	ands	r3, r2
 8017dc6:	b2da      	uxtb	r2, r3
 8017dc8:	68bb      	ldr	r3, [r7, #8]
 8017dca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8017dcc:	697b      	ldr	r3, [r7, #20]
 8017dce:	0a1b      	lsrs	r3, r3, #8
 8017dd0:	b2db      	uxtb	r3, r3
 8017dd2:	227f      	movs	r2, #127	@ 0x7f
 8017dd4:	4013      	ands	r3, r2
 8017dd6:	b2da      	uxtb	r2, r3
 8017dd8:	68bb      	ldr	r3, [r7, #8]
 8017dda:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8017ddc:	697b      	ldr	r3, [r7, #20]
 8017dde:	b2db      	uxtb	r3, r3
 8017de0:	227f      	movs	r2, #127	@ 0x7f
 8017de2:	4013      	ands	r3, r2
 8017de4:	b2da      	uxtb	r2, r3
 8017de6:	68bb      	ldr	r3, [r7, #8]
 8017de8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8017dea:	697b      	ldr	r3, [r7, #20]
 8017dec:	0c1b      	lsrs	r3, r3, #16
 8017dee:	b2db      	uxtb	r3, r3
 8017df0:	2240      	movs	r2, #64	@ 0x40
 8017df2:	4013      	ands	r3, r2
 8017df4:	b2da      	uxtb	r2, r3
 8017df6:	68bb      	ldr	r3, [r7, #8]
 8017df8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d11a      	bne.n	8017e36 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8017e00:	68bb      	ldr	r3, [r7, #8]
 8017e02:	781b      	ldrb	r3, [r3, #0]
 8017e04:	0018      	movs	r0, r3
 8017e06:	f000 fb7e 	bl	8018506 <RTC_Bcd2ToByte>
 8017e0a:	0003      	movs	r3, r0
 8017e0c:	001a      	movs	r2, r3
 8017e0e:	68bb      	ldr	r3, [r7, #8]
 8017e10:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8017e12:	68bb      	ldr	r3, [r7, #8]
 8017e14:	785b      	ldrb	r3, [r3, #1]
 8017e16:	0018      	movs	r0, r3
 8017e18:	f000 fb75 	bl	8018506 <RTC_Bcd2ToByte>
 8017e1c:	0003      	movs	r3, r0
 8017e1e:	001a      	movs	r2, r3
 8017e20:	68bb      	ldr	r3, [r7, #8]
 8017e22:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8017e24:	68bb      	ldr	r3, [r7, #8]
 8017e26:	789b      	ldrb	r3, [r3, #2]
 8017e28:	0018      	movs	r0, r3
 8017e2a:	f000 fb6c 	bl	8018506 <RTC_Bcd2ToByte>
 8017e2e:	0003      	movs	r3, r0
 8017e30:	001a      	movs	r2, r3
 8017e32:	68bb      	ldr	r3, [r7, #8]
 8017e34:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8017e36:	2300      	movs	r3, #0
}
 8017e38:	0018      	movs	r0, r3
 8017e3a:	46bd      	mov	sp, r7
 8017e3c:	b006      	add	sp, #24
 8017e3e:	bd80      	pop	{r7, pc}
 8017e40:	007f7f7f 	.word	0x007f7f7f

08017e44 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8017e44:	b590      	push	{r4, r7, lr}
 8017e46:	b087      	sub	sp, #28
 8017e48:	af00      	add	r7, sp, #0
 8017e4a:	60f8      	str	r0, [r7, #12]
 8017e4c:	60b9      	str	r1, [r7, #8]
 8017e4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8017e50:	68fb      	ldr	r3, [r7, #12]
 8017e52:	2220      	movs	r2, #32
 8017e54:	5c9b      	ldrb	r3, [r3, r2]
 8017e56:	2b01      	cmp	r3, #1
 8017e58:	d101      	bne.n	8017e5e <HAL_RTC_SetDate+0x1a>
 8017e5a:	2302      	movs	r3, #2
 8017e5c:	e099      	b.n	8017f92 <HAL_RTC_SetDate+0x14e>
 8017e5e:	68fb      	ldr	r3, [r7, #12]
 8017e60:	2220      	movs	r2, #32
 8017e62:	2101      	movs	r1, #1
 8017e64:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	2221      	movs	r2, #33	@ 0x21
 8017e6a:	2102      	movs	r1, #2
 8017e6c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d10e      	bne.n	8017e92 <HAL_RTC_SetDate+0x4e>
 8017e74:	68bb      	ldr	r3, [r7, #8]
 8017e76:	785b      	ldrb	r3, [r3, #1]
 8017e78:	001a      	movs	r2, r3
 8017e7a:	2310      	movs	r3, #16
 8017e7c:	4013      	ands	r3, r2
 8017e7e:	d008      	beq.n	8017e92 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8017e80:	68bb      	ldr	r3, [r7, #8]
 8017e82:	785b      	ldrb	r3, [r3, #1]
 8017e84:	2210      	movs	r2, #16
 8017e86:	4393      	bics	r3, r2
 8017e88:	b2db      	uxtb	r3, r3
 8017e8a:	330a      	adds	r3, #10
 8017e8c:	b2da      	uxtb	r2, r3
 8017e8e:	68bb      	ldr	r3, [r7, #8]
 8017e90:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d11c      	bne.n	8017ed2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8017e98:	68bb      	ldr	r3, [r7, #8]
 8017e9a:	78db      	ldrb	r3, [r3, #3]
 8017e9c:	0018      	movs	r0, r3
 8017e9e:	f000 fb0a 	bl	80184b6 <RTC_ByteToBcd2>
 8017ea2:	0003      	movs	r3, r0
 8017ea4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8017ea6:	68bb      	ldr	r3, [r7, #8]
 8017ea8:	785b      	ldrb	r3, [r3, #1]
 8017eaa:	0018      	movs	r0, r3
 8017eac:	f000 fb03 	bl	80184b6 <RTC_ByteToBcd2>
 8017eb0:	0003      	movs	r3, r0
 8017eb2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8017eb4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8017eb6:	68bb      	ldr	r3, [r7, #8]
 8017eb8:	789b      	ldrb	r3, [r3, #2]
 8017eba:	0018      	movs	r0, r3
 8017ebc:	f000 fafb 	bl	80184b6 <RTC_ByteToBcd2>
 8017ec0:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8017ec2:	0022      	movs	r2, r4
 8017ec4:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8017ec6:	68bb      	ldr	r3, [r7, #8]
 8017ec8:	781b      	ldrb	r3, [r3, #0]
 8017eca:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8017ecc:	4313      	orrs	r3, r2
 8017ece:	617b      	str	r3, [r7, #20]
 8017ed0:	e00e      	b.n	8017ef0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8017ed2:	68bb      	ldr	r3, [r7, #8]
 8017ed4:	78db      	ldrb	r3, [r3, #3]
 8017ed6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8017ed8:	68bb      	ldr	r3, [r7, #8]
 8017eda:	785b      	ldrb	r3, [r3, #1]
 8017edc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8017ede:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8017ee0:	68ba      	ldr	r2, [r7, #8]
 8017ee2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8017ee4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8017ee6:	68bb      	ldr	r3, [r7, #8]
 8017ee8:	781b      	ldrb	r3, [r3, #0]
 8017eea:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8017eec:	4313      	orrs	r3, r2
 8017eee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	22ca      	movs	r2, #202	@ 0xca
 8017ef6:	625a      	str	r2, [r3, #36]	@ 0x24
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	2253      	movs	r2, #83	@ 0x53
 8017efe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	0018      	movs	r0, r3
 8017f04:	f000 faad 	bl	8018462 <RTC_EnterInitMode>
 8017f08:	1e03      	subs	r3, r0, #0
 8017f0a:	d00d      	beq.n	8017f28 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	22ff      	movs	r2, #255	@ 0xff
 8017f12:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8017f14:	68fb      	ldr	r3, [r7, #12]
 8017f16:	2221      	movs	r2, #33	@ 0x21
 8017f18:	2104      	movs	r1, #4
 8017f1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	2220      	movs	r2, #32
 8017f20:	2100      	movs	r1, #0
 8017f22:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8017f24:	2301      	movs	r3, #1
 8017f26:	e034      	b.n	8017f92 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	697a      	ldr	r2, [r7, #20]
 8017f2e:	491b      	ldr	r1, [pc, #108]	@ (8017f9c <HAL_RTC_SetDate+0x158>)
 8017f30:	400a      	ands	r2, r1
 8017f32:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8017f34:	68fb      	ldr	r3, [r7, #12]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	68da      	ldr	r2, [r3, #12]
 8017f3a:	68fb      	ldr	r3, [r7, #12]
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	2180      	movs	r1, #128	@ 0x80
 8017f40:	438a      	bics	r2, r1
 8017f42:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	689b      	ldr	r3, [r3, #8]
 8017f4a:	2220      	movs	r2, #32
 8017f4c:	4013      	ands	r3, r2
 8017f4e:	d113      	bne.n	8017f78 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8017f50:	68fb      	ldr	r3, [r7, #12]
 8017f52:	0018      	movs	r0, r3
 8017f54:	f000 fa5e 	bl	8018414 <HAL_RTC_WaitForSynchro>
 8017f58:	1e03      	subs	r3, r0, #0
 8017f5a:	d00d      	beq.n	8017f78 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017f5c:	68fb      	ldr	r3, [r7, #12]
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	22ff      	movs	r2, #255	@ 0xff
 8017f62:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	2221      	movs	r2, #33	@ 0x21
 8017f68:	2104      	movs	r1, #4
 8017f6a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	2220      	movs	r2, #32
 8017f70:	2100      	movs	r1, #0
 8017f72:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8017f74:	2301      	movs	r3, #1
 8017f76:	e00c      	b.n	8017f92 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017f78:	68fb      	ldr	r3, [r7, #12]
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	22ff      	movs	r2, #255	@ 0xff
 8017f7e:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	2221      	movs	r2, #33	@ 0x21
 8017f84:	2101      	movs	r1, #1
 8017f86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	2220      	movs	r2, #32
 8017f8c:	2100      	movs	r1, #0
 8017f8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8017f90:	2300      	movs	r3, #0
  }
}
 8017f92:	0018      	movs	r0, r3
 8017f94:	46bd      	mov	sp, r7
 8017f96:	b007      	add	sp, #28
 8017f98:	bd90      	pop	{r4, r7, pc}
 8017f9a:	46c0      	nop			@ (mov r8, r8)
 8017f9c:	00ffff3f 	.word	0x00ffff3f

08017fa0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b086      	sub	sp, #24
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	60f8      	str	r0, [r7, #12]
 8017fa8:	60b9      	str	r1, [r7, #8]
 8017faa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	685b      	ldr	r3, [r3, #4]
 8017fb2:	4a21      	ldr	r2, [pc, #132]	@ (8018038 <HAL_RTC_GetDate+0x98>)
 8017fb4:	4013      	ands	r3, r2
 8017fb6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8017fb8:	697b      	ldr	r3, [r7, #20]
 8017fba:	0c1b      	lsrs	r3, r3, #16
 8017fbc:	b2da      	uxtb	r2, r3
 8017fbe:	68bb      	ldr	r3, [r7, #8]
 8017fc0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8017fc2:	697b      	ldr	r3, [r7, #20]
 8017fc4:	0a1b      	lsrs	r3, r3, #8
 8017fc6:	b2db      	uxtb	r3, r3
 8017fc8:	221f      	movs	r2, #31
 8017fca:	4013      	ands	r3, r2
 8017fcc:	b2da      	uxtb	r2, r3
 8017fce:	68bb      	ldr	r3, [r7, #8]
 8017fd0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8017fd2:	697b      	ldr	r3, [r7, #20]
 8017fd4:	b2db      	uxtb	r3, r3
 8017fd6:	223f      	movs	r2, #63	@ 0x3f
 8017fd8:	4013      	ands	r3, r2
 8017fda:	b2da      	uxtb	r2, r3
 8017fdc:	68bb      	ldr	r3, [r7, #8]
 8017fde:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8017fe0:	697b      	ldr	r3, [r7, #20]
 8017fe2:	0b5b      	lsrs	r3, r3, #13
 8017fe4:	b2db      	uxtb	r3, r3
 8017fe6:	2207      	movs	r2, #7
 8017fe8:	4013      	ands	r3, r2
 8017fea:	b2da      	uxtb	r2, r3
 8017fec:	68bb      	ldr	r3, [r7, #8]
 8017fee:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d11a      	bne.n	801802c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8017ff6:	68bb      	ldr	r3, [r7, #8]
 8017ff8:	78db      	ldrb	r3, [r3, #3]
 8017ffa:	0018      	movs	r0, r3
 8017ffc:	f000 fa83 	bl	8018506 <RTC_Bcd2ToByte>
 8018000:	0003      	movs	r3, r0
 8018002:	001a      	movs	r2, r3
 8018004:	68bb      	ldr	r3, [r7, #8]
 8018006:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8018008:	68bb      	ldr	r3, [r7, #8]
 801800a:	785b      	ldrb	r3, [r3, #1]
 801800c:	0018      	movs	r0, r3
 801800e:	f000 fa7a 	bl	8018506 <RTC_Bcd2ToByte>
 8018012:	0003      	movs	r3, r0
 8018014:	001a      	movs	r2, r3
 8018016:	68bb      	ldr	r3, [r7, #8]
 8018018:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801801a:	68bb      	ldr	r3, [r7, #8]
 801801c:	789b      	ldrb	r3, [r3, #2]
 801801e:	0018      	movs	r0, r3
 8018020:	f000 fa71 	bl	8018506 <RTC_Bcd2ToByte>
 8018024:	0003      	movs	r3, r0
 8018026:	001a      	movs	r2, r3
 8018028:	68bb      	ldr	r3, [r7, #8]
 801802a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801802c:	2300      	movs	r3, #0
}
 801802e:	0018      	movs	r0, r3
 8018030:	46bd      	mov	sp, r7
 8018032:	b006      	add	sp, #24
 8018034:	bd80      	pop	{r7, pc}
 8018036:	46c0      	nop			@ (mov r8, r8)
 8018038:	00ffff3f 	.word	0x00ffff3f

0801803c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 801803c:	b590      	push	{r4, r7, lr}
 801803e:	b089      	sub	sp, #36	@ 0x24
 8018040:	af00      	add	r7, sp, #0
 8018042:	60f8      	str	r0, [r7, #12]
 8018044:	60b9      	str	r1, [r7, #8]
 8018046:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018048:	68fb      	ldr	r3, [r7, #12]
 801804a:	2220      	movs	r2, #32
 801804c:	5c9b      	ldrb	r3, [r3, r2]
 801804e:	2b01      	cmp	r3, #1
 8018050:	d101      	bne.n	8018056 <HAL_RTC_SetAlarm_IT+0x1a>
 8018052:	2302      	movs	r3, #2
 8018054:	e130      	b.n	80182b8 <HAL_RTC_SetAlarm_IT+0x27c>
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	2220      	movs	r2, #32
 801805a:	2101      	movs	r1, #1
 801805c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	2221      	movs	r2, #33	@ 0x21
 8018062:	2102      	movs	r1, #2
 8018064:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	2b00      	cmp	r3, #0
 801806a:	d136      	bne.n	80180da <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801806c:	68fb      	ldr	r3, [r7, #12]
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	689b      	ldr	r3, [r3, #8]
 8018072:	2240      	movs	r2, #64	@ 0x40
 8018074:	4013      	ands	r3, r2
 8018076:	d102      	bne.n	801807e <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8018078:	68bb      	ldr	r3, [r7, #8]
 801807a:	2200      	movs	r2, #0
 801807c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 801807e:	68bb      	ldr	r3, [r7, #8]
 8018080:	781b      	ldrb	r3, [r3, #0]
 8018082:	0018      	movs	r0, r3
 8018084:	f000 fa17 	bl	80184b6 <RTC_ByteToBcd2>
 8018088:	0003      	movs	r3, r0
 801808a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 801808c:	68bb      	ldr	r3, [r7, #8]
 801808e:	785b      	ldrb	r3, [r3, #1]
 8018090:	0018      	movs	r0, r3
 8018092:	f000 fa10 	bl	80184b6 <RTC_ByteToBcd2>
 8018096:	0003      	movs	r3, r0
 8018098:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 801809a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 801809c:	68bb      	ldr	r3, [r7, #8]
 801809e:	789b      	ldrb	r3, [r3, #2]
 80180a0:	0018      	movs	r0, r3
 80180a2:	f000 fa08 	bl	80184b6 <RTC_ByteToBcd2>
 80180a6:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80180a8:	0022      	movs	r2, r4
 80180aa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80180ac:	68bb      	ldr	r3, [r7, #8]
 80180ae:	78db      	ldrb	r3, [r3, #3]
 80180b0:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80180b2:	431a      	orrs	r2, r3
 80180b4:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80180b6:	68bb      	ldr	r3, [r7, #8]
 80180b8:	2220      	movs	r2, #32
 80180ba:	5c9b      	ldrb	r3, [r3, r2]
 80180bc:	0018      	movs	r0, r3
 80180be:	f000 f9fa 	bl	80184b6 <RTC_ByteToBcd2>
 80180c2:	0003      	movs	r3, r0
 80180c4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80180c6:	0022      	movs	r2, r4
 80180c8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80180ca:	68bb      	ldr	r3, [r7, #8]
 80180cc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80180ce:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80180d0:	68bb      	ldr	r3, [r7, #8]
 80180d2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80180d4:	4313      	orrs	r3, r2
 80180d6:	61fb      	str	r3, [r7, #28]
 80180d8:	e022      	b.n	8018120 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80180da:	68fb      	ldr	r3, [r7, #12]
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	689b      	ldr	r3, [r3, #8]
 80180e0:	2240      	movs	r2, #64	@ 0x40
 80180e2:	4013      	ands	r3, r2
 80180e4:	d102      	bne.n	80180ec <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80180e6:	68bb      	ldr	r3, [r7, #8]
 80180e8:	2200      	movs	r2, #0
 80180ea:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80180ec:	68bb      	ldr	r3, [r7, #8]
 80180ee:	781b      	ldrb	r3, [r3, #0]
 80180f0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80180f2:	68bb      	ldr	r3, [r7, #8]
 80180f4:	785b      	ldrb	r3, [r3, #1]
 80180f6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80180f8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80180fa:	68ba      	ldr	r2, [r7, #8]
 80180fc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80180fe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8018100:	68bb      	ldr	r3, [r7, #8]
 8018102:	78db      	ldrb	r3, [r3, #3]
 8018104:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8018106:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8018108:	68bb      	ldr	r3, [r7, #8]
 801810a:	2120      	movs	r1, #32
 801810c:	5c5b      	ldrb	r3, [r3, r1]
 801810e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8018110:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8018112:	68bb      	ldr	r3, [r7, #8]
 8018114:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8018116:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8018118:	68bb      	ldr	r3, [r7, #8]
 801811a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 801811c:	4313      	orrs	r3, r2
 801811e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8018120:	68bb      	ldr	r3, [r7, #8]
 8018122:	685a      	ldr	r2, [r3, #4]
 8018124:	68bb      	ldr	r3, [r7, #8]
 8018126:	699b      	ldr	r3, [r3, #24]
 8018128:	4313      	orrs	r3, r2
 801812a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	22ca      	movs	r2, #202	@ 0xca
 8018132:	625a      	str	r2, [r3, #36]	@ 0x24
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	2253      	movs	r2, #83	@ 0x53
 801813a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 801813c:	68bb      	ldr	r3, [r7, #8]
 801813e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018140:	2380      	movs	r3, #128	@ 0x80
 8018142:	005b      	lsls	r3, r3, #1
 8018144:	429a      	cmp	r2, r3
 8018146:	d14e      	bne.n	80181e6 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8018148:	68fb      	ldr	r3, [r7, #12]
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	689a      	ldr	r2, [r3, #8]
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	495b      	ldr	r1, [pc, #364]	@ (80182c0 <HAL_RTC_SetAlarm_IT+0x284>)
 8018154:	400a      	ands	r2, r1
 8018156:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8018158:	68fb      	ldr	r3, [r7, #12]
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	68db      	ldr	r3, [r3, #12]
 801815e:	22ff      	movs	r2, #255	@ 0xff
 8018160:	401a      	ands	r2, r3
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	4957      	ldr	r1, [pc, #348]	@ (80182c4 <HAL_RTC_SetAlarm_IT+0x288>)
 8018168:	430a      	orrs	r2, r1
 801816a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 801816c:	f7fd fb1e 	bl	80157ac <HAL_GetTick>
 8018170:	0003      	movs	r3, r0
 8018172:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8018174:	e016      	b.n	80181a4 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018176:	f7fd fb19 	bl	80157ac <HAL_GetTick>
 801817a:	0002      	movs	r2, r0
 801817c:	697b      	ldr	r3, [r7, #20]
 801817e:	1ad2      	subs	r2, r2, r3
 8018180:	23fa      	movs	r3, #250	@ 0xfa
 8018182:	009b      	lsls	r3, r3, #2
 8018184:	429a      	cmp	r2, r3
 8018186:	d90d      	bls.n	80181a4 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	22ff      	movs	r2, #255	@ 0xff
 801818e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8018190:	68fb      	ldr	r3, [r7, #12]
 8018192:	2221      	movs	r2, #33	@ 0x21
 8018194:	2103      	movs	r1, #3
 8018196:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	2220      	movs	r2, #32
 801819c:	2100      	movs	r1, #0
 801819e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80181a0:	2303      	movs	r3, #3
 80181a2:	e089      	b.n	80182b8 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	68db      	ldr	r3, [r3, #12]
 80181aa:	2201      	movs	r2, #1
 80181ac:	4013      	ands	r3, r2
 80181ae:	d0e2      	beq.n	8018176 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	69fa      	ldr	r2, [r7, #28]
 80181b6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80181b8:	68fb      	ldr	r3, [r7, #12]
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	69ba      	ldr	r2, [r7, #24]
 80181be:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80181c0:	68fb      	ldr	r3, [r7, #12]
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	689a      	ldr	r2, [r3, #8]
 80181c6:	68fb      	ldr	r3, [r7, #12]
 80181c8:	681b      	ldr	r3, [r3, #0]
 80181ca:	2180      	movs	r1, #128	@ 0x80
 80181cc:	0049      	lsls	r1, r1, #1
 80181ce:	430a      	orrs	r2, r1
 80181d0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80181d2:	68fb      	ldr	r3, [r7, #12]
 80181d4:	681b      	ldr	r3, [r3, #0]
 80181d6:	689a      	ldr	r2, [r3, #8]
 80181d8:	68fb      	ldr	r3, [r7, #12]
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	2180      	movs	r1, #128	@ 0x80
 80181de:	0149      	lsls	r1, r1, #5
 80181e0:	430a      	orrs	r2, r1
 80181e2:	609a      	str	r2, [r3, #8]
 80181e4:	e04d      	b.n	8018282 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80181e6:	68fb      	ldr	r3, [r7, #12]
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	689a      	ldr	r2, [r3, #8]
 80181ec:	68fb      	ldr	r3, [r7, #12]
 80181ee:	681b      	ldr	r3, [r3, #0]
 80181f0:	4935      	ldr	r1, [pc, #212]	@ (80182c8 <HAL_RTC_SetAlarm_IT+0x28c>)
 80181f2:	400a      	ands	r2, r1
 80181f4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80181f6:	68fb      	ldr	r3, [r7, #12]
 80181f8:	681b      	ldr	r3, [r3, #0]
 80181fa:	68db      	ldr	r3, [r3, #12]
 80181fc:	22ff      	movs	r2, #255	@ 0xff
 80181fe:	401a      	ands	r2, r3
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	4931      	ldr	r1, [pc, #196]	@ (80182cc <HAL_RTC_SetAlarm_IT+0x290>)
 8018206:	430a      	orrs	r2, r1
 8018208:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 801820a:	f7fd facf 	bl	80157ac <HAL_GetTick>
 801820e:	0003      	movs	r3, r0
 8018210:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8018212:	e016      	b.n	8018242 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018214:	f7fd faca 	bl	80157ac <HAL_GetTick>
 8018218:	0002      	movs	r2, r0
 801821a:	697b      	ldr	r3, [r7, #20]
 801821c:	1ad2      	subs	r2, r2, r3
 801821e:	23fa      	movs	r3, #250	@ 0xfa
 8018220:	009b      	lsls	r3, r3, #2
 8018222:	429a      	cmp	r2, r3
 8018224:	d90d      	bls.n	8018242 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018226:	68fb      	ldr	r3, [r7, #12]
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	22ff      	movs	r2, #255	@ 0xff
 801822c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801822e:	68fb      	ldr	r3, [r7, #12]
 8018230:	2221      	movs	r2, #33	@ 0x21
 8018232:	2103      	movs	r1, #3
 8018234:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8018236:	68fb      	ldr	r3, [r7, #12]
 8018238:	2220      	movs	r2, #32
 801823a:	2100      	movs	r1, #0
 801823c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801823e:	2303      	movs	r3, #3
 8018240:	e03a      	b.n	80182b8 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8018242:	68fb      	ldr	r3, [r7, #12]
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	68db      	ldr	r3, [r3, #12]
 8018248:	2202      	movs	r2, #2
 801824a:	4013      	ands	r3, r2
 801824c:	d0e2      	beq.n	8018214 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 801824e:	68fb      	ldr	r3, [r7, #12]
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	69fa      	ldr	r2, [r7, #28]
 8018254:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8018256:	68fb      	ldr	r3, [r7, #12]
 8018258:	681b      	ldr	r3, [r3, #0]
 801825a:	69ba      	ldr	r2, [r7, #24]
 801825c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	689a      	ldr	r2, [r3, #8]
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	2180      	movs	r1, #128	@ 0x80
 801826a:	0089      	lsls	r1, r1, #2
 801826c:	430a      	orrs	r2, r1
 801826e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8018270:	68fb      	ldr	r3, [r7, #12]
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	689a      	ldr	r2, [r3, #8]
 8018276:	68fb      	ldr	r3, [r7, #12]
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	2180      	movs	r1, #128	@ 0x80
 801827c:	0189      	lsls	r1, r1, #6
 801827e:	430a      	orrs	r2, r1
 8018280:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8018282:	4b13      	ldr	r3, [pc, #76]	@ (80182d0 <HAL_RTC_SetAlarm_IT+0x294>)
 8018284:	681a      	ldr	r2, [r3, #0]
 8018286:	4b12      	ldr	r3, [pc, #72]	@ (80182d0 <HAL_RTC_SetAlarm_IT+0x294>)
 8018288:	2180      	movs	r1, #128	@ 0x80
 801828a:	0289      	lsls	r1, r1, #10
 801828c:	430a      	orrs	r2, r1
 801828e:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8018290:	4b0f      	ldr	r3, [pc, #60]	@ (80182d0 <HAL_RTC_SetAlarm_IT+0x294>)
 8018292:	689a      	ldr	r2, [r3, #8]
 8018294:	4b0e      	ldr	r3, [pc, #56]	@ (80182d0 <HAL_RTC_SetAlarm_IT+0x294>)
 8018296:	2180      	movs	r1, #128	@ 0x80
 8018298:	0289      	lsls	r1, r1, #10
 801829a:	430a      	orrs	r2, r1
 801829c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801829e:	68fb      	ldr	r3, [r7, #12]
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	22ff      	movs	r2, #255	@ 0xff
 80182a4:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80182a6:	68fb      	ldr	r3, [r7, #12]
 80182a8:	2221      	movs	r2, #33	@ 0x21
 80182aa:	2101      	movs	r1, #1
 80182ac:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80182ae:	68fb      	ldr	r3, [r7, #12]
 80182b0:	2220      	movs	r2, #32
 80182b2:	2100      	movs	r1, #0
 80182b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80182b6:	2300      	movs	r3, #0
}
 80182b8:	0018      	movs	r0, r3
 80182ba:	46bd      	mov	sp, r7
 80182bc:	b009      	add	sp, #36	@ 0x24
 80182be:	bd90      	pop	{r4, r7, pc}
 80182c0:	fffffeff 	.word	0xfffffeff
 80182c4:	fffffe7f 	.word	0xfffffe7f
 80182c8:	fffffdff 	.word	0xfffffdff
 80182cc:	fffffd7f 	.word	0xfffffd7f
 80182d0:	40010400 	.word	0x40010400

080182d4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80182d4:	b580      	push	{r7, lr}
 80182d6:	b084      	sub	sp, #16
 80182d8:	af00      	add	r7, sp, #0
 80182da:	6078      	str	r0, [r7, #4]
 80182dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	2220      	movs	r2, #32
 80182e2:	5c9b      	ldrb	r3, [r3, r2]
 80182e4:	2b01      	cmp	r3, #1
 80182e6:	d101      	bne.n	80182ec <HAL_RTC_DeactivateAlarm+0x18>
 80182e8:	2302      	movs	r3, #2
 80182ea:	e086      	b.n	80183fa <HAL_RTC_DeactivateAlarm+0x126>
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	2220      	movs	r2, #32
 80182f0:	2101      	movs	r1, #1
 80182f2:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	2221      	movs	r2, #33	@ 0x21
 80182f8:	2102      	movs	r1, #2
 80182fa:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	22ca      	movs	r2, #202	@ 0xca
 8018302:	625a      	str	r2, [r3, #36]	@ 0x24
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	2253      	movs	r2, #83	@ 0x53
 801830a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 801830c:	683a      	ldr	r2, [r7, #0]
 801830e:	2380      	movs	r3, #128	@ 0x80
 8018310:	005b      	lsls	r3, r3, #1
 8018312:	429a      	cmp	r2, r3
 8018314:	d132      	bne.n	801837c <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	689a      	ldr	r2, [r3, #8]
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	4938      	ldr	r1, [pc, #224]	@ (8018404 <HAL_RTC_DeactivateAlarm+0x130>)
 8018322:	400a      	ands	r2, r1
 8018324:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	689a      	ldr	r2, [r3, #8]
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	4935      	ldr	r1, [pc, #212]	@ (8018408 <HAL_RTC_DeactivateAlarm+0x134>)
 8018332:	400a      	ands	r2, r1
 8018334:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8018336:	f7fd fa39 	bl	80157ac <HAL_GetTick>
 801833a:	0003      	movs	r3, r0
 801833c:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 801833e:	e016      	b.n	801836e <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8018340:	f7fd fa34 	bl	80157ac <HAL_GetTick>
 8018344:	0002      	movs	r2, r0
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	1ad2      	subs	r2, r2, r3
 801834a:	23fa      	movs	r3, #250	@ 0xfa
 801834c:	009b      	lsls	r3, r3, #2
 801834e:	429a      	cmp	r2, r3
 8018350:	d90d      	bls.n	801836e <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	22ff      	movs	r2, #255	@ 0xff
 8018358:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	2221      	movs	r2, #33	@ 0x21
 801835e:	2103      	movs	r1, #3
 8018360:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	2220      	movs	r2, #32
 8018366:	2100      	movs	r1, #0
 8018368:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801836a:	2303      	movs	r3, #3
 801836c:	e045      	b.n	80183fa <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	68db      	ldr	r3, [r3, #12]
 8018374:	2201      	movs	r2, #1
 8018376:	4013      	ands	r3, r2
 8018378:	d0e2      	beq.n	8018340 <HAL_RTC_DeactivateAlarm+0x6c>
 801837a:	e031      	b.n	80183e0 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	689a      	ldr	r2, [r3, #8]
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	4921      	ldr	r1, [pc, #132]	@ (801840c <HAL_RTC_DeactivateAlarm+0x138>)
 8018388:	400a      	ands	r2, r1
 801838a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	689a      	ldr	r2, [r3, #8]
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	491e      	ldr	r1, [pc, #120]	@ (8018410 <HAL_RTC_DeactivateAlarm+0x13c>)
 8018398:	400a      	ands	r2, r1
 801839a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 801839c:	f7fd fa06 	bl	80157ac <HAL_GetTick>
 80183a0:	0003      	movs	r3, r0
 80183a2:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80183a4:	e016      	b.n	80183d4 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80183a6:	f7fd fa01 	bl	80157ac <HAL_GetTick>
 80183aa:	0002      	movs	r2, r0
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	1ad2      	subs	r2, r2, r3
 80183b0:	23fa      	movs	r3, #250	@ 0xfa
 80183b2:	009b      	lsls	r3, r3, #2
 80183b4:	429a      	cmp	r2, r3
 80183b6:	d90d      	bls.n	80183d4 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	681b      	ldr	r3, [r3, #0]
 80183bc:	22ff      	movs	r2, #255	@ 0xff
 80183be:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	2221      	movs	r2, #33	@ 0x21
 80183c4:	2103      	movs	r1, #3
 80183c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	2220      	movs	r2, #32
 80183cc:	2100      	movs	r1, #0
 80183ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80183d0:	2303      	movs	r3, #3
 80183d2:	e012      	b.n	80183fa <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	68db      	ldr	r3, [r3, #12]
 80183da:	2202      	movs	r2, #2
 80183dc:	4013      	ands	r3, r2
 80183de:	d0e2      	beq.n	80183a6 <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	22ff      	movs	r2, #255	@ 0xff
 80183e6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	2221      	movs	r2, #33	@ 0x21
 80183ec:	2101      	movs	r1, #1
 80183ee:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	2220      	movs	r2, #32
 80183f4:	2100      	movs	r1, #0
 80183f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80183f8:	2300      	movs	r3, #0
}
 80183fa:	0018      	movs	r0, r3
 80183fc:	46bd      	mov	sp, r7
 80183fe:	b004      	add	sp, #16
 8018400:	bd80      	pop	{r7, pc}
 8018402:	46c0      	nop			@ (mov r8, r8)
 8018404:	fffffeff 	.word	0xfffffeff
 8018408:	ffffefff 	.word	0xffffefff
 801840c:	fffffdff 	.word	0xfffffdff
 8018410:	ffffdfff 	.word	0xffffdfff

08018414 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8018414:	b580      	push	{r7, lr}
 8018416:	b084      	sub	sp, #16
 8018418:	af00      	add	r7, sp, #0
 801841a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	68da      	ldr	r2, [r3, #12]
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	21a0      	movs	r1, #160	@ 0xa0
 8018428:	438a      	bics	r2, r1
 801842a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 801842c:	f7fd f9be 	bl	80157ac <HAL_GetTick>
 8018430:	0003      	movs	r3, r0
 8018432:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8018434:	e00a      	b.n	801844c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018436:	f7fd f9b9 	bl	80157ac <HAL_GetTick>
 801843a:	0002      	movs	r2, r0
 801843c:	68fb      	ldr	r3, [r7, #12]
 801843e:	1ad2      	subs	r2, r2, r3
 8018440:	23fa      	movs	r3, #250	@ 0xfa
 8018442:	009b      	lsls	r3, r3, #2
 8018444:	429a      	cmp	r2, r3
 8018446:	d901      	bls.n	801844c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8018448:	2303      	movs	r3, #3
 801844a:	e006      	b.n	801845a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	68db      	ldr	r3, [r3, #12]
 8018452:	2220      	movs	r2, #32
 8018454:	4013      	ands	r3, r2
 8018456:	d0ee      	beq.n	8018436 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8018458:	2300      	movs	r3, #0
}
 801845a:	0018      	movs	r0, r3
 801845c:	46bd      	mov	sp, r7
 801845e:	b004      	add	sp, #16
 8018460:	bd80      	pop	{r7, pc}

08018462 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8018462:	b580      	push	{r7, lr}
 8018464:	b084      	sub	sp, #16
 8018466:	af00      	add	r7, sp, #0
 8018468:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	68db      	ldr	r3, [r3, #12]
 8018470:	2240      	movs	r2, #64	@ 0x40
 8018472:	4013      	ands	r3, r2
 8018474:	d11a      	bne.n	80184ac <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	2201      	movs	r2, #1
 801847c:	4252      	negs	r2, r2
 801847e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8018480:	f7fd f994 	bl	80157ac <HAL_GetTick>
 8018484:	0003      	movs	r3, r0
 8018486:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8018488:	e00a      	b.n	80184a0 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 801848a:	f7fd f98f 	bl	80157ac <HAL_GetTick>
 801848e:	0002      	movs	r2, r0
 8018490:	68fb      	ldr	r3, [r7, #12]
 8018492:	1ad2      	subs	r2, r2, r3
 8018494:	23fa      	movs	r3, #250	@ 0xfa
 8018496:	009b      	lsls	r3, r3, #2
 8018498:	429a      	cmp	r2, r3
 801849a:	d901      	bls.n	80184a0 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 801849c:	2303      	movs	r3, #3
 801849e:	e006      	b.n	80184ae <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	68db      	ldr	r3, [r3, #12]
 80184a6:	2240      	movs	r2, #64	@ 0x40
 80184a8:	4013      	ands	r3, r2
 80184aa:	d0ee      	beq.n	801848a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80184ac:	2300      	movs	r3, #0
}
 80184ae:	0018      	movs	r0, r3
 80184b0:	46bd      	mov	sp, r7
 80184b2:	b004      	add	sp, #16
 80184b4:	bd80      	pop	{r7, pc}

080184b6 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80184b6:	b580      	push	{r7, lr}
 80184b8:	b084      	sub	sp, #16
 80184ba:	af00      	add	r7, sp, #0
 80184bc:	0002      	movs	r2, r0
 80184be:	1dfb      	adds	r3, r7, #7
 80184c0:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80184c2:	2300      	movs	r3, #0
 80184c4:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80184c6:	230b      	movs	r3, #11
 80184c8:	18fb      	adds	r3, r7, r3
 80184ca:	1dfa      	adds	r2, r7, #7
 80184cc:	7812      	ldrb	r2, [r2, #0]
 80184ce:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80184d0:	e008      	b.n	80184e4 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80184d2:	68fb      	ldr	r3, [r7, #12]
 80184d4:	3301      	adds	r3, #1
 80184d6:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80184d8:	220b      	movs	r2, #11
 80184da:	18bb      	adds	r3, r7, r2
 80184dc:	18ba      	adds	r2, r7, r2
 80184de:	7812      	ldrb	r2, [r2, #0]
 80184e0:	3a0a      	subs	r2, #10
 80184e2:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 80184e4:	210b      	movs	r1, #11
 80184e6:	187b      	adds	r3, r7, r1
 80184e8:	781b      	ldrb	r3, [r3, #0]
 80184ea:	2b09      	cmp	r3, #9
 80184ec:	d8f1      	bhi.n	80184d2 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80184ee:	68fb      	ldr	r3, [r7, #12]
 80184f0:	b2db      	uxtb	r3, r3
 80184f2:	011b      	lsls	r3, r3, #4
 80184f4:	b2da      	uxtb	r2, r3
 80184f6:	187b      	adds	r3, r7, r1
 80184f8:	781b      	ldrb	r3, [r3, #0]
 80184fa:	4313      	orrs	r3, r2
 80184fc:	b2db      	uxtb	r3, r3
}
 80184fe:	0018      	movs	r0, r3
 8018500:	46bd      	mov	sp, r7
 8018502:	b004      	add	sp, #16
 8018504:	bd80      	pop	{r7, pc}

08018506 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8018506:	b580      	push	{r7, lr}
 8018508:	b084      	sub	sp, #16
 801850a:	af00      	add	r7, sp, #0
 801850c:	0002      	movs	r2, r0
 801850e:	1dfb      	adds	r3, r7, #7
 8018510:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8018512:	1dfb      	adds	r3, r7, #7
 8018514:	781b      	ldrb	r3, [r3, #0]
 8018516:	091b      	lsrs	r3, r3, #4
 8018518:	b2db      	uxtb	r3, r3
 801851a:	001a      	movs	r2, r3
 801851c:	0013      	movs	r3, r2
 801851e:	009b      	lsls	r3, r3, #2
 8018520:	189b      	adds	r3, r3, r2
 8018522:	005b      	lsls	r3, r3, #1
 8018524:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	b2da      	uxtb	r2, r3
 801852a:	1dfb      	adds	r3, r7, #7
 801852c:	781b      	ldrb	r3, [r3, #0]
 801852e:	210f      	movs	r1, #15
 8018530:	400b      	ands	r3, r1
 8018532:	b2db      	uxtb	r3, r3
 8018534:	18d3      	adds	r3, r2, r3
 8018536:	b2db      	uxtb	r3, r3
}
 8018538:	0018      	movs	r0, r3
 801853a:	46bd      	mov	sp, r7
 801853c:	b004      	add	sp, #16
 801853e:	bd80      	pop	{r7, pc}

08018540 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8018540:	b580      	push	{r7, lr}
 8018542:	b086      	sub	sp, #24
 8018544:	af00      	add	r7, sp, #0
 8018546:	60f8      	str	r0, [r7, #12]
 8018548:	60b9      	str	r1, [r7, #8]
 801854a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	3350      	adds	r3, #80	@ 0x50
 8018552:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8018554:	68bb      	ldr	r3, [r7, #8]
 8018556:	009b      	lsls	r3, r3, #2
 8018558:	697a      	ldr	r2, [r7, #20]
 801855a:	18d3      	adds	r3, r2, r3
 801855c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801855e:	697b      	ldr	r3, [r7, #20]
 8018560:	687a      	ldr	r2, [r7, #4]
 8018562:	601a      	str	r2, [r3, #0]
}
 8018564:	46c0      	nop			@ (mov r8, r8)
 8018566:	46bd      	mov	sp, r7
 8018568:	b006      	add	sp, #24
 801856a:	bd80      	pop	{r7, pc}

0801856c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801856c:	b580      	push	{r7, lr}
 801856e:	b084      	sub	sp, #16
 8018570:	af00      	add	r7, sp, #0
 8018572:	6078      	str	r0, [r7, #4]
 8018574:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	3350      	adds	r3, #80	@ 0x50
 801857c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801857e:	683b      	ldr	r3, [r7, #0]
 8018580:	009b      	lsls	r3, r3, #2
 8018582:	68fa      	ldr	r2, [r7, #12]
 8018584:	18d3      	adds	r3, r2, r3
 8018586:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	681b      	ldr	r3, [r3, #0]
}
 801858c:	0018      	movs	r0, r3
 801858e:	46bd      	mov	sp, r7
 8018590:	b004      	add	sp, #16
 8018592:	bd80      	pop	{r7, pc}

08018594 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8018594:	b580      	push	{r7, lr}
 8018596:	b082      	sub	sp, #8
 8018598:	af00      	add	r7, sp, #0
 801859a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	2220      	movs	r2, #32
 80185a0:	5c9b      	ldrb	r3, [r3, r2]
 80185a2:	2b01      	cmp	r3, #1
 80185a4:	d101      	bne.n	80185aa <HAL_RTCEx_EnableBypassShadow+0x16>
 80185a6:	2302      	movs	r3, #2
 80185a8:	e024      	b.n	80185f4 <HAL_RTCEx_EnableBypassShadow+0x60>
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	2220      	movs	r2, #32
 80185ae:	2101      	movs	r1, #1
 80185b0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	2221      	movs	r2, #33	@ 0x21
 80185b6:	2102      	movs	r1, #2
 80185b8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	22ca      	movs	r2, #202	@ 0xca
 80185c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	2253      	movs	r2, #83	@ 0x53
 80185c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	689a      	ldr	r2, [r3, #8]
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	2120      	movs	r1, #32
 80185d6:	430a      	orrs	r2, r1
 80185d8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	22ff      	movs	r2, #255	@ 0xff
 80185e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	2221      	movs	r2, #33	@ 0x21
 80185e6:	2101      	movs	r1, #1
 80185e8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	2220      	movs	r2, #32
 80185ee:	2100      	movs	r1, #0
 80185f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80185f2:	2300      	movs	r3, #0
}
 80185f4:	0018      	movs	r0, r3
 80185f6:	46bd      	mov	sp, r7
 80185f8:	b002      	add	sp, #8
 80185fa:	bd80      	pop	{r7, pc}

080185fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80185fc:	b580      	push	{r7, lr}
 80185fe:	b082      	sub	sp, #8
 8018600:	af00      	add	r7, sp, #0
 8018602:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	2b00      	cmp	r3, #0
 8018608:	d101      	bne.n	801860e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801860a:	2301      	movs	r3, #1
 801860c:	e059      	b.n	80186c2 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	2200      	movs	r2, #0
 8018612:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	2251      	movs	r2, #81	@ 0x51
 8018618:	5c9b      	ldrb	r3, [r3, r2]
 801861a:	b2db      	uxtb	r3, r3
 801861c:	2b00      	cmp	r3, #0
 801861e:	d107      	bne.n	8018630 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	2250      	movs	r2, #80	@ 0x50
 8018624:	2100      	movs	r1, #0
 8018626:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	0018      	movs	r0, r3
 801862c:	f000 f850 	bl	80186d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	2251      	movs	r2, #81	@ 0x51
 8018634:	2102      	movs	r1, #2
 8018636:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	681a      	ldr	r2, [r3, #0]
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	2140      	movs	r1, #64	@ 0x40
 8018644:	438a      	bics	r2, r1
 8018646:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	685a      	ldr	r2, [r3, #4]
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	689b      	ldr	r3, [r3, #8]
 8018650:	431a      	orrs	r2, r3
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	68db      	ldr	r3, [r3, #12]
 8018656:	431a      	orrs	r2, r3
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	691b      	ldr	r3, [r3, #16]
 801865c:	431a      	orrs	r2, r3
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	695b      	ldr	r3, [r3, #20]
 8018662:	431a      	orrs	r2, r3
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	6999      	ldr	r1, [r3, #24]
 8018668:	2380      	movs	r3, #128	@ 0x80
 801866a:	009b      	lsls	r3, r3, #2
 801866c:	400b      	ands	r3, r1
 801866e:	431a      	orrs	r2, r3
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	69db      	ldr	r3, [r3, #28]
 8018674:	431a      	orrs	r2, r3
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	6a1b      	ldr	r3, [r3, #32]
 801867a:	431a      	orrs	r2, r3
 801867c:	0011      	movs	r1, r2
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	430a      	orrs	r2, r1
 8018688:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	699b      	ldr	r3, [r3, #24]
 801868e:	0c1b      	lsrs	r3, r3, #16
 8018690:	2204      	movs	r2, #4
 8018692:	4013      	ands	r3, r2
 8018694:	0019      	movs	r1, r3
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	681b      	ldr	r3, [r3, #0]
 801869e:	430a      	orrs	r2, r1
 80186a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	69da      	ldr	r2, [r3, #28]
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	681b      	ldr	r3, [r3, #0]
 80186ac:	4907      	ldr	r1, [pc, #28]	@ (80186cc <HAL_SPI_Init+0xd0>)
 80186ae:	400a      	ands	r2, r1
 80186b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	2200      	movs	r2, #0
 80186b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	2251      	movs	r2, #81	@ 0x51
 80186bc:	2101      	movs	r1, #1
 80186be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80186c0:	2300      	movs	r3, #0
}
 80186c2:	0018      	movs	r0, r3
 80186c4:	46bd      	mov	sp, r7
 80186c6:	b002      	add	sp, #8
 80186c8:	bd80      	pop	{r7, pc}
 80186ca:	46c0      	nop			@ (mov r8, r8)
 80186cc:	fffff7ff 	.word	0xfffff7ff

080186d0 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80186d0:	b580      	push	{r7, lr}
 80186d2:	b082      	sub	sp, #8
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80186d8:	46c0      	nop			@ (mov r8, r8)
 80186da:	46bd      	mov	sp, r7
 80186dc:	b002      	add	sp, #8
 80186de:	bd80      	pop	{r7, pc}

080186e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80186e0:	b580      	push	{r7, lr}
 80186e2:	b08c      	sub	sp, #48	@ 0x30
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	60f8      	str	r0, [r7, #12]
 80186e8:	60b9      	str	r1, [r7, #8]
 80186ea:	607a      	str	r2, [r7, #4]
 80186ec:	001a      	movs	r2, r3
 80186ee:	1cbb      	adds	r3, r7, #2
 80186f0:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80186f2:	2301      	movs	r3, #1
 80186f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80186f6:	232b      	movs	r3, #43	@ 0x2b
 80186f8:	18fb      	adds	r3, r7, r3
 80186fa:	2200      	movs	r2, #0
 80186fc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	2250      	movs	r2, #80	@ 0x50
 8018702:	5c9b      	ldrb	r3, [r3, r2]
 8018704:	2b01      	cmp	r3, #1
 8018706:	d101      	bne.n	801870c <HAL_SPI_TransmitReceive+0x2c>
 8018708:	2302      	movs	r3, #2
 801870a:	e1a0      	b.n	8018a4e <HAL_SPI_TransmitReceive+0x36e>
 801870c:	68fb      	ldr	r3, [r7, #12]
 801870e:	2250      	movs	r2, #80	@ 0x50
 8018710:	2101      	movs	r1, #1
 8018712:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8018714:	f7fd f84a 	bl	80157ac <HAL_GetTick>
 8018718:	0003      	movs	r3, r0
 801871a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801871c:	2023      	movs	r0, #35	@ 0x23
 801871e:	183b      	adds	r3, r7, r0
 8018720:	68fa      	ldr	r2, [r7, #12]
 8018722:	2151      	movs	r1, #81	@ 0x51
 8018724:	5c52      	ldrb	r2, [r2, r1]
 8018726:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	685b      	ldr	r3, [r3, #4]
 801872c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801872e:	231a      	movs	r3, #26
 8018730:	18fb      	adds	r3, r7, r3
 8018732:	1cba      	adds	r2, r7, #2
 8018734:	8812      	ldrh	r2, [r2, #0]
 8018736:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8018738:	183b      	adds	r3, r7, r0
 801873a:	781b      	ldrb	r3, [r3, #0]
 801873c:	2b01      	cmp	r3, #1
 801873e:	d011      	beq.n	8018764 <HAL_SPI_TransmitReceive+0x84>
 8018740:	69fa      	ldr	r2, [r7, #28]
 8018742:	2382      	movs	r3, #130	@ 0x82
 8018744:	005b      	lsls	r3, r3, #1
 8018746:	429a      	cmp	r2, r3
 8018748:	d107      	bne.n	801875a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801874a:	68fb      	ldr	r3, [r7, #12]
 801874c:	689b      	ldr	r3, [r3, #8]
 801874e:	2b00      	cmp	r3, #0
 8018750:	d103      	bne.n	801875a <HAL_SPI_TransmitReceive+0x7a>
 8018752:	183b      	adds	r3, r7, r0
 8018754:	781b      	ldrb	r3, [r3, #0]
 8018756:	2b04      	cmp	r3, #4
 8018758:	d004      	beq.n	8018764 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 801875a:	232b      	movs	r3, #43	@ 0x2b
 801875c:	18fb      	adds	r3, r7, r3
 801875e:	2202      	movs	r2, #2
 8018760:	701a      	strb	r2, [r3, #0]
    goto error;
 8018762:	e169      	b.n	8018a38 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8018764:	68bb      	ldr	r3, [r7, #8]
 8018766:	2b00      	cmp	r3, #0
 8018768:	d006      	beq.n	8018778 <HAL_SPI_TransmitReceive+0x98>
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	2b00      	cmp	r3, #0
 801876e:	d003      	beq.n	8018778 <HAL_SPI_TransmitReceive+0x98>
 8018770:	1cbb      	adds	r3, r7, #2
 8018772:	881b      	ldrh	r3, [r3, #0]
 8018774:	2b00      	cmp	r3, #0
 8018776:	d104      	bne.n	8018782 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8018778:	232b      	movs	r3, #43	@ 0x2b
 801877a:	18fb      	adds	r3, r7, r3
 801877c:	2201      	movs	r2, #1
 801877e:	701a      	strb	r2, [r3, #0]
    goto error;
 8018780:	e15a      	b.n	8018a38 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8018782:	68fb      	ldr	r3, [r7, #12]
 8018784:	2251      	movs	r2, #81	@ 0x51
 8018786:	5c9b      	ldrb	r3, [r3, r2]
 8018788:	b2db      	uxtb	r3, r3
 801878a:	2b04      	cmp	r3, #4
 801878c:	d003      	beq.n	8018796 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	2251      	movs	r2, #81	@ 0x51
 8018792:	2105      	movs	r1, #5
 8018794:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8018796:	68fb      	ldr	r3, [r7, #12]
 8018798:	2200      	movs	r2, #0
 801879a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	687a      	ldr	r2, [r7, #4]
 80187a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80187a2:	68fb      	ldr	r3, [r7, #12]
 80187a4:	1cba      	adds	r2, r7, #2
 80187a6:	8812      	ldrh	r2, [r2, #0]
 80187a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80187aa:	68fb      	ldr	r3, [r7, #12]
 80187ac:	1cba      	adds	r2, r7, #2
 80187ae:	8812      	ldrh	r2, [r2, #0]
 80187b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80187b2:	68fb      	ldr	r3, [r7, #12]
 80187b4:	68ba      	ldr	r2, [r7, #8]
 80187b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	1cba      	adds	r2, r7, #2
 80187bc:	8812      	ldrh	r2, [r2, #0]
 80187be:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	1cba      	adds	r2, r7, #2
 80187c4:	8812      	ldrh	r2, [r2, #0]
 80187c6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80187c8:	68fb      	ldr	r3, [r7, #12]
 80187ca:	2200      	movs	r2, #0
 80187cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80187ce:	68fb      	ldr	r3, [r7, #12]
 80187d0:	2200      	movs	r2, #0
 80187d2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	681b      	ldr	r3, [r3, #0]
 80187da:	2240      	movs	r2, #64	@ 0x40
 80187dc:	4013      	ands	r3, r2
 80187de:	2b40      	cmp	r3, #64	@ 0x40
 80187e0:	d007      	beq.n	80187f2 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80187e2:	68fb      	ldr	r3, [r7, #12]
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	681a      	ldr	r2, [r3, #0]
 80187e8:	68fb      	ldr	r3, [r7, #12]
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	2140      	movs	r1, #64	@ 0x40
 80187ee:	430a      	orrs	r2, r1
 80187f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80187f2:	68fb      	ldr	r3, [r7, #12]
 80187f4:	68da      	ldr	r2, [r3, #12]
 80187f6:	2380      	movs	r3, #128	@ 0x80
 80187f8:	011b      	lsls	r3, r3, #4
 80187fa:	429a      	cmp	r2, r3
 80187fc:	d000      	beq.n	8018800 <HAL_SPI_TransmitReceive+0x120>
 80187fe:	e07a      	b.n	80188f6 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8018800:	68fb      	ldr	r3, [r7, #12]
 8018802:	685b      	ldr	r3, [r3, #4]
 8018804:	2b00      	cmp	r3, #0
 8018806:	d004      	beq.n	8018812 <HAL_SPI_TransmitReceive+0x132>
 8018808:	231a      	movs	r3, #26
 801880a:	18fb      	adds	r3, r7, r3
 801880c:	881b      	ldrh	r3, [r3, #0]
 801880e:	2b01      	cmp	r3, #1
 8018810:	d166      	bne.n	80188e0 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8018812:	68fb      	ldr	r3, [r7, #12]
 8018814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018816:	881a      	ldrh	r2, [r3, #0]
 8018818:	68fb      	ldr	r3, [r7, #12]
 801881a:	681b      	ldr	r3, [r3, #0]
 801881c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018822:	1c9a      	adds	r2, r3, #2
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801882c:	b29b      	uxth	r3, r3
 801882e:	3b01      	subs	r3, #1
 8018830:	b29a      	uxth	r2, r3
 8018832:	68fb      	ldr	r3, [r7, #12]
 8018834:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8018836:	e053      	b.n	80188e0 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8018838:	68fb      	ldr	r3, [r7, #12]
 801883a:	681b      	ldr	r3, [r3, #0]
 801883c:	689b      	ldr	r3, [r3, #8]
 801883e:	2202      	movs	r2, #2
 8018840:	4013      	ands	r3, r2
 8018842:	2b02      	cmp	r3, #2
 8018844:	d11b      	bne.n	801887e <HAL_SPI_TransmitReceive+0x19e>
 8018846:	68fb      	ldr	r3, [r7, #12]
 8018848:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801884a:	b29b      	uxth	r3, r3
 801884c:	2b00      	cmp	r3, #0
 801884e:	d016      	beq.n	801887e <HAL_SPI_TransmitReceive+0x19e>
 8018850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018852:	2b01      	cmp	r3, #1
 8018854:	d113      	bne.n	801887e <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8018856:	68fb      	ldr	r3, [r7, #12]
 8018858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801885a:	881a      	ldrh	r2, [r3, #0]
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8018862:	68fb      	ldr	r3, [r7, #12]
 8018864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018866:	1c9a      	adds	r2, r3, #2
 8018868:	68fb      	ldr	r3, [r7, #12]
 801886a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 801886c:	68fb      	ldr	r3, [r7, #12]
 801886e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8018870:	b29b      	uxth	r3, r3
 8018872:	3b01      	subs	r3, #1
 8018874:	b29a      	uxth	r2, r3
 8018876:	68fb      	ldr	r3, [r7, #12]
 8018878:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801887a:	2300      	movs	r3, #0
 801887c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801887e:	68fb      	ldr	r3, [r7, #12]
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	689b      	ldr	r3, [r3, #8]
 8018884:	2201      	movs	r2, #1
 8018886:	4013      	ands	r3, r2
 8018888:	2b01      	cmp	r3, #1
 801888a:	d119      	bne.n	80188c0 <HAL_SPI_TransmitReceive+0x1e0>
 801888c:	68fb      	ldr	r3, [r7, #12]
 801888e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8018890:	b29b      	uxth	r3, r3
 8018892:	2b00      	cmp	r3, #0
 8018894:	d014      	beq.n	80188c0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	68da      	ldr	r2, [r3, #12]
 801889c:	68fb      	ldr	r3, [r7, #12]
 801889e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80188a0:	b292      	uxth	r2, r2
 80188a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80188a4:	68fb      	ldr	r3, [r7, #12]
 80188a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80188a8:	1c9a      	adds	r2, r3, #2
 80188aa:	68fb      	ldr	r3, [r7, #12]
 80188ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80188ae:	68fb      	ldr	r3, [r7, #12]
 80188b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80188b2:	b29b      	uxth	r3, r3
 80188b4:	3b01      	subs	r3, #1
 80188b6:	b29a      	uxth	r2, r3
 80188b8:	68fb      	ldr	r3, [r7, #12]
 80188ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80188bc:	2301      	movs	r3, #1
 80188be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80188c0:	f7fc ff74 	bl	80157ac <HAL_GetTick>
 80188c4:	0002      	movs	r2, r0
 80188c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188c8:	1ad3      	subs	r3, r2, r3
 80188ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80188cc:	429a      	cmp	r2, r3
 80188ce:	d807      	bhi.n	80188e0 <HAL_SPI_TransmitReceive+0x200>
 80188d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80188d2:	3301      	adds	r3, #1
 80188d4:	d004      	beq.n	80188e0 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 80188d6:	232b      	movs	r3, #43	@ 0x2b
 80188d8:	18fb      	adds	r3, r7, r3
 80188da:	2203      	movs	r2, #3
 80188dc:	701a      	strb	r2, [r3, #0]
        goto error;
 80188de:	e0ab      	b.n	8018a38 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80188e4:	b29b      	uxth	r3, r3
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d1a6      	bne.n	8018838 <HAL_SPI_TransmitReceive+0x158>
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80188ee:	b29b      	uxth	r3, r3
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d1a1      	bne.n	8018838 <HAL_SPI_TransmitReceive+0x158>
 80188f4:	e07f      	b.n	80189f6 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80188f6:	68fb      	ldr	r3, [r7, #12]
 80188f8:	685b      	ldr	r3, [r3, #4]
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d005      	beq.n	801890a <HAL_SPI_TransmitReceive+0x22a>
 80188fe:	231a      	movs	r3, #26
 8018900:	18fb      	adds	r3, r7, r3
 8018902:	881b      	ldrh	r3, [r3, #0]
 8018904:	2b01      	cmp	r3, #1
 8018906:	d000      	beq.n	801890a <HAL_SPI_TransmitReceive+0x22a>
 8018908:	e06b      	b.n	80189e2 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801890a:	68fb      	ldr	r3, [r7, #12]
 801890c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	681b      	ldr	r3, [r3, #0]
 8018912:	330c      	adds	r3, #12
 8018914:	7812      	ldrb	r2, [r2, #0]
 8018916:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8018918:	68fb      	ldr	r3, [r7, #12]
 801891a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801891c:	1c5a      	adds	r2, r3, #1
 801891e:	68fb      	ldr	r3, [r7, #12]
 8018920:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8018926:	b29b      	uxth	r3, r3
 8018928:	3b01      	subs	r3, #1
 801892a:	b29a      	uxth	r2, r3
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8018930:	e057      	b.n	80189e2 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8018932:	68fb      	ldr	r3, [r7, #12]
 8018934:	681b      	ldr	r3, [r3, #0]
 8018936:	689b      	ldr	r3, [r3, #8]
 8018938:	2202      	movs	r2, #2
 801893a:	4013      	ands	r3, r2
 801893c:	2b02      	cmp	r3, #2
 801893e:	d11c      	bne.n	801897a <HAL_SPI_TransmitReceive+0x29a>
 8018940:	68fb      	ldr	r3, [r7, #12]
 8018942:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8018944:	b29b      	uxth	r3, r3
 8018946:	2b00      	cmp	r3, #0
 8018948:	d017      	beq.n	801897a <HAL_SPI_TransmitReceive+0x29a>
 801894a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801894c:	2b01      	cmp	r3, #1
 801894e:	d114      	bne.n	801897a <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	330c      	adds	r3, #12
 801895a:	7812      	ldrb	r2, [r2, #0]
 801895c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018962:	1c5a      	adds	r2, r3, #1
 8018964:	68fb      	ldr	r3, [r7, #12]
 8018966:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8018968:	68fb      	ldr	r3, [r7, #12]
 801896a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801896c:	b29b      	uxth	r3, r3
 801896e:	3b01      	subs	r3, #1
 8018970:	b29a      	uxth	r2, r3
 8018972:	68fb      	ldr	r3, [r7, #12]
 8018974:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8018976:	2300      	movs	r3, #0
 8018978:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	689b      	ldr	r3, [r3, #8]
 8018980:	2201      	movs	r2, #1
 8018982:	4013      	ands	r3, r2
 8018984:	2b01      	cmp	r3, #1
 8018986:	d119      	bne.n	80189bc <HAL_SPI_TransmitReceive+0x2dc>
 8018988:	68fb      	ldr	r3, [r7, #12]
 801898a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801898c:	b29b      	uxth	r3, r3
 801898e:	2b00      	cmp	r3, #0
 8018990:	d014      	beq.n	80189bc <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8018992:	68fb      	ldr	r3, [r7, #12]
 8018994:	681b      	ldr	r3, [r3, #0]
 8018996:	68da      	ldr	r2, [r3, #12]
 8018998:	68fb      	ldr	r3, [r7, #12]
 801899a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801899c:	b2d2      	uxtb	r2, r2
 801899e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80189a0:	68fb      	ldr	r3, [r7, #12]
 80189a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80189a4:	1c5a      	adds	r2, r3, #1
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80189ae:	b29b      	uxth	r3, r3
 80189b0:	3b01      	subs	r3, #1
 80189b2:	b29a      	uxth	r2, r3
 80189b4:	68fb      	ldr	r3, [r7, #12]
 80189b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80189b8:	2301      	movs	r3, #1
 80189ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80189bc:	f7fc fef6 	bl	80157ac <HAL_GetTick>
 80189c0:	0002      	movs	r2, r0
 80189c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189c4:	1ad3      	subs	r3, r2, r3
 80189c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80189c8:	429a      	cmp	r2, r3
 80189ca:	d802      	bhi.n	80189d2 <HAL_SPI_TransmitReceive+0x2f2>
 80189cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80189ce:	3301      	adds	r3, #1
 80189d0:	d102      	bne.n	80189d8 <HAL_SPI_TransmitReceive+0x2f8>
 80189d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d104      	bne.n	80189e2 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 80189d8:	232b      	movs	r3, #43	@ 0x2b
 80189da:	18fb      	adds	r3, r7, r3
 80189dc:	2203      	movs	r2, #3
 80189de:	701a      	strb	r2, [r3, #0]
        goto error;
 80189e0:	e02a      	b.n	8018a38 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80189e2:	68fb      	ldr	r3, [r7, #12]
 80189e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80189e6:	b29b      	uxth	r3, r3
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	d1a2      	bne.n	8018932 <HAL_SPI_TransmitReceive+0x252>
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80189f0:	b29b      	uxth	r3, r3
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d19d      	bne.n	8018932 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80189f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80189f8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80189fa:	68fb      	ldr	r3, [r7, #12]
 80189fc:	0018      	movs	r0, r3
 80189fe:	f000 f89b 	bl	8018b38 <SPI_EndRxTxTransaction>
 8018a02:	1e03      	subs	r3, r0, #0
 8018a04:	d007      	beq.n	8018a16 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8018a06:	232b      	movs	r3, #43	@ 0x2b
 8018a08:	18fb      	adds	r3, r7, r3
 8018a0a:	2201      	movs	r2, #1
 8018a0c:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8018a0e:	68fb      	ldr	r3, [r7, #12]
 8018a10:	2220      	movs	r2, #32
 8018a12:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8018a14:	e010      	b.n	8018a38 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8018a16:	68fb      	ldr	r3, [r7, #12]
 8018a18:	689b      	ldr	r3, [r3, #8]
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d10b      	bne.n	8018a36 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8018a1e:	2300      	movs	r3, #0
 8018a20:	617b      	str	r3, [r7, #20]
 8018a22:	68fb      	ldr	r3, [r7, #12]
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	68db      	ldr	r3, [r3, #12]
 8018a28:	617b      	str	r3, [r7, #20]
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	681b      	ldr	r3, [r3, #0]
 8018a2e:	689b      	ldr	r3, [r3, #8]
 8018a30:	617b      	str	r3, [r7, #20]
 8018a32:	697b      	ldr	r3, [r7, #20]
 8018a34:	e000      	b.n	8018a38 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8018a36:	46c0      	nop			@ (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8018a38:	68fb      	ldr	r3, [r7, #12]
 8018a3a:	2251      	movs	r2, #81	@ 0x51
 8018a3c:	2101      	movs	r1, #1
 8018a3e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	2250      	movs	r2, #80	@ 0x50
 8018a44:	2100      	movs	r1, #0
 8018a46:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8018a48:	232b      	movs	r3, #43	@ 0x2b
 8018a4a:	18fb      	adds	r3, r7, r3
 8018a4c:	781b      	ldrb	r3, [r3, #0]
}
 8018a4e:	0018      	movs	r0, r3
 8018a50:	46bd      	mov	sp, r7
 8018a52:	b00c      	add	sp, #48	@ 0x30
 8018a54:	bd80      	pop	{r7, pc}
	...

08018a58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8018a58:	b580      	push	{r7, lr}
 8018a5a:	b084      	sub	sp, #16
 8018a5c:	af00      	add	r7, sp, #0
 8018a5e:	60f8      	str	r0, [r7, #12]
 8018a60:	60b9      	str	r1, [r7, #8]
 8018a62:	603b      	str	r3, [r7, #0]
 8018a64:	1dfb      	adds	r3, r7, #7
 8018a66:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8018a68:	e050      	b.n	8018b0c <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8018a6a:	683b      	ldr	r3, [r7, #0]
 8018a6c:	3301      	adds	r3, #1
 8018a6e:	d04d      	beq.n	8018b0c <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8018a70:	f7fc fe9c 	bl	80157ac <HAL_GetTick>
 8018a74:	0002      	movs	r2, r0
 8018a76:	69bb      	ldr	r3, [r7, #24]
 8018a78:	1ad3      	subs	r3, r2, r3
 8018a7a:	683a      	ldr	r2, [r7, #0]
 8018a7c:	429a      	cmp	r2, r3
 8018a7e:	d902      	bls.n	8018a86 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8018a80:	683b      	ldr	r3, [r7, #0]
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d142      	bne.n	8018b0c <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8018a86:	68fb      	ldr	r3, [r7, #12]
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	685a      	ldr	r2, [r3, #4]
 8018a8c:	68fb      	ldr	r3, [r7, #12]
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	21e0      	movs	r1, #224	@ 0xe0
 8018a92:	438a      	bics	r2, r1
 8018a94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018a96:	68fb      	ldr	r3, [r7, #12]
 8018a98:	685a      	ldr	r2, [r3, #4]
 8018a9a:	2382      	movs	r3, #130	@ 0x82
 8018a9c:	005b      	lsls	r3, r3, #1
 8018a9e:	429a      	cmp	r2, r3
 8018aa0:	d113      	bne.n	8018aca <SPI_WaitFlagStateUntilTimeout+0x72>
 8018aa2:	68fb      	ldr	r3, [r7, #12]
 8018aa4:	689a      	ldr	r2, [r3, #8]
 8018aa6:	2380      	movs	r3, #128	@ 0x80
 8018aa8:	021b      	lsls	r3, r3, #8
 8018aaa:	429a      	cmp	r2, r3
 8018aac:	d005      	beq.n	8018aba <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8018aae:	68fb      	ldr	r3, [r7, #12]
 8018ab0:	689a      	ldr	r2, [r3, #8]
 8018ab2:	2380      	movs	r3, #128	@ 0x80
 8018ab4:	00db      	lsls	r3, r3, #3
 8018ab6:	429a      	cmp	r2, r3
 8018ab8:	d107      	bne.n	8018aca <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8018aba:	68fb      	ldr	r3, [r7, #12]
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	681a      	ldr	r2, [r3, #0]
 8018ac0:	68fb      	ldr	r3, [r7, #12]
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	2140      	movs	r1, #64	@ 0x40
 8018ac6:	438a      	bics	r2, r1
 8018ac8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018ace:	2380      	movs	r3, #128	@ 0x80
 8018ad0:	019b      	lsls	r3, r3, #6
 8018ad2:	429a      	cmp	r2, r3
 8018ad4:	d110      	bne.n	8018af8 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8018ad6:	68fb      	ldr	r3, [r7, #12]
 8018ad8:	681b      	ldr	r3, [r3, #0]
 8018ada:	681a      	ldr	r2, [r3, #0]
 8018adc:	68fb      	ldr	r3, [r7, #12]
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	4914      	ldr	r1, [pc, #80]	@ (8018b34 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8018ae2:	400a      	ands	r2, r1
 8018ae4:	601a      	str	r2, [r3, #0]
 8018ae6:	68fb      	ldr	r3, [r7, #12]
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	681a      	ldr	r2, [r3, #0]
 8018aec:	68fb      	ldr	r3, [r7, #12]
 8018aee:	681b      	ldr	r3, [r3, #0]
 8018af0:	2180      	movs	r1, #128	@ 0x80
 8018af2:	0189      	lsls	r1, r1, #6
 8018af4:	430a      	orrs	r2, r1
 8018af6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8018af8:	68fb      	ldr	r3, [r7, #12]
 8018afa:	2251      	movs	r2, #81	@ 0x51
 8018afc:	2101      	movs	r1, #1
 8018afe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8018b00:	68fb      	ldr	r3, [r7, #12]
 8018b02:	2250      	movs	r2, #80	@ 0x50
 8018b04:	2100      	movs	r1, #0
 8018b06:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8018b08:	2303      	movs	r3, #3
 8018b0a:	e00f      	b.n	8018b2c <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8018b0c:	68fb      	ldr	r3, [r7, #12]
 8018b0e:	681b      	ldr	r3, [r3, #0]
 8018b10:	689b      	ldr	r3, [r3, #8]
 8018b12:	68ba      	ldr	r2, [r7, #8]
 8018b14:	4013      	ands	r3, r2
 8018b16:	68ba      	ldr	r2, [r7, #8]
 8018b18:	1ad3      	subs	r3, r2, r3
 8018b1a:	425a      	negs	r2, r3
 8018b1c:	4153      	adcs	r3, r2
 8018b1e:	b2db      	uxtb	r3, r3
 8018b20:	001a      	movs	r2, r3
 8018b22:	1dfb      	adds	r3, r7, #7
 8018b24:	781b      	ldrb	r3, [r3, #0]
 8018b26:	429a      	cmp	r2, r3
 8018b28:	d19f      	bne.n	8018a6a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8018b2a:	2300      	movs	r3, #0
}
 8018b2c:	0018      	movs	r0, r3
 8018b2e:	46bd      	mov	sp, r7
 8018b30:	b004      	add	sp, #16
 8018b32:	bd80      	pop	{r7, pc}
 8018b34:	ffffdfff 	.word	0xffffdfff

08018b38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8018b38:	b580      	push	{r7, lr}
 8018b3a:	b086      	sub	sp, #24
 8018b3c:	af02      	add	r7, sp, #8
 8018b3e:	60f8      	str	r0, [r7, #12]
 8018b40:	60b9      	str	r1, [r7, #8]
 8018b42:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	685a      	ldr	r2, [r3, #4]
 8018b48:	2382      	movs	r3, #130	@ 0x82
 8018b4a:	005b      	lsls	r3, r3, #1
 8018b4c:	429a      	cmp	r2, r3
 8018b4e:	d112      	bne.n	8018b76 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8018b50:	68ba      	ldr	r2, [r7, #8]
 8018b52:	68f8      	ldr	r0, [r7, #12]
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	9300      	str	r3, [sp, #0]
 8018b58:	0013      	movs	r3, r2
 8018b5a:	2200      	movs	r2, #0
 8018b5c:	2180      	movs	r1, #128	@ 0x80
 8018b5e:	f7ff ff7b 	bl	8018a58 <SPI_WaitFlagStateUntilTimeout>
 8018b62:	1e03      	subs	r3, r0, #0
 8018b64:	d020      	beq.n	8018ba8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018b6a:	2220      	movs	r2, #32
 8018b6c:	431a      	orrs	r2, r3
 8018b6e:	68fb      	ldr	r3, [r7, #12]
 8018b70:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8018b72:	2303      	movs	r3, #3
 8018b74:	e019      	b.n	8018baa <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	2251      	movs	r2, #81	@ 0x51
 8018b7a:	5c9b      	ldrb	r3, [r3, r2]
 8018b7c:	b2db      	uxtb	r3, r3
 8018b7e:	2b05      	cmp	r3, #5
 8018b80:	d112      	bne.n	8018ba8 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8018b82:	68ba      	ldr	r2, [r7, #8]
 8018b84:	68f8      	ldr	r0, [r7, #12]
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	9300      	str	r3, [sp, #0]
 8018b8a:	0013      	movs	r3, r2
 8018b8c:	2200      	movs	r2, #0
 8018b8e:	2101      	movs	r1, #1
 8018b90:	f7ff ff62 	bl	8018a58 <SPI_WaitFlagStateUntilTimeout>
 8018b94:	1e03      	subs	r3, r0, #0
 8018b96:	d007      	beq.n	8018ba8 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8018b98:	68fb      	ldr	r3, [r7, #12]
 8018b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018b9c:	2220      	movs	r2, #32
 8018b9e:	431a      	orrs	r2, r3
 8018ba0:	68fb      	ldr	r3, [r7, #12]
 8018ba2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8018ba4:	2303      	movs	r3, #3
 8018ba6:	e000      	b.n	8018baa <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8018ba8:	2300      	movs	r3, #0
}
 8018baa:	0018      	movs	r0, r3
 8018bac:	46bd      	mov	sp, r7
 8018bae:	b004      	add	sp, #16
 8018bb0:	bd80      	pop	{r7, pc}
	...

08018bb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018bb4:	b580      	push	{r7, lr}
 8018bb6:	b082      	sub	sp, #8
 8018bb8:	af00      	add	r7, sp, #0
 8018bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d101      	bne.n	8018bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8018bc2:	2301      	movs	r3, #1
 8018bc4:	e044      	b.n	8018c50 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d107      	bne.n	8018bde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	2270      	movs	r2, #112	@ 0x70
 8018bd2:	2100      	movs	r1, #0
 8018bd4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	0018      	movs	r0, r3
 8018bda:	f7ec f901 	bl	8004de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	2224      	movs	r2, #36	@ 0x24
 8018be2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	681a      	ldr	r2, [r3, #0]
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	2101      	movs	r1, #1
 8018bf0:	438a      	bics	r2, r1
 8018bf2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	0018      	movs	r0, r3
 8018bf8:	f000 f9f4 	bl	8018fe4 <UART_SetConfig>
 8018bfc:	0003      	movs	r3, r0
 8018bfe:	2b01      	cmp	r3, #1
 8018c00:	d101      	bne.n	8018c06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8018c02:	2301      	movs	r3, #1
 8018c04:	e024      	b.n	8018c50 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	d003      	beq.n	8018c16 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	0018      	movs	r0, r3
 8018c12:	f000 fcfd 	bl	8019610 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	685a      	ldr	r2, [r3, #4]
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	490d      	ldr	r1, [pc, #52]	@ (8018c58 <HAL_UART_Init+0xa4>)
 8018c22:	400a      	ands	r2, r1
 8018c24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	689a      	ldr	r2, [r3, #8]
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	212a      	movs	r1, #42	@ 0x2a
 8018c32:	438a      	bics	r2, r1
 8018c34:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	681a      	ldr	r2, [r3, #0]
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	2101      	movs	r1, #1
 8018c42:	430a      	orrs	r2, r1
 8018c44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	0018      	movs	r0, r3
 8018c4a:	f000 fd95 	bl	8019778 <UART_CheckIdleState>
 8018c4e:	0003      	movs	r3, r0
}
 8018c50:	0018      	movs	r0, r3
 8018c52:	46bd      	mov	sp, r7
 8018c54:	b002      	add	sp, #8
 8018c56:	bd80      	pop	{r7, pc}
 8018c58:	ffffb7ff 	.word	0xffffb7ff

08018c5c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018c5c:	b580      	push	{r7, lr}
 8018c5e:	b084      	sub	sp, #16
 8018c60:	af00      	add	r7, sp, #0
 8018c62:	60f8      	str	r0, [r7, #12]
 8018c64:	60b9      	str	r1, [r7, #8]
 8018c66:	1dbb      	adds	r3, r7, #6
 8018c68:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8018c6a:	68fb      	ldr	r3, [r7, #12]
 8018c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018c6e:	2b20      	cmp	r3, #32
 8018c70:	d000      	beq.n	8018c74 <HAL_UART_Transmit_DMA+0x18>
 8018c72:	e077      	b.n	8018d64 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8018c74:	68bb      	ldr	r3, [r7, #8]
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	d003      	beq.n	8018c82 <HAL_UART_Transmit_DMA+0x26>
 8018c7a:	1dbb      	adds	r3, r7, #6
 8018c7c:	881b      	ldrh	r3, [r3, #0]
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	d101      	bne.n	8018c86 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8018c82:	2301      	movs	r3, #1
 8018c84:	e06f      	b.n	8018d66 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018c86:	68fb      	ldr	r3, [r7, #12]
 8018c88:	689a      	ldr	r2, [r3, #8]
 8018c8a:	2380      	movs	r3, #128	@ 0x80
 8018c8c:	015b      	lsls	r3, r3, #5
 8018c8e:	429a      	cmp	r2, r3
 8018c90:	d109      	bne.n	8018ca6 <HAL_UART_Transmit_DMA+0x4a>
 8018c92:	68fb      	ldr	r3, [r7, #12]
 8018c94:	691b      	ldr	r3, [r3, #16]
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d105      	bne.n	8018ca6 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8018c9a:	68bb      	ldr	r3, [r7, #8]
 8018c9c:	2201      	movs	r2, #1
 8018c9e:	4013      	ands	r3, r2
 8018ca0:	d001      	beq.n	8018ca6 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8018ca2:	2301      	movs	r3, #1
 8018ca4:	e05f      	b.n	8018d66 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8018ca6:	68fb      	ldr	r3, [r7, #12]
 8018ca8:	2270      	movs	r2, #112	@ 0x70
 8018caa:	5c9b      	ldrb	r3, [r3, r2]
 8018cac:	2b01      	cmp	r3, #1
 8018cae:	d101      	bne.n	8018cb4 <HAL_UART_Transmit_DMA+0x58>
 8018cb0:	2302      	movs	r3, #2
 8018cb2:	e058      	b.n	8018d66 <HAL_UART_Transmit_DMA+0x10a>
 8018cb4:	68fb      	ldr	r3, [r7, #12]
 8018cb6:	2270      	movs	r2, #112	@ 0x70
 8018cb8:	2101      	movs	r1, #1
 8018cba:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8018cbc:	68fb      	ldr	r3, [r7, #12]
 8018cbe:	68ba      	ldr	r2, [r7, #8]
 8018cc0:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8018cc2:	68fb      	ldr	r3, [r7, #12]
 8018cc4:	1dba      	adds	r2, r7, #6
 8018cc6:	2150      	movs	r1, #80	@ 0x50
 8018cc8:	8812      	ldrh	r2, [r2, #0]
 8018cca:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8018ccc:	68fb      	ldr	r3, [r7, #12]
 8018cce:	1dba      	adds	r2, r7, #6
 8018cd0:	2152      	movs	r1, #82	@ 0x52
 8018cd2:	8812      	ldrh	r2, [r2, #0]
 8018cd4:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018cd6:	68fb      	ldr	r3, [r7, #12]
 8018cd8:	2200      	movs	r2, #0
 8018cda:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8018cdc:	68fb      	ldr	r3, [r7, #12]
 8018cde:	2221      	movs	r2, #33	@ 0x21
 8018ce0:	675a      	str	r2, [r3, #116]	@ 0x74

    if (huart->hdmatx != NULL)
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d02a      	beq.n	8018d40 <HAL_UART_Transmit_DMA+0xe4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8018cea:	68fb      	ldr	r3, [r7, #12]
 8018cec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018cee:	4a20      	ldr	r2, [pc, #128]	@ (8018d70 <HAL_UART_Transmit_DMA+0x114>)
 8018cf0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8018cf2:	68fb      	ldr	r3, [r7, #12]
 8018cf4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8018d74 <HAL_UART_Transmit_DMA+0x118>)
 8018cf8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8018cfa:	68fb      	ldr	r3, [r7, #12]
 8018cfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8018d78 <HAL_UART_Transmit_DMA+0x11c>)
 8018d00:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8018d02:	68fb      	ldr	r3, [r7, #12]
 8018d04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018d06:	2200      	movs	r2, #0
 8018d08:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8018d0a:	68fb      	ldr	r3, [r7, #12]
 8018d0c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018d12:	0019      	movs	r1, r3
 8018d14:	68fb      	ldr	r3, [r7, #12]
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	3328      	adds	r3, #40	@ 0x28
 8018d1a:	001a      	movs	r2, r3
 8018d1c:	1dbb      	adds	r3, r7, #6
 8018d1e:	881b      	ldrh	r3, [r3, #0]
 8018d20:	f7fd fbf6 	bl	8016510 <HAL_DMA_Start_IT>
 8018d24:	1e03      	subs	r3, r0, #0
 8018d26:	d00b      	beq.n	8018d40 <HAL_UART_Transmit_DMA+0xe4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	2210      	movs	r2, #16
 8018d2c:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8018d2e:	68fb      	ldr	r3, [r7, #12]
 8018d30:	2270      	movs	r2, #112	@ 0x70
 8018d32:	2100      	movs	r1, #0
 8018d34:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8018d36:	68fb      	ldr	r3, [r7, #12]
 8018d38:	2220      	movs	r2, #32
 8018d3a:	675a      	str	r2, [r3, #116]	@ 0x74

        return HAL_ERROR;
 8018d3c:	2301      	movs	r3, #1
 8018d3e:	e012      	b.n	8018d66 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8018d40:	68fb      	ldr	r3, [r7, #12]
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	2240      	movs	r2, #64	@ 0x40
 8018d46:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8018d48:	68fb      	ldr	r3, [r7, #12]
 8018d4a:	2270      	movs	r2, #112	@ 0x70
 8018d4c:	2100      	movs	r1, #0
 8018d4e:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8018d50:	68fb      	ldr	r3, [r7, #12]
 8018d52:	681b      	ldr	r3, [r3, #0]
 8018d54:	689a      	ldr	r2, [r3, #8]
 8018d56:	68fb      	ldr	r3, [r7, #12]
 8018d58:	681b      	ldr	r3, [r3, #0]
 8018d5a:	2180      	movs	r1, #128	@ 0x80
 8018d5c:	430a      	orrs	r2, r1
 8018d5e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8018d60:	2300      	movs	r3, #0
 8018d62:	e000      	b.n	8018d66 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8018d64:	2302      	movs	r3, #2
  }
}
 8018d66:	0018      	movs	r0, r3
 8018d68:	46bd      	mov	sp, r7
 8018d6a:	b004      	add	sp, #16
 8018d6c:	bd80      	pop	{r7, pc}
 8018d6e:	46c0      	nop			@ (mov r8, r8)
 8018d70:	080198fd 	.word	0x080198fd
 8018d74:	08019951 	.word	0x08019951
 8018d78:	0801996f 	.word	0x0801996f

08018d7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8018d7c:	b580      	push	{r7, lr}
 8018d7e:	b088      	sub	sp, #32
 8018d80:	af00      	add	r7, sp, #0
 8018d82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	69db      	ldr	r3, [r3, #28]
 8018d8a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	681b      	ldr	r3, [r3, #0]
 8018d90:	681b      	ldr	r3, [r3, #0]
 8018d92:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	689b      	ldr	r3, [r3, #8]
 8018d9a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8018d9c:	69fb      	ldr	r3, [r7, #28]
 8018d9e:	220f      	movs	r2, #15
 8018da0:	4013      	ands	r3, r2
 8018da2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8018da4:	693b      	ldr	r3, [r7, #16]
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d112      	bne.n	8018dd0 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8018daa:	69fb      	ldr	r3, [r7, #28]
 8018dac:	2220      	movs	r2, #32
 8018dae:	4013      	ands	r3, r2
 8018db0:	d00e      	beq.n	8018dd0 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8018db2:	69bb      	ldr	r3, [r7, #24]
 8018db4:	2220      	movs	r2, #32
 8018db6:	4013      	ands	r3, r2
 8018db8:	d00a      	beq.n	8018dd0 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d100      	bne.n	8018dc4 <HAL_UART_IRQHandler+0x48>
 8018dc2:	e0f5      	b.n	8018fb0 <HAL_UART_IRQHandler+0x234>
      {
        huart->RxISR(huart);
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018dc8:	687a      	ldr	r2, [r7, #4]
 8018dca:	0010      	movs	r0, r2
 8018dcc:	4798      	blx	r3
      }
      return;
 8018dce:	e0ef      	b.n	8018fb0 <HAL_UART_IRQHandler+0x234>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8018dd0:	693b      	ldr	r3, [r7, #16]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d100      	bne.n	8018dd8 <HAL_UART_IRQHandler+0x5c>
 8018dd6:	e0b8      	b.n	8018f4a <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8018dd8:	697b      	ldr	r3, [r7, #20]
 8018dda:	2201      	movs	r2, #1
 8018ddc:	4013      	ands	r3, r2
 8018dde:	d105      	bne.n	8018dec <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8018de0:	69ba      	ldr	r2, [r7, #24]
 8018de2:	2390      	movs	r3, #144	@ 0x90
 8018de4:	005b      	lsls	r3, r3, #1
 8018de6:	4013      	ands	r3, r2
 8018de8:	d100      	bne.n	8018dec <HAL_UART_IRQHandler+0x70>
 8018dea:	e0ae      	b.n	8018f4a <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8018dec:	69fb      	ldr	r3, [r7, #28]
 8018dee:	2201      	movs	r2, #1
 8018df0:	4013      	ands	r3, r2
 8018df2:	d00e      	beq.n	8018e12 <HAL_UART_IRQHandler+0x96>
 8018df4:	69ba      	ldr	r2, [r7, #24]
 8018df6:	2380      	movs	r3, #128	@ 0x80
 8018df8:	005b      	lsls	r3, r3, #1
 8018dfa:	4013      	ands	r3, r2
 8018dfc:	d009      	beq.n	8018e12 <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	2201      	movs	r2, #1
 8018e04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018e0a:	2201      	movs	r2, #1
 8018e0c:	431a      	orrs	r2, r3
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018e12:	69fb      	ldr	r3, [r7, #28]
 8018e14:	2202      	movs	r2, #2
 8018e16:	4013      	ands	r3, r2
 8018e18:	d00d      	beq.n	8018e36 <HAL_UART_IRQHandler+0xba>
 8018e1a:	697b      	ldr	r3, [r7, #20]
 8018e1c:	2201      	movs	r2, #1
 8018e1e:	4013      	ands	r3, r2
 8018e20:	d009      	beq.n	8018e36 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	681b      	ldr	r3, [r3, #0]
 8018e26:	2202      	movs	r2, #2
 8018e28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018e2e:	2204      	movs	r2, #4
 8018e30:	431a      	orrs	r2, r3
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018e36:	69fb      	ldr	r3, [r7, #28]
 8018e38:	2204      	movs	r2, #4
 8018e3a:	4013      	ands	r3, r2
 8018e3c:	d00d      	beq.n	8018e5a <HAL_UART_IRQHandler+0xde>
 8018e3e:	697b      	ldr	r3, [r7, #20]
 8018e40:	2201      	movs	r2, #1
 8018e42:	4013      	ands	r3, r2
 8018e44:	d009      	beq.n	8018e5a <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	2204      	movs	r2, #4
 8018e4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018e52:	2202      	movs	r2, #2
 8018e54:	431a      	orrs	r2, r3
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8018e5a:	69fb      	ldr	r3, [r7, #28]
 8018e5c:	2208      	movs	r2, #8
 8018e5e:	4013      	ands	r3, r2
 8018e60:	d011      	beq.n	8018e86 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8018e62:	69bb      	ldr	r3, [r7, #24]
 8018e64:	2220      	movs	r2, #32
 8018e66:	4013      	ands	r3, r2
 8018e68:	d103      	bne.n	8018e72 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8018e6a:	697b      	ldr	r3, [r7, #20]
 8018e6c:	2201      	movs	r2, #1
 8018e6e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8018e70:	d009      	beq.n	8018e86 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	681b      	ldr	r3, [r3, #0]
 8018e76:	2208      	movs	r2, #8
 8018e78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018e7e:	2208      	movs	r2, #8
 8018e80:	431a      	orrs	r2, r3
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d100      	bne.n	8018e90 <HAL_UART_IRQHandler+0x114>
 8018e8e:	e091      	b.n	8018fb4 <HAL_UART_IRQHandler+0x238>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8018e90:	69fb      	ldr	r3, [r7, #28]
 8018e92:	2220      	movs	r2, #32
 8018e94:	4013      	ands	r3, r2
 8018e96:	d00c      	beq.n	8018eb2 <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8018e98:	69bb      	ldr	r3, [r7, #24]
 8018e9a:	2220      	movs	r2, #32
 8018e9c:	4013      	ands	r3, r2
 8018e9e:	d008      	beq.n	8018eb2 <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d004      	beq.n	8018eb2 <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018eac:	687a      	ldr	r2, [r7, #4]
 8018eae:	0010      	movs	r0, r2
 8018eb0:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018eb6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	689b      	ldr	r3, [r3, #8]
 8018ebe:	2240      	movs	r2, #64	@ 0x40
 8018ec0:	4013      	ands	r3, r2
 8018ec2:	2b40      	cmp	r3, #64	@ 0x40
 8018ec4:	d003      	beq.n	8018ece <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8018ec6:	68fb      	ldr	r3, [r7, #12]
 8018ec8:	2208      	movs	r2, #8
 8018eca:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018ecc:	d033      	beq.n	8018f36 <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	0018      	movs	r0, r3
 8018ed2:	f000 fcf3 	bl	80198bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	689b      	ldr	r3, [r3, #8]
 8018edc:	2240      	movs	r2, #64	@ 0x40
 8018ede:	4013      	ands	r3, r2
 8018ee0:	2b40      	cmp	r3, #64	@ 0x40
 8018ee2:	d123      	bne.n	8018f2c <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	689a      	ldr	r2, [r3, #8]
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	2140      	movs	r1, #64	@ 0x40
 8018ef0:	438a      	bics	r2, r1
 8018ef2:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	d012      	beq.n	8018f22 <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018f00:	4a2f      	ldr	r2, [pc, #188]	@ (8018fc0 <HAL_UART_IRQHandler+0x244>)
 8018f02:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018f08:	0018      	movs	r0, r3
 8018f0a:	f7fd fb67 	bl	80165dc <HAL_DMA_Abort_IT>
 8018f0e:	1e03      	subs	r3, r0, #0
 8018f10:	d019      	beq.n	8018f46 <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018f16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018f1c:	0018      	movs	r0, r3
 8018f1e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018f20:	e011      	b.n	8018f46 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	0018      	movs	r0, r3
 8018f26:	f000 f855 	bl	8018fd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018f2a:	e00c      	b.n	8018f46 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	0018      	movs	r0, r3
 8018f30:	f000 f850 	bl	8018fd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018f34:	e007      	b.n	8018f46 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	0018      	movs	r0, r3
 8018f3a:	f000 f84b 	bl	8018fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	2200      	movs	r2, #0
 8018f42:	67da      	str	r2, [r3, #124]	@ 0x7c
      }
    }
    return;
 8018f44:	e036      	b.n	8018fb4 <HAL_UART_IRQHandler+0x238>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018f46:	46c0      	nop			@ (mov r8, r8)
    return;
 8018f48:	e034      	b.n	8018fb4 <HAL_UART_IRQHandler+0x238>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8018f4a:	69fa      	ldr	r2, [r7, #28]
 8018f4c:	2380      	movs	r3, #128	@ 0x80
 8018f4e:	035b      	lsls	r3, r3, #13
 8018f50:	4013      	ands	r3, r2
 8018f52:	d00e      	beq.n	8018f72 <HAL_UART_IRQHandler+0x1f6>
 8018f54:	697a      	ldr	r2, [r7, #20]
 8018f56:	2380      	movs	r3, #128	@ 0x80
 8018f58:	03db      	lsls	r3, r3, #15
 8018f5a:	4013      	ands	r3, r2
 8018f5c:	d009      	beq.n	8018f72 <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	2280      	movs	r2, #128	@ 0x80
 8018f64:	0352      	lsls	r2, r2, #13
 8018f66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	0018      	movs	r0, r3
 8018f6c:	f000 fd6f 	bl	8019a4e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8018f70:	e023      	b.n	8018fba <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8018f72:	69fb      	ldr	r3, [r7, #28]
 8018f74:	2280      	movs	r2, #128	@ 0x80
 8018f76:	4013      	ands	r3, r2
 8018f78:	d00d      	beq.n	8018f96 <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8018f7a:	69bb      	ldr	r3, [r7, #24]
 8018f7c:	2280      	movs	r2, #128	@ 0x80
 8018f7e:	4013      	ands	r3, r2
 8018f80:	d009      	beq.n	8018f96 <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	d016      	beq.n	8018fb8 <HAL_UART_IRQHandler+0x23c>
    {
      huart->TxISR(huart);
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018f8e:	687a      	ldr	r2, [r7, #4]
 8018f90:	0010      	movs	r0, r2
 8018f92:	4798      	blx	r3
    }
    return;
 8018f94:	e010      	b.n	8018fb8 <HAL_UART_IRQHandler+0x23c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8018f96:	69fb      	ldr	r3, [r7, #28]
 8018f98:	2240      	movs	r2, #64	@ 0x40
 8018f9a:	4013      	ands	r3, r2
 8018f9c:	d00d      	beq.n	8018fba <HAL_UART_IRQHandler+0x23e>
 8018f9e:	69bb      	ldr	r3, [r7, #24]
 8018fa0:	2240      	movs	r2, #64	@ 0x40
 8018fa2:	4013      	ands	r3, r2
 8018fa4:	d009      	beq.n	8018fba <HAL_UART_IRQHandler+0x23e>
  {
    UART_EndTransmit_IT(huart);
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	0018      	movs	r0, r3
 8018faa:	f000 fd36 	bl	8019a1a <UART_EndTransmit_IT>
    return;
 8018fae:	e004      	b.n	8018fba <HAL_UART_IRQHandler+0x23e>
      return;
 8018fb0:	46c0      	nop			@ (mov r8, r8)
 8018fb2:	e002      	b.n	8018fba <HAL_UART_IRQHandler+0x23e>
    return;
 8018fb4:	46c0      	nop			@ (mov r8, r8)
 8018fb6:	e000      	b.n	8018fba <HAL_UART_IRQHandler+0x23e>
    return;
 8018fb8:	46c0      	nop			@ (mov r8, r8)
  }

}
 8018fba:	46bd      	mov	sp, r7
 8018fbc:	b008      	add	sp, #32
 8018fbe:	bd80      	pop	{r7, pc}
 8018fc0:	080199ed 	.word	0x080199ed

08018fc4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8018fc4:	b580      	push	{r7, lr}
 8018fc6:	b082      	sub	sp, #8
 8018fc8:	af00      	add	r7, sp, #0
 8018fca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8018fcc:	46c0      	nop			@ (mov r8, r8)
 8018fce:	46bd      	mov	sp, r7
 8018fd0:	b002      	add	sp, #8
 8018fd2:	bd80      	pop	{r7, pc}

08018fd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8018fd4:	b580      	push	{r7, lr}
 8018fd6:	b082      	sub	sp, #8
 8018fd8:	af00      	add	r7, sp, #0
 8018fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8018fdc:	46c0      	nop			@ (mov r8, r8)
 8018fde:	46bd      	mov	sp, r7
 8018fe0:	b002      	add	sp, #8
 8018fe2:	bd80      	pop	{r7, pc}

08018fe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018fe4:	b5b0      	push	{r4, r5, r7, lr}
 8018fe6:	b08e      	sub	sp, #56	@ 0x38
 8018fe8:	af00      	add	r7, sp, #0
 8018fea:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8018fec:	231b      	movs	r3, #27
 8018fee:	2118      	movs	r1, #24
 8018ff0:	185b      	adds	r3, r3, r1
 8018ff2:	19db      	adds	r3, r3, r7
 8018ff4:	2210      	movs	r2, #16
 8018ff6:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8018ff8:	2300      	movs	r3, #0
 8018ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8018ffc:	2313      	movs	r3, #19
 8018ffe:	185b      	adds	r3, r3, r1
 8019000:	19db      	adds	r3, r3, r7
 8019002:	2200      	movs	r2, #0
 8019004:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8019006:	2300      	movs	r3, #0
 8019008:	627b      	str	r3, [r7, #36]	@ 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801900a:	69fb      	ldr	r3, [r7, #28]
 801900c:	689a      	ldr	r2, [r3, #8]
 801900e:	69fb      	ldr	r3, [r7, #28]
 8019010:	691b      	ldr	r3, [r3, #16]
 8019012:	431a      	orrs	r2, r3
 8019014:	69fb      	ldr	r3, [r7, #28]
 8019016:	695b      	ldr	r3, [r3, #20]
 8019018:	431a      	orrs	r2, r3
 801901a:	69fb      	ldr	r3, [r7, #28]
 801901c:	69db      	ldr	r3, [r3, #28]
 801901e:	4313      	orrs	r3, r2
 8019020:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8019022:	69fb      	ldr	r3, [r7, #28]
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	681b      	ldr	r3, [r3, #0]
 8019028:	4ac2      	ldr	r2, [pc, #776]	@ (8019334 <UART_SetConfig+0x350>)
 801902a:	4013      	ands	r3, r2
 801902c:	0019      	movs	r1, r3
 801902e:	69fb      	ldr	r3, [r7, #28]
 8019030:	681b      	ldr	r3, [r3, #0]
 8019032:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019034:	430a      	orrs	r2, r1
 8019036:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8019038:	69fb      	ldr	r3, [r7, #28]
 801903a:	681b      	ldr	r3, [r3, #0]
 801903c:	685b      	ldr	r3, [r3, #4]
 801903e:	4abe      	ldr	r2, [pc, #760]	@ (8019338 <UART_SetConfig+0x354>)
 8019040:	4013      	ands	r3, r2
 8019042:	0019      	movs	r1, r3
 8019044:	69fb      	ldr	r3, [r7, #28]
 8019046:	68da      	ldr	r2, [r3, #12]
 8019048:	69fb      	ldr	r3, [r7, #28]
 801904a:	681b      	ldr	r3, [r3, #0]
 801904c:	430a      	orrs	r2, r1
 801904e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8019050:	69fb      	ldr	r3, [r7, #28]
 8019052:	699b      	ldr	r3, [r3, #24]
 8019054:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8019056:	69fb      	ldr	r3, [r7, #28]
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	4ab8      	ldr	r2, [pc, #736]	@ (801933c <UART_SetConfig+0x358>)
 801905c:	4293      	cmp	r3, r2
 801905e:	d004      	beq.n	801906a <UART_SetConfig+0x86>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8019060:	69fb      	ldr	r3, [r7, #28]
 8019062:	6a1b      	ldr	r3, [r3, #32]
 8019064:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019066:	4313      	orrs	r3, r2
 8019068:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801906a:	69fb      	ldr	r3, [r7, #28]
 801906c:	681b      	ldr	r3, [r3, #0]
 801906e:	689b      	ldr	r3, [r3, #8]
 8019070:	4ab3      	ldr	r2, [pc, #716]	@ (8019340 <UART_SetConfig+0x35c>)
 8019072:	4013      	ands	r3, r2
 8019074:	0019      	movs	r1, r3
 8019076:	69fb      	ldr	r3, [r7, #28]
 8019078:	681b      	ldr	r3, [r3, #0]
 801907a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801907c:	430a      	orrs	r2, r1
 801907e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8019080:	69fb      	ldr	r3, [r7, #28]
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	4aaf      	ldr	r2, [pc, #700]	@ (8019344 <UART_SetConfig+0x360>)
 8019086:	4293      	cmp	r3, r2
 8019088:	d131      	bne.n	80190ee <UART_SetConfig+0x10a>
 801908a:	4baf      	ldr	r3, [pc, #700]	@ (8019348 <UART_SetConfig+0x364>)
 801908c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801908e:	2203      	movs	r2, #3
 8019090:	4013      	ands	r3, r2
 8019092:	2b03      	cmp	r3, #3
 8019094:	d01d      	beq.n	80190d2 <UART_SetConfig+0xee>
 8019096:	d823      	bhi.n	80190e0 <UART_SetConfig+0xfc>
 8019098:	2b02      	cmp	r3, #2
 801909a:	d00c      	beq.n	80190b6 <UART_SetConfig+0xd2>
 801909c:	d820      	bhi.n	80190e0 <UART_SetConfig+0xfc>
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d002      	beq.n	80190a8 <UART_SetConfig+0xc4>
 80190a2:	2b01      	cmp	r3, #1
 80190a4:	d00e      	beq.n	80190c4 <UART_SetConfig+0xe0>
 80190a6:	e01b      	b.n	80190e0 <UART_SetConfig+0xfc>
 80190a8:	231b      	movs	r3, #27
 80190aa:	2218      	movs	r2, #24
 80190ac:	189b      	adds	r3, r3, r2
 80190ae:	19db      	adds	r3, r3, r7
 80190b0:	2201      	movs	r2, #1
 80190b2:	701a      	strb	r2, [r3, #0]
 80190b4:	e0b4      	b.n	8019220 <UART_SetConfig+0x23c>
 80190b6:	231b      	movs	r3, #27
 80190b8:	2218      	movs	r2, #24
 80190ba:	189b      	adds	r3, r3, r2
 80190bc:	19db      	adds	r3, r3, r7
 80190be:	2202      	movs	r2, #2
 80190c0:	701a      	strb	r2, [r3, #0]
 80190c2:	e0ad      	b.n	8019220 <UART_SetConfig+0x23c>
 80190c4:	231b      	movs	r3, #27
 80190c6:	2218      	movs	r2, #24
 80190c8:	189b      	adds	r3, r3, r2
 80190ca:	19db      	adds	r3, r3, r7
 80190cc:	2204      	movs	r2, #4
 80190ce:	701a      	strb	r2, [r3, #0]
 80190d0:	e0a6      	b.n	8019220 <UART_SetConfig+0x23c>
 80190d2:	231b      	movs	r3, #27
 80190d4:	2218      	movs	r2, #24
 80190d6:	189b      	adds	r3, r3, r2
 80190d8:	19db      	adds	r3, r3, r7
 80190da:	2208      	movs	r2, #8
 80190dc:	701a      	strb	r2, [r3, #0]
 80190de:	e09f      	b.n	8019220 <UART_SetConfig+0x23c>
 80190e0:	231b      	movs	r3, #27
 80190e2:	2218      	movs	r2, #24
 80190e4:	189b      	adds	r3, r3, r2
 80190e6:	19db      	adds	r3, r3, r7
 80190e8:	2210      	movs	r2, #16
 80190ea:	701a      	strb	r2, [r3, #0]
 80190ec:	e098      	b.n	8019220 <UART_SetConfig+0x23c>
 80190ee:	69fb      	ldr	r3, [r7, #28]
 80190f0:	681b      	ldr	r3, [r3, #0]
 80190f2:	4a96      	ldr	r2, [pc, #600]	@ (801934c <UART_SetConfig+0x368>)
 80190f4:	4293      	cmp	r3, r2
 80190f6:	d131      	bne.n	801915c <UART_SetConfig+0x178>
 80190f8:	4b93      	ldr	r3, [pc, #588]	@ (8019348 <UART_SetConfig+0x364>)
 80190fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80190fc:	220c      	movs	r2, #12
 80190fe:	4013      	ands	r3, r2
 8019100:	2b0c      	cmp	r3, #12
 8019102:	d01d      	beq.n	8019140 <UART_SetConfig+0x15c>
 8019104:	d823      	bhi.n	801914e <UART_SetConfig+0x16a>
 8019106:	2b08      	cmp	r3, #8
 8019108:	d00c      	beq.n	8019124 <UART_SetConfig+0x140>
 801910a:	d820      	bhi.n	801914e <UART_SetConfig+0x16a>
 801910c:	2b00      	cmp	r3, #0
 801910e:	d002      	beq.n	8019116 <UART_SetConfig+0x132>
 8019110:	2b04      	cmp	r3, #4
 8019112:	d00e      	beq.n	8019132 <UART_SetConfig+0x14e>
 8019114:	e01b      	b.n	801914e <UART_SetConfig+0x16a>
 8019116:	231b      	movs	r3, #27
 8019118:	2218      	movs	r2, #24
 801911a:	189b      	adds	r3, r3, r2
 801911c:	19db      	adds	r3, r3, r7
 801911e:	2200      	movs	r2, #0
 8019120:	701a      	strb	r2, [r3, #0]
 8019122:	e07d      	b.n	8019220 <UART_SetConfig+0x23c>
 8019124:	231b      	movs	r3, #27
 8019126:	2218      	movs	r2, #24
 8019128:	189b      	adds	r3, r3, r2
 801912a:	19db      	adds	r3, r3, r7
 801912c:	2202      	movs	r2, #2
 801912e:	701a      	strb	r2, [r3, #0]
 8019130:	e076      	b.n	8019220 <UART_SetConfig+0x23c>
 8019132:	231b      	movs	r3, #27
 8019134:	2218      	movs	r2, #24
 8019136:	189b      	adds	r3, r3, r2
 8019138:	19db      	adds	r3, r3, r7
 801913a:	2204      	movs	r2, #4
 801913c:	701a      	strb	r2, [r3, #0]
 801913e:	e06f      	b.n	8019220 <UART_SetConfig+0x23c>
 8019140:	231b      	movs	r3, #27
 8019142:	2218      	movs	r2, #24
 8019144:	189b      	adds	r3, r3, r2
 8019146:	19db      	adds	r3, r3, r7
 8019148:	2208      	movs	r2, #8
 801914a:	701a      	strb	r2, [r3, #0]
 801914c:	e068      	b.n	8019220 <UART_SetConfig+0x23c>
 801914e:	231b      	movs	r3, #27
 8019150:	2218      	movs	r2, #24
 8019152:	189b      	adds	r3, r3, r2
 8019154:	19db      	adds	r3, r3, r7
 8019156:	2210      	movs	r2, #16
 8019158:	701a      	strb	r2, [r3, #0]
 801915a:	e061      	b.n	8019220 <UART_SetConfig+0x23c>
 801915c:	69fb      	ldr	r3, [r7, #28]
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	4a7b      	ldr	r2, [pc, #492]	@ (8019350 <UART_SetConfig+0x36c>)
 8019162:	4293      	cmp	r3, r2
 8019164:	d106      	bne.n	8019174 <UART_SetConfig+0x190>
 8019166:	231b      	movs	r3, #27
 8019168:	2218      	movs	r2, #24
 801916a:	189b      	adds	r3, r3, r2
 801916c:	19db      	adds	r3, r3, r7
 801916e:	2200      	movs	r2, #0
 8019170:	701a      	strb	r2, [r3, #0]
 8019172:	e055      	b.n	8019220 <UART_SetConfig+0x23c>
 8019174:	69fb      	ldr	r3, [r7, #28]
 8019176:	681b      	ldr	r3, [r3, #0]
 8019178:	4a76      	ldr	r2, [pc, #472]	@ (8019354 <UART_SetConfig+0x370>)
 801917a:	4293      	cmp	r3, r2
 801917c:	d106      	bne.n	801918c <UART_SetConfig+0x1a8>
 801917e:	231b      	movs	r3, #27
 8019180:	2218      	movs	r2, #24
 8019182:	189b      	adds	r3, r3, r2
 8019184:	19db      	adds	r3, r3, r7
 8019186:	2200      	movs	r2, #0
 8019188:	701a      	strb	r2, [r3, #0]
 801918a:	e049      	b.n	8019220 <UART_SetConfig+0x23c>
 801918c:	69fb      	ldr	r3, [r7, #28]
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	4a6a      	ldr	r2, [pc, #424]	@ (801933c <UART_SetConfig+0x358>)
 8019192:	4293      	cmp	r3, r2
 8019194:	d13e      	bne.n	8019214 <UART_SetConfig+0x230>
 8019196:	4b6c      	ldr	r3, [pc, #432]	@ (8019348 <UART_SetConfig+0x364>)
 8019198:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801919a:	23c0      	movs	r3, #192	@ 0xc0
 801919c:	011b      	lsls	r3, r3, #4
 801919e:	4013      	ands	r3, r2
 80191a0:	22c0      	movs	r2, #192	@ 0xc0
 80191a2:	0112      	lsls	r2, r2, #4
 80191a4:	4293      	cmp	r3, r2
 80191a6:	d027      	beq.n	80191f8 <UART_SetConfig+0x214>
 80191a8:	22c0      	movs	r2, #192	@ 0xc0
 80191aa:	0112      	lsls	r2, r2, #4
 80191ac:	4293      	cmp	r3, r2
 80191ae:	d82a      	bhi.n	8019206 <UART_SetConfig+0x222>
 80191b0:	2280      	movs	r2, #128	@ 0x80
 80191b2:	0112      	lsls	r2, r2, #4
 80191b4:	4293      	cmp	r3, r2
 80191b6:	d011      	beq.n	80191dc <UART_SetConfig+0x1f8>
 80191b8:	2280      	movs	r2, #128	@ 0x80
 80191ba:	0112      	lsls	r2, r2, #4
 80191bc:	4293      	cmp	r3, r2
 80191be:	d822      	bhi.n	8019206 <UART_SetConfig+0x222>
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d004      	beq.n	80191ce <UART_SetConfig+0x1ea>
 80191c4:	2280      	movs	r2, #128	@ 0x80
 80191c6:	00d2      	lsls	r2, r2, #3
 80191c8:	4293      	cmp	r3, r2
 80191ca:	d00e      	beq.n	80191ea <UART_SetConfig+0x206>
 80191cc:	e01b      	b.n	8019206 <UART_SetConfig+0x222>
 80191ce:	231b      	movs	r3, #27
 80191d0:	2218      	movs	r2, #24
 80191d2:	189b      	adds	r3, r3, r2
 80191d4:	19db      	adds	r3, r3, r7
 80191d6:	2200      	movs	r2, #0
 80191d8:	701a      	strb	r2, [r3, #0]
 80191da:	e021      	b.n	8019220 <UART_SetConfig+0x23c>
 80191dc:	231b      	movs	r3, #27
 80191de:	2218      	movs	r2, #24
 80191e0:	189b      	adds	r3, r3, r2
 80191e2:	19db      	adds	r3, r3, r7
 80191e4:	2202      	movs	r2, #2
 80191e6:	701a      	strb	r2, [r3, #0]
 80191e8:	e01a      	b.n	8019220 <UART_SetConfig+0x23c>
 80191ea:	231b      	movs	r3, #27
 80191ec:	2218      	movs	r2, #24
 80191ee:	189b      	adds	r3, r3, r2
 80191f0:	19db      	adds	r3, r3, r7
 80191f2:	2204      	movs	r2, #4
 80191f4:	701a      	strb	r2, [r3, #0]
 80191f6:	e013      	b.n	8019220 <UART_SetConfig+0x23c>
 80191f8:	231b      	movs	r3, #27
 80191fa:	2218      	movs	r2, #24
 80191fc:	189b      	adds	r3, r3, r2
 80191fe:	19db      	adds	r3, r3, r7
 8019200:	2208      	movs	r2, #8
 8019202:	701a      	strb	r2, [r3, #0]
 8019204:	e00c      	b.n	8019220 <UART_SetConfig+0x23c>
 8019206:	231b      	movs	r3, #27
 8019208:	2218      	movs	r2, #24
 801920a:	189b      	adds	r3, r3, r2
 801920c:	19db      	adds	r3, r3, r7
 801920e:	2210      	movs	r2, #16
 8019210:	701a      	strb	r2, [r3, #0]
 8019212:	e005      	b.n	8019220 <UART_SetConfig+0x23c>
 8019214:	231b      	movs	r3, #27
 8019216:	2218      	movs	r2, #24
 8019218:	189b      	adds	r3, r3, r2
 801921a:	19db      	adds	r3, r3, r7
 801921c:	2210      	movs	r2, #16
 801921e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8019220:	69fb      	ldr	r3, [r7, #28]
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	4a45      	ldr	r2, [pc, #276]	@ (801933c <UART_SetConfig+0x358>)
 8019226:	4293      	cmp	r3, r2
 8019228:	d000      	beq.n	801922c <UART_SetConfig+0x248>
 801922a:	e099      	b.n	8019360 <UART_SetConfig+0x37c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801922c:	231b      	movs	r3, #27
 801922e:	2218      	movs	r2, #24
 8019230:	189b      	adds	r3, r3, r2
 8019232:	19db      	adds	r3, r3, r7
 8019234:	781b      	ldrb	r3, [r3, #0]
 8019236:	2b08      	cmp	r3, #8
 8019238:	d01d      	beq.n	8019276 <UART_SetConfig+0x292>
 801923a:	dc20      	bgt.n	801927e <UART_SetConfig+0x29a>
 801923c:	2b04      	cmp	r3, #4
 801923e:	d015      	beq.n	801926c <UART_SetConfig+0x288>
 8019240:	dc1d      	bgt.n	801927e <UART_SetConfig+0x29a>
 8019242:	2b00      	cmp	r3, #0
 8019244:	d002      	beq.n	801924c <UART_SetConfig+0x268>
 8019246:	2b02      	cmp	r3, #2
 8019248:	d005      	beq.n	8019256 <UART_SetConfig+0x272>
 801924a:	e018      	b.n	801927e <UART_SetConfig+0x29a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 801924c:	f7fe faba 	bl	80177c4 <HAL_RCC_GetPCLK1Freq>
 8019250:	0003      	movs	r3, r0
 8019252:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8019254:	e01a      	b.n	801928c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8019256:	4b3c      	ldr	r3, [pc, #240]	@ (8019348 <UART_SetConfig+0x364>)
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	2210      	movs	r2, #16
 801925c:	4013      	ands	r3, r2
 801925e:	d002      	beq.n	8019266 <UART_SetConfig+0x282>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8019260:	4b3d      	ldr	r3, [pc, #244]	@ (8019358 <UART_SetConfig+0x374>)
 8019262:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8019264:	e012      	b.n	801928c <UART_SetConfig+0x2a8>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8019266:	4b3d      	ldr	r3, [pc, #244]	@ (801935c <UART_SetConfig+0x378>)
 8019268:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801926a:	e00f      	b.n	801928c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 801926c:	f7fe fa1a 	bl	80176a4 <HAL_RCC_GetSysClockFreq>
 8019270:	0003      	movs	r3, r0
 8019272:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8019274:	e00a      	b.n	801928c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8019276:	2380      	movs	r3, #128	@ 0x80
 8019278:	021b      	lsls	r3, r3, #8
 801927a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801927c:	e006      	b.n	801928c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 801927e:	2313      	movs	r3, #19
 8019280:	2218      	movs	r2, #24
 8019282:	189b      	adds	r3, r3, r2
 8019284:	19db      	adds	r3, r3, r7
 8019286:	2201      	movs	r2, #1
 8019288:	701a      	strb	r2, [r3, #0]
        break;
 801928a:	46c0      	nop			@ (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 801928c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801928e:	2b00      	cmp	r3, #0
 8019290:	d100      	bne.n	8019294 <UART_SetConfig+0x2b0>
 8019292:	e1a0      	b.n	80195d6 <UART_SetConfig+0x5f2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8019294:	69fb      	ldr	r3, [r7, #28]
 8019296:	685a      	ldr	r2, [r3, #4]
 8019298:	0013      	movs	r3, r2
 801929a:	005b      	lsls	r3, r3, #1
 801929c:	189b      	adds	r3, r3, r2
 801929e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80192a0:	429a      	cmp	r2, r3
 80192a2:	d305      	bcc.n	80192b0 <UART_SetConfig+0x2cc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80192a4:	69fb      	ldr	r3, [r7, #28]
 80192a6:	685b      	ldr	r3, [r3, #4]
 80192a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80192aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80192ac:	429a      	cmp	r2, r3
 80192ae:	d906      	bls.n	80192be <UART_SetConfig+0x2da>
      {
        ret = HAL_ERROR;
 80192b0:	2313      	movs	r3, #19
 80192b2:	2218      	movs	r2, #24
 80192b4:	189b      	adds	r3, r3, r2
 80192b6:	19db      	adds	r3, r3, r7
 80192b8:	2201      	movs	r2, #1
 80192ba:	701a      	strb	r2, [r3, #0]
 80192bc:	e18b      	b.n	80195d6 <UART_SetConfig+0x5f2>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80192be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192c0:	613b      	str	r3, [r7, #16]
 80192c2:	2300      	movs	r3, #0
 80192c4:	617b      	str	r3, [r7, #20]
 80192c6:	6939      	ldr	r1, [r7, #16]
 80192c8:	697a      	ldr	r2, [r7, #20]
 80192ca:	000b      	movs	r3, r1
 80192cc:	0e1b      	lsrs	r3, r3, #24
 80192ce:	0010      	movs	r0, r2
 80192d0:	0205      	lsls	r5, r0, #8
 80192d2:	431d      	orrs	r5, r3
 80192d4:	000b      	movs	r3, r1
 80192d6:	021c      	lsls	r4, r3, #8
 80192d8:	69fb      	ldr	r3, [r7, #28]
 80192da:	685b      	ldr	r3, [r3, #4]
 80192dc:	085b      	lsrs	r3, r3, #1
 80192de:	60bb      	str	r3, [r7, #8]
 80192e0:	2300      	movs	r3, #0
 80192e2:	60fb      	str	r3, [r7, #12]
 80192e4:	68b8      	ldr	r0, [r7, #8]
 80192e6:	68f9      	ldr	r1, [r7, #12]
 80192e8:	1900      	adds	r0, r0, r4
 80192ea:	4169      	adcs	r1, r5
 80192ec:	69fb      	ldr	r3, [r7, #28]
 80192ee:	685b      	ldr	r3, [r3, #4]
 80192f0:	603b      	str	r3, [r7, #0]
 80192f2:	2300      	movs	r3, #0
 80192f4:	607b      	str	r3, [r7, #4]
 80192f6:	683a      	ldr	r2, [r7, #0]
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	f7e7 f8fd 	bl	80004f8 <__aeabi_uldivmod>
 80192fe:	0002      	movs	r2, r0
 8019300:	000b      	movs	r3, r1
 8019302:	0013      	movs	r3, r2
 8019304:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8019306:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019308:	23c0      	movs	r3, #192	@ 0xc0
 801930a:	009b      	lsls	r3, r3, #2
 801930c:	429a      	cmp	r2, r3
 801930e:	d309      	bcc.n	8019324 <UART_SetConfig+0x340>
 8019310:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019312:	2380      	movs	r3, #128	@ 0x80
 8019314:	035b      	lsls	r3, r3, #13
 8019316:	429a      	cmp	r2, r3
 8019318:	d204      	bcs.n	8019324 <UART_SetConfig+0x340>
        {
          huart->Instance->BRR = usartdiv;
 801931a:	69fb      	ldr	r3, [r7, #28]
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019320:	60da      	str	r2, [r3, #12]
 8019322:	e158      	b.n	80195d6 <UART_SetConfig+0x5f2>
        }
        else
        {
          ret = HAL_ERROR;
 8019324:	2313      	movs	r3, #19
 8019326:	2218      	movs	r2, #24
 8019328:	189b      	adds	r3, r3, r2
 801932a:	19db      	adds	r3, r3, r7
 801932c:	2201      	movs	r2, #1
 801932e:	701a      	strb	r2, [r3, #0]
 8019330:	e151      	b.n	80195d6 <UART_SetConfig+0x5f2>
 8019332:	46c0      	nop			@ (mov r8, r8)
 8019334:	efff69f3 	.word	0xefff69f3
 8019338:	ffffcfff 	.word	0xffffcfff
 801933c:	40004800 	.word	0x40004800
 8019340:	fffff4ff 	.word	0xfffff4ff
 8019344:	40013800 	.word	0x40013800
 8019348:	40021000 	.word	0x40021000
 801934c:	40004400 	.word	0x40004400
 8019350:	40004c00 	.word	0x40004c00
 8019354:	40005000 	.word	0x40005000
 8019358:	003d0900 	.word	0x003d0900
 801935c:	00f42400 	.word	0x00f42400
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8019360:	69fb      	ldr	r3, [r7, #28]
 8019362:	69da      	ldr	r2, [r3, #28]
 8019364:	2380      	movs	r3, #128	@ 0x80
 8019366:	021b      	lsls	r3, r3, #8
 8019368:	429a      	cmp	r2, r3
 801936a:	d000      	beq.n	801936e <UART_SetConfig+0x38a>
 801936c:	e0a7      	b.n	80194be <UART_SetConfig+0x4da>
  {
    switch (clocksource)
 801936e:	231b      	movs	r3, #27
 8019370:	2218      	movs	r2, #24
 8019372:	189b      	adds	r3, r3, r2
 8019374:	19db      	adds	r3, r3, r7
 8019376:	781b      	ldrb	r3, [r3, #0]
 8019378:	2b08      	cmp	r3, #8
 801937a:	d86d      	bhi.n	8019458 <UART_SetConfig+0x474>
 801937c:	009a      	lsls	r2, r3, #2
 801937e:	4b9d      	ldr	r3, [pc, #628]	@ (80195f4 <UART_SetConfig+0x610>)
 8019380:	18d3      	adds	r3, r2, r3
 8019382:	681b      	ldr	r3, [r3, #0]
 8019384:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8019386:	f7fe fa1d 	bl	80177c4 <HAL_RCC_GetPCLK1Freq>
 801938a:	0003      	movs	r3, r0
 801938c:	005a      	lsls	r2, r3, #1
 801938e:	69fb      	ldr	r3, [r7, #28]
 8019390:	685b      	ldr	r3, [r3, #4]
 8019392:	085b      	lsrs	r3, r3, #1
 8019394:	18d2      	adds	r2, r2, r3
 8019396:	69fb      	ldr	r3, [r7, #28]
 8019398:	685b      	ldr	r3, [r3, #4]
 801939a:	0019      	movs	r1, r3
 801939c:	0010      	movs	r0, r2
 801939e:	f7e6 febd 	bl	800011c <__udivsi3>
 80193a2:	0003      	movs	r3, r0
 80193a4:	b29b      	uxth	r3, r3
 80193a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80193a8:	e05d      	b.n	8019466 <UART_SetConfig+0x482>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80193aa:	f7fe fa21 	bl	80177f0 <HAL_RCC_GetPCLK2Freq>
 80193ae:	0003      	movs	r3, r0
 80193b0:	005a      	lsls	r2, r3, #1
 80193b2:	69fb      	ldr	r3, [r7, #28]
 80193b4:	685b      	ldr	r3, [r3, #4]
 80193b6:	085b      	lsrs	r3, r3, #1
 80193b8:	18d2      	adds	r2, r2, r3
 80193ba:	69fb      	ldr	r3, [r7, #28]
 80193bc:	685b      	ldr	r3, [r3, #4]
 80193be:	0019      	movs	r1, r3
 80193c0:	0010      	movs	r0, r2
 80193c2:	f7e6 feab 	bl	800011c <__udivsi3>
 80193c6:	0003      	movs	r3, r0
 80193c8:	b29b      	uxth	r3, r3
 80193ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80193cc:	e04b      	b.n	8019466 <UART_SetConfig+0x482>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80193ce:	4b8a      	ldr	r3, [pc, #552]	@ (80195f8 <UART_SetConfig+0x614>)
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	2210      	movs	r2, #16
 80193d4:	4013      	ands	r3, r2
 80193d6:	d00e      	beq.n	80193f6 <UART_SetConfig+0x412>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80193d8:	69fb      	ldr	r3, [r7, #28]
 80193da:	685b      	ldr	r3, [r3, #4]
 80193dc:	085b      	lsrs	r3, r3, #1
 80193de:	4a87      	ldr	r2, [pc, #540]	@ (80195fc <UART_SetConfig+0x618>)
 80193e0:	189a      	adds	r2, r3, r2
 80193e2:	69fb      	ldr	r3, [r7, #28]
 80193e4:	685b      	ldr	r3, [r3, #4]
 80193e6:	0019      	movs	r1, r3
 80193e8:	0010      	movs	r0, r2
 80193ea:	f7e6 fe97 	bl	800011c <__udivsi3>
 80193ee:	0003      	movs	r3, r0
 80193f0:	b29b      	uxth	r3, r3
 80193f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80193f4:	e037      	b.n	8019466 <UART_SetConfig+0x482>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80193f6:	69fb      	ldr	r3, [r7, #28]
 80193f8:	685b      	ldr	r3, [r3, #4]
 80193fa:	085b      	lsrs	r3, r3, #1
 80193fc:	4a80      	ldr	r2, [pc, #512]	@ (8019600 <UART_SetConfig+0x61c>)
 80193fe:	189a      	adds	r2, r3, r2
 8019400:	69fb      	ldr	r3, [r7, #28]
 8019402:	685b      	ldr	r3, [r3, #4]
 8019404:	0019      	movs	r1, r3
 8019406:	0010      	movs	r0, r2
 8019408:	f7e6 fe88 	bl	800011c <__udivsi3>
 801940c:	0003      	movs	r3, r0
 801940e:	b29b      	uxth	r3, r3
 8019410:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8019412:	e028      	b.n	8019466 <UART_SetConfig+0x482>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8019414:	f7fe f946 	bl	80176a4 <HAL_RCC_GetSysClockFreq>
 8019418:	0003      	movs	r3, r0
 801941a:	005a      	lsls	r2, r3, #1
 801941c:	69fb      	ldr	r3, [r7, #28]
 801941e:	685b      	ldr	r3, [r3, #4]
 8019420:	085b      	lsrs	r3, r3, #1
 8019422:	18d2      	adds	r2, r2, r3
 8019424:	69fb      	ldr	r3, [r7, #28]
 8019426:	685b      	ldr	r3, [r3, #4]
 8019428:	0019      	movs	r1, r3
 801942a:	0010      	movs	r0, r2
 801942c:	f7e6 fe76 	bl	800011c <__udivsi3>
 8019430:	0003      	movs	r3, r0
 8019432:	b29b      	uxth	r3, r3
 8019434:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8019436:	e016      	b.n	8019466 <UART_SetConfig+0x482>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8019438:	69fb      	ldr	r3, [r7, #28]
 801943a:	685b      	ldr	r3, [r3, #4]
 801943c:	085b      	lsrs	r3, r3, #1
 801943e:	2280      	movs	r2, #128	@ 0x80
 8019440:	0252      	lsls	r2, r2, #9
 8019442:	189a      	adds	r2, r3, r2
 8019444:	69fb      	ldr	r3, [r7, #28]
 8019446:	685b      	ldr	r3, [r3, #4]
 8019448:	0019      	movs	r1, r3
 801944a:	0010      	movs	r0, r2
 801944c:	f7e6 fe66 	bl	800011c <__udivsi3>
 8019450:	0003      	movs	r3, r0
 8019452:	b29b      	uxth	r3, r3
 8019454:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8019456:	e006      	b.n	8019466 <UART_SetConfig+0x482>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8019458:	2313      	movs	r3, #19
 801945a:	2218      	movs	r2, #24
 801945c:	189b      	adds	r3, r3, r2
 801945e:	19db      	adds	r3, r3, r7
 8019460:	2201      	movs	r2, #1
 8019462:	701a      	strb	r2, [r3, #0]
        break;
 8019464:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019468:	2b0f      	cmp	r3, #15
 801946a:	d921      	bls.n	80194b0 <UART_SetConfig+0x4cc>
 801946c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801946e:	2380      	movs	r3, #128	@ 0x80
 8019470:	025b      	lsls	r3, r3, #9
 8019472:	429a      	cmp	r2, r3
 8019474:	d21c      	bcs.n	80194b0 <UART_SetConfig+0x4cc>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8019476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019478:	b29a      	uxth	r2, r3
 801947a:	200a      	movs	r0, #10
 801947c:	2418      	movs	r4, #24
 801947e:	1903      	adds	r3, r0, r4
 8019480:	19db      	adds	r3, r3, r7
 8019482:	210f      	movs	r1, #15
 8019484:	438a      	bics	r2, r1
 8019486:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8019488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801948a:	085b      	lsrs	r3, r3, #1
 801948c:	b29b      	uxth	r3, r3
 801948e:	2207      	movs	r2, #7
 8019490:	4013      	ands	r3, r2
 8019492:	b299      	uxth	r1, r3
 8019494:	1903      	adds	r3, r0, r4
 8019496:	19db      	adds	r3, r3, r7
 8019498:	1902      	adds	r2, r0, r4
 801949a:	19d2      	adds	r2, r2, r7
 801949c:	8812      	ldrh	r2, [r2, #0]
 801949e:	430a      	orrs	r2, r1
 80194a0:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80194a2:	69fb      	ldr	r3, [r7, #28]
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	1902      	adds	r2, r0, r4
 80194a8:	19d2      	adds	r2, r2, r7
 80194aa:	8812      	ldrh	r2, [r2, #0]
 80194ac:	60da      	str	r2, [r3, #12]
 80194ae:	e092      	b.n	80195d6 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 80194b0:	2313      	movs	r3, #19
 80194b2:	2218      	movs	r2, #24
 80194b4:	189b      	adds	r3, r3, r2
 80194b6:	19db      	adds	r3, r3, r7
 80194b8:	2201      	movs	r2, #1
 80194ba:	701a      	strb	r2, [r3, #0]
 80194bc:	e08b      	b.n	80195d6 <UART_SetConfig+0x5f2>
    }
  }
  else
  {
    switch (clocksource)
 80194be:	231b      	movs	r3, #27
 80194c0:	2218      	movs	r2, #24
 80194c2:	189b      	adds	r3, r3, r2
 80194c4:	19db      	adds	r3, r3, r7
 80194c6:	781b      	ldrb	r3, [r3, #0]
 80194c8:	2b08      	cmp	r3, #8
 80194ca:	d86a      	bhi.n	80195a2 <UART_SetConfig+0x5be>
 80194cc:	009a      	lsls	r2, r3, #2
 80194ce:	4b4d      	ldr	r3, [pc, #308]	@ (8019604 <UART_SetConfig+0x620>)
 80194d0:	18d3      	adds	r3, r2, r3
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80194d6:	f7fe f975 	bl	80177c4 <HAL_RCC_GetPCLK1Freq>
 80194da:	0002      	movs	r2, r0
 80194dc:	69fb      	ldr	r3, [r7, #28]
 80194de:	685b      	ldr	r3, [r3, #4]
 80194e0:	085b      	lsrs	r3, r3, #1
 80194e2:	18d2      	adds	r2, r2, r3
 80194e4:	69fb      	ldr	r3, [r7, #28]
 80194e6:	685b      	ldr	r3, [r3, #4]
 80194e8:	0019      	movs	r1, r3
 80194ea:	0010      	movs	r0, r2
 80194ec:	f7e6 fe16 	bl	800011c <__udivsi3>
 80194f0:	0003      	movs	r3, r0
 80194f2:	b29b      	uxth	r3, r3
 80194f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80194f6:	e05b      	b.n	80195b0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80194f8:	f7fe f97a 	bl	80177f0 <HAL_RCC_GetPCLK2Freq>
 80194fc:	0002      	movs	r2, r0
 80194fe:	69fb      	ldr	r3, [r7, #28]
 8019500:	685b      	ldr	r3, [r3, #4]
 8019502:	085b      	lsrs	r3, r3, #1
 8019504:	18d2      	adds	r2, r2, r3
 8019506:	69fb      	ldr	r3, [r7, #28]
 8019508:	685b      	ldr	r3, [r3, #4]
 801950a:	0019      	movs	r1, r3
 801950c:	0010      	movs	r0, r2
 801950e:	f7e6 fe05 	bl	800011c <__udivsi3>
 8019512:	0003      	movs	r3, r0
 8019514:	b29b      	uxth	r3, r3
 8019516:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8019518:	e04a      	b.n	80195b0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801951a:	4b37      	ldr	r3, [pc, #220]	@ (80195f8 <UART_SetConfig+0x614>)
 801951c:	681b      	ldr	r3, [r3, #0]
 801951e:	2210      	movs	r2, #16
 8019520:	4013      	ands	r3, r2
 8019522:	d00e      	beq.n	8019542 <UART_SetConfig+0x55e>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8019524:	69fb      	ldr	r3, [r7, #28]
 8019526:	685b      	ldr	r3, [r3, #4]
 8019528:	085b      	lsrs	r3, r3, #1
 801952a:	4a37      	ldr	r2, [pc, #220]	@ (8019608 <UART_SetConfig+0x624>)
 801952c:	189a      	adds	r2, r3, r2
 801952e:	69fb      	ldr	r3, [r7, #28]
 8019530:	685b      	ldr	r3, [r3, #4]
 8019532:	0019      	movs	r1, r3
 8019534:	0010      	movs	r0, r2
 8019536:	f7e6 fdf1 	bl	800011c <__udivsi3>
 801953a:	0003      	movs	r3, r0
 801953c:	b29b      	uxth	r3, r3
 801953e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8019540:	e036      	b.n	80195b0 <UART_SetConfig+0x5cc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8019542:	69fb      	ldr	r3, [r7, #28]
 8019544:	685b      	ldr	r3, [r3, #4]
 8019546:	085b      	lsrs	r3, r3, #1
 8019548:	4a30      	ldr	r2, [pc, #192]	@ (801960c <UART_SetConfig+0x628>)
 801954a:	189a      	adds	r2, r3, r2
 801954c:	69fb      	ldr	r3, [r7, #28]
 801954e:	685b      	ldr	r3, [r3, #4]
 8019550:	0019      	movs	r1, r3
 8019552:	0010      	movs	r0, r2
 8019554:	f7e6 fde2 	bl	800011c <__udivsi3>
 8019558:	0003      	movs	r3, r0
 801955a:	b29b      	uxth	r3, r3
 801955c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801955e:	e027      	b.n	80195b0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8019560:	f7fe f8a0 	bl	80176a4 <HAL_RCC_GetSysClockFreq>
 8019564:	0002      	movs	r2, r0
 8019566:	69fb      	ldr	r3, [r7, #28]
 8019568:	685b      	ldr	r3, [r3, #4]
 801956a:	085b      	lsrs	r3, r3, #1
 801956c:	18d2      	adds	r2, r2, r3
 801956e:	69fb      	ldr	r3, [r7, #28]
 8019570:	685b      	ldr	r3, [r3, #4]
 8019572:	0019      	movs	r1, r3
 8019574:	0010      	movs	r0, r2
 8019576:	f7e6 fdd1 	bl	800011c <__udivsi3>
 801957a:	0003      	movs	r3, r0
 801957c:	b29b      	uxth	r3, r3
 801957e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8019580:	e016      	b.n	80195b0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8019582:	69fb      	ldr	r3, [r7, #28]
 8019584:	685b      	ldr	r3, [r3, #4]
 8019586:	085b      	lsrs	r3, r3, #1
 8019588:	2280      	movs	r2, #128	@ 0x80
 801958a:	0212      	lsls	r2, r2, #8
 801958c:	189a      	adds	r2, r3, r2
 801958e:	69fb      	ldr	r3, [r7, #28]
 8019590:	685b      	ldr	r3, [r3, #4]
 8019592:	0019      	movs	r1, r3
 8019594:	0010      	movs	r0, r2
 8019596:	f7e6 fdc1 	bl	800011c <__udivsi3>
 801959a:	0003      	movs	r3, r0
 801959c:	b29b      	uxth	r3, r3
 801959e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80195a0:	e006      	b.n	80195b0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80195a2:	2313      	movs	r3, #19
 80195a4:	2218      	movs	r2, #24
 80195a6:	189b      	adds	r3, r3, r2
 80195a8:	19db      	adds	r3, r3, r7
 80195aa:	2201      	movs	r2, #1
 80195ac:	701a      	strb	r2, [r3, #0]
        break;
 80195ae:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80195b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80195b2:	2b0f      	cmp	r3, #15
 80195b4:	d909      	bls.n	80195ca <UART_SetConfig+0x5e6>
 80195b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80195b8:	2380      	movs	r3, #128	@ 0x80
 80195ba:	025b      	lsls	r3, r3, #9
 80195bc:	429a      	cmp	r2, r3
 80195be:	d204      	bcs.n	80195ca <UART_SetConfig+0x5e6>
    {
      huart->Instance->BRR = usartdiv;
 80195c0:	69fb      	ldr	r3, [r7, #28]
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80195c6:	60da      	str	r2, [r3, #12]
 80195c8:	e005      	b.n	80195d6 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 80195ca:	2313      	movs	r3, #19
 80195cc:	2218      	movs	r2, #24
 80195ce:	189b      	adds	r3, r3, r2
 80195d0:	19db      	adds	r3, r3, r7
 80195d2:	2201      	movs	r2, #1
 80195d4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80195d6:	69fb      	ldr	r3, [r7, #28]
 80195d8:	2200      	movs	r2, #0
 80195da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->TxISR = NULL;
 80195dc:	69fb      	ldr	r3, [r7, #28]
 80195de:	2200      	movs	r2, #0
 80195e0:	665a      	str	r2, [r3, #100]	@ 0x64

  return ret;
 80195e2:	2313      	movs	r3, #19
 80195e4:	2218      	movs	r2, #24
 80195e6:	189b      	adds	r3, r3, r2
 80195e8:	19db      	adds	r3, r3, r7
 80195ea:	781b      	ldrb	r3, [r3, #0]
}
 80195ec:	0018      	movs	r0, r3
 80195ee:	46bd      	mov	sp, r7
 80195f0:	b00e      	add	sp, #56	@ 0x38
 80195f2:	bdb0      	pop	{r4, r5, r7, pc}
 80195f4:	0801b67c 	.word	0x0801b67c
 80195f8:	40021000 	.word	0x40021000
 80195fc:	007a1200 	.word	0x007a1200
 8019600:	01e84800 	.word	0x01e84800
 8019604:	0801b6a0 	.word	0x0801b6a0
 8019608:	003d0900 	.word	0x003d0900
 801960c:	00f42400 	.word	0x00f42400

08019610 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8019610:	b580      	push	{r7, lr}
 8019612:	b082      	sub	sp, #8
 8019614:	af00      	add	r7, sp, #0
 8019616:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801961c:	2201      	movs	r2, #1
 801961e:	4013      	ands	r3, r2
 8019620:	d00b      	beq.n	801963a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	685b      	ldr	r3, [r3, #4]
 8019628:	4a4a      	ldr	r2, [pc, #296]	@ (8019754 <UART_AdvFeatureConfig+0x144>)
 801962a:	4013      	ands	r3, r2
 801962c:	0019      	movs	r1, r3
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	681b      	ldr	r3, [r3, #0]
 8019636:	430a      	orrs	r2, r1
 8019638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801963e:	2202      	movs	r2, #2
 8019640:	4013      	ands	r3, r2
 8019642:	d00b      	beq.n	801965c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	685b      	ldr	r3, [r3, #4]
 801964a:	4a43      	ldr	r2, [pc, #268]	@ (8019758 <UART_AdvFeatureConfig+0x148>)
 801964c:	4013      	ands	r3, r2
 801964e:	0019      	movs	r1, r3
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	681b      	ldr	r3, [r3, #0]
 8019658:	430a      	orrs	r2, r1
 801965a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019660:	2204      	movs	r2, #4
 8019662:	4013      	ands	r3, r2
 8019664:	d00b      	beq.n	801967e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	685b      	ldr	r3, [r3, #4]
 801966c:	4a3b      	ldr	r2, [pc, #236]	@ (801975c <UART_AdvFeatureConfig+0x14c>)
 801966e:	4013      	ands	r3, r2
 8019670:	0019      	movs	r1, r3
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	430a      	orrs	r2, r1
 801967c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019682:	2208      	movs	r2, #8
 8019684:	4013      	ands	r3, r2
 8019686:	d00b      	beq.n	80196a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	681b      	ldr	r3, [r3, #0]
 801968c:	685b      	ldr	r3, [r3, #4]
 801968e:	4a34      	ldr	r2, [pc, #208]	@ (8019760 <UART_AdvFeatureConfig+0x150>)
 8019690:	4013      	ands	r3, r2
 8019692:	0019      	movs	r1, r3
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	681b      	ldr	r3, [r3, #0]
 801969c:	430a      	orrs	r2, r1
 801969e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80196a4:	2210      	movs	r2, #16
 80196a6:	4013      	ands	r3, r2
 80196a8:	d00b      	beq.n	80196c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	681b      	ldr	r3, [r3, #0]
 80196ae:	689b      	ldr	r3, [r3, #8]
 80196b0:	4a2c      	ldr	r2, [pc, #176]	@ (8019764 <UART_AdvFeatureConfig+0x154>)
 80196b2:	4013      	ands	r3, r2
 80196b4:	0019      	movs	r1, r3
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	681b      	ldr	r3, [r3, #0]
 80196be:	430a      	orrs	r2, r1
 80196c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80196c6:	2220      	movs	r2, #32
 80196c8:	4013      	ands	r3, r2
 80196ca:	d00b      	beq.n	80196e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	681b      	ldr	r3, [r3, #0]
 80196d0:	689b      	ldr	r3, [r3, #8]
 80196d2:	4a25      	ldr	r2, [pc, #148]	@ (8019768 <UART_AdvFeatureConfig+0x158>)
 80196d4:	4013      	ands	r3, r2
 80196d6:	0019      	movs	r1, r3
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	681b      	ldr	r3, [r3, #0]
 80196e0:	430a      	orrs	r2, r1
 80196e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80196e8:	2240      	movs	r2, #64	@ 0x40
 80196ea:	4013      	ands	r3, r2
 80196ec:	d01d      	beq.n	801972a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	681b      	ldr	r3, [r3, #0]
 80196f2:	685b      	ldr	r3, [r3, #4]
 80196f4:	4a1d      	ldr	r2, [pc, #116]	@ (801976c <UART_AdvFeatureConfig+0x15c>)
 80196f6:	4013      	ands	r3, r2
 80196f8:	0019      	movs	r1, r3
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	681b      	ldr	r3, [r3, #0]
 8019702:	430a      	orrs	r2, r1
 8019704:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801970a:	2380      	movs	r3, #128	@ 0x80
 801970c:	035b      	lsls	r3, r3, #13
 801970e:	429a      	cmp	r2, r3
 8019710:	d10b      	bne.n	801972a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	685b      	ldr	r3, [r3, #4]
 8019718:	4a15      	ldr	r2, [pc, #84]	@ (8019770 <UART_AdvFeatureConfig+0x160>)
 801971a:	4013      	ands	r3, r2
 801971c:	0019      	movs	r1, r3
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	681b      	ldr	r3, [r3, #0]
 8019726:	430a      	orrs	r2, r1
 8019728:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801972e:	2280      	movs	r2, #128	@ 0x80
 8019730:	4013      	ands	r3, r2
 8019732:	d00b      	beq.n	801974c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	685b      	ldr	r3, [r3, #4]
 801973a:	4a0e      	ldr	r2, [pc, #56]	@ (8019774 <UART_AdvFeatureConfig+0x164>)
 801973c:	4013      	ands	r3, r2
 801973e:	0019      	movs	r1, r3
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	430a      	orrs	r2, r1
 801974a:	605a      	str	r2, [r3, #4]
  }
}
 801974c:	46c0      	nop			@ (mov r8, r8)
 801974e:	46bd      	mov	sp, r7
 8019750:	b002      	add	sp, #8
 8019752:	bd80      	pop	{r7, pc}
 8019754:	fffdffff 	.word	0xfffdffff
 8019758:	fffeffff 	.word	0xfffeffff
 801975c:	fffbffff 	.word	0xfffbffff
 8019760:	ffff7fff 	.word	0xffff7fff
 8019764:	ffffefff 	.word	0xffffefff
 8019768:	ffffdfff 	.word	0xffffdfff
 801976c:	ffefffff 	.word	0xffefffff
 8019770:	ff9fffff 	.word	0xff9fffff
 8019774:	fff7ffff 	.word	0xfff7ffff

08019778 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8019778:	b580      	push	{r7, lr}
 801977a:	b086      	sub	sp, #24
 801977c:	af02      	add	r7, sp, #8
 801977e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	2200      	movs	r2, #0
 8019784:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8019786:	f7fc f811 	bl	80157ac <HAL_GetTick>
 801978a:	0003      	movs	r3, r0
 801978c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	681b      	ldr	r3, [r3, #0]
 8019792:	681b      	ldr	r3, [r3, #0]
 8019794:	2208      	movs	r2, #8
 8019796:	4013      	ands	r3, r2
 8019798:	2b08      	cmp	r3, #8
 801979a:	d10c      	bne.n	80197b6 <UART_CheckIdleState+0x3e>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801979c:	68fb      	ldr	r3, [r7, #12]
 801979e:	2280      	movs	r2, #128	@ 0x80
 80197a0:	0391      	lsls	r1, r2, #14
 80197a2:	6878      	ldr	r0, [r7, #4]
 80197a4:	4a15      	ldr	r2, [pc, #84]	@ (80197fc <UART_CheckIdleState+0x84>)
 80197a6:	9200      	str	r2, [sp, #0]
 80197a8:	2200      	movs	r2, #0
 80197aa:	f000 f829 	bl	8019800 <UART_WaitOnFlagUntilTimeout>
 80197ae:	1e03      	subs	r3, r0, #0
 80197b0:	d001      	beq.n	80197b6 <UART_CheckIdleState+0x3e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80197b2:	2303      	movs	r3, #3
 80197b4:	e01e      	b.n	80197f4 <UART_CheckIdleState+0x7c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	2204      	movs	r2, #4
 80197be:	4013      	ands	r3, r2
 80197c0:	2b04      	cmp	r3, #4
 80197c2:	d10c      	bne.n	80197de <UART_CheckIdleState+0x66>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	2280      	movs	r2, #128	@ 0x80
 80197c8:	03d1      	lsls	r1, r2, #15
 80197ca:	6878      	ldr	r0, [r7, #4]
 80197cc:	4a0b      	ldr	r2, [pc, #44]	@ (80197fc <UART_CheckIdleState+0x84>)
 80197ce:	9200      	str	r2, [sp, #0]
 80197d0:	2200      	movs	r2, #0
 80197d2:	f000 f815 	bl	8019800 <UART_WaitOnFlagUntilTimeout>
 80197d6:	1e03      	subs	r3, r0, #0
 80197d8:	d001      	beq.n	80197de <UART_CheckIdleState+0x66>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80197da:	2303      	movs	r3, #3
 80197dc:	e00a      	b.n	80197f4 <UART_CheckIdleState+0x7c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	2220      	movs	r2, #32
 80197e2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	2220      	movs	r2, #32
 80197e8:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	2270      	movs	r2, #112	@ 0x70
 80197ee:	2100      	movs	r1, #0
 80197f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80197f2:	2300      	movs	r3, #0
}
 80197f4:	0018      	movs	r0, r3
 80197f6:	46bd      	mov	sp, r7
 80197f8:	b004      	add	sp, #16
 80197fa:	bd80      	pop	{r7, pc}
 80197fc:	01ffffff 	.word	0x01ffffff

08019800 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8019800:	b580      	push	{r7, lr}
 8019802:	b084      	sub	sp, #16
 8019804:	af00      	add	r7, sp, #0
 8019806:	60f8      	str	r0, [r7, #12]
 8019808:	60b9      	str	r1, [r7, #8]
 801980a:	603b      	str	r3, [r7, #0]
 801980c:	1dfb      	adds	r3, r7, #7
 801980e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019810:	e029      	b.n	8019866 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019812:	69bb      	ldr	r3, [r7, #24]
 8019814:	3301      	adds	r3, #1
 8019816:	d026      	beq.n	8019866 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019818:	f7fb ffc8 	bl	80157ac <HAL_GetTick>
 801981c:	0002      	movs	r2, r0
 801981e:	683b      	ldr	r3, [r7, #0]
 8019820:	1ad3      	subs	r3, r2, r3
 8019822:	69ba      	ldr	r2, [r7, #24]
 8019824:	429a      	cmp	r2, r3
 8019826:	d302      	bcc.n	801982e <UART_WaitOnFlagUntilTimeout+0x2e>
 8019828:	69bb      	ldr	r3, [r7, #24]
 801982a:	2b00      	cmp	r3, #0
 801982c:	d11b      	bne.n	8019866 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801982e:	68fb      	ldr	r3, [r7, #12]
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	681a      	ldr	r2, [r3, #0]
 8019834:	68fb      	ldr	r3, [r7, #12]
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	4915      	ldr	r1, [pc, #84]	@ (8019890 <UART_WaitOnFlagUntilTimeout+0x90>)
 801983a:	400a      	ands	r2, r1
 801983c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801983e:	68fb      	ldr	r3, [r7, #12]
 8019840:	681b      	ldr	r3, [r3, #0]
 8019842:	689a      	ldr	r2, [r3, #8]
 8019844:	68fb      	ldr	r3, [r7, #12]
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	2101      	movs	r1, #1
 801984a:	438a      	bics	r2, r1
 801984c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801984e:	68fb      	ldr	r3, [r7, #12]
 8019850:	2220      	movs	r2, #32
 8019852:	675a      	str	r2, [r3, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8019854:	68fb      	ldr	r3, [r7, #12]
 8019856:	2220      	movs	r2, #32
 8019858:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801985a:	68fb      	ldr	r3, [r7, #12]
 801985c:	2270      	movs	r2, #112	@ 0x70
 801985e:	2100      	movs	r1, #0
 8019860:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8019862:	2303      	movs	r3, #3
 8019864:	e00f      	b.n	8019886 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019866:	68fb      	ldr	r3, [r7, #12]
 8019868:	681b      	ldr	r3, [r3, #0]
 801986a:	69db      	ldr	r3, [r3, #28]
 801986c:	68ba      	ldr	r2, [r7, #8]
 801986e:	4013      	ands	r3, r2
 8019870:	68ba      	ldr	r2, [r7, #8]
 8019872:	1ad3      	subs	r3, r2, r3
 8019874:	425a      	negs	r2, r3
 8019876:	4153      	adcs	r3, r2
 8019878:	b2db      	uxtb	r3, r3
 801987a:	001a      	movs	r2, r3
 801987c:	1dfb      	adds	r3, r7, #7
 801987e:	781b      	ldrb	r3, [r3, #0]
 8019880:	429a      	cmp	r2, r3
 8019882:	d0c6      	beq.n	8019812 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8019884:	2300      	movs	r3, #0
}
 8019886:	0018      	movs	r0, r3
 8019888:	46bd      	mov	sp, r7
 801988a:	b004      	add	sp, #16
 801988c:	bd80      	pop	{r7, pc}
 801988e:	46c0      	nop			@ (mov r8, r8)
 8019890:	fffffe5f 	.word	0xfffffe5f

08019894 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8019894:	b580      	push	{r7, lr}
 8019896:	b082      	sub	sp, #8
 8019898:	af00      	add	r7, sp, #0
 801989a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	681b      	ldr	r3, [r3, #0]
 80198a0:	681a      	ldr	r2, [r3, #0]
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	21c0      	movs	r1, #192	@ 0xc0
 80198a8:	438a      	bics	r2, r1
 80198aa:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	2220      	movs	r2, #32
 80198b0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80198b2:	46c0      	nop			@ (mov r8, r8)
 80198b4:	46bd      	mov	sp, r7
 80198b6:	b002      	add	sp, #8
 80198b8:	bd80      	pop	{r7, pc}
	...

080198bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80198bc:	b580      	push	{r7, lr}
 80198be:	b082      	sub	sp, #8
 80198c0:	af00      	add	r7, sp, #0
 80198c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	681b      	ldr	r3, [r3, #0]
 80198c8:	681a      	ldr	r2, [r3, #0]
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	681b      	ldr	r3, [r3, #0]
 80198ce:	490a      	ldr	r1, [pc, #40]	@ (80198f8 <UART_EndRxTransfer+0x3c>)
 80198d0:	400a      	ands	r2, r1
 80198d2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	681b      	ldr	r3, [r3, #0]
 80198d8:	689a      	ldr	r2, [r3, #8]
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	681b      	ldr	r3, [r3, #0]
 80198de:	2101      	movs	r1, #1
 80198e0:	438a      	bics	r2, r1
 80198e2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	2220      	movs	r2, #32
 80198e8:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	2200      	movs	r2, #0
 80198ee:	661a      	str	r2, [r3, #96]	@ 0x60
}
 80198f0:	46c0      	nop			@ (mov r8, r8)
 80198f2:	46bd      	mov	sp, r7
 80198f4:	b002      	add	sp, #8
 80198f6:	bd80      	pop	{r7, pc}
 80198f8:	fffffedf 	.word	0xfffffedf

080198fc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80198fc:	b580      	push	{r7, lr}
 80198fe:	b084      	sub	sp, #16
 8019900:	af00      	add	r7, sp, #0
 8019902:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019908:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	681b      	ldr	r3, [r3, #0]
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	2220      	movs	r2, #32
 8019912:	4013      	ands	r3, r2
 8019914:	d114      	bne.n	8019940 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8019916:	68fb      	ldr	r3, [r7, #12]
 8019918:	2252      	movs	r2, #82	@ 0x52
 801991a:	2100      	movs	r1, #0
 801991c:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801991e:	68fb      	ldr	r3, [r7, #12]
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	689a      	ldr	r2, [r3, #8]
 8019924:	68fb      	ldr	r3, [r7, #12]
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	2180      	movs	r1, #128	@ 0x80
 801992a:	438a      	bics	r2, r1
 801992c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801992e:	68fb      	ldr	r3, [r7, #12]
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	681a      	ldr	r2, [r3, #0]
 8019934:	68fb      	ldr	r3, [r7, #12]
 8019936:	681b      	ldr	r3, [r3, #0]
 8019938:	2140      	movs	r1, #64	@ 0x40
 801993a:	430a      	orrs	r2, r1
 801993c:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801993e:	e003      	b.n	8019948 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8019940:	68fb      	ldr	r3, [r7, #12]
 8019942:	0018      	movs	r0, r3
 8019944:	f7eb fa26 	bl	8004d94 <HAL_UART_TxCpltCallback>
}
 8019948:	46c0      	nop			@ (mov r8, r8)
 801994a:	46bd      	mov	sp, r7
 801994c:	b004      	add	sp, #16
 801994e:	bd80      	pop	{r7, pc}

08019950 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8019950:	b580      	push	{r7, lr}
 8019952:	b084      	sub	sp, #16
 8019954:	af00      	add	r7, sp, #0
 8019956:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801995c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801995e:	68fb      	ldr	r3, [r7, #12]
 8019960:	0018      	movs	r0, r3
 8019962:	f7ff fb2f 	bl	8018fc4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019966:	46c0      	nop			@ (mov r8, r8)
 8019968:	46bd      	mov	sp, r7
 801996a:	b004      	add	sp, #16
 801996c:	bd80      	pop	{r7, pc}

0801996e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801996e:	b580      	push	{r7, lr}
 8019970:	b086      	sub	sp, #24
 8019972:	af00      	add	r7, sp, #0
 8019974:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801997a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801997c:	697b      	ldr	r3, [r7, #20]
 801997e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019980:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8019982:	697b      	ldr	r3, [r7, #20]
 8019984:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8019986:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8019988:	697b      	ldr	r3, [r7, #20]
 801998a:	681b      	ldr	r3, [r3, #0]
 801998c:	689b      	ldr	r3, [r3, #8]
 801998e:	2280      	movs	r2, #128	@ 0x80
 8019990:	4013      	ands	r3, r2
 8019992:	2b80      	cmp	r3, #128	@ 0x80
 8019994:	d10a      	bne.n	80199ac <UART_DMAError+0x3e>
 8019996:	693b      	ldr	r3, [r7, #16]
 8019998:	2b21      	cmp	r3, #33	@ 0x21
 801999a:	d107      	bne.n	80199ac <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801999c:	697b      	ldr	r3, [r7, #20]
 801999e:	2252      	movs	r2, #82	@ 0x52
 80199a0:	2100      	movs	r1, #0
 80199a2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80199a4:	697b      	ldr	r3, [r7, #20]
 80199a6:	0018      	movs	r0, r3
 80199a8:	f7ff ff74 	bl	8019894 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80199ac:	697b      	ldr	r3, [r7, #20]
 80199ae:	681b      	ldr	r3, [r3, #0]
 80199b0:	689b      	ldr	r3, [r3, #8]
 80199b2:	2240      	movs	r2, #64	@ 0x40
 80199b4:	4013      	ands	r3, r2
 80199b6:	2b40      	cmp	r3, #64	@ 0x40
 80199b8:	d10a      	bne.n	80199d0 <UART_DMAError+0x62>
 80199ba:	68fb      	ldr	r3, [r7, #12]
 80199bc:	2b22      	cmp	r3, #34	@ 0x22
 80199be:	d107      	bne.n	80199d0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80199c0:	697b      	ldr	r3, [r7, #20]
 80199c2:	225a      	movs	r2, #90	@ 0x5a
 80199c4:	2100      	movs	r1, #0
 80199c6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80199c8:	697b      	ldr	r3, [r7, #20]
 80199ca:	0018      	movs	r0, r3
 80199cc:	f7ff ff76 	bl	80198bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80199d0:	697b      	ldr	r3, [r7, #20]
 80199d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80199d4:	2210      	movs	r2, #16
 80199d6:	431a      	orrs	r2, r3
 80199d8:	697b      	ldr	r3, [r7, #20]
 80199da:	67da      	str	r2, [r3, #124]	@ 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80199dc:	697b      	ldr	r3, [r7, #20]
 80199de:	0018      	movs	r0, r3
 80199e0:	f7ff faf8 	bl	8018fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80199e4:	46c0      	nop			@ (mov r8, r8)
 80199e6:	46bd      	mov	sp, r7
 80199e8:	b006      	add	sp, #24
 80199ea:	bd80      	pop	{r7, pc}

080199ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80199ec:	b580      	push	{r7, lr}
 80199ee:	b084      	sub	sp, #16
 80199f0:	af00      	add	r7, sp, #0
 80199f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80199f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80199fa:	68fb      	ldr	r3, [r7, #12]
 80199fc:	225a      	movs	r2, #90	@ 0x5a
 80199fe:	2100      	movs	r1, #0
 8019a00:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8019a02:	68fb      	ldr	r3, [r7, #12]
 8019a04:	2252      	movs	r2, #82	@ 0x52
 8019a06:	2100      	movs	r1, #0
 8019a08:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8019a0a:	68fb      	ldr	r3, [r7, #12]
 8019a0c:	0018      	movs	r0, r3
 8019a0e:	f7ff fae1 	bl	8018fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019a12:	46c0      	nop			@ (mov r8, r8)
 8019a14:	46bd      	mov	sp, r7
 8019a16:	b004      	add	sp, #16
 8019a18:	bd80      	pop	{r7, pc}

08019a1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8019a1a:	b580      	push	{r7, lr}
 8019a1c:	b082      	sub	sp, #8
 8019a1e:	af00      	add	r7, sp, #0
 8019a20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	681a      	ldr	r2, [r3, #0]
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	681b      	ldr	r3, [r3, #0]
 8019a2c:	2140      	movs	r1, #64	@ 0x40
 8019a2e:	438a      	bics	r2, r1
 8019a30:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	2220      	movs	r2, #32
 8019a36:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	2200      	movs	r2, #0
 8019a3c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	0018      	movs	r0, r3
 8019a42:	f7eb f9a7 	bl	8004d94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019a46:	46c0      	nop			@ (mov r8, r8)
 8019a48:	46bd      	mov	sp, r7
 8019a4a:	b002      	add	sp, #8
 8019a4c:	bd80      	pop	{r7, pc}

08019a4e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8019a4e:	b580      	push	{r7, lr}
 8019a50:	b082      	sub	sp, #8
 8019a52:	af00      	add	r7, sp, #0
 8019a54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8019a56:	46c0      	nop			@ (mov r8, r8)
 8019a58:	46bd      	mov	sp, r7
 8019a5a:	b002      	add	sp, #8
 8019a5c:	bd80      	pop	{r7, pc}

08019a5e <_vsniprintf_r>:
 8019a5e:	b530      	push	{r4, r5, lr}
 8019a60:	0014      	movs	r4, r2
 8019a62:	0005      	movs	r5, r0
 8019a64:	001a      	movs	r2, r3
 8019a66:	b09b      	sub	sp, #108	@ 0x6c
 8019a68:	2c00      	cmp	r4, #0
 8019a6a:	da05      	bge.n	8019a78 <_vsniprintf_r+0x1a>
 8019a6c:	238b      	movs	r3, #139	@ 0x8b
 8019a6e:	6003      	str	r3, [r0, #0]
 8019a70:	2001      	movs	r0, #1
 8019a72:	4240      	negs	r0, r0
 8019a74:	b01b      	add	sp, #108	@ 0x6c
 8019a76:	bd30      	pop	{r4, r5, pc}
 8019a78:	2382      	movs	r3, #130	@ 0x82
 8019a7a:	4668      	mov	r0, sp
 8019a7c:	009b      	lsls	r3, r3, #2
 8019a7e:	8183      	strh	r3, [r0, #12]
 8019a80:	2300      	movs	r3, #0
 8019a82:	9100      	str	r1, [sp, #0]
 8019a84:	9104      	str	r1, [sp, #16]
 8019a86:	429c      	cmp	r4, r3
 8019a88:	d000      	beq.n	8019a8c <_vsniprintf_r+0x2e>
 8019a8a:	1e63      	subs	r3, r4, #1
 8019a8c:	9302      	str	r3, [sp, #8]
 8019a8e:	9305      	str	r3, [sp, #20]
 8019a90:	2301      	movs	r3, #1
 8019a92:	4669      	mov	r1, sp
 8019a94:	425b      	negs	r3, r3
 8019a96:	81cb      	strh	r3, [r1, #14]
 8019a98:	0028      	movs	r0, r5
 8019a9a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8019a9c:	f000 f9a0 	bl	8019de0 <_svfiprintf_r>
 8019aa0:	1c43      	adds	r3, r0, #1
 8019aa2:	da01      	bge.n	8019aa8 <_vsniprintf_r+0x4a>
 8019aa4:	238b      	movs	r3, #139	@ 0x8b
 8019aa6:	602b      	str	r3, [r5, #0]
 8019aa8:	2c00      	cmp	r4, #0
 8019aaa:	d0e3      	beq.n	8019a74 <_vsniprintf_r+0x16>
 8019aac:	2200      	movs	r2, #0
 8019aae:	9b00      	ldr	r3, [sp, #0]
 8019ab0:	701a      	strb	r2, [r3, #0]
 8019ab2:	e7df      	b.n	8019a74 <_vsniprintf_r+0x16>

08019ab4 <vsniprintf>:
 8019ab4:	b513      	push	{r0, r1, r4, lr}
 8019ab6:	4c04      	ldr	r4, [pc, #16]	@ (8019ac8 <vsniprintf+0x14>)
 8019ab8:	9300      	str	r3, [sp, #0]
 8019aba:	0013      	movs	r3, r2
 8019abc:	000a      	movs	r2, r1
 8019abe:	0001      	movs	r1, r0
 8019ac0:	6820      	ldr	r0, [r4, #0]
 8019ac2:	f7ff ffcc 	bl	8019a5e <_vsniprintf_r>
 8019ac6:	bd16      	pop	{r1, r2, r4, pc}
 8019ac8:	200000d4 	.word	0x200000d4

08019acc <memset>:
 8019acc:	0003      	movs	r3, r0
 8019ace:	1882      	adds	r2, r0, r2
 8019ad0:	4293      	cmp	r3, r2
 8019ad2:	d100      	bne.n	8019ad6 <memset+0xa>
 8019ad4:	4770      	bx	lr
 8019ad6:	7019      	strb	r1, [r3, #0]
 8019ad8:	3301      	adds	r3, #1
 8019ada:	e7f9      	b.n	8019ad0 <memset+0x4>

08019adc <__libc_init_array>:
 8019adc:	b570      	push	{r4, r5, r6, lr}
 8019ade:	2600      	movs	r6, #0
 8019ae0:	4c0c      	ldr	r4, [pc, #48]	@ (8019b14 <__libc_init_array+0x38>)
 8019ae2:	4d0d      	ldr	r5, [pc, #52]	@ (8019b18 <__libc_init_array+0x3c>)
 8019ae4:	1b64      	subs	r4, r4, r5
 8019ae6:	10a4      	asrs	r4, r4, #2
 8019ae8:	42a6      	cmp	r6, r4
 8019aea:	d109      	bne.n	8019b00 <__libc_init_array+0x24>
 8019aec:	2600      	movs	r6, #0
 8019aee:	f000 fdb1 	bl	801a654 <_init>
 8019af2:	4c0a      	ldr	r4, [pc, #40]	@ (8019b1c <__libc_init_array+0x40>)
 8019af4:	4d0a      	ldr	r5, [pc, #40]	@ (8019b20 <__libc_init_array+0x44>)
 8019af6:	1b64      	subs	r4, r4, r5
 8019af8:	10a4      	asrs	r4, r4, #2
 8019afa:	42a6      	cmp	r6, r4
 8019afc:	d105      	bne.n	8019b0a <__libc_init_array+0x2e>
 8019afe:	bd70      	pop	{r4, r5, r6, pc}
 8019b00:	00b3      	lsls	r3, r6, #2
 8019b02:	58eb      	ldr	r3, [r5, r3]
 8019b04:	4798      	blx	r3
 8019b06:	3601      	adds	r6, #1
 8019b08:	e7ee      	b.n	8019ae8 <__libc_init_array+0xc>
 8019b0a:	00b3      	lsls	r3, r6, #2
 8019b0c:	58eb      	ldr	r3, [r5, r3]
 8019b0e:	4798      	blx	r3
 8019b10:	3601      	adds	r6, #1
 8019b12:	e7f2      	b.n	8019afa <__libc_init_array+0x1e>
 8019b14:	0801b700 	.word	0x0801b700
 8019b18:	0801b700 	.word	0x0801b700
 8019b1c:	0801b704 	.word	0x0801b704
 8019b20:	0801b700 	.word	0x0801b700

08019b24 <__retarget_lock_acquire_recursive>:
 8019b24:	4770      	bx	lr

08019b26 <__retarget_lock_release_recursive>:
 8019b26:	4770      	bx	lr

08019b28 <_free_r>:
 8019b28:	b570      	push	{r4, r5, r6, lr}
 8019b2a:	0005      	movs	r5, r0
 8019b2c:	1e0c      	subs	r4, r1, #0
 8019b2e:	d010      	beq.n	8019b52 <_free_r+0x2a>
 8019b30:	3c04      	subs	r4, #4
 8019b32:	6823      	ldr	r3, [r4, #0]
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	da00      	bge.n	8019b3a <_free_r+0x12>
 8019b38:	18e4      	adds	r4, r4, r3
 8019b3a:	0028      	movs	r0, r5
 8019b3c:	f000 f8e0 	bl	8019d00 <__malloc_lock>
 8019b40:	4a1d      	ldr	r2, [pc, #116]	@ (8019bb8 <_free_r+0x90>)
 8019b42:	6813      	ldr	r3, [r2, #0]
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	d105      	bne.n	8019b54 <_free_r+0x2c>
 8019b48:	6063      	str	r3, [r4, #4]
 8019b4a:	6014      	str	r4, [r2, #0]
 8019b4c:	0028      	movs	r0, r5
 8019b4e:	f000 f8df 	bl	8019d10 <__malloc_unlock>
 8019b52:	bd70      	pop	{r4, r5, r6, pc}
 8019b54:	42a3      	cmp	r3, r4
 8019b56:	d908      	bls.n	8019b6a <_free_r+0x42>
 8019b58:	6820      	ldr	r0, [r4, #0]
 8019b5a:	1821      	adds	r1, r4, r0
 8019b5c:	428b      	cmp	r3, r1
 8019b5e:	d1f3      	bne.n	8019b48 <_free_r+0x20>
 8019b60:	6819      	ldr	r1, [r3, #0]
 8019b62:	685b      	ldr	r3, [r3, #4]
 8019b64:	1809      	adds	r1, r1, r0
 8019b66:	6021      	str	r1, [r4, #0]
 8019b68:	e7ee      	b.n	8019b48 <_free_r+0x20>
 8019b6a:	001a      	movs	r2, r3
 8019b6c:	685b      	ldr	r3, [r3, #4]
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	d001      	beq.n	8019b76 <_free_r+0x4e>
 8019b72:	42a3      	cmp	r3, r4
 8019b74:	d9f9      	bls.n	8019b6a <_free_r+0x42>
 8019b76:	6811      	ldr	r1, [r2, #0]
 8019b78:	1850      	adds	r0, r2, r1
 8019b7a:	42a0      	cmp	r0, r4
 8019b7c:	d10b      	bne.n	8019b96 <_free_r+0x6e>
 8019b7e:	6820      	ldr	r0, [r4, #0]
 8019b80:	1809      	adds	r1, r1, r0
 8019b82:	1850      	adds	r0, r2, r1
 8019b84:	6011      	str	r1, [r2, #0]
 8019b86:	4283      	cmp	r3, r0
 8019b88:	d1e0      	bne.n	8019b4c <_free_r+0x24>
 8019b8a:	6818      	ldr	r0, [r3, #0]
 8019b8c:	685b      	ldr	r3, [r3, #4]
 8019b8e:	1841      	adds	r1, r0, r1
 8019b90:	6011      	str	r1, [r2, #0]
 8019b92:	6053      	str	r3, [r2, #4]
 8019b94:	e7da      	b.n	8019b4c <_free_r+0x24>
 8019b96:	42a0      	cmp	r0, r4
 8019b98:	d902      	bls.n	8019ba0 <_free_r+0x78>
 8019b9a:	230c      	movs	r3, #12
 8019b9c:	602b      	str	r3, [r5, #0]
 8019b9e:	e7d5      	b.n	8019b4c <_free_r+0x24>
 8019ba0:	6820      	ldr	r0, [r4, #0]
 8019ba2:	1821      	adds	r1, r4, r0
 8019ba4:	428b      	cmp	r3, r1
 8019ba6:	d103      	bne.n	8019bb0 <_free_r+0x88>
 8019ba8:	6819      	ldr	r1, [r3, #0]
 8019baa:	685b      	ldr	r3, [r3, #4]
 8019bac:	1809      	adds	r1, r1, r0
 8019bae:	6021      	str	r1, [r4, #0]
 8019bb0:	6063      	str	r3, [r4, #4]
 8019bb2:	6054      	str	r4, [r2, #4]
 8019bb4:	e7ca      	b.n	8019b4c <_free_r+0x24>
 8019bb6:	46c0      	nop			@ (mov r8, r8)
 8019bb8:	20001640 	.word	0x20001640

08019bbc <sbrk_aligned>:
 8019bbc:	b570      	push	{r4, r5, r6, lr}
 8019bbe:	4e0f      	ldr	r6, [pc, #60]	@ (8019bfc <sbrk_aligned+0x40>)
 8019bc0:	000d      	movs	r5, r1
 8019bc2:	6831      	ldr	r1, [r6, #0]
 8019bc4:	0004      	movs	r4, r0
 8019bc6:	2900      	cmp	r1, #0
 8019bc8:	d102      	bne.n	8019bd0 <sbrk_aligned+0x14>
 8019bca:	f000 fb99 	bl	801a300 <_sbrk_r>
 8019bce:	6030      	str	r0, [r6, #0]
 8019bd0:	0029      	movs	r1, r5
 8019bd2:	0020      	movs	r0, r4
 8019bd4:	f000 fb94 	bl	801a300 <_sbrk_r>
 8019bd8:	1c43      	adds	r3, r0, #1
 8019bda:	d103      	bne.n	8019be4 <sbrk_aligned+0x28>
 8019bdc:	2501      	movs	r5, #1
 8019bde:	426d      	negs	r5, r5
 8019be0:	0028      	movs	r0, r5
 8019be2:	bd70      	pop	{r4, r5, r6, pc}
 8019be4:	2303      	movs	r3, #3
 8019be6:	1cc5      	adds	r5, r0, #3
 8019be8:	439d      	bics	r5, r3
 8019bea:	42a8      	cmp	r0, r5
 8019bec:	d0f8      	beq.n	8019be0 <sbrk_aligned+0x24>
 8019bee:	1a29      	subs	r1, r5, r0
 8019bf0:	0020      	movs	r0, r4
 8019bf2:	f000 fb85 	bl	801a300 <_sbrk_r>
 8019bf6:	3001      	adds	r0, #1
 8019bf8:	d1f2      	bne.n	8019be0 <sbrk_aligned+0x24>
 8019bfa:	e7ef      	b.n	8019bdc <sbrk_aligned+0x20>
 8019bfc:	2000163c 	.word	0x2000163c

08019c00 <_malloc_r>:
 8019c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019c02:	2203      	movs	r2, #3
 8019c04:	1ccb      	adds	r3, r1, #3
 8019c06:	4393      	bics	r3, r2
 8019c08:	3308      	adds	r3, #8
 8019c0a:	0005      	movs	r5, r0
 8019c0c:	001f      	movs	r7, r3
 8019c0e:	2b0c      	cmp	r3, #12
 8019c10:	d234      	bcs.n	8019c7c <_malloc_r+0x7c>
 8019c12:	270c      	movs	r7, #12
 8019c14:	42b9      	cmp	r1, r7
 8019c16:	d833      	bhi.n	8019c80 <_malloc_r+0x80>
 8019c18:	0028      	movs	r0, r5
 8019c1a:	f000 f871 	bl	8019d00 <__malloc_lock>
 8019c1e:	4e37      	ldr	r6, [pc, #220]	@ (8019cfc <_malloc_r+0xfc>)
 8019c20:	6833      	ldr	r3, [r6, #0]
 8019c22:	001c      	movs	r4, r3
 8019c24:	2c00      	cmp	r4, #0
 8019c26:	d12f      	bne.n	8019c88 <_malloc_r+0x88>
 8019c28:	0039      	movs	r1, r7
 8019c2a:	0028      	movs	r0, r5
 8019c2c:	f7ff ffc6 	bl	8019bbc <sbrk_aligned>
 8019c30:	0004      	movs	r4, r0
 8019c32:	1c43      	adds	r3, r0, #1
 8019c34:	d15f      	bne.n	8019cf6 <_malloc_r+0xf6>
 8019c36:	6834      	ldr	r4, [r6, #0]
 8019c38:	9400      	str	r4, [sp, #0]
 8019c3a:	9b00      	ldr	r3, [sp, #0]
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d14a      	bne.n	8019cd6 <_malloc_r+0xd6>
 8019c40:	2c00      	cmp	r4, #0
 8019c42:	d052      	beq.n	8019cea <_malloc_r+0xea>
 8019c44:	6823      	ldr	r3, [r4, #0]
 8019c46:	0028      	movs	r0, r5
 8019c48:	18e3      	adds	r3, r4, r3
 8019c4a:	9900      	ldr	r1, [sp, #0]
 8019c4c:	9301      	str	r3, [sp, #4]
 8019c4e:	f000 fb57 	bl	801a300 <_sbrk_r>
 8019c52:	9b01      	ldr	r3, [sp, #4]
 8019c54:	4283      	cmp	r3, r0
 8019c56:	d148      	bne.n	8019cea <_malloc_r+0xea>
 8019c58:	6823      	ldr	r3, [r4, #0]
 8019c5a:	0028      	movs	r0, r5
 8019c5c:	1aff      	subs	r7, r7, r3
 8019c5e:	0039      	movs	r1, r7
 8019c60:	f7ff ffac 	bl	8019bbc <sbrk_aligned>
 8019c64:	3001      	adds	r0, #1
 8019c66:	d040      	beq.n	8019cea <_malloc_r+0xea>
 8019c68:	6823      	ldr	r3, [r4, #0]
 8019c6a:	19db      	adds	r3, r3, r7
 8019c6c:	6023      	str	r3, [r4, #0]
 8019c6e:	6833      	ldr	r3, [r6, #0]
 8019c70:	685a      	ldr	r2, [r3, #4]
 8019c72:	2a00      	cmp	r2, #0
 8019c74:	d133      	bne.n	8019cde <_malloc_r+0xde>
 8019c76:	9b00      	ldr	r3, [sp, #0]
 8019c78:	6033      	str	r3, [r6, #0]
 8019c7a:	e019      	b.n	8019cb0 <_malloc_r+0xb0>
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	dac9      	bge.n	8019c14 <_malloc_r+0x14>
 8019c80:	230c      	movs	r3, #12
 8019c82:	602b      	str	r3, [r5, #0]
 8019c84:	2000      	movs	r0, #0
 8019c86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019c88:	6821      	ldr	r1, [r4, #0]
 8019c8a:	1bc9      	subs	r1, r1, r7
 8019c8c:	d420      	bmi.n	8019cd0 <_malloc_r+0xd0>
 8019c8e:	290b      	cmp	r1, #11
 8019c90:	d90a      	bls.n	8019ca8 <_malloc_r+0xa8>
 8019c92:	19e2      	adds	r2, r4, r7
 8019c94:	6027      	str	r7, [r4, #0]
 8019c96:	42a3      	cmp	r3, r4
 8019c98:	d104      	bne.n	8019ca4 <_malloc_r+0xa4>
 8019c9a:	6032      	str	r2, [r6, #0]
 8019c9c:	6863      	ldr	r3, [r4, #4]
 8019c9e:	6011      	str	r1, [r2, #0]
 8019ca0:	6053      	str	r3, [r2, #4]
 8019ca2:	e005      	b.n	8019cb0 <_malloc_r+0xb0>
 8019ca4:	605a      	str	r2, [r3, #4]
 8019ca6:	e7f9      	b.n	8019c9c <_malloc_r+0x9c>
 8019ca8:	6862      	ldr	r2, [r4, #4]
 8019caa:	42a3      	cmp	r3, r4
 8019cac:	d10e      	bne.n	8019ccc <_malloc_r+0xcc>
 8019cae:	6032      	str	r2, [r6, #0]
 8019cb0:	0028      	movs	r0, r5
 8019cb2:	f000 f82d 	bl	8019d10 <__malloc_unlock>
 8019cb6:	0020      	movs	r0, r4
 8019cb8:	2207      	movs	r2, #7
 8019cba:	300b      	adds	r0, #11
 8019cbc:	1d23      	adds	r3, r4, #4
 8019cbe:	4390      	bics	r0, r2
 8019cc0:	1ac2      	subs	r2, r0, r3
 8019cc2:	4298      	cmp	r0, r3
 8019cc4:	d0df      	beq.n	8019c86 <_malloc_r+0x86>
 8019cc6:	1a1b      	subs	r3, r3, r0
 8019cc8:	50a3      	str	r3, [r4, r2]
 8019cca:	e7dc      	b.n	8019c86 <_malloc_r+0x86>
 8019ccc:	605a      	str	r2, [r3, #4]
 8019cce:	e7ef      	b.n	8019cb0 <_malloc_r+0xb0>
 8019cd0:	0023      	movs	r3, r4
 8019cd2:	6864      	ldr	r4, [r4, #4]
 8019cd4:	e7a6      	b.n	8019c24 <_malloc_r+0x24>
 8019cd6:	9c00      	ldr	r4, [sp, #0]
 8019cd8:	6863      	ldr	r3, [r4, #4]
 8019cda:	9300      	str	r3, [sp, #0]
 8019cdc:	e7ad      	b.n	8019c3a <_malloc_r+0x3a>
 8019cde:	001a      	movs	r2, r3
 8019ce0:	685b      	ldr	r3, [r3, #4]
 8019ce2:	42a3      	cmp	r3, r4
 8019ce4:	d1fb      	bne.n	8019cde <_malloc_r+0xde>
 8019ce6:	2300      	movs	r3, #0
 8019ce8:	e7da      	b.n	8019ca0 <_malloc_r+0xa0>
 8019cea:	230c      	movs	r3, #12
 8019cec:	0028      	movs	r0, r5
 8019cee:	602b      	str	r3, [r5, #0]
 8019cf0:	f000 f80e 	bl	8019d10 <__malloc_unlock>
 8019cf4:	e7c6      	b.n	8019c84 <_malloc_r+0x84>
 8019cf6:	6007      	str	r7, [r0, #0]
 8019cf8:	e7da      	b.n	8019cb0 <_malloc_r+0xb0>
 8019cfa:	46c0      	nop			@ (mov r8, r8)
 8019cfc:	20001640 	.word	0x20001640

08019d00 <__malloc_lock>:
 8019d00:	b510      	push	{r4, lr}
 8019d02:	4802      	ldr	r0, [pc, #8]	@ (8019d0c <__malloc_lock+0xc>)
 8019d04:	f7ff ff0e 	bl	8019b24 <__retarget_lock_acquire_recursive>
 8019d08:	bd10      	pop	{r4, pc}
 8019d0a:	46c0      	nop			@ (mov r8, r8)
 8019d0c:	20001638 	.word	0x20001638

08019d10 <__malloc_unlock>:
 8019d10:	b510      	push	{r4, lr}
 8019d12:	4802      	ldr	r0, [pc, #8]	@ (8019d1c <__malloc_unlock+0xc>)
 8019d14:	f7ff ff07 	bl	8019b26 <__retarget_lock_release_recursive>
 8019d18:	bd10      	pop	{r4, pc}
 8019d1a:	46c0      	nop			@ (mov r8, r8)
 8019d1c:	20001638 	.word	0x20001638

08019d20 <__ssputs_r>:
 8019d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d22:	688e      	ldr	r6, [r1, #8]
 8019d24:	b085      	sub	sp, #20
 8019d26:	001f      	movs	r7, r3
 8019d28:	000c      	movs	r4, r1
 8019d2a:	680b      	ldr	r3, [r1, #0]
 8019d2c:	9002      	str	r0, [sp, #8]
 8019d2e:	9203      	str	r2, [sp, #12]
 8019d30:	42be      	cmp	r6, r7
 8019d32:	d830      	bhi.n	8019d96 <__ssputs_r+0x76>
 8019d34:	210c      	movs	r1, #12
 8019d36:	5e62      	ldrsh	r2, [r4, r1]
 8019d38:	2190      	movs	r1, #144	@ 0x90
 8019d3a:	00c9      	lsls	r1, r1, #3
 8019d3c:	420a      	tst	r2, r1
 8019d3e:	d028      	beq.n	8019d92 <__ssputs_r+0x72>
 8019d40:	2003      	movs	r0, #3
 8019d42:	6921      	ldr	r1, [r4, #16]
 8019d44:	1a5b      	subs	r3, r3, r1
 8019d46:	9301      	str	r3, [sp, #4]
 8019d48:	6963      	ldr	r3, [r4, #20]
 8019d4a:	4343      	muls	r3, r0
 8019d4c:	9801      	ldr	r0, [sp, #4]
 8019d4e:	0fdd      	lsrs	r5, r3, #31
 8019d50:	18ed      	adds	r5, r5, r3
 8019d52:	1c7b      	adds	r3, r7, #1
 8019d54:	181b      	adds	r3, r3, r0
 8019d56:	106d      	asrs	r5, r5, #1
 8019d58:	42ab      	cmp	r3, r5
 8019d5a:	d900      	bls.n	8019d5e <__ssputs_r+0x3e>
 8019d5c:	001d      	movs	r5, r3
 8019d5e:	0552      	lsls	r2, r2, #21
 8019d60:	d528      	bpl.n	8019db4 <__ssputs_r+0x94>
 8019d62:	0029      	movs	r1, r5
 8019d64:	9802      	ldr	r0, [sp, #8]
 8019d66:	f7ff ff4b 	bl	8019c00 <_malloc_r>
 8019d6a:	1e06      	subs	r6, r0, #0
 8019d6c:	d02c      	beq.n	8019dc8 <__ssputs_r+0xa8>
 8019d6e:	9a01      	ldr	r2, [sp, #4]
 8019d70:	6921      	ldr	r1, [r4, #16]
 8019d72:	f000 fae2 	bl	801a33a <memcpy>
 8019d76:	89a2      	ldrh	r2, [r4, #12]
 8019d78:	4b18      	ldr	r3, [pc, #96]	@ (8019ddc <__ssputs_r+0xbc>)
 8019d7a:	401a      	ands	r2, r3
 8019d7c:	2380      	movs	r3, #128	@ 0x80
 8019d7e:	4313      	orrs	r3, r2
 8019d80:	81a3      	strh	r3, [r4, #12]
 8019d82:	9b01      	ldr	r3, [sp, #4]
 8019d84:	6126      	str	r6, [r4, #16]
 8019d86:	18f6      	adds	r6, r6, r3
 8019d88:	6026      	str	r6, [r4, #0]
 8019d8a:	003e      	movs	r6, r7
 8019d8c:	6165      	str	r5, [r4, #20]
 8019d8e:	1aed      	subs	r5, r5, r3
 8019d90:	60a5      	str	r5, [r4, #8]
 8019d92:	42be      	cmp	r6, r7
 8019d94:	d900      	bls.n	8019d98 <__ssputs_r+0x78>
 8019d96:	003e      	movs	r6, r7
 8019d98:	0032      	movs	r2, r6
 8019d9a:	9903      	ldr	r1, [sp, #12]
 8019d9c:	6820      	ldr	r0, [r4, #0]
 8019d9e:	f000 fa9b 	bl	801a2d8 <memmove>
 8019da2:	2000      	movs	r0, #0
 8019da4:	68a3      	ldr	r3, [r4, #8]
 8019da6:	1b9b      	subs	r3, r3, r6
 8019da8:	60a3      	str	r3, [r4, #8]
 8019daa:	6823      	ldr	r3, [r4, #0]
 8019dac:	199b      	adds	r3, r3, r6
 8019dae:	6023      	str	r3, [r4, #0]
 8019db0:	b005      	add	sp, #20
 8019db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019db4:	002a      	movs	r2, r5
 8019db6:	9802      	ldr	r0, [sp, #8]
 8019db8:	f000 fac8 	bl	801a34c <_realloc_r>
 8019dbc:	1e06      	subs	r6, r0, #0
 8019dbe:	d1e0      	bne.n	8019d82 <__ssputs_r+0x62>
 8019dc0:	6921      	ldr	r1, [r4, #16]
 8019dc2:	9802      	ldr	r0, [sp, #8]
 8019dc4:	f7ff feb0 	bl	8019b28 <_free_r>
 8019dc8:	230c      	movs	r3, #12
 8019dca:	2001      	movs	r0, #1
 8019dcc:	9a02      	ldr	r2, [sp, #8]
 8019dce:	4240      	negs	r0, r0
 8019dd0:	6013      	str	r3, [r2, #0]
 8019dd2:	89a2      	ldrh	r2, [r4, #12]
 8019dd4:	3334      	adds	r3, #52	@ 0x34
 8019dd6:	4313      	orrs	r3, r2
 8019dd8:	81a3      	strh	r3, [r4, #12]
 8019dda:	e7e9      	b.n	8019db0 <__ssputs_r+0x90>
 8019ddc:	fffffb7f 	.word	0xfffffb7f

08019de0 <_svfiprintf_r>:
 8019de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019de2:	b0a1      	sub	sp, #132	@ 0x84
 8019de4:	9003      	str	r0, [sp, #12]
 8019de6:	001d      	movs	r5, r3
 8019de8:	898b      	ldrh	r3, [r1, #12]
 8019dea:	000f      	movs	r7, r1
 8019dec:	0016      	movs	r6, r2
 8019dee:	061b      	lsls	r3, r3, #24
 8019df0:	d511      	bpl.n	8019e16 <_svfiprintf_r+0x36>
 8019df2:	690b      	ldr	r3, [r1, #16]
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d10e      	bne.n	8019e16 <_svfiprintf_r+0x36>
 8019df8:	2140      	movs	r1, #64	@ 0x40
 8019dfa:	f7ff ff01 	bl	8019c00 <_malloc_r>
 8019dfe:	6038      	str	r0, [r7, #0]
 8019e00:	6138      	str	r0, [r7, #16]
 8019e02:	2800      	cmp	r0, #0
 8019e04:	d105      	bne.n	8019e12 <_svfiprintf_r+0x32>
 8019e06:	230c      	movs	r3, #12
 8019e08:	9a03      	ldr	r2, [sp, #12]
 8019e0a:	6013      	str	r3, [r2, #0]
 8019e0c:	2001      	movs	r0, #1
 8019e0e:	4240      	negs	r0, r0
 8019e10:	e0cf      	b.n	8019fb2 <_svfiprintf_r+0x1d2>
 8019e12:	2340      	movs	r3, #64	@ 0x40
 8019e14:	617b      	str	r3, [r7, #20]
 8019e16:	2300      	movs	r3, #0
 8019e18:	ac08      	add	r4, sp, #32
 8019e1a:	6163      	str	r3, [r4, #20]
 8019e1c:	3320      	adds	r3, #32
 8019e1e:	7663      	strb	r3, [r4, #25]
 8019e20:	3310      	adds	r3, #16
 8019e22:	76a3      	strb	r3, [r4, #26]
 8019e24:	9507      	str	r5, [sp, #28]
 8019e26:	0035      	movs	r5, r6
 8019e28:	782b      	ldrb	r3, [r5, #0]
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d001      	beq.n	8019e32 <_svfiprintf_r+0x52>
 8019e2e:	2b25      	cmp	r3, #37	@ 0x25
 8019e30:	d148      	bne.n	8019ec4 <_svfiprintf_r+0xe4>
 8019e32:	1bab      	subs	r3, r5, r6
 8019e34:	9305      	str	r3, [sp, #20]
 8019e36:	42b5      	cmp	r5, r6
 8019e38:	d00b      	beq.n	8019e52 <_svfiprintf_r+0x72>
 8019e3a:	0032      	movs	r2, r6
 8019e3c:	0039      	movs	r1, r7
 8019e3e:	9803      	ldr	r0, [sp, #12]
 8019e40:	f7ff ff6e 	bl	8019d20 <__ssputs_r>
 8019e44:	3001      	adds	r0, #1
 8019e46:	d100      	bne.n	8019e4a <_svfiprintf_r+0x6a>
 8019e48:	e0ae      	b.n	8019fa8 <_svfiprintf_r+0x1c8>
 8019e4a:	6963      	ldr	r3, [r4, #20]
 8019e4c:	9a05      	ldr	r2, [sp, #20]
 8019e4e:	189b      	adds	r3, r3, r2
 8019e50:	6163      	str	r3, [r4, #20]
 8019e52:	782b      	ldrb	r3, [r5, #0]
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d100      	bne.n	8019e5a <_svfiprintf_r+0x7a>
 8019e58:	e0a6      	b.n	8019fa8 <_svfiprintf_r+0x1c8>
 8019e5a:	2201      	movs	r2, #1
 8019e5c:	2300      	movs	r3, #0
 8019e5e:	4252      	negs	r2, r2
 8019e60:	6062      	str	r2, [r4, #4]
 8019e62:	a904      	add	r1, sp, #16
 8019e64:	3254      	adds	r2, #84	@ 0x54
 8019e66:	1852      	adds	r2, r2, r1
 8019e68:	1c6e      	adds	r6, r5, #1
 8019e6a:	6023      	str	r3, [r4, #0]
 8019e6c:	60e3      	str	r3, [r4, #12]
 8019e6e:	60a3      	str	r3, [r4, #8]
 8019e70:	7013      	strb	r3, [r2, #0]
 8019e72:	65a3      	str	r3, [r4, #88]	@ 0x58
 8019e74:	4b54      	ldr	r3, [pc, #336]	@ (8019fc8 <_svfiprintf_r+0x1e8>)
 8019e76:	2205      	movs	r2, #5
 8019e78:	0018      	movs	r0, r3
 8019e7a:	7831      	ldrb	r1, [r6, #0]
 8019e7c:	9305      	str	r3, [sp, #20]
 8019e7e:	f000 fa51 	bl	801a324 <memchr>
 8019e82:	1c75      	adds	r5, r6, #1
 8019e84:	2800      	cmp	r0, #0
 8019e86:	d11f      	bne.n	8019ec8 <_svfiprintf_r+0xe8>
 8019e88:	6822      	ldr	r2, [r4, #0]
 8019e8a:	06d3      	lsls	r3, r2, #27
 8019e8c:	d504      	bpl.n	8019e98 <_svfiprintf_r+0xb8>
 8019e8e:	2353      	movs	r3, #83	@ 0x53
 8019e90:	a904      	add	r1, sp, #16
 8019e92:	185b      	adds	r3, r3, r1
 8019e94:	2120      	movs	r1, #32
 8019e96:	7019      	strb	r1, [r3, #0]
 8019e98:	0713      	lsls	r3, r2, #28
 8019e9a:	d504      	bpl.n	8019ea6 <_svfiprintf_r+0xc6>
 8019e9c:	2353      	movs	r3, #83	@ 0x53
 8019e9e:	a904      	add	r1, sp, #16
 8019ea0:	185b      	adds	r3, r3, r1
 8019ea2:	212b      	movs	r1, #43	@ 0x2b
 8019ea4:	7019      	strb	r1, [r3, #0]
 8019ea6:	7833      	ldrb	r3, [r6, #0]
 8019ea8:	2b2a      	cmp	r3, #42	@ 0x2a
 8019eaa:	d016      	beq.n	8019eda <_svfiprintf_r+0xfa>
 8019eac:	0035      	movs	r5, r6
 8019eae:	2100      	movs	r1, #0
 8019eb0:	200a      	movs	r0, #10
 8019eb2:	68e3      	ldr	r3, [r4, #12]
 8019eb4:	782a      	ldrb	r2, [r5, #0]
 8019eb6:	1c6e      	adds	r6, r5, #1
 8019eb8:	3a30      	subs	r2, #48	@ 0x30
 8019eba:	2a09      	cmp	r2, #9
 8019ebc:	d950      	bls.n	8019f60 <_svfiprintf_r+0x180>
 8019ebe:	2900      	cmp	r1, #0
 8019ec0:	d111      	bne.n	8019ee6 <_svfiprintf_r+0x106>
 8019ec2:	e017      	b.n	8019ef4 <_svfiprintf_r+0x114>
 8019ec4:	3501      	adds	r5, #1
 8019ec6:	e7af      	b.n	8019e28 <_svfiprintf_r+0x48>
 8019ec8:	9b05      	ldr	r3, [sp, #20]
 8019eca:	6822      	ldr	r2, [r4, #0]
 8019ecc:	1ac0      	subs	r0, r0, r3
 8019ece:	2301      	movs	r3, #1
 8019ed0:	4083      	lsls	r3, r0
 8019ed2:	4313      	orrs	r3, r2
 8019ed4:	002e      	movs	r6, r5
 8019ed6:	6023      	str	r3, [r4, #0]
 8019ed8:	e7cc      	b.n	8019e74 <_svfiprintf_r+0x94>
 8019eda:	9b07      	ldr	r3, [sp, #28]
 8019edc:	1d19      	adds	r1, r3, #4
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	9107      	str	r1, [sp, #28]
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	db01      	blt.n	8019eea <_svfiprintf_r+0x10a>
 8019ee6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019ee8:	e004      	b.n	8019ef4 <_svfiprintf_r+0x114>
 8019eea:	425b      	negs	r3, r3
 8019eec:	60e3      	str	r3, [r4, #12]
 8019eee:	2302      	movs	r3, #2
 8019ef0:	4313      	orrs	r3, r2
 8019ef2:	6023      	str	r3, [r4, #0]
 8019ef4:	782b      	ldrb	r3, [r5, #0]
 8019ef6:	2b2e      	cmp	r3, #46	@ 0x2e
 8019ef8:	d10c      	bne.n	8019f14 <_svfiprintf_r+0x134>
 8019efa:	786b      	ldrb	r3, [r5, #1]
 8019efc:	2b2a      	cmp	r3, #42	@ 0x2a
 8019efe:	d134      	bne.n	8019f6a <_svfiprintf_r+0x18a>
 8019f00:	9b07      	ldr	r3, [sp, #28]
 8019f02:	3502      	adds	r5, #2
 8019f04:	1d1a      	adds	r2, r3, #4
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	9207      	str	r2, [sp, #28]
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	da01      	bge.n	8019f12 <_svfiprintf_r+0x132>
 8019f0e:	2301      	movs	r3, #1
 8019f10:	425b      	negs	r3, r3
 8019f12:	9309      	str	r3, [sp, #36]	@ 0x24
 8019f14:	4e2d      	ldr	r6, [pc, #180]	@ (8019fcc <_svfiprintf_r+0x1ec>)
 8019f16:	2203      	movs	r2, #3
 8019f18:	0030      	movs	r0, r6
 8019f1a:	7829      	ldrb	r1, [r5, #0]
 8019f1c:	f000 fa02 	bl	801a324 <memchr>
 8019f20:	2800      	cmp	r0, #0
 8019f22:	d006      	beq.n	8019f32 <_svfiprintf_r+0x152>
 8019f24:	2340      	movs	r3, #64	@ 0x40
 8019f26:	1b80      	subs	r0, r0, r6
 8019f28:	4083      	lsls	r3, r0
 8019f2a:	6822      	ldr	r2, [r4, #0]
 8019f2c:	3501      	adds	r5, #1
 8019f2e:	4313      	orrs	r3, r2
 8019f30:	6023      	str	r3, [r4, #0]
 8019f32:	7829      	ldrb	r1, [r5, #0]
 8019f34:	2206      	movs	r2, #6
 8019f36:	4826      	ldr	r0, [pc, #152]	@ (8019fd0 <_svfiprintf_r+0x1f0>)
 8019f38:	1c6e      	adds	r6, r5, #1
 8019f3a:	7621      	strb	r1, [r4, #24]
 8019f3c:	f000 f9f2 	bl	801a324 <memchr>
 8019f40:	2800      	cmp	r0, #0
 8019f42:	d038      	beq.n	8019fb6 <_svfiprintf_r+0x1d6>
 8019f44:	4b23      	ldr	r3, [pc, #140]	@ (8019fd4 <_svfiprintf_r+0x1f4>)
 8019f46:	2b00      	cmp	r3, #0
 8019f48:	d122      	bne.n	8019f90 <_svfiprintf_r+0x1b0>
 8019f4a:	2207      	movs	r2, #7
 8019f4c:	9b07      	ldr	r3, [sp, #28]
 8019f4e:	3307      	adds	r3, #7
 8019f50:	4393      	bics	r3, r2
 8019f52:	3308      	adds	r3, #8
 8019f54:	9307      	str	r3, [sp, #28]
 8019f56:	6963      	ldr	r3, [r4, #20]
 8019f58:	9a04      	ldr	r2, [sp, #16]
 8019f5a:	189b      	adds	r3, r3, r2
 8019f5c:	6163      	str	r3, [r4, #20]
 8019f5e:	e762      	b.n	8019e26 <_svfiprintf_r+0x46>
 8019f60:	4343      	muls	r3, r0
 8019f62:	0035      	movs	r5, r6
 8019f64:	2101      	movs	r1, #1
 8019f66:	189b      	adds	r3, r3, r2
 8019f68:	e7a4      	b.n	8019eb4 <_svfiprintf_r+0xd4>
 8019f6a:	2300      	movs	r3, #0
 8019f6c:	200a      	movs	r0, #10
 8019f6e:	0019      	movs	r1, r3
 8019f70:	3501      	adds	r5, #1
 8019f72:	6063      	str	r3, [r4, #4]
 8019f74:	782a      	ldrb	r2, [r5, #0]
 8019f76:	1c6e      	adds	r6, r5, #1
 8019f78:	3a30      	subs	r2, #48	@ 0x30
 8019f7a:	2a09      	cmp	r2, #9
 8019f7c:	d903      	bls.n	8019f86 <_svfiprintf_r+0x1a6>
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d0c8      	beq.n	8019f14 <_svfiprintf_r+0x134>
 8019f82:	9109      	str	r1, [sp, #36]	@ 0x24
 8019f84:	e7c6      	b.n	8019f14 <_svfiprintf_r+0x134>
 8019f86:	4341      	muls	r1, r0
 8019f88:	0035      	movs	r5, r6
 8019f8a:	2301      	movs	r3, #1
 8019f8c:	1889      	adds	r1, r1, r2
 8019f8e:	e7f1      	b.n	8019f74 <_svfiprintf_r+0x194>
 8019f90:	aa07      	add	r2, sp, #28
 8019f92:	9200      	str	r2, [sp, #0]
 8019f94:	0021      	movs	r1, r4
 8019f96:	003a      	movs	r2, r7
 8019f98:	4b0f      	ldr	r3, [pc, #60]	@ (8019fd8 <_svfiprintf_r+0x1f8>)
 8019f9a:	9803      	ldr	r0, [sp, #12]
 8019f9c:	e000      	b.n	8019fa0 <_svfiprintf_r+0x1c0>
 8019f9e:	bf00      	nop
 8019fa0:	9004      	str	r0, [sp, #16]
 8019fa2:	9b04      	ldr	r3, [sp, #16]
 8019fa4:	3301      	adds	r3, #1
 8019fa6:	d1d6      	bne.n	8019f56 <_svfiprintf_r+0x176>
 8019fa8:	89bb      	ldrh	r3, [r7, #12]
 8019faa:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8019fac:	065b      	lsls	r3, r3, #25
 8019fae:	d500      	bpl.n	8019fb2 <_svfiprintf_r+0x1d2>
 8019fb0:	e72c      	b.n	8019e0c <_svfiprintf_r+0x2c>
 8019fb2:	b021      	add	sp, #132	@ 0x84
 8019fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019fb6:	aa07      	add	r2, sp, #28
 8019fb8:	9200      	str	r2, [sp, #0]
 8019fba:	0021      	movs	r1, r4
 8019fbc:	003a      	movs	r2, r7
 8019fbe:	4b06      	ldr	r3, [pc, #24]	@ (8019fd8 <_svfiprintf_r+0x1f8>)
 8019fc0:	9803      	ldr	r0, [sp, #12]
 8019fc2:	f000 f87b 	bl	801a0bc <_printf_i>
 8019fc6:	e7eb      	b.n	8019fa0 <_svfiprintf_r+0x1c0>
 8019fc8:	0801b6c4 	.word	0x0801b6c4
 8019fcc:	0801b6ca 	.word	0x0801b6ca
 8019fd0:	0801b6ce 	.word	0x0801b6ce
 8019fd4:	00000000 	.word	0x00000000
 8019fd8:	08019d21 	.word	0x08019d21

08019fdc <_printf_common>:
 8019fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019fde:	0016      	movs	r6, r2
 8019fe0:	9301      	str	r3, [sp, #4]
 8019fe2:	688a      	ldr	r2, [r1, #8]
 8019fe4:	690b      	ldr	r3, [r1, #16]
 8019fe6:	000c      	movs	r4, r1
 8019fe8:	9000      	str	r0, [sp, #0]
 8019fea:	4293      	cmp	r3, r2
 8019fec:	da00      	bge.n	8019ff0 <_printf_common+0x14>
 8019fee:	0013      	movs	r3, r2
 8019ff0:	0022      	movs	r2, r4
 8019ff2:	6033      	str	r3, [r6, #0]
 8019ff4:	3243      	adds	r2, #67	@ 0x43
 8019ff6:	7812      	ldrb	r2, [r2, #0]
 8019ff8:	2a00      	cmp	r2, #0
 8019ffa:	d001      	beq.n	801a000 <_printf_common+0x24>
 8019ffc:	3301      	adds	r3, #1
 8019ffe:	6033      	str	r3, [r6, #0]
 801a000:	6823      	ldr	r3, [r4, #0]
 801a002:	069b      	lsls	r3, r3, #26
 801a004:	d502      	bpl.n	801a00c <_printf_common+0x30>
 801a006:	6833      	ldr	r3, [r6, #0]
 801a008:	3302      	adds	r3, #2
 801a00a:	6033      	str	r3, [r6, #0]
 801a00c:	6822      	ldr	r2, [r4, #0]
 801a00e:	2306      	movs	r3, #6
 801a010:	0015      	movs	r5, r2
 801a012:	401d      	ands	r5, r3
 801a014:	421a      	tst	r2, r3
 801a016:	d027      	beq.n	801a068 <_printf_common+0x8c>
 801a018:	0023      	movs	r3, r4
 801a01a:	3343      	adds	r3, #67	@ 0x43
 801a01c:	781b      	ldrb	r3, [r3, #0]
 801a01e:	1e5a      	subs	r2, r3, #1
 801a020:	4193      	sbcs	r3, r2
 801a022:	6822      	ldr	r2, [r4, #0]
 801a024:	0692      	lsls	r2, r2, #26
 801a026:	d430      	bmi.n	801a08a <_printf_common+0xae>
 801a028:	0022      	movs	r2, r4
 801a02a:	9901      	ldr	r1, [sp, #4]
 801a02c:	9800      	ldr	r0, [sp, #0]
 801a02e:	9d08      	ldr	r5, [sp, #32]
 801a030:	3243      	adds	r2, #67	@ 0x43
 801a032:	47a8      	blx	r5
 801a034:	3001      	adds	r0, #1
 801a036:	d025      	beq.n	801a084 <_printf_common+0xa8>
 801a038:	2206      	movs	r2, #6
 801a03a:	6823      	ldr	r3, [r4, #0]
 801a03c:	2500      	movs	r5, #0
 801a03e:	4013      	ands	r3, r2
 801a040:	2b04      	cmp	r3, #4
 801a042:	d105      	bne.n	801a050 <_printf_common+0x74>
 801a044:	6833      	ldr	r3, [r6, #0]
 801a046:	68e5      	ldr	r5, [r4, #12]
 801a048:	1aed      	subs	r5, r5, r3
 801a04a:	43eb      	mvns	r3, r5
 801a04c:	17db      	asrs	r3, r3, #31
 801a04e:	401d      	ands	r5, r3
 801a050:	68a3      	ldr	r3, [r4, #8]
 801a052:	6922      	ldr	r2, [r4, #16]
 801a054:	4293      	cmp	r3, r2
 801a056:	dd01      	ble.n	801a05c <_printf_common+0x80>
 801a058:	1a9b      	subs	r3, r3, r2
 801a05a:	18ed      	adds	r5, r5, r3
 801a05c:	2600      	movs	r6, #0
 801a05e:	42b5      	cmp	r5, r6
 801a060:	d120      	bne.n	801a0a4 <_printf_common+0xc8>
 801a062:	2000      	movs	r0, #0
 801a064:	e010      	b.n	801a088 <_printf_common+0xac>
 801a066:	3501      	adds	r5, #1
 801a068:	68e3      	ldr	r3, [r4, #12]
 801a06a:	6832      	ldr	r2, [r6, #0]
 801a06c:	1a9b      	subs	r3, r3, r2
 801a06e:	42ab      	cmp	r3, r5
 801a070:	ddd2      	ble.n	801a018 <_printf_common+0x3c>
 801a072:	0022      	movs	r2, r4
 801a074:	2301      	movs	r3, #1
 801a076:	9901      	ldr	r1, [sp, #4]
 801a078:	9800      	ldr	r0, [sp, #0]
 801a07a:	9f08      	ldr	r7, [sp, #32]
 801a07c:	3219      	adds	r2, #25
 801a07e:	47b8      	blx	r7
 801a080:	3001      	adds	r0, #1
 801a082:	d1f0      	bne.n	801a066 <_printf_common+0x8a>
 801a084:	2001      	movs	r0, #1
 801a086:	4240      	negs	r0, r0
 801a088:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a08a:	2030      	movs	r0, #48	@ 0x30
 801a08c:	18e1      	adds	r1, r4, r3
 801a08e:	3143      	adds	r1, #67	@ 0x43
 801a090:	7008      	strb	r0, [r1, #0]
 801a092:	0021      	movs	r1, r4
 801a094:	1c5a      	adds	r2, r3, #1
 801a096:	3145      	adds	r1, #69	@ 0x45
 801a098:	7809      	ldrb	r1, [r1, #0]
 801a09a:	18a2      	adds	r2, r4, r2
 801a09c:	3243      	adds	r2, #67	@ 0x43
 801a09e:	3302      	adds	r3, #2
 801a0a0:	7011      	strb	r1, [r2, #0]
 801a0a2:	e7c1      	b.n	801a028 <_printf_common+0x4c>
 801a0a4:	0022      	movs	r2, r4
 801a0a6:	2301      	movs	r3, #1
 801a0a8:	9901      	ldr	r1, [sp, #4]
 801a0aa:	9800      	ldr	r0, [sp, #0]
 801a0ac:	9f08      	ldr	r7, [sp, #32]
 801a0ae:	321a      	adds	r2, #26
 801a0b0:	47b8      	blx	r7
 801a0b2:	3001      	adds	r0, #1
 801a0b4:	d0e6      	beq.n	801a084 <_printf_common+0xa8>
 801a0b6:	3601      	adds	r6, #1
 801a0b8:	e7d1      	b.n	801a05e <_printf_common+0x82>
	...

0801a0bc <_printf_i>:
 801a0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0be:	b08b      	sub	sp, #44	@ 0x2c
 801a0c0:	9206      	str	r2, [sp, #24]
 801a0c2:	000a      	movs	r2, r1
 801a0c4:	3243      	adds	r2, #67	@ 0x43
 801a0c6:	9307      	str	r3, [sp, #28]
 801a0c8:	9005      	str	r0, [sp, #20]
 801a0ca:	9203      	str	r2, [sp, #12]
 801a0cc:	7e0a      	ldrb	r2, [r1, #24]
 801a0ce:	000c      	movs	r4, r1
 801a0d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a0d2:	2a78      	cmp	r2, #120	@ 0x78
 801a0d4:	d809      	bhi.n	801a0ea <_printf_i+0x2e>
 801a0d6:	2a62      	cmp	r2, #98	@ 0x62
 801a0d8:	d80b      	bhi.n	801a0f2 <_printf_i+0x36>
 801a0da:	2a00      	cmp	r2, #0
 801a0dc:	d100      	bne.n	801a0e0 <_printf_i+0x24>
 801a0de:	e0bc      	b.n	801a25a <_printf_i+0x19e>
 801a0e0:	497b      	ldr	r1, [pc, #492]	@ (801a2d0 <_printf_i+0x214>)
 801a0e2:	9104      	str	r1, [sp, #16]
 801a0e4:	2a58      	cmp	r2, #88	@ 0x58
 801a0e6:	d100      	bne.n	801a0ea <_printf_i+0x2e>
 801a0e8:	e090      	b.n	801a20c <_printf_i+0x150>
 801a0ea:	0025      	movs	r5, r4
 801a0ec:	3542      	adds	r5, #66	@ 0x42
 801a0ee:	702a      	strb	r2, [r5, #0]
 801a0f0:	e022      	b.n	801a138 <_printf_i+0x7c>
 801a0f2:	0010      	movs	r0, r2
 801a0f4:	3863      	subs	r0, #99	@ 0x63
 801a0f6:	2815      	cmp	r0, #21
 801a0f8:	d8f7      	bhi.n	801a0ea <_printf_i+0x2e>
 801a0fa:	f7e6 f805 	bl	8000108 <__gnu_thumb1_case_shi>
 801a0fe:	0016      	.short	0x0016
 801a100:	fff6001f 	.word	0xfff6001f
 801a104:	fff6fff6 	.word	0xfff6fff6
 801a108:	001ffff6 	.word	0x001ffff6
 801a10c:	fff6fff6 	.word	0xfff6fff6
 801a110:	fff6fff6 	.word	0xfff6fff6
 801a114:	003600a1 	.word	0x003600a1
 801a118:	fff60080 	.word	0xfff60080
 801a11c:	00b2fff6 	.word	0x00b2fff6
 801a120:	0036fff6 	.word	0x0036fff6
 801a124:	fff6fff6 	.word	0xfff6fff6
 801a128:	0084      	.short	0x0084
 801a12a:	0025      	movs	r5, r4
 801a12c:	681a      	ldr	r2, [r3, #0]
 801a12e:	3542      	adds	r5, #66	@ 0x42
 801a130:	1d11      	adds	r1, r2, #4
 801a132:	6019      	str	r1, [r3, #0]
 801a134:	6813      	ldr	r3, [r2, #0]
 801a136:	702b      	strb	r3, [r5, #0]
 801a138:	2301      	movs	r3, #1
 801a13a:	e0a0      	b.n	801a27e <_printf_i+0x1c2>
 801a13c:	6818      	ldr	r0, [r3, #0]
 801a13e:	6809      	ldr	r1, [r1, #0]
 801a140:	1d02      	adds	r2, r0, #4
 801a142:	060d      	lsls	r5, r1, #24
 801a144:	d50b      	bpl.n	801a15e <_printf_i+0xa2>
 801a146:	6806      	ldr	r6, [r0, #0]
 801a148:	601a      	str	r2, [r3, #0]
 801a14a:	2e00      	cmp	r6, #0
 801a14c:	da03      	bge.n	801a156 <_printf_i+0x9a>
 801a14e:	232d      	movs	r3, #45	@ 0x2d
 801a150:	9a03      	ldr	r2, [sp, #12]
 801a152:	4276      	negs	r6, r6
 801a154:	7013      	strb	r3, [r2, #0]
 801a156:	4b5e      	ldr	r3, [pc, #376]	@ (801a2d0 <_printf_i+0x214>)
 801a158:	270a      	movs	r7, #10
 801a15a:	9304      	str	r3, [sp, #16]
 801a15c:	e018      	b.n	801a190 <_printf_i+0xd4>
 801a15e:	6806      	ldr	r6, [r0, #0]
 801a160:	601a      	str	r2, [r3, #0]
 801a162:	0649      	lsls	r1, r1, #25
 801a164:	d5f1      	bpl.n	801a14a <_printf_i+0x8e>
 801a166:	b236      	sxth	r6, r6
 801a168:	e7ef      	b.n	801a14a <_printf_i+0x8e>
 801a16a:	6808      	ldr	r0, [r1, #0]
 801a16c:	6819      	ldr	r1, [r3, #0]
 801a16e:	c940      	ldmia	r1!, {r6}
 801a170:	0605      	lsls	r5, r0, #24
 801a172:	d402      	bmi.n	801a17a <_printf_i+0xbe>
 801a174:	0640      	lsls	r0, r0, #25
 801a176:	d500      	bpl.n	801a17a <_printf_i+0xbe>
 801a178:	b2b6      	uxth	r6, r6
 801a17a:	6019      	str	r1, [r3, #0]
 801a17c:	4b54      	ldr	r3, [pc, #336]	@ (801a2d0 <_printf_i+0x214>)
 801a17e:	270a      	movs	r7, #10
 801a180:	9304      	str	r3, [sp, #16]
 801a182:	2a6f      	cmp	r2, #111	@ 0x6f
 801a184:	d100      	bne.n	801a188 <_printf_i+0xcc>
 801a186:	3f02      	subs	r7, #2
 801a188:	0023      	movs	r3, r4
 801a18a:	2200      	movs	r2, #0
 801a18c:	3343      	adds	r3, #67	@ 0x43
 801a18e:	701a      	strb	r2, [r3, #0]
 801a190:	6863      	ldr	r3, [r4, #4]
 801a192:	60a3      	str	r3, [r4, #8]
 801a194:	2b00      	cmp	r3, #0
 801a196:	db03      	blt.n	801a1a0 <_printf_i+0xe4>
 801a198:	2104      	movs	r1, #4
 801a19a:	6822      	ldr	r2, [r4, #0]
 801a19c:	438a      	bics	r2, r1
 801a19e:	6022      	str	r2, [r4, #0]
 801a1a0:	2e00      	cmp	r6, #0
 801a1a2:	d102      	bne.n	801a1aa <_printf_i+0xee>
 801a1a4:	9d03      	ldr	r5, [sp, #12]
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	d00c      	beq.n	801a1c4 <_printf_i+0x108>
 801a1aa:	9d03      	ldr	r5, [sp, #12]
 801a1ac:	0030      	movs	r0, r6
 801a1ae:	0039      	movs	r1, r7
 801a1b0:	f7e6 f83a 	bl	8000228 <__aeabi_uidivmod>
 801a1b4:	9b04      	ldr	r3, [sp, #16]
 801a1b6:	3d01      	subs	r5, #1
 801a1b8:	5c5b      	ldrb	r3, [r3, r1]
 801a1ba:	702b      	strb	r3, [r5, #0]
 801a1bc:	0033      	movs	r3, r6
 801a1be:	0006      	movs	r6, r0
 801a1c0:	429f      	cmp	r7, r3
 801a1c2:	d9f3      	bls.n	801a1ac <_printf_i+0xf0>
 801a1c4:	2f08      	cmp	r7, #8
 801a1c6:	d109      	bne.n	801a1dc <_printf_i+0x120>
 801a1c8:	6823      	ldr	r3, [r4, #0]
 801a1ca:	07db      	lsls	r3, r3, #31
 801a1cc:	d506      	bpl.n	801a1dc <_printf_i+0x120>
 801a1ce:	6862      	ldr	r2, [r4, #4]
 801a1d0:	6923      	ldr	r3, [r4, #16]
 801a1d2:	429a      	cmp	r2, r3
 801a1d4:	dc02      	bgt.n	801a1dc <_printf_i+0x120>
 801a1d6:	2330      	movs	r3, #48	@ 0x30
 801a1d8:	3d01      	subs	r5, #1
 801a1da:	702b      	strb	r3, [r5, #0]
 801a1dc:	9b03      	ldr	r3, [sp, #12]
 801a1de:	1b5b      	subs	r3, r3, r5
 801a1e0:	6123      	str	r3, [r4, #16]
 801a1e2:	9b07      	ldr	r3, [sp, #28]
 801a1e4:	0021      	movs	r1, r4
 801a1e6:	9300      	str	r3, [sp, #0]
 801a1e8:	9805      	ldr	r0, [sp, #20]
 801a1ea:	9b06      	ldr	r3, [sp, #24]
 801a1ec:	aa09      	add	r2, sp, #36	@ 0x24
 801a1ee:	f7ff fef5 	bl	8019fdc <_printf_common>
 801a1f2:	3001      	adds	r0, #1
 801a1f4:	d148      	bne.n	801a288 <_printf_i+0x1cc>
 801a1f6:	2001      	movs	r0, #1
 801a1f8:	4240      	negs	r0, r0
 801a1fa:	b00b      	add	sp, #44	@ 0x2c
 801a1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a1fe:	2220      	movs	r2, #32
 801a200:	6809      	ldr	r1, [r1, #0]
 801a202:	430a      	orrs	r2, r1
 801a204:	6022      	str	r2, [r4, #0]
 801a206:	2278      	movs	r2, #120	@ 0x78
 801a208:	4932      	ldr	r1, [pc, #200]	@ (801a2d4 <_printf_i+0x218>)
 801a20a:	9104      	str	r1, [sp, #16]
 801a20c:	0021      	movs	r1, r4
 801a20e:	3145      	adds	r1, #69	@ 0x45
 801a210:	700a      	strb	r2, [r1, #0]
 801a212:	6819      	ldr	r1, [r3, #0]
 801a214:	6822      	ldr	r2, [r4, #0]
 801a216:	c940      	ldmia	r1!, {r6}
 801a218:	0610      	lsls	r0, r2, #24
 801a21a:	d402      	bmi.n	801a222 <_printf_i+0x166>
 801a21c:	0650      	lsls	r0, r2, #25
 801a21e:	d500      	bpl.n	801a222 <_printf_i+0x166>
 801a220:	b2b6      	uxth	r6, r6
 801a222:	6019      	str	r1, [r3, #0]
 801a224:	07d3      	lsls	r3, r2, #31
 801a226:	d502      	bpl.n	801a22e <_printf_i+0x172>
 801a228:	2320      	movs	r3, #32
 801a22a:	4313      	orrs	r3, r2
 801a22c:	6023      	str	r3, [r4, #0]
 801a22e:	2e00      	cmp	r6, #0
 801a230:	d001      	beq.n	801a236 <_printf_i+0x17a>
 801a232:	2710      	movs	r7, #16
 801a234:	e7a8      	b.n	801a188 <_printf_i+0xcc>
 801a236:	2220      	movs	r2, #32
 801a238:	6823      	ldr	r3, [r4, #0]
 801a23a:	4393      	bics	r3, r2
 801a23c:	6023      	str	r3, [r4, #0]
 801a23e:	e7f8      	b.n	801a232 <_printf_i+0x176>
 801a240:	681a      	ldr	r2, [r3, #0]
 801a242:	680d      	ldr	r5, [r1, #0]
 801a244:	1d10      	adds	r0, r2, #4
 801a246:	6949      	ldr	r1, [r1, #20]
 801a248:	6018      	str	r0, [r3, #0]
 801a24a:	6813      	ldr	r3, [r2, #0]
 801a24c:	062e      	lsls	r6, r5, #24
 801a24e:	d501      	bpl.n	801a254 <_printf_i+0x198>
 801a250:	6019      	str	r1, [r3, #0]
 801a252:	e002      	b.n	801a25a <_printf_i+0x19e>
 801a254:	066d      	lsls	r5, r5, #25
 801a256:	d5fb      	bpl.n	801a250 <_printf_i+0x194>
 801a258:	8019      	strh	r1, [r3, #0]
 801a25a:	2300      	movs	r3, #0
 801a25c:	9d03      	ldr	r5, [sp, #12]
 801a25e:	6123      	str	r3, [r4, #16]
 801a260:	e7bf      	b.n	801a1e2 <_printf_i+0x126>
 801a262:	681a      	ldr	r2, [r3, #0]
 801a264:	1d11      	adds	r1, r2, #4
 801a266:	6019      	str	r1, [r3, #0]
 801a268:	6815      	ldr	r5, [r2, #0]
 801a26a:	2100      	movs	r1, #0
 801a26c:	0028      	movs	r0, r5
 801a26e:	6862      	ldr	r2, [r4, #4]
 801a270:	f000 f858 	bl	801a324 <memchr>
 801a274:	2800      	cmp	r0, #0
 801a276:	d001      	beq.n	801a27c <_printf_i+0x1c0>
 801a278:	1b40      	subs	r0, r0, r5
 801a27a:	6060      	str	r0, [r4, #4]
 801a27c:	6863      	ldr	r3, [r4, #4]
 801a27e:	6123      	str	r3, [r4, #16]
 801a280:	2300      	movs	r3, #0
 801a282:	9a03      	ldr	r2, [sp, #12]
 801a284:	7013      	strb	r3, [r2, #0]
 801a286:	e7ac      	b.n	801a1e2 <_printf_i+0x126>
 801a288:	002a      	movs	r2, r5
 801a28a:	6923      	ldr	r3, [r4, #16]
 801a28c:	9906      	ldr	r1, [sp, #24]
 801a28e:	9805      	ldr	r0, [sp, #20]
 801a290:	9d07      	ldr	r5, [sp, #28]
 801a292:	47a8      	blx	r5
 801a294:	3001      	adds	r0, #1
 801a296:	d0ae      	beq.n	801a1f6 <_printf_i+0x13a>
 801a298:	6823      	ldr	r3, [r4, #0]
 801a29a:	079b      	lsls	r3, r3, #30
 801a29c:	d415      	bmi.n	801a2ca <_printf_i+0x20e>
 801a29e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a2a0:	68e0      	ldr	r0, [r4, #12]
 801a2a2:	4298      	cmp	r0, r3
 801a2a4:	daa9      	bge.n	801a1fa <_printf_i+0x13e>
 801a2a6:	0018      	movs	r0, r3
 801a2a8:	e7a7      	b.n	801a1fa <_printf_i+0x13e>
 801a2aa:	0022      	movs	r2, r4
 801a2ac:	2301      	movs	r3, #1
 801a2ae:	9906      	ldr	r1, [sp, #24]
 801a2b0:	9805      	ldr	r0, [sp, #20]
 801a2b2:	9e07      	ldr	r6, [sp, #28]
 801a2b4:	3219      	adds	r2, #25
 801a2b6:	47b0      	blx	r6
 801a2b8:	3001      	adds	r0, #1
 801a2ba:	d09c      	beq.n	801a1f6 <_printf_i+0x13a>
 801a2bc:	3501      	adds	r5, #1
 801a2be:	68e3      	ldr	r3, [r4, #12]
 801a2c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a2c2:	1a9b      	subs	r3, r3, r2
 801a2c4:	42ab      	cmp	r3, r5
 801a2c6:	dcf0      	bgt.n	801a2aa <_printf_i+0x1ee>
 801a2c8:	e7e9      	b.n	801a29e <_printf_i+0x1e2>
 801a2ca:	2500      	movs	r5, #0
 801a2cc:	e7f7      	b.n	801a2be <_printf_i+0x202>
 801a2ce:	46c0      	nop			@ (mov r8, r8)
 801a2d0:	0801b6d5 	.word	0x0801b6d5
 801a2d4:	0801b6e6 	.word	0x0801b6e6

0801a2d8 <memmove>:
 801a2d8:	b510      	push	{r4, lr}
 801a2da:	4288      	cmp	r0, r1
 801a2dc:	d806      	bhi.n	801a2ec <memmove+0x14>
 801a2de:	2300      	movs	r3, #0
 801a2e0:	429a      	cmp	r2, r3
 801a2e2:	d008      	beq.n	801a2f6 <memmove+0x1e>
 801a2e4:	5ccc      	ldrb	r4, [r1, r3]
 801a2e6:	54c4      	strb	r4, [r0, r3]
 801a2e8:	3301      	adds	r3, #1
 801a2ea:	e7f9      	b.n	801a2e0 <memmove+0x8>
 801a2ec:	188b      	adds	r3, r1, r2
 801a2ee:	4298      	cmp	r0, r3
 801a2f0:	d2f5      	bcs.n	801a2de <memmove+0x6>
 801a2f2:	3a01      	subs	r2, #1
 801a2f4:	d200      	bcs.n	801a2f8 <memmove+0x20>
 801a2f6:	bd10      	pop	{r4, pc}
 801a2f8:	5c8b      	ldrb	r3, [r1, r2]
 801a2fa:	5483      	strb	r3, [r0, r2]
 801a2fc:	e7f9      	b.n	801a2f2 <memmove+0x1a>
	...

0801a300 <_sbrk_r>:
 801a300:	2300      	movs	r3, #0
 801a302:	b570      	push	{r4, r5, r6, lr}
 801a304:	4d06      	ldr	r5, [pc, #24]	@ (801a320 <_sbrk_r+0x20>)
 801a306:	0004      	movs	r4, r0
 801a308:	0008      	movs	r0, r1
 801a30a:	602b      	str	r3, [r5, #0]
 801a30c:	f000 f992 	bl	801a634 <_sbrk>
 801a310:	1c43      	adds	r3, r0, #1
 801a312:	d103      	bne.n	801a31c <_sbrk_r+0x1c>
 801a314:	682b      	ldr	r3, [r5, #0]
 801a316:	2b00      	cmp	r3, #0
 801a318:	d000      	beq.n	801a31c <_sbrk_r+0x1c>
 801a31a:	6023      	str	r3, [r4, #0]
 801a31c:	bd70      	pop	{r4, r5, r6, pc}
 801a31e:	46c0      	nop			@ (mov r8, r8)
 801a320:	20001634 	.word	0x20001634

0801a324 <memchr>:
 801a324:	b2c9      	uxtb	r1, r1
 801a326:	1882      	adds	r2, r0, r2
 801a328:	4290      	cmp	r0, r2
 801a32a:	d101      	bne.n	801a330 <memchr+0xc>
 801a32c:	2000      	movs	r0, #0
 801a32e:	4770      	bx	lr
 801a330:	7803      	ldrb	r3, [r0, #0]
 801a332:	428b      	cmp	r3, r1
 801a334:	d0fb      	beq.n	801a32e <memchr+0xa>
 801a336:	3001      	adds	r0, #1
 801a338:	e7f6      	b.n	801a328 <memchr+0x4>

0801a33a <memcpy>:
 801a33a:	2300      	movs	r3, #0
 801a33c:	b510      	push	{r4, lr}
 801a33e:	429a      	cmp	r2, r3
 801a340:	d100      	bne.n	801a344 <memcpy+0xa>
 801a342:	bd10      	pop	{r4, pc}
 801a344:	5ccc      	ldrb	r4, [r1, r3]
 801a346:	54c4      	strb	r4, [r0, r3]
 801a348:	3301      	adds	r3, #1
 801a34a:	e7f8      	b.n	801a33e <memcpy+0x4>

0801a34c <_realloc_r>:
 801a34c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a34e:	0006      	movs	r6, r0
 801a350:	000c      	movs	r4, r1
 801a352:	0015      	movs	r5, r2
 801a354:	2900      	cmp	r1, #0
 801a356:	d105      	bne.n	801a364 <_realloc_r+0x18>
 801a358:	0011      	movs	r1, r2
 801a35a:	f7ff fc51 	bl	8019c00 <_malloc_r>
 801a35e:	0004      	movs	r4, r0
 801a360:	0020      	movs	r0, r4
 801a362:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a364:	2a00      	cmp	r2, #0
 801a366:	d103      	bne.n	801a370 <_realloc_r+0x24>
 801a368:	f7ff fbde 	bl	8019b28 <_free_r>
 801a36c:	2400      	movs	r4, #0
 801a36e:	e7f7      	b.n	801a360 <_realloc_r+0x14>
 801a370:	f000 f81b 	bl	801a3aa <_malloc_usable_size_r>
 801a374:	0007      	movs	r7, r0
 801a376:	4285      	cmp	r5, r0
 801a378:	d802      	bhi.n	801a380 <_realloc_r+0x34>
 801a37a:	0843      	lsrs	r3, r0, #1
 801a37c:	42ab      	cmp	r3, r5
 801a37e:	d3ef      	bcc.n	801a360 <_realloc_r+0x14>
 801a380:	0029      	movs	r1, r5
 801a382:	0030      	movs	r0, r6
 801a384:	f7ff fc3c 	bl	8019c00 <_malloc_r>
 801a388:	9001      	str	r0, [sp, #4]
 801a38a:	2800      	cmp	r0, #0
 801a38c:	d0ee      	beq.n	801a36c <_realloc_r+0x20>
 801a38e:	002a      	movs	r2, r5
 801a390:	42bd      	cmp	r5, r7
 801a392:	d900      	bls.n	801a396 <_realloc_r+0x4a>
 801a394:	003a      	movs	r2, r7
 801a396:	0021      	movs	r1, r4
 801a398:	9801      	ldr	r0, [sp, #4]
 801a39a:	f7ff ffce 	bl	801a33a <memcpy>
 801a39e:	0021      	movs	r1, r4
 801a3a0:	0030      	movs	r0, r6
 801a3a2:	f7ff fbc1 	bl	8019b28 <_free_r>
 801a3a6:	9c01      	ldr	r4, [sp, #4]
 801a3a8:	e7da      	b.n	801a360 <_realloc_r+0x14>

0801a3aa <_malloc_usable_size_r>:
 801a3aa:	1f0b      	subs	r3, r1, #4
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	1f18      	subs	r0, r3, #4
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	da01      	bge.n	801a3b8 <_malloc_usable_size_r+0xe>
 801a3b4:	580b      	ldr	r3, [r1, r0]
 801a3b6:	18c0      	adds	r0, r0, r3
 801a3b8:	4770      	bx	lr
	...

0801a3bc <ceil>:
 801a3bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a3be:	004b      	lsls	r3, r1, #1
 801a3c0:	4a34      	ldr	r2, [pc, #208]	@ (801a494 <ceil+0xd8>)
 801a3c2:	0d5b      	lsrs	r3, r3, #21
 801a3c4:	189e      	adds	r6, r3, r2
 801a3c6:	000d      	movs	r5, r1
 801a3c8:	0004      	movs	r4, r0
 801a3ca:	9001      	str	r0, [sp, #4]
 801a3cc:	2e13      	cmp	r6, #19
 801a3ce:	dc2e      	bgt.n	801a42e <ceil+0x72>
 801a3d0:	2e00      	cmp	r6, #0
 801a3d2:	da11      	bge.n	801a3f8 <ceil+0x3c>
 801a3d4:	4a30      	ldr	r2, [pc, #192]	@ (801a498 <ceil+0xdc>)
 801a3d6:	4b31      	ldr	r3, [pc, #196]	@ (801a49c <ceil+0xe0>)
 801a3d8:	f7e6 feda 	bl	8001190 <__aeabi_dadd>
 801a3dc:	2200      	movs	r2, #0
 801a3de:	2300      	movs	r3, #0
 801a3e0:	f7e6 f83c 	bl	800045c <__aeabi_dcmpgt>
 801a3e4:	2800      	cmp	r0, #0
 801a3e6:	d01f      	beq.n	801a428 <ceil+0x6c>
 801a3e8:	2d00      	cmp	r5, #0
 801a3ea:	db4f      	blt.n	801a48c <ceil+0xd0>
 801a3ec:	432c      	orrs	r4, r5
 801a3ee:	1e25      	subs	r5, r4, #0
 801a3f0:	d01a      	beq.n	801a428 <ceil+0x6c>
 801a3f2:	2400      	movs	r4, #0
 801a3f4:	4d2a      	ldr	r5, [pc, #168]	@ (801a4a0 <ceil+0xe4>)
 801a3f6:	e017      	b.n	801a428 <ceil+0x6c>
 801a3f8:	4f2a      	ldr	r7, [pc, #168]	@ (801a4a4 <ceil+0xe8>)
 801a3fa:	4137      	asrs	r7, r6
 801a3fc:	003b      	movs	r3, r7
 801a3fe:	400b      	ands	r3, r1
 801a400:	4303      	orrs	r3, r0
 801a402:	d01e      	beq.n	801a442 <ceil+0x86>
 801a404:	4a24      	ldr	r2, [pc, #144]	@ (801a498 <ceil+0xdc>)
 801a406:	4b25      	ldr	r3, [pc, #148]	@ (801a49c <ceil+0xe0>)
 801a408:	f7e6 fec2 	bl	8001190 <__aeabi_dadd>
 801a40c:	2200      	movs	r2, #0
 801a40e:	2300      	movs	r3, #0
 801a410:	f7e6 f824 	bl	800045c <__aeabi_dcmpgt>
 801a414:	2800      	cmp	r0, #0
 801a416:	d007      	beq.n	801a428 <ceil+0x6c>
 801a418:	2d00      	cmp	r5, #0
 801a41a:	dd03      	ble.n	801a424 <ceil+0x68>
 801a41c:	2380      	movs	r3, #128	@ 0x80
 801a41e:	035b      	lsls	r3, r3, #13
 801a420:	4133      	asrs	r3, r6
 801a422:	18ed      	adds	r5, r5, r3
 801a424:	2400      	movs	r4, #0
 801a426:	43bd      	bics	r5, r7
 801a428:	0029      	movs	r1, r5
 801a42a:	0020      	movs	r0, r4
 801a42c:	e009      	b.n	801a442 <ceil+0x86>
 801a42e:	2e33      	cmp	r6, #51	@ 0x33
 801a430:	dd09      	ble.n	801a446 <ceil+0x8a>
 801a432:	2380      	movs	r3, #128	@ 0x80
 801a434:	00db      	lsls	r3, r3, #3
 801a436:	429e      	cmp	r6, r3
 801a438:	d103      	bne.n	801a442 <ceil+0x86>
 801a43a:	0002      	movs	r2, r0
 801a43c:	000b      	movs	r3, r1
 801a43e:	f7e6 fea7 	bl	8001190 <__aeabi_dadd>
 801a442:	b003      	add	sp, #12
 801a444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a446:	2701      	movs	r7, #1
 801a448:	4a17      	ldr	r2, [pc, #92]	@ (801a4a8 <ceil+0xec>)
 801a44a:	427f      	negs	r7, r7
 801a44c:	189b      	adds	r3, r3, r2
 801a44e:	40df      	lsrs	r7, r3
 801a450:	4207      	tst	r7, r0
 801a452:	d0f6      	beq.n	801a442 <ceil+0x86>
 801a454:	4a10      	ldr	r2, [pc, #64]	@ (801a498 <ceil+0xdc>)
 801a456:	4b11      	ldr	r3, [pc, #68]	@ (801a49c <ceil+0xe0>)
 801a458:	f7e6 fe9a 	bl	8001190 <__aeabi_dadd>
 801a45c:	2200      	movs	r2, #0
 801a45e:	2300      	movs	r3, #0
 801a460:	f7e5 fffc 	bl	800045c <__aeabi_dcmpgt>
 801a464:	2800      	cmp	r0, #0
 801a466:	d0df      	beq.n	801a428 <ceil+0x6c>
 801a468:	2d00      	cmp	r5, #0
 801a46a:	dd02      	ble.n	801a472 <ceil+0xb6>
 801a46c:	2e14      	cmp	r6, #20
 801a46e:	d102      	bne.n	801a476 <ceil+0xba>
 801a470:	3501      	adds	r5, #1
 801a472:	43bc      	bics	r4, r7
 801a474:	e7d8      	b.n	801a428 <ceil+0x6c>
 801a476:	2234      	movs	r2, #52	@ 0x34
 801a478:	2301      	movs	r3, #1
 801a47a:	1b92      	subs	r2, r2, r6
 801a47c:	4093      	lsls	r3, r2
 801a47e:	18e4      	adds	r4, r4, r3
 801a480:	9b01      	ldr	r3, [sp, #4]
 801a482:	429c      	cmp	r4, r3
 801a484:	419b      	sbcs	r3, r3
 801a486:	425b      	negs	r3, r3
 801a488:	18ed      	adds	r5, r5, r3
 801a48a:	e7f2      	b.n	801a472 <ceil+0xb6>
 801a48c:	2580      	movs	r5, #128	@ 0x80
 801a48e:	2400      	movs	r4, #0
 801a490:	062d      	lsls	r5, r5, #24
 801a492:	e7c9      	b.n	801a428 <ceil+0x6c>
 801a494:	fffffc01 	.word	0xfffffc01
 801a498:	8800759c 	.word	0x8800759c
 801a49c:	7e37e43c 	.word	0x7e37e43c
 801a4a0:	3ff00000 	.word	0x3ff00000
 801a4a4:	000fffff 	.word	0x000fffff
 801a4a8:	fffffbed 	.word	0xfffffbed

0801a4ac <floor>:
 801a4ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a4ae:	004b      	lsls	r3, r1, #1
 801a4b0:	4a36      	ldr	r2, [pc, #216]	@ (801a58c <floor+0xe0>)
 801a4b2:	0d5b      	lsrs	r3, r3, #21
 801a4b4:	189e      	adds	r6, r3, r2
 801a4b6:	000c      	movs	r4, r1
 801a4b8:	0005      	movs	r5, r0
 801a4ba:	9001      	str	r0, [sp, #4]
 801a4bc:	2e13      	cmp	r6, #19
 801a4be:	dc2f      	bgt.n	801a520 <floor+0x74>
 801a4c0:	2e00      	cmp	r6, #0
 801a4c2:	da14      	bge.n	801a4ee <floor+0x42>
 801a4c4:	4a32      	ldr	r2, [pc, #200]	@ (801a590 <floor+0xe4>)
 801a4c6:	4b33      	ldr	r3, [pc, #204]	@ (801a594 <floor+0xe8>)
 801a4c8:	f7e6 fe62 	bl	8001190 <__aeabi_dadd>
 801a4cc:	2200      	movs	r2, #0
 801a4ce:	2300      	movs	r3, #0
 801a4d0:	f7e5 ffc4 	bl	800045c <__aeabi_dcmpgt>
 801a4d4:	2800      	cmp	r0, #0
 801a4d6:	d007      	beq.n	801a4e8 <floor+0x3c>
 801a4d8:	2c00      	cmp	r4, #0
 801a4da:	da50      	bge.n	801a57e <floor+0xd2>
 801a4dc:	0064      	lsls	r4, r4, #1
 801a4de:	0864      	lsrs	r4, r4, #1
 801a4e0:	4325      	orrs	r5, r4
 801a4e2:	d14f      	bne.n	801a584 <floor+0xd8>
 801a4e4:	2480      	movs	r4, #128	@ 0x80
 801a4e6:	0624      	lsls	r4, r4, #24
 801a4e8:	0021      	movs	r1, r4
 801a4ea:	0028      	movs	r0, r5
 801a4ec:	e022      	b.n	801a534 <floor+0x88>
 801a4ee:	4f2a      	ldr	r7, [pc, #168]	@ (801a598 <floor+0xec>)
 801a4f0:	4137      	asrs	r7, r6
 801a4f2:	003b      	movs	r3, r7
 801a4f4:	400b      	ands	r3, r1
 801a4f6:	4303      	orrs	r3, r0
 801a4f8:	d01c      	beq.n	801a534 <floor+0x88>
 801a4fa:	4a25      	ldr	r2, [pc, #148]	@ (801a590 <floor+0xe4>)
 801a4fc:	4b25      	ldr	r3, [pc, #148]	@ (801a594 <floor+0xe8>)
 801a4fe:	f7e6 fe47 	bl	8001190 <__aeabi_dadd>
 801a502:	2200      	movs	r2, #0
 801a504:	2300      	movs	r3, #0
 801a506:	f7e5 ffa9 	bl	800045c <__aeabi_dcmpgt>
 801a50a:	2800      	cmp	r0, #0
 801a50c:	d0ec      	beq.n	801a4e8 <floor+0x3c>
 801a50e:	2c00      	cmp	r4, #0
 801a510:	da03      	bge.n	801a51a <floor+0x6e>
 801a512:	2380      	movs	r3, #128	@ 0x80
 801a514:	035b      	lsls	r3, r3, #13
 801a516:	4133      	asrs	r3, r6
 801a518:	18e4      	adds	r4, r4, r3
 801a51a:	2500      	movs	r5, #0
 801a51c:	43bc      	bics	r4, r7
 801a51e:	e7e3      	b.n	801a4e8 <floor+0x3c>
 801a520:	2e33      	cmp	r6, #51	@ 0x33
 801a522:	dd09      	ble.n	801a538 <floor+0x8c>
 801a524:	2380      	movs	r3, #128	@ 0x80
 801a526:	00db      	lsls	r3, r3, #3
 801a528:	429e      	cmp	r6, r3
 801a52a:	d103      	bne.n	801a534 <floor+0x88>
 801a52c:	0002      	movs	r2, r0
 801a52e:	000b      	movs	r3, r1
 801a530:	f7e6 fe2e 	bl	8001190 <__aeabi_dadd>
 801a534:	b003      	add	sp, #12
 801a536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a538:	2701      	movs	r7, #1
 801a53a:	4a18      	ldr	r2, [pc, #96]	@ (801a59c <floor+0xf0>)
 801a53c:	427f      	negs	r7, r7
 801a53e:	189b      	adds	r3, r3, r2
 801a540:	40df      	lsrs	r7, r3
 801a542:	4238      	tst	r0, r7
 801a544:	d0f6      	beq.n	801a534 <floor+0x88>
 801a546:	4a12      	ldr	r2, [pc, #72]	@ (801a590 <floor+0xe4>)
 801a548:	4b12      	ldr	r3, [pc, #72]	@ (801a594 <floor+0xe8>)
 801a54a:	f7e6 fe21 	bl	8001190 <__aeabi_dadd>
 801a54e:	2200      	movs	r2, #0
 801a550:	2300      	movs	r3, #0
 801a552:	f7e5 ff83 	bl	800045c <__aeabi_dcmpgt>
 801a556:	2800      	cmp	r0, #0
 801a558:	d0c6      	beq.n	801a4e8 <floor+0x3c>
 801a55a:	2c00      	cmp	r4, #0
 801a55c:	da02      	bge.n	801a564 <floor+0xb8>
 801a55e:	2e14      	cmp	r6, #20
 801a560:	d102      	bne.n	801a568 <floor+0xbc>
 801a562:	3401      	adds	r4, #1
 801a564:	43bd      	bics	r5, r7
 801a566:	e7bf      	b.n	801a4e8 <floor+0x3c>
 801a568:	2234      	movs	r2, #52	@ 0x34
 801a56a:	2301      	movs	r3, #1
 801a56c:	1b92      	subs	r2, r2, r6
 801a56e:	4093      	lsls	r3, r2
 801a570:	18ed      	adds	r5, r5, r3
 801a572:	9b01      	ldr	r3, [sp, #4]
 801a574:	429d      	cmp	r5, r3
 801a576:	419b      	sbcs	r3, r3
 801a578:	425b      	negs	r3, r3
 801a57a:	18e4      	adds	r4, r4, r3
 801a57c:	e7f2      	b.n	801a564 <floor+0xb8>
 801a57e:	2500      	movs	r5, #0
 801a580:	002c      	movs	r4, r5
 801a582:	e7b1      	b.n	801a4e8 <floor+0x3c>
 801a584:	2500      	movs	r5, #0
 801a586:	4c06      	ldr	r4, [pc, #24]	@ (801a5a0 <floor+0xf4>)
 801a588:	e7ae      	b.n	801a4e8 <floor+0x3c>
 801a58a:	46c0      	nop			@ (mov r8, r8)
 801a58c:	fffffc01 	.word	0xfffffc01
 801a590:	8800759c 	.word	0x8800759c
 801a594:	7e37e43c 	.word	0x7e37e43c
 801a598:	000fffff 	.word	0x000fffff
 801a59c:	fffffbed 	.word	0xfffffbed
 801a5a0:	bff00000 	.word	0xbff00000

0801a5a4 <round>:
 801a5a4:	b570      	push	{r4, r5, r6, lr}
 801a5a6:	4b1f      	ldr	r3, [pc, #124]	@ (801a624 <round+0x80>)
 801a5a8:	004d      	lsls	r5, r1, #1
 801a5aa:	0d6d      	lsrs	r5, r5, #21
 801a5ac:	18eb      	adds	r3, r5, r3
 801a5ae:	000a      	movs	r2, r1
 801a5b0:	0004      	movs	r4, r0
 801a5b2:	2b13      	cmp	r3, #19
 801a5b4:	dc18      	bgt.n	801a5e8 <round+0x44>
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	da0a      	bge.n	801a5d0 <round+0x2c>
 801a5ba:	0fc9      	lsrs	r1, r1, #31
 801a5bc:	07c9      	lsls	r1, r1, #31
 801a5be:	000a      	movs	r2, r1
 801a5c0:	3301      	adds	r3, #1
 801a5c2:	d101      	bne.n	801a5c8 <round+0x24>
 801a5c4:	4a18      	ldr	r2, [pc, #96]	@ (801a628 <round+0x84>)
 801a5c6:	430a      	orrs	r2, r1
 801a5c8:	2300      	movs	r3, #0
 801a5ca:	0011      	movs	r1, r2
 801a5cc:	0018      	movs	r0, r3
 801a5ce:	e015      	b.n	801a5fc <round+0x58>
 801a5d0:	4d16      	ldr	r5, [pc, #88]	@ (801a62c <round+0x88>)
 801a5d2:	000e      	movs	r6, r1
 801a5d4:	411d      	asrs	r5, r3
 801a5d6:	402e      	ands	r6, r5
 801a5d8:	4334      	orrs	r4, r6
 801a5da:	d00f      	beq.n	801a5fc <round+0x58>
 801a5dc:	2180      	movs	r1, #128	@ 0x80
 801a5de:	0309      	lsls	r1, r1, #12
 801a5e0:	4119      	asrs	r1, r3
 801a5e2:	188a      	adds	r2, r1, r2
 801a5e4:	43aa      	bics	r2, r5
 801a5e6:	e7ef      	b.n	801a5c8 <round+0x24>
 801a5e8:	2b33      	cmp	r3, #51	@ 0x33
 801a5ea:	dd08      	ble.n	801a5fe <round+0x5a>
 801a5ec:	2280      	movs	r2, #128	@ 0x80
 801a5ee:	00d2      	lsls	r2, r2, #3
 801a5f0:	4293      	cmp	r3, r2
 801a5f2:	d103      	bne.n	801a5fc <round+0x58>
 801a5f4:	0002      	movs	r2, r0
 801a5f6:	000b      	movs	r3, r1
 801a5f8:	f7e6 fdca 	bl	8001190 <__aeabi_dadd>
 801a5fc:	bd70      	pop	{r4, r5, r6, pc}
 801a5fe:	4e0c      	ldr	r6, [pc, #48]	@ (801a630 <round+0x8c>)
 801a600:	19ae      	adds	r6, r5, r6
 801a602:	2501      	movs	r5, #1
 801a604:	426d      	negs	r5, r5
 801a606:	40f5      	lsrs	r5, r6
 801a608:	4228      	tst	r0, r5
 801a60a:	d0f7      	beq.n	801a5fc <round+0x58>
 801a60c:	2133      	movs	r1, #51	@ 0x33
 801a60e:	1ac9      	subs	r1, r1, r3
 801a610:	2301      	movs	r3, #1
 801a612:	408b      	lsls	r3, r1
 801a614:	181b      	adds	r3, r3, r0
 801a616:	4283      	cmp	r3, r0
 801a618:	41a4      	sbcs	r4, r4
 801a61a:	4264      	negs	r4, r4
 801a61c:	1912      	adds	r2, r2, r4
 801a61e:	43ab      	bics	r3, r5
 801a620:	e7d3      	b.n	801a5ca <round+0x26>
 801a622:	46c0      	nop			@ (mov r8, r8)
 801a624:	fffffc01 	.word	0xfffffc01
 801a628:	3ff00000 	.word	0x3ff00000
 801a62c:	000fffff 	.word	0x000fffff
 801a630:	fffffbed 	.word	0xfffffbed

0801a634 <_sbrk>:
 801a634:	4a05      	ldr	r2, [pc, #20]	@ (801a64c <_sbrk+0x18>)
 801a636:	0003      	movs	r3, r0
 801a638:	6811      	ldr	r1, [r2, #0]
 801a63a:	2900      	cmp	r1, #0
 801a63c:	d101      	bne.n	801a642 <_sbrk+0xe>
 801a63e:	4904      	ldr	r1, [pc, #16]	@ (801a650 <_sbrk+0x1c>)
 801a640:	6011      	str	r1, [r2, #0]
 801a642:	6810      	ldr	r0, [r2, #0]
 801a644:	18c3      	adds	r3, r0, r3
 801a646:	6013      	str	r3, [r2, #0]
 801a648:	4770      	bx	lr
 801a64a:	46c0      	nop			@ (mov r8, r8)
 801a64c:	20001644 	.word	0x20001644
 801a650:	20001648 	.word	0x20001648

0801a654 <_init>:
 801a654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a656:	46c0      	nop			@ (mov r8, r8)
 801a658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a65a:	bc08      	pop	{r3}
 801a65c:	469e      	mov	lr, r3
 801a65e:	4770      	bx	lr

0801a660 <_fini>:
 801a660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a662:	46c0      	nop			@ (mov r8, r8)
 801a664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a666:	bc08      	pop	{r3}
 801a668:	469e      	mov	lr, r3
 801a66a:	4770      	bx	lr
