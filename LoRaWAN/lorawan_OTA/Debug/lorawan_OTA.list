
lorawan_OTA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a48c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001068  0801a54c  0801a54c  0001b54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b5b4  0801b5b4  0001d100  2**0
                  CONTENTS
  4 .ARM          00000008  0801b5b4  0801b5b4  0001c5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b5bc  0801b5bc  0001d100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b5bc  0801b5bc  0001c5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b5c0  0801b5c0  0001c5c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0801b5c4  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001504  20000100  0801b6c4  0001d100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001604  0801b6c4  0001d604  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001d100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027a83  00000000  00000000  0001d128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000072cf  00000000  00000000  00044bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fd8  00000000  00000000  0004be80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000184c  00000000  00000000  0004de58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000232de  00000000  00000000  0004f6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034ff0  00000000  00000000  00072982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7ce0  00000000  00000000  000a7972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f652  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077dc  00000000  00000000  0014f698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00156e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000100 	.word	0x20000100
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801a534 	.word	0x0801a534

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000104 	.word	0x20000104
 8000104:	0801a534 	.word	0x0801a534

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0010      	movs	r0, r2
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	0019      	movs	r1, r3
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f001 fdef 	bl	8001ffc <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f001 fd2f 	bl	8001e8c <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 fde1 	bl	8001ffc <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fdd7 	bl	8001ffc <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			@ (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fd59 	bl	8001f14 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			@ (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f001 fd4f 	bl	8001f14 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			@ (mov r8, r8)

08000484 <__aeabi_cfrcmple>:
 8000484:	4684      	mov	ip, r0
 8000486:	0008      	movs	r0, r1
 8000488:	4661      	mov	r1, ip
 800048a:	e7ff      	b.n	800048c <__aeabi_cfcmpeq>

0800048c <__aeabi_cfcmpeq>:
 800048c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800048e:	f000 faed 	bl	8000a6c <__lesf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	d401      	bmi.n	800049a <__aeabi_cfcmpeq+0xe>
 8000496:	2100      	movs	r1, #0
 8000498:	42c8      	cmn	r0, r1
 800049a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800049c <__aeabi_fcmpeq>:
 800049c:	b510      	push	{r4, lr}
 800049e:	f000 fa6d 	bl	800097c <__eqsf2>
 80004a2:	4240      	negs	r0, r0
 80004a4:	3001      	adds	r0, #1
 80004a6:	bd10      	pop	{r4, pc}

080004a8 <__aeabi_fcmplt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 fadf 	bl	8000a6c <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	db01      	blt.n	80004b6 <__aeabi_fcmplt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_fcmple>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fad5 	bl	8000a6c <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dd01      	ble.n	80004ca <__aeabi_fcmple+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_fcmpgt>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fa7b 	bl	80009cc <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dc01      	bgt.n	80004de <__aeabi_fcmpgt+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_fcmpge>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f000 fa71 	bl	80009cc <__gesf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	da01      	bge.n	80004f2 <__aeabi_fcmpge+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_uldivmod>:
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d111      	bne.n	8000520 <__aeabi_uldivmod+0x28>
 80004fc:	2a00      	cmp	r2, #0
 80004fe:	d10f      	bne.n	8000520 <__aeabi_uldivmod+0x28>
 8000500:	2900      	cmp	r1, #0
 8000502:	d100      	bne.n	8000506 <__aeabi_uldivmod+0xe>
 8000504:	2800      	cmp	r0, #0
 8000506:	d002      	beq.n	800050e <__aeabi_uldivmod+0x16>
 8000508:	2100      	movs	r1, #0
 800050a:	43c9      	mvns	r1, r1
 800050c:	0008      	movs	r0, r1
 800050e:	b407      	push	{r0, r1, r2}
 8000510:	4802      	ldr	r0, [pc, #8]	@ (800051c <__aeabi_uldivmod+0x24>)
 8000512:	a102      	add	r1, pc, #8	@ (adr r1, 800051c <__aeabi_uldivmod+0x24>)
 8000514:	1840      	adds	r0, r0, r1
 8000516:	9002      	str	r0, [sp, #8]
 8000518:	bd03      	pop	{r0, r1, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)
 800051c:	fffffee9 	.word	0xfffffee9
 8000520:	b403      	push	{r0, r1}
 8000522:	4668      	mov	r0, sp
 8000524:	b501      	push	{r0, lr}
 8000526:	9802      	ldr	r0, [sp, #8]
 8000528:	f000 f83c 	bl	80005a4 <__udivmoddi4>
 800052c:	9b01      	ldr	r3, [sp, #4]
 800052e:	469e      	mov	lr, r3
 8000530:	b002      	add	sp, #8
 8000532:	bc0c      	pop	{r2, r3}
 8000534:	4770      	bx	lr
 8000536:	46c0      	nop			@ (mov r8, r8)

08000538 <__aeabi_f2uiz>:
 8000538:	219e      	movs	r1, #158	@ 0x9e
 800053a:	b510      	push	{r4, lr}
 800053c:	05c9      	lsls	r1, r1, #23
 800053e:	1c04      	adds	r4, r0, #0
 8000540:	f7ff ffd0 	bl	80004e4 <__aeabi_fcmpge>
 8000544:	2800      	cmp	r0, #0
 8000546:	d103      	bne.n	8000550 <__aeabi_f2uiz+0x18>
 8000548:	1c20      	adds	r0, r4, #0
 800054a:	f000 fdbf 	bl	80010cc <__aeabi_f2iz>
 800054e:	bd10      	pop	{r4, pc}
 8000550:	219e      	movs	r1, #158	@ 0x9e
 8000552:	1c20      	adds	r0, r4, #0
 8000554:	05c9      	lsls	r1, r1, #23
 8000556:	f000 fc15 	bl	8000d84 <__aeabi_fsub>
 800055a:	f000 fdb7 	bl	80010cc <__aeabi_f2iz>
 800055e:	2380      	movs	r3, #128	@ 0x80
 8000560:	061b      	lsls	r3, r3, #24
 8000562:	469c      	mov	ip, r3
 8000564:	4460      	add	r0, ip
 8000566:	e7f2      	b.n	800054e <__aeabi_f2uiz+0x16>

08000568 <__aeabi_d2uiz>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	2200      	movs	r2, #0
 800056c:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <__aeabi_d2uiz+0x38>)
 800056e:	0004      	movs	r4, r0
 8000570:	000d      	movs	r5, r1
 8000572:	f7ff ff7d 	bl	8000470 <__aeabi_dcmpge>
 8000576:	2800      	cmp	r0, #0
 8000578:	d104      	bne.n	8000584 <__aeabi_d2uiz+0x1c>
 800057a:	0020      	movs	r0, r4
 800057c:	0029      	movs	r1, r5
 800057e:	f002 fc13 	bl	8002da8 <__aeabi_d2iz>
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <__aeabi_d2uiz+0x38>)
 8000586:	2200      	movs	r2, #0
 8000588:	0020      	movs	r0, r4
 800058a:	0029      	movs	r1, r5
 800058c:	f002 f870 	bl	8002670 <__aeabi_dsub>
 8000590:	f002 fc0a 	bl	8002da8 <__aeabi_d2iz>
 8000594:	2380      	movs	r3, #128	@ 0x80
 8000596:	061b      	lsls	r3, r3, #24
 8000598:	469c      	mov	ip, r3
 800059a:	4460      	add	r0, ip
 800059c:	e7f1      	b.n	8000582 <__aeabi_d2uiz+0x1a>
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	41e00000 	.word	0x41e00000

080005a4 <__udivmoddi4>:
 80005a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a6:	4657      	mov	r7, sl
 80005a8:	464e      	mov	r6, r9
 80005aa:	4645      	mov	r5, r8
 80005ac:	46de      	mov	lr, fp
 80005ae:	b5e0      	push	{r5, r6, r7, lr}
 80005b0:	0004      	movs	r4, r0
 80005b2:	000d      	movs	r5, r1
 80005b4:	4692      	mov	sl, r2
 80005b6:	4699      	mov	r9, r3
 80005b8:	b083      	sub	sp, #12
 80005ba:	428b      	cmp	r3, r1
 80005bc:	d830      	bhi.n	8000620 <__udivmoddi4+0x7c>
 80005be:	d02d      	beq.n	800061c <__udivmoddi4+0x78>
 80005c0:	4649      	mov	r1, r9
 80005c2:	4650      	mov	r0, sl
 80005c4:	f002 fce4 	bl	8002f90 <__clzdi2>
 80005c8:	0029      	movs	r1, r5
 80005ca:	0006      	movs	r6, r0
 80005cc:	0020      	movs	r0, r4
 80005ce:	f002 fcdf 	bl	8002f90 <__clzdi2>
 80005d2:	1a33      	subs	r3, r6, r0
 80005d4:	4698      	mov	r8, r3
 80005d6:	3b20      	subs	r3, #32
 80005d8:	d434      	bmi.n	8000644 <__udivmoddi4+0xa0>
 80005da:	469b      	mov	fp, r3
 80005dc:	4653      	mov	r3, sl
 80005de:	465a      	mov	r2, fp
 80005e0:	4093      	lsls	r3, r2
 80005e2:	4642      	mov	r2, r8
 80005e4:	001f      	movs	r7, r3
 80005e6:	4653      	mov	r3, sl
 80005e8:	4093      	lsls	r3, r2
 80005ea:	001e      	movs	r6, r3
 80005ec:	42af      	cmp	r7, r5
 80005ee:	d83b      	bhi.n	8000668 <__udivmoddi4+0xc4>
 80005f0:	42af      	cmp	r7, r5
 80005f2:	d100      	bne.n	80005f6 <__udivmoddi4+0x52>
 80005f4:	e079      	b.n	80006ea <__udivmoddi4+0x146>
 80005f6:	465b      	mov	r3, fp
 80005f8:	1ba4      	subs	r4, r4, r6
 80005fa:	41bd      	sbcs	r5, r7
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	da00      	bge.n	8000602 <__udivmoddi4+0x5e>
 8000600:	e076      	b.n	80006f0 <__udivmoddi4+0x14c>
 8000602:	2200      	movs	r2, #0
 8000604:	2300      	movs	r3, #0
 8000606:	9200      	str	r2, [sp, #0]
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	2301      	movs	r3, #1
 800060c:	465a      	mov	r2, fp
 800060e:	4093      	lsls	r3, r2
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	2301      	movs	r3, #1
 8000614:	4642      	mov	r2, r8
 8000616:	4093      	lsls	r3, r2
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	e029      	b.n	8000670 <__udivmoddi4+0xcc>
 800061c:	4282      	cmp	r2, r0
 800061e:	d9cf      	bls.n	80005c0 <__udivmoddi4+0x1c>
 8000620:	2200      	movs	r2, #0
 8000622:	2300      	movs	r3, #0
 8000624:	9200      	str	r2, [sp, #0]
 8000626:	9301      	str	r3, [sp, #4]
 8000628:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <__udivmoddi4+0x8e>
 800062e:	601c      	str	r4, [r3, #0]
 8000630:	605d      	str	r5, [r3, #4]
 8000632:	9800      	ldr	r0, [sp, #0]
 8000634:	9901      	ldr	r1, [sp, #4]
 8000636:	b003      	add	sp, #12
 8000638:	bcf0      	pop	{r4, r5, r6, r7}
 800063a:	46bb      	mov	fp, r7
 800063c:	46b2      	mov	sl, r6
 800063e:	46a9      	mov	r9, r5
 8000640:	46a0      	mov	r8, r4
 8000642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000644:	4642      	mov	r2, r8
 8000646:	469b      	mov	fp, r3
 8000648:	2320      	movs	r3, #32
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	4652      	mov	r2, sl
 800064e:	40da      	lsrs	r2, r3
 8000650:	4641      	mov	r1, r8
 8000652:	0013      	movs	r3, r2
 8000654:	464a      	mov	r2, r9
 8000656:	408a      	lsls	r2, r1
 8000658:	0017      	movs	r7, r2
 800065a:	4642      	mov	r2, r8
 800065c:	431f      	orrs	r7, r3
 800065e:	4653      	mov	r3, sl
 8000660:	4093      	lsls	r3, r2
 8000662:	001e      	movs	r6, r3
 8000664:	42af      	cmp	r7, r5
 8000666:	d9c3      	bls.n	80005f0 <__udivmoddi4+0x4c>
 8000668:	2200      	movs	r2, #0
 800066a:	2300      	movs	r3, #0
 800066c:	9200      	str	r2, [sp, #0]
 800066e:	9301      	str	r3, [sp, #4]
 8000670:	4643      	mov	r3, r8
 8000672:	2b00      	cmp	r3, #0
 8000674:	d0d8      	beq.n	8000628 <__udivmoddi4+0x84>
 8000676:	07fb      	lsls	r3, r7, #31
 8000678:	0872      	lsrs	r2, r6, #1
 800067a:	431a      	orrs	r2, r3
 800067c:	4646      	mov	r6, r8
 800067e:	087b      	lsrs	r3, r7, #1
 8000680:	e00e      	b.n	80006a0 <__udivmoddi4+0xfc>
 8000682:	42ab      	cmp	r3, r5
 8000684:	d101      	bne.n	800068a <__udivmoddi4+0xe6>
 8000686:	42a2      	cmp	r2, r4
 8000688:	d80c      	bhi.n	80006a4 <__udivmoddi4+0x100>
 800068a:	1aa4      	subs	r4, r4, r2
 800068c:	419d      	sbcs	r5, r3
 800068e:	2001      	movs	r0, #1
 8000690:	1924      	adds	r4, r4, r4
 8000692:	416d      	adcs	r5, r5
 8000694:	2100      	movs	r1, #0
 8000696:	3e01      	subs	r6, #1
 8000698:	1824      	adds	r4, r4, r0
 800069a:	414d      	adcs	r5, r1
 800069c:	2e00      	cmp	r6, #0
 800069e:	d006      	beq.n	80006ae <__udivmoddi4+0x10a>
 80006a0:	42ab      	cmp	r3, r5
 80006a2:	d9ee      	bls.n	8000682 <__udivmoddi4+0xde>
 80006a4:	3e01      	subs	r6, #1
 80006a6:	1924      	adds	r4, r4, r4
 80006a8:	416d      	adcs	r5, r5
 80006aa:	2e00      	cmp	r6, #0
 80006ac:	d1f8      	bne.n	80006a0 <__udivmoddi4+0xfc>
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	465b      	mov	r3, fp
 80006b4:	1900      	adds	r0, r0, r4
 80006b6:	4169      	adcs	r1, r5
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db24      	blt.n	8000706 <__udivmoddi4+0x162>
 80006bc:	002b      	movs	r3, r5
 80006be:	465a      	mov	r2, fp
 80006c0:	4644      	mov	r4, r8
 80006c2:	40d3      	lsrs	r3, r2
 80006c4:	002a      	movs	r2, r5
 80006c6:	40e2      	lsrs	r2, r4
 80006c8:	001c      	movs	r4, r3
 80006ca:	465b      	mov	r3, fp
 80006cc:	0015      	movs	r5, r2
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	db2a      	blt.n	8000728 <__udivmoddi4+0x184>
 80006d2:	0026      	movs	r6, r4
 80006d4:	409e      	lsls	r6, r3
 80006d6:	0033      	movs	r3, r6
 80006d8:	0026      	movs	r6, r4
 80006da:	4647      	mov	r7, r8
 80006dc:	40be      	lsls	r6, r7
 80006de:	0032      	movs	r2, r6
 80006e0:	1a80      	subs	r0, r0, r2
 80006e2:	4199      	sbcs	r1, r3
 80006e4:	9000      	str	r0, [sp, #0]
 80006e6:	9101      	str	r1, [sp, #4]
 80006e8:	e79e      	b.n	8000628 <__udivmoddi4+0x84>
 80006ea:	42a3      	cmp	r3, r4
 80006ec:	d8bc      	bhi.n	8000668 <__udivmoddi4+0xc4>
 80006ee:	e782      	b.n	80005f6 <__udivmoddi4+0x52>
 80006f0:	4642      	mov	r2, r8
 80006f2:	2320      	movs	r3, #32
 80006f4:	2100      	movs	r1, #0
 80006f6:	1a9b      	subs	r3, r3, r2
 80006f8:	2200      	movs	r2, #0
 80006fa:	9100      	str	r1, [sp, #0]
 80006fc:	9201      	str	r2, [sp, #4]
 80006fe:	2201      	movs	r2, #1
 8000700:	40da      	lsrs	r2, r3
 8000702:	9201      	str	r2, [sp, #4]
 8000704:	e785      	b.n	8000612 <__udivmoddi4+0x6e>
 8000706:	4642      	mov	r2, r8
 8000708:	2320      	movs	r3, #32
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	002a      	movs	r2, r5
 800070e:	4646      	mov	r6, r8
 8000710:	409a      	lsls	r2, r3
 8000712:	0023      	movs	r3, r4
 8000714:	40f3      	lsrs	r3, r6
 8000716:	4644      	mov	r4, r8
 8000718:	4313      	orrs	r3, r2
 800071a:	002a      	movs	r2, r5
 800071c:	40e2      	lsrs	r2, r4
 800071e:	001c      	movs	r4, r3
 8000720:	465b      	mov	r3, fp
 8000722:	0015      	movs	r5, r2
 8000724:	2b00      	cmp	r3, #0
 8000726:	dad4      	bge.n	80006d2 <__udivmoddi4+0x12e>
 8000728:	4642      	mov	r2, r8
 800072a:	002f      	movs	r7, r5
 800072c:	2320      	movs	r3, #32
 800072e:	0026      	movs	r6, r4
 8000730:	4097      	lsls	r7, r2
 8000732:	1a9b      	subs	r3, r3, r2
 8000734:	40de      	lsrs	r6, r3
 8000736:	003b      	movs	r3, r7
 8000738:	4333      	orrs	r3, r6
 800073a:	e7cd      	b.n	80006d8 <__udivmoddi4+0x134>

0800073c <__aeabi_fdiv>:
 800073c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800073e:	464f      	mov	r7, r9
 8000740:	4646      	mov	r6, r8
 8000742:	46d6      	mov	lr, sl
 8000744:	0244      	lsls	r4, r0, #9
 8000746:	b5c0      	push	{r6, r7, lr}
 8000748:	0047      	lsls	r7, r0, #1
 800074a:	1c0e      	adds	r6, r1, #0
 800074c:	0a64      	lsrs	r4, r4, #9
 800074e:	0e3f      	lsrs	r7, r7, #24
 8000750:	0fc5      	lsrs	r5, r0, #31
 8000752:	2f00      	cmp	r7, #0
 8000754:	d03c      	beq.n	80007d0 <__aeabi_fdiv+0x94>
 8000756:	2fff      	cmp	r7, #255	@ 0xff
 8000758:	d042      	beq.n	80007e0 <__aeabi_fdiv+0xa4>
 800075a:	2300      	movs	r3, #0
 800075c:	2280      	movs	r2, #128	@ 0x80
 800075e:	4699      	mov	r9, r3
 8000760:	469a      	mov	sl, r3
 8000762:	00e4      	lsls	r4, r4, #3
 8000764:	04d2      	lsls	r2, r2, #19
 8000766:	4314      	orrs	r4, r2
 8000768:	3f7f      	subs	r7, #127	@ 0x7f
 800076a:	0273      	lsls	r3, r6, #9
 800076c:	0a5b      	lsrs	r3, r3, #9
 800076e:	4698      	mov	r8, r3
 8000770:	0073      	lsls	r3, r6, #1
 8000772:	0e1b      	lsrs	r3, r3, #24
 8000774:	0ff6      	lsrs	r6, r6, #31
 8000776:	2b00      	cmp	r3, #0
 8000778:	d01b      	beq.n	80007b2 <__aeabi_fdiv+0x76>
 800077a:	2bff      	cmp	r3, #255	@ 0xff
 800077c:	d013      	beq.n	80007a6 <__aeabi_fdiv+0x6a>
 800077e:	4642      	mov	r2, r8
 8000780:	2180      	movs	r1, #128	@ 0x80
 8000782:	00d2      	lsls	r2, r2, #3
 8000784:	04c9      	lsls	r1, r1, #19
 8000786:	4311      	orrs	r1, r2
 8000788:	4688      	mov	r8, r1
 800078a:	2000      	movs	r0, #0
 800078c:	3b7f      	subs	r3, #127	@ 0x7f
 800078e:	0029      	movs	r1, r5
 8000790:	1aff      	subs	r7, r7, r3
 8000792:	464b      	mov	r3, r9
 8000794:	4071      	eors	r1, r6
 8000796:	b2c9      	uxtb	r1, r1
 8000798:	2b0f      	cmp	r3, #15
 800079a:	d900      	bls.n	800079e <__aeabi_fdiv+0x62>
 800079c:	e0b5      	b.n	800090a <__aeabi_fdiv+0x1ce>
 800079e:	4a74      	ldr	r2, [pc, #464]	@ (8000970 <__aeabi_fdiv+0x234>)
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	58d3      	ldr	r3, [r2, r3]
 80007a4:	469f      	mov	pc, r3
 80007a6:	4643      	mov	r3, r8
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d13f      	bne.n	800082c <__aeabi_fdiv+0xf0>
 80007ac:	3fff      	subs	r7, #255	@ 0xff
 80007ae:	3302      	adds	r3, #2
 80007b0:	e003      	b.n	80007ba <__aeabi_fdiv+0x7e>
 80007b2:	4643      	mov	r3, r8
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d12d      	bne.n	8000814 <__aeabi_fdiv+0xd8>
 80007b8:	2301      	movs	r3, #1
 80007ba:	0029      	movs	r1, r5
 80007bc:	464a      	mov	r2, r9
 80007be:	4071      	eors	r1, r6
 80007c0:	b2c9      	uxtb	r1, r1
 80007c2:	431a      	orrs	r2, r3
 80007c4:	2a0e      	cmp	r2, #14
 80007c6:	d838      	bhi.n	800083a <__aeabi_fdiv+0xfe>
 80007c8:	486a      	ldr	r0, [pc, #424]	@ (8000974 <__aeabi_fdiv+0x238>)
 80007ca:	0092      	lsls	r2, r2, #2
 80007cc:	5882      	ldr	r2, [r0, r2]
 80007ce:	4697      	mov	pc, r2
 80007d0:	2c00      	cmp	r4, #0
 80007d2:	d113      	bne.n	80007fc <__aeabi_fdiv+0xc0>
 80007d4:	2304      	movs	r3, #4
 80007d6:	4699      	mov	r9, r3
 80007d8:	3b03      	subs	r3, #3
 80007da:	2700      	movs	r7, #0
 80007dc:	469a      	mov	sl, r3
 80007de:	e7c4      	b.n	800076a <__aeabi_fdiv+0x2e>
 80007e0:	2c00      	cmp	r4, #0
 80007e2:	d105      	bne.n	80007f0 <__aeabi_fdiv+0xb4>
 80007e4:	2308      	movs	r3, #8
 80007e6:	4699      	mov	r9, r3
 80007e8:	3b06      	subs	r3, #6
 80007ea:	27ff      	movs	r7, #255	@ 0xff
 80007ec:	469a      	mov	sl, r3
 80007ee:	e7bc      	b.n	800076a <__aeabi_fdiv+0x2e>
 80007f0:	230c      	movs	r3, #12
 80007f2:	4699      	mov	r9, r3
 80007f4:	3b09      	subs	r3, #9
 80007f6:	27ff      	movs	r7, #255	@ 0xff
 80007f8:	469a      	mov	sl, r3
 80007fa:	e7b6      	b.n	800076a <__aeabi_fdiv+0x2e>
 80007fc:	0020      	movs	r0, r4
 80007fe:	f002 fba9 	bl	8002f54 <__clzsi2>
 8000802:	2776      	movs	r7, #118	@ 0x76
 8000804:	1f43      	subs	r3, r0, #5
 8000806:	409c      	lsls	r4, r3
 8000808:	2300      	movs	r3, #0
 800080a:	427f      	negs	r7, r7
 800080c:	4699      	mov	r9, r3
 800080e:	469a      	mov	sl, r3
 8000810:	1a3f      	subs	r7, r7, r0
 8000812:	e7aa      	b.n	800076a <__aeabi_fdiv+0x2e>
 8000814:	4640      	mov	r0, r8
 8000816:	f002 fb9d 	bl	8002f54 <__clzsi2>
 800081a:	4642      	mov	r2, r8
 800081c:	1f43      	subs	r3, r0, #5
 800081e:	409a      	lsls	r2, r3
 8000820:	2376      	movs	r3, #118	@ 0x76
 8000822:	425b      	negs	r3, r3
 8000824:	1a1b      	subs	r3, r3, r0
 8000826:	4690      	mov	r8, r2
 8000828:	2000      	movs	r0, #0
 800082a:	e7b0      	b.n	800078e <__aeabi_fdiv+0x52>
 800082c:	2303      	movs	r3, #3
 800082e:	464a      	mov	r2, r9
 8000830:	431a      	orrs	r2, r3
 8000832:	4691      	mov	r9, r2
 8000834:	2003      	movs	r0, #3
 8000836:	33fc      	adds	r3, #252	@ 0xfc
 8000838:	e7a9      	b.n	800078e <__aeabi_fdiv+0x52>
 800083a:	000d      	movs	r5, r1
 800083c:	20ff      	movs	r0, #255	@ 0xff
 800083e:	2200      	movs	r2, #0
 8000840:	05c0      	lsls	r0, r0, #23
 8000842:	07ed      	lsls	r5, r5, #31
 8000844:	4310      	orrs	r0, r2
 8000846:	4328      	orrs	r0, r5
 8000848:	bce0      	pop	{r5, r6, r7}
 800084a:	46ba      	mov	sl, r7
 800084c:	46b1      	mov	r9, r6
 800084e:	46a8      	mov	r8, r5
 8000850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000852:	000d      	movs	r5, r1
 8000854:	2000      	movs	r0, #0
 8000856:	2200      	movs	r2, #0
 8000858:	e7f2      	b.n	8000840 <__aeabi_fdiv+0x104>
 800085a:	4653      	mov	r3, sl
 800085c:	2b02      	cmp	r3, #2
 800085e:	d0ed      	beq.n	800083c <__aeabi_fdiv+0x100>
 8000860:	2b03      	cmp	r3, #3
 8000862:	d033      	beq.n	80008cc <__aeabi_fdiv+0x190>
 8000864:	46a0      	mov	r8, r4
 8000866:	2b01      	cmp	r3, #1
 8000868:	d105      	bne.n	8000876 <__aeabi_fdiv+0x13a>
 800086a:	2000      	movs	r0, #0
 800086c:	2200      	movs	r2, #0
 800086e:	e7e7      	b.n	8000840 <__aeabi_fdiv+0x104>
 8000870:	0035      	movs	r5, r6
 8000872:	2803      	cmp	r0, #3
 8000874:	d07a      	beq.n	800096c <__aeabi_fdiv+0x230>
 8000876:	003b      	movs	r3, r7
 8000878:	337f      	adds	r3, #127	@ 0x7f
 800087a:	2b00      	cmp	r3, #0
 800087c:	dd2d      	ble.n	80008da <__aeabi_fdiv+0x19e>
 800087e:	4642      	mov	r2, r8
 8000880:	0752      	lsls	r2, r2, #29
 8000882:	d007      	beq.n	8000894 <__aeabi_fdiv+0x158>
 8000884:	220f      	movs	r2, #15
 8000886:	4641      	mov	r1, r8
 8000888:	400a      	ands	r2, r1
 800088a:	2a04      	cmp	r2, #4
 800088c:	d002      	beq.n	8000894 <__aeabi_fdiv+0x158>
 800088e:	2204      	movs	r2, #4
 8000890:	4694      	mov	ip, r2
 8000892:	44e0      	add	r8, ip
 8000894:	4642      	mov	r2, r8
 8000896:	0112      	lsls	r2, r2, #4
 8000898:	d505      	bpl.n	80008a6 <__aeabi_fdiv+0x16a>
 800089a:	4642      	mov	r2, r8
 800089c:	4b36      	ldr	r3, [pc, #216]	@ (8000978 <__aeabi_fdiv+0x23c>)
 800089e:	401a      	ands	r2, r3
 80008a0:	003b      	movs	r3, r7
 80008a2:	4690      	mov	r8, r2
 80008a4:	3380      	adds	r3, #128	@ 0x80
 80008a6:	2bfe      	cmp	r3, #254	@ 0xfe
 80008a8:	dcc8      	bgt.n	800083c <__aeabi_fdiv+0x100>
 80008aa:	4642      	mov	r2, r8
 80008ac:	0192      	lsls	r2, r2, #6
 80008ae:	0a52      	lsrs	r2, r2, #9
 80008b0:	b2d8      	uxtb	r0, r3
 80008b2:	e7c5      	b.n	8000840 <__aeabi_fdiv+0x104>
 80008b4:	2280      	movs	r2, #128	@ 0x80
 80008b6:	2500      	movs	r5, #0
 80008b8:	20ff      	movs	r0, #255	@ 0xff
 80008ba:	03d2      	lsls	r2, r2, #15
 80008bc:	e7c0      	b.n	8000840 <__aeabi_fdiv+0x104>
 80008be:	2280      	movs	r2, #128	@ 0x80
 80008c0:	03d2      	lsls	r2, r2, #15
 80008c2:	4214      	tst	r4, r2
 80008c4:	d002      	beq.n	80008cc <__aeabi_fdiv+0x190>
 80008c6:	4643      	mov	r3, r8
 80008c8:	4213      	tst	r3, r2
 80008ca:	d049      	beq.n	8000960 <__aeabi_fdiv+0x224>
 80008cc:	2280      	movs	r2, #128	@ 0x80
 80008ce:	03d2      	lsls	r2, r2, #15
 80008d0:	4322      	orrs	r2, r4
 80008d2:	0252      	lsls	r2, r2, #9
 80008d4:	20ff      	movs	r0, #255	@ 0xff
 80008d6:	0a52      	lsrs	r2, r2, #9
 80008d8:	e7b2      	b.n	8000840 <__aeabi_fdiv+0x104>
 80008da:	2201      	movs	r2, #1
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	2b1b      	cmp	r3, #27
 80008e0:	dcc3      	bgt.n	800086a <__aeabi_fdiv+0x12e>
 80008e2:	4642      	mov	r2, r8
 80008e4:	40da      	lsrs	r2, r3
 80008e6:	4643      	mov	r3, r8
 80008e8:	379e      	adds	r7, #158	@ 0x9e
 80008ea:	40bb      	lsls	r3, r7
 80008ec:	1e59      	subs	r1, r3, #1
 80008ee:	418b      	sbcs	r3, r1
 80008f0:	431a      	orrs	r2, r3
 80008f2:	0753      	lsls	r3, r2, #29
 80008f4:	d004      	beq.n	8000900 <__aeabi_fdiv+0x1c4>
 80008f6:	230f      	movs	r3, #15
 80008f8:	4013      	ands	r3, r2
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	d000      	beq.n	8000900 <__aeabi_fdiv+0x1c4>
 80008fe:	3204      	adds	r2, #4
 8000900:	0153      	lsls	r3, r2, #5
 8000902:	d529      	bpl.n	8000958 <__aeabi_fdiv+0x21c>
 8000904:	2001      	movs	r0, #1
 8000906:	2200      	movs	r2, #0
 8000908:	e79a      	b.n	8000840 <__aeabi_fdiv+0x104>
 800090a:	4642      	mov	r2, r8
 800090c:	0163      	lsls	r3, r4, #5
 800090e:	0155      	lsls	r5, r2, #5
 8000910:	42ab      	cmp	r3, r5
 8000912:	d215      	bcs.n	8000940 <__aeabi_fdiv+0x204>
 8000914:	201b      	movs	r0, #27
 8000916:	2200      	movs	r2, #0
 8000918:	3f01      	subs	r7, #1
 800091a:	2601      	movs	r6, #1
 800091c:	001c      	movs	r4, r3
 800091e:	0052      	lsls	r2, r2, #1
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	2c00      	cmp	r4, #0
 8000924:	db01      	blt.n	800092a <__aeabi_fdiv+0x1ee>
 8000926:	429d      	cmp	r5, r3
 8000928:	d801      	bhi.n	800092e <__aeabi_fdiv+0x1f2>
 800092a:	1b5b      	subs	r3, r3, r5
 800092c:	4332      	orrs	r2, r6
 800092e:	3801      	subs	r0, #1
 8000930:	2800      	cmp	r0, #0
 8000932:	d1f3      	bne.n	800091c <__aeabi_fdiv+0x1e0>
 8000934:	1e58      	subs	r0, r3, #1
 8000936:	4183      	sbcs	r3, r0
 8000938:	4313      	orrs	r3, r2
 800093a:	4698      	mov	r8, r3
 800093c:	000d      	movs	r5, r1
 800093e:	e79a      	b.n	8000876 <__aeabi_fdiv+0x13a>
 8000940:	201a      	movs	r0, #26
 8000942:	2201      	movs	r2, #1
 8000944:	1b5b      	subs	r3, r3, r5
 8000946:	e7e8      	b.n	800091a <__aeabi_fdiv+0x1de>
 8000948:	3b02      	subs	r3, #2
 800094a:	425a      	negs	r2, r3
 800094c:	4153      	adcs	r3, r2
 800094e:	425b      	negs	r3, r3
 8000950:	0035      	movs	r5, r6
 8000952:	2200      	movs	r2, #0
 8000954:	b2d8      	uxtb	r0, r3
 8000956:	e773      	b.n	8000840 <__aeabi_fdiv+0x104>
 8000958:	0192      	lsls	r2, r2, #6
 800095a:	2000      	movs	r0, #0
 800095c:	0a52      	lsrs	r2, r2, #9
 800095e:	e76f      	b.n	8000840 <__aeabi_fdiv+0x104>
 8000960:	431a      	orrs	r2, r3
 8000962:	0252      	lsls	r2, r2, #9
 8000964:	0035      	movs	r5, r6
 8000966:	20ff      	movs	r0, #255	@ 0xff
 8000968:	0a52      	lsrs	r2, r2, #9
 800096a:	e769      	b.n	8000840 <__aeabi_fdiv+0x104>
 800096c:	4644      	mov	r4, r8
 800096e:	e7ad      	b.n	80008cc <__aeabi_fdiv+0x190>
 8000970:	0801abac 	.word	0x0801abac
 8000974:	0801abec 	.word	0x0801abec
 8000978:	f7ffffff 	.word	0xf7ffffff

0800097c <__eqsf2>:
 800097c:	b570      	push	{r4, r5, r6, lr}
 800097e:	0042      	lsls	r2, r0, #1
 8000980:	024e      	lsls	r6, r1, #9
 8000982:	004c      	lsls	r4, r1, #1
 8000984:	0245      	lsls	r5, r0, #9
 8000986:	0a6d      	lsrs	r5, r5, #9
 8000988:	0e12      	lsrs	r2, r2, #24
 800098a:	0fc3      	lsrs	r3, r0, #31
 800098c:	0a76      	lsrs	r6, r6, #9
 800098e:	0e24      	lsrs	r4, r4, #24
 8000990:	0fc9      	lsrs	r1, r1, #31
 8000992:	2aff      	cmp	r2, #255	@ 0xff
 8000994:	d010      	beq.n	80009b8 <__eqsf2+0x3c>
 8000996:	2cff      	cmp	r4, #255	@ 0xff
 8000998:	d00c      	beq.n	80009b4 <__eqsf2+0x38>
 800099a:	2001      	movs	r0, #1
 800099c:	42a2      	cmp	r2, r4
 800099e:	d10a      	bne.n	80009b6 <__eqsf2+0x3a>
 80009a0:	42b5      	cmp	r5, r6
 80009a2:	d108      	bne.n	80009b6 <__eqsf2+0x3a>
 80009a4:	428b      	cmp	r3, r1
 80009a6:	d00f      	beq.n	80009c8 <__eqsf2+0x4c>
 80009a8:	2a00      	cmp	r2, #0
 80009aa:	d104      	bne.n	80009b6 <__eqsf2+0x3a>
 80009ac:	0028      	movs	r0, r5
 80009ae:	1e43      	subs	r3, r0, #1
 80009b0:	4198      	sbcs	r0, r3
 80009b2:	e000      	b.n	80009b6 <__eqsf2+0x3a>
 80009b4:	2001      	movs	r0, #1
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	2001      	movs	r0, #1
 80009ba:	2cff      	cmp	r4, #255	@ 0xff
 80009bc:	d1fb      	bne.n	80009b6 <__eqsf2+0x3a>
 80009be:	4335      	orrs	r5, r6
 80009c0:	d1f9      	bne.n	80009b6 <__eqsf2+0x3a>
 80009c2:	404b      	eors	r3, r1
 80009c4:	0018      	movs	r0, r3
 80009c6:	e7f6      	b.n	80009b6 <__eqsf2+0x3a>
 80009c8:	2000      	movs	r0, #0
 80009ca:	e7f4      	b.n	80009b6 <__eqsf2+0x3a>

080009cc <__gesf2>:
 80009cc:	b530      	push	{r4, r5, lr}
 80009ce:	0042      	lsls	r2, r0, #1
 80009d0:	0244      	lsls	r4, r0, #9
 80009d2:	024d      	lsls	r5, r1, #9
 80009d4:	0fc3      	lsrs	r3, r0, #31
 80009d6:	0048      	lsls	r0, r1, #1
 80009d8:	0a64      	lsrs	r4, r4, #9
 80009da:	0e12      	lsrs	r2, r2, #24
 80009dc:	0a6d      	lsrs	r5, r5, #9
 80009de:	0e00      	lsrs	r0, r0, #24
 80009e0:	0fc9      	lsrs	r1, r1, #31
 80009e2:	2aff      	cmp	r2, #255	@ 0xff
 80009e4:	d019      	beq.n	8000a1a <__gesf2+0x4e>
 80009e6:	28ff      	cmp	r0, #255	@ 0xff
 80009e8:	d00b      	beq.n	8000a02 <__gesf2+0x36>
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	d11e      	bne.n	8000a2c <__gesf2+0x60>
 80009ee:	2800      	cmp	r0, #0
 80009f0:	d10b      	bne.n	8000a0a <__gesf2+0x3e>
 80009f2:	2d00      	cmp	r5, #0
 80009f4:	d027      	beq.n	8000a46 <__gesf2+0x7a>
 80009f6:	2c00      	cmp	r4, #0
 80009f8:	d134      	bne.n	8000a64 <__gesf2+0x98>
 80009fa:	2900      	cmp	r1, #0
 80009fc:	d02f      	beq.n	8000a5e <__gesf2+0x92>
 80009fe:	0008      	movs	r0, r1
 8000a00:	bd30      	pop	{r4, r5, pc}
 8000a02:	2d00      	cmp	r5, #0
 8000a04:	d128      	bne.n	8000a58 <__gesf2+0x8c>
 8000a06:	2a00      	cmp	r2, #0
 8000a08:	d101      	bne.n	8000a0e <__gesf2+0x42>
 8000a0a:	2c00      	cmp	r4, #0
 8000a0c:	d0f5      	beq.n	80009fa <__gesf2+0x2e>
 8000a0e:	428b      	cmp	r3, r1
 8000a10:	d107      	bne.n	8000a22 <__gesf2+0x56>
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d023      	beq.n	8000a5e <__gesf2+0x92>
 8000a16:	0018      	movs	r0, r3
 8000a18:	e7f2      	b.n	8000a00 <__gesf2+0x34>
 8000a1a:	2c00      	cmp	r4, #0
 8000a1c:	d11c      	bne.n	8000a58 <__gesf2+0x8c>
 8000a1e:	28ff      	cmp	r0, #255	@ 0xff
 8000a20:	d014      	beq.n	8000a4c <__gesf2+0x80>
 8000a22:	1e58      	subs	r0, r3, #1
 8000a24:	2302      	movs	r3, #2
 8000a26:	4018      	ands	r0, r3
 8000a28:	3801      	subs	r0, #1
 8000a2a:	e7e9      	b.n	8000a00 <__gesf2+0x34>
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	d0f8      	beq.n	8000a22 <__gesf2+0x56>
 8000a30:	428b      	cmp	r3, r1
 8000a32:	d1f6      	bne.n	8000a22 <__gesf2+0x56>
 8000a34:	4282      	cmp	r2, r0
 8000a36:	dcf4      	bgt.n	8000a22 <__gesf2+0x56>
 8000a38:	dbeb      	blt.n	8000a12 <__gesf2+0x46>
 8000a3a:	42ac      	cmp	r4, r5
 8000a3c:	d8f1      	bhi.n	8000a22 <__gesf2+0x56>
 8000a3e:	2000      	movs	r0, #0
 8000a40:	42ac      	cmp	r4, r5
 8000a42:	d2dd      	bcs.n	8000a00 <__gesf2+0x34>
 8000a44:	e7e5      	b.n	8000a12 <__gesf2+0x46>
 8000a46:	2c00      	cmp	r4, #0
 8000a48:	d0da      	beq.n	8000a00 <__gesf2+0x34>
 8000a4a:	e7ea      	b.n	8000a22 <__gesf2+0x56>
 8000a4c:	2d00      	cmp	r5, #0
 8000a4e:	d103      	bne.n	8000a58 <__gesf2+0x8c>
 8000a50:	428b      	cmp	r3, r1
 8000a52:	d1e6      	bne.n	8000a22 <__gesf2+0x56>
 8000a54:	2000      	movs	r0, #0
 8000a56:	e7d3      	b.n	8000a00 <__gesf2+0x34>
 8000a58:	2002      	movs	r0, #2
 8000a5a:	4240      	negs	r0, r0
 8000a5c:	e7d0      	b.n	8000a00 <__gesf2+0x34>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	4240      	negs	r0, r0
 8000a62:	e7cd      	b.n	8000a00 <__gesf2+0x34>
 8000a64:	428b      	cmp	r3, r1
 8000a66:	d0e8      	beq.n	8000a3a <__gesf2+0x6e>
 8000a68:	e7db      	b.n	8000a22 <__gesf2+0x56>
 8000a6a:	46c0      	nop			@ (mov r8, r8)

08000a6c <__lesf2>:
 8000a6c:	b530      	push	{r4, r5, lr}
 8000a6e:	0042      	lsls	r2, r0, #1
 8000a70:	0244      	lsls	r4, r0, #9
 8000a72:	024d      	lsls	r5, r1, #9
 8000a74:	0fc3      	lsrs	r3, r0, #31
 8000a76:	0048      	lsls	r0, r1, #1
 8000a78:	0a64      	lsrs	r4, r4, #9
 8000a7a:	0e12      	lsrs	r2, r2, #24
 8000a7c:	0a6d      	lsrs	r5, r5, #9
 8000a7e:	0e00      	lsrs	r0, r0, #24
 8000a80:	0fc9      	lsrs	r1, r1, #31
 8000a82:	2aff      	cmp	r2, #255	@ 0xff
 8000a84:	d01a      	beq.n	8000abc <__lesf2+0x50>
 8000a86:	28ff      	cmp	r0, #255	@ 0xff
 8000a88:	d00e      	beq.n	8000aa8 <__lesf2+0x3c>
 8000a8a:	2a00      	cmp	r2, #0
 8000a8c:	d11e      	bne.n	8000acc <__lesf2+0x60>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	d10e      	bne.n	8000ab0 <__lesf2+0x44>
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	d02a      	beq.n	8000aec <__lesf2+0x80>
 8000a96:	2c00      	cmp	r4, #0
 8000a98:	d00c      	beq.n	8000ab4 <__lesf2+0x48>
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d01d      	beq.n	8000ada <__lesf2+0x6e>
 8000a9e:	1e58      	subs	r0, r3, #1
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	4018      	ands	r0, r3
 8000aa4:	3801      	subs	r0, #1
 8000aa6:	e010      	b.n	8000aca <__lesf2+0x5e>
 8000aa8:	2d00      	cmp	r5, #0
 8000aaa:	d10d      	bne.n	8000ac8 <__lesf2+0x5c>
 8000aac:	2a00      	cmp	r2, #0
 8000aae:	d120      	bne.n	8000af2 <__lesf2+0x86>
 8000ab0:	2c00      	cmp	r4, #0
 8000ab2:	d11e      	bne.n	8000af2 <__lesf2+0x86>
 8000ab4:	2900      	cmp	r1, #0
 8000ab6:	d023      	beq.n	8000b00 <__lesf2+0x94>
 8000ab8:	0008      	movs	r0, r1
 8000aba:	e006      	b.n	8000aca <__lesf2+0x5e>
 8000abc:	2c00      	cmp	r4, #0
 8000abe:	d103      	bne.n	8000ac8 <__lesf2+0x5c>
 8000ac0:	28ff      	cmp	r0, #255	@ 0xff
 8000ac2:	d1ec      	bne.n	8000a9e <__lesf2+0x32>
 8000ac4:	2d00      	cmp	r5, #0
 8000ac6:	d017      	beq.n	8000af8 <__lesf2+0x8c>
 8000ac8:	2002      	movs	r0, #2
 8000aca:	bd30      	pop	{r4, r5, pc}
 8000acc:	2800      	cmp	r0, #0
 8000ace:	d0e6      	beq.n	8000a9e <__lesf2+0x32>
 8000ad0:	428b      	cmp	r3, r1
 8000ad2:	d1e4      	bne.n	8000a9e <__lesf2+0x32>
 8000ad4:	4282      	cmp	r2, r0
 8000ad6:	dce2      	bgt.n	8000a9e <__lesf2+0x32>
 8000ad8:	db04      	blt.n	8000ae4 <__lesf2+0x78>
 8000ada:	42ac      	cmp	r4, r5
 8000adc:	d8df      	bhi.n	8000a9e <__lesf2+0x32>
 8000ade:	2000      	movs	r0, #0
 8000ae0:	42ac      	cmp	r4, r5
 8000ae2:	d2f2      	bcs.n	8000aca <__lesf2+0x5e>
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00b      	beq.n	8000b00 <__lesf2+0x94>
 8000ae8:	0018      	movs	r0, r3
 8000aea:	e7ee      	b.n	8000aca <__lesf2+0x5e>
 8000aec:	2c00      	cmp	r4, #0
 8000aee:	d0ec      	beq.n	8000aca <__lesf2+0x5e>
 8000af0:	e7d5      	b.n	8000a9e <__lesf2+0x32>
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d1d3      	bne.n	8000a9e <__lesf2+0x32>
 8000af6:	e7f5      	b.n	8000ae4 <__lesf2+0x78>
 8000af8:	2000      	movs	r0, #0
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d0e5      	beq.n	8000aca <__lesf2+0x5e>
 8000afe:	e7ce      	b.n	8000a9e <__lesf2+0x32>
 8000b00:	2001      	movs	r0, #1
 8000b02:	4240      	negs	r0, r0
 8000b04:	e7e1      	b.n	8000aca <__lesf2+0x5e>
 8000b06:	46c0      	nop			@ (mov r8, r8)

08000b08 <__aeabi_fmul>:
 8000b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b0a:	464f      	mov	r7, r9
 8000b0c:	4646      	mov	r6, r8
 8000b0e:	46d6      	mov	lr, sl
 8000b10:	0243      	lsls	r3, r0, #9
 8000b12:	0a5b      	lsrs	r3, r3, #9
 8000b14:	0045      	lsls	r5, r0, #1
 8000b16:	b5c0      	push	{r6, r7, lr}
 8000b18:	4699      	mov	r9, r3
 8000b1a:	1c0f      	adds	r7, r1, #0
 8000b1c:	0e2d      	lsrs	r5, r5, #24
 8000b1e:	0fc6      	lsrs	r6, r0, #31
 8000b20:	2d00      	cmp	r5, #0
 8000b22:	d100      	bne.n	8000b26 <__aeabi_fmul+0x1e>
 8000b24:	e088      	b.n	8000c38 <__aeabi_fmul+0x130>
 8000b26:	2dff      	cmp	r5, #255	@ 0xff
 8000b28:	d100      	bne.n	8000b2c <__aeabi_fmul+0x24>
 8000b2a:	e08d      	b.n	8000c48 <__aeabi_fmul+0x140>
 8000b2c:	2280      	movs	r2, #128	@ 0x80
 8000b2e:	00db      	lsls	r3, r3, #3
 8000b30:	04d2      	lsls	r2, r2, #19
 8000b32:	431a      	orrs	r2, r3
 8000b34:	2300      	movs	r3, #0
 8000b36:	4691      	mov	r9, r2
 8000b38:	4698      	mov	r8, r3
 8000b3a:	469a      	mov	sl, r3
 8000b3c:	3d7f      	subs	r5, #127	@ 0x7f
 8000b3e:	027c      	lsls	r4, r7, #9
 8000b40:	007b      	lsls	r3, r7, #1
 8000b42:	0a64      	lsrs	r4, r4, #9
 8000b44:	0e1b      	lsrs	r3, r3, #24
 8000b46:	0fff      	lsrs	r7, r7, #31
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d068      	beq.n	8000c1e <__aeabi_fmul+0x116>
 8000b4c:	2bff      	cmp	r3, #255	@ 0xff
 8000b4e:	d021      	beq.n	8000b94 <__aeabi_fmul+0x8c>
 8000b50:	2280      	movs	r2, #128	@ 0x80
 8000b52:	00e4      	lsls	r4, r4, #3
 8000b54:	04d2      	lsls	r2, r2, #19
 8000b56:	4314      	orrs	r4, r2
 8000b58:	4642      	mov	r2, r8
 8000b5a:	3b7f      	subs	r3, #127	@ 0x7f
 8000b5c:	195b      	adds	r3, r3, r5
 8000b5e:	2100      	movs	r1, #0
 8000b60:	1c5d      	adds	r5, r3, #1
 8000b62:	2a0a      	cmp	r2, #10
 8000b64:	dc2e      	bgt.n	8000bc4 <__aeabi_fmul+0xbc>
 8000b66:	407e      	eors	r6, r7
 8000b68:	4642      	mov	r2, r8
 8000b6a:	2a02      	cmp	r2, #2
 8000b6c:	dc23      	bgt.n	8000bb6 <__aeabi_fmul+0xae>
 8000b6e:	3a01      	subs	r2, #1
 8000b70:	2a01      	cmp	r2, #1
 8000b72:	d900      	bls.n	8000b76 <__aeabi_fmul+0x6e>
 8000b74:	e0bd      	b.n	8000cf2 <__aeabi_fmul+0x1ea>
 8000b76:	2902      	cmp	r1, #2
 8000b78:	d06e      	beq.n	8000c58 <__aeabi_fmul+0x150>
 8000b7a:	2901      	cmp	r1, #1
 8000b7c:	d12c      	bne.n	8000bd8 <__aeabi_fmul+0xd0>
 8000b7e:	2000      	movs	r0, #0
 8000b80:	2200      	movs	r2, #0
 8000b82:	05c0      	lsls	r0, r0, #23
 8000b84:	07f6      	lsls	r6, r6, #31
 8000b86:	4310      	orrs	r0, r2
 8000b88:	4330      	orrs	r0, r6
 8000b8a:	bce0      	pop	{r5, r6, r7}
 8000b8c:	46ba      	mov	sl, r7
 8000b8e:	46b1      	mov	r9, r6
 8000b90:	46a8      	mov	r8, r5
 8000b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b94:	002b      	movs	r3, r5
 8000b96:	33ff      	adds	r3, #255	@ 0xff
 8000b98:	2c00      	cmp	r4, #0
 8000b9a:	d065      	beq.n	8000c68 <__aeabi_fmul+0x160>
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	4641      	mov	r1, r8
 8000ba0:	4311      	orrs	r1, r2
 8000ba2:	0032      	movs	r2, r6
 8000ba4:	3501      	adds	r5, #1
 8000ba6:	4688      	mov	r8, r1
 8000ba8:	407a      	eors	r2, r7
 8000baa:	35ff      	adds	r5, #255	@ 0xff
 8000bac:	290a      	cmp	r1, #10
 8000bae:	dd00      	ble.n	8000bb2 <__aeabi_fmul+0xaa>
 8000bb0:	e0d8      	b.n	8000d64 <__aeabi_fmul+0x25c>
 8000bb2:	0016      	movs	r6, r2
 8000bb4:	2103      	movs	r1, #3
 8000bb6:	4640      	mov	r0, r8
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4082      	lsls	r2, r0
 8000bbc:	20a6      	movs	r0, #166	@ 0xa6
 8000bbe:	00c0      	lsls	r0, r0, #3
 8000bc0:	4202      	tst	r2, r0
 8000bc2:	d020      	beq.n	8000c06 <__aeabi_fmul+0xfe>
 8000bc4:	4653      	mov	r3, sl
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d046      	beq.n	8000c58 <__aeabi_fmul+0x150>
 8000bca:	2b03      	cmp	r3, #3
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_fmul+0xc8>
 8000bce:	e0bb      	b.n	8000d48 <__aeabi_fmul+0x240>
 8000bd0:	4651      	mov	r1, sl
 8000bd2:	464c      	mov	r4, r9
 8000bd4:	2901      	cmp	r1, #1
 8000bd6:	d0d2      	beq.n	8000b7e <__aeabi_fmul+0x76>
 8000bd8:	002b      	movs	r3, r5
 8000bda:	337f      	adds	r3, #127	@ 0x7f
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	dd70      	ble.n	8000cc2 <__aeabi_fmul+0x1ba>
 8000be0:	0762      	lsls	r2, r4, #29
 8000be2:	d004      	beq.n	8000bee <__aeabi_fmul+0xe6>
 8000be4:	220f      	movs	r2, #15
 8000be6:	4022      	ands	r2, r4
 8000be8:	2a04      	cmp	r2, #4
 8000bea:	d000      	beq.n	8000bee <__aeabi_fmul+0xe6>
 8000bec:	3404      	adds	r4, #4
 8000bee:	0122      	lsls	r2, r4, #4
 8000bf0:	d503      	bpl.n	8000bfa <__aeabi_fmul+0xf2>
 8000bf2:	4b63      	ldr	r3, [pc, #396]	@ (8000d80 <__aeabi_fmul+0x278>)
 8000bf4:	401c      	ands	r4, r3
 8000bf6:	002b      	movs	r3, r5
 8000bf8:	3380      	adds	r3, #128	@ 0x80
 8000bfa:	2bfe      	cmp	r3, #254	@ 0xfe
 8000bfc:	dc2c      	bgt.n	8000c58 <__aeabi_fmul+0x150>
 8000bfe:	01a2      	lsls	r2, r4, #6
 8000c00:	0a52      	lsrs	r2, r2, #9
 8000c02:	b2d8      	uxtb	r0, r3
 8000c04:	e7bd      	b.n	8000b82 <__aeabi_fmul+0x7a>
 8000c06:	2090      	movs	r0, #144	@ 0x90
 8000c08:	0080      	lsls	r0, r0, #2
 8000c0a:	4202      	tst	r2, r0
 8000c0c:	d127      	bne.n	8000c5e <__aeabi_fmul+0x156>
 8000c0e:	38b9      	subs	r0, #185	@ 0xb9
 8000c10:	38ff      	subs	r0, #255	@ 0xff
 8000c12:	4210      	tst	r0, r2
 8000c14:	d06d      	beq.n	8000cf2 <__aeabi_fmul+0x1ea>
 8000c16:	003e      	movs	r6, r7
 8000c18:	46a1      	mov	r9, r4
 8000c1a:	468a      	mov	sl, r1
 8000c1c:	e7d2      	b.n	8000bc4 <__aeabi_fmul+0xbc>
 8000c1e:	2c00      	cmp	r4, #0
 8000c20:	d141      	bne.n	8000ca6 <__aeabi_fmul+0x19e>
 8000c22:	2301      	movs	r3, #1
 8000c24:	4642      	mov	r2, r8
 8000c26:	431a      	orrs	r2, r3
 8000c28:	4690      	mov	r8, r2
 8000c2a:	002b      	movs	r3, r5
 8000c2c:	4642      	mov	r2, r8
 8000c2e:	2101      	movs	r1, #1
 8000c30:	1c5d      	adds	r5, r3, #1
 8000c32:	2a0a      	cmp	r2, #10
 8000c34:	dd97      	ble.n	8000b66 <__aeabi_fmul+0x5e>
 8000c36:	e7c5      	b.n	8000bc4 <__aeabi_fmul+0xbc>
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d126      	bne.n	8000c8a <__aeabi_fmul+0x182>
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	4698      	mov	r8, r3
 8000c40:	3b03      	subs	r3, #3
 8000c42:	2500      	movs	r5, #0
 8000c44:	469a      	mov	sl, r3
 8000c46:	e77a      	b.n	8000b3e <__aeabi_fmul+0x36>
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d118      	bne.n	8000c7e <__aeabi_fmul+0x176>
 8000c4c:	2308      	movs	r3, #8
 8000c4e:	4698      	mov	r8, r3
 8000c50:	3b06      	subs	r3, #6
 8000c52:	25ff      	movs	r5, #255	@ 0xff
 8000c54:	469a      	mov	sl, r3
 8000c56:	e772      	b.n	8000b3e <__aeabi_fmul+0x36>
 8000c58:	20ff      	movs	r0, #255	@ 0xff
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	e791      	b.n	8000b82 <__aeabi_fmul+0x7a>
 8000c5e:	2280      	movs	r2, #128	@ 0x80
 8000c60:	2600      	movs	r6, #0
 8000c62:	20ff      	movs	r0, #255	@ 0xff
 8000c64:	03d2      	lsls	r2, r2, #15
 8000c66:	e78c      	b.n	8000b82 <__aeabi_fmul+0x7a>
 8000c68:	4641      	mov	r1, r8
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	3501      	adds	r5, #1
 8000c6e:	4311      	orrs	r1, r2
 8000c70:	4688      	mov	r8, r1
 8000c72:	35ff      	adds	r5, #255	@ 0xff
 8000c74:	290a      	cmp	r1, #10
 8000c76:	dca5      	bgt.n	8000bc4 <__aeabi_fmul+0xbc>
 8000c78:	2102      	movs	r1, #2
 8000c7a:	407e      	eors	r6, r7
 8000c7c:	e774      	b.n	8000b68 <__aeabi_fmul+0x60>
 8000c7e:	230c      	movs	r3, #12
 8000c80:	4698      	mov	r8, r3
 8000c82:	3b09      	subs	r3, #9
 8000c84:	25ff      	movs	r5, #255	@ 0xff
 8000c86:	469a      	mov	sl, r3
 8000c88:	e759      	b.n	8000b3e <__aeabi_fmul+0x36>
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f002 f962 	bl	8002f54 <__clzsi2>
 8000c90:	464a      	mov	r2, r9
 8000c92:	1f43      	subs	r3, r0, #5
 8000c94:	2576      	movs	r5, #118	@ 0x76
 8000c96:	409a      	lsls	r2, r3
 8000c98:	2300      	movs	r3, #0
 8000c9a:	426d      	negs	r5, r5
 8000c9c:	4691      	mov	r9, r2
 8000c9e:	4698      	mov	r8, r3
 8000ca0:	469a      	mov	sl, r3
 8000ca2:	1a2d      	subs	r5, r5, r0
 8000ca4:	e74b      	b.n	8000b3e <__aeabi_fmul+0x36>
 8000ca6:	0020      	movs	r0, r4
 8000ca8:	f002 f954 	bl	8002f54 <__clzsi2>
 8000cac:	4642      	mov	r2, r8
 8000cae:	1f43      	subs	r3, r0, #5
 8000cb0:	409c      	lsls	r4, r3
 8000cb2:	1a2b      	subs	r3, r5, r0
 8000cb4:	3b76      	subs	r3, #118	@ 0x76
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	1c5d      	adds	r5, r3, #1
 8000cba:	2a0a      	cmp	r2, #10
 8000cbc:	dc00      	bgt.n	8000cc0 <__aeabi_fmul+0x1b8>
 8000cbe:	e752      	b.n	8000b66 <__aeabi_fmul+0x5e>
 8000cc0:	e780      	b.n	8000bc4 <__aeabi_fmul+0xbc>
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	2b1b      	cmp	r3, #27
 8000cc8:	dd00      	ble.n	8000ccc <__aeabi_fmul+0x1c4>
 8000cca:	e758      	b.n	8000b7e <__aeabi_fmul+0x76>
 8000ccc:	359e      	adds	r5, #158	@ 0x9e
 8000cce:	0022      	movs	r2, r4
 8000cd0:	40ac      	lsls	r4, r5
 8000cd2:	40da      	lsrs	r2, r3
 8000cd4:	1e63      	subs	r3, r4, #1
 8000cd6:	419c      	sbcs	r4, r3
 8000cd8:	4322      	orrs	r2, r4
 8000cda:	0753      	lsls	r3, r2, #29
 8000cdc:	d004      	beq.n	8000ce8 <__aeabi_fmul+0x1e0>
 8000cde:	230f      	movs	r3, #15
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	d000      	beq.n	8000ce8 <__aeabi_fmul+0x1e0>
 8000ce6:	3204      	adds	r2, #4
 8000ce8:	0153      	lsls	r3, r2, #5
 8000cea:	d537      	bpl.n	8000d5c <__aeabi_fmul+0x254>
 8000cec:	2001      	movs	r0, #1
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e747      	b.n	8000b82 <__aeabi_fmul+0x7a>
 8000cf2:	0c21      	lsrs	r1, r4, #16
 8000cf4:	464a      	mov	r2, r9
 8000cf6:	0424      	lsls	r4, r4, #16
 8000cf8:	0c24      	lsrs	r4, r4, #16
 8000cfa:	0027      	movs	r7, r4
 8000cfc:	0c10      	lsrs	r0, r2, #16
 8000cfe:	0412      	lsls	r2, r2, #16
 8000d00:	0c12      	lsrs	r2, r2, #16
 8000d02:	4344      	muls	r4, r0
 8000d04:	4357      	muls	r7, r2
 8000d06:	4348      	muls	r0, r1
 8000d08:	4351      	muls	r1, r2
 8000d0a:	0c3a      	lsrs	r2, r7, #16
 8000d0c:	1909      	adds	r1, r1, r4
 8000d0e:	1852      	adds	r2, r2, r1
 8000d10:	4294      	cmp	r4, r2
 8000d12:	d903      	bls.n	8000d1c <__aeabi_fmul+0x214>
 8000d14:	2180      	movs	r1, #128	@ 0x80
 8000d16:	0249      	lsls	r1, r1, #9
 8000d18:	468c      	mov	ip, r1
 8000d1a:	4460      	add	r0, ip
 8000d1c:	043f      	lsls	r7, r7, #16
 8000d1e:	0411      	lsls	r1, r2, #16
 8000d20:	0c3f      	lsrs	r7, r7, #16
 8000d22:	19c9      	adds	r1, r1, r7
 8000d24:	018c      	lsls	r4, r1, #6
 8000d26:	1e67      	subs	r7, r4, #1
 8000d28:	41bc      	sbcs	r4, r7
 8000d2a:	0c12      	lsrs	r2, r2, #16
 8000d2c:	0e89      	lsrs	r1, r1, #26
 8000d2e:	1812      	adds	r2, r2, r0
 8000d30:	430c      	orrs	r4, r1
 8000d32:	0192      	lsls	r2, r2, #6
 8000d34:	4314      	orrs	r4, r2
 8000d36:	0112      	lsls	r2, r2, #4
 8000d38:	d50e      	bpl.n	8000d58 <__aeabi_fmul+0x250>
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	0862      	lsrs	r2, r4, #1
 8000d3e:	401c      	ands	r4, r3
 8000d40:	4314      	orrs	r4, r2
 8000d42:	e749      	b.n	8000bd8 <__aeabi_fmul+0xd0>
 8000d44:	003e      	movs	r6, r7
 8000d46:	46a1      	mov	r9, r4
 8000d48:	2280      	movs	r2, #128	@ 0x80
 8000d4a:	464b      	mov	r3, r9
 8000d4c:	03d2      	lsls	r2, r2, #15
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	0252      	lsls	r2, r2, #9
 8000d52:	20ff      	movs	r0, #255	@ 0xff
 8000d54:	0a52      	lsrs	r2, r2, #9
 8000d56:	e714      	b.n	8000b82 <__aeabi_fmul+0x7a>
 8000d58:	001d      	movs	r5, r3
 8000d5a:	e73d      	b.n	8000bd8 <__aeabi_fmul+0xd0>
 8000d5c:	0192      	lsls	r2, r2, #6
 8000d5e:	2000      	movs	r0, #0
 8000d60:	0a52      	lsrs	r2, r2, #9
 8000d62:	e70e      	b.n	8000b82 <__aeabi_fmul+0x7a>
 8000d64:	290f      	cmp	r1, #15
 8000d66:	d1ed      	bne.n	8000d44 <__aeabi_fmul+0x23c>
 8000d68:	2280      	movs	r2, #128	@ 0x80
 8000d6a:	464b      	mov	r3, r9
 8000d6c:	03d2      	lsls	r2, r2, #15
 8000d6e:	4213      	tst	r3, r2
 8000d70:	d0ea      	beq.n	8000d48 <__aeabi_fmul+0x240>
 8000d72:	4214      	tst	r4, r2
 8000d74:	d1e8      	bne.n	8000d48 <__aeabi_fmul+0x240>
 8000d76:	003e      	movs	r6, r7
 8000d78:	20ff      	movs	r0, #255	@ 0xff
 8000d7a:	4322      	orrs	r2, r4
 8000d7c:	e701      	b.n	8000b82 <__aeabi_fmul+0x7a>
 8000d7e:	46c0      	nop			@ (mov r8, r8)
 8000d80:	f7ffffff 	.word	0xf7ffffff

08000d84 <__aeabi_fsub>:
 8000d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d86:	4647      	mov	r7, r8
 8000d88:	46ce      	mov	lr, r9
 8000d8a:	024e      	lsls	r6, r1, #9
 8000d8c:	0243      	lsls	r3, r0, #9
 8000d8e:	0045      	lsls	r5, r0, #1
 8000d90:	0a72      	lsrs	r2, r6, #9
 8000d92:	0fc4      	lsrs	r4, r0, #31
 8000d94:	0048      	lsls	r0, r1, #1
 8000d96:	b580      	push	{r7, lr}
 8000d98:	4694      	mov	ip, r2
 8000d9a:	0a5f      	lsrs	r7, r3, #9
 8000d9c:	0e2d      	lsrs	r5, r5, #24
 8000d9e:	099b      	lsrs	r3, r3, #6
 8000da0:	0e00      	lsrs	r0, r0, #24
 8000da2:	0fc9      	lsrs	r1, r1, #31
 8000da4:	09b6      	lsrs	r6, r6, #6
 8000da6:	28ff      	cmp	r0, #255	@ 0xff
 8000da8:	d024      	beq.n	8000df4 <__aeabi_fsub+0x70>
 8000daa:	2201      	movs	r2, #1
 8000dac:	4051      	eors	r1, r2
 8000dae:	1a2a      	subs	r2, r5, r0
 8000db0:	428c      	cmp	r4, r1
 8000db2:	d00f      	beq.n	8000dd4 <__aeabi_fsub+0x50>
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	dc00      	bgt.n	8000dba <__aeabi_fsub+0x36>
 8000db8:	e16a      	b.n	8001090 <__aeabi_fsub+0x30c>
 8000dba:	2800      	cmp	r0, #0
 8000dbc:	d135      	bne.n	8000e2a <__aeabi_fsub+0xa6>
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_fsub+0x40>
 8000dc2:	e0a2      	b.n	8000f0a <__aeabi_fsub+0x186>
 8000dc4:	1e51      	subs	r1, r2, #1
 8000dc6:	2a01      	cmp	r2, #1
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_fsub+0x48>
 8000dca:	e124      	b.n	8001016 <__aeabi_fsub+0x292>
 8000dcc:	2aff      	cmp	r2, #255	@ 0xff
 8000dce:	d021      	beq.n	8000e14 <__aeabi_fsub+0x90>
 8000dd0:	000a      	movs	r2, r1
 8000dd2:	e02f      	b.n	8000e34 <__aeabi_fsub+0xb0>
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	dc00      	bgt.n	8000dda <__aeabi_fsub+0x56>
 8000dd8:	e167      	b.n	80010aa <__aeabi_fsub+0x326>
 8000dda:	2800      	cmp	r0, #0
 8000ddc:	d05e      	beq.n	8000e9c <__aeabi_fsub+0x118>
 8000dde:	2dff      	cmp	r5, #255	@ 0xff
 8000de0:	d018      	beq.n	8000e14 <__aeabi_fsub+0x90>
 8000de2:	2180      	movs	r1, #128	@ 0x80
 8000de4:	04c9      	lsls	r1, r1, #19
 8000de6:	430e      	orrs	r6, r1
 8000de8:	2a1b      	cmp	r2, #27
 8000dea:	dc00      	bgt.n	8000dee <__aeabi_fsub+0x6a>
 8000dec:	e076      	b.n	8000edc <__aeabi_fsub+0x158>
 8000dee:	002a      	movs	r2, r5
 8000df0:	3301      	adds	r3, #1
 8000df2:	e032      	b.n	8000e5a <__aeabi_fsub+0xd6>
 8000df4:	002a      	movs	r2, r5
 8000df6:	3aff      	subs	r2, #255	@ 0xff
 8000df8:	4691      	mov	r9, r2
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d042      	beq.n	8000e84 <__aeabi_fsub+0x100>
 8000dfe:	428c      	cmp	r4, r1
 8000e00:	d055      	beq.n	8000eae <__aeabi_fsub+0x12a>
 8000e02:	464a      	mov	r2, r9
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	d100      	bne.n	8000e0a <__aeabi_fsub+0x86>
 8000e08:	e09c      	b.n	8000f44 <__aeabi_fsub+0x1c0>
 8000e0a:	2d00      	cmp	r5, #0
 8000e0c:	d100      	bne.n	8000e10 <__aeabi_fsub+0x8c>
 8000e0e:	e077      	b.n	8000f00 <__aeabi_fsub+0x17c>
 8000e10:	000c      	movs	r4, r1
 8000e12:	0033      	movs	r3, r6
 8000e14:	08db      	lsrs	r3, r3, #3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d100      	bne.n	8000e1c <__aeabi_fsub+0x98>
 8000e1a:	e06e      	b.n	8000efa <__aeabi_fsub+0x176>
 8000e1c:	2280      	movs	r2, #128	@ 0x80
 8000e1e:	03d2      	lsls	r2, r2, #15
 8000e20:	4313      	orrs	r3, r2
 8000e22:	025b      	lsls	r3, r3, #9
 8000e24:	20ff      	movs	r0, #255	@ 0xff
 8000e26:	0a5b      	lsrs	r3, r3, #9
 8000e28:	e024      	b.n	8000e74 <__aeabi_fsub+0xf0>
 8000e2a:	2dff      	cmp	r5, #255	@ 0xff
 8000e2c:	d0f2      	beq.n	8000e14 <__aeabi_fsub+0x90>
 8000e2e:	2180      	movs	r1, #128	@ 0x80
 8000e30:	04c9      	lsls	r1, r1, #19
 8000e32:	430e      	orrs	r6, r1
 8000e34:	2101      	movs	r1, #1
 8000e36:	2a1b      	cmp	r2, #27
 8000e38:	dc08      	bgt.n	8000e4c <__aeabi_fsub+0xc8>
 8000e3a:	0031      	movs	r1, r6
 8000e3c:	2020      	movs	r0, #32
 8000e3e:	40d1      	lsrs	r1, r2
 8000e40:	1a82      	subs	r2, r0, r2
 8000e42:	4096      	lsls	r6, r2
 8000e44:	0032      	movs	r2, r6
 8000e46:	1e50      	subs	r0, r2, #1
 8000e48:	4182      	sbcs	r2, r0
 8000e4a:	4311      	orrs	r1, r2
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	015a      	lsls	r2, r3, #5
 8000e50:	d460      	bmi.n	8000f14 <__aeabi_fsub+0x190>
 8000e52:	2107      	movs	r1, #7
 8000e54:	002a      	movs	r2, r5
 8000e56:	4019      	ands	r1, r3
 8000e58:	d057      	beq.n	8000f0a <__aeabi_fsub+0x186>
 8000e5a:	210f      	movs	r1, #15
 8000e5c:	4019      	ands	r1, r3
 8000e5e:	2904      	cmp	r1, #4
 8000e60:	d000      	beq.n	8000e64 <__aeabi_fsub+0xe0>
 8000e62:	3304      	adds	r3, #4
 8000e64:	0159      	lsls	r1, r3, #5
 8000e66:	d550      	bpl.n	8000f0a <__aeabi_fsub+0x186>
 8000e68:	1c50      	adds	r0, r2, #1
 8000e6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000e6c:	d045      	beq.n	8000efa <__aeabi_fsub+0x176>
 8000e6e:	019b      	lsls	r3, r3, #6
 8000e70:	b2c0      	uxtb	r0, r0
 8000e72:	0a5b      	lsrs	r3, r3, #9
 8000e74:	05c0      	lsls	r0, r0, #23
 8000e76:	4318      	orrs	r0, r3
 8000e78:	07e4      	lsls	r4, r4, #31
 8000e7a:	4320      	orrs	r0, r4
 8000e7c:	bcc0      	pop	{r6, r7}
 8000e7e:	46b9      	mov	r9, r7
 8000e80:	46b0      	mov	r8, r6
 8000e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e84:	2201      	movs	r2, #1
 8000e86:	4051      	eors	r1, r2
 8000e88:	428c      	cmp	r4, r1
 8000e8a:	d1ba      	bne.n	8000e02 <__aeabi_fsub+0x7e>
 8000e8c:	464a      	mov	r2, r9
 8000e8e:	2a00      	cmp	r2, #0
 8000e90:	d010      	beq.n	8000eb4 <__aeabi_fsub+0x130>
 8000e92:	2d00      	cmp	r5, #0
 8000e94:	d100      	bne.n	8000e98 <__aeabi_fsub+0x114>
 8000e96:	e098      	b.n	8000fca <__aeabi_fsub+0x246>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	e7bb      	b.n	8000e14 <__aeabi_fsub+0x90>
 8000e9c:	2e00      	cmp	r6, #0
 8000e9e:	d034      	beq.n	8000f0a <__aeabi_fsub+0x186>
 8000ea0:	1e51      	subs	r1, r2, #1
 8000ea2:	2a01      	cmp	r2, #1
 8000ea4:	d06e      	beq.n	8000f84 <__aeabi_fsub+0x200>
 8000ea6:	2aff      	cmp	r2, #255	@ 0xff
 8000ea8:	d0b4      	beq.n	8000e14 <__aeabi_fsub+0x90>
 8000eaa:	000a      	movs	r2, r1
 8000eac:	e79c      	b.n	8000de8 <__aeabi_fsub+0x64>
 8000eae:	2a00      	cmp	r2, #0
 8000eb0:	d000      	beq.n	8000eb4 <__aeabi_fsub+0x130>
 8000eb2:	e088      	b.n	8000fc6 <__aeabi_fsub+0x242>
 8000eb4:	20fe      	movs	r0, #254	@ 0xfe
 8000eb6:	1c6a      	adds	r2, r5, #1
 8000eb8:	4210      	tst	r0, r2
 8000eba:	d000      	beq.n	8000ebe <__aeabi_fsub+0x13a>
 8000ebc:	e092      	b.n	8000fe4 <__aeabi_fsub+0x260>
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d000      	beq.n	8000ec4 <__aeabi_fsub+0x140>
 8000ec2:	e0a4      	b.n	800100e <__aeabi_fsub+0x28a>
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d100      	bne.n	8000eca <__aeabi_fsub+0x146>
 8000ec8:	e0cb      	b.n	8001062 <__aeabi_fsub+0x2de>
 8000eca:	2e00      	cmp	r6, #0
 8000ecc:	d000      	beq.n	8000ed0 <__aeabi_fsub+0x14c>
 8000ece:	e0ca      	b.n	8001066 <__aeabi_fsub+0x2e2>
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	08db      	lsrs	r3, r3, #3
 8000ed4:	025b      	lsls	r3, r3, #9
 8000ed6:	0a5b      	lsrs	r3, r3, #9
 8000ed8:	b2d0      	uxtb	r0, r2
 8000eda:	e7cb      	b.n	8000e74 <__aeabi_fsub+0xf0>
 8000edc:	0031      	movs	r1, r6
 8000ede:	2020      	movs	r0, #32
 8000ee0:	40d1      	lsrs	r1, r2
 8000ee2:	1a82      	subs	r2, r0, r2
 8000ee4:	4096      	lsls	r6, r2
 8000ee6:	0032      	movs	r2, r6
 8000ee8:	1e50      	subs	r0, r2, #1
 8000eea:	4182      	sbcs	r2, r0
 8000eec:	430a      	orrs	r2, r1
 8000eee:	189b      	adds	r3, r3, r2
 8000ef0:	015a      	lsls	r2, r3, #5
 8000ef2:	d5ae      	bpl.n	8000e52 <__aeabi_fsub+0xce>
 8000ef4:	1c6a      	adds	r2, r5, #1
 8000ef6:	2dfe      	cmp	r5, #254	@ 0xfe
 8000ef8:	d14a      	bne.n	8000f90 <__aeabi_fsub+0x20c>
 8000efa:	20ff      	movs	r0, #255	@ 0xff
 8000efc:	2300      	movs	r3, #0
 8000efe:	e7b9      	b.n	8000e74 <__aeabi_fsub+0xf0>
 8000f00:	22ff      	movs	r2, #255	@ 0xff
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d14b      	bne.n	8000f9e <__aeabi_fsub+0x21a>
 8000f06:	000c      	movs	r4, r1
 8000f08:	0033      	movs	r3, r6
 8000f0a:	08db      	lsrs	r3, r3, #3
 8000f0c:	2aff      	cmp	r2, #255	@ 0xff
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_fsub+0x18e>
 8000f10:	e781      	b.n	8000e16 <__aeabi_fsub+0x92>
 8000f12:	e7df      	b.n	8000ed4 <__aeabi_fsub+0x150>
 8000f14:	019f      	lsls	r7, r3, #6
 8000f16:	09bf      	lsrs	r7, r7, #6
 8000f18:	0038      	movs	r0, r7
 8000f1a:	f002 f81b 	bl	8002f54 <__clzsi2>
 8000f1e:	3805      	subs	r0, #5
 8000f20:	4087      	lsls	r7, r0
 8000f22:	4285      	cmp	r5, r0
 8000f24:	dc21      	bgt.n	8000f6a <__aeabi_fsub+0x1e6>
 8000f26:	003b      	movs	r3, r7
 8000f28:	2120      	movs	r1, #32
 8000f2a:	1b42      	subs	r2, r0, r5
 8000f2c:	3201      	adds	r2, #1
 8000f2e:	40d3      	lsrs	r3, r2
 8000f30:	1a8a      	subs	r2, r1, r2
 8000f32:	4097      	lsls	r7, r2
 8000f34:	1e7a      	subs	r2, r7, #1
 8000f36:	4197      	sbcs	r7, r2
 8000f38:	2200      	movs	r2, #0
 8000f3a:	433b      	orrs	r3, r7
 8000f3c:	0759      	lsls	r1, r3, #29
 8000f3e:	d000      	beq.n	8000f42 <__aeabi_fsub+0x1be>
 8000f40:	e78b      	b.n	8000e5a <__aeabi_fsub+0xd6>
 8000f42:	e78f      	b.n	8000e64 <__aeabi_fsub+0xe0>
 8000f44:	20fe      	movs	r0, #254	@ 0xfe
 8000f46:	1c6a      	adds	r2, r5, #1
 8000f48:	4210      	tst	r0, r2
 8000f4a:	d112      	bne.n	8000f72 <__aeabi_fsub+0x1ee>
 8000f4c:	2d00      	cmp	r5, #0
 8000f4e:	d152      	bne.n	8000ff6 <__aeabi_fsub+0x272>
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d07c      	beq.n	800104e <__aeabi_fsub+0x2ca>
 8000f54:	2e00      	cmp	r6, #0
 8000f56:	d0bb      	beq.n	8000ed0 <__aeabi_fsub+0x14c>
 8000f58:	1b9a      	subs	r2, r3, r6
 8000f5a:	0150      	lsls	r0, r2, #5
 8000f5c:	d400      	bmi.n	8000f60 <__aeabi_fsub+0x1dc>
 8000f5e:	e08b      	b.n	8001078 <__aeabi_fsub+0x2f4>
 8000f60:	2401      	movs	r4, #1
 8000f62:	2200      	movs	r2, #0
 8000f64:	1af3      	subs	r3, r6, r3
 8000f66:	400c      	ands	r4, r1
 8000f68:	e7e8      	b.n	8000f3c <__aeabi_fsub+0x1b8>
 8000f6a:	4b56      	ldr	r3, [pc, #344]	@ (80010c4 <__aeabi_fsub+0x340>)
 8000f6c:	1a2a      	subs	r2, r5, r0
 8000f6e:	403b      	ands	r3, r7
 8000f70:	e7e4      	b.n	8000f3c <__aeabi_fsub+0x1b8>
 8000f72:	1b9f      	subs	r7, r3, r6
 8000f74:	017a      	lsls	r2, r7, #5
 8000f76:	d446      	bmi.n	8001006 <__aeabi_fsub+0x282>
 8000f78:	2f00      	cmp	r7, #0
 8000f7a:	d1cd      	bne.n	8000f18 <__aeabi_fsub+0x194>
 8000f7c:	2400      	movs	r4, #0
 8000f7e:	2000      	movs	r0, #0
 8000f80:	2300      	movs	r3, #0
 8000f82:	e777      	b.n	8000e74 <__aeabi_fsub+0xf0>
 8000f84:	199b      	adds	r3, r3, r6
 8000f86:	2501      	movs	r5, #1
 8000f88:	3201      	adds	r2, #1
 8000f8a:	0159      	lsls	r1, r3, #5
 8000f8c:	d400      	bmi.n	8000f90 <__aeabi_fsub+0x20c>
 8000f8e:	e760      	b.n	8000e52 <__aeabi_fsub+0xce>
 8000f90:	2101      	movs	r1, #1
 8000f92:	484d      	ldr	r0, [pc, #308]	@ (80010c8 <__aeabi_fsub+0x344>)
 8000f94:	4019      	ands	r1, r3
 8000f96:	085b      	lsrs	r3, r3, #1
 8000f98:	4003      	ands	r3, r0
 8000f9a:	430b      	orrs	r3, r1
 8000f9c:	e7ce      	b.n	8000f3c <__aeabi_fsub+0x1b8>
 8000f9e:	1e57      	subs	r7, r2, #1
 8000fa0:	2a01      	cmp	r2, #1
 8000fa2:	d05a      	beq.n	800105a <__aeabi_fsub+0x2d6>
 8000fa4:	000c      	movs	r4, r1
 8000fa6:	2aff      	cmp	r2, #255	@ 0xff
 8000fa8:	d033      	beq.n	8001012 <__aeabi_fsub+0x28e>
 8000faa:	2201      	movs	r2, #1
 8000fac:	2f1b      	cmp	r7, #27
 8000fae:	dc07      	bgt.n	8000fc0 <__aeabi_fsub+0x23c>
 8000fb0:	2120      	movs	r1, #32
 8000fb2:	1bc9      	subs	r1, r1, r7
 8000fb4:	001a      	movs	r2, r3
 8000fb6:	408b      	lsls	r3, r1
 8000fb8:	40fa      	lsrs	r2, r7
 8000fba:	1e59      	subs	r1, r3, #1
 8000fbc:	418b      	sbcs	r3, r1
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	0005      	movs	r5, r0
 8000fc2:	1ab3      	subs	r3, r6, r2
 8000fc4:	e743      	b.n	8000e4e <__aeabi_fsub+0xca>
 8000fc6:	2d00      	cmp	r5, #0
 8000fc8:	d123      	bne.n	8001012 <__aeabi_fsub+0x28e>
 8000fca:	22ff      	movs	r2, #255	@ 0xff
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d09b      	beq.n	8000f08 <__aeabi_fsub+0x184>
 8000fd0:	1e51      	subs	r1, r2, #1
 8000fd2:	2a01      	cmp	r2, #1
 8000fd4:	d0d6      	beq.n	8000f84 <__aeabi_fsub+0x200>
 8000fd6:	2aff      	cmp	r2, #255	@ 0xff
 8000fd8:	d01b      	beq.n	8001012 <__aeabi_fsub+0x28e>
 8000fda:	291b      	cmp	r1, #27
 8000fdc:	dd2c      	ble.n	8001038 <__aeabi_fsub+0x2b4>
 8000fde:	0002      	movs	r2, r0
 8000fe0:	1c73      	adds	r3, r6, #1
 8000fe2:	e73a      	b.n	8000e5a <__aeabi_fsub+0xd6>
 8000fe4:	2aff      	cmp	r2, #255	@ 0xff
 8000fe6:	d088      	beq.n	8000efa <__aeabi_fsub+0x176>
 8000fe8:	199b      	adds	r3, r3, r6
 8000fea:	085b      	lsrs	r3, r3, #1
 8000fec:	0759      	lsls	r1, r3, #29
 8000fee:	d000      	beq.n	8000ff2 <__aeabi_fsub+0x26e>
 8000ff0:	e733      	b.n	8000e5a <__aeabi_fsub+0xd6>
 8000ff2:	08db      	lsrs	r3, r3, #3
 8000ff4:	e76e      	b.n	8000ed4 <__aeabi_fsub+0x150>
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d110      	bne.n	800101c <__aeabi_fsub+0x298>
 8000ffa:	2e00      	cmp	r6, #0
 8000ffc:	d043      	beq.n	8001086 <__aeabi_fsub+0x302>
 8000ffe:	2401      	movs	r4, #1
 8001000:	0033      	movs	r3, r6
 8001002:	400c      	ands	r4, r1
 8001004:	e706      	b.n	8000e14 <__aeabi_fsub+0x90>
 8001006:	2401      	movs	r4, #1
 8001008:	1af7      	subs	r7, r6, r3
 800100a:	400c      	ands	r4, r1
 800100c:	e784      	b.n	8000f18 <__aeabi_fsub+0x194>
 800100e:	2b00      	cmp	r3, #0
 8001010:	d104      	bne.n	800101c <__aeabi_fsub+0x298>
 8001012:	0033      	movs	r3, r6
 8001014:	e6fe      	b.n	8000e14 <__aeabi_fsub+0x90>
 8001016:	2501      	movs	r5, #1
 8001018:	1b9b      	subs	r3, r3, r6
 800101a:	e718      	b.n	8000e4e <__aeabi_fsub+0xca>
 800101c:	2e00      	cmp	r6, #0
 800101e:	d100      	bne.n	8001022 <__aeabi_fsub+0x29e>
 8001020:	e6f8      	b.n	8000e14 <__aeabi_fsub+0x90>
 8001022:	2280      	movs	r2, #128	@ 0x80
 8001024:	03d2      	lsls	r2, r2, #15
 8001026:	4297      	cmp	r7, r2
 8001028:	d304      	bcc.n	8001034 <__aeabi_fsub+0x2b0>
 800102a:	4594      	cmp	ip, r2
 800102c:	d202      	bcs.n	8001034 <__aeabi_fsub+0x2b0>
 800102e:	2401      	movs	r4, #1
 8001030:	0033      	movs	r3, r6
 8001032:	400c      	ands	r4, r1
 8001034:	08db      	lsrs	r3, r3, #3
 8001036:	e6f1      	b.n	8000e1c <__aeabi_fsub+0x98>
 8001038:	001a      	movs	r2, r3
 800103a:	2520      	movs	r5, #32
 800103c:	40ca      	lsrs	r2, r1
 800103e:	1a69      	subs	r1, r5, r1
 8001040:	408b      	lsls	r3, r1
 8001042:	1e59      	subs	r1, r3, #1
 8001044:	418b      	sbcs	r3, r1
 8001046:	4313      	orrs	r3, r2
 8001048:	0005      	movs	r5, r0
 800104a:	199b      	adds	r3, r3, r6
 800104c:	e750      	b.n	8000ef0 <__aeabi_fsub+0x16c>
 800104e:	2e00      	cmp	r6, #0
 8001050:	d094      	beq.n	8000f7c <__aeabi_fsub+0x1f8>
 8001052:	2401      	movs	r4, #1
 8001054:	0033      	movs	r3, r6
 8001056:	400c      	ands	r4, r1
 8001058:	e73a      	b.n	8000ed0 <__aeabi_fsub+0x14c>
 800105a:	000c      	movs	r4, r1
 800105c:	2501      	movs	r5, #1
 800105e:	1af3      	subs	r3, r6, r3
 8001060:	e6f5      	b.n	8000e4e <__aeabi_fsub+0xca>
 8001062:	0033      	movs	r3, r6
 8001064:	e734      	b.n	8000ed0 <__aeabi_fsub+0x14c>
 8001066:	199b      	adds	r3, r3, r6
 8001068:	2200      	movs	r2, #0
 800106a:	0159      	lsls	r1, r3, #5
 800106c:	d5c1      	bpl.n	8000ff2 <__aeabi_fsub+0x26e>
 800106e:	4a15      	ldr	r2, [pc, #84]	@ (80010c4 <__aeabi_fsub+0x340>)
 8001070:	4013      	ands	r3, r2
 8001072:	08db      	lsrs	r3, r3, #3
 8001074:	2201      	movs	r2, #1
 8001076:	e72d      	b.n	8000ed4 <__aeabi_fsub+0x150>
 8001078:	2a00      	cmp	r2, #0
 800107a:	d100      	bne.n	800107e <__aeabi_fsub+0x2fa>
 800107c:	e77e      	b.n	8000f7c <__aeabi_fsub+0x1f8>
 800107e:	0013      	movs	r3, r2
 8001080:	2200      	movs	r2, #0
 8001082:	08db      	lsrs	r3, r3, #3
 8001084:	e726      	b.n	8000ed4 <__aeabi_fsub+0x150>
 8001086:	2380      	movs	r3, #128	@ 0x80
 8001088:	2400      	movs	r4, #0
 800108a:	20ff      	movs	r0, #255	@ 0xff
 800108c:	03db      	lsls	r3, r3, #15
 800108e:	e6f1      	b.n	8000e74 <__aeabi_fsub+0xf0>
 8001090:	2a00      	cmp	r2, #0
 8001092:	d100      	bne.n	8001096 <__aeabi_fsub+0x312>
 8001094:	e756      	b.n	8000f44 <__aeabi_fsub+0x1c0>
 8001096:	1b47      	subs	r7, r0, r5
 8001098:	003a      	movs	r2, r7
 800109a:	2d00      	cmp	r5, #0
 800109c:	d100      	bne.n	80010a0 <__aeabi_fsub+0x31c>
 800109e:	e730      	b.n	8000f02 <__aeabi_fsub+0x17e>
 80010a0:	2280      	movs	r2, #128	@ 0x80
 80010a2:	04d2      	lsls	r2, r2, #19
 80010a4:	000c      	movs	r4, r1
 80010a6:	4313      	orrs	r3, r2
 80010a8:	e77f      	b.n	8000faa <__aeabi_fsub+0x226>
 80010aa:	2a00      	cmp	r2, #0
 80010ac:	d100      	bne.n	80010b0 <__aeabi_fsub+0x32c>
 80010ae:	e701      	b.n	8000eb4 <__aeabi_fsub+0x130>
 80010b0:	1b41      	subs	r1, r0, r5
 80010b2:	2d00      	cmp	r5, #0
 80010b4:	d101      	bne.n	80010ba <__aeabi_fsub+0x336>
 80010b6:	000a      	movs	r2, r1
 80010b8:	e788      	b.n	8000fcc <__aeabi_fsub+0x248>
 80010ba:	2280      	movs	r2, #128	@ 0x80
 80010bc:	04d2      	lsls	r2, r2, #19
 80010be:	4313      	orrs	r3, r2
 80010c0:	e78b      	b.n	8000fda <__aeabi_fsub+0x256>
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	fbffffff 	.word	0xfbffffff
 80010c8:	7dffffff 	.word	0x7dffffff

080010cc <__aeabi_f2iz>:
 80010cc:	0241      	lsls	r1, r0, #9
 80010ce:	0042      	lsls	r2, r0, #1
 80010d0:	0fc3      	lsrs	r3, r0, #31
 80010d2:	0a49      	lsrs	r1, r1, #9
 80010d4:	2000      	movs	r0, #0
 80010d6:	0e12      	lsrs	r2, r2, #24
 80010d8:	2a7e      	cmp	r2, #126	@ 0x7e
 80010da:	dd03      	ble.n	80010e4 <__aeabi_f2iz+0x18>
 80010dc:	2a9d      	cmp	r2, #157	@ 0x9d
 80010de:	dd02      	ble.n	80010e6 <__aeabi_f2iz+0x1a>
 80010e0:	4a09      	ldr	r2, [pc, #36]	@ (8001108 <__aeabi_f2iz+0x3c>)
 80010e2:	1898      	adds	r0, r3, r2
 80010e4:	4770      	bx	lr
 80010e6:	2080      	movs	r0, #128	@ 0x80
 80010e8:	0400      	lsls	r0, r0, #16
 80010ea:	4301      	orrs	r1, r0
 80010ec:	2a95      	cmp	r2, #149	@ 0x95
 80010ee:	dc07      	bgt.n	8001100 <__aeabi_f2iz+0x34>
 80010f0:	2096      	movs	r0, #150	@ 0x96
 80010f2:	1a82      	subs	r2, r0, r2
 80010f4:	40d1      	lsrs	r1, r2
 80010f6:	4248      	negs	r0, r1
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1f3      	bne.n	80010e4 <__aeabi_f2iz+0x18>
 80010fc:	0008      	movs	r0, r1
 80010fe:	e7f1      	b.n	80010e4 <__aeabi_f2iz+0x18>
 8001100:	3a96      	subs	r2, #150	@ 0x96
 8001102:	4091      	lsls	r1, r2
 8001104:	e7f7      	b.n	80010f6 <__aeabi_f2iz+0x2a>
 8001106:	46c0      	nop			@ (mov r8, r8)
 8001108:	7fffffff 	.word	0x7fffffff

0800110c <__aeabi_ui2f>:
 800110c:	b570      	push	{r4, r5, r6, lr}
 800110e:	1e04      	subs	r4, r0, #0
 8001110:	d00e      	beq.n	8001130 <__aeabi_ui2f+0x24>
 8001112:	f001 ff1f 	bl	8002f54 <__clzsi2>
 8001116:	239e      	movs	r3, #158	@ 0x9e
 8001118:	0001      	movs	r1, r0
 800111a:	1a1b      	subs	r3, r3, r0
 800111c:	2b96      	cmp	r3, #150	@ 0x96
 800111e:	dc0c      	bgt.n	800113a <__aeabi_ui2f+0x2e>
 8001120:	2808      	cmp	r0, #8
 8001122:	d02f      	beq.n	8001184 <__aeabi_ui2f+0x78>
 8001124:	3908      	subs	r1, #8
 8001126:	408c      	lsls	r4, r1
 8001128:	0264      	lsls	r4, r4, #9
 800112a:	0a64      	lsrs	r4, r4, #9
 800112c:	b2d8      	uxtb	r0, r3
 800112e:	e001      	b.n	8001134 <__aeabi_ui2f+0x28>
 8001130:	2000      	movs	r0, #0
 8001132:	2400      	movs	r4, #0
 8001134:	05c0      	lsls	r0, r0, #23
 8001136:	4320      	orrs	r0, r4
 8001138:	bd70      	pop	{r4, r5, r6, pc}
 800113a:	2b99      	cmp	r3, #153	@ 0x99
 800113c:	dc16      	bgt.n	800116c <__aeabi_ui2f+0x60>
 800113e:	1f42      	subs	r2, r0, #5
 8001140:	2805      	cmp	r0, #5
 8001142:	d000      	beq.n	8001146 <__aeabi_ui2f+0x3a>
 8001144:	4094      	lsls	r4, r2
 8001146:	0022      	movs	r2, r4
 8001148:	4810      	ldr	r0, [pc, #64]	@ (800118c <__aeabi_ui2f+0x80>)
 800114a:	4002      	ands	r2, r0
 800114c:	0765      	lsls	r5, r4, #29
 800114e:	d009      	beq.n	8001164 <__aeabi_ui2f+0x58>
 8001150:	250f      	movs	r5, #15
 8001152:	402c      	ands	r4, r5
 8001154:	2c04      	cmp	r4, #4
 8001156:	d005      	beq.n	8001164 <__aeabi_ui2f+0x58>
 8001158:	3204      	adds	r2, #4
 800115a:	0154      	lsls	r4, r2, #5
 800115c:	d502      	bpl.n	8001164 <__aeabi_ui2f+0x58>
 800115e:	239f      	movs	r3, #159	@ 0x9f
 8001160:	4002      	ands	r2, r0
 8001162:	1a5b      	subs	r3, r3, r1
 8001164:	0192      	lsls	r2, r2, #6
 8001166:	0a54      	lsrs	r4, r2, #9
 8001168:	b2d8      	uxtb	r0, r3
 800116a:	e7e3      	b.n	8001134 <__aeabi_ui2f+0x28>
 800116c:	0002      	movs	r2, r0
 800116e:	0020      	movs	r0, r4
 8001170:	321b      	adds	r2, #27
 8001172:	4090      	lsls	r0, r2
 8001174:	0002      	movs	r2, r0
 8001176:	1e50      	subs	r0, r2, #1
 8001178:	4182      	sbcs	r2, r0
 800117a:	2005      	movs	r0, #5
 800117c:	1a40      	subs	r0, r0, r1
 800117e:	40c4      	lsrs	r4, r0
 8001180:	4314      	orrs	r4, r2
 8001182:	e7e0      	b.n	8001146 <__aeabi_ui2f+0x3a>
 8001184:	0264      	lsls	r4, r4, #9
 8001186:	2096      	movs	r0, #150	@ 0x96
 8001188:	0a64      	lsrs	r4, r4, #9
 800118a:	e7d3      	b.n	8001134 <__aeabi_ui2f+0x28>
 800118c:	fbffffff 	.word	0xfbffffff

08001190 <__aeabi_dadd>:
 8001190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001192:	4657      	mov	r7, sl
 8001194:	464e      	mov	r6, r9
 8001196:	4645      	mov	r5, r8
 8001198:	46de      	mov	lr, fp
 800119a:	b5e0      	push	{r5, r6, r7, lr}
 800119c:	b083      	sub	sp, #12
 800119e:	9000      	str	r0, [sp, #0]
 80011a0:	9101      	str	r1, [sp, #4]
 80011a2:	030c      	lsls	r4, r1, #12
 80011a4:	004f      	lsls	r7, r1, #1
 80011a6:	0fce      	lsrs	r6, r1, #31
 80011a8:	0a61      	lsrs	r1, r4, #9
 80011aa:	9c00      	ldr	r4, [sp, #0]
 80011ac:	031d      	lsls	r5, r3, #12
 80011ae:	0f64      	lsrs	r4, r4, #29
 80011b0:	430c      	orrs	r4, r1
 80011b2:	9900      	ldr	r1, [sp, #0]
 80011b4:	9200      	str	r2, [sp, #0]
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	00c8      	lsls	r0, r1, #3
 80011ba:	0059      	lsls	r1, r3, #1
 80011bc:	0d4b      	lsrs	r3, r1, #21
 80011be:	4699      	mov	r9, r3
 80011c0:	9a00      	ldr	r2, [sp, #0]
 80011c2:	9b01      	ldr	r3, [sp, #4]
 80011c4:	0a6d      	lsrs	r5, r5, #9
 80011c6:	0fd9      	lsrs	r1, r3, #31
 80011c8:	0f53      	lsrs	r3, r2, #29
 80011ca:	432b      	orrs	r3, r5
 80011cc:	469a      	mov	sl, r3
 80011ce:	9b00      	ldr	r3, [sp, #0]
 80011d0:	0d7f      	lsrs	r7, r7, #21
 80011d2:	00da      	lsls	r2, r3, #3
 80011d4:	4694      	mov	ip, r2
 80011d6:	464a      	mov	r2, r9
 80011d8:	46b0      	mov	r8, r6
 80011da:	1aba      	subs	r2, r7, r2
 80011dc:	428e      	cmp	r6, r1
 80011de:	d100      	bne.n	80011e2 <__aeabi_dadd+0x52>
 80011e0:	e0b0      	b.n	8001344 <__aeabi_dadd+0x1b4>
 80011e2:	2a00      	cmp	r2, #0
 80011e4:	dc00      	bgt.n	80011e8 <__aeabi_dadd+0x58>
 80011e6:	e078      	b.n	80012da <__aeabi_dadd+0x14a>
 80011e8:	4649      	mov	r1, r9
 80011ea:	2900      	cmp	r1, #0
 80011ec:	d100      	bne.n	80011f0 <__aeabi_dadd+0x60>
 80011ee:	e0e9      	b.n	80013c4 <__aeabi_dadd+0x234>
 80011f0:	49c9      	ldr	r1, [pc, #804]	@ (8001518 <__aeabi_dadd+0x388>)
 80011f2:	428f      	cmp	r7, r1
 80011f4:	d100      	bne.n	80011f8 <__aeabi_dadd+0x68>
 80011f6:	e195      	b.n	8001524 <__aeabi_dadd+0x394>
 80011f8:	2501      	movs	r5, #1
 80011fa:	2a38      	cmp	r2, #56	@ 0x38
 80011fc:	dc16      	bgt.n	800122c <__aeabi_dadd+0x9c>
 80011fe:	2180      	movs	r1, #128	@ 0x80
 8001200:	4653      	mov	r3, sl
 8001202:	0409      	lsls	r1, r1, #16
 8001204:	430b      	orrs	r3, r1
 8001206:	469a      	mov	sl, r3
 8001208:	2a1f      	cmp	r2, #31
 800120a:	dd00      	ble.n	800120e <__aeabi_dadd+0x7e>
 800120c:	e1e7      	b.n	80015de <__aeabi_dadd+0x44e>
 800120e:	2120      	movs	r1, #32
 8001210:	4655      	mov	r5, sl
 8001212:	1a8b      	subs	r3, r1, r2
 8001214:	4661      	mov	r1, ip
 8001216:	409d      	lsls	r5, r3
 8001218:	40d1      	lsrs	r1, r2
 800121a:	430d      	orrs	r5, r1
 800121c:	4661      	mov	r1, ip
 800121e:	4099      	lsls	r1, r3
 8001220:	1e4b      	subs	r3, r1, #1
 8001222:	4199      	sbcs	r1, r3
 8001224:	4653      	mov	r3, sl
 8001226:	40d3      	lsrs	r3, r2
 8001228:	430d      	orrs	r5, r1
 800122a:	1ae4      	subs	r4, r4, r3
 800122c:	1b45      	subs	r5, r0, r5
 800122e:	42a8      	cmp	r0, r5
 8001230:	4180      	sbcs	r0, r0
 8001232:	4240      	negs	r0, r0
 8001234:	1a24      	subs	r4, r4, r0
 8001236:	0223      	lsls	r3, r4, #8
 8001238:	d400      	bmi.n	800123c <__aeabi_dadd+0xac>
 800123a:	e10f      	b.n	800145c <__aeabi_dadd+0x2cc>
 800123c:	0264      	lsls	r4, r4, #9
 800123e:	0a64      	lsrs	r4, r4, #9
 8001240:	2c00      	cmp	r4, #0
 8001242:	d100      	bne.n	8001246 <__aeabi_dadd+0xb6>
 8001244:	e139      	b.n	80014ba <__aeabi_dadd+0x32a>
 8001246:	0020      	movs	r0, r4
 8001248:	f001 fe84 	bl	8002f54 <__clzsi2>
 800124c:	0003      	movs	r3, r0
 800124e:	3b08      	subs	r3, #8
 8001250:	2120      	movs	r1, #32
 8001252:	0028      	movs	r0, r5
 8001254:	1aca      	subs	r2, r1, r3
 8001256:	40d0      	lsrs	r0, r2
 8001258:	409c      	lsls	r4, r3
 800125a:	0002      	movs	r2, r0
 800125c:	409d      	lsls	r5, r3
 800125e:	4322      	orrs	r2, r4
 8001260:	429f      	cmp	r7, r3
 8001262:	dd00      	ble.n	8001266 <__aeabi_dadd+0xd6>
 8001264:	e173      	b.n	800154e <__aeabi_dadd+0x3be>
 8001266:	1bd8      	subs	r0, r3, r7
 8001268:	3001      	adds	r0, #1
 800126a:	1a09      	subs	r1, r1, r0
 800126c:	002c      	movs	r4, r5
 800126e:	408d      	lsls	r5, r1
 8001270:	40c4      	lsrs	r4, r0
 8001272:	1e6b      	subs	r3, r5, #1
 8001274:	419d      	sbcs	r5, r3
 8001276:	0013      	movs	r3, r2
 8001278:	40c2      	lsrs	r2, r0
 800127a:	408b      	lsls	r3, r1
 800127c:	4325      	orrs	r5, r4
 800127e:	2700      	movs	r7, #0
 8001280:	0014      	movs	r4, r2
 8001282:	431d      	orrs	r5, r3
 8001284:	076b      	lsls	r3, r5, #29
 8001286:	d009      	beq.n	800129c <__aeabi_dadd+0x10c>
 8001288:	230f      	movs	r3, #15
 800128a:	402b      	ands	r3, r5
 800128c:	2b04      	cmp	r3, #4
 800128e:	d005      	beq.n	800129c <__aeabi_dadd+0x10c>
 8001290:	1d2b      	adds	r3, r5, #4
 8001292:	42ab      	cmp	r3, r5
 8001294:	41ad      	sbcs	r5, r5
 8001296:	426d      	negs	r5, r5
 8001298:	1964      	adds	r4, r4, r5
 800129a:	001d      	movs	r5, r3
 800129c:	0223      	lsls	r3, r4, #8
 800129e:	d400      	bmi.n	80012a2 <__aeabi_dadd+0x112>
 80012a0:	e12d      	b.n	80014fe <__aeabi_dadd+0x36e>
 80012a2:	4a9d      	ldr	r2, [pc, #628]	@ (8001518 <__aeabi_dadd+0x388>)
 80012a4:	3701      	adds	r7, #1
 80012a6:	4297      	cmp	r7, r2
 80012a8:	d100      	bne.n	80012ac <__aeabi_dadd+0x11c>
 80012aa:	e0d3      	b.n	8001454 <__aeabi_dadd+0x2c4>
 80012ac:	4646      	mov	r6, r8
 80012ae:	499b      	ldr	r1, [pc, #620]	@ (800151c <__aeabi_dadd+0x38c>)
 80012b0:	08ed      	lsrs	r5, r5, #3
 80012b2:	4021      	ands	r1, r4
 80012b4:	074a      	lsls	r2, r1, #29
 80012b6:	432a      	orrs	r2, r5
 80012b8:	057c      	lsls	r4, r7, #21
 80012ba:	024d      	lsls	r5, r1, #9
 80012bc:	0b2d      	lsrs	r5, r5, #12
 80012be:	0d64      	lsrs	r4, r4, #21
 80012c0:	0524      	lsls	r4, r4, #20
 80012c2:	432c      	orrs	r4, r5
 80012c4:	07f6      	lsls	r6, r6, #31
 80012c6:	4334      	orrs	r4, r6
 80012c8:	0010      	movs	r0, r2
 80012ca:	0021      	movs	r1, r4
 80012cc:	b003      	add	sp, #12
 80012ce:	bcf0      	pop	{r4, r5, r6, r7}
 80012d0:	46bb      	mov	fp, r7
 80012d2:	46b2      	mov	sl, r6
 80012d4:	46a9      	mov	r9, r5
 80012d6:	46a0      	mov	r8, r4
 80012d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012da:	2a00      	cmp	r2, #0
 80012dc:	d100      	bne.n	80012e0 <__aeabi_dadd+0x150>
 80012de:	e084      	b.n	80013ea <__aeabi_dadd+0x25a>
 80012e0:	464a      	mov	r2, r9
 80012e2:	1bd2      	subs	r2, r2, r7
 80012e4:	2f00      	cmp	r7, #0
 80012e6:	d000      	beq.n	80012ea <__aeabi_dadd+0x15a>
 80012e8:	e16d      	b.n	80015c6 <__aeabi_dadd+0x436>
 80012ea:	0025      	movs	r5, r4
 80012ec:	4305      	orrs	r5, r0
 80012ee:	d100      	bne.n	80012f2 <__aeabi_dadd+0x162>
 80012f0:	e127      	b.n	8001542 <__aeabi_dadd+0x3b2>
 80012f2:	1e56      	subs	r6, r2, #1
 80012f4:	2a01      	cmp	r2, #1
 80012f6:	d100      	bne.n	80012fa <__aeabi_dadd+0x16a>
 80012f8:	e23b      	b.n	8001772 <__aeabi_dadd+0x5e2>
 80012fa:	4d87      	ldr	r5, [pc, #540]	@ (8001518 <__aeabi_dadd+0x388>)
 80012fc:	42aa      	cmp	r2, r5
 80012fe:	d100      	bne.n	8001302 <__aeabi_dadd+0x172>
 8001300:	e26a      	b.n	80017d8 <__aeabi_dadd+0x648>
 8001302:	2501      	movs	r5, #1
 8001304:	2e38      	cmp	r6, #56	@ 0x38
 8001306:	dc12      	bgt.n	800132e <__aeabi_dadd+0x19e>
 8001308:	0032      	movs	r2, r6
 800130a:	2a1f      	cmp	r2, #31
 800130c:	dd00      	ble.n	8001310 <__aeabi_dadd+0x180>
 800130e:	e1f8      	b.n	8001702 <__aeabi_dadd+0x572>
 8001310:	2620      	movs	r6, #32
 8001312:	0025      	movs	r5, r4
 8001314:	1ab6      	subs	r6, r6, r2
 8001316:	0007      	movs	r7, r0
 8001318:	4653      	mov	r3, sl
 800131a:	40b0      	lsls	r0, r6
 800131c:	40d4      	lsrs	r4, r2
 800131e:	40b5      	lsls	r5, r6
 8001320:	40d7      	lsrs	r7, r2
 8001322:	1e46      	subs	r6, r0, #1
 8001324:	41b0      	sbcs	r0, r6
 8001326:	1b1b      	subs	r3, r3, r4
 8001328:	469a      	mov	sl, r3
 800132a:	433d      	orrs	r5, r7
 800132c:	4305      	orrs	r5, r0
 800132e:	4662      	mov	r2, ip
 8001330:	1b55      	subs	r5, r2, r5
 8001332:	45ac      	cmp	ip, r5
 8001334:	4192      	sbcs	r2, r2
 8001336:	4653      	mov	r3, sl
 8001338:	4252      	negs	r2, r2
 800133a:	000e      	movs	r6, r1
 800133c:	464f      	mov	r7, r9
 800133e:	4688      	mov	r8, r1
 8001340:	1a9c      	subs	r4, r3, r2
 8001342:	e778      	b.n	8001236 <__aeabi_dadd+0xa6>
 8001344:	2a00      	cmp	r2, #0
 8001346:	dc00      	bgt.n	800134a <__aeabi_dadd+0x1ba>
 8001348:	e08e      	b.n	8001468 <__aeabi_dadd+0x2d8>
 800134a:	4649      	mov	r1, r9
 800134c:	2900      	cmp	r1, #0
 800134e:	d175      	bne.n	800143c <__aeabi_dadd+0x2ac>
 8001350:	4661      	mov	r1, ip
 8001352:	4653      	mov	r3, sl
 8001354:	4319      	orrs	r1, r3
 8001356:	d100      	bne.n	800135a <__aeabi_dadd+0x1ca>
 8001358:	e0f6      	b.n	8001548 <__aeabi_dadd+0x3b8>
 800135a:	1e51      	subs	r1, r2, #1
 800135c:	2a01      	cmp	r2, #1
 800135e:	d100      	bne.n	8001362 <__aeabi_dadd+0x1d2>
 8001360:	e191      	b.n	8001686 <__aeabi_dadd+0x4f6>
 8001362:	4d6d      	ldr	r5, [pc, #436]	@ (8001518 <__aeabi_dadd+0x388>)
 8001364:	42aa      	cmp	r2, r5
 8001366:	d100      	bne.n	800136a <__aeabi_dadd+0x1da>
 8001368:	e0dc      	b.n	8001524 <__aeabi_dadd+0x394>
 800136a:	2501      	movs	r5, #1
 800136c:	2938      	cmp	r1, #56	@ 0x38
 800136e:	dc14      	bgt.n	800139a <__aeabi_dadd+0x20a>
 8001370:	000a      	movs	r2, r1
 8001372:	2a1f      	cmp	r2, #31
 8001374:	dd00      	ble.n	8001378 <__aeabi_dadd+0x1e8>
 8001376:	e1a2      	b.n	80016be <__aeabi_dadd+0x52e>
 8001378:	2120      	movs	r1, #32
 800137a:	4653      	mov	r3, sl
 800137c:	1a89      	subs	r1, r1, r2
 800137e:	408b      	lsls	r3, r1
 8001380:	001d      	movs	r5, r3
 8001382:	4663      	mov	r3, ip
 8001384:	40d3      	lsrs	r3, r2
 8001386:	431d      	orrs	r5, r3
 8001388:	4663      	mov	r3, ip
 800138a:	408b      	lsls	r3, r1
 800138c:	0019      	movs	r1, r3
 800138e:	1e4b      	subs	r3, r1, #1
 8001390:	4199      	sbcs	r1, r3
 8001392:	4653      	mov	r3, sl
 8001394:	40d3      	lsrs	r3, r2
 8001396:	430d      	orrs	r5, r1
 8001398:	18e4      	adds	r4, r4, r3
 800139a:	182d      	adds	r5, r5, r0
 800139c:	4285      	cmp	r5, r0
 800139e:	4180      	sbcs	r0, r0
 80013a0:	4240      	negs	r0, r0
 80013a2:	1824      	adds	r4, r4, r0
 80013a4:	0223      	lsls	r3, r4, #8
 80013a6:	d559      	bpl.n	800145c <__aeabi_dadd+0x2cc>
 80013a8:	4b5b      	ldr	r3, [pc, #364]	@ (8001518 <__aeabi_dadd+0x388>)
 80013aa:	3701      	adds	r7, #1
 80013ac:	429f      	cmp	r7, r3
 80013ae:	d051      	beq.n	8001454 <__aeabi_dadd+0x2c4>
 80013b0:	2101      	movs	r1, #1
 80013b2:	4b5a      	ldr	r3, [pc, #360]	@ (800151c <__aeabi_dadd+0x38c>)
 80013b4:	086a      	lsrs	r2, r5, #1
 80013b6:	401c      	ands	r4, r3
 80013b8:	4029      	ands	r1, r5
 80013ba:	430a      	orrs	r2, r1
 80013bc:	07e5      	lsls	r5, r4, #31
 80013be:	4315      	orrs	r5, r2
 80013c0:	0864      	lsrs	r4, r4, #1
 80013c2:	e75f      	b.n	8001284 <__aeabi_dadd+0xf4>
 80013c4:	4661      	mov	r1, ip
 80013c6:	4653      	mov	r3, sl
 80013c8:	4319      	orrs	r1, r3
 80013ca:	d100      	bne.n	80013ce <__aeabi_dadd+0x23e>
 80013cc:	e0bc      	b.n	8001548 <__aeabi_dadd+0x3b8>
 80013ce:	1e51      	subs	r1, r2, #1
 80013d0:	2a01      	cmp	r2, #1
 80013d2:	d100      	bne.n	80013d6 <__aeabi_dadd+0x246>
 80013d4:	e164      	b.n	80016a0 <__aeabi_dadd+0x510>
 80013d6:	4d50      	ldr	r5, [pc, #320]	@ (8001518 <__aeabi_dadd+0x388>)
 80013d8:	42aa      	cmp	r2, r5
 80013da:	d100      	bne.n	80013de <__aeabi_dadd+0x24e>
 80013dc:	e16a      	b.n	80016b4 <__aeabi_dadd+0x524>
 80013de:	2501      	movs	r5, #1
 80013e0:	2938      	cmp	r1, #56	@ 0x38
 80013e2:	dd00      	ble.n	80013e6 <__aeabi_dadd+0x256>
 80013e4:	e722      	b.n	800122c <__aeabi_dadd+0x9c>
 80013e6:	000a      	movs	r2, r1
 80013e8:	e70e      	b.n	8001208 <__aeabi_dadd+0x78>
 80013ea:	4a4d      	ldr	r2, [pc, #308]	@ (8001520 <__aeabi_dadd+0x390>)
 80013ec:	1c7d      	adds	r5, r7, #1
 80013ee:	4215      	tst	r5, r2
 80013f0:	d000      	beq.n	80013f4 <__aeabi_dadd+0x264>
 80013f2:	e0d0      	b.n	8001596 <__aeabi_dadd+0x406>
 80013f4:	0025      	movs	r5, r4
 80013f6:	4662      	mov	r2, ip
 80013f8:	4653      	mov	r3, sl
 80013fa:	4305      	orrs	r5, r0
 80013fc:	431a      	orrs	r2, r3
 80013fe:	2f00      	cmp	r7, #0
 8001400:	d000      	beq.n	8001404 <__aeabi_dadd+0x274>
 8001402:	e137      	b.n	8001674 <__aeabi_dadd+0x4e4>
 8001404:	2d00      	cmp	r5, #0
 8001406:	d100      	bne.n	800140a <__aeabi_dadd+0x27a>
 8001408:	e1a8      	b.n	800175c <__aeabi_dadd+0x5cc>
 800140a:	2a00      	cmp	r2, #0
 800140c:	d100      	bne.n	8001410 <__aeabi_dadd+0x280>
 800140e:	e16a      	b.n	80016e6 <__aeabi_dadd+0x556>
 8001410:	4663      	mov	r3, ip
 8001412:	1ac5      	subs	r5, r0, r3
 8001414:	4653      	mov	r3, sl
 8001416:	1ae2      	subs	r2, r4, r3
 8001418:	42a8      	cmp	r0, r5
 800141a:	419b      	sbcs	r3, r3
 800141c:	425b      	negs	r3, r3
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	021a      	lsls	r2, r3, #8
 8001422:	d400      	bmi.n	8001426 <__aeabi_dadd+0x296>
 8001424:	e203      	b.n	800182e <__aeabi_dadd+0x69e>
 8001426:	4663      	mov	r3, ip
 8001428:	1a1d      	subs	r5, r3, r0
 800142a:	45ac      	cmp	ip, r5
 800142c:	4192      	sbcs	r2, r2
 800142e:	4653      	mov	r3, sl
 8001430:	4252      	negs	r2, r2
 8001432:	1b1c      	subs	r4, r3, r4
 8001434:	000e      	movs	r6, r1
 8001436:	4688      	mov	r8, r1
 8001438:	1aa4      	subs	r4, r4, r2
 800143a:	e723      	b.n	8001284 <__aeabi_dadd+0xf4>
 800143c:	4936      	ldr	r1, [pc, #216]	@ (8001518 <__aeabi_dadd+0x388>)
 800143e:	428f      	cmp	r7, r1
 8001440:	d070      	beq.n	8001524 <__aeabi_dadd+0x394>
 8001442:	2501      	movs	r5, #1
 8001444:	2a38      	cmp	r2, #56	@ 0x38
 8001446:	dca8      	bgt.n	800139a <__aeabi_dadd+0x20a>
 8001448:	2180      	movs	r1, #128	@ 0x80
 800144a:	4653      	mov	r3, sl
 800144c:	0409      	lsls	r1, r1, #16
 800144e:	430b      	orrs	r3, r1
 8001450:	469a      	mov	sl, r3
 8001452:	e78e      	b.n	8001372 <__aeabi_dadd+0x1e2>
 8001454:	003c      	movs	r4, r7
 8001456:	2500      	movs	r5, #0
 8001458:	2200      	movs	r2, #0
 800145a:	e731      	b.n	80012c0 <__aeabi_dadd+0x130>
 800145c:	2307      	movs	r3, #7
 800145e:	402b      	ands	r3, r5
 8001460:	2b00      	cmp	r3, #0
 8001462:	d000      	beq.n	8001466 <__aeabi_dadd+0x2d6>
 8001464:	e710      	b.n	8001288 <__aeabi_dadd+0xf8>
 8001466:	e093      	b.n	8001590 <__aeabi_dadd+0x400>
 8001468:	2a00      	cmp	r2, #0
 800146a:	d074      	beq.n	8001556 <__aeabi_dadd+0x3c6>
 800146c:	464a      	mov	r2, r9
 800146e:	1bd2      	subs	r2, r2, r7
 8001470:	2f00      	cmp	r7, #0
 8001472:	d100      	bne.n	8001476 <__aeabi_dadd+0x2e6>
 8001474:	e0c7      	b.n	8001606 <__aeabi_dadd+0x476>
 8001476:	4928      	ldr	r1, [pc, #160]	@ (8001518 <__aeabi_dadd+0x388>)
 8001478:	4589      	cmp	r9, r1
 800147a:	d100      	bne.n	800147e <__aeabi_dadd+0x2ee>
 800147c:	e185      	b.n	800178a <__aeabi_dadd+0x5fa>
 800147e:	2501      	movs	r5, #1
 8001480:	2a38      	cmp	r2, #56	@ 0x38
 8001482:	dc12      	bgt.n	80014aa <__aeabi_dadd+0x31a>
 8001484:	2180      	movs	r1, #128	@ 0x80
 8001486:	0409      	lsls	r1, r1, #16
 8001488:	430c      	orrs	r4, r1
 800148a:	2a1f      	cmp	r2, #31
 800148c:	dd00      	ble.n	8001490 <__aeabi_dadd+0x300>
 800148e:	e1ab      	b.n	80017e8 <__aeabi_dadd+0x658>
 8001490:	2120      	movs	r1, #32
 8001492:	0025      	movs	r5, r4
 8001494:	1a89      	subs	r1, r1, r2
 8001496:	0007      	movs	r7, r0
 8001498:	4088      	lsls	r0, r1
 800149a:	408d      	lsls	r5, r1
 800149c:	40d7      	lsrs	r7, r2
 800149e:	1e41      	subs	r1, r0, #1
 80014a0:	4188      	sbcs	r0, r1
 80014a2:	40d4      	lsrs	r4, r2
 80014a4:	433d      	orrs	r5, r7
 80014a6:	4305      	orrs	r5, r0
 80014a8:	44a2      	add	sl, r4
 80014aa:	4465      	add	r5, ip
 80014ac:	4565      	cmp	r5, ip
 80014ae:	4192      	sbcs	r2, r2
 80014b0:	4252      	negs	r2, r2
 80014b2:	4452      	add	r2, sl
 80014b4:	0014      	movs	r4, r2
 80014b6:	464f      	mov	r7, r9
 80014b8:	e774      	b.n	80013a4 <__aeabi_dadd+0x214>
 80014ba:	0028      	movs	r0, r5
 80014bc:	f001 fd4a 	bl	8002f54 <__clzsi2>
 80014c0:	0003      	movs	r3, r0
 80014c2:	3318      	adds	r3, #24
 80014c4:	2b1f      	cmp	r3, #31
 80014c6:	dc00      	bgt.n	80014ca <__aeabi_dadd+0x33a>
 80014c8:	e6c2      	b.n	8001250 <__aeabi_dadd+0xc0>
 80014ca:	002a      	movs	r2, r5
 80014cc:	3808      	subs	r0, #8
 80014ce:	4082      	lsls	r2, r0
 80014d0:	429f      	cmp	r7, r3
 80014d2:	dd00      	ble.n	80014d6 <__aeabi_dadd+0x346>
 80014d4:	e0a9      	b.n	800162a <__aeabi_dadd+0x49a>
 80014d6:	1bdb      	subs	r3, r3, r7
 80014d8:	1c58      	adds	r0, r3, #1
 80014da:	281f      	cmp	r0, #31
 80014dc:	dc00      	bgt.n	80014e0 <__aeabi_dadd+0x350>
 80014de:	e1ac      	b.n	800183a <__aeabi_dadd+0x6aa>
 80014e0:	0015      	movs	r5, r2
 80014e2:	3b1f      	subs	r3, #31
 80014e4:	40dd      	lsrs	r5, r3
 80014e6:	2820      	cmp	r0, #32
 80014e8:	d005      	beq.n	80014f6 <__aeabi_dadd+0x366>
 80014ea:	2340      	movs	r3, #64	@ 0x40
 80014ec:	1a1b      	subs	r3, r3, r0
 80014ee:	409a      	lsls	r2, r3
 80014f0:	1e53      	subs	r3, r2, #1
 80014f2:	419a      	sbcs	r2, r3
 80014f4:	4315      	orrs	r5, r2
 80014f6:	2307      	movs	r3, #7
 80014f8:	2700      	movs	r7, #0
 80014fa:	402b      	ands	r3, r5
 80014fc:	e7b0      	b.n	8001460 <__aeabi_dadd+0x2d0>
 80014fe:	08ed      	lsrs	r5, r5, #3
 8001500:	4b05      	ldr	r3, [pc, #20]	@ (8001518 <__aeabi_dadd+0x388>)
 8001502:	0762      	lsls	r2, r4, #29
 8001504:	432a      	orrs	r2, r5
 8001506:	08e4      	lsrs	r4, r4, #3
 8001508:	429f      	cmp	r7, r3
 800150a:	d00f      	beq.n	800152c <__aeabi_dadd+0x39c>
 800150c:	0324      	lsls	r4, r4, #12
 800150e:	0b25      	lsrs	r5, r4, #12
 8001510:	057c      	lsls	r4, r7, #21
 8001512:	0d64      	lsrs	r4, r4, #21
 8001514:	e6d4      	b.n	80012c0 <__aeabi_dadd+0x130>
 8001516:	46c0      	nop			@ (mov r8, r8)
 8001518:	000007ff 	.word	0x000007ff
 800151c:	ff7fffff 	.word	0xff7fffff
 8001520:	000007fe 	.word	0x000007fe
 8001524:	08c0      	lsrs	r0, r0, #3
 8001526:	0762      	lsls	r2, r4, #29
 8001528:	4302      	orrs	r2, r0
 800152a:	08e4      	lsrs	r4, r4, #3
 800152c:	0013      	movs	r3, r2
 800152e:	4323      	orrs	r3, r4
 8001530:	d100      	bne.n	8001534 <__aeabi_dadd+0x3a4>
 8001532:	e186      	b.n	8001842 <__aeabi_dadd+0x6b2>
 8001534:	2580      	movs	r5, #128	@ 0x80
 8001536:	032d      	lsls	r5, r5, #12
 8001538:	4325      	orrs	r5, r4
 800153a:	032d      	lsls	r5, r5, #12
 800153c:	4cc3      	ldr	r4, [pc, #780]	@ (800184c <__aeabi_dadd+0x6bc>)
 800153e:	0b2d      	lsrs	r5, r5, #12
 8001540:	e6be      	b.n	80012c0 <__aeabi_dadd+0x130>
 8001542:	4660      	mov	r0, ip
 8001544:	4654      	mov	r4, sl
 8001546:	000e      	movs	r6, r1
 8001548:	0017      	movs	r7, r2
 800154a:	08c5      	lsrs	r5, r0, #3
 800154c:	e7d8      	b.n	8001500 <__aeabi_dadd+0x370>
 800154e:	4cc0      	ldr	r4, [pc, #768]	@ (8001850 <__aeabi_dadd+0x6c0>)
 8001550:	1aff      	subs	r7, r7, r3
 8001552:	4014      	ands	r4, r2
 8001554:	e696      	b.n	8001284 <__aeabi_dadd+0xf4>
 8001556:	4abf      	ldr	r2, [pc, #764]	@ (8001854 <__aeabi_dadd+0x6c4>)
 8001558:	1c79      	adds	r1, r7, #1
 800155a:	4211      	tst	r1, r2
 800155c:	d16b      	bne.n	8001636 <__aeabi_dadd+0x4a6>
 800155e:	0022      	movs	r2, r4
 8001560:	4302      	orrs	r2, r0
 8001562:	2f00      	cmp	r7, #0
 8001564:	d000      	beq.n	8001568 <__aeabi_dadd+0x3d8>
 8001566:	e0db      	b.n	8001720 <__aeabi_dadd+0x590>
 8001568:	2a00      	cmp	r2, #0
 800156a:	d100      	bne.n	800156e <__aeabi_dadd+0x3de>
 800156c:	e12d      	b.n	80017ca <__aeabi_dadd+0x63a>
 800156e:	4662      	mov	r2, ip
 8001570:	4653      	mov	r3, sl
 8001572:	431a      	orrs	r2, r3
 8001574:	d100      	bne.n	8001578 <__aeabi_dadd+0x3e8>
 8001576:	e0b6      	b.n	80016e6 <__aeabi_dadd+0x556>
 8001578:	4663      	mov	r3, ip
 800157a:	18c5      	adds	r5, r0, r3
 800157c:	4285      	cmp	r5, r0
 800157e:	4180      	sbcs	r0, r0
 8001580:	4454      	add	r4, sl
 8001582:	4240      	negs	r0, r0
 8001584:	1824      	adds	r4, r4, r0
 8001586:	0223      	lsls	r3, r4, #8
 8001588:	d502      	bpl.n	8001590 <__aeabi_dadd+0x400>
 800158a:	000f      	movs	r7, r1
 800158c:	4bb0      	ldr	r3, [pc, #704]	@ (8001850 <__aeabi_dadd+0x6c0>)
 800158e:	401c      	ands	r4, r3
 8001590:	003a      	movs	r2, r7
 8001592:	0028      	movs	r0, r5
 8001594:	e7d8      	b.n	8001548 <__aeabi_dadd+0x3b8>
 8001596:	4662      	mov	r2, ip
 8001598:	1a85      	subs	r5, r0, r2
 800159a:	42a8      	cmp	r0, r5
 800159c:	4192      	sbcs	r2, r2
 800159e:	4653      	mov	r3, sl
 80015a0:	4252      	negs	r2, r2
 80015a2:	4691      	mov	r9, r2
 80015a4:	1ae3      	subs	r3, r4, r3
 80015a6:	001a      	movs	r2, r3
 80015a8:	464b      	mov	r3, r9
 80015aa:	1ad2      	subs	r2, r2, r3
 80015ac:	0013      	movs	r3, r2
 80015ae:	4691      	mov	r9, r2
 80015b0:	021a      	lsls	r2, r3, #8
 80015b2:	d454      	bmi.n	800165e <__aeabi_dadd+0x4ce>
 80015b4:	464a      	mov	r2, r9
 80015b6:	464c      	mov	r4, r9
 80015b8:	432a      	orrs	r2, r5
 80015ba:	d000      	beq.n	80015be <__aeabi_dadd+0x42e>
 80015bc:	e640      	b.n	8001240 <__aeabi_dadd+0xb0>
 80015be:	2600      	movs	r6, #0
 80015c0:	2400      	movs	r4, #0
 80015c2:	2500      	movs	r5, #0
 80015c4:	e67c      	b.n	80012c0 <__aeabi_dadd+0x130>
 80015c6:	4da1      	ldr	r5, [pc, #644]	@ (800184c <__aeabi_dadd+0x6bc>)
 80015c8:	45a9      	cmp	r9, r5
 80015ca:	d100      	bne.n	80015ce <__aeabi_dadd+0x43e>
 80015cc:	e090      	b.n	80016f0 <__aeabi_dadd+0x560>
 80015ce:	2501      	movs	r5, #1
 80015d0:	2a38      	cmp	r2, #56	@ 0x38
 80015d2:	dd00      	ble.n	80015d6 <__aeabi_dadd+0x446>
 80015d4:	e6ab      	b.n	800132e <__aeabi_dadd+0x19e>
 80015d6:	2580      	movs	r5, #128	@ 0x80
 80015d8:	042d      	lsls	r5, r5, #16
 80015da:	432c      	orrs	r4, r5
 80015dc:	e695      	b.n	800130a <__aeabi_dadd+0x17a>
 80015de:	0011      	movs	r1, r2
 80015e0:	4655      	mov	r5, sl
 80015e2:	3920      	subs	r1, #32
 80015e4:	40cd      	lsrs	r5, r1
 80015e6:	46a9      	mov	r9, r5
 80015e8:	2a20      	cmp	r2, #32
 80015ea:	d006      	beq.n	80015fa <__aeabi_dadd+0x46a>
 80015ec:	2140      	movs	r1, #64	@ 0x40
 80015ee:	4653      	mov	r3, sl
 80015f0:	1a8a      	subs	r2, r1, r2
 80015f2:	4093      	lsls	r3, r2
 80015f4:	4662      	mov	r2, ip
 80015f6:	431a      	orrs	r2, r3
 80015f8:	4694      	mov	ip, r2
 80015fa:	4665      	mov	r5, ip
 80015fc:	1e6b      	subs	r3, r5, #1
 80015fe:	419d      	sbcs	r5, r3
 8001600:	464b      	mov	r3, r9
 8001602:	431d      	orrs	r5, r3
 8001604:	e612      	b.n	800122c <__aeabi_dadd+0x9c>
 8001606:	0021      	movs	r1, r4
 8001608:	4301      	orrs	r1, r0
 800160a:	d100      	bne.n	800160e <__aeabi_dadd+0x47e>
 800160c:	e0c4      	b.n	8001798 <__aeabi_dadd+0x608>
 800160e:	1e51      	subs	r1, r2, #1
 8001610:	2a01      	cmp	r2, #1
 8001612:	d100      	bne.n	8001616 <__aeabi_dadd+0x486>
 8001614:	e0fb      	b.n	800180e <__aeabi_dadd+0x67e>
 8001616:	4d8d      	ldr	r5, [pc, #564]	@ (800184c <__aeabi_dadd+0x6bc>)
 8001618:	42aa      	cmp	r2, r5
 800161a:	d100      	bne.n	800161e <__aeabi_dadd+0x48e>
 800161c:	e0b5      	b.n	800178a <__aeabi_dadd+0x5fa>
 800161e:	2501      	movs	r5, #1
 8001620:	2938      	cmp	r1, #56	@ 0x38
 8001622:	dd00      	ble.n	8001626 <__aeabi_dadd+0x496>
 8001624:	e741      	b.n	80014aa <__aeabi_dadd+0x31a>
 8001626:	000a      	movs	r2, r1
 8001628:	e72f      	b.n	800148a <__aeabi_dadd+0x2fa>
 800162a:	4c89      	ldr	r4, [pc, #548]	@ (8001850 <__aeabi_dadd+0x6c0>)
 800162c:	1aff      	subs	r7, r7, r3
 800162e:	4014      	ands	r4, r2
 8001630:	0762      	lsls	r2, r4, #29
 8001632:	08e4      	lsrs	r4, r4, #3
 8001634:	e76a      	b.n	800150c <__aeabi_dadd+0x37c>
 8001636:	4a85      	ldr	r2, [pc, #532]	@ (800184c <__aeabi_dadd+0x6bc>)
 8001638:	4291      	cmp	r1, r2
 800163a:	d100      	bne.n	800163e <__aeabi_dadd+0x4ae>
 800163c:	e0e3      	b.n	8001806 <__aeabi_dadd+0x676>
 800163e:	4663      	mov	r3, ip
 8001640:	18c2      	adds	r2, r0, r3
 8001642:	4282      	cmp	r2, r0
 8001644:	4180      	sbcs	r0, r0
 8001646:	0023      	movs	r3, r4
 8001648:	4240      	negs	r0, r0
 800164a:	4453      	add	r3, sl
 800164c:	181b      	adds	r3, r3, r0
 800164e:	07dd      	lsls	r5, r3, #31
 8001650:	085c      	lsrs	r4, r3, #1
 8001652:	2307      	movs	r3, #7
 8001654:	0852      	lsrs	r2, r2, #1
 8001656:	4315      	orrs	r5, r2
 8001658:	000f      	movs	r7, r1
 800165a:	402b      	ands	r3, r5
 800165c:	e700      	b.n	8001460 <__aeabi_dadd+0x2d0>
 800165e:	4663      	mov	r3, ip
 8001660:	1a1d      	subs	r5, r3, r0
 8001662:	45ac      	cmp	ip, r5
 8001664:	4192      	sbcs	r2, r2
 8001666:	4653      	mov	r3, sl
 8001668:	4252      	negs	r2, r2
 800166a:	1b1c      	subs	r4, r3, r4
 800166c:	000e      	movs	r6, r1
 800166e:	4688      	mov	r8, r1
 8001670:	1aa4      	subs	r4, r4, r2
 8001672:	e5e5      	b.n	8001240 <__aeabi_dadd+0xb0>
 8001674:	2d00      	cmp	r5, #0
 8001676:	d000      	beq.n	800167a <__aeabi_dadd+0x4ea>
 8001678:	e091      	b.n	800179e <__aeabi_dadd+0x60e>
 800167a:	2a00      	cmp	r2, #0
 800167c:	d138      	bne.n	80016f0 <__aeabi_dadd+0x560>
 800167e:	2480      	movs	r4, #128	@ 0x80
 8001680:	2600      	movs	r6, #0
 8001682:	0324      	lsls	r4, r4, #12
 8001684:	e756      	b.n	8001534 <__aeabi_dadd+0x3a4>
 8001686:	4663      	mov	r3, ip
 8001688:	18c5      	adds	r5, r0, r3
 800168a:	4285      	cmp	r5, r0
 800168c:	4180      	sbcs	r0, r0
 800168e:	4454      	add	r4, sl
 8001690:	4240      	negs	r0, r0
 8001692:	1824      	adds	r4, r4, r0
 8001694:	2701      	movs	r7, #1
 8001696:	0223      	lsls	r3, r4, #8
 8001698:	d400      	bmi.n	800169c <__aeabi_dadd+0x50c>
 800169a:	e6df      	b.n	800145c <__aeabi_dadd+0x2cc>
 800169c:	2702      	movs	r7, #2
 800169e:	e687      	b.n	80013b0 <__aeabi_dadd+0x220>
 80016a0:	4663      	mov	r3, ip
 80016a2:	1ac5      	subs	r5, r0, r3
 80016a4:	42a8      	cmp	r0, r5
 80016a6:	4180      	sbcs	r0, r0
 80016a8:	4653      	mov	r3, sl
 80016aa:	4240      	negs	r0, r0
 80016ac:	1ae4      	subs	r4, r4, r3
 80016ae:	2701      	movs	r7, #1
 80016b0:	1a24      	subs	r4, r4, r0
 80016b2:	e5c0      	b.n	8001236 <__aeabi_dadd+0xa6>
 80016b4:	0762      	lsls	r2, r4, #29
 80016b6:	08c0      	lsrs	r0, r0, #3
 80016b8:	4302      	orrs	r2, r0
 80016ba:	08e4      	lsrs	r4, r4, #3
 80016bc:	e736      	b.n	800152c <__aeabi_dadd+0x39c>
 80016be:	0011      	movs	r1, r2
 80016c0:	4653      	mov	r3, sl
 80016c2:	3920      	subs	r1, #32
 80016c4:	40cb      	lsrs	r3, r1
 80016c6:	4699      	mov	r9, r3
 80016c8:	2a20      	cmp	r2, #32
 80016ca:	d006      	beq.n	80016da <__aeabi_dadd+0x54a>
 80016cc:	2140      	movs	r1, #64	@ 0x40
 80016ce:	4653      	mov	r3, sl
 80016d0:	1a8a      	subs	r2, r1, r2
 80016d2:	4093      	lsls	r3, r2
 80016d4:	4662      	mov	r2, ip
 80016d6:	431a      	orrs	r2, r3
 80016d8:	4694      	mov	ip, r2
 80016da:	4665      	mov	r5, ip
 80016dc:	1e6b      	subs	r3, r5, #1
 80016de:	419d      	sbcs	r5, r3
 80016e0:	464b      	mov	r3, r9
 80016e2:	431d      	orrs	r5, r3
 80016e4:	e659      	b.n	800139a <__aeabi_dadd+0x20a>
 80016e6:	0762      	lsls	r2, r4, #29
 80016e8:	08c0      	lsrs	r0, r0, #3
 80016ea:	4302      	orrs	r2, r0
 80016ec:	08e4      	lsrs	r4, r4, #3
 80016ee:	e70d      	b.n	800150c <__aeabi_dadd+0x37c>
 80016f0:	4653      	mov	r3, sl
 80016f2:	075a      	lsls	r2, r3, #29
 80016f4:	4663      	mov	r3, ip
 80016f6:	08d8      	lsrs	r0, r3, #3
 80016f8:	4653      	mov	r3, sl
 80016fa:	000e      	movs	r6, r1
 80016fc:	4302      	orrs	r2, r0
 80016fe:	08dc      	lsrs	r4, r3, #3
 8001700:	e714      	b.n	800152c <__aeabi_dadd+0x39c>
 8001702:	0015      	movs	r5, r2
 8001704:	0026      	movs	r6, r4
 8001706:	3d20      	subs	r5, #32
 8001708:	40ee      	lsrs	r6, r5
 800170a:	2a20      	cmp	r2, #32
 800170c:	d003      	beq.n	8001716 <__aeabi_dadd+0x586>
 800170e:	2540      	movs	r5, #64	@ 0x40
 8001710:	1aaa      	subs	r2, r5, r2
 8001712:	4094      	lsls	r4, r2
 8001714:	4320      	orrs	r0, r4
 8001716:	1e42      	subs	r2, r0, #1
 8001718:	4190      	sbcs	r0, r2
 800171a:	0005      	movs	r5, r0
 800171c:	4335      	orrs	r5, r6
 800171e:	e606      	b.n	800132e <__aeabi_dadd+0x19e>
 8001720:	2a00      	cmp	r2, #0
 8001722:	d07c      	beq.n	800181e <__aeabi_dadd+0x68e>
 8001724:	4662      	mov	r2, ip
 8001726:	4653      	mov	r3, sl
 8001728:	08c0      	lsrs	r0, r0, #3
 800172a:	431a      	orrs	r2, r3
 800172c:	d100      	bne.n	8001730 <__aeabi_dadd+0x5a0>
 800172e:	e6fa      	b.n	8001526 <__aeabi_dadd+0x396>
 8001730:	0762      	lsls	r2, r4, #29
 8001732:	4310      	orrs	r0, r2
 8001734:	2280      	movs	r2, #128	@ 0x80
 8001736:	08e4      	lsrs	r4, r4, #3
 8001738:	0312      	lsls	r2, r2, #12
 800173a:	4214      	tst	r4, r2
 800173c:	d008      	beq.n	8001750 <__aeabi_dadd+0x5c0>
 800173e:	08d9      	lsrs	r1, r3, #3
 8001740:	4211      	tst	r1, r2
 8001742:	d105      	bne.n	8001750 <__aeabi_dadd+0x5c0>
 8001744:	4663      	mov	r3, ip
 8001746:	08d8      	lsrs	r0, r3, #3
 8001748:	4653      	mov	r3, sl
 800174a:	000c      	movs	r4, r1
 800174c:	075b      	lsls	r3, r3, #29
 800174e:	4318      	orrs	r0, r3
 8001750:	0f42      	lsrs	r2, r0, #29
 8001752:	00c0      	lsls	r0, r0, #3
 8001754:	08c0      	lsrs	r0, r0, #3
 8001756:	0752      	lsls	r2, r2, #29
 8001758:	4302      	orrs	r2, r0
 800175a:	e6e7      	b.n	800152c <__aeabi_dadd+0x39c>
 800175c:	2a00      	cmp	r2, #0
 800175e:	d100      	bne.n	8001762 <__aeabi_dadd+0x5d2>
 8001760:	e72d      	b.n	80015be <__aeabi_dadd+0x42e>
 8001762:	4663      	mov	r3, ip
 8001764:	08d8      	lsrs	r0, r3, #3
 8001766:	4653      	mov	r3, sl
 8001768:	075a      	lsls	r2, r3, #29
 800176a:	000e      	movs	r6, r1
 800176c:	4302      	orrs	r2, r0
 800176e:	08dc      	lsrs	r4, r3, #3
 8001770:	e6cc      	b.n	800150c <__aeabi_dadd+0x37c>
 8001772:	4663      	mov	r3, ip
 8001774:	1a1d      	subs	r5, r3, r0
 8001776:	45ac      	cmp	ip, r5
 8001778:	4192      	sbcs	r2, r2
 800177a:	4653      	mov	r3, sl
 800177c:	4252      	negs	r2, r2
 800177e:	1b1c      	subs	r4, r3, r4
 8001780:	000e      	movs	r6, r1
 8001782:	4688      	mov	r8, r1
 8001784:	1aa4      	subs	r4, r4, r2
 8001786:	3701      	adds	r7, #1
 8001788:	e555      	b.n	8001236 <__aeabi_dadd+0xa6>
 800178a:	4663      	mov	r3, ip
 800178c:	08d9      	lsrs	r1, r3, #3
 800178e:	4653      	mov	r3, sl
 8001790:	075a      	lsls	r2, r3, #29
 8001792:	430a      	orrs	r2, r1
 8001794:	08dc      	lsrs	r4, r3, #3
 8001796:	e6c9      	b.n	800152c <__aeabi_dadd+0x39c>
 8001798:	4660      	mov	r0, ip
 800179a:	4654      	mov	r4, sl
 800179c:	e6d4      	b.n	8001548 <__aeabi_dadd+0x3b8>
 800179e:	08c0      	lsrs	r0, r0, #3
 80017a0:	2a00      	cmp	r2, #0
 80017a2:	d100      	bne.n	80017a6 <__aeabi_dadd+0x616>
 80017a4:	e6bf      	b.n	8001526 <__aeabi_dadd+0x396>
 80017a6:	0762      	lsls	r2, r4, #29
 80017a8:	4310      	orrs	r0, r2
 80017aa:	2280      	movs	r2, #128	@ 0x80
 80017ac:	08e4      	lsrs	r4, r4, #3
 80017ae:	0312      	lsls	r2, r2, #12
 80017b0:	4214      	tst	r4, r2
 80017b2:	d0cd      	beq.n	8001750 <__aeabi_dadd+0x5c0>
 80017b4:	08dd      	lsrs	r5, r3, #3
 80017b6:	4215      	tst	r5, r2
 80017b8:	d1ca      	bne.n	8001750 <__aeabi_dadd+0x5c0>
 80017ba:	4663      	mov	r3, ip
 80017bc:	08d8      	lsrs	r0, r3, #3
 80017be:	4653      	mov	r3, sl
 80017c0:	075b      	lsls	r3, r3, #29
 80017c2:	000e      	movs	r6, r1
 80017c4:	002c      	movs	r4, r5
 80017c6:	4318      	orrs	r0, r3
 80017c8:	e7c2      	b.n	8001750 <__aeabi_dadd+0x5c0>
 80017ca:	4663      	mov	r3, ip
 80017cc:	08d9      	lsrs	r1, r3, #3
 80017ce:	4653      	mov	r3, sl
 80017d0:	075a      	lsls	r2, r3, #29
 80017d2:	430a      	orrs	r2, r1
 80017d4:	08dc      	lsrs	r4, r3, #3
 80017d6:	e699      	b.n	800150c <__aeabi_dadd+0x37c>
 80017d8:	4663      	mov	r3, ip
 80017da:	08d8      	lsrs	r0, r3, #3
 80017dc:	4653      	mov	r3, sl
 80017de:	075a      	lsls	r2, r3, #29
 80017e0:	000e      	movs	r6, r1
 80017e2:	4302      	orrs	r2, r0
 80017e4:	08dc      	lsrs	r4, r3, #3
 80017e6:	e6a1      	b.n	800152c <__aeabi_dadd+0x39c>
 80017e8:	0011      	movs	r1, r2
 80017ea:	0027      	movs	r7, r4
 80017ec:	3920      	subs	r1, #32
 80017ee:	40cf      	lsrs	r7, r1
 80017f0:	2a20      	cmp	r2, #32
 80017f2:	d003      	beq.n	80017fc <__aeabi_dadd+0x66c>
 80017f4:	2140      	movs	r1, #64	@ 0x40
 80017f6:	1a8a      	subs	r2, r1, r2
 80017f8:	4094      	lsls	r4, r2
 80017fa:	4320      	orrs	r0, r4
 80017fc:	1e42      	subs	r2, r0, #1
 80017fe:	4190      	sbcs	r0, r2
 8001800:	0005      	movs	r5, r0
 8001802:	433d      	orrs	r5, r7
 8001804:	e651      	b.n	80014aa <__aeabi_dadd+0x31a>
 8001806:	000c      	movs	r4, r1
 8001808:	2500      	movs	r5, #0
 800180a:	2200      	movs	r2, #0
 800180c:	e558      	b.n	80012c0 <__aeabi_dadd+0x130>
 800180e:	4460      	add	r0, ip
 8001810:	4560      	cmp	r0, ip
 8001812:	4192      	sbcs	r2, r2
 8001814:	4454      	add	r4, sl
 8001816:	4252      	negs	r2, r2
 8001818:	0005      	movs	r5, r0
 800181a:	18a4      	adds	r4, r4, r2
 800181c:	e73a      	b.n	8001694 <__aeabi_dadd+0x504>
 800181e:	4653      	mov	r3, sl
 8001820:	075a      	lsls	r2, r3, #29
 8001822:	4663      	mov	r3, ip
 8001824:	08d9      	lsrs	r1, r3, #3
 8001826:	4653      	mov	r3, sl
 8001828:	430a      	orrs	r2, r1
 800182a:	08dc      	lsrs	r4, r3, #3
 800182c:	e67e      	b.n	800152c <__aeabi_dadd+0x39c>
 800182e:	001a      	movs	r2, r3
 8001830:	001c      	movs	r4, r3
 8001832:	432a      	orrs	r2, r5
 8001834:	d000      	beq.n	8001838 <__aeabi_dadd+0x6a8>
 8001836:	e6ab      	b.n	8001590 <__aeabi_dadd+0x400>
 8001838:	e6c1      	b.n	80015be <__aeabi_dadd+0x42e>
 800183a:	2120      	movs	r1, #32
 800183c:	2500      	movs	r5, #0
 800183e:	1a09      	subs	r1, r1, r0
 8001840:	e519      	b.n	8001276 <__aeabi_dadd+0xe6>
 8001842:	2200      	movs	r2, #0
 8001844:	2500      	movs	r5, #0
 8001846:	4c01      	ldr	r4, [pc, #4]	@ (800184c <__aeabi_dadd+0x6bc>)
 8001848:	e53a      	b.n	80012c0 <__aeabi_dadd+0x130>
 800184a:	46c0      	nop			@ (mov r8, r8)
 800184c:	000007ff 	.word	0x000007ff
 8001850:	ff7fffff 	.word	0xff7fffff
 8001854:	000007fe 	.word	0x000007fe

08001858 <__aeabi_ddiv>:
 8001858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800185a:	46de      	mov	lr, fp
 800185c:	4645      	mov	r5, r8
 800185e:	4657      	mov	r7, sl
 8001860:	464e      	mov	r6, r9
 8001862:	b5e0      	push	{r5, r6, r7, lr}
 8001864:	b087      	sub	sp, #28
 8001866:	9200      	str	r2, [sp, #0]
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	030b      	lsls	r3, r1, #12
 800186c:	0b1b      	lsrs	r3, r3, #12
 800186e:	469b      	mov	fp, r3
 8001870:	0fca      	lsrs	r2, r1, #31
 8001872:	004b      	lsls	r3, r1, #1
 8001874:	0004      	movs	r4, r0
 8001876:	4680      	mov	r8, r0
 8001878:	0d5b      	lsrs	r3, r3, #21
 800187a:	9202      	str	r2, [sp, #8]
 800187c:	d100      	bne.n	8001880 <__aeabi_ddiv+0x28>
 800187e:	e16a      	b.n	8001b56 <__aeabi_ddiv+0x2fe>
 8001880:	4ad4      	ldr	r2, [pc, #848]	@ (8001bd4 <__aeabi_ddiv+0x37c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d100      	bne.n	8001888 <__aeabi_ddiv+0x30>
 8001886:	e18c      	b.n	8001ba2 <__aeabi_ddiv+0x34a>
 8001888:	4659      	mov	r1, fp
 800188a:	0f42      	lsrs	r2, r0, #29
 800188c:	00c9      	lsls	r1, r1, #3
 800188e:	430a      	orrs	r2, r1
 8001890:	2180      	movs	r1, #128	@ 0x80
 8001892:	0409      	lsls	r1, r1, #16
 8001894:	4311      	orrs	r1, r2
 8001896:	00c2      	lsls	r2, r0, #3
 8001898:	4690      	mov	r8, r2
 800189a:	4acf      	ldr	r2, [pc, #828]	@ (8001bd8 <__aeabi_ddiv+0x380>)
 800189c:	4689      	mov	r9, r1
 800189e:	4692      	mov	sl, r2
 80018a0:	449a      	add	sl, r3
 80018a2:	2300      	movs	r3, #0
 80018a4:	2400      	movs	r4, #0
 80018a6:	9303      	str	r3, [sp, #12]
 80018a8:	9e00      	ldr	r6, [sp, #0]
 80018aa:	9f01      	ldr	r7, [sp, #4]
 80018ac:	033b      	lsls	r3, r7, #12
 80018ae:	0b1b      	lsrs	r3, r3, #12
 80018b0:	469b      	mov	fp, r3
 80018b2:	007b      	lsls	r3, r7, #1
 80018b4:	0030      	movs	r0, r6
 80018b6:	0d5b      	lsrs	r3, r3, #21
 80018b8:	0ffd      	lsrs	r5, r7, #31
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d100      	bne.n	80018c0 <__aeabi_ddiv+0x68>
 80018be:	e128      	b.n	8001b12 <__aeabi_ddiv+0x2ba>
 80018c0:	4ac4      	ldr	r2, [pc, #784]	@ (8001bd4 <__aeabi_ddiv+0x37c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d100      	bne.n	80018c8 <__aeabi_ddiv+0x70>
 80018c6:	e177      	b.n	8001bb8 <__aeabi_ddiv+0x360>
 80018c8:	4659      	mov	r1, fp
 80018ca:	0f72      	lsrs	r2, r6, #29
 80018cc:	00c9      	lsls	r1, r1, #3
 80018ce:	430a      	orrs	r2, r1
 80018d0:	2180      	movs	r1, #128	@ 0x80
 80018d2:	0409      	lsls	r1, r1, #16
 80018d4:	4311      	orrs	r1, r2
 80018d6:	468b      	mov	fp, r1
 80018d8:	49bf      	ldr	r1, [pc, #764]	@ (8001bd8 <__aeabi_ddiv+0x380>)
 80018da:	00f2      	lsls	r2, r6, #3
 80018dc:	468c      	mov	ip, r1
 80018de:	4651      	mov	r1, sl
 80018e0:	4463      	add	r3, ip
 80018e2:	1acb      	subs	r3, r1, r3
 80018e4:	469a      	mov	sl, r3
 80018e6:	2300      	movs	r3, #0
 80018e8:	9e02      	ldr	r6, [sp, #8]
 80018ea:	406e      	eors	r6, r5
 80018ec:	2c0f      	cmp	r4, #15
 80018ee:	d827      	bhi.n	8001940 <__aeabi_ddiv+0xe8>
 80018f0:	49ba      	ldr	r1, [pc, #744]	@ (8001bdc <__aeabi_ddiv+0x384>)
 80018f2:	00a4      	lsls	r4, r4, #2
 80018f4:	5909      	ldr	r1, [r1, r4]
 80018f6:	468f      	mov	pc, r1
 80018f8:	46cb      	mov	fp, r9
 80018fa:	4642      	mov	r2, r8
 80018fc:	9e02      	ldr	r6, [sp, #8]
 80018fe:	9b03      	ldr	r3, [sp, #12]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d016      	beq.n	8001932 <__aeabi_ddiv+0xda>
 8001904:	2b03      	cmp	r3, #3
 8001906:	d100      	bne.n	800190a <__aeabi_ddiv+0xb2>
 8001908:	e2a6      	b.n	8001e58 <__aeabi_ddiv+0x600>
 800190a:	2b01      	cmp	r3, #1
 800190c:	d000      	beq.n	8001910 <__aeabi_ddiv+0xb8>
 800190e:	e0df      	b.n	8001ad0 <__aeabi_ddiv+0x278>
 8001910:	2200      	movs	r2, #0
 8001912:	2300      	movs	r3, #0
 8001914:	2400      	movs	r4, #0
 8001916:	4690      	mov	r8, r2
 8001918:	051b      	lsls	r3, r3, #20
 800191a:	4323      	orrs	r3, r4
 800191c:	07f6      	lsls	r6, r6, #31
 800191e:	4333      	orrs	r3, r6
 8001920:	4640      	mov	r0, r8
 8001922:	0019      	movs	r1, r3
 8001924:	b007      	add	sp, #28
 8001926:	bcf0      	pop	{r4, r5, r6, r7}
 8001928:	46bb      	mov	fp, r7
 800192a:	46b2      	mov	sl, r6
 800192c:	46a9      	mov	r9, r5
 800192e:	46a0      	mov	r8, r4
 8001930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001932:	2200      	movs	r2, #0
 8001934:	2400      	movs	r4, #0
 8001936:	4690      	mov	r8, r2
 8001938:	4ba6      	ldr	r3, [pc, #664]	@ (8001bd4 <__aeabi_ddiv+0x37c>)
 800193a:	e7ed      	b.n	8001918 <__aeabi_ddiv+0xc0>
 800193c:	002e      	movs	r6, r5
 800193e:	e7df      	b.n	8001900 <__aeabi_ddiv+0xa8>
 8001940:	45cb      	cmp	fp, r9
 8001942:	d200      	bcs.n	8001946 <__aeabi_ddiv+0xee>
 8001944:	e1d4      	b.n	8001cf0 <__aeabi_ddiv+0x498>
 8001946:	d100      	bne.n	800194a <__aeabi_ddiv+0xf2>
 8001948:	e1cf      	b.n	8001cea <__aeabi_ddiv+0x492>
 800194a:	2301      	movs	r3, #1
 800194c:	425b      	negs	r3, r3
 800194e:	469c      	mov	ip, r3
 8001950:	4644      	mov	r4, r8
 8001952:	4648      	mov	r0, r9
 8001954:	2700      	movs	r7, #0
 8001956:	44e2      	add	sl, ip
 8001958:	465b      	mov	r3, fp
 800195a:	0e15      	lsrs	r5, r2, #24
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	431d      	orrs	r5, r3
 8001960:	0c19      	lsrs	r1, r3, #16
 8001962:	042b      	lsls	r3, r5, #16
 8001964:	0212      	lsls	r2, r2, #8
 8001966:	9500      	str	r5, [sp, #0]
 8001968:	0c1d      	lsrs	r5, r3, #16
 800196a:	4691      	mov	r9, r2
 800196c:	9102      	str	r1, [sp, #8]
 800196e:	9503      	str	r5, [sp, #12]
 8001970:	f7fe fc5a 	bl	8000228 <__aeabi_uidivmod>
 8001974:	0002      	movs	r2, r0
 8001976:	436a      	muls	r2, r5
 8001978:	040b      	lsls	r3, r1, #16
 800197a:	0c21      	lsrs	r1, r4, #16
 800197c:	4680      	mov	r8, r0
 800197e:	4319      	orrs	r1, r3
 8001980:	428a      	cmp	r2, r1
 8001982:	d909      	bls.n	8001998 <__aeabi_ddiv+0x140>
 8001984:	9d00      	ldr	r5, [sp, #0]
 8001986:	2301      	movs	r3, #1
 8001988:	46ac      	mov	ip, r5
 800198a:	425b      	negs	r3, r3
 800198c:	4461      	add	r1, ip
 800198e:	469c      	mov	ip, r3
 8001990:	44e0      	add	r8, ip
 8001992:	428d      	cmp	r5, r1
 8001994:	d800      	bhi.n	8001998 <__aeabi_ddiv+0x140>
 8001996:	e1fb      	b.n	8001d90 <__aeabi_ddiv+0x538>
 8001998:	1a88      	subs	r0, r1, r2
 800199a:	9902      	ldr	r1, [sp, #8]
 800199c:	f7fe fc44 	bl	8000228 <__aeabi_uidivmod>
 80019a0:	9a03      	ldr	r2, [sp, #12]
 80019a2:	0424      	lsls	r4, r4, #16
 80019a4:	4342      	muls	r2, r0
 80019a6:	0409      	lsls	r1, r1, #16
 80019a8:	0c24      	lsrs	r4, r4, #16
 80019aa:	0003      	movs	r3, r0
 80019ac:	430c      	orrs	r4, r1
 80019ae:	42a2      	cmp	r2, r4
 80019b0:	d906      	bls.n	80019c0 <__aeabi_ddiv+0x168>
 80019b2:	9900      	ldr	r1, [sp, #0]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	468c      	mov	ip, r1
 80019b8:	4464      	add	r4, ip
 80019ba:	42a1      	cmp	r1, r4
 80019bc:	d800      	bhi.n	80019c0 <__aeabi_ddiv+0x168>
 80019be:	e1e1      	b.n	8001d84 <__aeabi_ddiv+0x52c>
 80019c0:	1aa0      	subs	r0, r4, r2
 80019c2:	4642      	mov	r2, r8
 80019c4:	0412      	lsls	r2, r2, #16
 80019c6:	431a      	orrs	r2, r3
 80019c8:	4693      	mov	fp, r2
 80019ca:	464b      	mov	r3, r9
 80019cc:	4659      	mov	r1, fp
 80019ce:	0c1b      	lsrs	r3, r3, #16
 80019d0:	001d      	movs	r5, r3
 80019d2:	9304      	str	r3, [sp, #16]
 80019d4:	040b      	lsls	r3, r1, #16
 80019d6:	4649      	mov	r1, r9
 80019d8:	0409      	lsls	r1, r1, #16
 80019da:	0c09      	lsrs	r1, r1, #16
 80019dc:	000c      	movs	r4, r1
 80019de:	0c1b      	lsrs	r3, r3, #16
 80019e0:	435c      	muls	r4, r3
 80019e2:	0c12      	lsrs	r2, r2, #16
 80019e4:	436b      	muls	r3, r5
 80019e6:	4688      	mov	r8, r1
 80019e8:	4351      	muls	r1, r2
 80019ea:	436a      	muls	r2, r5
 80019ec:	0c25      	lsrs	r5, r4, #16
 80019ee:	46ac      	mov	ip, r5
 80019f0:	185b      	adds	r3, r3, r1
 80019f2:	4463      	add	r3, ip
 80019f4:	4299      	cmp	r1, r3
 80019f6:	d903      	bls.n	8001a00 <__aeabi_ddiv+0x1a8>
 80019f8:	2180      	movs	r1, #128	@ 0x80
 80019fa:	0249      	lsls	r1, r1, #9
 80019fc:	468c      	mov	ip, r1
 80019fe:	4462      	add	r2, ip
 8001a00:	0c19      	lsrs	r1, r3, #16
 8001a02:	0424      	lsls	r4, r4, #16
 8001a04:	041b      	lsls	r3, r3, #16
 8001a06:	0c24      	lsrs	r4, r4, #16
 8001a08:	188a      	adds	r2, r1, r2
 8001a0a:	191c      	adds	r4, r3, r4
 8001a0c:	4290      	cmp	r0, r2
 8001a0e:	d302      	bcc.n	8001a16 <__aeabi_ddiv+0x1be>
 8001a10:	d116      	bne.n	8001a40 <__aeabi_ddiv+0x1e8>
 8001a12:	42a7      	cmp	r7, r4
 8001a14:	d214      	bcs.n	8001a40 <__aeabi_ddiv+0x1e8>
 8001a16:	465b      	mov	r3, fp
 8001a18:	9d00      	ldr	r5, [sp, #0]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	444f      	add	r7, r9
 8001a1e:	9305      	str	r3, [sp, #20]
 8001a20:	454f      	cmp	r7, r9
 8001a22:	419b      	sbcs	r3, r3
 8001a24:	46ac      	mov	ip, r5
 8001a26:	425b      	negs	r3, r3
 8001a28:	4463      	add	r3, ip
 8001a2a:	18c0      	adds	r0, r0, r3
 8001a2c:	4285      	cmp	r5, r0
 8001a2e:	d300      	bcc.n	8001a32 <__aeabi_ddiv+0x1da>
 8001a30:	e1a1      	b.n	8001d76 <__aeabi_ddiv+0x51e>
 8001a32:	4282      	cmp	r2, r0
 8001a34:	d900      	bls.n	8001a38 <__aeabi_ddiv+0x1e0>
 8001a36:	e1f6      	b.n	8001e26 <__aeabi_ddiv+0x5ce>
 8001a38:	d100      	bne.n	8001a3c <__aeabi_ddiv+0x1e4>
 8001a3a:	e1f1      	b.n	8001e20 <__aeabi_ddiv+0x5c8>
 8001a3c:	9b05      	ldr	r3, [sp, #20]
 8001a3e:	469b      	mov	fp, r3
 8001a40:	1b3c      	subs	r4, r7, r4
 8001a42:	42a7      	cmp	r7, r4
 8001a44:	41bf      	sbcs	r7, r7
 8001a46:	9d00      	ldr	r5, [sp, #0]
 8001a48:	1a80      	subs	r0, r0, r2
 8001a4a:	427f      	negs	r7, r7
 8001a4c:	1bc0      	subs	r0, r0, r7
 8001a4e:	4285      	cmp	r5, r0
 8001a50:	d100      	bne.n	8001a54 <__aeabi_ddiv+0x1fc>
 8001a52:	e1d0      	b.n	8001df6 <__aeabi_ddiv+0x59e>
 8001a54:	9902      	ldr	r1, [sp, #8]
 8001a56:	f7fe fbe7 	bl	8000228 <__aeabi_uidivmod>
 8001a5a:	9a03      	ldr	r2, [sp, #12]
 8001a5c:	040b      	lsls	r3, r1, #16
 8001a5e:	4342      	muls	r2, r0
 8001a60:	0c21      	lsrs	r1, r4, #16
 8001a62:	0007      	movs	r7, r0
 8001a64:	4319      	orrs	r1, r3
 8001a66:	428a      	cmp	r2, r1
 8001a68:	d900      	bls.n	8001a6c <__aeabi_ddiv+0x214>
 8001a6a:	e178      	b.n	8001d5e <__aeabi_ddiv+0x506>
 8001a6c:	1a88      	subs	r0, r1, r2
 8001a6e:	9902      	ldr	r1, [sp, #8]
 8001a70:	f7fe fbda 	bl	8000228 <__aeabi_uidivmod>
 8001a74:	9a03      	ldr	r2, [sp, #12]
 8001a76:	0424      	lsls	r4, r4, #16
 8001a78:	4342      	muls	r2, r0
 8001a7a:	0409      	lsls	r1, r1, #16
 8001a7c:	0c24      	lsrs	r4, r4, #16
 8001a7e:	0003      	movs	r3, r0
 8001a80:	430c      	orrs	r4, r1
 8001a82:	42a2      	cmp	r2, r4
 8001a84:	d900      	bls.n	8001a88 <__aeabi_ddiv+0x230>
 8001a86:	e15d      	b.n	8001d44 <__aeabi_ddiv+0x4ec>
 8001a88:	4641      	mov	r1, r8
 8001a8a:	1aa4      	subs	r4, r4, r2
 8001a8c:	043a      	lsls	r2, r7, #16
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	9d04      	ldr	r5, [sp, #16]
 8001a92:	0413      	lsls	r3, r2, #16
 8001a94:	0c1b      	lsrs	r3, r3, #16
 8001a96:	4359      	muls	r1, r3
 8001a98:	4647      	mov	r7, r8
 8001a9a:	436b      	muls	r3, r5
 8001a9c:	469c      	mov	ip, r3
 8001a9e:	0c10      	lsrs	r0, r2, #16
 8001aa0:	4347      	muls	r7, r0
 8001aa2:	0c0b      	lsrs	r3, r1, #16
 8001aa4:	44bc      	add	ip, r7
 8001aa6:	4463      	add	r3, ip
 8001aa8:	4368      	muls	r0, r5
 8001aaa:	429f      	cmp	r7, r3
 8001aac:	d903      	bls.n	8001ab6 <__aeabi_ddiv+0x25e>
 8001aae:	2580      	movs	r5, #128	@ 0x80
 8001ab0:	026d      	lsls	r5, r5, #9
 8001ab2:	46ac      	mov	ip, r5
 8001ab4:	4460      	add	r0, ip
 8001ab6:	0c1f      	lsrs	r7, r3, #16
 8001ab8:	0409      	lsls	r1, r1, #16
 8001aba:	041b      	lsls	r3, r3, #16
 8001abc:	0c09      	lsrs	r1, r1, #16
 8001abe:	183f      	adds	r7, r7, r0
 8001ac0:	185b      	adds	r3, r3, r1
 8001ac2:	42bc      	cmp	r4, r7
 8001ac4:	d200      	bcs.n	8001ac8 <__aeabi_ddiv+0x270>
 8001ac6:	e102      	b.n	8001cce <__aeabi_ddiv+0x476>
 8001ac8:	d100      	bne.n	8001acc <__aeabi_ddiv+0x274>
 8001aca:	e0fd      	b.n	8001cc8 <__aeabi_ddiv+0x470>
 8001acc:	2301      	movs	r3, #1
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	4b43      	ldr	r3, [pc, #268]	@ (8001be0 <__aeabi_ddiv+0x388>)
 8001ad2:	4453      	add	r3, sl
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	dc00      	bgt.n	8001ada <__aeabi_ddiv+0x282>
 8001ad8:	e0ae      	b.n	8001c38 <__aeabi_ddiv+0x3e0>
 8001ada:	0751      	lsls	r1, r2, #29
 8001adc:	d000      	beq.n	8001ae0 <__aeabi_ddiv+0x288>
 8001ade:	e198      	b.n	8001e12 <__aeabi_ddiv+0x5ba>
 8001ae0:	4659      	mov	r1, fp
 8001ae2:	01c9      	lsls	r1, r1, #7
 8001ae4:	d506      	bpl.n	8001af4 <__aeabi_ddiv+0x29c>
 8001ae6:	4659      	mov	r1, fp
 8001ae8:	4b3e      	ldr	r3, [pc, #248]	@ (8001be4 <__aeabi_ddiv+0x38c>)
 8001aea:	4019      	ands	r1, r3
 8001aec:	2380      	movs	r3, #128	@ 0x80
 8001aee:	468b      	mov	fp, r1
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	4453      	add	r3, sl
 8001af4:	493c      	ldr	r1, [pc, #240]	@ (8001be8 <__aeabi_ddiv+0x390>)
 8001af6:	428b      	cmp	r3, r1
 8001af8:	dd00      	ble.n	8001afc <__aeabi_ddiv+0x2a4>
 8001afa:	e71a      	b.n	8001932 <__aeabi_ddiv+0xda>
 8001afc:	4659      	mov	r1, fp
 8001afe:	08d2      	lsrs	r2, r2, #3
 8001b00:	0749      	lsls	r1, r1, #29
 8001b02:	4311      	orrs	r1, r2
 8001b04:	465a      	mov	r2, fp
 8001b06:	055b      	lsls	r3, r3, #21
 8001b08:	0254      	lsls	r4, r2, #9
 8001b0a:	4688      	mov	r8, r1
 8001b0c:	0b24      	lsrs	r4, r4, #12
 8001b0e:	0d5b      	lsrs	r3, r3, #21
 8001b10:	e702      	b.n	8001918 <__aeabi_ddiv+0xc0>
 8001b12:	465a      	mov	r2, fp
 8001b14:	9b00      	ldr	r3, [sp, #0]
 8001b16:	431a      	orrs	r2, r3
 8001b18:	d100      	bne.n	8001b1c <__aeabi_ddiv+0x2c4>
 8001b1a:	e07e      	b.n	8001c1a <__aeabi_ddiv+0x3c2>
 8001b1c:	465b      	mov	r3, fp
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d100      	bne.n	8001b24 <__aeabi_ddiv+0x2cc>
 8001b22:	e100      	b.n	8001d26 <__aeabi_ddiv+0x4ce>
 8001b24:	4658      	mov	r0, fp
 8001b26:	f001 fa15 	bl	8002f54 <__clzsi2>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	3a0b      	subs	r2, #11
 8001b30:	271d      	movs	r7, #29
 8001b32:	9e00      	ldr	r6, [sp, #0]
 8001b34:	1aba      	subs	r2, r7, r2
 8001b36:	0019      	movs	r1, r3
 8001b38:	4658      	mov	r0, fp
 8001b3a:	40d6      	lsrs	r6, r2
 8001b3c:	3908      	subs	r1, #8
 8001b3e:	4088      	lsls	r0, r1
 8001b40:	0032      	movs	r2, r6
 8001b42:	4302      	orrs	r2, r0
 8001b44:	4693      	mov	fp, r2
 8001b46:	9a00      	ldr	r2, [sp, #0]
 8001b48:	408a      	lsls	r2, r1
 8001b4a:	4928      	ldr	r1, [pc, #160]	@ (8001bec <__aeabi_ddiv+0x394>)
 8001b4c:	4453      	add	r3, sl
 8001b4e:	468a      	mov	sl, r1
 8001b50:	449a      	add	sl, r3
 8001b52:	2300      	movs	r3, #0
 8001b54:	e6c8      	b.n	80018e8 <__aeabi_ddiv+0x90>
 8001b56:	465b      	mov	r3, fp
 8001b58:	4303      	orrs	r3, r0
 8001b5a:	4699      	mov	r9, r3
 8001b5c:	d056      	beq.n	8001c0c <__aeabi_ddiv+0x3b4>
 8001b5e:	465b      	mov	r3, fp
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d100      	bne.n	8001b66 <__aeabi_ddiv+0x30e>
 8001b64:	e0cd      	b.n	8001d02 <__aeabi_ddiv+0x4aa>
 8001b66:	4658      	mov	r0, fp
 8001b68:	f001 f9f4 	bl	8002f54 <__clzsi2>
 8001b6c:	230b      	movs	r3, #11
 8001b6e:	425b      	negs	r3, r3
 8001b70:	469c      	mov	ip, r3
 8001b72:	0002      	movs	r2, r0
 8001b74:	4484      	add	ip, r0
 8001b76:	4666      	mov	r6, ip
 8001b78:	231d      	movs	r3, #29
 8001b7a:	1b9b      	subs	r3, r3, r6
 8001b7c:	0026      	movs	r6, r4
 8001b7e:	0011      	movs	r1, r2
 8001b80:	4658      	mov	r0, fp
 8001b82:	40de      	lsrs	r6, r3
 8001b84:	3908      	subs	r1, #8
 8001b86:	4088      	lsls	r0, r1
 8001b88:	0033      	movs	r3, r6
 8001b8a:	4303      	orrs	r3, r0
 8001b8c:	4699      	mov	r9, r3
 8001b8e:	0023      	movs	r3, r4
 8001b90:	408b      	lsls	r3, r1
 8001b92:	4698      	mov	r8, r3
 8001b94:	4b16      	ldr	r3, [pc, #88]	@ (8001bf0 <__aeabi_ddiv+0x398>)
 8001b96:	2400      	movs	r4, #0
 8001b98:	1a9b      	subs	r3, r3, r2
 8001b9a:	469a      	mov	sl, r3
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9303      	str	r3, [sp, #12]
 8001ba0:	e682      	b.n	80018a8 <__aeabi_ddiv+0x50>
 8001ba2:	465a      	mov	r2, fp
 8001ba4:	4302      	orrs	r2, r0
 8001ba6:	4691      	mov	r9, r2
 8001ba8:	d12a      	bne.n	8001c00 <__aeabi_ddiv+0x3a8>
 8001baa:	2200      	movs	r2, #0
 8001bac:	469a      	mov	sl, r3
 8001bae:	2302      	movs	r3, #2
 8001bb0:	4690      	mov	r8, r2
 8001bb2:	2408      	movs	r4, #8
 8001bb4:	9303      	str	r3, [sp, #12]
 8001bb6:	e677      	b.n	80018a8 <__aeabi_ddiv+0x50>
 8001bb8:	465a      	mov	r2, fp
 8001bba:	9b00      	ldr	r3, [sp, #0]
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf4 <__aeabi_ddiv+0x39c>)
 8001bc0:	469c      	mov	ip, r3
 8001bc2:	44e2      	add	sl, ip
 8001bc4:	2a00      	cmp	r2, #0
 8001bc6:	d117      	bne.n	8001bf8 <__aeabi_ddiv+0x3a0>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	2300      	movs	r3, #0
 8001bce:	469b      	mov	fp, r3
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	e689      	b.n	80018e8 <__aeabi_ddiv+0x90>
 8001bd4:	000007ff 	.word	0x000007ff
 8001bd8:	fffffc01 	.word	0xfffffc01
 8001bdc:	0801ac28 	.word	0x0801ac28
 8001be0:	000003ff 	.word	0x000003ff
 8001be4:	feffffff 	.word	0xfeffffff
 8001be8:	000007fe 	.word	0x000007fe
 8001bec:	000003f3 	.word	0x000003f3
 8001bf0:	fffffc0d 	.word	0xfffffc0d
 8001bf4:	fffff801 	.word	0xfffff801
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	0032      	movs	r2, r6
 8001bfc:	431c      	orrs	r4, r3
 8001bfe:	e673      	b.n	80018e8 <__aeabi_ddiv+0x90>
 8001c00:	469a      	mov	sl, r3
 8001c02:	2303      	movs	r3, #3
 8001c04:	46d9      	mov	r9, fp
 8001c06:	240c      	movs	r4, #12
 8001c08:	9303      	str	r3, [sp, #12]
 8001c0a:	e64d      	b.n	80018a8 <__aeabi_ddiv+0x50>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	4698      	mov	r8, r3
 8001c10:	469a      	mov	sl, r3
 8001c12:	3301      	adds	r3, #1
 8001c14:	2404      	movs	r4, #4
 8001c16:	9303      	str	r3, [sp, #12]
 8001c18:	e646      	b.n	80018a8 <__aeabi_ddiv+0x50>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	431c      	orrs	r4, r3
 8001c1e:	2300      	movs	r3, #0
 8001c20:	469b      	mov	fp, r3
 8001c22:	3301      	adds	r3, #1
 8001c24:	e660      	b.n	80018e8 <__aeabi_ddiv+0x90>
 8001c26:	2300      	movs	r3, #0
 8001c28:	2480      	movs	r4, #128	@ 0x80
 8001c2a:	4698      	mov	r8, r3
 8001c2c:	2600      	movs	r6, #0
 8001c2e:	4b92      	ldr	r3, [pc, #584]	@ (8001e78 <__aeabi_ddiv+0x620>)
 8001c30:	0324      	lsls	r4, r4, #12
 8001c32:	e671      	b.n	8001918 <__aeabi_ddiv+0xc0>
 8001c34:	2201      	movs	r2, #1
 8001c36:	4252      	negs	r2, r2
 8001c38:	2101      	movs	r1, #1
 8001c3a:	1ac9      	subs	r1, r1, r3
 8001c3c:	2938      	cmp	r1, #56	@ 0x38
 8001c3e:	dd00      	ble.n	8001c42 <__aeabi_ddiv+0x3ea>
 8001c40:	e666      	b.n	8001910 <__aeabi_ddiv+0xb8>
 8001c42:	291f      	cmp	r1, #31
 8001c44:	dc00      	bgt.n	8001c48 <__aeabi_ddiv+0x3f0>
 8001c46:	e0ab      	b.n	8001da0 <__aeabi_ddiv+0x548>
 8001c48:	201f      	movs	r0, #31
 8001c4a:	4240      	negs	r0, r0
 8001c4c:	1ac3      	subs	r3, r0, r3
 8001c4e:	4658      	mov	r0, fp
 8001c50:	40d8      	lsrs	r0, r3
 8001c52:	0003      	movs	r3, r0
 8001c54:	2920      	cmp	r1, #32
 8001c56:	d004      	beq.n	8001c62 <__aeabi_ddiv+0x40a>
 8001c58:	4658      	mov	r0, fp
 8001c5a:	4988      	ldr	r1, [pc, #544]	@ (8001e7c <__aeabi_ddiv+0x624>)
 8001c5c:	4451      	add	r1, sl
 8001c5e:	4088      	lsls	r0, r1
 8001c60:	4302      	orrs	r2, r0
 8001c62:	1e51      	subs	r1, r2, #1
 8001c64:	418a      	sbcs	r2, r1
 8001c66:	431a      	orrs	r2, r3
 8001c68:	2307      	movs	r3, #7
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	2400      	movs	r4, #0
 8001c6e:	4011      	ands	r1, r2
 8001c70:	4213      	tst	r3, r2
 8001c72:	d00c      	beq.n	8001c8e <__aeabi_ddiv+0x436>
 8001c74:	230f      	movs	r3, #15
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d100      	bne.n	8001c7e <__aeabi_ddiv+0x426>
 8001c7c:	e0f9      	b.n	8001e72 <__aeabi_ddiv+0x61a>
 8001c7e:	1d11      	adds	r1, r2, #4
 8001c80:	4291      	cmp	r1, r2
 8001c82:	419b      	sbcs	r3, r3
 8001c84:	000a      	movs	r2, r1
 8001c86:	425b      	negs	r3, r3
 8001c88:	0759      	lsls	r1, r3, #29
 8001c8a:	025b      	lsls	r3, r3, #9
 8001c8c:	0b1c      	lsrs	r4, r3, #12
 8001c8e:	08d2      	lsrs	r2, r2, #3
 8001c90:	430a      	orrs	r2, r1
 8001c92:	4690      	mov	r8, r2
 8001c94:	2300      	movs	r3, #0
 8001c96:	e63f      	b.n	8001918 <__aeabi_ddiv+0xc0>
 8001c98:	2480      	movs	r4, #128	@ 0x80
 8001c9a:	464b      	mov	r3, r9
 8001c9c:	0324      	lsls	r4, r4, #12
 8001c9e:	4223      	tst	r3, r4
 8001ca0:	d009      	beq.n	8001cb6 <__aeabi_ddiv+0x45e>
 8001ca2:	465b      	mov	r3, fp
 8001ca4:	4223      	tst	r3, r4
 8001ca6:	d106      	bne.n	8001cb6 <__aeabi_ddiv+0x45e>
 8001ca8:	431c      	orrs	r4, r3
 8001caa:	0324      	lsls	r4, r4, #12
 8001cac:	002e      	movs	r6, r5
 8001cae:	4690      	mov	r8, r2
 8001cb0:	4b71      	ldr	r3, [pc, #452]	@ (8001e78 <__aeabi_ddiv+0x620>)
 8001cb2:	0b24      	lsrs	r4, r4, #12
 8001cb4:	e630      	b.n	8001918 <__aeabi_ddiv+0xc0>
 8001cb6:	2480      	movs	r4, #128	@ 0x80
 8001cb8:	464b      	mov	r3, r9
 8001cba:	0324      	lsls	r4, r4, #12
 8001cbc:	431c      	orrs	r4, r3
 8001cbe:	0324      	lsls	r4, r4, #12
 8001cc0:	9e02      	ldr	r6, [sp, #8]
 8001cc2:	4b6d      	ldr	r3, [pc, #436]	@ (8001e78 <__aeabi_ddiv+0x620>)
 8001cc4:	0b24      	lsrs	r4, r4, #12
 8001cc6:	e627      	b.n	8001918 <__aeabi_ddiv+0xc0>
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d100      	bne.n	8001cce <__aeabi_ddiv+0x476>
 8001ccc:	e700      	b.n	8001ad0 <__aeabi_ddiv+0x278>
 8001cce:	9800      	ldr	r0, [sp, #0]
 8001cd0:	1e51      	subs	r1, r2, #1
 8001cd2:	4684      	mov	ip, r0
 8001cd4:	4464      	add	r4, ip
 8001cd6:	4284      	cmp	r4, r0
 8001cd8:	d200      	bcs.n	8001cdc <__aeabi_ddiv+0x484>
 8001cda:	e084      	b.n	8001de6 <__aeabi_ddiv+0x58e>
 8001cdc:	42bc      	cmp	r4, r7
 8001cde:	d200      	bcs.n	8001ce2 <__aeabi_ddiv+0x48a>
 8001ce0:	e0ae      	b.n	8001e40 <__aeabi_ddiv+0x5e8>
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_ddiv+0x48e>
 8001ce4:	e0c1      	b.n	8001e6a <__aeabi_ddiv+0x612>
 8001ce6:	000a      	movs	r2, r1
 8001ce8:	e6f0      	b.n	8001acc <__aeabi_ddiv+0x274>
 8001cea:	4542      	cmp	r2, r8
 8001cec:	d900      	bls.n	8001cf0 <__aeabi_ddiv+0x498>
 8001cee:	e62c      	b.n	800194a <__aeabi_ddiv+0xf2>
 8001cf0:	464b      	mov	r3, r9
 8001cf2:	07dc      	lsls	r4, r3, #31
 8001cf4:	0858      	lsrs	r0, r3, #1
 8001cf6:	4643      	mov	r3, r8
 8001cf8:	085b      	lsrs	r3, r3, #1
 8001cfa:	431c      	orrs	r4, r3
 8001cfc:	4643      	mov	r3, r8
 8001cfe:	07df      	lsls	r7, r3, #31
 8001d00:	e62a      	b.n	8001958 <__aeabi_ddiv+0x100>
 8001d02:	f001 f927 	bl	8002f54 <__clzsi2>
 8001d06:	2315      	movs	r3, #21
 8001d08:	469c      	mov	ip, r3
 8001d0a:	4484      	add	ip, r0
 8001d0c:	0002      	movs	r2, r0
 8001d0e:	4663      	mov	r3, ip
 8001d10:	3220      	adds	r2, #32
 8001d12:	2b1c      	cmp	r3, #28
 8001d14:	dc00      	bgt.n	8001d18 <__aeabi_ddiv+0x4c0>
 8001d16:	e72e      	b.n	8001b76 <__aeabi_ddiv+0x31e>
 8001d18:	0023      	movs	r3, r4
 8001d1a:	3808      	subs	r0, #8
 8001d1c:	4083      	lsls	r3, r0
 8001d1e:	4699      	mov	r9, r3
 8001d20:	2300      	movs	r3, #0
 8001d22:	4698      	mov	r8, r3
 8001d24:	e736      	b.n	8001b94 <__aeabi_ddiv+0x33c>
 8001d26:	f001 f915 	bl	8002f54 <__clzsi2>
 8001d2a:	0002      	movs	r2, r0
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	3215      	adds	r2, #21
 8001d30:	3320      	adds	r3, #32
 8001d32:	2a1c      	cmp	r2, #28
 8001d34:	dc00      	bgt.n	8001d38 <__aeabi_ddiv+0x4e0>
 8001d36:	e6fb      	b.n	8001b30 <__aeabi_ddiv+0x2d8>
 8001d38:	9900      	ldr	r1, [sp, #0]
 8001d3a:	3808      	subs	r0, #8
 8001d3c:	4081      	lsls	r1, r0
 8001d3e:	2200      	movs	r2, #0
 8001d40:	468b      	mov	fp, r1
 8001d42:	e702      	b.n	8001b4a <__aeabi_ddiv+0x2f2>
 8001d44:	9900      	ldr	r1, [sp, #0]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	468c      	mov	ip, r1
 8001d4a:	4464      	add	r4, ip
 8001d4c:	42a1      	cmp	r1, r4
 8001d4e:	d900      	bls.n	8001d52 <__aeabi_ddiv+0x4fa>
 8001d50:	e69a      	b.n	8001a88 <__aeabi_ddiv+0x230>
 8001d52:	42a2      	cmp	r2, r4
 8001d54:	d800      	bhi.n	8001d58 <__aeabi_ddiv+0x500>
 8001d56:	e697      	b.n	8001a88 <__aeabi_ddiv+0x230>
 8001d58:	1e83      	subs	r3, r0, #2
 8001d5a:	4464      	add	r4, ip
 8001d5c:	e694      	b.n	8001a88 <__aeabi_ddiv+0x230>
 8001d5e:	46ac      	mov	ip, r5
 8001d60:	4461      	add	r1, ip
 8001d62:	3f01      	subs	r7, #1
 8001d64:	428d      	cmp	r5, r1
 8001d66:	d900      	bls.n	8001d6a <__aeabi_ddiv+0x512>
 8001d68:	e680      	b.n	8001a6c <__aeabi_ddiv+0x214>
 8001d6a:	428a      	cmp	r2, r1
 8001d6c:	d800      	bhi.n	8001d70 <__aeabi_ddiv+0x518>
 8001d6e:	e67d      	b.n	8001a6c <__aeabi_ddiv+0x214>
 8001d70:	1e87      	subs	r7, r0, #2
 8001d72:	4461      	add	r1, ip
 8001d74:	e67a      	b.n	8001a6c <__aeabi_ddiv+0x214>
 8001d76:	4285      	cmp	r5, r0
 8001d78:	d000      	beq.n	8001d7c <__aeabi_ddiv+0x524>
 8001d7a:	e65f      	b.n	8001a3c <__aeabi_ddiv+0x1e4>
 8001d7c:	45b9      	cmp	r9, r7
 8001d7e:	d900      	bls.n	8001d82 <__aeabi_ddiv+0x52a>
 8001d80:	e65c      	b.n	8001a3c <__aeabi_ddiv+0x1e4>
 8001d82:	e656      	b.n	8001a32 <__aeabi_ddiv+0x1da>
 8001d84:	42a2      	cmp	r2, r4
 8001d86:	d800      	bhi.n	8001d8a <__aeabi_ddiv+0x532>
 8001d88:	e61a      	b.n	80019c0 <__aeabi_ddiv+0x168>
 8001d8a:	1e83      	subs	r3, r0, #2
 8001d8c:	4464      	add	r4, ip
 8001d8e:	e617      	b.n	80019c0 <__aeabi_ddiv+0x168>
 8001d90:	428a      	cmp	r2, r1
 8001d92:	d800      	bhi.n	8001d96 <__aeabi_ddiv+0x53e>
 8001d94:	e600      	b.n	8001998 <__aeabi_ddiv+0x140>
 8001d96:	46ac      	mov	ip, r5
 8001d98:	1e83      	subs	r3, r0, #2
 8001d9a:	4698      	mov	r8, r3
 8001d9c:	4461      	add	r1, ip
 8001d9e:	e5fb      	b.n	8001998 <__aeabi_ddiv+0x140>
 8001da0:	4837      	ldr	r0, [pc, #220]	@ (8001e80 <__aeabi_ddiv+0x628>)
 8001da2:	0014      	movs	r4, r2
 8001da4:	4450      	add	r0, sl
 8001da6:	4082      	lsls	r2, r0
 8001da8:	465b      	mov	r3, fp
 8001daa:	0017      	movs	r7, r2
 8001dac:	4083      	lsls	r3, r0
 8001dae:	40cc      	lsrs	r4, r1
 8001db0:	1e7a      	subs	r2, r7, #1
 8001db2:	4197      	sbcs	r7, r2
 8001db4:	4323      	orrs	r3, r4
 8001db6:	433b      	orrs	r3, r7
 8001db8:	001a      	movs	r2, r3
 8001dba:	465b      	mov	r3, fp
 8001dbc:	40cb      	lsrs	r3, r1
 8001dbe:	0751      	lsls	r1, r2, #29
 8001dc0:	d009      	beq.n	8001dd6 <__aeabi_ddiv+0x57e>
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	4011      	ands	r1, r2
 8001dc6:	2904      	cmp	r1, #4
 8001dc8:	d005      	beq.n	8001dd6 <__aeabi_ddiv+0x57e>
 8001dca:	1d11      	adds	r1, r2, #4
 8001dcc:	4291      	cmp	r1, r2
 8001dce:	4192      	sbcs	r2, r2
 8001dd0:	4252      	negs	r2, r2
 8001dd2:	189b      	adds	r3, r3, r2
 8001dd4:	000a      	movs	r2, r1
 8001dd6:	0219      	lsls	r1, r3, #8
 8001dd8:	d400      	bmi.n	8001ddc <__aeabi_ddiv+0x584>
 8001dda:	e755      	b.n	8001c88 <__aeabi_ddiv+0x430>
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2301      	movs	r3, #1
 8001de0:	2400      	movs	r4, #0
 8001de2:	4690      	mov	r8, r2
 8001de4:	e598      	b.n	8001918 <__aeabi_ddiv+0xc0>
 8001de6:	000a      	movs	r2, r1
 8001de8:	42bc      	cmp	r4, r7
 8001dea:	d000      	beq.n	8001dee <__aeabi_ddiv+0x596>
 8001dec:	e66e      	b.n	8001acc <__aeabi_ddiv+0x274>
 8001dee:	454b      	cmp	r3, r9
 8001df0:	d000      	beq.n	8001df4 <__aeabi_ddiv+0x59c>
 8001df2:	e66b      	b.n	8001acc <__aeabi_ddiv+0x274>
 8001df4:	e66c      	b.n	8001ad0 <__aeabi_ddiv+0x278>
 8001df6:	4b23      	ldr	r3, [pc, #140]	@ (8001e84 <__aeabi_ddiv+0x62c>)
 8001df8:	4a23      	ldr	r2, [pc, #140]	@ (8001e88 <__aeabi_ddiv+0x630>)
 8001dfa:	4453      	add	r3, sl
 8001dfc:	4592      	cmp	sl, r2
 8001dfe:	da00      	bge.n	8001e02 <__aeabi_ddiv+0x5aa>
 8001e00:	e718      	b.n	8001c34 <__aeabi_ddiv+0x3dc>
 8001e02:	2101      	movs	r1, #1
 8001e04:	4249      	negs	r1, r1
 8001e06:	1d0a      	adds	r2, r1, #4
 8001e08:	428a      	cmp	r2, r1
 8001e0a:	4189      	sbcs	r1, r1
 8001e0c:	4249      	negs	r1, r1
 8001e0e:	448b      	add	fp, r1
 8001e10:	e666      	b.n	8001ae0 <__aeabi_ddiv+0x288>
 8001e12:	210f      	movs	r1, #15
 8001e14:	4011      	ands	r1, r2
 8001e16:	2904      	cmp	r1, #4
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x5c4>
 8001e1a:	e661      	b.n	8001ae0 <__aeabi_ddiv+0x288>
 8001e1c:	0011      	movs	r1, r2
 8001e1e:	e7f2      	b.n	8001e06 <__aeabi_ddiv+0x5ae>
 8001e20:	42bc      	cmp	r4, r7
 8001e22:	d800      	bhi.n	8001e26 <__aeabi_ddiv+0x5ce>
 8001e24:	e60a      	b.n	8001a3c <__aeabi_ddiv+0x1e4>
 8001e26:	2302      	movs	r3, #2
 8001e28:	425b      	negs	r3, r3
 8001e2a:	469c      	mov	ip, r3
 8001e2c:	9900      	ldr	r1, [sp, #0]
 8001e2e:	444f      	add	r7, r9
 8001e30:	454f      	cmp	r7, r9
 8001e32:	419b      	sbcs	r3, r3
 8001e34:	44e3      	add	fp, ip
 8001e36:	468c      	mov	ip, r1
 8001e38:	425b      	negs	r3, r3
 8001e3a:	4463      	add	r3, ip
 8001e3c:	18c0      	adds	r0, r0, r3
 8001e3e:	e5ff      	b.n	8001a40 <__aeabi_ddiv+0x1e8>
 8001e40:	4649      	mov	r1, r9
 8001e42:	9d00      	ldr	r5, [sp, #0]
 8001e44:	0048      	lsls	r0, r1, #1
 8001e46:	4548      	cmp	r0, r9
 8001e48:	4189      	sbcs	r1, r1
 8001e4a:	46ac      	mov	ip, r5
 8001e4c:	4249      	negs	r1, r1
 8001e4e:	4461      	add	r1, ip
 8001e50:	4681      	mov	r9, r0
 8001e52:	3a02      	subs	r2, #2
 8001e54:	1864      	adds	r4, r4, r1
 8001e56:	e7c7      	b.n	8001de8 <__aeabi_ddiv+0x590>
 8001e58:	2480      	movs	r4, #128	@ 0x80
 8001e5a:	465b      	mov	r3, fp
 8001e5c:	0324      	lsls	r4, r4, #12
 8001e5e:	431c      	orrs	r4, r3
 8001e60:	0324      	lsls	r4, r4, #12
 8001e62:	4690      	mov	r8, r2
 8001e64:	4b04      	ldr	r3, [pc, #16]	@ (8001e78 <__aeabi_ddiv+0x620>)
 8001e66:	0b24      	lsrs	r4, r4, #12
 8001e68:	e556      	b.n	8001918 <__aeabi_ddiv+0xc0>
 8001e6a:	4599      	cmp	r9, r3
 8001e6c:	d3e8      	bcc.n	8001e40 <__aeabi_ddiv+0x5e8>
 8001e6e:	000a      	movs	r2, r1
 8001e70:	e7bd      	b.n	8001dee <__aeabi_ddiv+0x596>
 8001e72:	2300      	movs	r3, #0
 8001e74:	e708      	b.n	8001c88 <__aeabi_ddiv+0x430>
 8001e76:	46c0      	nop			@ (mov r8, r8)
 8001e78:	000007ff 	.word	0x000007ff
 8001e7c:	0000043e 	.word	0x0000043e
 8001e80:	0000041e 	.word	0x0000041e
 8001e84:	000003ff 	.word	0x000003ff
 8001e88:	fffffc02 	.word	0xfffffc02

08001e8c <__eqdf2>:
 8001e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8e:	4657      	mov	r7, sl
 8001e90:	46de      	mov	lr, fp
 8001e92:	464e      	mov	r6, r9
 8001e94:	4645      	mov	r5, r8
 8001e96:	b5e0      	push	{r5, r6, r7, lr}
 8001e98:	000d      	movs	r5, r1
 8001e9a:	0004      	movs	r4, r0
 8001e9c:	0fe8      	lsrs	r0, r5, #31
 8001e9e:	4683      	mov	fp, r0
 8001ea0:	0309      	lsls	r1, r1, #12
 8001ea2:	0fd8      	lsrs	r0, r3, #31
 8001ea4:	0b09      	lsrs	r1, r1, #12
 8001ea6:	4682      	mov	sl, r0
 8001ea8:	4819      	ldr	r0, [pc, #100]	@ (8001f10 <__eqdf2+0x84>)
 8001eaa:	468c      	mov	ip, r1
 8001eac:	031f      	lsls	r7, r3, #12
 8001eae:	0069      	lsls	r1, r5, #1
 8001eb0:	005e      	lsls	r6, r3, #1
 8001eb2:	0d49      	lsrs	r1, r1, #21
 8001eb4:	0b3f      	lsrs	r7, r7, #12
 8001eb6:	0d76      	lsrs	r6, r6, #21
 8001eb8:	4281      	cmp	r1, r0
 8001eba:	d018      	beq.n	8001eee <__eqdf2+0x62>
 8001ebc:	4286      	cmp	r6, r0
 8001ebe:	d00f      	beq.n	8001ee0 <__eqdf2+0x54>
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	42b1      	cmp	r1, r6
 8001ec4:	d10d      	bne.n	8001ee2 <__eqdf2+0x56>
 8001ec6:	45bc      	cmp	ip, r7
 8001ec8:	d10b      	bne.n	8001ee2 <__eqdf2+0x56>
 8001eca:	4294      	cmp	r4, r2
 8001ecc:	d109      	bne.n	8001ee2 <__eqdf2+0x56>
 8001ece:	45d3      	cmp	fp, sl
 8001ed0:	d01c      	beq.n	8001f0c <__eqdf2+0x80>
 8001ed2:	2900      	cmp	r1, #0
 8001ed4:	d105      	bne.n	8001ee2 <__eqdf2+0x56>
 8001ed6:	4660      	mov	r0, ip
 8001ed8:	4320      	orrs	r0, r4
 8001eda:	1e43      	subs	r3, r0, #1
 8001edc:	4198      	sbcs	r0, r3
 8001ede:	e000      	b.n	8001ee2 <__eqdf2+0x56>
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	bcf0      	pop	{r4, r5, r6, r7}
 8001ee4:	46bb      	mov	fp, r7
 8001ee6:	46b2      	mov	sl, r6
 8001ee8:	46a9      	mov	r9, r5
 8001eea:	46a0      	mov	r8, r4
 8001eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eee:	2001      	movs	r0, #1
 8001ef0:	428e      	cmp	r6, r1
 8001ef2:	d1f6      	bne.n	8001ee2 <__eqdf2+0x56>
 8001ef4:	4661      	mov	r1, ip
 8001ef6:	4339      	orrs	r1, r7
 8001ef8:	000f      	movs	r7, r1
 8001efa:	4317      	orrs	r7, r2
 8001efc:	4327      	orrs	r7, r4
 8001efe:	d1f0      	bne.n	8001ee2 <__eqdf2+0x56>
 8001f00:	465b      	mov	r3, fp
 8001f02:	4652      	mov	r2, sl
 8001f04:	1a98      	subs	r0, r3, r2
 8001f06:	1e43      	subs	r3, r0, #1
 8001f08:	4198      	sbcs	r0, r3
 8001f0a:	e7ea      	b.n	8001ee2 <__eqdf2+0x56>
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	e7e8      	b.n	8001ee2 <__eqdf2+0x56>
 8001f10:	000007ff 	.word	0x000007ff

08001f14 <__gedf2>:
 8001f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f16:	4657      	mov	r7, sl
 8001f18:	464e      	mov	r6, r9
 8001f1a:	4645      	mov	r5, r8
 8001f1c:	46de      	mov	lr, fp
 8001f1e:	b5e0      	push	{r5, r6, r7, lr}
 8001f20:	000d      	movs	r5, r1
 8001f22:	030f      	lsls	r7, r1, #12
 8001f24:	0b39      	lsrs	r1, r7, #12
 8001f26:	b083      	sub	sp, #12
 8001f28:	0004      	movs	r4, r0
 8001f2a:	4680      	mov	r8, r0
 8001f2c:	9101      	str	r1, [sp, #4]
 8001f2e:	0058      	lsls	r0, r3, #1
 8001f30:	0fe9      	lsrs	r1, r5, #31
 8001f32:	4f31      	ldr	r7, [pc, #196]	@ (8001ff8 <__gedf2+0xe4>)
 8001f34:	0d40      	lsrs	r0, r0, #21
 8001f36:	468c      	mov	ip, r1
 8001f38:	006e      	lsls	r6, r5, #1
 8001f3a:	0319      	lsls	r1, r3, #12
 8001f3c:	4682      	mov	sl, r0
 8001f3e:	4691      	mov	r9, r2
 8001f40:	0d76      	lsrs	r6, r6, #21
 8001f42:	0b09      	lsrs	r1, r1, #12
 8001f44:	0fd8      	lsrs	r0, r3, #31
 8001f46:	42be      	cmp	r6, r7
 8001f48:	d01f      	beq.n	8001f8a <__gedf2+0x76>
 8001f4a:	45ba      	cmp	sl, r7
 8001f4c:	d00f      	beq.n	8001f6e <__gedf2+0x5a>
 8001f4e:	2e00      	cmp	r6, #0
 8001f50:	d12f      	bne.n	8001fb2 <__gedf2+0x9e>
 8001f52:	4655      	mov	r5, sl
 8001f54:	9e01      	ldr	r6, [sp, #4]
 8001f56:	4334      	orrs	r4, r6
 8001f58:	2d00      	cmp	r5, #0
 8001f5a:	d127      	bne.n	8001fac <__gedf2+0x98>
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	d03a      	beq.n	8001fd6 <__gedf2+0xc2>
 8001f60:	2c00      	cmp	r4, #0
 8001f62:	d145      	bne.n	8001ff0 <__gedf2+0xdc>
 8001f64:	2800      	cmp	r0, #0
 8001f66:	d11a      	bne.n	8001f9e <__gedf2+0x8a>
 8001f68:	2001      	movs	r0, #1
 8001f6a:	4240      	negs	r0, r0
 8001f6c:	e017      	b.n	8001f9e <__gedf2+0x8a>
 8001f6e:	4311      	orrs	r1, r2
 8001f70:	d13b      	bne.n	8001fea <__gedf2+0xd6>
 8001f72:	2e00      	cmp	r6, #0
 8001f74:	d102      	bne.n	8001f7c <__gedf2+0x68>
 8001f76:	9f01      	ldr	r7, [sp, #4]
 8001f78:	4327      	orrs	r7, r4
 8001f7a:	d0f3      	beq.n	8001f64 <__gedf2+0x50>
 8001f7c:	4584      	cmp	ip, r0
 8001f7e:	d109      	bne.n	8001f94 <__gedf2+0x80>
 8001f80:	4663      	mov	r3, ip
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <__gedf2+0x54>
 8001f86:	4660      	mov	r0, ip
 8001f88:	e009      	b.n	8001f9e <__gedf2+0x8a>
 8001f8a:	9f01      	ldr	r7, [sp, #4]
 8001f8c:	4327      	orrs	r7, r4
 8001f8e:	d12c      	bne.n	8001fea <__gedf2+0xd6>
 8001f90:	45b2      	cmp	sl, r6
 8001f92:	d024      	beq.n	8001fde <__gedf2+0xca>
 8001f94:	4663      	mov	r3, ip
 8001f96:	2002      	movs	r0, #2
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	4018      	ands	r0, r3
 8001f9c:	3801      	subs	r0, #1
 8001f9e:	b003      	add	sp, #12
 8001fa0:	bcf0      	pop	{r4, r5, r6, r7}
 8001fa2:	46bb      	mov	fp, r7
 8001fa4:	46b2      	mov	sl, r6
 8001fa6:	46a9      	mov	r9, r5
 8001fa8:	46a0      	mov	r8, r4
 8001faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fac:	2c00      	cmp	r4, #0
 8001fae:	d0d9      	beq.n	8001f64 <__gedf2+0x50>
 8001fb0:	e7e4      	b.n	8001f7c <__gedf2+0x68>
 8001fb2:	4654      	mov	r4, sl
 8001fb4:	2c00      	cmp	r4, #0
 8001fb6:	d0ed      	beq.n	8001f94 <__gedf2+0x80>
 8001fb8:	4584      	cmp	ip, r0
 8001fba:	d1eb      	bne.n	8001f94 <__gedf2+0x80>
 8001fbc:	4556      	cmp	r6, sl
 8001fbe:	dce9      	bgt.n	8001f94 <__gedf2+0x80>
 8001fc0:	dbde      	blt.n	8001f80 <__gedf2+0x6c>
 8001fc2:	9b01      	ldr	r3, [sp, #4]
 8001fc4:	428b      	cmp	r3, r1
 8001fc6:	d8e5      	bhi.n	8001f94 <__gedf2+0x80>
 8001fc8:	d1da      	bne.n	8001f80 <__gedf2+0x6c>
 8001fca:	45c8      	cmp	r8, r9
 8001fcc:	d8e2      	bhi.n	8001f94 <__gedf2+0x80>
 8001fce:	2000      	movs	r0, #0
 8001fd0:	45c8      	cmp	r8, r9
 8001fd2:	d2e4      	bcs.n	8001f9e <__gedf2+0x8a>
 8001fd4:	e7d4      	b.n	8001f80 <__gedf2+0x6c>
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	2c00      	cmp	r4, #0
 8001fda:	d0e0      	beq.n	8001f9e <__gedf2+0x8a>
 8001fdc:	e7da      	b.n	8001f94 <__gedf2+0x80>
 8001fde:	4311      	orrs	r1, r2
 8001fe0:	d103      	bne.n	8001fea <__gedf2+0xd6>
 8001fe2:	4584      	cmp	ip, r0
 8001fe4:	d1d6      	bne.n	8001f94 <__gedf2+0x80>
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	e7d9      	b.n	8001f9e <__gedf2+0x8a>
 8001fea:	2002      	movs	r0, #2
 8001fec:	4240      	negs	r0, r0
 8001fee:	e7d6      	b.n	8001f9e <__gedf2+0x8a>
 8001ff0:	4584      	cmp	ip, r0
 8001ff2:	d0e6      	beq.n	8001fc2 <__gedf2+0xae>
 8001ff4:	e7ce      	b.n	8001f94 <__gedf2+0x80>
 8001ff6:	46c0      	nop			@ (mov r8, r8)
 8001ff8:	000007ff 	.word	0x000007ff

08001ffc <__ledf2>:
 8001ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ffe:	4657      	mov	r7, sl
 8002000:	464e      	mov	r6, r9
 8002002:	4645      	mov	r5, r8
 8002004:	46de      	mov	lr, fp
 8002006:	b5e0      	push	{r5, r6, r7, lr}
 8002008:	000d      	movs	r5, r1
 800200a:	030f      	lsls	r7, r1, #12
 800200c:	0004      	movs	r4, r0
 800200e:	4680      	mov	r8, r0
 8002010:	0fe8      	lsrs	r0, r5, #31
 8002012:	0b39      	lsrs	r1, r7, #12
 8002014:	4684      	mov	ip, r0
 8002016:	b083      	sub	sp, #12
 8002018:	0058      	lsls	r0, r3, #1
 800201a:	4f30      	ldr	r7, [pc, #192]	@ (80020dc <__ledf2+0xe0>)
 800201c:	0d40      	lsrs	r0, r0, #21
 800201e:	9101      	str	r1, [sp, #4]
 8002020:	031e      	lsls	r6, r3, #12
 8002022:	0069      	lsls	r1, r5, #1
 8002024:	4682      	mov	sl, r0
 8002026:	4691      	mov	r9, r2
 8002028:	0d49      	lsrs	r1, r1, #21
 800202a:	0b36      	lsrs	r6, r6, #12
 800202c:	0fd8      	lsrs	r0, r3, #31
 800202e:	42b9      	cmp	r1, r7
 8002030:	d020      	beq.n	8002074 <__ledf2+0x78>
 8002032:	45ba      	cmp	sl, r7
 8002034:	d00f      	beq.n	8002056 <__ledf2+0x5a>
 8002036:	2900      	cmp	r1, #0
 8002038:	d12b      	bne.n	8002092 <__ledf2+0x96>
 800203a:	9901      	ldr	r1, [sp, #4]
 800203c:	430c      	orrs	r4, r1
 800203e:	4651      	mov	r1, sl
 8002040:	2900      	cmp	r1, #0
 8002042:	d137      	bne.n	80020b4 <__ledf2+0xb8>
 8002044:	4332      	orrs	r2, r6
 8002046:	d038      	beq.n	80020ba <__ledf2+0xbe>
 8002048:	2c00      	cmp	r4, #0
 800204a:	d144      	bne.n	80020d6 <__ledf2+0xda>
 800204c:	2800      	cmp	r0, #0
 800204e:	d119      	bne.n	8002084 <__ledf2+0x88>
 8002050:	2001      	movs	r0, #1
 8002052:	4240      	negs	r0, r0
 8002054:	e016      	b.n	8002084 <__ledf2+0x88>
 8002056:	4316      	orrs	r6, r2
 8002058:	d113      	bne.n	8002082 <__ledf2+0x86>
 800205a:	2900      	cmp	r1, #0
 800205c:	d102      	bne.n	8002064 <__ledf2+0x68>
 800205e:	9f01      	ldr	r7, [sp, #4]
 8002060:	4327      	orrs	r7, r4
 8002062:	d0f3      	beq.n	800204c <__ledf2+0x50>
 8002064:	4584      	cmp	ip, r0
 8002066:	d020      	beq.n	80020aa <__ledf2+0xae>
 8002068:	4663      	mov	r3, ip
 800206a:	2002      	movs	r0, #2
 800206c:	3b01      	subs	r3, #1
 800206e:	4018      	ands	r0, r3
 8002070:	3801      	subs	r0, #1
 8002072:	e007      	b.n	8002084 <__ledf2+0x88>
 8002074:	9f01      	ldr	r7, [sp, #4]
 8002076:	4327      	orrs	r7, r4
 8002078:	d103      	bne.n	8002082 <__ledf2+0x86>
 800207a:	458a      	cmp	sl, r1
 800207c:	d1f4      	bne.n	8002068 <__ledf2+0x6c>
 800207e:	4316      	orrs	r6, r2
 8002080:	d01f      	beq.n	80020c2 <__ledf2+0xc6>
 8002082:	2002      	movs	r0, #2
 8002084:	b003      	add	sp, #12
 8002086:	bcf0      	pop	{r4, r5, r6, r7}
 8002088:	46bb      	mov	fp, r7
 800208a:	46b2      	mov	sl, r6
 800208c:	46a9      	mov	r9, r5
 800208e:	46a0      	mov	r8, r4
 8002090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002092:	4654      	mov	r4, sl
 8002094:	2c00      	cmp	r4, #0
 8002096:	d0e7      	beq.n	8002068 <__ledf2+0x6c>
 8002098:	4584      	cmp	ip, r0
 800209a:	d1e5      	bne.n	8002068 <__ledf2+0x6c>
 800209c:	4551      	cmp	r1, sl
 800209e:	dce3      	bgt.n	8002068 <__ledf2+0x6c>
 80020a0:	db03      	blt.n	80020aa <__ledf2+0xae>
 80020a2:	9b01      	ldr	r3, [sp, #4]
 80020a4:	42b3      	cmp	r3, r6
 80020a6:	d8df      	bhi.n	8002068 <__ledf2+0x6c>
 80020a8:	d00f      	beq.n	80020ca <__ledf2+0xce>
 80020aa:	4663      	mov	r3, ip
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0cf      	beq.n	8002050 <__ledf2+0x54>
 80020b0:	4660      	mov	r0, ip
 80020b2:	e7e7      	b.n	8002084 <__ledf2+0x88>
 80020b4:	2c00      	cmp	r4, #0
 80020b6:	d0c9      	beq.n	800204c <__ledf2+0x50>
 80020b8:	e7d4      	b.n	8002064 <__ledf2+0x68>
 80020ba:	2000      	movs	r0, #0
 80020bc:	2c00      	cmp	r4, #0
 80020be:	d0e1      	beq.n	8002084 <__ledf2+0x88>
 80020c0:	e7d2      	b.n	8002068 <__ledf2+0x6c>
 80020c2:	4584      	cmp	ip, r0
 80020c4:	d1d0      	bne.n	8002068 <__ledf2+0x6c>
 80020c6:	2000      	movs	r0, #0
 80020c8:	e7dc      	b.n	8002084 <__ledf2+0x88>
 80020ca:	45c8      	cmp	r8, r9
 80020cc:	d8cc      	bhi.n	8002068 <__ledf2+0x6c>
 80020ce:	2000      	movs	r0, #0
 80020d0:	45c8      	cmp	r8, r9
 80020d2:	d2d7      	bcs.n	8002084 <__ledf2+0x88>
 80020d4:	e7e9      	b.n	80020aa <__ledf2+0xae>
 80020d6:	4584      	cmp	ip, r0
 80020d8:	d0e3      	beq.n	80020a2 <__ledf2+0xa6>
 80020da:	e7c5      	b.n	8002068 <__ledf2+0x6c>
 80020dc:	000007ff 	.word	0x000007ff

080020e0 <__aeabi_dmul>:
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	4657      	mov	r7, sl
 80020e4:	46de      	mov	lr, fp
 80020e6:	464e      	mov	r6, r9
 80020e8:	4645      	mov	r5, r8
 80020ea:	b5e0      	push	{r5, r6, r7, lr}
 80020ec:	001f      	movs	r7, r3
 80020ee:	030b      	lsls	r3, r1, #12
 80020f0:	0b1b      	lsrs	r3, r3, #12
 80020f2:	0016      	movs	r6, r2
 80020f4:	469a      	mov	sl, r3
 80020f6:	0fca      	lsrs	r2, r1, #31
 80020f8:	004b      	lsls	r3, r1, #1
 80020fa:	0004      	movs	r4, r0
 80020fc:	4693      	mov	fp, r2
 80020fe:	b087      	sub	sp, #28
 8002100:	0d5b      	lsrs	r3, r3, #21
 8002102:	d100      	bne.n	8002106 <__aeabi_dmul+0x26>
 8002104:	e0d5      	b.n	80022b2 <__aeabi_dmul+0x1d2>
 8002106:	4abb      	ldr	r2, [pc, #748]	@ (80023f4 <__aeabi_dmul+0x314>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d100      	bne.n	800210e <__aeabi_dmul+0x2e>
 800210c:	e0f8      	b.n	8002300 <__aeabi_dmul+0x220>
 800210e:	4651      	mov	r1, sl
 8002110:	0f42      	lsrs	r2, r0, #29
 8002112:	00c9      	lsls	r1, r1, #3
 8002114:	430a      	orrs	r2, r1
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	0409      	lsls	r1, r1, #16
 800211a:	4311      	orrs	r1, r2
 800211c:	00c2      	lsls	r2, r0, #3
 800211e:	4691      	mov	r9, r2
 8002120:	4ab5      	ldr	r2, [pc, #724]	@ (80023f8 <__aeabi_dmul+0x318>)
 8002122:	468a      	mov	sl, r1
 8002124:	189d      	adds	r5, r3, r2
 8002126:	2300      	movs	r3, #0
 8002128:	4698      	mov	r8, r3
 800212a:	9302      	str	r3, [sp, #8]
 800212c:	033c      	lsls	r4, r7, #12
 800212e:	007b      	lsls	r3, r7, #1
 8002130:	0ffa      	lsrs	r2, r7, #31
 8002132:	0030      	movs	r0, r6
 8002134:	0b24      	lsrs	r4, r4, #12
 8002136:	0d5b      	lsrs	r3, r3, #21
 8002138:	9200      	str	r2, [sp, #0]
 800213a:	d100      	bne.n	800213e <__aeabi_dmul+0x5e>
 800213c:	e096      	b.n	800226c <__aeabi_dmul+0x18c>
 800213e:	4aad      	ldr	r2, [pc, #692]	@ (80023f4 <__aeabi_dmul+0x314>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d031      	beq.n	80021a8 <__aeabi_dmul+0xc8>
 8002144:	0f72      	lsrs	r2, r6, #29
 8002146:	00e4      	lsls	r4, r4, #3
 8002148:	4322      	orrs	r2, r4
 800214a:	2480      	movs	r4, #128	@ 0x80
 800214c:	0424      	lsls	r4, r4, #16
 800214e:	4314      	orrs	r4, r2
 8002150:	4aa9      	ldr	r2, [pc, #676]	@ (80023f8 <__aeabi_dmul+0x318>)
 8002152:	00f0      	lsls	r0, r6, #3
 8002154:	4694      	mov	ip, r2
 8002156:	4463      	add	r3, ip
 8002158:	195b      	adds	r3, r3, r5
 800215a:	1c5a      	adds	r2, r3, #1
 800215c:	9201      	str	r2, [sp, #4]
 800215e:	4642      	mov	r2, r8
 8002160:	2600      	movs	r6, #0
 8002162:	2a0a      	cmp	r2, #10
 8002164:	dc42      	bgt.n	80021ec <__aeabi_dmul+0x10c>
 8002166:	465a      	mov	r2, fp
 8002168:	9900      	ldr	r1, [sp, #0]
 800216a:	404a      	eors	r2, r1
 800216c:	4693      	mov	fp, r2
 800216e:	4642      	mov	r2, r8
 8002170:	2a02      	cmp	r2, #2
 8002172:	dc32      	bgt.n	80021da <__aeabi_dmul+0xfa>
 8002174:	3a01      	subs	r2, #1
 8002176:	2a01      	cmp	r2, #1
 8002178:	d900      	bls.n	800217c <__aeabi_dmul+0x9c>
 800217a:	e149      	b.n	8002410 <__aeabi_dmul+0x330>
 800217c:	2e02      	cmp	r6, #2
 800217e:	d100      	bne.n	8002182 <__aeabi_dmul+0xa2>
 8002180:	e0ca      	b.n	8002318 <__aeabi_dmul+0x238>
 8002182:	2e01      	cmp	r6, #1
 8002184:	d13d      	bne.n	8002202 <__aeabi_dmul+0x122>
 8002186:	2300      	movs	r3, #0
 8002188:	2400      	movs	r4, #0
 800218a:	2200      	movs	r2, #0
 800218c:	0010      	movs	r0, r2
 800218e:	465a      	mov	r2, fp
 8002190:	051b      	lsls	r3, r3, #20
 8002192:	4323      	orrs	r3, r4
 8002194:	07d2      	lsls	r2, r2, #31
 8002196:	4313      	orrs	r3, r2
 8002198:	0019      	movs	r1, r3
 800219a:	b007      	add	sp, #28
 800219c:	bcf0      	pop	{r4, r5, r6, r7}
 800219e:	46bb      	mov	fp, r7
 80021a0:	46b2      	mov	sl, r6
 80021a2:	46a9      	mov	r9, r5
 80021a4:	46a0      	mov	r8, r4
 80021a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a8:	4b92      	ldr	r3, [pc, #584]	@ (80023f4 <__aeabi_dmul+0x314>)
 80021aa:	4326      	orrs	r6, r4
 80021ac:	18eb      	adds	r3, r5, r3
 80021ae:	2e00      	cmp	r6, #0
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dmul+0xd4>
 80021b2:	e0bb      	b.n	800232c <__aeabi_dmul+0x24c>
 80021b4:	2203      	movs	r2, #3
 80021b6:	4641      	mov	r1, r8
 80021b8:	4311      	orrs	r1, r2
 80021ba:	465a      	mov	r2, fp
 80021bc:	4688      	mov	r8, r1
 80021be:	9900      	ldr	r1, [sp, #0]
 80021c0:	404a      	eors	r2, r1
 80021c2:	2180      	movs	r1, #128	@ 0x80
 80021c4:	0109      	lsls	r1, r1, #4
 80021c6:	468c      	mov	ip, r1
 80021c8:	0029      	movs	r1, r5
 80021ca:	4461      	add	r1, ip
 80021cc:	9101      	str	r1, [sp, #4]
 80021ce:	4641      	mov	r1, r8
 80021d0:	290a      	cmp	r1, #10
 80021d2:	dd00      	ble.n	80021d6 <__aeabi_dmul+0xf6>
 80021d4:	e233      	b.n	800263e <__aeabi_dmul+0x55e>
 80021d6:	4693      	mov	fp, r2
 80021d8:	2603      	movs	r6, #3
 80021da:	4642      	mov	r2, r8
 80021dc:	2701      	movs	r7, #1
 80021de:	4097      	lsls	r7, r2
 80021e0:	21a6      	movs	r1, #166	@ 0xa6
 80021e2:	003a      	movs	r2, r7
 80021e4:	00c9      	lsls	r1, r1, #3
 80021e6:	400a      	ands	r2, r1
 80021e8:	420f      	tst	r7, r1
 80021ea:	d031      	beq.n	8002250 <__aeabi_dmul+0x170>
 80021ec:	9e02      	ldr	r6, [sp, #8]
 80021ee:	2e02      	cmp	r6, #2
 80021f0:	d100      	bne.n	80021f4 <__aeabi_dmul+0x114>
 80021f2:	e235      	b.n	8002660 <__aeabi_dmul+0x580>
 80021f4:	2e03      	cmp	r6, #3
 80021f6:	d100      	bne.n	80021fa <__aeabi_dmul+0x11a>
 80021f8:	e1d2      	b.n	80025a0 <__aeabi_dmul+0x4c0>
 80021fa:	4654      	mov	r4, sl
 80021fc:	4648      	mov	r0, r9
 80021fe:	2e01      	cmp	r6, #1
 8002200:	d0c1      	beq.n	8002186 <__aeabi_dmul+0xa6>
 8002202:	9a01      	ldr	r2, [sp, #4]
 8002204:	4b7d      	ldr	r3, [pc, #500]	@ (80023fc <__aeabi_dmul+0x31c>)
 8002206:	4694      	mov	ip, r2
 8002208:	4463      	add	r3, ip
 800220a:	2b00      	cmp	r3, #0
 800220c:	dc00      	bgt.n	8002210 <__aeabi_dmul+0x130>
 800220e:	e0c0      	b.n	8002392 <__aeabi_dmul+0x2b2>
 8002210:	0742      	lsls	r2, r0, #29
 8002212:	d009      	beq.n	8002228 <__aeabi_dmul+0x148>
 8002214:	220f      	movs	r2, #15
 8002216:	4002      	ands	r2, r0
 8002218:	2a04      	cmp	r2, #4
 800221a:	d005      	beq.n	8002228 <__aeabi_dmul+0x148>
 800221c:	1d02      	adds	r2, r0, #4
 800221e:	4282      	cmp	r2, r0
 8002220:	4180      	sbcs	r0, r0
 8002222:	4240      	negs	r0, r0
 8002224:	1824      	adds	r4, r4, r0
 8002226:	0010      	movs	r0, r2
 8002228:	01e2      	lsls	r2, r4, #7
 800222a:	d506      	bpl.n	800223a <__aeabi_dmul+0x15a>
 800222c:	4b74      	ldr	r3, [pc, #464]	@ (8002400 <__aeabi_dmul+0x320>)
 800222e:	9a01      	ldr	r2, [sp, #4]
 8002230:	401c      	ands	r4, r3
 8002232:	2380      	movs	r3, #128	@ 0x80
 8002234:	4694      	mov	ip, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4463      	add	r3, ip
 800223a:	4a72      	ldr	r2, [pc, #456]	@ (8002404 <__aeabi_dmul+0x324>)
 800223c:	4293      	cmp	r3, r2
 800223e:	dc6b      	bgt.n	8002318 <__aeabi_dmul+0x238>
 8002240:	0762      	lsls	r2, r4, #29
 8002242:	08c0      	lsrs	r0, r0, #3
 8002244:	0264      	lsls	r4, r4, #9
 8002246:	055b      	lsls	r3, r3, #21
 8002248:	4302      	orrs	r2, r0
 800224a:	0b24      	lsrs	r4, r4, #12
 800224c:	0d5b      	lsrs	r3, r3, #21
 800224e:	e79d      	b.n	800218c <__aeabi_dmul+0xac>
 8002250:	2190      	movs	r1, #144	@ 0x90
 8002252:	0089      	lsls	r1, r1, #2
 8002254:	420f      	tst	r7, r1
 8002256:	d163      	bne.n	8002320 <__aeabi_dmul+0x240>
 8002258:	2288      	movs	r2, #136	@ 0x88
 800225a:	423a      	tst	r2, r7
 800225c:	d100      	bne.n	8002260 <__aeabi_dmul+0x180>
 800225e:	e0d7      	b.n	8002410 <__aeabi_dmul+0x330>
 8002260:	9b00      	ldr	r3, [sp, #0]
 8002262:	46a2      	mov	sl, r4
 8002264:	469b      	mov	fp, r3
 8002266:	4681      	mov	r9, r0
 8002268:	9602      	str	r6, [sp, #8]
 800226a:	e7bf      	b.n	80021ec <__aeabi_dmul+0x10c>
 800226c:	0023      	movs	r3, r4
 800226e:	4333      	orrs	r3, r6
 8002270:	d100      	bne.n	8002274 <__aeabi_dmul+0x194>
 8002272:	e07f      	b.n	8002374 <__aeabi_dmul+0x294>
 8002274:	2c00      	cmp	r4, #0
 8002276:	d100      	bne.n	800227a <__aeabi_dmul+0x19a>
 8002278:	e1ad      	b.n	80025d6 <__aeabi_dmul+0x4f6>
 800227a:	0020      	movs	r0, r4
 800227c:	f000 fe6a 	bl	8002f54 <__clzsi2>
 8002280:	0002      	movs	r2, r0
 8002282:	0003      	movs	r3, r0
 8002284:	3a0b      	subs	r2, #11
 8002286:	201d      	movs	r0, #29
 8002288:	0019      	movs	r1, r3
 800228a:	1a82      	subs	r2, r0, r2
 800228c:	0030      	movs	r0, r6
 800228e:	3908      	subs	r1, #8
 8002290:	40d0      	lsrs	r0, r2
 8002292:	408c      	lsls	r4, r1
 8002294:	4304      	orrs	r4, r0
 8002296:	0030      	movs	r0, r6
 8002298:	4088      	lsls	r0, r1
 800229a:	4a5b      	ldr	r2, [pc, #364]	@ (8002408 <__aeabi_dmul+0x328>)
 800229c:	1aeb      	subs	r3, r5, r3
 800229e:	4694      	mov	ip, r2
 80022a0:	4463      	add	r3, ip
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	9201      	str	r2, [sp, #4]
 80022a6:	4642      	mov	r2, r8
 80022a8:	2600      	movs	r6, #0
 80022aa:	2a0a      	cmp	r2, #10
 80022ac:	dc00      	bgt.n	80022b0 <__aeabi_dmul+0x1d0>
 80022ae:	e75a      	b.n	8002166 <__aeabi_dmul+0x86>
 80022b0:	e79c      	b.n	80021ec <__aeabi_dmul+0x10c>
 80022b2:	4653      	mov	r3, sl
 80022b4:	4303      	orrs	r3, r0
 80022b6:	4699      	mov	r9, r3
 80022b8:	d054      	beq.n	8002364 <__aeabi_dmul+0x284>
 80022ba:	4653      	mov	r3, sl
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d100      	bne.n	80022c2 <__aeabi_dmul+0x1e2>
 80022c0:	e177      	b.n	80025b2 <__aeabi_dmul+0x4d2>
 80022c2:	4650      	mov	r0, sl
 80022c4:	f000 fe46 	bl	8002f54 <__clzsi2>
 80022c8:	230b      	movs	r3, #11
 80022ca:	425b      	negs	r3, r3
 80022cc:	469c      	mov	ip, r3
 80022ce:	0002      	movs	r2, r0
 80022d0:	4484      	add	ip, r0
 80022d2:	0011      	movs	r1, r2
 80022d4:	4650      	mov	r0, sl
 80022d6:	3908      	subs	r1, #8
 80022d8:	4088      	lsls	r0, r1
 80022da:	231d      	movs	r3, #29
 80022dc:	4680      	mov	r8, r0
 80022de:	4660      	mov	r0, ip
 80022e0:	1a1b      	subs	r3, r3, r0
 80022e2:	0020      	movs	r0, r4
 80022e4:	40d8      	lsrs	r0, r3
 80022e6:	0003      	movs	r3, r0
 80022e8:	4640      	mov	r0, r8
 80022ea:	4303      	orrs	r3, r0
 80022ec:	469a      	mov	sl, r3
 80022ee:	0023      	movs	r3, r4
 80022f0:	408b      	lsls	r3, r1
 80022f2:	4699      	mov	r9, r3
 80022f4:	2300      	movs	r3, #0
 80022f6:	4d44      	ldr	r5, [pc, #272]	@ (8002408 <__aeabi_dmul+0x328>)
 80022f8:	4698      	mov	r8, r3
 80022fa:	1aad      	subs	r5, r5, r2
 80022fc:	9302      	str	r3, [sp, #8]
 80022fe:	e715      	b.n	800212c <__aeabi_dmul+0x4c>
 8002300:	4652      	mov	r2, sl
 8002302:	4302      	orrs	r2, r0
 8002304:	4691      	mov	r9, r2
 8002306:	d126      	bne.n	8002356 <__aeabi_dmul+0x276>
 8002308:	2200      	movs	r2, #0
 800230a:	001d      	movs	r5, r3
 800230c:	2302      	movs	r3, #2
 800230e:	4692      	mov	sl, r2
 8002310:	3208      	adds	r2, #8
 8002312:	4690      	mov	r8, r2
 8002314:	9302      	str	r3, [sp, #8]
 8002316:	e709      	b.n	800212c <__aeabi_dmul+0x4c>
 8002318:	2400      	movs	r4, #0
 800231a:	2200      	movs	r2, #0
 800231c:	4b35      	ldr	r3, [pc, #212]	@ (80023f4 <__aeabi_dmul+0x314>)
 800231e:	e735      	b.n	800218c <__aeabi_dmul+0xac>
 8002320:	2300      	movs	r3, #0
 8002322:	2480      	movs	r4, #128	@ 0x80
 8002324:	469b      	mov	fp, r3
 8002326:	0324      	lsls	r4, r4, #12
 8002328:	4b32      	ldr	r3, [pc, #200]	@ (80023f4 <__aeabi_dmul+0x314>)
 800232a:	e72f      	b.n	800218c <__aeabi_dmul+0xac>
 800232c:	2202      	movs	r2, #2
 800232e:	4641      	mov	r1, r8
 8002330:	4311      	orrs	r1, r2
 8002332:	2280      	movs	r2, #128	@ 0x80
 8002334:	0112      	lsls	r2, r2, #4
 8002336:	4694      	mov	ip, r2
 8002338:	002a      	movs	r2, r5
 800233a:	4462      	add	r2, ip
 800233c:	4688      	mov	r8, r1
 800233e:	9201      	str	r2, [sp, #4]
 8002340:	290a      	cmp	r1, #10
 8002342:	dd00      	ble.n	8002346 <__aeabi_dmul+0x266>
 8002344:	e752      	b.n	80021ec <__aeabi_dmul+0x10c>
 8002346:	465a      	mov	r2, fp
 8002348:	2000      	movs	r0, #0
 800234a:	9900      	ldr	r1, [sp, #0]
 800234c:	0004      	movs	r4, r0
 800234e:	404a      	eors	r2, r1
 8002350:	4693      	mov	fp, r2
 8002352:	2602      	movs	r6, #2
 8002354:	e70b      	b.n	800216e <__aeabi_dmul+0x8e>
 8002356:	220c      	movs	r2, #12
 8002358:	001d      	movs	r5, r3
 800235a:	2303      	movs	r3, #3
 800235c:	4681      	mov	r9, r0
 800235e:	4690      	mov	r8, r2
 8002360:	9302      	str	r3, [sp, #8]
 8002362:	e6e3      	b.n	800212c <__aeabi_dmul+0x4c>
 8002364:	2300      	movs	r3, #0
 8002366:	469a      	mov	sl, r3
 8002368:	3304      	adds	r3, #4
 800236a:	4698      	mov	r8, r3
 800236c:	3b03      	subs	r3, #3
 800236e:	2500      	movs	r5, #0
 8002370:	9302      	str	r3, [sp, #8]
 8002372:	e6db      	b.n	800212c <__aeabi_dmul+0x4c>
 8002374:	4642      	mov	r2, r8
 8002376:	3301      	adds	r3, #1
 8002378:	431a      	orrs	r2, r3
 800237a:	002b      	movs	r3, r5
 800237c:	4690      	mov	r8, r2
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	9201      	str	r2, [sp, #4]
 8002382:	4642      	mov	r2, r8
 8002384:	2400      	movs	r4, #0
 8002386:	2000      	movs	r0, #0
 8002388:	2601      	movs	r6, #1
 800238a:	2a0a      	cmp	r2, #10
 800238c:	dc00      	bgt.n	8002390 <__aeabi_dmul+0x2b0>
 800238e:	e6ea      	b.n	8002166 <__aeabi_dmul+0x86>
 8002390:	e72c      	b.n	80021ec <__aeabi_dmul+0x10c>
 8002392:	2201      	movs	r2, #1
 8002394:	1ad2      	subs	r2, r2, r3
 8002396:	2a38      	cmp	r2, #56	@ 0x38
 8002398:	dd00      	ble.n	800239c <__aeabi_dmul+0x2bc>
 800239a:	e6f4      	b.n	8002186 <__aeabi_dmul+0xa6>
 800239c:	2a1f      	cmp	r2, #31
 800239e:	dc00      	bgt.n	80023a2 <__aeabi_dmul+0x2c2>
 80023a0:	e12a      	b.n	80025f8 <__aeabi_dmul+0x518>
 80023a2:	211f      	movs	r1, #31
 80023a4:	4249      	negs	r1, r1
 80023a6:	1acb      	subs	r3, r1, r3
 80023a8:	0021      	movs	r1, r4
 80023aa:	40d9      	lsrs	r1, r3
 80023ac:	000b      	movs	r3, r1
 80023ae:	2a20      	cmp	r2, #32
 80023b0:	d005      	beq.n	80023be <__aeabi_dmul+0x2de>
 80023b2:	4a16      	ldr	r2, [pc, #88]	@ (800240c <__aeabi_dmul+0x32c>)
 80023b4:	9d01      	ldr	r5, [sp, #4]
 80023b6:	4694      	mov	ip, r2
 80023b8:	4465      	add	r5, ip
 80023ba:	40ac      	lsls	r4, r5
 80023bc:	4320      	orrs	r0, r4
 80023be:	1e42      	subs	r2, r0, #1
 80023c0:	4190      	sbcs	r0, r2
 80023c2:	4318      	orrs	r0, r3
 80023c4:	2307      	movs	r3, #7
 80023c6:	0019      	movs	r1, r3
 80023c8:	2400      	movs	r4, #0
 80023ca:	4001      	ands	r1, r0
 80023cc:	4203      	tst	r3, r0
 80023ce:	d00c      	beq.n	80023ea <__aeabi_dmul+0x30a>
 80023d0:	230f      	movs	r3, #15
 80023d2:	4003      	ands	r3, r0
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d100      	bne.n	80023da <__aeabi_dmul+0x2fa>
 80023d8:	e140      	b.n	800265c <__aeabi_dmul+0x57c>
 80023da:	1d03      	adds	r3, r0, #4
 80023dc:	4283      	cmp	r3, r0
 80023de:	41a4      	sbcs	r4, r4
 80023e0:	0018      	movs	r0, r3
 80023e2:	4264      	negs	r4, r4
 80023e4:	0761      	lsls	r1, r4, #29
 80023e6:	0264      	lsls	r4, r4, #9
 80023e8:	0b24      	lsrs	r4, r4, #12
 80023ea:	08c2      	lsrs	r2, r0, #3
 80023ec:	2300      	movs	r3, #0
 80023ee:	430a      	orrs	r2, r1
 80023f0:	e6cc      	b.n	800218c <__aeabi_dmul+0xac>
 80023f2:	46c0      	nop			@ (mov r8, r8)
 80023f4:	000007ff 	.word	0x000007ff
 80023f8:	fffffc01 	.word	0xfffffc01
 80023fc:	000003ff 	.word	0x000003ff
 8002400:	feffffff 	.word	0xfeffffff
 8002404:	000007fe 	.word	0x000007fe
 8002408:	fffffc0d 	.word	0xfffffc0d
 800240c:	0000043e 	.word	0x0000043e
 8002410:	4649      	mov	r1, r9
 8002412:	464a      	mov	r2, r9
 8002414:	0409      	lsls	r1, r1, #16
 8002416:	0c09      	lsrs	r1, r1, #16
 8002418:	000d      	movs	r5, r1
 800241a:	0c16      	lsrs	r6, r2, #16
 800241c:	0c02      	lsrs	r2, r0, #16
 800241e:	0400      	lsls	r0, r0, #16
 8002420:	0c00      	lsrs	r0, r0, #16
 8002422:	4345      	muls	r5, r0
 8002424:	46ac      	mov	ip, r5
 8002426:	0005      	movs	r5, r0
 8002428:	4375      	muls	r5, r6
 800242a:	46a8      	mov	r8, r5
 800242c:	0015      	movs	r5, r2
 800242e:	000f      	movs	r7, r1
 8002430:	4375      	muls	r5, r6
 8002432:	9200      	str	r2, [sp, #0]
 8002434:	9502      	str	r5, [sp, #8]
 8002436:	002a      	movs	r2, r5
 8002438:	9d00      	ldr	r5, [sp, #0]
 800243a:	436f      	muls	r7, r5
 800243c:	4665      	mov	r5, ip
 800243e:	0c2d      	lsrs	r5, r5, #16
 8002440:	46a9      	mov	r9, r5
 8002442:	4447      	add	r7, r8
 8002444:	444f      	add	r7, r9
 8002446:	45b8      	cmp	r8, r7
 8002448:	d905      	bls.n	8002456 <__aeabi_dmul+0x376>
 800244a:	0015      	movs	r5, r2
 800244c:	2280      	movs	r2, #128	@ 0x80
 800244e:	0252      	lsls	r2, r2, #9
 8002450:	4690      	mov	r8, r2
 8002452:	4445      	add	r5, r8
 8002454:	9502      	str	r5, [sp, #8]
 8002456:	0c3d      	lsrs	r5, r7, #16
 8002458:	9503      	str	r5, [sp, #12]
 800245a:	4665      	mov	r5, ip
 800245c:	042d      	lsls	r5, r5, #16
 800245e:	043f      	lsls	r7, r7, #16
 8002460:	0c2d      	lsrs	r5, r5, #16
 8002462:	46ac      	mov	ip, r5
 8002464:	003d      	movs	r5, r7
 8002466:	4465      	add	r5, ip
 8002468:	9504      	str	r5, [sp, #16]
 800246a:	0c25      	lsrs	r5, r4, #16
 800246c:	0424      	lsls	r4, r4, #16
 800246e:	0c24      	lsrs	r4, r4, #16
 8002470:	46ac      	mov	ip, r5
 8002472:	0025      	movs	r5, r4
 8002474:	4375      	muls	r5, r6
 8002476:	46a8      	mov	r8, r5
 8002478:	4665      	mov	r5, ip
 800247a:	000f      	movs	r7, r1
 800247c:	4369      	muls	r1, r5
 800247e:	4441      	add	r1, r8
 8002480:	4689      	mov	r9, r1
 8002482:	4367      	muls	r7, r4
 8002484:	0c39      	lsrs	r1, r7, #16
 8002486:	4449      	add	r1, r9
 8002488:	436e      	muls	r6, r5
 800248a:	4588      	cmp	r8, r1
 800248c:	d903      	bls.n	8002496 <__aeabi_dmul+0x3b6>
 800248e:	2280      	movs	r2, #128	@ 0x80
 8002490:	0252      	lsls	r2, r2, #9
 8002492:	4690      	mov	r8, r2
 8002494:	4446      	add	r6, r8
 8002496:	0c0d      	lsrs	r5, r1, #16
 8002498:	46a8      	mov	r8, r5
 800249a:	0035      	movs	r5, r6
 800249c:	4445      	add	r5, r8
 800249e:	9505      	str	r5, [sp, #20]
 80024a0:	9d03      	ldr	r5, [sp, #12]
 80024a2:	043f      	lsls	r7, r7, #16
 80024a4:	46a8      	mov	r8, r5
 80024a6:	0c3f      	lsrs	r7, r7, #16
 80024a8:	0409      	lsls	r1, r1, #16
 80024aa:	19c9      	adds	r1, r1, r7
 80024ac:	4488      	add	r8, r1
 80024ae:	4645      	mov	r5, r8
 80024b0:	9503      	str	r5, [sp, #12]
 80024b2:	4655      	mov	r5, sl
 80024b4:	042e      	lsls	r6, r5, #16
 80024b6:	0c36      	lsrs	r6, r6, #16
 80024b8:	0c2f      	lsrs	r7, r5, #16
 80024ba:	0035      	movs	r5, r6
 80024bc:	4345      	muls	r5, r0
 80024be:	4378      	muls	r0, r7
 80024c0:	4681      	mov	r9, r0
 80024c2:	0038      	movs	r0, r7
 80024c4:	46a8      	mov	r8, r5
 80024c6:	0c2d      	lsrs	r5, r5, #16
 80024c8:	46aa      	mov	sl, r5
 80024ca:	9a00      	ldr	r2, [sp, #0]
 80024cc:	4350      	muls	r0, r2
 80024ce:	4372      	muls	r2, r6
 80024d0:	444a      	add	r2, r9
 80024d2:	4452      	add	r2, sl
 80024d4:	4591      	cmp	r9, r2
 80024d6:	d903      	bls.n	80024e0 <__aeabi_dmul+0x400>
 80024d8:	2580      	movs	r5, #128	@ 0x80
 80024da:	026d      	lsls	r5, r5, #9
 80024dc:	46a9      	mov	r9, r5
 80024de:	4448      	add	r0, r9
 80024e0:	0c15      	lsrs	r5, r2, #16
 80024e2:	46a9      	mov	r9, r5
 80024e4:	4645      	mov	r5, r8
 80024e6:	042d      	lsls	r5, r5, #16
 80024e8:	0c2d      	lsrs	r5, r5, #16
 80024ea:	46a8      	mov	r8, r5
 80024ec:	4665      	mov	r5, ip
 80024ee:	437d      	muls	r5, r7
 80024f0:	0412      	lsls	r2, r2, #16
 80024f2:	4448      	add	r0, r9
 80024f4:	4490      	add	r8, r2
 80024f6:	46a9      	mov	r9, r5
 80024f8:	0032      	movs	r2, r6
 80024fa:	4665      	mov	r5, ip
 80024fc:	4362      	muls	r2, r4
 80024fe:	436e      	muls	r6, r5
 8002500:	437c      	muls	r4, r7
 8002502:	0c17      	lsrs	r7, r2, #16
 8002504:	1936      	adds	r6, r6, r4
 8002506:	19bf      	adds	r7, r7, r6
 8002508:	42bc      	cmp	r4, r7
 800250a:	d903      	bls.n	8002514 <__aeabi_dmul+0x434>
 800250c:	2480      	movs	r4, #128	@ 0x80
 800250e:	0264      	lsls	r4, r4, #9
 8002510:	46a4      	mov	ip, r4
 8002512:	44e1      	add	r9, ip
 8002514:	9c02      	ldr	r4, [sp, #8]
 8002516:	9e03      	ldr	r6, [sp, #12]
 8002518:	46a4      	mov	ip, r4
 800251a:	9d05      	ldr	r5, [sp, #20]
 800251c:	4466      	add	r6, ip
 800251e:	428e      	cmp	r6, r1
 8002520:	4189      	sbcs	r1, r1
 8002522:	46ac      	mov	ip, r5
 8002524:	0412      	lsls	r2, r2, #16
 8002526:	043c      	lsls	r4, r7, #16
 8002528:	0c12      	lsrs	r2, r2, #16
 800252a:	18a2      	adds	r2, r4, r2
 800252c:	4462      	add	r2, ip
 800252e:	4249      	negs	r1, r1
 8002530:	1854      	adds	r4, r2, r1
 8002532:	4446      	add	r6, r8
 8002534:	46a4      	mov	ip, r4
 8002536:	4546      	cmp	r6, r8
 8002538:	41a4      	sbcs	r4, r4
 800253a:	4682      	mov	sl, r0
 800253c:	4264      	negs	r4, r4
 800253e:	46a0      	mov	r8, r4
 8002540:	42aa      	cmp	r2, r5
 8002542:	4192      	sbcs	r2, r2
 8002544:	458c      	cmp	ip, r1
 8002546:	4189      	sbcs	r1, r1
 8002548:	44e2      	add	sl, ip
 800254a:	44d0      	add	r8, sl
 800254c:	4249      	negs	r1, r1
 800254e:	4252      	negs	r2, r2
 8002550:	430a      	orrs	r2, r1
 8002552:	45a0      	cmp	r8, r4
 8002554:	41a4      	sbcs	r4, r4
 8002556:	4582      	cmp	sl, r0
 8002558:	4189      	sbcs	r1, r1
 800255a:	4264      	negs	r4, r4
 800255c:	4249      	negs	r1, r1
 800255e:	430c      	orrs	r4, r1
 8002560:	4641      	mov	r1, r8
 8002562:	0c3f      	lsrs	r7, r7, #16
 8002564:	19d2      	adds	r2, r2, r7
 8002566:	1912      	adds	r2, r2, r4
 8002568:	0dcc      	lsrs	r4, r1, #23
 800256a:	9904      	ldr	r1, [sp, #16]
 800256c:	0270      	lsls	r0, r6, #9
 800256e:	4308      	orrs	r0, r1
 8002570:	1e41      	subs	r1, r0, #1
 8002572:	4188      	sbcs	r0, r1
 8002574:	4641      	mov	r1, r8
 8002576:	444a      	add	r2, r9
 8002578:	0df6      	lsrs	r6, r6, #23
 800257a:	0252      	lsls	r2, r2, #9
 800257c:	4330      	orrs	r0, r6
 800257e:	0249      	lsls	r1, r1, #9
 8002580:	4314      	orrs	r4, r2
 8002582:	4308      	orrs	r0, r1
 8002584:	01d2      	lsls	r2, r2, #7
 8002586:	d535      	bpl.n	80025f4 <__aeabi_dmul+0x514>
 8002588:	2201      	movs	r2, #1
 800258a:	0843      	lsrs	r3, r0, #1
 800258c:	4002      	ands	r2, r0
 800258e:	4313      	orrs	r3, r2
 8002590:	07e0      	lsls	r0, r4, #31
 8002592:	4318      	orrs	r0, r3
 8002594:	0864      	lsrs	r4, r4, #1
 8002596:	e634      	b.n	8002202 <__aeabi_dmul+0x122>
 8002598:	9b00      	ldr	r3, [sp, #0]
 800259a:	46a2      	mov	sl, r4
 800259c:	469b      	mov	fp, r3
 800259e:	4681      	mov	r9, r0
 80025a0:	2480      	movs	r4, #128	@ 0x80
 80025a2:	4653      	mov	r3, sl
 80025a4:	0324      	lsls	r4, r4, #12
 80025a6:	431c      	orrs	r4, r3
 80025a8:	0324      	lsls	r4, r4, #12
 80025aa:	464a      	mov	r2, r9
 80025ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002668 <__aeabi_dmul+0x588>)
 80025ae:	0b24      	lsrs	r4, r4, #12
 80025b0:	e5ec      	b.n	800218c <__aeabi_dmul+0xac>
 80025b2:	f000 fccf 	bl	8002f54 <__clzsi2>
 80025b6:	2315      	movs	r3, #21
 80025b8:	469c      	mov	ip, r3
 80025ba:	4484      	add	ip, r0
 80025bc:	0002      	movs	r2, r0
 80025be:	4663      	mov	r3, ip
 80025c0:	3220      	adds	r2, #32
 80025c2:	2b1c      	cmp	r3, #28
 80025c4:	dc00      	bgt.n	80025c8 <__aeabi_dmul+0x4e8>
 80025c6:	e684      	b.n	80022d2 <__aeabi_dmul+0x1f2>
 80025c8:	2300      	movs	r3, #0
 80025ca:	4699      	mov	r9, r3
 80025cc:	0023      	movs	r3, r4
 80025ce:	3808      	subs	r0, #8
 80025d0:	4083      	lsls	r3, r0
 80025d2:	469a      	mov	sl, r3
 80025d4:	e68e      	b.n	80022f4 <__aeabi_dmul+0x214>
 80025d6:	f000 fcbd 	bl	8002f54 <__clzsi2>
 80025da:	0002      	movs	r2, r0
 80025dc:	0003      	movs	r3, r0
 80025de:	3215      	adds	r2, #21
 80025e0:	3320      	adds	r3, #32
 80025e2:	2a1c      	cmp	r2, #28
 80025e4:	dc00      	bgt.n	80025e8 <__aeabi_dmul+0x508>
 80025e6:	e64e      	b.n	8002286 <__aeabi_dmul+0x1a6>
 80025e8:	0002      	movs	r2, r0
 80025ea:	0034      	movs	r4, r6
 80025ec:	3a08      	subs	r2, #8
 80025ee:	2000      	movs	r0, #0
 80025f0:	4094      	lsls	r4, r2
 80025f2:	e652      	b.n	800229a <__aeabi_dmul+0x1ba>
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	e604      	b.n	8002202 <__aeabi_dmul+0x122>
 80025f8:	4b1c      	ldr	r3, [pc, #112]	@ (800266c <__aeabi_dmul+0x58c>)
 80025fa:	0021      	movs	r1, r4
 80025fc:	469c      	mov	ip, r3
 80025fe:	0003      	movs	r3, r0
 8002600:	9d01      	ldr	r5, [sp, #4]
 8002602:	40d3      	lsrs	r3, r2
 8002604:	4465      	add	r5, ip
 8002606:	40a9      	lsls	r1, r5
 8002608:	4319      	orrs	r1, r3
 800260a:	0003      	movs	r3, r0
 800260c:	40ab      	lsls	r3, r5
 800260e:	1e58      	subs	r0, r3, #1
 8002610:	4183      	sbcs	r3, r0
 8002612:	4319      	orrs	r1, r3
 8002614:	0008      	movs	r0, r1
 8002616:	40d4      	lsrs	r4, r2
 8002618:	074b      	lsls	r3, r1, #29
 800261a:	d009      	beq.n	8002630 <__aeabi_dmul+0x550>
 800261c:	230f      	movs	r3, #15
 800261e:	400b      	ands	r3, r1
 8002620:	2b04      	cmp	r3, #4
 8002622:	d005      	beq.n	8002630 <__aeabi_dmul+0x550>
 8002624:	1d0b      	adds	r3, r1, #4
 8002626:	428b      	cmp	r3, r1
 8002628:	4180      	sbcs	r0, r0
 800262a:	4240      	negs	r0, r0
 800262c:	1824      	adds	r4, r4, r0
 800262e:	0018      	movs	r0, r3
 8002630:	0223      	lsls	r3, r4, #8
 8002632:	d400      	bmi.n	8002636 <__aeabi_dmul+0x556>
 8002634:	e6d6      	b.n	80023e4 <__aeabi_dmul+0x304>
 8002636:	2301      	movs	r3, #1
 8002638:	2400      	movs	r4, #0
 800263a:	2200      	movs	r2, #0
 800263c:	e5a6      	b.n	800218c <__aeabi_dmul+0xac>
 800263e:	290f      	cmp	r1, #15
 8002640:	d1aa      	bne.n	8002598 <__aeabi_dmul+0x4b8>
 8002642:	2380      	movs	r3, #128	@ 0x80
 8002644:	4652      	mov	r2, sl
 8002646:	031b      	lsls	r3, r3, #12
 8002648:	421a      	tst	r2, r3
 800264a:	d0a9      	beq.n	80025a0 <__aeabi_dmul+0x4c0>
 800264c:	421c      	tst	r4, r3
 800264e:	d1a7      	bne.n	80025a0 <__aeabi_dmul+0x4c0>
 8002650:	431c      	orrs	r4, r3
 8002652:	9b00      	ldr	r3, [sp, #0]
 8002654:	0002      	movs	r2, r0
 8002656:	469b      	mov	fp, r3
 8002658:	4b03      	ldr	r3, [pc, #12]	@ (8002668 <__aeabi_dmul+0x588>)
 800265a:	e597      	b.n	800218c <__aeabi_dmul+0xac>
 800265c:	2400      	movs	r4, #0
 800265e:	e6c1      	b.n	80023e4 <__aeabi_dmul+0x304>
 8002660:	2400      	movs	r4, #0
 8002662:	4b01      	ldr	r3, [pc, #4]	@ (8002668 <__aeabi_dmul+0x588>)
 8002664:	0022      	movs	r2, r4
 8002666:	e591      	b.n	800218c <__aeabi_dmul+0xac>
 8002668:	000007ff 	.word	0x000007ff
 800266c:	0000041e 	.word	0x0000041e

08002670 <__aeabi_dsub>:
 8002670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002672:	464e      	mov	r6, r9
 8002674:	4645      	mov	r5, r8
 8002676:	46de      	mov	lr, fp
 8002678:	4657      	mov	r7, sl
 800267a:	b5e0      	push	{r5, r6, r7, lr}
 800267c:	b085      	sub	sp, #20
 800267e:	9000      	str	r0, [sp, #0]
 8002680:	9101      	str	r1, [sp, #4]
 8002682:	030c      	lsls	r4, r1, #12
 8002684:	004f      	lsls	r7, r1, #1
 8002686:	0fce      	lsrs	r6, r1, #31
 8002688:	0a61      	lsrs	r1, r4, #9
 800268a:	9c00      	ldr	r4, [sp, #0]
 800268c:	46b0      	mov	r8, r6
 800268e:	0f64      	lsrs	r4, r4, #29
 8002690:	430c      	orrs	r4, r1
 8002692:	9900      	ldr	r1, [sp, #0]
 8002694:	0d7f      	lsrs	r7, r7, #21
 8002696:	00c8      	lsls	r0, r1, #3
 8002698:	0011      	movs	r1, r2
 800269a:	001a      	movs	r2, r3
 800269c:	031b      	lsls	r3, r3, #12
 800269e:	469c      	mov	ip, r3
 80026a0:	9100      	str	r1, [sp, #0]
 80026a2:	9201      	str	r2, [sp, #4]
 80026a4:	0051      	lsls	r1, r2, #1
 80026a6:	0d4b      	lsrs	r3, r1, #21
 80026a8:	4699      	mov	r9, r3
 80026aa:	9b01      	ldr	r3, [sp, #4]
 80026ac:	9d00      	ldr	r5, [sp, #0]
 80026ae:	0fd9      	lsrs	r1, r3, #31
 80026b0:	4663      	mov	r3, ip
 80026b2:	0f6a      	lsrs	r2, r5, #29
 80026b4:	0a5b      	lsrs	r3, r3, #9
 80026b6:	4313      	orrs	r3, r2
 80026b8:	00ea      	lsls	r2, r5, #3
 80026ba:	4694      	mov	ip, r2
 80026bc:	4693      	mov	fp, r2
 80026be:	4ac1      	ldr	r2, [pc, #772]	@ (80029c4 <__aeabi_dsub+0x354>)
 80026c0:	9003      	str	r0, [sp, #12]
 80026c2:	9302      	str	r3, [sp, #8]
 80026c4:	4591      	cmp	r9, r2
 80026c6:	d100      	bne.n	80026ca <__aeabi_dsub+0x5a>
 80026c8:	e0cd      	b.n	8002866 <__aeabi_dsub+0x1f6>
 80026ca:	2501      	movs	r5, #1
 80026cc:	4069      	eors	r1, r5
 80026ce:	464d      	mov	r5, r9
 80026d0:	1b7d      	subs	r5, r7, r5
 80026d2:	46aa      	mov	sl, r5
 80026d4:	428e      	cmp	r6, r1
 80026d6:	d100      	bne.n	80026da <__aeabi_dsub+0x6a>
 80026d8:	e080      	b.n	80027dc <__aeabi_dsub+0x16c>
 80026da:	2d00      	cmp	r5, #0
 80026dc:	dc00      	bgt.n	80026e0 <__aeabi_dsub+0x70>
 80026de:	e335      	b.n	8002d4c <__aeabi_dsub+0x6dc>
 80026e0:	4649      	mov	r1, r9
 80026e2:	2900      	cmp	r1, #0
 80026e4:	d100      	bne.n	80026e8 <__aeabi_dsub+0x78>
 80026e6:	e0df      	b.n	80028a8 <__aeabi_dsub+0x238>
 80026e8:	4297      	cmp	r7, r2
 80026ea:	d100      	bne.n	80026ee <__aeabi_dsub+0x7e>
 80026ec:	e194      	b.n	8002a18 <__aeabi_dsub+0x3a8>
 80026ee:	4652      	mov	r2, sl
 80026f0:	2501      	movs	r5, #1
 80026f2:	2a38      	cmp	r2, #56	@ 0x38
 80026f4:	dc19      	bgt.n	800272a <__aeabi_dsub+0xba>
 80026f6:	2280      	movs	r2, #128	@ 0x80
 80026f8:	9b02      	ldr	r3, [sp, #8]
 80026fa:	0412      	lsls	r2, r2, #16
 80026fc:	4313      	orrs	r3, r2
 80026fe:	9302      	str	r3, [sp, #8]
 8002700:	4652      	mov	r2, sl
 8002702:	2a1f      	cmp	r2, #31
 8002704:	dd00      	ble.n	8002708 <__aeabi_dsub+0x98>
 8002706:	e1e3      	b.n	8002ad0 <__aeabi_dsub+0x460>
 8002708:	4653      	mov	r3, sl
 800270a:	2220      	movs	r2, #32
 800270c:	4661      	mov	r1, ip
 800270e:	9d02      	ldr	r5, [sp, #8]
 8002710:	1ad2      	subs	r2, r2, r3
 8002712:	4095      	lsls	r5, r2
 8002714:	40d9      	lsrs	r1, r3
 8002716:	430d      	orrs	r5, r1
 8002718:	4661      	mov	r1, ip
 800271a:	4091      	lsls	r1, r2
 800271c:	000a      	movs	r2, r1
 800271e:	1e51      	subs	r1, r2, #1
 8002720:	418a      	sbcs	r2, r1
 8002722:	4315      	orrs	r5, r2
 8002724:	9a02      	ldr	r2, [sp, #8]
 8002726:	40da      	lsrs	r2, r3
 8002728:	1aa4      	subs	r4, r4, r2
 800272a:	1b45      	subs	r5, r0, r5
 800272c:	42a8      	cmp	r0, r5
 800272e:	4180      	sbcs	r0, r0
 8002730:	4240      	negs	r0, r0
 8002732:	1a24      	subs	r4, r4, r0
 8002734:	0223      	lsls	r3, r4, #8
 8002736:	d400      	bmi.n	800273a <__aeabi_dsub+0xca>
 8002738:	e13d      	b.n	80029b6 <__aeabi_dsub+0x346>
 800273a:	0264      	lsls	r4, r4, #9
 800273c:	0a64      	lsrs	r4, r4, #9
 800273e:	2c00      	cmp	r4, #0
 8002740:	d100      	bne.n	8002744 <__aeabi_dsub+0xd4>
 8002742:	e147      	b.n	80029d4 <__aeabi_dsub+0x364>
 8002744:	0020      	movs	r0, r4
 8002746:	f000 fc05 	bl	8002f54 <__clzsi2>
 800274a:	0003      	movs	r3, r0
 800274c:	3b08      	subs	r3, #8
 800274e:	2120      	movs	r1, #32
 8002750:	0028      	movs	r0, r5
 8002752:	1aca      	subs	r2, r1, r3
 8002754:	40d0      	lsrs	r0, r2
 8002756:	409c      	lsls	r4, r3
 8002758:	0002      	movs	r2, r0
 800275a:	409d      	lsls	r5, r3
 800275c:	4322      	orrs	r2, r4
 800275e:	429f      	cmp	r7, r3
 8002760:	dd00      	ble.n	8002764 <__aeabi_dsub+0xf4>
 8002762:	e177      	b.n	8002a54 <__aeabi_dsub+0x3e4>
 8002764:	1bd8      	subs	r0, r3, r7
 8002766:	3001      	adds	r0, #1
 8002768:	1a09      	subs	r1, r1, r0
 800276a:	002c      	movs	r4, r5
 800276c:	408d      	lsls	r5, r1
 800276e:	40c4      	lsrs	r4, r0
 8002770:	1e6b      	subs	r3, r5, #1
 8002772:	419d      	sbcs	r5, r3
 8002774:	0013      	movs	r3, r2
 8002776:	40c2      	lsrs	r2, r0
 8002778:	408b      	lsls	r3, r1
 800277a:	4325      	orrs	r5, r4
 800277c:	2700      	movs	r7, #0
 800277e:	0014      	movs	r4, r2
 8002780:	431d      	orrs	r5, r3
 8002782:	076b      	lsls	r3, r5, #29
 8002784:	d009      	beq.n	800279a <__aeabi_dsub+0x12a>
 8002786:	230f      	movs	r3, #15
 8002788:	402b      	ands	r3, r5
 800278a:	2b04      	cmp	r3, #4
 800278c:	d005      	beq.n	800279a <__aeabi_dsub+0x12a>
 800278e:	1d2b      	adds	r3, r5, #4
 8002790:	42ab      	cmp	r3, r5
 8002792:	41ad      	sbcs	r5, r5
 8002794:	426d      	negs	r5, r5
 8002796:	1964      	adds	r4, r4, r5
 8002798:	001d      	movs	r5, r3
 800279a:	0223      	lsls	r3, r4, #8
 800279c:	d400      	bmi.n	80027a0 <__aeabi_dsub+0x130>
 800279e:	e140      	b.n	8002a22 <__aeabi_dsub+0x3b2>
 80027a0:	4a88      	ldr	r2, [pc, #544]	@ (80029c4 <__aeabi_dsub+0x354>)
 80027a2:	3701      	adds	r7, #1
 80027a4:	4297      	cmp	r7, r2
 80027a6:	d100      	bne.n	80027aa <__aeabi_dsub+0x13a>
 80027a8:	e101      	b.n	80029ae <__aeabi_dsub+0x33e>
 80027aa:	2601      	movs	r6, #1
 80027ac:	4643      	mov	r3, r8
 80027ae:	4986      	ldr	r1, [pc, #536]	@ (80029c8 <__aeabi_dsub+0x358>)
 80027b0:	08ed      	lsrs	r5, r5, #3
 80027b2:	4021      	ands	r1, r4
 80027b4:	074a      	lsls	r2, r1, #29
 80027b6:	432a      	orrs	r2, r5
 80027b8:	057c      	lsls	r4, r7, #21
 80027ba:	024d      	lsls	r5, r1, #9
 80027bc:	0b2d      	lsrs	r5, r5, #12
 80027be:	0d64      	lsrs	r4, r4, #21
 80027c0:	401e      	ands	r6, r3
 80027c2:	0524      	lsls	r4, r4, #20
 80027c4:	432c      	orrs	r4, r5
 80027c6:	07f6      	lsls	r6, r6, #31
 80027c8:	4334      	orrs	r4, r6
 80027ca:	0010      	movs	r0, r2
 80027cc:	0021      	movs	r1, r4
 80027ce:	b005      	add	sp, #20
 80027d0:	bcf0      	pop	{r4, r5, r6, r7}
 80027d2:	46bb      	mov	fp, r7
 80027d4:	46b2      	mov	sl, r6
 80027d6:	46a9      	mov	r9, r5
 80027d8:	46a0      	mov	r8, r4
 80027da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027dc:	2d00      	cmp	r5, #0
 80027de:	dc00      	bgt.n	80027e2 <__aeabi_dsub+0x172>
 80027e0:	e2d0      	b.n	8002d84 <__aeabi_dsub+0x714>
 80027e2:	4649      	mov	r1, r9
 80027e4:	2900      	cmp	r1, #0
 80027e6:	d000      	beq.n	80027ea <__aeabi_dsub+0x17a>
 80027e8:	e0d4      	b.n	8002994 <__aeabi_dsub+0x324>
 80027ea:	4661      	mov	r1, ip
 80027ec:	9b02      	ldr	r3, [sp, #8]
 80027ee:	4319      	orrs	r1, r3
 80027f0:	d100      	bne.n	80027f4 <__aeabi_dsub+0x184>
 80027f2:	e12b      	b.n	8002a4c <__aeabi_dsub+0x3dc>
 80027f4:	1e69      	subs	r1, r5, #1
 80027f6:	2d01      	cmp	r5, #1
 80027f8:	d100      	bne.n	80027fc <__aeabi_dsub+0x18c>
 80027fa:	e1d9      	b.n	8002bb0 <__aeabi_dsub+0x540>
 80027fc:	4295      	cmp	r5, r2
 80027fe:	d100      	bne.n	8002802 <__aeabi_dsub+0x192>
 8002800:	e10a      	b.n	8002a18 <__aeabi_dsub+0x3a8>
 8002802:	2501      	movs	r5, #1
 8002804:	2938      	cmp	r1, #56	@ 0x38
 8002806:	dc17      	bgt.n	8002838 <__aeabi_dsub+0x1c8>
 8002808:	468a      	mov	sl, r1
 800280a:	4653      	mov	r3, sl
 800280c:	2b1f      	cmp	r3, #31
 800280e:	dd00      	ble.n	8002812 <__aeabi_dsub+0x1a2>
 8002810:	e1e7      	b.n	8002be2 <__aeabi_dsub+0x572>
 8002812:	2220      	movs	r2, #32
 8002814:	1ad2      	subs	r2, r2, r3
 8002816:	9b02      	ldr	r3, [sp, #8]
 8002818:	4661      	mov	r1, ip
 800281a:	4093      	lsls	r3, r2
 800281c:	001d      	movs	r5, r3
 800281e:	4653      	mov	r3, sl
 8002820:	40d9      	lsrs	r1, r3
 8002822:	4663      	mov	r3, ip
 8002824:	4093      	lsls	r3, r2
 8002826:	001a      	movs	r2, r3
 8002828:	430d      	orrs	r5, r1
 800282a:	1e51      	subs	r1, r2, #1
 800282c:	418a      	sbcs	r2, r1
 800282e:	4653      	mov	r3, sl
 8002830:	4315      	orrs	r5, r2
 8002832:	9a02      	ldr	r2, [sp, #8]
 8002834:	40da      	lsrs	r2, r3
 8002836:	18a4      	adds	r4, r4, r2
 8002838:	182d      	adds	r5, r5, r0
 800283a:	4285      	cmp	r5, r0
 800283c:	4180      	sbcs	r0, r0
 800283e:	4240      	negs	r0, r0
 8002840:	1824      	adds	r4, r4, r0
 8002842:	0223      	lsls	r3, r4, #8
 8002844:	d400      	bmi.n	8002848 <__aeabi_dsub+0x1d8>
 8002846:	e0b6      	b.n	80029b6 <__aeabi_dsub+0x346>
 8002848:	4b5e      	ldr	r3, [pc, #376]	@ (80029c4 <__aeabi_dsub+0x354>)
 800284a:	3701      	adds	r7, #1
 800284c:	429f      	cmp	r7, r3
 800284e:	d100      	bne.n	8002852 <__aeabi_dsub+0x1e2>
 8002850:	e0ad      	b.n	80029ae <__aeabi_dsub+0x33e>
 8002852:	2101      	movs	r1, #1
 8002854:	4b5c      	ldr	r3, [pc, #368]	@ (80029c8 <__aeabi_dsub+0x358>)
 8002856:	086a      	lsrs	r2, r5, #1
 8002858:	401c      	ands	r4, r3
 800285a:	4029      	ands	r1, r5
 800285c:	430a      	orrs	r2, r1
 800285e:	07e5      	lsls	r5, r4, #31
 8002860:	4315      	orrs	r5, r2
 8002862:	0864      	lsrs	r4, r4, #1
 8002864:	e78d      	b.n	8002782 <__aeabi_dsub+0x112>
 8002866:	4a59      	ldr	r2, [pc, #356]	@ (80029cc <__aeabi_dsub+0x35c>)
 8002868:	9b02      	ldr	r3, [sp, #8]
 800286a:	4692      	mov	sl, r2
 800286c:	4662      	mov	r2, ip
 800286e:	44ba      	add	sl, r7
 8002870:	431a      	orrs	r2, r3
 8002872:	d02c      	beq.n	80028ce <__aeabi_dsub+0x25e>
 8002874:	428e      	cmp	r6, r1
 8002876:	d02e      	beq.n	80028d6 <__aeabi_dsub+0x266>
 8002878:	4652      	mov	r2, sl
 800287a:	2a00      	cmp	r2, #0
 800287c:	d060      	beq.n	8002940 <__aeabi_dsub+0x2d0>
 800287e:	2f00      	cmp	r7, #0
 8002880:	d100      	bne.n	8002884 <__aeabi_dsub+0x214>
 8002882:	e0db      	b.n	8002a3c <__aeabi_dsub+0x3cc>
 8002884:	4663      	mov	r3, ip
 8002886:	000e      	movs	r6, r1
 8002888:	9c02      	ldr	r4, [sp, #8]
 800288a:	08d8      	lsrs	r0, r3, #3
 800288c:	0762      	lsls	r2, r4, #29
 800288e:	4302      	orrs	r2, r0
 8002890:	08e4      	lsrs	r4, r4, #3
 8002892:	0013      	movs	r3, r2
 8002894:	4323      	orrs	r3, r4
 8002896:	d100      	bne.n	800289a <__aeabi_dsub+0x22a>
 8002898:	e254      	b.n	8002d44 <__aeabi_dsub+0x6d4>
 800289a:	2580      	movs	r5, #128	@ 0x80
 800289c:	032d      	lsls	r5, r5, #12
 800289e:	4325      	orrs	r5, r4
 80028a0:	032d      	lsls	r5, r5, #12
 80028a2:	4c48      	ldr	r4, [pc, #288]	@ (80029c4 <__aeabi_dsub+0x354>)
 80028a4:	0b2d      	lsrs	r5, r5, #12
 80028a6:	e78c      	b.n	80027c2 <__aeabi_dsub+0x152>
 80028a8:	4661      	mov	r1, ip
 80028aa:	9b02      	ldr	r3, [sp, #8]
 80028ac:	4319      	orrs	r1, r3
 80028ae:	d100      	bne.n	80028b2 <__aeabi_dsub+0x242>
 80028b0:	e0cc      	b.n	8002a4c <__aeabi_dsub+0x3dc>
 80028b2:	0029      	movs	r1, r5
 80028b4:	3901      	subs	r1, #1
 80028b6:	2d01      	cmp	r5, #1
 80028b8:	d100      	bne.n	80028bc <__aeabi_dsub+0x24c>
 80028ba:	e188      	b.n	8002bce <__aeabi_dsub+0x55e>
 80028bc:	4295      	cmp	r5, r2
 80028be:	d100      	bne.n	80028c2 <__aeabi_dsub+0x252>
 80028c0:	e0aa      	b.n	8002a18 <__aeabi_dsub+0x3a8>
 80028c2:	2501      	movs	r5, #1
 80028c4:	2938      	cmp	r1, #56	@ 0x38
 80028c6:	dd00      	ble.n	80028ca <__aeabi_dsub+0x25a>
 80028c8:	e72f      	b.n	800272a <__aeabi_dsub+0xba>
 80028ca:	468a      	mov	sl, r1
 80028cc:	e718      	b.n	8002700 <__aeabi_dsub+0x90>
 80028ce:	2201      	movs	r2, #1
 80028d0:	4051      	eors	r1, r2
 80028d2:	428e      	cmp	r6, r1
 80028d4:	d1d0      	bne.n	8002878 <__aeabi_dsub+0x208>
 80028d6:	4653      	mov	r3, sl
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d100      	bne.n	80028de <__aeabi_dsub+0x26e>
 80028dc:	e0be      	b.n	8002a5c <__aeabi_dsub+0x3ec>
 80028de:	2f00      	cmp	r7, #0
 80028e0:	d000      	beq.n	80028e4 <__aeabi_dsub+0x274>
 80028e2:	e138      	b.n	8002b56 <__aeabi_dsub+0x4e6>
 80028e4:	46ca      	mov	sl, r9
 80028e6:	0022      	movs	r2, r4
 80028e8:	4302      	orrs	r2, r0
 80028ea:	d100      	bne.n	80028ee <__aeabi_dsub+0x27e>
 80028ec:	e1e2      	b.n	8002cb4 <__aeabi_dsub+0x644>
 80028ee:	4653      	mov	r3, sl
 80028f0:	1e59      	subs	r1, r3, #1
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d100      	bne.n	80028f8 <__aeabi_dsub+0x288>
 80028f6:	e20d      	b.n	8002d14 <__aeabi_dsub+0x6a4>
 80028f8:	4a32      	ldr	r2, [pc, #200]	@ (80029c4 <__aeabi_dsub+0x354>)
 80028fa:	4592      	cmp	sl, r2
 80028fc:	d100      	bne.n	8002900 <__aeabi_dsub+0x290>
 80028fe:	e1d2      	b.n	8002ca6 <__aeabi_dsub+0x636>
 8002900:	2701      	movs	r7, #1
 8002902:	2938      	cmp	r1, #56	@ 0x38
 8002904:	dc13      	bgt.n	800292e <__aeabi_dsub+0x2be>
 8002906:	291f      	cmp	r1, #31
 8002908:	dd00      	ble.n	800290c <__aeabi_dsub+0x29c>
 800290a:	e1ee      	b.n	8002cea <__aeabi_dsub+0x67a>
 800290c:	2220      	movs	r2, #32
 800290e:	9b02      	ldr	r3, [sp, #8]
 8002910:	1a52      	subs	r2, r2, r1
 8002912:	0025      	movs	r5, r4
 8002914:	0007      	movs	r7, r0
 8002916:	469a      	mov	sl, r3
 8002918:	40cc      	lsrs	r4, r1
 800291a:	4090      	lsls	r0, r2
 800291c:	4095      	lsls	r5, r2
 800291e:	40cf      	lsrs	r7, r1
 8002920:	44a2      	add	sl, r4
 8002922:	1e42      	subs	r2, r0, #1
 8002924:	4190      	sbcs	r0, r2
 8002926:	4653      	mov	r3, sl
 8002928:	432f      	orrs	r7, r5
 800292a:	4307      	orrs	r7, r0
 800292c:	9302      	str	r3, [sp, #8]
 800292e:	003d      	movs	r5, r7
 8002930:	4465      	add	r5, ip
 8002932:	4565      	cmp	r5, ip
 8002934:	4192      	sbcs	r2, r2
 8002936:	9b02      	ldr	r3, [sp, #8]
 8002938:	4252      	negs	r2, r2
 800293a:	464f      	mov	r7, r9
 800293c:	18d4      	adds	r4, r2, r3
 800293e:	e780      	b.n	8002842 <__aeabi_dsub+0x1d2>
 8002940:	4a23      	ldr	r2, [pc, #140]	@ (80029d0 <__aeabi_dsub+0x360>)
 8002942:	1c7d      	adds	r5, r7, #1
 8002944:	4215      	tst	r5, r2
 8002946:	d000      	beq.n	800294a <__aeabi_dsub+0x2da>
 8002948:	e0aa      	b.n	8002aa0 <__aeabi_dsub+0x430>
 800294a:	4662      	mov	r2, ip
 800294c:	0025      	movs	r5, r4
 800294e:	9b02      	ldr	r3, [sp, #8]
 8002950:	4305      	orrs	r5, r0
 8002952:	431a      	orrs	r2, r3
 8002954:	2f00      	cmp	r7, #0
 8002956:	d000      	beq.n	800295a <__aeabi_dsub+0x2ea>
 8002958:	e0f5      	b.n	8002b46 <__aeabi_dsub+0x4d6>
 800295a:	2d00      	cmp	r5, #0
 800295c:	d100      	bne.n	8002960 <__aeabi_dsub+0x2f0>
 800295e:	e16b      	b.n	8002c38 <__aeabi_dsub+0x5c8>
 8002960:	2a00      	cmp	r2, #0
 8002962:	d100      	bne.n	8002966 <__aeabi_dsub+0x2f6>
 8002964:	e152      	b.n	8002c0c <__aeabi_dsub+0x59c>
 8002966:	4663      	mov	r3, ip
 8002968:	1ac5      	subs	r5, r0, r3
 800296a:	9b02      	ldr	r3, [sp, #8]
 800296c:	1ae2      	subs	r2, r4, r3
 800296e:	42a8      	cmp	r0, r5
 8002970:	419b      	sbcs	r3, r3
 8002972:	425b      	negs	r3, r3
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	021a      	lsls	r2, r3, #8
 8002978:	d400      	bmi.n	800297c <__aeabi_dsub+0x30c>
 800297a:	e1d5      	b.n	8002d28 <__aeabi_dsub+0x6b8>
 800297c:	4663      	mov	r3, ip
 800297e:	1a1d      	subs	r5, r3, r0
 8002980:	45ac      	cmp	ip, r5
 8002982:	4192      	sbcs	r2, r2
 8002984:	2601      	movs	r6, #1
 8002986:	9b02      	ldr	r3, [sp, #8]
 8002988:	4252      	negs	r2, r2
 800298a:	1b1c      	subs	r4, r3, r4
 800298c:	4688      	mov	r8, r1
 800298e:	1aa4      	subs	r4, r4, r2
 8002990:	400e      	ands	r6, r1
 8002992:	e6f6      	b.n	8002782 <__aeabi_dsub+0x112>
 8002994:	4297      	cmp	r7, r2
 8002996:	d03f      	beq.n	8002a18 <__aeabi_dsub+0x3a8>
 8002998:	4652      	mov	r2, sl
 800299a:	2501      	movs	r5, #1
 800299c:	2a38      	cmp	r2, #56	@ 0x38
 800299e:	dd00      	ble.n	80029a2 <__aeabi_dsub+0x332>
 80029a0:	e74a      	b.n	8002838 <__aeabi_dsub+0x1c8>
 80029a2:	2280      	movs	r2, #128	@ 0x80
 80029a4:	9b02      	ldr	r3, [sp, #8]
 80029a6:	0412      	lsls	r2, r2, #16
 80029a8:	4313      	orrs	r3, r2
 80029aa:	9302      	str	r3, [sp, #8]
 80029ac:	e72d      	b.n	800280a <__aeabi_dsub+0x19a>
 80029ae:	003c      	movs	r4, r7
 80029b0:	2500      	movs	r5, #0
 80029b2:	2200      	movs	r2, #0
 80029b4:	e705      	b.n	80027c2 <__aeabi_dsub+0x152>
 80029b6:	2307      	movs	r3, #7
 80029b8:	402b      	ands	r3, r5
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d000      	beq.n	80029c0 <__aeabi_dsub+0x350>
 80029be:	e6e2      	b.n	8002786 <__aeabi_dsub+0x116>
 80029c0:	e06b      	b.n	8002a9a <__aeabi_dsub+0x42a>
 80029c2:	46c0      	nop			@ (mov r8, r8)
 80029c4:	000007ff 	.word	0x000007ff
 80029c8:	ff7fffff 	.word	0xff7fffff
 80029cc:	fffff801 	.word	0xfffff801
 80029d0:	000007fe 	.word	0x000007fe
 80029d4:	0028      	movs	r0, r5
 80029d6:	f000 fabd 	bl	8002f54 <__clzsi2>
 80029da:	0003      	movs	r3, r0
 80029dc:	3318      	adds	r3, #24
 80029de:	2b1f      	cmp	r3, #31
 80029e0:	dc00      	bgt.n	80029e4 <__aeabi_dsub+0x374>
 80029e2:	e6b4      	b.n	800274e <__aeabi_dsub+0xde>
 80029e4:	002a      	movs	r2, r5
 80029e6:	3808      	subs	r0, #8
 80029e8:	4082      	lsls	r2, r0
 80029ea:	429f      	cmp	r7, r3
 80029ec:	dd00      	ble.n	80029f0 <__aeabi_dsub+0x380>
 80029ee:	e0b9      	b.n	8002b64 <__aeabi_dsub+0x4f4>
 80029f0:	1bdb      	subs	r3, r3, r7
 80029f2:	1c58      	adds	r0, r3, #1
 80029f4:	281f      	cmp	r0, #31
 80029f6:	dc00      	bgt.n	80029fa <__aeabi_dsub+0x38a>
 80029f8:	e1a0      	b.n	8002d3c <__aeabi_dsub+0x6cc>
 80029fa:	0015      	movs	r5, r2
 80029fc:	3b1f      	subs	r3, #31
 80029fe:	40dd      	lsrs	r5, r3
 8002a00:	2820      	cmp	r0, #32
 8002a02:	d005      	beq.n	8002a10 <__aeabi_dsub+0x3a0>
 8002a04:	2340      	movs	r3, #64	@ 0x40
 8002a06:	1a1b      	subs	r3, r3, r0
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	1e53      	subs	r3, r2, #1
 8002a0c:	419a      	sbcs	r2, r3
 8002a0e:	4315      	orrs	r5, r2
 8002a10:	2307      	movs	r3, #7
 8002a12:	2700      	movs	r7, #0
 8002a14:	402b      	ands	r3, r5
 8002a16:	e7d0      	b.n	80029ba <__aeabi_dsub+0x34a>
 8002a18:	08c0      	lsrs	r0, r0, #3
 8002a1a:	0762      	lsls	r2, r4, #29
 8002a1c:	4302      	orrs	r2, r0
 8002a1e:	08e4      	lsrs	r4, r4, #3
 8002a20:	e737      	b.n	8002892 <__aeabi_dsub+0x222>
 8002a22:	08ea      	lsrs	r2, r5, #3
 8002a24:	0763      	lsls	r3, r4, #29
 8002a26:	431a      	orrs	r2, r3
 8002a28:	4bd3      	ldr	r3, [pc, #844]	@ (8002d78 <__aeabi_dsub+0x708>)
 8002a2a:	08e4      	lsrs	r4, r4, #3
 8002a2c:	429f      	cmp	r7, r3
 8002a2e:	d100      	bne.n	8002a32 <__aeabi_dsub+0x3c2>
 8002a30:	e72f      	b.n	8002892 <__aeabi_dsub+0x222>
 8002a32:	0324      	lsls	r4, r4, #12
 8002a34:	0b25      	lsrs	r5, r4, #12
 8002a36:	057c      	lsls	r4, r7, #21
 8002a38:	0d64      	lsrs	r4, r4, #21
 8002a3a:	e6c2      	b.n	80027c2 <__aeabi_dsub+0x152>
 8002a3c:	46ca      	mov	sl, r9
 8002a3e:	0022      	movs	r2, r4
 8002a40:	4302      	orrs	r2, r0
 8002a42:	d158      	bne.n	8002af6 <__aeabi_dsub+0x486>
 8002a44:	4663      	mov	r3, ip
 8002a46:	000e      	movs	r6, r1
 8002a48:	9c02      	ldr	r4, [sp, #8]
 8002a4a:	9303      	str	r3, [sp, #12]
 8002a4c:	9b03      	ldr	r3, [sp, #12]
 8002a4e:	4657      	mov	r7, sl
 8002a50:	08da      	lsrs	r2, r3, #3
 8002a52:	e7e7      	b.n	8002a24 <__aeabi_dsub+0x3b4>
 8002a54:	4cc9      	ldr	r4, [pc, #804]	@ (8002d7c <__aeabi_dsub+0x70c>)
 8002a56:	1aff      	subs	r7, r7, r3
 8002a58:	4014      	ands	r4, r2
 8002a5a:	e692      	b.n	8002782 <__aeabi_dsub+0x112>
 8002a5c:	4dc8      	ldr	r5, [pc, #800]	@ (8002d80 <__aeabi_dsub+0x710>)
 8002a5e:	1c7a      	adds	r2, r7, #1
 8002a60:	422a      	tst	r2, r5
 8002a62:	d000      	beq.n	8002a66 <__aeabi_dsub+0x3f6>
 8002a64:	e084      	b.n	8002b70 <__aeabi_dsub+0x500>
 8002a66:	0022      	movs	r2, r4
 8002a68:	4302      	orrs	r2, r0
 8002a6a:	2f00      	cmp	r7, #0
 8002a6c:	d000      	beq.n	8002a70 <__aeabi_dsub+0x400>
 8002a6e:	e0ef      	b.n	8002c50 <__aeabi_dsub+0x5e0>
 8002a70:	2a00      	cmp	r2, #0
 8002a72:	d100      	bne.n	8002a76 <__aeabi_dsub+0x406>
 8002a74:	e0e5      	b.n	8002c42 <__aeabi_dsub+0x5d2>
 8002a76:	4662      	mov	r2, ip
 8002a78:	9902      	ldr	r1, [sp, #8]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	d100      	bne.n	8002a80 <__aeabi_dsub+0x410>
 8002a7e:	e0c5      	b.n	8002c0c <__aeabi_dsub+0x59c>
 8002a80:	4663      	mov	r3, ip
 8002a82:	18c5      	adds	r5, r0, r3
 8002a84:	468c      	mov	ip, r1
 8002a86:	4285      	cmp	r5, r0
 8002a88:	4180      	sbcs	r0, r0
 8002a8a:	4464      	add	r4, ip
 8002a8c:	4240      	negs	r0, r0
 8002a8e:	1824      	adds	r4, r4, r0
 8002a90:	0223      	lsls	r3, r4, #8
 8002a92:	d502      	bpl.n	8002a9a <__aeabi_dsub+0x42a>
 8002a94:	4bb9      	ldr	r3, [pc, #740]	@ (8002d7c <__aeabi_dsub+0x70c>)
 8002a96:	3701      	adds	r7, #1
 8002a98:	401c      	ands	r4, r3
 8002a9a:	46ba      	mov	sl, r7
 8002a9c:	9503      	str	r5, [sp, #12]
 8002a9e:	e7d5      	b.n	8002a4c <__aeabi_dsub+0x3dc>
 8002aa0:	4662      	mov	r2, ip
 8002aa2:	1a85      	subs	r5, r0, r2
 8002aa4:	42a8      	cmp	r0, r5
 8002aa6:	4192      	sbcs	r2, r2
 8002aa8:	4252      	negs	r2, r2
 8002aaa:	4691      	mov	r9, r2
 8002aac:	9b02      	ldr	r3, [sp, #8]
 8002aae:	1ae3      	subs	r3, r4, r3
 8002ab0:	001a      	movs	r2, r3
 8002ab2:	464b      	mov	r3, r9
 8002ab4:	1ad2      	subs	r2, r2, r3
 8002ab6:	0013      	movs	r3, r2
 8002ab8:	4691      	mov	r9, r2
 8002aba:	021a      	lsls	r2, r3, #8
 8002abc:	d46c      	bmi.n	8002b98 <__aeabi_dsub+0x528>
 8002abe:	464a      	mov	r2, r9
 8002ac0:	464c      	mov	r4, r9
 8002ac2:	432a      	orrs	r2, r5
 8002ac4:	d000      	beq.n	8002ac8 <__aeabi_dsub+0x458>
 8002ac6:	e63a      	b.n	800273e <__aeabi_dsub+0xce>
 8002ac8:	2600      	movs	r6, #0
 8002aca:	2400      	movs	r4, #0
 8002acc:	2500      	movs	r5, #0
 8002ace:	e678      	b.n	80027c2 <__aeabi_dsub+0x152>
 8002ad0:	9902      	ldr	r1, [sp, #8]
 8002ad2:	4653      	mov	r3, sl
 8002ad4:	000d      	movs	r5, r1
 8002ad6:	3a20      	subs	r2, #32
 8002ad8:	40d5      	lsrs	r5, r2
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	d006      	beq.n	8002aec <__aeabi_dsub+0x47c>
 8002ade:	2240      	movs	r2, #64	@ 0x40
 8002ae0:	1ad2      	subs	r2, r2, r3
 8002ae2:	000b      	movs	r3, r1
 8002ae4:	4093      	lsls	r3, r2
 8002ae6:	4662      	mov	r2, ip
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	4693      	mov	fp, r2
 8002aec:	465b      	mov	r3, fp
 8002aee:	1e5a      	subs	r2, r3, #1
 8002af0:	4193      	sbcs	r3, r2
 8002af2:	431d      	orrs	r5, r3
 8002af4:	e619      	b.n	800272a <__aeabi_dsub+0xba>
 8002af6:	4653      	mov	r3, sl
 8002af8:	1e5a      	subs	r2, r3, #1
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d100      	bne.n	8002b00 <__aeabi_dsub+0x490>
 8002afe:	e0c6      	b.n	8002c8e <__aeabi_dsub+0x61e>
 8002b00:	4e9d      	ldr	r6, [pc, #628]	@ (8002d78 <__aeabi_dsub+0x708>)
 8002b02:	45b2      	cmp	sl, r6
 8002b04:	d100      	bne.n	8002b08 <__aeabi_dsub+0x498>
 8002b06:	e6bd      	b.n	8002884 <__aeabi_dsub+0x214>
 8002b08:	4688      	mov	r8, r1
 8002b0a:	000e      	movs	r6, r1
 8002b0c:	2501      	movs	r5, #1
 8002b0e:	2a38      	cmp	r2, #56	@ 0x38
 8002b10:	dc10      	bgt.n	8002b34 <__aeabi_dsub+0x4c4>
 8002b12:	2a1f      	cmp	r2, #31
 8002b14:	dc7f      	bgt.n	8002c16 <__aeabi_dsub+0x5a6>
 8002b16:	2120      	movs	r1, #32
 8002b18:	0025      	movs	r5, r4
 8002b1a:	1a89      	subs	r1, r1, r2
 8002b1c:	0007      	movs	r7, r0
 8002b1e:	4088      	lsls	r0, r1
 8002b20:	408d      	lsls	r5, r1
 8002b22:	40d7      	lsrs	r7, r2
 8002b24:	40d4      	lsrs	r4, r2
 8002b26:	1e41      	subs	r1, r0, #1
 8002b28:	4188      	sbcs	r0, r1
 8002b2a:	9b02      	ldr	r3, [sp, #8]
 8002b2c:	433d      	orrs	r5, r7
 8002b2e:	1b1b      	subs	r3, r3, r4
 8002b30:	4305      	orrs	r5, r0
 8002b32:	9302      	str	r3, [sp, #8]
 8002b34:	4662      	mov	r2, ip
 8002b36:	1b55      	subs	r5, r2, r5
 8002b38:	45ac      	cmp	ip, r5
 8002b3a:	4192      	sbcs	r2, r2
 8002b3c:	9b02      	ldr	r3, [sp, #8]
 8002b3e:	4252      	negs	r2, r2
 8002b40:	464f      	mov	r7, r9
 8002b42:	1a9c      	subs	r4, r3, r2
 8002b44:	e5f6      	b.n	8002734 <__aeabi_dsub+0xc4>
 8002b46:	2d00      	cmp	r5, #0
 8002b48:	d000      	beq.n	8002b4c <__aeabi_dsub+0x4dc>
 8002b4a:	e0b7      	b.n	8002cbc <__aeabi_dsub+0x64c>
 8002b4c:	2a00      	cmp	r2, #0
 8002b4e:	d100      	bne.n	8002b52 <__aeabi_dsub+0x4e2>
 8002b50:	e0f0      	b.n	8002d34 <__aeabi_dsub+0x6c4>
 8002b52:	2601      	movs	r6, #1
 8002b54:	400e      	ands	r6, r1
 8002b56:	4663      	mov	r3, ip
 8002b58:	9802      	ldr	r0, [sp, #8]
 8002b5a:	08d9      	lsrs	r1, r3, #3
 8002b5c:	0742      	lsls	r2, r0, #29
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	08c4      	lsrs	r4, r0, #3
 8002b62:	e696      	b.n	8002892 <__aeabi_dsub+0x222>
 8002b64:	4c85      	ldr	r4, [pc, #532]	@ (8002d7c <__aeabi_dsub+0x70c>)
 8002b66:	1aff      	subs	r7, r7, r3
 8002b68:	4014      	ands	r4, r2
 8002b6a:	0762      	lsls	r2, r4, #29
 8002b6c:	08e4      	lsrs	r4, r4, #3
 8002b6e:	e760      	b.n	8002a32 <__aeabi_dsub+0x3c2>
 8002b70:	4981      	ldr	r1, [pc, #516]	@ (8002d78 <__aeabi_dsub+0x708>)
 8002b72:	428a      	cmp	r2, r1
 8002b74:	d100      	bne.n	8002b78 <__aeabi_dsub+0x508>
 8002b76:	e0c9      	b.n	8002d0c <__aeabi_dsub+0x69c>
 8002b78:	4663      	mov	r3, ip
 8002b7a:	18c1      	adds	r1, r0, r3
 8002b7c:	4281      	cmp	r1, r0
 8002b7e:	4180      	sbcs	r0, r0
 8002b80:	9b02      	ldr	r3, [sp, #8]
 8002b82:	4240      	negs	r0, r0
 8002b84:	18e3      	adds	r3, r4, r3
 8002b86:	181b      	adds	r3, r3, r0
 8002b88:	07dd      	lsls	r5, r3, #31
 8002b8a:	085c      	lsrs	r4, r3, #1
 8002b8c:	2307      	movs	r3, #7
 8002b8e:	0849      	lsrs	r1, r1, #1
 8002b90:	430d      	orrs	r5, r1
 8002b92:	0017      	movs	r7, r2
 8002b94:	402b      	ands	r3, r5
 8002b96:	e710      	b.n	80029ba <__aeabi_dsub+0x34a>
 8002b98:	4663      	mov	r3, ip
 8002b9a:	1a1d      	subs	r5, r3, r0
 8002b9c:	45ac      	cmp	ip, r5
 8002b9e:	4192      	sbcs	r2, r2
 8002ba0:	2601      	movs	r6, #1
 8002ba2:	9b02      	ldr	r3, [sp, #8]
 8002ba4:	4252      	negs	r2, r2
 8002ba6:	1b1c      	subs	r4, r3, r4
 8002ba8:	4688      	mov	r8, r1
 8002baa:	1aa4      	subs	r4, r4, r2
 8002bac:	400e      	ands	r6, r1
 8002bae:	e5c6      	b.n	800273e <__aeabi_dsub+0xce>
 8002bb0:	4663      	mov	r3, ip
 8002bb2:	18c5      	adds	r5, r0, r3
 8002bb4:	9b02      	ldr	r3, [sp, #8]
 8002bb6:	4285      	cmp	r5, r0
 8002bb8:	4180      	sbcs	r0, r0
 8002bba:	469c      	mov	ip, r3
 8002bbc:	4240      	negs	r0, r0
 8002bbe:	4464      	add	r4, ip
 8002bc0:	1824      	adds	r4, r4, r0
 8002bc2:	2701      	movs	r7, #1
 8002bc4:	0223      	lsls	r3, r4, #8
 8002bc6:	d400      	bmi.n	8002bca <__aeabi_dsub+0x55a>
 8002bc8:	e6f5      	b.n	80029b6 <__aeabi_dsub+0x346>
 8002bca:	2702      	movs	r7, #2
 8002bcc:	e641      	b.n	8002852 <__aeabi_dsub+0x1e2>
 8002bce:	4663      	mov	r3, ip
 8002bd0:	1ac5      	subs	r5, r0, r3
 8002bd2:	42a8      	cmp	r0, r5
 8002bd4:	4180      	sbcs	r0, r0
 8002bd6:	9b02      	ldr	r3, [sp, #8]
 8002bd8:	4240      	negs	r0, r0
 8002bda:	1ae4      	subs	r4, r4, r3
 8002bdc:	2701      	movs	r7, #1
 8002bde:	1a24      	subs	r4, r4, r0
 8002be0:	e5a8      	b.n	8002734 <__aeabi_dsub+0xc4>
 8002be2:	9d02      	ldr	r5, [sp, #8]
 8002be4:	4652      	mov	r2, sl
 8002be6:	002b      	movs	r3, r5
 8002be8:	3a20      	subs	r2, #32
 8002bea:	40d3      	lsrs	r3, r2
 8002bec:	0019      	movs	r1, r3
 8002bee:	4653      	mov	r3, sl
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d006      	beq.n	8002c02 <__aeabi_dsub+0x592>
 8002bf4:	2240      	movs	r2, #64	@ 0x40
 8002bf6:	1ad2      	subs	r2, r2, r3
 8002bf8:	002b      	movs	r3, r5
 8002bfa:	4093      	lsls	r3, r2
 8002bfc:	4662      	mov	r2, ip
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	4693      	mov	fp, r2
 8002c02:	465d      	mov	r5, fp
 8002c04:	1e6b      	subs	r3, r5, #1
 8002c06:	419d      	sbcs	r5, r3
 8002c08:	430d      	orrs	r5, r1
 8002c0a:	e615      	b.n	8002838 <__aeabi_dsub+0x1c8>
 8002c0c:	0762      	lsls	r2, r4, #29
 8002c0e:	08c0      	lsrs	r0, r0, #3
 8002c10:	4302      	orrs	r2, r0
 8002c12:	08e4      	lsrs	r4, r4, #3
 8002c14:	e70d      	b.n	8002a32 <__aeabi_dsub+0x3c2>
 8002c16:	0011      	movs	r1, r2
 8002c18:	0027      	movs	r7, r4
 8002c1a:	3920      	subs	r1, #32
 8002c1c:	40cf      	lsrs	r7, r1
 8002c1e:	2a20      	cmp	r2, #32
 8002c20:	d005      	beq.n	8002c2e <__aeabi_dsub+0x5be>
 8002c22:	2140      	movs	r1, #64	@ 0x40
 8002c24:	1a8a      	subs	r2, r1, r2
 8002c26:	4094      	lsls	r4, r2
 8002c28:	0025      	movs	r5, r4
 8002c2a:	4305      	orrs	r5, r0
 8002c2c:	9503      	str	r5, [sp, #12]
 8002c2e:	9d03      	ldr	r5, [sp, #12]
 8002c30:	1e6a      	subs	r2, r5, #1
 8002c32:	4195      	sbcs	r5, r2
 8002c34:	433d      	orrs	r5, r7
 8002c36:	e77d      	b.n	8002b34 <__aeabi_dsub+0x4c4>
 8002c38:	2a00      	cmp	r2, #0
 8002c3a:	d100      	bne.n	8002c3e <__aeabi_dsub+0x5ce>
 8002c3c:	e744      	b.n	8002ac8 <__aeabi_dsub+0x458>
 8002c3e:	2601      	movs	r6, #1
 8002c40:	400e      	ands	r6, r1
 8002c42:	4663      	mov	r3, ip
 8002c44:	08d9      	lsrs	r1, r3, #3
 8002c46:	9b02      	ldr	r3, [sp, #8]
 8002c48:	075a      	lsls	r2, r3, #29
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	08dc      	lsrs	r4, r3, #3
 8002c4e:	e6f0      	b.n	8002a32 <__aeabi_dsub+0x3c2>
 8002c50:	2a00      	cmp	r2, #0
 8002c52:	d028      	beq.n	8002ca6 <__aeabi_dsub+0x636>
 8002c54:	4662      	mov	r2, ip
 8002c56:	9f02      	ldr	r7, [sp, #8]
 8002c58:	08c0      	lsrs	r0, r0, #3
 8002c5a:	433a      	orrs	r2, r7
 8002c5c:	d100      	bne.n	8002c60 <__aeabi_dsub+0x5f0>
 8002c5e:	e6dc      	b.n	8002a1a <__aeabi_dsub+0x3aa>
 8002c60:	0762      	lsls	r2, r4, #29
 8002c62:	4310      	orrs	r0, r2
 8002c64:	2280      	movs	r2, #128	@ 0x80
 8002c66:	08e4      	lsrs	r4, r4, #3
 8002c68:	0312      	lsls	r2, r2, #12
 8002c6a:	4214      	tst	r4, r2
 8002c6c:	d009      	beq.n	8002c82 <__aeabi_dsub+0x612>
 8002c6e:	08fd      	lsrs	r5, r7, #3
 8002c70:	4215      	tst	r5, r2
 8002c72:	d106      	bne.n	8002c82 <__aeabi_dsub+0x612>
 8002c74:	4663      	mov	r3, ip
 8002c76:	2601      	movs	r6, #1
 8002c78:	002c      	movs	r4, r5
 8002c7a:	08d8      	lsrs	r0, r3, #3
 8002c7c:	077b      	lsls	r3, r7, #29
 8002c7e:	4318      	orrs	r0, r3
 8002c80:	400e      	ands	r6, r1
 8002c82:	0f42      	lsrs	r2, r0, #29
 8002c84:	00c0      	lsls	r0, r0, #3
 8002c86:	08c0      	lsrs	r0, r0, #3
 8002c88:	0752      	lsls	r2, r2, #29
 8002c8a:	4302      	orrs	r2, r0
 8002c8c:	e601      	b.n	8002892 <__aeabi_dsub+0x222>
 8002c8e:	4663      	mov	r3, ip
 8002c90:	1a1d      	subs	r5, r3, r0
 8002c92:	45ac      	cmp	ip, r5
 8002c94:	4192      	sbcs	r2, r2
 8002c96:	9b02      	ldr	r3, [sp, #8]
 8002c98:	4252      	negs	r2, r2
 8002c9a:	1b1c      	subs	r4, r3, r4
 8002c9c:	000e      	movs	r6, r1
 8002c9e:	4688      	mov	r8, r1
 8002ca0:	2701      	movs	r7, #1
 8002ca2:	1aa4      	subs	r4, r4, r2
 8002ca4:	e546      	b.n	8002734 <__aeabi_dsub+0xc4>
 8002ca6:	4663      	mov	r3, ip
 8002ca8:	08d9      	lsrs	r1, r3, #3
 8002caa:	9b02      	ldr	r3, [sp, #8]
 8002cac:	075a      	lsls	r2, r3, #29
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	08dc      	lsrs	r4, r3, #3
 8002cb2:	e5ee      	b.n	8002892 <__aeabi_dsub+0x222>
 8002cb4:	4663      	mov	r3, ip
 8002cb6:	9c02      	ldr	r4, [sp, #8]
 8002cb8:	9303      	str	r3, [sp, #12]
 8002cba:	e6c7      	b.n	8002a4c <__aeabi_dsub+0x3dc>
 8002cbc:	08c0      	lsrs	r0, r0, #3
 8002cbe:	2a00      	cmp	r2, #0
 8002cc0:	d100      	bne.n	8002cc4 <__aeabi_dsub+0x654>
 8002cc2:	e6aa      	b.n	8002a1a <__aeabi_dsub+0x3aa>
 8002cc4:	0762      	lsls	r2, r4, #29
 8002cc6:	4310      	orrs	r0, r2
 8002cc8:	2280      	movs	r2, #128	@ 0x80
 8002cca:	08e4      	lsrs	r4, r4, #3
 8002ccc:	0312      	lsls	r2, r2, #12
 8002cce:	4214      	tst	r4, r2
 8002cd0:	d0d7      	beq.n	8002c82 <__aeabi_dsub+0x612>
 8002cd2:	9f02      	ldr	r7, [sp, #8]
 8002cd4:	08fd      	lsrs	r5, r7, #3
 8002cd6:	4215      	tst	r5, r2
 8002cd8:	d1d3      	bne.n	8002c82 <__aeabi_dsub+0x612>
 8002cda:	4663      	mov	r3, ip
 8002cdc:	2601      	movs	r6, #1
 8002cde:	08d8      	lsrs	r0, r3, #3
 8002ce0:	077b      	lsls	r3, r7, #29
 8002ce2:	002c      	movs	r4, r5
 8002ce4:	4318      	orrs	r0, r3
 8002ce6:	400e      	ands	r6, r1
 8002ce8:	e7cb      	b.n	8002c82 <__aeabi_dsub+0x612>
 8002cea:	000a      	movs	r2, r1
 8002cec:	0027      	movs	r7, r4
 8002cee:	3a20      	subs	r2, #32
 8002cf0:	40d7      	lsrs	r7, r2
 8002cf2:	2920      	cmp	r1, #32
 8002cf4:	d005      	beq.n	8002d02 <__aeabi_dsub+0x692>
 8002cf6:	2240      	movs	r2, #64	@ 0x40
 8002cf8:	1a52      	subs	r2, r2, r1
 8002cfa:	4094      	lsls	r4, r2
 8002cfc:	0025      	movs	r5, r4
 8002cfe:	4305      	orrs	r5, r0
 8002d00:	9503      	str	r5, [sp, #12]
 8002d02:	9d03      	ldr	r5, [sp, #12]
 8002d04:	1e6a      	subs	r2, r5, #1
 8002d06:	4195      	sbcs	r5, r2
 8002d08:	432f      	orrs	r7, r5
 8002d0a:	e610      	b.n	800292e <__aeabi_dsub+0x2be>
 8002d0c:	0014      	movs	r4, r2
 8002d0e:	2500      	movs	r5, #0
 8002d10:	2200      	movs	r2, #0
 8002d12:	e556      	b.n	80027c2 <__aeabi_dsub+0x152>
 8002d14:	9b02      	ldr	r3, [sp, #8]
 8002d16:	4460      	add	r0, ip
 8002d18:	4699      	mov	r9, r3
 8002d1a:	4560      	cmp	r0, ip
 8002d1c:	4192      	sbcs	r2, r2
 8002d1e:	444c      	add	r4, r9
 8002d20:	4252      	negs	r2, r2
 8002d22:	0005      	movs	r5, r0
 8002d24:	18a4      	adds	r4, r4, r2
 8002d26:	e74c      	b.n	8002bc2 <__aeabi_dsub+0x552>
 8002d28:	001a      	movs	r2, r3
 8002d2a:	001c      	movs	r4, r3
 8002d2c:	432a      	orrs	r2, r5
 8002d2e:	d000      	beq.n	8002d32 <__aeabi_dsub+0x6c2>
 8002d30:	e6b3      	b.n	8002a9a <__aeabi_dsub+0x42a>
 8002d32:	e6c9      	b.n	8002ac8 <__aeabi_dsub+0x458>
 8002d34:	2480      	movs	r4, #128	@ 0x80
 8002d36:	2600      	movs	r6, #0
 8002d38:	0324      	lsls	r4, r4, #12
 8002d3a:	e5ae      	b.n	800289a <__aeabi_dsub+0x22a>
 8002d3c:	2120      	movs	r1, #32
 8002d3e:	2500      	movs	r5, #0
 8002d40:	1a09      	subs	r1, r1, r0
 8002d42:	e517      	b.n	8002774 <__aeabi_dsub+0x104>
 8002d44:	2200      	movs	r2, #0
 8002d46:	2500      	movs	r5, #0
 8002d48:	4c0b      	ldr	r4, [pc, #44]	@ (8002d78 <__aeabi_dsub+0x708>)
 8002d4a:	e53a      	b.n	80027c2 <__aeabi_dsub+0x152>
 8002d4c:	2d00      	cmp	r5, #0
 8002d4e:	d100      	bne.n	8002d52 <__aeabi_dsub+0x6e2>
 8002d50:	e5f6      	b.n	8002940 <__aeabi_dsub+0x2d0>
 8002d52:	464b      	mov	r3, r9
 8002d54:	1bda      	subs	r2, r3, r7
 8002d56:	4692      	mov	sl, r2
 8002d58:	2f00      	cmp	r7, #0
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x6ee>
 8002d5c:	e66f      	b.n	8002a3e <__aeabi_dsub+0x3ce>
 8002d5e:	2a38      	cmp	r2, #56	@ 0x38
 8002d60:	dc05      	bgt.n	8002d6e <__aeabi_dsub+0x6fe>
 8002d62:	2680      	movs	r6, #128	@ 0x80
 8002d64:	0436      	lsls	r6, r6, #16
 8002d66:	4334      	orrs	r4, r6
 8002d68:	4688      	mov	r8, r1
 8002d6a:	000e      	movs	r6, r1
 8002d6c:	e6d1      	b.n	8002b12 <__aeabi_dsub+0x4a2>
 8002d6e:	4688      	mov	r8, r1
 8002d70:	000e      	movs	r6, r1
 8002d72:	2501      	movs	r5, #1
 8002d74:	e6de      	b.n	8002b34 <__aeabi_dsub+0x4c4>
 8002d76:	46c0      	nop			@ (mov r8, r8)
 8002d78:	000007ff 	.word	0x000007ff
 8002d7c:	ff7fffff 	.word	0xff7fffff
 8002d80:	000007fe 	.word	0x000007fe
 8002d84:	2d00      	cmp	r5, #0
 8002d86:	d100      	bne.n	8002d8a <__aeabi_dsub+0x71a>
 8002d88:	e668      	b.n	8002a5c <__aeabi_dsub+0x3ec>
 8002d8a:	464b      	mov	r3, r9
 8002d8c:	1bd9      	subs	r1, r3, r7
 8002d8e:	2f00      	cmp	r7, #0
 8002d90:	d101      	bne.n	8002d96 <__aeabi_dsub+0x726>
 8002d92:	468a      	mov	sl, r1
 8002d94:	e5a7      	b.n	80028e6 <__aeabi_dsub+0x276>
 8002d96:	2701      	movs	r7, #1
 8002d98:	2938      	cmp	r1, #56	@ 0x38
 8002d9a:	dd00      	ble.n	8002d9e <__aeabi_dsub+0x72e>
 8002d9c:	e5c7      	b.n	800292e <__aeabi_dsub+0x2be>
 8002d9e:	2280      	movs	r2, #128	@ 0x80
 8002da0:	0412      	lsls	r2, r2, #16
 8002da2:	4314      	orrs	r4, r2
 8002da4:	e5af      	b.n	8002906 <__aeabi_dsub+0x296>
 8002da6:	46c0      	nop			@ (mov r8, r8)

08002da8 <__aeabi_d2iz>:
 8002da8:	000b      	movs	r3, r1
 8002daa:	0002      	movs	r2, r0
 8002dac:	b570      	push	{r4, r5, r6, lr}
 8002dae:	4d16      	ldr	r5, [pc, #88]	@ (8002e08 <__aeabi_d2iz+0x60>)
 8002db0:	030c      	lsls	r4, r1, #12
 8002db2:	b082      	sub	sp, #8
 8002db4:	0049      	lsls	r1, r1, #1
 8002db6:	2000      	movs	r0, #0
 8002db8:	9200      	str	r2, [sp, #0]
 8002dba:	9301      	str	r3, [sp, #4]
 8002dbc:	0b24      	lsrs	r4, r4, #12
 8002dbe:	0d49      	lsrs	r1, r1, #21
 8002dc0:	0fde      	lsrs	r6, r3, #31
 8002dc2:	42a9      	cmp	r1, r5
 8002dc4:	dd04      	ble.n	8002dd0 <__aeabi_d2iz+0x28>
 8002dc6:	4811      	ldr	r0, [pc, #68]	@ (8002e0c <__aeabi_d2iz+0x64>)
 8002dc8:	4281      	cmp	r1, r0
 8002dca:	dd03      	ble.n	8002dd4 <__aeabi_d2iz+0x2c>
 8002dcc:	4b10      	ldr	r3, [pc, #64]	@ (8002e10 <__aeabi_d2iz+0x68>)
 8002dce:	18f0      	adds	r0, r6, r3
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd70      	pop	{r4, r5, r6, pc}
 8002dd4:	2080      	movs	r0, #128	@ 0x80
 8002dd6:	0340      	lsls	r0, r0, #13
 8002dd8:	4320      	orrs	r0, r4
 8002dda:	4c0e      	ldr	r4, [pc, #56]	@ (8002e14 <__aeabi_d2iz+0x6c>)
 8002ddc:	1a64      	subs	r4, r4, r1
 8002dde:	2c1f      	cmp	r4, #31
 8002de0:	dd08      	ble.n	8002df4 <__aeabi_d2iz+0x4c>
 8002de2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e18 <__aeabi_d2iz+0x70>)
 8002de4:	1a5b      	subs	r3, r3, r1
 8002de6:	40d8      	lsrs	r0, r3
 8002de8:	0003      	movs	r3, r0
 8002dea:	4258      	negs	r0, r3
 8002dec:	2e00      	cmp	r6, #0
 8002dee:	d1ef      	bne.n	8002dd0 <__aeabi_d2iz+0x28>
 8002df0:	0018      	movs	r0, r3
 8002df2:	e7ed      	b.n	8002dd0 <__aeabi_d2iz+0x28>
 8002df4:	4b09      	ldr	r3, [pc, #36]	@ (8002e1c <__aeabi_d2iz+0x74>)
 8002df6:	9a00      	ldr	r2, [sp, #0]
 8002df8:	469c      	mov	ip, r3
 8002dfa:	0003      	movs	r3, r0
 8002dfc:	4461      	add	r1, ip
 8002dfe:	408b      	lsls	r3, r1
 8002e00:	40e2      	lsrs	r2, r4
 8002e02:	4313      	orrs	r3, r2
 8002e04:	e7f1      	b.n	8002dea <__aeabi_d2iz+0x42>
 8002e06:	46c0      	nop			@ (mov r8, r8)
 8002e08:	000003fe 	.word	0x000003fe
 8002e0c:	0000041d 	.word	0x0000041d
 8002e10:	7fffffff 	.word	0x7fffffff
 8002e14:	00000433 	.word	0x00000433
 8002e18:	00000413 	.word	0x00000413
 8002e1c:	fffffbed 	.word	0xfffffbed

08002e20 <__aeabi_i2d>:
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	2800      	cmp	r0, #0
 8002e24:	d016      	beq.n	8002e54 <__aeabi_i2d+0x34>
 8002e26:	17c3      	asrs	r3, r0, #31
 8002e28:	18c5      	adds	r5, r0, r3
 8002e2a:	405d      	eors	r5, r3
 8002e2c:	0fc4      	lsrs	r4, r0, #31
 8002e2e:	0028      	movs	r0, r5
 8002e30:	f000 f890 	bl	8002f54 <__clzsi2>
 8002e34:	4b10      	ldr	r3, [pc, #64]	@ (8002e78 <__aeabi_i2d+0x58>)
 8002e36:	1a1b      	subs	r3, r3, r0
 8002e38:	055b      	lsls	r3, r3, #21
 8002e3a:	0d5b      	lsrs	r3, r3, #21
 8002e3c:	280a      	cmp	r0, #10
 8002e3e:	dc14      	bgt.n	8002e6a <__aeabi_i2d+0x4a>
 8002e40:	0002      	movs	r2, r0
 8002e42:	002e      	movs	r6, r5
 8002e44:	3215      	adds	r2, #21
 8002e46:	4096      	lsls	r6, r2
 8002e48:	220b      	movs	r2, #11
 8002e4a:	1a12      	subs	r2, r2, r0
 8002e4c:	40d5      	lsrs	r5, r2
 8002e4e:	032d      	lsls	r5, r5, #12
 8002e50:	0b2d      	lsrs	r5, r5, #12
 8002e52:	e003      	b.n	8002e5c <__aeabi_i2d+0x3c>
 8002e54:	2400      	movs	r4, #0
 8002e56:	2300      	movs	r3, #0
 8002e58:	2500      	movs	r5, #0
 8002e5a:	2600      	movs	r6, #0
 8002e5c:	051b      	lsls	r3, r3, #20
 8002e5e:	432b      	orrs	r3, r5
 8002e60:	07e4      	lsls	r4, r4, #31
 8002e62:	4323      	orrs	r3, r4
 8002e64:	0030      	movs	r0, r6
 8002e66:	0019      	movs	r1, r3
 8002e68:	bd70      	pop	{r4, r5, r6, pc}
 8002e6a:	380b      	subs	r0, #11
 8002e6c:	4085      	lsls	r5, r0
 8002e6e:	032d      	lsls	r5, r5, #12
 8002e70:	2600      	movs	r6, #0
 8002e72:	0b2d      	lsrs	r5, r5, #12
 8002e74:	e7f2      	b.n	8002e5c <__aeabi_i2d+0x3c>
 8002e76:	46c0      	nop			@ (mov r8, r8)
 8002e78:	0000041e 	.word	0x0000041e

08002e7c <__aeabi_ui2d>:
 8002e7c:	b510      	push	{r4, lr}
 8002e7e:	1e04      	subs	r4, r0, #0
 8002e80:	d010      	beq.n	8002ea4 <__aeabi_ui2d+0x28>
 8002e82:	f000 f867 	bl	8002f54 <__clzsi2>
 8002e86:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec0 <__aeabi_ui2d+0x44>)
 8002e88:	1a1b      	subs	r3, r3, r0
 8002e8a:	055b      	lsls	r3, r3, #21
 8002e8c:	0d5b      	lsrs	r3, r3, #21
 8002e8e:	280a      	cmp	r0, #10
 8002e90:	dc0f      	bgt.n	8002eb2 <__aeabi_ui2d+0x36>
 8002e92:	220b      	movs	r2, #11
 8002e94:	0021      	movs	r1, r4
 8002e96:	1a12      	subs	r2, r2, r0
 8002e98:	40d1      	lsrs	r1, r2
 8002e9a:	3015      	adds	r0, #21
 8002e9c:	030a      	lsls	r2, r1, #12
 8002e9e:	4084      	lsls	r4, r0
 8002ea0:	0b12      	lsrs	r2, r2, #12
 8002ea2:	e001      	b.n	8002ea8 <__aeabi_ui2d+0x2c>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	051b      	lsls	r3, r3, #20
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	0020      	movs	r0, r4
 8002eae:	0019      	movs	r1, r3
 8002eb0:	bd10      	pop	{r4, pc}
 8002eb2:	0022      	movs	r2, r4
 8002eb4:	380b      	subs	r0, #11
 8002eb6:	4082      	lsls	r2, r0
 8002eb8:	0312      	lsls	r2, r2, #12
 8002eba:	2400      	movs	r4, #0
 8002ebc:	0b12      	lsrs	r2, r2, #12
 8002ebe:	e7f3      	b.n	8002ea8 <__aeabi_ui2d+0x2c>
 8002ec0:	0000041e 	.word	0x0000041e

08002ec4 <__aeabi_f2d>:
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	0242      	lsls	r2, r0, #9
 8002ec8:	0043      	lsls	r3, r0, #1
 8002eca:	0fc4      	lsrs	r4, r0, #31
 8002ecc:	20fe      	movs	r0, #254	@ 0xfe
 8002ece:	0e1b      	lsrs	r3, r3, #24
 8002ed0:	1c59      	adds	r1, r3, #1
 8002ed2:	0a55      	lsrs	r5, r2, #9
 8002ed4:	4208      	tst	r0, r1
 8002ed6:	d00c      	beq.n	8002ef2 <__aeabi_f2d+0x2e>
 8002ed8:	21e0      	movs	r1, #224	@ 0xe0
 8002eda:	0089      	lsls	r1, r1, #2
 8002edc:	468c      	mov	ip, r1
 8002ede:	076d      	lsls	r5, r5, #29
 8002ee0:	0b12      	lsrs	r2, r2, #12
 8002ee2:	4463      	add	r3, ip
 8002ee4:	051b      	lsls	r3, r3, #20
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	07e4      	lsls	r4, r4, #31
 8002eea:	4323      	orrs	r3, r4
 8002eec:	0028      	movs	r0, r5
 8002eee:	0019      	movs	r1, r3
 8002ef0:	bd70      	pop	{r4, r5, r6, pc}
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d114      	bne.n	8002f20 <__aeabi_f2d+0x5c>
 8002ef6:	2d00      	cmp	r5, #0
 8002ef8:	d01b      	beq.n	8002f32 <__aeabi_f2d+0x6e>
 8002efa:	0028      	movs	r0, r5
 8002efc:	f000 f82a 	bl	8002f54 <__clzsi2>
 8002f00:	280a      	cmp	r0, #10
 8002f02:	dc1c      	bgt.n	8002f3e <__aeabi_f2d+0x7a>
 8002f04:	230b      	movs	r3, #11
 8002f06:	002a      	movs	r2, r5
 8002f08:	1a1b      	subs	r3, r3, r0
 8002f0a:	40da      	lsrs	r2, r3
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	3315      	adds	r3, #21
 8002f10:	409d      	lsls	r5, r3
 8002f12:	4b0e      	ldr	r3, [pc, #56]	@ (8002f4c <__aeabi_f2d+0x88>)
 8002f14:	0312      	lsls	r2, r2, #12
 8002f16:	1a1b      	subs	r3, r3, r0
 8002f18:	055b      	lsls	r3, r3, #21
 8002f1a:	0b12      	lsrs	r2, r2, #12
 8002f1c:	0d5b      	lsrs	r3, r3, #21
 8002f1e:	e7e1      	b.n	8002ee4 <__aeabi_f2d+0x20>
 8002f20:	2d00      	cmp	r5, #0
 8002f22:	d009      	beq.n	8002f38 <__aeabi_f2d+0x74>
 8002f24:	0b13      	lsrs	r3, r2, #12
 8002f26:	2280      	movs	r2, #128	@ 0x80
 8002f28:	0312      	lsls	r2, r2, #12
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	076d      	lsls	r5, r5, #29
 8002f2e:	4b08      	ldr	r3, [pc, #32]	@ (8002f50 <__aeabi_f2d+0x8c>)
 8002f30:	e7d8      	b.n	8002ee4 <__aeabi_f2d+0x20>
 8002f32:	2300      	movs	r3, #0
 8002f34:	2200      	movs	r2, #0
 8002f36:	e7d5      	b.n	8002ee4 <__aeabi_f2d+0x20>
 8002f38:	2200      	movs	r2, #0
 8002f3a:	4b05      	ldr	r3, [pc, #20]	@ (8002f50 <__aeabi_f2d+0x8c>)
 8002f3c:	e7d2      	b.n	8002ee4 <__aeabi_f2d+0x20>
 8002f3e:	0003      	movs	r3, r0
 8002f40:	002a      	movs	r2, r5
 8002f42:	3b0b      	subs	r3, #11
 8002f44:	409a      	lsls	r2, r3
 8002f46:	2500      	movs	r5, #0
 8002f48:	e7e3      	b.n	8002f12 <__aeabi_f2d+0x4e>
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	00000389 	.word	0x00000389
 8002f50:	000007ff 	.word	0x000007ff

08002f54 <__clzsi2>:
 8002f54:	211c      	movs	r1, #28
 8002f56:	2301      	movs	r3, #1
 8002f58:	041b      	lsls	r3, r3, #16
 8002f5a:	4298      	cmp	r0, r3
 8002f5c:	d301      	bcc.n	8002f62 <__clzsi2+0xe>
 8002f5e:	0c00      	lsrs	r0, r0, #16
 8002f60:	3910      	subs	r1, #16
 8002f62:	0a1b      	lsrs	r3, r3, #8
 8002f64:	4298      	cmp	r0, r3
 8002f66:	d301      	bcc.n	8002f6c <__clzsi2+0x18>
 8002f68:	0a00      	lsrs	r0, r0, #8
 8002f6a:	3908      	subs	r1, #8
 8002f6c:	091b      	lsrs	r3, r3, #4
 8002f6e:	4298      	cmp	r0, r3
 8002f70:	d301      	bcc.n	8002f76 <__clzsi2+0x22>
 8002f72:	0900      	lsrs	r0, r0, #4
 8002f74:	3904      	subs	r1, #4
 8002f76:	a202      	add	r2, pc, #8	@ (adr r2, 8002f80 <__clzsi2+0x2c>)
 8002f78:	5c10      	ldrb	r0, [r2, r0]
 8002f7a:	1840      	adds	r0, r0, r1
 8002f7c:	4770      	bx	lr
 8002f7e:	46c0      	nop			@ (mov r8, r8)
 8002f80:	02020304 	.word	0x02020304
 8002f84:	01010101 	.word	0x01010101
	...

08002f90 <__clzdi2>:
 8002f90:	b510      	push	{r4, lr}
 8002f92:	2900      	cmp	r1, #0
 8002f94:	d103      	bne.n	8002f9e <__clzdi2+0xe>
 8002f96:	f7ff ffdd 	bl	8002f54 <__clzsi2>
 8002f9a:	3020      	adds	r0, #32
 8002f9c:	e002      	b.n	8002fa4 <__clzdi2+0x14>
 8002f9e:	0008      	movs	r0, r1
 8002fa0:	f7ff ffd8 	bl	8002f54 <__clzsi2>
 8002fa4:	bd10      	pop	{r4, pc}
 8002fa6:	46c0      	nop			@ (mov r8, r8)

08002fa8 <HAL_InitTick>:
  * @brief  don't enable systick
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Return function status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b002      	add	sp, #8
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  HW_RTC_DelayMs(Delay);   /* based on RTC */
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f000 fffd 	bl	8003fc4 <HW_RTC_DelayMs>
}
 8002fca:	46c0      	nop			@ (mov r8, r8)
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b002      	add	sp, #8
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8003014 <HAL_MspInit+0x40>)
 8002fda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8003014 <HAL_MspInit+0x40>)
 8002fde:	2180      	movs	r1, #128	@ 0x80
 8002fe0:	0549      	lsls	r1, r1, #21
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8002fe6:	f013 fd45 	bl	8016a74 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 8002fea:	f013 fdc3 	bl	8016b74 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8002fee:	4b0a      	ldr	r3, [pc, #40]	@ (8003018 <HAL_MspInit+0x44>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	4b09      	ldr	r3, [pc, #36]	@ (8003018 <HAL_MspInit+0x44>)
 8002ff4:	2108      	movs	r1, #8
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	601a      	str	r2, [r3, #0]

  /*In debug mode, e.g. when DBGMCU is activated, Arm core has always clocks
   * And will not wait that the FLACH is ready to be read. It can miss in this
   * case the first instruction. To overcome this issue, the flash remain clcoked during sleep mode
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););
 8002ffa:	4b07      	ldr	r3, [pc, #28]	@ (8003018 <HAL_MspInit+0x44>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4b06      	ldr	r3, [pc, #24]	@ (8003018 <HAL_MspInit+0x44>)
 8003000:	2108      	movs	r1, #8
 8003002:	438a      	bics	r2, r1
 8003004:	601a      	str	r2, [r3, #0]

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8003006:	f013 fda7 	bl	8016b58 <HAL_PWREx_EnableFastWakeUp>
#else
  HAL_PWREx_DisableFastWakeUp();
#endif

  HW_GpioInit();
 800300a:	f000 f8fd 	bl	8003208 <HW_GpioInit>
}
 800300e:	46c0      	nop			@ (mov r8, r8)
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40021000 	.word	0x40021000
 8003018:	40022000 	.word	0x40022000

0800301c <HAL_RTC_MspInit>:
  *        order to modify the RTC Clock source, as consequence RTC registers (including
  *        the backup registers) and RCC_CSR register are set to their reset values.
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 800301c:	b590      	push	{r4, r7, lr}
 800301e:	b09b      	sub	sp, #108	@ 0x6c
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003024:	2430      	movs	r4, #48	@ 0x30
 8003026:	193b      	adds	r3, r7, r4
 8003028:	0018      	movs	r0, r3
 800302a:	2338      	movs	r3, #56	@ 0x38
 800302c:	001a      	movs	r2, r3
 800302e:	2100      	movs	r1, #0
 8003030:	f016 fcbc 	bl	80199ac <memset>
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct = {0};
 8003034:	230c      	movs	r3, #12
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	0018      	movs	r0, r3
 800303a:	2324      	movs	r3, #36	@ 0x24
 800303c:	001a      	movs	r2, r3
 800303e:	2100      	movs	r1, #0
 8003040:	f016 fcb4 	bl	80199ac <memset>

  /*##-1- Configue the RTC clock soucre ######################################*/
  /* -a- Enable LSE Oscillator */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 8003044:	193b      	adds	r3, r7, r4
 8003046:	2204      	movs	r2, #4
 8003048:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800304a:	193b      	adds	r3, r7, r4
 800304c:	2200      	movs	r2, #0
 800304e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003050:	193b      	adds	r3, r7, r4
 8003052:	2280      	movs	r2, #128	@ 0x80
 8003054:	0052      	lsls	r2, r2, #1
 8003056:	609a      	str	r2, [r3, #8]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003058:	193b      	adds	r3, r7, r4
 800305a:	0018      	movs	r0, r3
 800305c:	f013 fd98 	bl	8016b90 <HAL_RCC_OscConfig>
 8003060:	1e03      	subs	r3, r0, #0
 8003062:	d001      	beq.n	8003068 <HAL_RTC_MspInit+0x4c>
  {
    Error_Handler();
 8003064:	f000 fd08 	bl	8003a78 <Error_Handler>
  }

  /* -b- Select LSI as RTC clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003068:	210c      	movs	r1, #12
 800306a:	187b      	adds	r3, r7, r1
 800306c:	2220      	movs	r2, #32
 800306e:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003070:	187b      	adds	r3, r7, r1
 8003072:	2280      	movs	r2, #128	@ 0x80
 8003074:	0252      	lsls	r2, r2, #9
 8003076:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003078:	187b      	adds	r3, r7, r1
 800307a:	0018      	movs	r0, r3
 800307c:	f014 fb3e 	bl	80176fc <HAL_RCCEx_PeriphCLKConfig>
 8003080:	1e03      	subs	r3, r0, #0
 8003082:	d001      	beq.n	8003088 <HAL_RTC_MspInit+0x6c>
  {
    Error_Handler();
 8003084:	f000 fcf8 	bl	8003a78 <Error_Handler>
  }

  /*##-2- Enable the RTC peripheral Clock ####################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 8003088:	4b09      	ldr	r3, [pc, #36]	@ (80030b0 <HAL_RTC_MspInit+0x94>)
 800308a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800308c:	4b08      	ldr	r3, [pc, #32]	@ (80030b0 <HAL_RTC_MspInit+0x94>)
 800308e:	2180      	movs	r1, #128	@ 0x80
 8003090:	02c9      	lsls	r1, r1, #11
 8003092:	430a      	orrs	r2, r1
 8003094:	651a      	str	r2, [r3, #80]	@ 0x50

  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 8003096:	2200      	movs	r2, #0
 8003098:	2100      	movs	r1, #0
 800309a:	2002      	movs	r0, #2
 800309c:	f013 f90a 	bl	80162b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80030a0:	2002      	movs	r0, #2
 80030a2:	f013 f91c 	bl	80162de <HAL_NVIC_EnableIRQ>
}
 80030a6:	46c0      	nop			@ (mov r8, r8)
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b01b      	add	sp, #108	@ 0x6c
 80030ac:	bd90      	pop	{r4, r7, pc}
 80030ae:	46c0      	nop			@ (mov r8, r8)
 80030b0:	40021000 	.word	0x40021000

080030b4 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  TimerIrqHandler();
 80030bc:	f011 ff58 	bl	8014f70 <TimerIrqHandler>
}
 80030c0:	46c0      	nop			@ (mov r8, r8)
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b002      	add	sp, #8
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	0002      	movs	r2, r0
 80030d0:	1dbb      	adds	r3, r7, #6
 80030d2:	801a      	strh	r2, [r3, #0]
  HW_GPIO_IrqHandler(GPIO_Pin);
 80030d4:	1dbb      	adds	r3, r7, #6
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	0018      	movs	r0, r3
 80030da:	f000 fd89 	bl	8003bf0 <HW_GPIO_IrqHandler>
}
 80030de:	46c0      	nop			@ (mov r8, r8)
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b002      	add	sp, #8
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <MSP_GetIRQn>:
  * @brief  Gets IRQ number as a function of the GPIO_Pin.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn(uint16_t GPIO_Pin)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	0002      	movs	r2, r0
 80030ee:	1dbb      	adds	r3, r7, #6
 80030f0:	801a      	strh	r2, [r3, #0]
  switch (GPIO_Pin)
 80030f2:	1dbb      	adds	r3, r7, #6
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d00a      	beq.n	8003110 <MSP_GetIRQn+0x2a>
 80030fa:	dc0b      	bgt.n	8003114 <MSP_GetIRQn+0x2e>
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	dc02      	bgt.n	8003106 <MSP_GetIRQn+0x20>
 8003100:	2b00      	cmp	r3, #0
 8003102:	dc03      	bgt.n	800310c <MSP_GetIRQn+0x26>
 8003104:	e006      	b.n	8003114 <MSP_GetIRQn+0x2e>
 8003106:	2b04      	cmp	r3, #4
 8003108:	d002      	beq.n	8003110 <MSP_GetIRQn+0x2a>
 800310a:	e003      	b.n	8003114 <MSP_GetIRQn+0x2e>
  {
    case GPIO_PIN_0:
    case GPIO_PIN_1:
      return EXTI0_1_IRQn;
 800310c:	2305      	movs	r3, #5
 800310e:	e002      	b.n	8003116 <MSP_GetIRQn+0x30>
    case GPIO_PIN_2:
    case GPIO_PIN_3:
      return EXTI2_3_IRQn;
 8003110:	2306      	movs	r3, #6
 8003112:	e000      	b.n	8003116 <MSP_GetIRQn+0x30>
    case GPIO_PIN_12:
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15:
    default:
      return EXTI4_15_IRQn;
 8003114:	2307      	movs	r3, #7
  }
}
 8003116:	0018      	movs	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	b002      	add	sp, #8
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <HW_Init>:
  * @brief This function initializes the hardware
  * @param None
  * @retval None
  */
void HW_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  if (McuInitialized == false)
 8003124:	4b12      	ldr	r3, [pc, #72]	@ (8003170 <HW_Init+0x50>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2201      	movs	r2, #1
 800312a:	4053      	eors	r3, r2
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d01b      	beq.n	800316a <HW_Init+0x4a>
#if defined( USE_BOOTLOADER )
    /* Set the Vector Table base location at 0x3000 */
    NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
#endif

    HW_AdcInit();
 8003132:	f000 fa51 	bl	80035d8 <HW_AdcInit>

    Radio.IoInit();
 8003136:	4b0f      	ldr	r3, [pc, #60]	@ (8003174 <HW_Init+0x54>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4798      	blx	r3

    HW_SPI_Init();
 800313c:	f001 fa02 	bl	8004544 <HW_SPI_Init>

    HW_RTC_Init();
 8003140:	f000 fde0 	bl	8003d04 <HW_RTC_Init>

    TraceInit();
 8003144:	f012 f8f8 	bl	8015338 <TraceInit>

    BSP_sensor_Init();
 8003148:	f000 fc36 	bl	80039b8 <BSP_sensor_Init>

    BSP_LED_Init(LED1);
 800314c:	2000      	movs	r0, #0
 800314e:	f001 ff71 	bl	8005034 <BSP_LED_Init>
    BSP_LED_Init(LED2);
 8003152:	2001      	movs	r0, #1
 8003154:	f001 ff6e 	bl	8005034 <BSP_LED_Init>
    BSP_LED_Init(LED3);
 8003158:	2002      	movs	r0, #2
 800315a:	f001 ff6b 	bl	8005034 <BSP_LED_Init>
    BSP_LED_Init(LED4);
 800315e:	2003      	movs	r0, #3
 8003160:	f001 ff68 	bl	8005034 <BSP_LED_Init>

    McuInitialized = true;
 8003164:	4b02      	ldr	r3, [pc, #8]	@ (8003170 <HW_Init+0x50>)
 8003166:	2201      	movs	r2, #1
 8003168:	701a      	strb	r2, [r3, #0]
  }
}
 800316a:	46c0      	nop			@ (mov r8, r8)
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000179 	.word	0x20000179
 8003174:	0801ac88 	.word	0x0801ac88

08003178 <HW_IoInit>:
  * @brief This function Initializes the hardware Ios
  * @param None
  * @retval None
  */
static void HW_IoInit(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  HW_SPI_IoInit();
 800317c:	f001 fa28 	bl	80045d0 <HW_SPI_IoInit>

  Radio.IoInit();
 8003180:	4b03      	ldr	r3, [pc, #12]	@ (8003190 <HW_IoInit+0x18>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4798      	blx	r3

  vcom_IoInit();
 8003186:	f001 fea9 	bl	8004edc <vcom_IoInit>
}
 800318a:	46c0      	nop			@ (mov r8, r8)
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	0801ac88 	.word	0x0801ac88

08003194 <HW_IoDeInit>:
  * @brief This function Deinitializes the hardware Ios
  * @param None
  * @retval None
  */
static void HW_IoDeInit(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
  /*  HW_SPI_IoDeInit( );*/
  GPIO_InitTypeDef initStruct = {0};
 800319a:	1d3b      	adds	r3, r7, #4
 800319c:	0018      	movs	r0, r3
 800319e:	2314      	movs	r3, #20
 80031a0:	001a      	movs	r2, r3
 80031a2:	2100      	movs	r1, #0
 80031a4:	f016 fc02 	bl	80199ac <memset>

  initStruct.Mode = GPIO_MODE_ANALOG;
 80031a8:	1d3b      	adds	r3, r7, #4
 80031aa:	2203      	movs	r2, #3
 80031ac:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 80031ae:	1d3b      	adds	r3, r7, #4
 80031b0:	2200      	movs	r2, #0
 80031b2:	609a      	str	r2, [r3, #8]
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 80031b4:	1d3a      	adds	r2, r7, #4
 80031b6:	23a0      	movs	r3, #160	@ 0xa0
 80031b8:	05db      	lsls	r3, r3, #23
 80031ba:	2180      	movs	r1, #128	@ 0x80
 80031bc:	0018      	movs	r0, r3
 80031be:	f000 fc65 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 80031c2:	1d3a      	adds	r2, r7, #4
 80031c4:	23a0      	movs	r3, #160	@ 0xa0
 80031c6:	05db      	lsls	r3, r3, #23
 80031c8:	2140      	movs	r1, #64	@ 0x40
 80031ca:	0018      	movs	r0, r3
 80031cc:	f000 fc5e 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	480b      	ldr	r0, [pc, #44]	@ (8003200 <HW_IoDeInit+0x6c>)
 80031d4:	001a      	movs	r2, r3
 80031d6:	2108      	movs	r1, #8
 80031d8:	f000 fc58 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 80031dc:	1d3a      	adds	r2, r7, #4
 80031de:	2380      	movs	r3, #128	@ 0x80
 80031e0:	0219      	lsls	r1, r3, #8
 80031e2:	23a0      	movs	r3, #160	@ 0xa0
 80031e4:	05db      	lsls	r3, r3, #23
 80031e6:	0018      	movs	r0, r3
 80031e8:	f000 fc50 	bl	8003a8c <HW_GPIO_Init>


  Radio.IoDeInit();
 80031ec:	4b05      	ldr	r3, [pc, #20]	@ (8003204 <HW_IoDeInit+0x70>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	4798      	blx	r3

  vcom_IoDeInit();
 80031f2:	f001 febf 	bl	8004f74 <vcom_IoDeInit>
}
 80031f6:	46c0      	nop			@ (mov r8, r8)
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b006      	add	sp, #24
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	46c0      	nop			@ (mov r8, r8)
 8003200:	50000400 	.word	0x50000400
 8003204:	0801ac88 	.word	0x0801ac88

08003208 <HW_GpioInit>:


void HW_GpioInit(void)
{
 8003208:	b590      	push	{r4, r7, lr}
 800320a:	b08b      	sub	sp, #44	@ 0x2c
 800320c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320e:	2414      	movs	r4, #20
 8003210:	193b      	adds	r3, r7, r4
 8003212:	0018      	movs	r0, r3
 8003214:	2314      	movs	r3, #20
 8003216:	001a      	movs	r2, r3
 8003218:	2100      	movs	r1, #0
 800321a:	f016 fbc7 	bl	80199ac <memset>

  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800321e:	4b38      	ldr	r3, [pc, #224]	@ (8003300 <HW_GpioInit+0xf8>)
 8003220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003222:	4b37      	ldr	r3, [pc, #220]	@ (8003300 <HW_GpioInit+0xf8>)
 8003224:	2101      	movs	r1, #1
 8003226:	430a      	orrs	r2, r1
 8003228:	62da      	str	r2, [r3, #44]	@ 0x2c
 800322a:	4b35      	ldr	r3, [pc, #212]	@ (8003300 <HW_GpioInit+0xf8>)
 800322c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322e:	2201      	movs	r2, #1
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003236:	4b32      	ldr	r3, [pc, #200]	@ (8003300 <HW_GpioInit+0xf8>)
 8003238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800323a:	4b31      	ldr	r3, [pc, #196]	@ (8003300 <HW_GpioInit+0xf8>)
 800323c:	2102      	movs	r1, #2
 800323e:	430a      	orrs	r2, r1
 8003240:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003242:	4b2f      	ldr	r3, [pc, #188]	@ (8003300 <HW_GpioInit+0xf8>)
 8003244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003246:	2202      	movs	r2, #2
 8003248:	4013      	ands	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800324e:	4b2c      	ldr	r3, [pc, #176]	@ (8003300 <HW_GpioInit+0xf8>)
 8003250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003252:	4b2b      	ldr	r3, [pc, #172]	@ (8003300 <HW_GpioInit+0xf8>)
 8003254:	2104      	movs	r1, #4
 8003256:	430a      	orrs	r2, r1
 8003258:	62da      	str	r2, [r3, #44]	@ 0x2c
 800325a:	4b29      	ldr	r3, [pc, #164]	@ (8003300 <HW_GpioInit+0xf8>)
 800325c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325e:	2204      	movs	r2, #4
 8003260:	4013      	ands	r3, r2
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003266:	4b26      	ldr	r3, [pc, #152]	@ (8003300 <HW_GpioInit+0xf8>)
 8003268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800326a:	4b25      	ldr	r3, [pc, #148]	@ (8003300 <HW_GpioInit+0xf8>)
 800326c:	2180      	movs	r1, #128	@ 0x80
 800326e:	430a      	orrs	r2, r1
 8003270:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003272:	4b23      	ldr	r3, [pc, #140]	@ (8003300 <HW_GpioInit+0xf8>)
 8003274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003276:	2280      	movs	r2, #128	@ 0x80
 8003278:	4013      	ands	r3, r2
 800327a:	607b      	str	r3, [r7, #4]
 800327c:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800327e:	193b      	adds	r3, r7, r4
 8003280:	2203      	movs	r2, #3
 8003282:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003284:	193b      	adds	r3, r7, r4
 8003286:	2200      	movs	r2, #0
 8003288:	609a      	str	r2, [r3, #8]
  /* All GPIOs except debug pins (SWCLK and SWD) */
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 800328a:	193b      	adds	r3, r7, r4
 800328c:	4a1d      	ldr	r2, [pc, #116]	@ (8003304 <HW_GpioInit+0xfc>)
 800328e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003290:	193a      	adds	r2, r7, r4
 8003292:	23a0      	movs	r3, #160	@ 0xa0
 8003294:	05db      	lsls	r3, r3, #23
 8003296:	0011      	movs	r1, r2
 8003298:	0018      	movs	r0, r3
 800329a:	f013 fa33 	bl	8016704 <HAL_GPIO_Init>

  /* All GPIOs */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 800329e:	193b      	adds	r3, r7, r4
 80032a0:	4a19      	ldr	r2, [pc, #100]	@ (8003308 <HW_GpioInit+0x100>)
 80032a2:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a4:	193b      	adds	r3, r7, r4
 80032a6:	4a19      	ldr	r2, [pc, #100]	@ (800330c <HW_GpioInit+0x104>)
 80032a8:	0019      	movs	r1, r3
 80032aa:	0010      	movs	r0, r2
 80032ac:	f013 fa2a 	bl	8016704 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032b0:	193b      	adds	r3, r7, r4
 80032b2:	4a17      	ldr	r2, [pc, #92]	@ (8003310 <HW_GpioInit+0x108>)
 80032b4:	0019      	movs	r1, r3
 80032b6:	0010      	movs	r0, r2
 80032b8:	f013 fa24 	bl	8016704 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80032bc:	193b      	adds	r3, r7, r4
 80032be:	4a15      	ldr	r2, [pc, #84]	@ (8003314 <HW_GpioInit+0x10c>)
 80032c0:	0019      	movs	r1, r3
 80032c2:	0010      	movs	r0, r2
 80032c4:	f013 fa1e 	bl	8016704 <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
 80032c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003300 <HW_GpioInit+0xf8>)
 80032ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003300 <HW_GpioInit+0xf8>)
 80032ce:	2101      	movs	r1, #1
 80032d0:	438a      	bics	r2, r1
 80032d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 80032d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003300 <HW_GpioInit+0xf8>)
 80032d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032d8:	4b09      	ldr	r3, [pc, #36]	@ (8003300 <HW_GpioInit+0xf8>)
 80032da:	2102      	movs	r1, #2
 80032dc:	438a      	bics	r2, r1
 80032de:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 80032e0:	4b07      	ldr	r3, [pc, #28]	@ (8003300 <HW_GpioInit+0xf8>)
 80032e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032e4:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <HW_GpioInit+0xf8>)
 80032e6:	2104      	movs	r1, #4
 80032e8:	438a      	bics	r2, r1
 80032ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 80032ec:	4b04      	ldr	r3, [pc, #16]	@ (8003300 <HW_GpioInit+0xf8>)
 80032ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032f0:	4b03      	ldr	r3, [pc, #12]	@ (8003300 <HW_GpioInit+0xf8>)
 80032f2:	2180      	movs	r1, #128	@ 0x80
 80032f4:	438a      	bics	r2, r1
 80032f6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80032f8:	46c0      	nop			@ (mov r8, r8)
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b00b      	add	sp, #44	@ 0x2c
 80032fe:	bd90      	pop	{r4, r7, pc}
 8003300:	40021000 	.word	0x40021000
 8003304:	00009fff 	.word	0x00009fff
 8003308:	0000ffff 	.word	0x0000ffff
 800330c:	50000400 	.word	0x50000400
 8003310:	50000800 	.word	0x50000800
 8003314:	50001c00 	.word	0x50001c00

08003318 <SystemClock_Config>:
  *            Flash Latency(WS)              = 1
  * @retval None
  */

void SystemClock_Config(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b094      	sub	sp, #80	@ 0x50
 800331c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800331e:	233c      	movs	r3, #60	@ 0x3c
 8003320:	18fb      	adds	r3, r7, r3
 8003322:	0018      	movs	r0, r3
 8003324:	2314      	movs	r3, #20
 8003326:	001a      	movs	r2, r3
 8003328:	2100      	movs	r1, #0
 800332a:	f016 fb3f 	bl	80199ac <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800332e:	1d3b      	adds	r3, r7, #4
 8003330:	0018      	movs	r0, r3
 8003332:	2338      	movs	r3, #56	@ 0x38
 8003334:	001a      	movs	r2, r3
 8003336:	2100      	movs	r1, #0
 8003338:	f016 fb38 	bl	80199ac <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 800333c:	1d3b      	adds	r3, r7, #4
 800333e:	2202      	movs	r2, #2
 8003340:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 8003342:	1d3b      	adds	r3, r7, #4
 8003344:	2200      	movs	r2, #0
 8003346:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8003348:	1d3b      	adds	r3, r7, #4
 800334a:	2201      	movs	r2, #1
 800334c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800334e:	1d3b      	adds	r3, r7, #4
 8003350:	2210      	movs	r2, #16
 8003352:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8003354:	1d3b      	adds	r3, r7, #4
 8003356:	2202      	movs	r2, #2
 8003358:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	2200      	movs	r2, #0
 800335e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8003360:	1d3b      	adds	r3, r7, #4
 8003362:	2280      	movs	r2, #128	@ 0x80
 8003364:	0312      	lsls	r2, r2, #12
 8003366:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8003368:	1d3b      	adds	r3, r7, #4
 800336a:	2280      	movs	r2, #128	@ 0x80
 800336c:	0412      	lsls	r2, r2, #16
 800336e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003370:	1d3b      	adds	r3, r7, #4
 8003372:	0018      	movs	r0, r3
 8003374:	f013 fc0c 	bl	8016b90 <HAL_RCC_OscConfig>
 8003378:	1e03      	subs	r3, r0, #0
 800337a:	d001      	beq.n	8003380 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800337c:	f000 fb7c 	bl	8003a78 <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003380:	4b19      	ldr	r3, [pc, #100]	@ (80033e8 <SystemClock_Config+0xd0>)
 8003382:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003384:	4b18      	ldr	r3, [pc, #96]	@ (80033e8 <SystemClock_Config+0xd0>)
 8003386:	2180      	movs	r1, #128	@ 0x80
 8003388:	0549      	lsls	r1, r1, #21
 800338a:	430a      	orrs	r2, r1
 800338c:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800338e:	4b17      	ldr	r3, [pc, #92]	@ (80033ec <SystemClock_Config+0xd4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a17      	ldr	r2, [pc, #92]	@ (80033f0 <SystemClock_Config+0xd8>)
 8003394:	401a      	ands	r2, r3
 8003396:	4b15      	ldr	r3, [pc, #84]	@ (80033ec <SystemClock_Config+0xd4>)
 8003398:	2180      	movs	r1, #128	@ 0x80
 800339a:	0109      	lsls	r1, r1, #4
 800339c:	430a      	orrs	r2, r1
 800339e:	601a      	str	r2, [r3, #0]

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 80033a0:	46c0      	nop			@ (mov r8, r8)
 80033a2:	4b12      	ldr	r3, [pc, #72]	@ (80033ec <SystemClock_Config+0xd4>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2210      	movs	r2, #16
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b10      	cmp	r3, #16
 80033ac:	d0f9      	beq.n	80033a2 <SystemClock_Config+0x8a>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80033ae:	213c      	movs	r1, #60	@ 0x3c
 80033b0:	187b      	adds	r3, r7, r1
 80033b2:	220f      	movs	r2, #15
 80033b4:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033b6:	187b      	adds	r3, r7, r1
 80033b8:	2203      	movs	r2, #3
 80033ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033bc:	187b      	adds	r3, r7, r1
 80033be:	2200      	movs	r2, #0
 80033c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80033c2:	187b      	adds	r3, r7, r1
 80033c4:	2200      	movs	r2, #0
 80033c6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033c8:	187b      	adds	r3, r7, r1
 80033ca:	2200      	movs	r2, #0
 80033cc:	611a      	str	r2, [r3, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80033ce:	187b      	adds	r3, r7, r1
 80033d0:	2101      	movs	r1, #1
 80033d2:	0018      	movs	r0, r3
 80033d4:	f013 ffac 	bl	8017330 <HAL_RCC_ClockConfig>
 80033d8:	1e03      	subs	r3, r0, #0
 80033da:	d001      	beq.n	80033e0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80033dc:	f000 fb4c 	bl	8003a78 <Error_Handler>
  }
}
 80033e0:	46c0      	nop			@ (mov r8, r8)
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b014      	add	sp, #80	@ 0x50
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40007000 	.word	0x40007000
 80033f0:	ffffe7ff 	.word	0xffffe7ff

080033f4 <HW_GetRandomSeed>:
  * @note based on the device unique ID
  * @param None
  * @retval see
  */
uint32_t HW_GetRandomSeed(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  return ((*(uint32_t *)ID1) ^ (*(uint32_t *)ID2) ^ (*(uint32_t *)ID3));
 80033f8:	4b05      	ldr	r3, [pc, #20]	@ (8003410 <HW_GetRandomSeed+0x1c>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b05      	ldr	r3, [pc, #20]	@ (8003414 <HW_GetRandomSeed+0x20>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	405a      	eors	r2, r3
 8003402:	4b05      	ldr	r3, [pc, #20]	@ (8003418 <HW_GetRandomSeed+0x24>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4053      	eors	r3, r2
}
 8003408:	0018      	movs	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	46c0      	nop			@ (mov r8, r8)
 8003410:	1ff80050 	.word	0x1ff80050
 8003414:	1ff80054 	.word	0x1ff80054
 8003418:	1ff80064 	.word	0x1ff80064

0800341c <HW_GetUniqueId>:
  * @brief This function return a unique ID
  * @param unique ID
  * @retval none
  */
void HW_GetUniqueId(uint8_t *id)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  id[7] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 24;
 8003424:	4b23      	ldr	r3, [pc, #140]	@ (80034b4 <HW_GetUniqueId+0x98>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4b23      	ldr	r3, [pc, #140]	@ (80034b8 <HW_GetUniqueId+0x9c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	18d3      	adds	r3, r2, r3
 800342e:	0e1a      	lsrs	r2, r3, #24
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3307      	adds	r3, #7
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	701a      	strb	r2, [r3, #0]
  id[6] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 16;
 8003438:	4b1e      	ldr	r3, [pc, #120]	@ (80034b4 <HW_GetUniqueId+0x98>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4b1e      	ldr	r3, [pc, #120]	@ (80034b8 <HW_GetUniqueId+0x9c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	18d3      	adds	r3, r2, r3
 8003442:	0c1a      	lsrs	r2, r3, #16
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3306      	adds	r3, #6
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	701a      	strb	r2, [r3, #0]
  id[5] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 8;
 800344c:	4b19      	ldr	r3, [pc, #100]	@ (80034b4 <HW_GetUniqueId+0x98>)
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4b19      	ldr	r3, [pc, #100]	@ (80034b8 <HW_GetUniqueId+0x9c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	18d3      	adds	r3, r2, r3
 8003456:	0a1a      	lsrs	r2, r3, #8
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3305      	adds	r3, #5
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	701a      	strb	r2, [r3, #0]
  id[4] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3));
 8003460:	4b14      	ldr	r3, [pc, #80]	@ (80034b4 <HW_GetUniqueId+0x98>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	b2d9      	uxtb	r1, r3
 8003466:	4b14      	ldr	r3, [pc, #80]	@ (80034b8 <HW_GetUniqueId+0x9c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	b2da      	uxtb	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3304      	adds	r3, #4
 8003470:	188a      	adds	r2, r1, r2
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	701a      	strb	r2, [r3, #0]
  id[3] = ((*(uint32_t *)ID2)) >> 24;
 8003476:	4b11      	ldr	r3, [pc, #68]	@ (80034bc <HW_GetUniqueId+0xa0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	0e1a      	lsrs	r2, r3, #24
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3303      	adds	r3, #3
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	701a      	strb	r2, [r3, #0]
  id[2] = ((*(uint32_t *)ID2)) >> 16;
 8003484:	4b0d      	ldr	r3, [pc, #52]	@ (80034bc <HW_GetUniqueId+0xa0>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	0c1a      	lsrs	r2, r3, #16
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3302      	adds	r3, #2
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	701a      	strb	r2, [r3, #0]
  id[1] = ((*(uint32_t *)ID2)) >> 8;
 8003492:	4b0a      	ldr	r3, [pc, #40]	@ (80034bc <HW_GetUniqueId+0xa0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	0a1a      	lsrs	r2, r3, #8
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3301      	adds	r3, #1
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	701a      	strb	r2, [r3, #0]
  id[0] = ((*(uint32_t *)ID2));
 80034a0:	4b06      	ldr	r3, [pc, #24]	@ (80034bc <HW_GetUniqueId+0xa0>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	701a      	strb	r2, [r3, #0]
}
 80034aa:	46c0      	nop			@ (mov r8, r8)
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b002      	add	sp, #8
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	46c0      	nop			@ (mov r8, r8)
 80034b4:	1ff80050 	.word	0x1ff80050
 80034b8:	1ff80064 	.word	0x1ff80064
 80034bc:	1ff80054 	.word	0x1ff80054

080034c0 <HW_GetTemperatureLevel>:

uint16_t HW_GetTemperatureLevel(void)
{
 80034c0:	b590      	push	{r4, r7, lr}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
  uint16_t measuredLevel = 0;
 80034c6:	1cbb      	adds	r3, r7, #2
 80034c8:	2200      	movs	r2, #0
 80034ca:	801a      	strh	r2, [r3, #0]
  uint32_t batteryLevelmV;
  uint16_t temperatureDegreeC;

  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 80034cc:	1cbc      	adds	r4, r7, #2
 80034ce:	4b25      	ldr	r3, [pc, #148]	@ (8003564 <HW_GetTemperatureLevel+0xa4>)
 80034d0:	0018      	movs	r0, r3
 80034d2:	f000 f8e5 	bl	80036a0 <HW_AdcReadChannel>
 80034d6:	0003      	movs	r3, r0
 80034d8:	8023      	strh	r3, [r4, #0]

  if (measuredLevel == 0)
 80034da:	1cbb      	adds	r3, r7, #2
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d102      	bne.n	80034e8 <HW_GetTemperatureLevel+0x28>
  {
    batteryLevelmV = 0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	607b      	str	r3, [r7, #4]
 80034e6:	e00c      	b.n	8003502 <HW_GetTemperatureLevel+0x42>
  }
  else
  {
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 80034e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003568 <HW_GetTemperatureLevel+0xa8>)
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	001a      	movs	r2, r3
 80034ee:	4b1f      	ldr	r3, [pc, #124]	@ (800356c <HW_GetTemperatureLevel+0xac>)
 80034f0:	435a      	muls	r2, r3
 80034f2:	1cbb      	adds	r3, r7, #2
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	0019      	movs	r1, r3
 80034f8:	0010      	movs	r0, r2
 80034fa:	f7fc fe0f 	bl	800011c <__udivsi3>
 80034fe:	0003      	movs	r3, r0
 8003500:	607b      	str	r3, [r7, #4]
  }
#if 0
  PRINTF("VDDA= %d\n\r", batteryLevelmV);
#endif

  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_TEMPSENSOR);
 8003502:	1cbc      	adds	r4, r7, #2
 8003504:	4b1a      	ldr	r3, [pc, #104]	@ (8003570 <HW_GetTemperatureLevel+0xb0>)
 8003506:	0018      	movs	r0, r3
 8003508:	f000 f8ca 	bl	80036a0 <HW_AdcReadChannel>
 800350c:	0003      	movs	r3, r0
 800350e:	8023      	strh	r3, [r4, #0]

  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 8003510:	1cbb      	adds	r3, r7, #2
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	4353      	muls	r3, r2
 8003518:	4914      	ldr	r1, [pc, #80]	@ (800356c <HW_GetTemperatureLevel+0xac>)
 800351a:	0018      	movs	r0, r3
 800351c:	f7fc fdfe 	bl	800011c <__udivsi3>
 8003520:	0003      	movs	r3, r0
 8003522:	001a      	movs	r2, r3
 8003524:	4b13      	ldr	r3, [pc, #76]	@ (8003574 <HW_GetTemperatureLevel+0xb4>)
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	1ad2      	subs	r2, r2, r3
 800352a:	0013      	movs	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	189b      	adds	r3, r3, r2
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	4a10      	ldr	r2, [pc, #64]	@ (8003578 <HW_GetTemperatureLevel+0xb8>)
 8003536:	8812      	ldrh	r2, [r2, #0]
 8003538:	0011      	movs	r1, r2
 800353a:	4a0e      	ldr	r2, [pc, #56]	@ (8003574 <HW_GetTemperatureLevel+0xb4>)
 800353c:	8812      	ldrh	r2, [r2, #0]
 800353e:	1a8a      	subs	r2, r1, r2
 8003540:	0011      	movs	r1, r2
 8003542:	0018      	movs	r0, r3
 8003544:	f7fc fe74 	bl	8000230 <__divsi3>
 8003548:	0003      	movs	r3, r0
 800354a:	b29a      	uxth	r2, r3
 800354c:	003b      	movs	r3, r7
 800354e:	21f0      	movs	r1, #240	@ 0xf0
 8003550:	0149      	lsls	r1, r1, #5
 8003552:	468c      	mov	ip, r1
 8003554:	4462      	add	r2, ip
 8003556:	801a      	strh	r2, [r3, #0]
    uint16_t temperatureDegreeC_Frac = ((temperatureDegreeC - (temperatureDegreeC_Int << 8)) * 100) >> 8;
    PRINTF("temp= %d, %d,%d\n\r", temperatureDegreeC, temperatureDegreeC_Int, temperatureDegreeC_Frac);
  }
#endif

  return (uint16_t) temperatureDegreeC;
 8003558:	003b      	movs	r3, r7
 800355a:	881b      	ldrh	r3, [r3, #0]
}
 800355c:	0018      	movs	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	b003      	add	sp, #12
 8003562:	bd90      	pop	{r4, r7, pc}
 8003564:	44020000 	.word	0x44020000
 8003568:	1ff80078 	.word	0x1ff80078
 800356c:	00000bb8 	.word	0x00000bb8
 8003570:	48040000 	.word	0x48040000
 8003574:	1ff8007a 	.word	0x1ff8007a
 8003578:	1ff8007e 	.word	0x1ff8007e

0800357c <HW_GetBatteryLevel>:
  * @brief This function return the battery level
  * @param none
  * @retval the battery level in mV
  */
uint16_t HW_GetBatteryLevel(void)
{
 800357c:	b590      	push	{r4, r7, lr}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
  uint16_t measuredLevel = 0;
 8003582:	1cbb      	adds	r3, r7, #2
 8003584:	2200      	movs	r2, #0
 8003586:	801a      	strh	r2, [r3, #0]
  uint32_t batteryLevelmV;

  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 8003588:	1cbc      	adds	r4, r7, #2
 800358a:	4b10      	ldr	r3, [pc, #64]	@ (80035cc <HW_GetBatteryLevel+0x50>)
 800358c:	0018      	movs	r0, r3
 800358e:	f000 f887 	bl	80036a0 <HW_AdcReadChannel>
 8003592:	0003      	movs	r3, r0
 8003594:	8023      	strh	r3, [r4, #0]

  if (measuredLevel == 0)
 8003596:	1cbb      	adds	r3, r7, #2
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d102      	bne.n	80035a4 <HW_GetBatteryLevel+0x28>
  {
    batteryLevelmV = 0;
 800359e:	2300      	movs	r3, #0
 80035a0:	607b      	str	r3, [r7, #4]
 80035a2:	e00c      	b.n	80035be <HW_GetBatteryLevel+0x42>
  }
  else
  {
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 80035a4:	4b0a      	ldr	r3, [pc, #40]	@ (80035d0 <HW_GetBatteryLevel+0x54>)
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	001a      	movs	r2, r3
 80035aa:	4b0a      	ldr	r3, [pc, #40]	@ (80035d4 <HW_GetBatteryLevel+0x58>)
 80035ac:	435a      	muls	r2, r3
 80035ae:	1cbb      	adds	r3, r7, #2
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	0019      	movs	r1, r3
 80035b4:	0010      	movs	r0, r2
 80035b6:	f7fc fdb1 	bl	800011c <__udivsi3>
 80035ba:	0003      	movs	r3, r0
 80035bc:	607b      	str	r3, [r7, #4]
  }

  return batteryLevelmV;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	b29b      	uxth	r3, r3
}
 80035c2:	0018      	movs	r0, r3
 80035c4:	46bd      	mov	sp, r7
 80035c6:	b003      	add	sp, #12
 80035c8:	bd90      	pop	{r4, r7, pc}
 80035ca:	46c0      	nop			@ (mov r8, r8)
 80035cc:	44020000 	.word	0x44020000
 80035d0:	1ff80078 	.word	0x1ff80078
 80035d4:	00000bb8 	.word	0x00000bb8

080035d8 <HW_AdcInit>:
  * @brief This function initializes the ADC
  * @param none
  * @retval none
  */
void HW_AdcInit(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  if (AdcInitialized == false)
 80035dc:	4b24      	ldr	r3, [pc, #144]	@ (8003670 <HW_AdcInit+0x98>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2201      	movs	r2, #1
 80035e2:	4053      	eors	r3, r2
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d03e      	beq.n	8003668 <HW_AdcInit+0x90>
  {
    AdcInitialized = true;
 80035ea:	4b21      	ldr	r3, [pc, #132]	@ (8003670 <HW_AdcInit+0x98>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	701a      	strb	r2, [r3, #0]


    hadc.Instance  = ADC1;
 80035f0:	4b20      	ldr	r3, [pc, #128]	@ (8003674 <HW_AdcInit+0x9c>)
 80035f2:	4a21      	ldr	r2, [pc, #132]	@ (8003678 <HW_AdcInit+0xa0>)
 80035f4:	601a      	str	r2, [r3, #0]

    hadc.Init.OversamplingMode      = DISABLE;
 80035f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003674 <HW_AdcInit+0x9c>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 80035fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003674 <HW_AdcInit+0x9c>)
 80035fe:	2280      	movs	r2, #128	@ 0x80
 8003600:	0612      	lsls	r2, r2, #24
 8003602:	605a      	str	r2, [r3, #4]
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 8003604:	4b1b      	ldr	r3, [pc, #108]	@ (8003674 <HW_AdcInit+0x9c>)
 8003606:	2200      	movs	r2, #0
 8003608:	61da      	str	r2, [r3, #28]
    hadc.Init.LowPowerFrequencyMode = ENABLE;
 800360a:	4b1a      	ldr	r3, [pc, #104]	@ (8003674 <HW_AdcInit+0x9c>)
 800360c:	2201      	movs	r2, #1
 800360e:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc.Init.LowPowerAutoWait      = DISABLE;
 8003610:	4b18      	ldr	r3, [pc, #96]	@ (8003674 <HW_AdcInit+0x9c>)
 8003612:	2200      	movs	r2, #0
 8003614:	619a      	str	r2, [r3, #24]

    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
 8003616:	4b17      	ldr	r3, [pc, #92]	@ (8003674 <HW_AdcInit+0x9c>)
 8003618:	2200      	movs	r2, #0
 800361a:	609a      	str	r2, [r3, #8]
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 800361c:	4b15      	ldr	r3, [pc, #84]	@ (8003674 <HW_AdcInit+0x9c>)
 800361e:	2207      	movs	r2, #7
 8003620:	639a      	str	r2, [r3, #56]	@ 0x38
    hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 8003622:	4b14      	ldr	r3, [pc, #80]	@ (8003674 <HW_AdcInit+0x9c>)
 8003624:	2201      	movs	r2, #1
 8003626:	611a      	str	r2, [r3, #16]
    hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8003628:	4b12      	ldr	r3, [pc, #72]	@ (8003674 <HW_AdcInit+0x9c>)
 800362a:	2200      	movs	r2, #0
 800362c:	60da      	str	r2, [r3, #12]
    hadc.Init.ContinuousConvMode    = DISABLE;
 800362e:	4b11      	ldr	r3, [pc, #68]	@ (8003674 <HW_AdcInit+0x9c>)
 8003630:	2220      	movs	r2, #32
 8003632:	2100      	movs	r1, #0
 8003634:	5499      	strb	r1, [r3, r2]
    hadc.Init.DiscontinuousConvMode = DISABLE;
 8003636:	4b0f      	ldr	r3, [pc, #60]	@ (8003674 <HW_AdcInit+0x9c>)
 8003638:	2221      	movs	r2, #33	@ 0x21
 800363a:	2100      	movs	r1, #0
 800363c:	5499      	strb	r1, [r3, r2]
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800363e:	4b0d      	ldr	r3, [pc, #52]	@ (8003674 <HW_AdcInit+0x9c>)
 8003640:	2200      	movs	r2, #0
 8003642:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8003644:	4b0b      	ldr	r3, [pc, #44]	@ (8003674 <HW_AdcInit+0x9c>)
 8003646:	2204      	movs	r2, #4
 8003648:	615a      	str	r2, [r3, #20]
    hadc.Init.DMAContinuousRequests = DISABLE;
 800364a:	4b0a      	ldr	r3, [pc, #40]	@ (8003674 <HW_AdcInit+0x9c>)
 800364c:	222c      	movs	r2, #44	@ 0x2c
 800364e:	2100      	movs	r1, #0
 8003650:	5499      	strb	r1, [r3, r2]

    ADCCLK_ENABLE();
 8003652:	4b0a      	ldr	r3, [pc, #40]	@ (800367c <HW_AdcInit+0xa4>)
 8003654:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003656:	4b09      	ldr	r3, [pc, #36]	@ (800367c <HW_AdcInit+0xa4>)
 8003658:	2180      	movs	r1, #128	@ 0x80
 800365a:	0089      	lsls	r1, r1, #2
 800365c:	430a      	orrs	r2, r1
 800365e:	635a      	str	r2, [r3, #52]	@ 0x34


    HAL_ADC_Init(&hadc);
 8003660:	4b04      	ldr	r3, [pc, #16]	@ (8003674 <HW_AdcInit+0x9c>)
 8003662:	0018      	movs	r0, r3
 8003664:	f012 f846 	bl	80156f4 <HAL_ADC_Init>

  }
}
 8003668:	46c0      	nop			@ (mov r8, r8)
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	46c0      	nop			@ (mov r8, r8)
 8003670:	20000178 	.word	0x20000178
 8003674:	2000011c 	.word	0x2000011c
 8003678:	40012400 	.word	0x40012400
 800367c:	40021000 	.word	0x40021000

08003680 <HW_AdcDeInit>:
  * @brief This function De-initializes the ADC
  * @param none
  * @retval none
  */
void HW_AdcDeInit(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  AdcInitialized = false;
 8003684:	4b04      	ldr	r3, [pc, #16]	@ (8003698 <HW_AdcDeInit+0x18>)
 8003686:	2200      	movs	r2, #0
 8003688:	701a      	strb	r2, [r3, #0]
  HAL_ADC_DeInit(&hadc);
 800368a:	4b04      	ldr	r3, [pc, #16]	@ (800369c <HW_AdcDeInit+0x1c>)
 800368c:	0018      	movs	r0, r3
 800368e:	f012 f9a5 	bl	80159dc <HAL_ADC_DeInit>
}
 8003692:	46c0      	nop			@ (mov r8, r8)
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	20000178 	.word	0x20000178
 800369c:	2000011c 	.word	0x2000011c

080036a0 <HW_AdcReadChannel>:
  * @brief This function De-initializes the ADC
  * @param Channel
  * @retval Value
  */
uint16_t HW_AdcReadChannel(uint32_t Channel)
{
 80036a0:	b590      	push	{r4, r7, lr}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]

  ADC_ChannelConfTypeDef adcConf = {0};
 80036a8:	230c      	movs	r3, #12
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	0018      	movs	r0, r3
 80036ae:	2308      	movs	r3, #8
 80036b0:	001a      	movs	r2, r3
 80036b2:	2100      	movs	r1, #0
 80036b4:	f016 f97a 	bl	80199ac <memset>

  uint16_t adcData = 0;
 80036b8:	2316      	movs	r3, #22
 80036ba:	18fb      	adds	r3, r7, r3
 80036bc:	2200      	movs	r2, #0
 80036be:	801a      	strh	r2, [r3, #0]

  HW_AdcInit();
 80036c0:	f7ff ff8a 	bl	80035d8 <HW_AdcInit>

  if (AdcInitialized == true)
 80036c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003780 <HW_AdcReadChannel+0xe0>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d052      	beq.n	8003772 <HW_AdcReadChannel+0xd2>
  {
    /* wait the the Vrefint used by adc is set */
    while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 80036cc:	46c0      	nop			@ (mov r8, r8)
 80036ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003784 <HW_AdcReadChannel+0xe4>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2208      	movs	r2, #8
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d1f9      	bne.n	80036ce <HW_AdcReadChannel+0x2e>

    ADCCLK_ENABLE();
 80036da:	4b2b      	ldr	r3, [pc, #172]	@ (8003788 <HW_AdcReadChannel+0xe8>)
 80036dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036de:	4b2a      	ldr	r3, [pc, #168]	@ (8003788 <HW_AdcReadChannel+0xe8>)
 80036e0:	2180      	movs	r1, #128	@ 0x80
 80036e2:	0089      	lsls	r1, r1, #2
 80036e4:	430a      	orrs	r2, r1
 80036e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /*calibrate ADC if any calibraiton hardware*/
    HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 80036e8:	4b28      	ldr	r3, [pc, #160]	@ (800378c <HW_AdcReadChannel+0xec>)
 80036ea:	2100      	movs	r1, #0
 80036ec:	0018      	movs	r0, r3
 80036ee:	f012 fcc3 	bl	8016078 <HAL_ADCEx_Calibration_Start>

    /* Deselects all channels*/
    adcConf.Channel = ADC_CHANNEL_MASK;
 80036f2:	240c      	movs	r4, #12
 80036f4:	193b      	adds	r3, r7, r4
 80036f6:	4a26      	ldr	r2, [pc, #152]	@ (8003790 <HW_AdcReadChannel+0xf0>)
 80036f8:	601a      	str	r2, [r3, #0]
    adcConf.Rank = ADC_RANK_NONE;
 80036fa:	193b      	adds	r3, r7, r4
 80036fc:	4a25      	ldr	r2, [pc, #148]	@ (8003794 <HW_AdcReadChannel+0xf4>)
 80036fe:	605a      	str	r2, [r3, #4]
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 8003700:	193a      	adds	r2, r7, r4
 8003702:	4b22      	ldr	r3, [pc, #136]	@ (800378c <HW_AdcReadChannel+0xec>)
 8003704:	0011      	movs	r1, r2
 8003706:	0018      	movs	r0, r3
 8003708:	f012 fb0a 	bl	8015d20 <HAL_ADC_ConfigChannel>

    /* configure adc channel */
    adcConf.Channel = Channel;
 800370c:	0021      	movs	r1, r4
 800370e:	187b      	adds	r3, r7, r1
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	601a      	str	r2, [r3, #0]
    adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003714:	187b      	adds	r3, r7, r1
 8003716:	2280      	movs	r2, #128	@ 0x80
 8003718:	0152      	lsls	r2, r2, #5
 800371a:	605a      	str	r2, [r3, #4]
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 800371c:	187a      	adds	r2, r7, r1
 800371e:	4b1b      	ldr	r3, [pc, #108]	@ (800378c <HW_AdcReadChannel+0xec>)
 8003720:	0011      	movs	r1, r2
 8003722:	0018      	movs	r0, r3
 8003724:	f012 fafc 	bl	8015d20 <HAL_ADC_ConfigChannel>

    /* Start the conversion process */
    HAL_ADC_Start(&hadc);
 8003728:	4b18      	ldr	r3, [pc, #96]	@ (800378c <HW_AdcReadChannel+0xec>)
 800372a:	0018      	movs	r0, r3
 800372c:	f012 fa02 	bl	8015b34 <HAL_ADC_Start>

    /* Wait for the end of conversion */
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8003730:	2301      	movs	r3, #1
 8003732:	425a      	negs	r2, r3
 8003734:	4b15      	ldr	r3, [pc, #84]	@ (800378c <HW_AdcReadChannel+0xec>)
 8003736:	0011      	movs	r1, r2
 8003738:	0018      	movs	r0, r3
 800373a:	f012 fa4f 	bl	8015bdc <HAL_ADC_PollForConversion>

    /* Get the converted value of regular channel */
    adcData = HAL_ADC_GetValue(&hadc);
 800373e:	4b13      	ldr	r3, [pc, #76]	@ (800378c <HW_AdcReadChannel+0xec>)
 8003740:	0018      	movs	r0, r3
 8003742:	f012 fae1 	bl	8015d08 <HAL_ADC_GetValue>
 8003746:	0002      	movs	r2, r0
 8003748:	2316      	movs	r3, #22
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	801a      	strh	r2, [r3, #0]

    __HAL_ADC_DISABLE(&hadc) ;
 800374e:	4b0f      	ldr	r3, [pc, #60]	@ (800378c <HW_AdcReadChannel+0xec>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	4b0d      	ldr	r3, [pc, #52]	@ (800378c <HW_AdcReadChannel+0xec>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2102      	movs	r1, #2
 800375a:	430a      	orrs	r2, r1
 800375c:	609a      	str	r2, [r3, #8]
 800375e:	4b0b      	ldr	r3, [pc, #44]	@ (800378c <HW_AdcReadChannel+0xec>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2203      	movs	r2, #3
 8003764:	601a      	str	r2, [r3, #0]

    ADCCLK_DISABLE();
 8003766:	4b08      	ldr	r3, [pc, #32]	@ (8003788 <HW_AdcReadChannel+0xe8>)
 8003768:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800376a:	4b07      	ldr	r3, [pc, #28]	@ (8003788 <HW_AdcReadChannel+0xe8>)
 800376c:	490a      	ldr	r1, [pc, #40]	@ (8003798 <HW_AdcReadChannel+0xf8>)
 800376e:	400a      	ands	r2, r1
 8003770:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  return adcData;
 8003772:	2316      	movs	r3, #22
 8003774:	18fb      	adds	r3, r7, r3
 8003776:	881b      	ldrh	r3, [r3, #0]
}
 8003778:	0018      	movs	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	b007      	add	sp, #28
 800377e:	bd90      	pop	{r4, r7, pc}
 8003780:	20000178 	.word	0x20000178
 8003784:	40007000 	.word	0x40007000
 8003788:	40021000 	.word	0x40021000
 800378c:	2000011c 	.word	0x2000011c
 8003790:	0007ffff 	.word	0x0007ffff
 8003794:	00001001 	.word	0x00001001
 8003798:	fffffdff 	.word	0xfffffdff

0800379c <LPM_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void LPM_EnterStopMode(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037a2:	f3ef 8310 	mrs	r3, PRIMASK
 80037a6:	607b      	str	r3, [r7, #4]
  return(result);
 80037a8:	687b      	ldr	r3, [r7, #4]
  BACKUP_PRIMASK();
 80037aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80037ac:	b672      	cpsid	i
}
 80037ae:	46c0      	nop			@ (mov r8, r8)

  DISABLE_IRQ();

  HW_IoDeInit();
 80037b0:	f7ff fcf0 	bl	8003194 <HW_IoDeInit>

  HW_AdcDeInit();
 80037b4:	f7ff ff64 	bl	8003680 <HW_AdcDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 80037b8:	4b09      	ldr	r3, [pc, #36]	@ (80037e0 <LPM_EnterStopMode+0x44>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	4b08      	ldr	r3, [pc, #32]	@ (80037e0 <LPM_EnterStopMode+0x44>)
 80037be:	2104      	movs	r1, #4
 80037c0:	430a      	orrs	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f383 8810 	msr	PRIMASK, r3
}
 80037ce:	46c0      	nop			@ (mov r8, r8)

  RESTORE_PRIMASK();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80037d0:	2101      	movs	r1, #1
 80037d2:	2001      	movs	r0, #1
 80037d4:	f013 f98c 	bl	8016af0 <HAL_PWR_EnterSTOPMode>
}
 80037d8:	46c0      	nop			@ (mov r8, r8)
 80037da:	46bd      	mov	sp, r7
 80037dc:	b004      	add	sp, #16
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40007000 	.word	0x40007000

080037e4 <LPM_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void LPM_ExitStopMode(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ea:	f3ef 8310 	mrs	r3, PRIMASK
 80037ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80037f0:	68bb      	ldr	r3, [r7, #8]
  /* Disable IRQ while the MCU is not running on HSI */

  BACKUP_PRIMASK();
 80037f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80037f4:	b672      	cpsid	i
}
 80037f6:	46c0      	nop			@ (mov r8, r8)

  DISABLE_IRQ();

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 80037f8:	4b19      	ldr	r3, [pc, #100]	@ (8003860 <LPM_ExitStopMode+0x7c>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4b18      	ldr	r3, [pc, #96]	@ (8003860 <LPM_ExitStopMode+0x7c>)
 80037fe:	2101      	movs	r1, #1
 8003800:	430a      	orrs	r2, r1
 8003802:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 8003804:	46c0      	nop			@ (mov r8, r8)
 8003806:	4b16      	ldr	r3, [pc, #88]	@ (8003860 <LPM_ExitStopMode+0x7c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2204      	movs	r2, #4
 800380c:	4013      	ands	r3, r2
 800380e:	d0fa      	beq.n	8003806 <LPM_ExitStopMode+0x22>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 8003810:	4b13      	ldr	r3, [pc, #76]	@ (8003860 <LPM_ExitStopMode+0x7c>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	4b12      	ldr	r3, [pc, #72]	@ (8003860 <LPM_ExitStopMode+0x7c>)
 8003816:	2180      	movs	r1, #128	@ 0x80
 8003818:	0449      	lsls	r1, r1, #17
 800381a:	430a      	orrs	r2, r1
 800381c:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	4b0f      	ldr	r3, [pc, #60]	@ (8003860 <LPM_ExitStopMode+0x7c>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	2380      	movs	r3, #128	@ 0x80
 8003826:	049b      	lsls	r3, r3, #18
 8003828:	4013      	ands	r3, r2
 800382a:	d0f9      	beq.n	8003820 <LPM_ExitStopMode+0x3c>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 800382c:	4b0c      	ldr	r3, [pc, #48]	@ (8003860 <LPM_ExitStopMode+0x7c>)
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	4b0b      	ldr	r3, [pc, #44]	@ (8003860 <LPM_ExitStopMode+0x7c>)
 8003832:	2103      	movs	r1, #3
 8003834:	430a      	orrs	r2, r1
 8003836:	60da      	str	r2, [r3, #12]

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 8003838:	46c0      	nop			@ (mov r8, r8)
 800383a:	4b09      	ldr	r3, [pc, #36]	@ (8003860 <LPM_ExitStopMode+0x7c>)
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	220c      	movs	r2, #12
 8003840:	4013      	ands	r3, r2
 8003842:	2b0c      	cmp	r3, #12
 8003844:	d1f9      	bne.n	800383a <LPM_ExitStopMode+0x56>

  /*initilizes the peripherals*/
  HW_IoInit();
 8003846:	f7ff fc97 	bl	8003178 <HW_IoInit>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f383 8810 	msr	PRIMASK, r3
}
 8003854:	46c0      	nop			@ (mov r8, r8)

  RESTORE_PRIMASK();
}
 8003856:	46c0      	nop			@ (mov r8, r8)
 8003858:	46bd      	mov	sp, r7
 800385a:	b004      	add	sp, #16
 800385c:	bd80      	pop	{r7, pc}
 800385e:	46c0      	nop			@ (mov r8, r8)
 8003860:	40021000 	.word	0x40021000

08003864 <LPM_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void LPM_EnterSleepMode(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8003868:	2101      	movs	r1, #1
 800386a:	2000      	movs	r0, #0
 800386c:	f013 f910 	bl	8016a90 <HAL_PWR_EnterSLEEPMode>
}
 8003870:	46c0      	nop			@ (mov r8, r8)
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <NMI_Handler>:
  * @param  None
  * @retval None
  */

void NMI_Handler(void)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	af00      	add	r7, sp, #0
}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HardFault_Handler>:
  * @retval None
  */


void HardFault_Handler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  while (1)
  {
    __NOP();
 8003884:	46c0      	nop			@ (mov r8, r8)
 8003886:	e7fd      	b.n	8003884 <HardFault_Handler+0x4>

08003888 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
}
 800388c:	46c0      	nop			@ (mov r8, r8)
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	af00      	add	r7, sp, #0
}
 8003896:	46c0      	nop			@ (mov r8, r8)
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80038a0:	f011 fee8 	bl	8015674 <HAL_IncTick>
}
 80038a4:	46c0      	nop			@ (mov r8, r8)
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <USART2_IRQHandler>:
  */
/*void PPP_IRQHandler(void)
{
}*/
void USARTx_IRQHandler(void)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	af00      	add	r7, sp, #0
  vcom_IRQHandler();
 80038ae:	f001 fa91 	bl	8004dd4 <vcom_IRQHandler>
}
 80038b2:	46c0      	nop			@ (mov r8, r8)
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <DMA1_Channel4_5_6_7_IRQHandler>:

void USARTx_DMA_TX_IRQHandler(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  vcom_DMA_TX_IRQHandler();
 80038bc:	f001 fa7e 	bl	8004dbc <vcom_DMA_TX_IRQHandler>
}
 80038c0:	46c0      	nop			@ (mov r8, r8)
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <RTC_IRQHandler>:

void RTC_IRQHandler(void)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	af00      	add	r7, sp, #0
  HW_RTC_IrqHandler();
 80038ca:	f000 fb47 	bl	8003f5c <HW_RTC_IrqHandler>
}
 80038ce:	46c0      	nop			@ (mov r8, r8)
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80038d8:	2001      	movs	r0, #1
 80038da:	f013 f8af 	bl	8016a3c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80038de:	2002      	movs	r0, #2
 80038e0:	f013 f8ac 	bl	8016a3c <HAL_GPIO_EXTI_IRQHandler>
}
 80038e4:	46c0      	nop			@ (mov r8, r8)
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80038ee:	2004      	movs	r0, #4
 80038f0:	f013 f8a4 	bl	8016a3c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80038f4:	2008      	movs	r0, #8
 80038f6:	f013 f8a1 	bl	8016a3c <HAL_GPIO_EXTI_IRQHandler>
}
 80038fa:	46c0      	nop			@ (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <EXTI4_15_IRQHandler>:


void EXTI4_15_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003904:	2010      	movs	r0, #16
 8003906:	f013 f899 	bl	8016a3c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800390a:	2020      	movs	r0, #32
 800390c:	f013 f896 	bl	8016a3c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003910:	2040      	movs	r0, #64	@ 0x40
 8003912:	f013 f893 	bl	8016a3c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003916:	2080      	movs	r0, #128	@ 0x80
 8003918:	f013 f890 	bl	8016a3c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800391c:	2380      	movs	r3, #128	@ 0x80
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	0018      	movs	r0, r3
 8003922:	f013 f88b 	bl	8016a3c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003926:	2380      	movs	r3, #128	@ 0x80
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	0018      	movs	r0, r3
 800392c:	f013 f886 	bl	8016a3c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003930:	2380      	movs	r3, #128	@ 0x80
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	0018      	movs	r0, r3
 8003936:	f013 f881 	bl	8016a3c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800393a:	2380      	movs	r3, #128	@ 0x80
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	0018      	movs	r0, r3
 8003940:	f013 f87c 	bl	8016a3c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003944:	2380      	movs	r3, #128	@ 0x80
 8003946:	015b      	lsls	r3, r3, #5
 8003948:	0018      	movs	r0, r3
 800394a:	f013 f877 	bl	8016a3c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800394e:	2380      	movs	r3, #128	@ 0x80
 8003950:	019b      	lsls	r3, r3, #6
 8003952:	0018      	movs	r0, r3
 8003954:	f013 f872 	bl	8016a3c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003958:	2380      	movs	r3, #128	@ 0x80
 800395a:	01db      	lsls	r3, r3, #7
 800395c:	0018      	movs	r0, r3
 800395e:	f013 f86d 	bl	8016a3c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003962:	2380      	movs	r3, #128	@ 0x80
 8003964:	021b      	lsls	r3, r3, #8
 8003966:	0018      	movs	r0, r3
 8003968:	f013 f868 	bl	8016a3c <HAL_GPIO_EXTI_IRQHandler>
}
 800396c:	46c0      	nop			@ (mov r8, r8)
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <BSP_sensor_Read>:
void *TEMPERATURE_handle = NULL;
void *PRESSURE_handle = NULL;
#endif

void BSP_sensor_Read(sensor_t *sensor_data)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  float HUMIDITY_Value = 0;
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = 0;
 8003980:	2300      	movs	r3, #0
 8003982:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	60fb      	str	r3, [r7, #12]
#if defined(SENSOR_ENABLED) || defined (LRWAN_NS1)
  BSP_HUMIDITY_Get_Hum(HUMIDITY_handle, &HUMIDITY_Value);
  BSP_TEMPERATURE_Get_Temp(TEMPERATURE_handle, &TEMPERATURE_Value);
  BSP_PRESSURE_Get_Press(PRESSURE_handle, &PRESSURE_Value);
#endif
  sensor_data->humidity    = HUMIDITY_Value;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a04      	ldr	r2, [pc, #16]	@ (80039b0 <BSP_sensor_Read+0x3c>)
 800399e:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a04      	ldr	r2, [pc, #16]	@ (80039b4 <BSP_sensor_Read+0x40>)
 80039a4:	611a      	str	r2, [r3, #16]
  /* USER CODE END 5 */
}
 80039a6:	46c0      	nop			@ (mov r8, r8)
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b006      	add	sp, #24
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	46c0      	nop			@ (mov r8, r8)
 80039b0:	003e090d 	.word	0x003e090d
 80039b4:	000503ab 	.word	0x000503ab

080039b8 <BSP_sensor_Init>:

void  BSP_sensor_Init(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  BSP_HUMIDITY_Sensor_Enable(HUMIDITY_handle);
  BSP_TEMPERATURE_Sensor_Enable(TEMPERATURE_handle);
  BSP_PRESSURE_Sensor_Enable(PRESSURE_handle);
#endif
  /* USER CODE END 6 */
}
 80039bc:	46c0      	nop			@ (mov r8, r8)
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <DBG_Init>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions ------------------------------------------------------- */

void DBG_Init(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
#ifdef DEBUG
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80039ca:	1d3b      	adds	r3, r7, #4
 80039cc:	0018      	movs	r0, r3
 80039ce:	2314      	movs	r3, #20
 80039d0:	001a      	movs	r2, r3
 80039d2:	2100      	movs	r1, #0
 80039d4:	f015 ffea 	bl	80199ac <memset>

  /* Enable the GPIO_B Clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039d8:	4b25      	ldr	r3, [pc, #148]	@ (8003a70 <DBG_Init+0xac>)
 80039da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039dc:	4b24      	ldr	r3, [pc, #144]	@ (8003a70 <DBG_Init+0xac>)
 80039de:	2102      	movs	r1, #2
 80039e0:	430a      	orrs	r2, r1
 80039e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80039e4:	4b22      	ldr	r3, [pc, #136]	@ (8003a70 <DBG_Init+0xac>)
 80039e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e8:	2202      	movs	r2, #2
 80039ea:	4013      	ands	r3, r2
 80039ec:	603b      	str	r3, [r7, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]

  /* Configure the GPIO pin */
  gpioinitstruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80039f0:	1d3b      	adds	r3, r7, #4
 80039f2:	2201      	movs	r2, #1
 80039f4:	605a      	str	r2, [r3, #4]
  gpioinitstruct.Pull   = GPIO_PULLUP;
 80039f6:	1d3b      	adds	r3, r7, #4
 80039f8:	2201      	movs	r2, #1
 80039fa:	609a      	str	r2, [r3, #8]
  gpioinitstruct.Speed  = GPIO_SPEED_HIGH;
 80039fc:	1d3b      	adds	r3, r7, #4
 80039fe:	2203      	movs	r2, #3
 8003a00:	60da      	str	r2, [r3, #12]

  gpioinitstruct.Pin    = (GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 8003a02:	1d3b      	adds	r3, r7, #4
 8003a04:	22f0      	movs	r2, #240	@ 0xf0
 8003a06:	0212      	lsls	r2, r2, #8
 8003a08:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 8003a0a:	1d3b      	adds	r3, r7, #4
 8003a0c:	4a19      	ldr	r2, [pc, #100]	@ (8003a74 <DBG_Init+0xb0>)
 8003a0e:	0019      	movs	r1, r3
 8003a10:	0010      	movs	r0, r2
 8003a12:	f012 fe77 	bl	8016704 <HAL_GPIO_Init>

  /* Reset debug Pins */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003a16:	2380      	movs	r3, #128	@ 0x80
 8003a18:	015b      	lsls	r3, r3, #5
 8003a1a:	4816      	ldr	r0, [pc, #88]	@ (8003a74 <DBG_Init+0xb0>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	0019      	movs	r1, r3
 8003a20:	f012 ffee 	bl	8016a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003a24:	2380      	movs	r3, #128	@ 0x80
 8003a26:	019b      	lsls	r3, r3, #6
 8003a28:	4812      	ldr	r0, [pc, #72]	@ (8003a74 <DBG_Init+0xb0>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	0019      	movs	r1, r3
 8003a2e:	f012 ffe7 	bl	8016a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8003a32:	2380      	movs	r3, #128	@ 0x80
 8003a34:	01db      	lsls	r3, r3, #7
 8003a36:	480f      	ldr	r0, [pc, #60]	@ (8003a74 <DBG_Init+0xb0>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	0019      	movs	r1, r3
 8003a3c:	f012 ffe0 	bl	8016a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8003a40:	2380      	movs	r3, #128	@ 0x80
 8003a42:	021b      	lsls	r3, r3, #8
 8003a44:	480b      	ldr	r0, [pc, #44]	@ (8003a74 <DBG_Init+0xb0>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	0019      	movs	r1, r3
 8003a4a:	f012 ffd9 	bl	8016a00 <HAL_GPIO_WritePin>

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 8003a4e:	4b08      	ldr	r3, [pc, #32]	@ (8003a70 <DBG_Init+0xac>)
 8003a50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a52:	4b07      	ldr	r3, [pc, #28]	@ (8003a70 <DBG_Init+0xac>)
 8003a54:	2180      	movs	r1, #128	@ 0x80
 8003a56:	03c9      	lsls	r1, r1, #15
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_DBGMCU_EnableDBGSleepMode();
 8003a5c:	f011 fe20 	bl	80156a0 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8003a60:	f011 fe2c 	bl	80156bc <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8003a64:	f011 fe38 	bl	80156d8 <HAL_DBGMCU_EnableDBGStandbyMode>
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
  __HAL_RCC_DBGMCU_CLK_DISABLE();
#endif
}
 8003a68:	46c0      	nop			@ (mov r8, r8)
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b006      	add	sp, #24
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40021000 	.word	0x40021000
 8003a74:	50000400 	.word	0x50000400

08003a78 <Error_Handler>:

void Error_Handler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  PRINTF("Error_Handler\n\r");
 8003a7c:	4b02      	ldr	r3, [pc, #8]	@ (8003a88 <Error_Handler+0x10>)
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f011 fc70 	bl	8015364 <TraceSend>
  while (1)
 8003a84:	46c0      	nop			@ (mov r8, r8)
 8003a86:	e7fd      	b.n	8003a84 <Error_Handler+0xc>
 8003a88:	0801a54c 	.word	0x0801a54c

08003a8c <HW_GPIO_Init>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] initStruct  GPIO_InitTypeDef intit structure
 * @retval none
 */
void HW_GPIO_Init(GPIO_TypeDef *port, uint16_t GPIO_Pin, GPIO_InitTypeDef *initStruct)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08a      	sub	sp, #40	@ 0x28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	607a      	str	r2, [r7, #4]
 8003a96:	230a      	movs	r3, #10
 8003a98:	18fb      	adds	r3, r7, r3
 8003a9a:	1c0a      	adds	r2, r1, #0
 8003a9c:	801a      	strh	r2, [r3, #0]

  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4a31      	ldr	r2, [pc, #196]	@ (8003b68 <HW_GPIO_Init+0xdc>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d037      	beq.n	8003b16 <HW_GPIO_Init+0x8a>
 8003aa6:	4a30      	ldr	r2, [pc, #192]	@ (8003b68 <HW_GPIO_Init+0xdc>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d841      	bhi.n	8003b30 <HW_GPIO_Init+0xa4>
 8003aac:	4a2f      	ldr	r2, [pc, #188]	@ (8003b6c <HW_GPIO_Init+0xe0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d024      	beq.n	8003afc <HW_GPIO_Init+0x70>
 8003ab2:	4a2e      	ldr	r2, [pc, #184]	@ (8003b6c <HW_GPIO_Init+0xe0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d83b      	bhi.n	8003b30 <HW_GPIO_Init+0xa4>
 8003ab8:	22a0      	movs	r2, #160	@ 0xa0
 8003aba:	05d2      	lsls	r2, r2, #23
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d003      	beq.n	8003ac8 <HW_GPIO_Init+0x3c>
 8003ac0:	4a2b      	ldr	r2, [pc, #172]	@ (8003b70 <HW_GPIO_Init+0xe4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00d      	beq.n	8003ae2 <HW_GPIO_Init+0x56>
 8003ac6:	e033      	b.n	8003b30 <HW_GPIO_Init+0xa4>
 8003ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003acc:	4b29      	ldr	r3, [pc, #164]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003ace:	2101      	movs	r1, #1
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003ad4:	4b27      	ldr	r3, [pc, #156]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad8:	2201      	movs	r2, #1
 8003ada:	4013      	ands	r3, r2
 8003adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae0:	e032      	b.n	8003b48 <HW_GPIO_Init+0xbc>
 8003ae2:	4b24      	ldr	r3, [pc, #144]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ae6:	4b23      	ldr	r3, [pc, #140]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003ae8:	2102      	movs	r1, #2
 8003aea:	430a      	orrs	r2, r1
 8003aec:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003aee:	4b21      	ldr	r3, [pc, #132]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af2:	2202      	movs	r2, #2
 8003af4:	4013      	ands	r3, r2
 8003af6:	623b      	str	r3, [r7, #32]
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	e025      	b.n	8003b48 <HW_GPIO_Init+0xbc>
 8003afc:	4b1d      	ldr	r3, [pc, #116]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b00:	4b1c      	ldr	r3, [pc, #112]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003b02:	2104      	movs	r1, #4
 8003b04:	430a      	orrs	r2, r1
 8003b06:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b08:	4b1a      	ldr	r3, [pc, #104]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0c:	2204      	movs	r2, #4
 8003b0e:	4013      	ands	r3, r2
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	e018      	b.n	8003b48 <HW_GPIO_Init+0xbc>
 8003b16:	4b17      	ldr	r3, [pc, #92]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b1a:	4b16      	ldr	r3, [pc, #88]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003b1c:	2108      	movs	r1, #8
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b22:	4b14      	ldr	r3, [pc, #80]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b26:	2208      	movs	r2, #8
 8003b28:	4013      	ands	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	e00b      	b.n	8003b48 <HW_GPIO_Init+0xbc>
 8003b30:	4b10      	ldr	r3, [pc, #64]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b34:	4b0f      	ldr	r3, [pc, #60]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003b36:	2180      	movs	r1, #128	@ 0x80
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b74 <HW_GPIO_Init+0xe8>)
 8003b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b40:	2280      	movs	r2, #128	@ 0x80
 8003b42:	4013      	ands	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	697b      	ldr	r3, [r7, #20]

  initStruct->Pin = GPIO_Pin ;
 8003b48:	230a      	movs	r3, #10
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	881a      	ldrh	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	601a      	str	r2, [r3, #0]

  HAL_GPIO_Init(port, initStruct);
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	0011      	movs	r1, r2
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f012 fdd3 	bl	8016704 <HAL_GPIO_Init>
}
 8003b5e:	46c0      	nop			@ (mov r8, r8)
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b00a      	add	sp, #40	@ 0x28
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	50000c00 	.word	0x50000c00
 8003b6c:	50000800 	.word	0x50000800
 8003b70:	50000400 	.word	0x50000400
 8003b74:	40021000 	.word	0x40021000

08003b78 <HW_GPIO_SetIrq>:
 * @param [IN] prio       NVIC priority (0 is highest)
 * @param [IN] irqHandler  points to the  function to execute
 * @retval none
 */
void HW_GPIO_SetIrq(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t prio,  GpioIrqHandler *irqHandler)
{
 8003b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	607a      	str	r2, [r7, #4]
 8003b82:	603b      	str	r3, [r7, #0]
 8003b84:	250a      	movs	r5, #10
 8003b86:	197b      	adds	r3, r7, r5
 8003b88:	1c0a      	adds	r2, r1, #0
 8003b8a:	801a      	strh	r2, [r3, #0]
  IRQn_Type IRQnb;

  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 8003b8c:	197b      	adds	r3, r7, r5
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	0018      	movs	r0, r3
 8003b92:	f000 f863 	bl	8003c5c <HW_GPIO_GetBitPos>
 8003b96:	0003      	movs	r3, r0
 8003b98:	617b      	str	r3, [r7, #20]

  if (irqHandler != NULL)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01c      	beq.n	8003bda <HW_GPIO_SetIrq+0x62>
  {
    GpioIrq[ BitPos ] = irqHandler;
 8003ba0:	4b12      	ldr	r3, [pc, #72]	@ (8003bec <HW_GPIO_SetIrq+0x74>)
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	0092      	lsls	r2, r2, #2
 8003ba6:	6839      	ldr	r1, [r7, #0]
 8003ba8:	50d1      	str	r1, [r2, r3]

    IRQnb = MSP_GetIRQn(GPIO_Pin);
 8003baa:	2613      	movs	r6, #19
 8003bac:	19bc      	adds	r4, r7, r6
 8003bae:	197b      	adds	r3, r7, r5
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f7ff fa97 	bl	80030e6 <MSP_GetIRQn>
 8003bb8:	0003      	movs	r3, r0
 8003bba:	7023      	strb	r3, [r4, #0]

    HAL_NVIC_SetPriority(IRQnb, prio, 0);
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	19bb      	adds	r3, r7, r6
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	b25b      	sxtb	r3, r3
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	f012 fb74 	bl	80162b4 <HAL_NVIC_SetPriority>

    HAL_NVIC_EnableIRQ(IRQnb);
 8003bcc:	19bb      	adds	r3, r7, r6
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	b25b      	sxtb	r3, r3
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f012 fb83 	bl	80162de <HAL_NVIC_EnableIRQ>
  }
  else
  {
    GpioIrq[ BitPos ] = NULL;
  }
}
 8003bd8:	e004      	b.n	8003be4 <HW_GPIO_SetIrq+0x6c>
    GpioIrq[ BitPos ] = NULL;
 8003bda:	4b04      	ldr	r3, [pc, #16]	@ (8003bec <HW_GPIO_SetIrq+0x74>)
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	0092      	lsls	r2, r2, #2
 8003be0:	2100      	movs	r1, #0
 8003be2:	50d1      	str	r1, [r2, r3]
}
 8003be4:	46c0      	nop			@ (mov r8, r8)
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b007      	add	sp, #28
 8003bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bec:	2000017c 	.word	0x2000017c

08003bf0 <HW_GPIO_IrqHandler>:
 *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
 *                   All port bits are not necessarily available on all GPIOs.
 * @retval none
 */
void HW_GPIO_IrqHandler(uint16_t GPIO_Pin)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	0002      	movs	r2, r0
 8003bf8:	1dbb      	adds	r3, r7, #6
 8003bfa:	801a      	strh	r2, [r3, #0]
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin);
 8003bfc:	1dbb      	adds	r3, r7, #6
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	0018      	movs	r0, r3
 8003c02:	f000 f82b 	bl	8003c5c <HW_GPIO_GetBitPos>
 8003c06:	0003      	movs	r3, r0
 8003c08:	60fb      	str	r3, [r7, #12]

  if (GpioIrq[ BitPos ]  != NULL)
 8003c0a:	4b08      	ldr	r3, [pc, #32]	@ (8003c2c <HW_GPIO_IrqHandler+0x3c>)
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	0092      	lsls	r2, r2, #2
 8003c10:	58d3      	ldr	r3, [r2, r3]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d005      	beq.n	8003c22 <HW_GPIO_IrqHandler+0x32>
  {
    GpioIrq[ BitPos ](NULL);
 8003c16:	4b05      	ldr	r3, [pc, #20]	@ (8003c2c <HW_GPIO_IrqHandler+0x3c>)
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	0092      	lsls	r2, r2, #2
 8003c1c:	58d3      	ldr	r3, [r2, r3]
 8003c1e:	2000      	movs	r0, #0
 8003c20:	4798      	blx	r3
  }
}
 8003c22:	46c0      	nop			@ (mov r8, r8)
 8003c24:	46bd      	mov	sp, r7
 8003c26:	b004      	add	sp, #16
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	46c0      	nop			@ (mov r8, r8)
 8003c2c:	2000017c 	.word	0x2000017c

08003c30 <HW_GPIO_Write>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] value New GPIO output value
 * @retval none
 */
void HW_GPIO_Write(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,  uint32_t value)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	607a      	str	r2, [r7, #4]
 8003c3a:	200a      	movs	r0, #10
 8003c3c:	183b      	adds	r3, r7, r0
 8003c3e:	1c0a      	adds	r2, r1, #0
 8003c40:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, (GPIO_PinState) value);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	183b      	adds	r3, r7, r0
 8003c48:	8819      	ldrh	r1, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f012 fed7 	bl	8016a00 <HAL_GPIO_WritePin>
}
 8003c52:	46c0      	nop			@ (mov r8, r8)
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b004      	add	sp, #16
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <HW_GPIO_GetBitPos>:
 *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
 *                   All port bits are not necessarily available on all GPIOs.
 * @retval the position of the bit
 */
static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	0002      	movs	r2, r0
 8003c64:	1dbb      	adds	r3, r7, #6
 8003c66:	801a      	strh	r2, [r3, #0]
  uint8_t PinPos = 0;
 8003c68:	210f      	movs	r1, #15
 8003c6a:	187b      	adds	r3, r7, r1
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	701a      	strb	r2, [r3, #0]

  if ((GPIO_Pin & 0xFF00) != 0)
 8003c70:	1dbb      	adds	r3, r7, #6
 8003c72:	881a      	ldrh	r2, [r3, #0]
 8003c74:	23ff      	movs	r3, #255	@ 0xff
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d005      	beq.n	8003c88 <HW_GPIO_GetBitPos+0x2c>
  {
    PinPos |= 0x8;
 8003c7c:	187b      	adds	r3, r7, r1
 8003c7e:	187a      	adds	r2, r7, r1
 8003c80:	7812      	ldrb	r2, [r2, #0]
 8003c82:	2108      	movs	r1, #8
 8003c84:	430a      	orrs	r2, r1
 8003c86:	701a      	strb	r2, [r3, #0]
  }
  if ((GPIO_Pin & 0xF0F0) != 0)
 8003c88:	1dbb      	adds	r3, r7, #6
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	4a14      	ldr	r2, [pc, #80]	@ (8003ce0 <HW_GPIO_GetBitPos+0x84>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d006      	beq.n	8003ca0 <HW_GPIO_GetBitPos+0x44>
  {
    PinPos |= 0x4;
 8003c92:	220f      	movs	r2, #15
 8003c94:	18bb      	adds	r3, r7, r2
 8003c96:	18ba      	adds	r2, r7, r2
 8003c98:	7812      	ldrb	r2, [r2, #0]
 8003c9a:	2104      	movs	r1, #4
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	701a      	strb	r2, [r3, #0]
  }
  if ((GPIO_Pin & 0xCCCC) != 0)
 8003ca0:	1dbb      	adds	r3, r7, #6
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	4a0f      	ldr	r2, [pc, #60]	@ (8003ce4 <HW_GPIO_GetBitPos+0x88>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d006      	beq.n	8003cb8 <HW_GPIO_GetBitPos+0x5c>
  {
    PinPos |= 0x2;
 8003caa:	220f      	movs	r2, #15
 8003cac:	18bb      	adds	r3, r7, r2
 8003cae:	18ba      	adds	r2, r7, r2
 8003cb0:	7812      	ldrb	r2, [r2, #0]
 8003cb2:	2102      	movs	r1, #2
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	701a      	strb	r2, [r3, #0]
  }
  if ((GPIO_Pin & 0xAAAA) != 0)
 8003cb8:	1dbb      	adds	r3, r7, #6
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8003ce8 <HW_GPIO_GetBitPos+0x8c>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d006      	beq.n	8003cd0 <HW_GPIO_GetBitPos+0x74>
  {
    PinPos |= 0x1;
 8003cc2:	220f      	movs	r2, #15
 8003cc4:	18bb      	adds	r3, r7, r2
 8003cc6:	18ba      	adds	r2, r7, r2
 8003cc8:	7812      	ldrb	r2, [r2, #0]
 8003cca:	2101      	movs	r1, #1
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	701a      	strb	r2, [r3, #0]
  }

  return PinPos;
 8003cd0:	230f      	movs	r3, #15
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	781b      	ldrb	r3, [r3, #0]
}
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b004      	add	sp, #16
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	46c0      	nop			@ (mov r8, r8)
 8003ce0:	0000f0f0 	.word	0x0000f0f0
 8003ce4:	0000cccc 	.word	0x0000cccc
 8003ce8:	0000aaaa 	.word	0x0000aaaa

08003cec <LL_RTC_TIME_GetSubSecond>:
  * @rmtoll SSR          SS            LL_RTC_TIME_GetSubSecond
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf8:	041b      	lsls	r3, r3, #16
 8003cfa:	0c1b      	lsrs	r3, r3, #16
}
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b002      	add	sp, #8
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HW_RTC_Init>:
 * @note The timer is based on the RTC
 * @param none
 * @retval none
 */
void HW_RTC_Init(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  if (HW_RTC_Initalized == false)
 8003d08:	4b09      	ldr	r3, [pc, #36]	@ (8003d30 <HW_RTC_Init+0x2c>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	4053      	eors	r3, r2
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d008      	beq.n	8003d28 <HW_RTC_Init+0x24>
  {
    HW_RTC_SetConfig();
 8003d16:	f000 f80d 	bl	8003d34 <HW_RTC_SetConfig>
    HW_RTC_SetAlarmConfig();
 8003d1a:	f000 f997 	bl	800404c <HW_RTC_SetAlarmConfig>
    HW_RTC_SetTimerContext();
 8003d1e:	f000 f973 	bl	8004008 <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 8003d22:	4b03      	ldr	r3, [pc, #12]	@ (8003d30 <HW_RTC_Init+0x2c>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	701a      	strb	r2, [r3, #0]
  }
}
 8003d28:	46c0      	nop			@ (mov r8, r8)
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	46c0      	nop			@ (mov r8, r8)
 8003d30:	200001bc 	.word	0x200001bc

08003d34 <HW_RTC_SetConfig>:
 * @note The timer is based on the RTC
 * @param none
 * @retval none
 */
static void HW_RTC_SetConfig(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  RtcHandle.Instance = RTC;
 8003d3a:	4b27      	ldr	r3, [pc, #156]	@ (8003dd8 <HW_RTC_SetConfig+0xa4>)
 8003d3c:	4a27      	ldr	r2, [pc, #156]	@ (8003ddc <HW_RTC_SetConfig+0xa8>)
 8003d3e:	601a      	str	r2, [r3, #0]

  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 8003d40:	4b25      	ldr	r3, [pc, #148]	@ (8003dd8 <HW_RTC_SetConfig+0xa4>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	605a      	str	r2, [r3, #4]
  RtcHandle.Init.AsynchPrediv = PREDIV_A; /* RTC_ASYNCH_PREDIV; */
 8003d46:	4b24      	ldr	r3, [pc, #144]	@ (8003dd8 <HW_RTC_SetConfig+0xa4>)
 8003d48:	221f      	movs	r2, #31
 8003d4a:	609a      	str	r2, [r3, #8]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 8003d4c:	4b22      	ldr	r3, [pc, #136]	@ (8003dd8 <HW_RTC_SetConfig+0xa4>)
 8003d4e:	4a24      	ldr	r2, [pc, #144]	@ (8003de0 <HW_RTC_SetConfig+0xac>)
 8003d50:	60da      	str	r2, [r3, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT;
 8003d52:	4b21      	ldr	r3, [pc, #132]	@ (8003dd8 <HW_RTC_SetConfig+0xa4>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	611a      	str	r2, [r3, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003d58:	4b1f      	ldr	r3, [pc, #124]	@ (8003dd8 <HW_RTC_SetConfig+0xa4>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	619a      	str	r2, [r3, #24]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd8 <HW_RTC_SetConfig+0xa4>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	61da      	str	r2, [r3, #28]

  HAL_RTC_Init(&RtcHandle);
 8003d64:	4b1c      	ldr	r3, [pc, #112]	@ (8003dd8 <HW_RTC_SetConfig+0xa4>)
 8003d66:	0018      	movs	r0, r3
 8003d68:	f013 fe1e 	bl	80179a8 <HAL_RTC_Init>

  /*Monday 1st January 2016*/
  RTC_DateStruct.Year = 0;
 8003d6c:	003b      	movs	r3, r7
 8003d6e:	2200      	movs	r2, #0
 8003d70:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct.Month = RTC_MONTH_JANUARY;
 8003d72:	003b      	movs	r3, r7
 8003d74:	2201      	movs	r2, #1
 8003d76:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct.Date = 1;
 8003d78:	003b      	movs	r3, r7
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 8003d7e:	003b      	movs	r3, r7
 8003d80:	2201      	movs	r2, #1
 8003d82:	701a      	strb	r2, [r3, #0]
  HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct, RTC_FORMAT_BIN);
 8003d84:	0039      	movs	r1, r7
 8003d86:	4b14      	ldr	r3, [pc, #80]	@ (8003dd8 <HW_RTC_SetConfig+0xa4>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f013 ffca 	bl	8017d24 <HAL_RTC_SetDate>

  /*at 0:0:0*/
  RTC_TimeStruct.Hours = 0;
 8003d90:	1d3b      	adds	r3, r7, #4
 8003d92:	2200      	movs	r2, #0
 8003d94:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct.Minutes = 0;
 8003d96:	1d3b      	adds	r3, r7, #4
 8003d98:	2200      	movs	r2, #0
 8003d9a:	705a      	strb	r2, [r3, #1]

  RTC_TimeStruct.Seconds = 0;
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	2200      	movs	r2, #0
 8003da0:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct.TimeFormat = 0;
 8003da2:	1d3b      	adds	r3, r7, #4
 8003da4:	2200      	movs	r2, #0
 8003da6:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct.SubSeconds = 0;
 8003da8:	1d3b      	adds	r3, r7, #4
 8003daa:	2200      	movs	r2, #0
 8003dac:	605a      	str	r2, [r3, #4]
  RTC_TimeStruct.StoreOperation = RTC_DAYLIGHTSAVING_NONE;
 8003dae:	1d3b      	adds	r3, r7, #4
 8003db0:	2200      	movs	r2, #0
 8003db2:	611a      	str	r2, [r3, #16]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 8003db4:	1d3b      	adds	r3, r7, #4
 8003db6:	2200      	movs	r2, #0
 8003db8:	60da      	str	r2, [r3, #12]

  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 8003dba:	1d39      	adds	r1, r7, #4
 8003dbc:	4b06      	ldr	r3, [pc, #24]	@ (8003dd8 <HW_RTC_SetConfig+0xa4>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f013 fe8f 	bl	8017ae4 <HAL_RTC_SetTime>

  /*Enable Direct Read of the calendar registers (not through Shadow) */
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 8003dc6:	4b04      	ldr	r3, [pc, #16]	@ (8003dd8 <HW_RTC_SetConfig+0xa4>)
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f014 fb53 	bl	8018474 <HAL_RTCEx_EnableBypassShadow>
}
 8003dce:	46c0      	nop			@ (mov r8, r8)
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b006      	add	sp, #24
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	46c0      	nop			@ (mov r8, r8)
 8003dd8:	200001c0 	.word	0x200001c0
 8003ddc:	40002800 	.word	0x40002800
 8003de0:	000003ff 	.word	0x000003ff

08003de4 <HW_RTC_GetMinimumTimeout>:
 * @brief returns the wake up time in ticks
 * @param none
 * @retval wake up time in ticks
 */
uint32_t HW_RTC_GetMinimumTimeout(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  return (MIN_ALARM_DELAY);
 8003de8:	2303      	movs	r3, #3
}
 8003dea:	0018      	movs	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HW_RTC_ms2Tick>:
 * @brief converts time in ms to time in ticks
 * @param [IN] time in milliseconds
 * @retval returns time in timer ticks
 */
uint32_t HW_RTC_ms2Tick(TimerTime_t timeMilliSec)
{
 8003df0:	b5b0      	push	{r4, r5, r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /*return( ( timeMicroSec / RTC_ALARM_TIME_BASE ) ); */
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	000a      	movs	r2, r1
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	000b      	movs	r3, r1
 8003e00:	0e51      	lsrs	r1, r2, #25
 8003e02:	01dd      	lsls	r5, r3, #7
 8003e04:	430d      	orrs	r5, r1
 8003e06:	01d4      	lsls	r4, r2, #7
 8003e08:	227d      	movs	r2, #125	@ 0x7d
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	0020      	movs	r0, r4
 8003e0e:	0029      	movs	r1, r5
 8003e10:	f7fc fb72 	bl	80004f8 <__aeabi_uldivmod>
 8003e14:	0002      	movs	r2, r0
 8003e16:	000b      	movs	r3, r1
 8003e18:	0013      	movs	r3, r2
}
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	b002      	add	sp, #8
 8003e20:	bdb0      	pop	{r4, r5, r7, pc}

08003e22 <HW_RTC_Tick2ms>:
 * @brief converts time in ticks to time in ms
 * @param [IN] time in timer ticks
 * @retval returns time in milliseconds
 */
TimerTime_t HW_RTC_Tick2ms(uint32_t tick)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b084      	sub	sp, #16
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  /*return( ( timeMicroSec * RTC_ALARM_TIME_BASE ) ); */
  uint32_t seconds = tick >> N_PREDIV_S;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	0a9b      	lsrs	r3, r3, #10
 8003e2e:	60fb      	str	r3, [r7, #12]
  tick = tick & PREDIV_S;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	059b      	lsls	r3, r3, #22
 8003e34:	0d9b      	lsrs	r3, r3, #22
 8003e36:	607b      	str	r3, [r7, #4]
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	0013      	movs	r3, r2
 8003e3c:	015b      	lsls	r3, r3, #5
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	189b      	adds	r3, r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	0019      	movs	r1, r3
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	0013      	movs	r3, r2
 8003e4c:	015b      	lsls	r3, r3, #5
 8003e4e:	1a9b      	subs	r3, r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	189b      	adds	r3, r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	0a9b      	lsrs	r3, r3, #10
 8003e58:	18cb      	adds	r3, r1, r3
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <HW_RTC_SetAlarm>:
 * @brief Set the alarm
 * @note The alarm is set at now (read in this funtion) + timeout
 * @param timeout Duration of the Timer ticks
 */
void HW_RTC_SetAlarm(uint32_t timeout)
{
 8003e64:	b590      	push	{r4, r7, lr}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 8003e6c:	4b14      	ldr	r3, [pc, #80]	@ (8003ec0 <HW_RTC_SetAlarm+0x5c>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	5e9b      	ldrsh	r3, [r3, r2]
 8003e72:	3303      	adds	r3, #3
 8003e74:	001c      	movs	r4, r3
 8003e76:	f000 f825 	bl	8003ec4 <HW_RTC_GetTimerElapsedTime>
 8003e7a:	0002      	movs	r2, r0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	1a9b      	subs	r3, r3, r2
 8003e80:	429c      	cmp	r4, r3
 8003e82:	d204      	bcs.n	8003e8e <HW_RTC_SetAlarm+0x2a>
  {
    LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 8003e84:	2100      	movs	r1, #0
 8003e86:	2004      	movs	r0, #4
 8003e88:	f010 fc0e 	bl	80146a8 <LPM_SetStopMode>
 8003e8c:	e003      	b.n	8003e96 <HW_RTC_SetAlarm+0x32>
  }
  else
  {
    LPM_SetStopMode(LPM_RTC_Id, LPM_Disable);
 8003e8e:	2101      	movs	r1, #1
 8003e90:	2004      	movs	r0, #4
 8003e92:	f010 fc09 	bl	80146a8 <LPM_SetStopMode>
  }

  /*In case stop mode is required */
  if (LPM_GetMode() == LPM_StopMode)
 8003e96:	f010 fc5b 	bl	8014750 <LPM_GetMode>
 8003e9a:	0003      	movs	r3, r0
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d106      	bne.n	8003eae <HW_RTC_SetAlarm+0x4a>
  {
    timeout = timeout -  McuWakeUpTimeCal;
 8003ea0:	4b07      	ldr	r3, [pc, #28]	@ (8003ec0 <HW_RTC_SetAlarm+0x5c>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	5e9b      	ldrsh	r3, [r3, r2]
 8003ea6:	001a      	movs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	1a9b      	subs	r3, r3, r2
 8003eac:	607b      	str	r3, [r7, #4]
  }

  HW_RTC_StartWakeUpAlarm(timeout);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f000 f8d9 	bl	8004068 <HW_RTC_StartWakeUpAlarm>
}
 8003eb6:	46c0      	nop			@ (mov r8, r8)
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	b003      	add	sp, #12
 8003ebc:	bd90      	pop	{r4, r7, pc}
 8003ebe:	46c0      	nop			@ (mov r8, r8)
 8003ec0:	200001be 	.word	0x200001be

08003ec4 <HW_RTC_GetTimerElapsedTime>:
 * @brief Get the RTC timer elapsed time since the last Alarm was set
 * @param none
 * @retval RTC Elapsed time in ticks
 */
uint32_t HW_RTC_GetTimerElapsedTime(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b088      	sub	sp, #32
 8003ec8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003eca:	2308      	movs	r3, #8
 8003ecc:	18fa      	adds	r2, r7, r3
 8003ece:	1d3b      	adds	r3, r7, #4
 8003ed0:	0011      	movs	r1, r2
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f000 fa2c 	bl	8004330 <HW_RTC_GetCalendarValue>
 8003ed8:	0002      	movs	r2, r0
 8003eda:	000b      	movs	r3, r1
 8003edc:	0013      	movs	r3, r2
 8003ede:	61fb      	str	r3, [r7, #28]

  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8003ee0:	4b03      	ldr	r3, [pc, #12]	@ (8003ef0 <HW_RTC_GetTimerElapsedTime+0x2c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	1ad3      	subs	r3, r2, r3
}
 8003ee8:	0018      	movs	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b008      	add	sp, #32
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	2000020c 	.word	0x2000020c

08003ef4 <HW_RTC_GetTimerValue>:
 * @brief Get the RTC timer value
 * @param none
 * @retval RTC Timer value in ticks
 */
uint32_t HW_RTC_GetTimerValue(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003efa:	2308      	movs	r3, #8
 8003efc:	18fa      	adds	r2, r7, r3
 8003efe:	1d3b      	adds	r3, r7, #4
 8003f00:	0011      	movs	r1, r2
 8003f02:	0018      	movs	r0, r3
 8003f04:	f000 fa14 	bl	8004330 <HW_RTC_GetCalendarValue>
 8003f08:	0002      	movs	r2, r0
 8003f0a:	000b      	movs	r3, r1
 8003f0c:	0013      	movs	r3, r2
 8003f0e:	61fb      	str	r3, [r7, #28]

  return (CalendarValue);
 8003f10:	69fb      	ldr	r3, [r7, #28]
}
 8003f12:	0018      	movs	r0, r3
 8003f14:	46bd      	mov	sp, r7
 8003f16:	b008      	add	sp, #32
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <HW_RTC_StopAlarm>:
 * @brief Stop the Alarm
 * @param none
 * @retval none
 */
void HW_RTC_StopAlarm(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 8003f20:	2380      	movs	r3, #128	@ 0x80
 8003f22:	005a      	lsls	r2, r3, #1
 8003f24:	4b0a      	ldr	r3, [pc, #40]	@ (8003f50 <HW_RTC_StopAlarm+0x34>)
 8003f26:	0011      	movs	r1, r2
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f014 f943 	bl	80181b4 <HAL_RTC_DeactivateAlarm>
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&RtcHandle, RTC_FLAG_ALRAF);
 8003f2e:	4b08      	ldr	r3, [pc, #32]	@ (8003f50 <HW_RTC_StopAlarm+0x34>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	22ff      	movs	r2, #255	@ 0xff
 8003f36:	401a      	ands	r2, r3
 8003f38:	4b05      	ldr	r3, [pc, #20]	@ (8003f50 <HW_RTC_StopAlarm+0x34>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4905      	ldr	r1, [pc, #20]	@ (8003f54 <HW_RTC_StopAlarm+0x38>)
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	60da      	str	r2, [r3, #12]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003f42:	4b05      	ldr	r3, [pc, #20]	@ (8003f58 <HW_RTC_StopAlarm+0x3c>)
 8003f44:	2280      	movs	r2, #128	@ 0x80
 8003f46:	0292      	lsls	r2, r2, #10
 8003f48:	615a      	str	r2, [r3, #20]
}
 8003f4a:	46c0      	nop			@ (mov r8, r8)
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	200001c0 	.word	0x200001c0
 8003f54:	fffffe7f 	.word	0xfffffe7f
 8003f58:	40010400 	.word	0x40010400

08003f5c <HW_RTC_IrqHandler>:
 * @brief RTC IRQ Handler on the RTC Alarm
 * @param none
 * @retval none
 */
void HW_RTC_IrqHandler(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
  RTC_HandleTypeDef *hrtc = &RtcHandle;
 8003f62:	4b15      	ldr	r3, [pc, #84]	@ (8003fb8 <HW_RTC_IrqHandler+0x5c>)
 8003f64:	607b      	str	r3, [r7, #4]
  /* enable low power at irq*/
  LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 8003f66:	2100      	movs	r1, #0
 8003f68:	2004      	movs	r0, #4
 8003f6a:	f010 fb9d 	bl	80146a8 <LPM_SetStopMode>

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003f6e:	4b13      	ldr	r3, [pc, #76]	@ (8003fbc <HW_RTC_IrqHandler+0x60>)
 8003f70:	2280      	movs	r2, #128	@ 0x80
 8003f72:	0292      	lsls	r2, r2, #10
 8003f74:	615a      	str	r2, [r3, #20]

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	2380      	movs	r3, #128	@ 0x80
 8003f7e:	015b      	lsls	r3, r3, #5
 8003f80:	4013      	ands	r3, r2
 8003f82:	d014      	beq.n	8003fae <HW_RTC_IrqHandler+0x52>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	2380      	movs	r3, #128	@ 0x80
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d00d      	beq.n	8003fae <HW_RTC_IrqHandler+0x52>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	22ff      	movs	r2, #255	@ 0xff
 8003f9a:	401a      	ands	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4907      	ldr	r1, [pc, #28]	@ (8003fc0 <HW_RTC_IrqHandler+0x64>)
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	60da      	str	r2, [r3, #12]
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f7ff f883 	bl	80030b4 <HAL_RTC_AlarmAEventCallback>
    }
  }
}
 8003fae:	46c0      	nop			@ (mov r8, r8)
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	b002      	add	sp, #8
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	46c0      	nop			@ (mov r8, r8)
 8003fb8:	200001c0 	.word	0x200001c0
 8003fbc:	40010400 	.word	0x40010400
 8003fc0:	fffffe7f 	.word	0xfffffe7f

08003fc4 <HW_RTC_DelayMs>:
 * @brief a delay of delay ms by polling RTC
 * @param delay in ms
 * @retval none
 */
void HW_RTC_DelayMs(uint32_t delay)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  TimerTime_t delayValue = 0;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60fb      	str	r3, [r7, #12]
  TimerTime_t timeout = 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60bb      	str	r3, [r7, #8]

  delayValue = HW_RTC_ms2Tick(delay);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f7ff ff0a 	bl	8003df0 <HW_RTC_ms2Tick>
 8003fdc:	0003      	movs	r3, r0
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Wait delay ms */
  timeout = HW_RTC_GetTimerValue();
 8003fe0:	f7ff ff88 	bl	8003ef4 <HW_RTC_GetTimerValue>
 8003fe4:	0003      	movs	r3, r0
 8003fe6:	60bb      	str	r3, [r7, #8]
  while (((HW_RTC_GetTimerValue() - timeout)) < delayValue)
 8003fe8:	e000      	b.n	8003fec <HW_RTC_DelayMs+0x28>
  {
    __NOP();
 8003fea:	46c0      	nop			@ (mov r8, r8)
  while (((HW_RTC_GetTimerValue() - timeout)) < delayValue)
 8003fec:	f7ff ff82 	bl	8003ef4 <HW_RTC_GetTimerValue>
 8003ff0:	0002      	movs	r2, r0
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d8f6      	bhi.n	8003fea <HW_RTC_DelayMs+0x26>
  }
}
 8003ffc:	46c0      	nop			@ (mov r8, r8)
 8003ffe:	46c0      	nop			@ (mov r8, r8)
 8004000:	46bd      	mov	sp, r7
 8004002:	b004      	add	sp, #16
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <HW_RTC_SetTimerContext>:
 * @brief set Time Reference set also the RTC_DateStruct and RTC_TimeStruct
 * @param none
 * @retval Timer Value
 */
uint32_t HW_RTC_SetTimerContext(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  RtcTimerContext.Rtc_Time = (uint32_t) HW_RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 800400c:	4a07      	ldr	r2, [pc, #28]	@ (800402c <HW_RTC_SetTimerContext+0x24>)
 800400e:	4b08      	ldr	r3, [pc, #32]	@ (8004030 <HW_RTC_SetTimerContext+0x28>)
 8004010:	0011      	movs	r1, r2
 8004012:	0018      	movs	r0, r3
 8004014:	f000 f98c 	bl	8004330 <HW_RTC_GetCalendarValue>
 8004018:	0002      	movs	r2, r0
 800401a:	000b      	movs	r3, r1
 800401c:	4b05      	ldr	r3, [pc, #20]	@ (8004034 <HW_RTC_SetTimerContext+0x2c>)
 800401e:	601a      	str	r2, [r3, #0]
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8004020:	4b04      	ldr	r3, [pc, #16]	@ (8004034 <HW_RTC_SetTimerContext+0x2c>)
 8004022:	681b      	ldr	r3, [r3, #0]
}
 8004024:	0018      	movs	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	46c0      	nop			@ (mov r8, r8)
 800402c:	20000210 	.word	0x20000210
 8004030:	20000224 	.word	0x20000224
 8004034:	2000020c 	.word	0x2000020c

08004038 <HW_RTC_GetTimerContext>:
 * @brief Get the RTC timer Reference
 * @param none
 * @retval Timer Value in  Ticks
 */
uint32_t HW_RTC_GetTimerContext(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  return RtcTimerContext.Rtc_Time;
 800403c:	4b02      	ldr	r3, [pc, #8]	@ (8004048 <HW_RTC_GetTimerContext+0x10>)
 800403e:	681b      	ldr	r3, [r3, #0]
}
 8004040:	0018      	movs	r0, r3
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	46c0      	nop			@ (mov r8, r8)
 8004048:	2000020c 	.word	0x2000020c

0800404c <HW_RTC_SetAlarmConfig>:
 * @brief configure alarm at init
 * @param none
 * @retval none
 */
static void HW_RTC_SetAlarmConfig(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 8004050:	2380      	movs	r3, #128	@ 0x80
 8004052:	005a      	lsls	r2, r3, #1
 8004054:	4b03      	ldr	r3, [pc, #12]	@ (8004064 <HW_RTC_SetAlarmConfig+0x18>)
 8004056:	0011      	movs	r1, r2
 8004058:	0018      	movs	r0, r3
 800405a:	f014 f8ab 	bl	80181b4 <HAL_RTC_DeactivateAlarm>
}
 800405e:	46c0      	nop			@ (mov r8, r8)
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	200001c0 	.word	0x200001c0

08004068 <HW_RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void HW_RTC_StartWakeUpAlarm(uint32_t timeoutValue)
{
 8004068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800406a:	b08d      	sub	sp, #52	@ 0x34
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 8004070:	252e      	movs	r5, #46	@ 0x2e
 8004072:	197b      	adds	r3, r7, r5
 8004074:	2200      	movs	r2, #0
 8004076:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmSeconds = 0;
 8004078:	232c      	movs	r3, #44	@ 0x2c
 800407a:	18fb      	adds	r3, r7, r3
 800407c:	2200      	movs	r2, #0
 800407e:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmMinutes = 0;
 8004080:	232a      	movs	r3, #42	@ 0x2a
 8004082:	18fb      	adds	r3, r7, r3
 8004084:	2200      	movs	r2, #0
 8004086:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmHours = 0;
 8004088:	2328      	movs	r3, #40	@ 0x28
 800408a:	18fb      	adds	r3, r7, r3
 800408c:	2200      	movs	r2, #0
 800408e:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmDays = 0;
 8004090:	2626      	movs	r6, #38	@ 0x26
 8004092:	19bb      	adds	r3, r7, r6
 8004094:	2200      	movs	r2, #0
 8004096:	801a      	strh	r2, [r3, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8004098:	2310      	movs	r3, #16
 800409a:	18fa      	adds	r2, r7, r3
 800409c:	4b9a      	ldr	r3, [pc, #616]	@ (8004308 <HW_RTC_StartWakeUpAlarm+0x2a0>)
 800409e:	3304      	adds	r3, #4
 80040a0:	cb13      	ldmia	r3!, {r0, r1, r4}
 80040a2:	c213      	stmia	r2!, {r0, r1, r4}
 80040a4:	cb03      	ldmia	r3!, {r0, r1}
 80040a6:	c203      	stmia	r2!, {r0, r1}
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 80040a8:	240c      	movs	r4, #12
 80040aa:	193b      	adds	r3, r7, r4
 80040ac:	4a96      	ldr	r2, [pc, #600]	@ (8004308 <HW_RTC_StartWakeUpAlarm+0x2a0>)
 80040ae:	6992      	ldr	r2, [r2, #24]
 80040b0:	601a      	str	r2, [r3, #0]

  HW_RTC_StopAlarm();
 80040b2:	f7ff ff33 	bl	8003f1c <HW_RTC_StopAlarm>

  /*reverse counter */
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 80040b6:	2310      	movs	r3, #16
 80040b8:	18fb      	adds	r3, r7, r3
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	b29a      	uxth	r2, r3
 80040be:	197b      	adds	r3, r7, r5
 80040c0:	4992      	ldr	r1, [pc, #584]	@ (800430c <HW_RTC_StartWakeUpAlarm+0x2a4>)
 80040c2:	1a8a      	subs	r2, r1, r2
 80040c4:	801a      	strh	r2, [r3, #0]
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	059b      	lsls	r3, r3, #22
 80040cc:	0d9b      	lsrs	r3, r3, #22
 80040ce:	b299      	uxth	r1, r3
 80040d0:	197b      	adds	r3, r7, r5
 80040d2:	197a      	adds	r2, r7, r5
 80040d4:	8812      	ldrh	r2, [r2, #0]
 80040d6:	188a      	adds	r2, r1, r2
 80040d8:	801a      	strh	r2, [r3, #0]
  /* convert timeout  to seconds */
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	0a9b      	lsrs	r3, r3, #10
 80040de:	607b      	str	r3, [r7, #4]

  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 80040e0:	193b      	adds	r3, r7, r4
 80040e2:	789a      	ldrb	r2, [r3, #2]
 80040e4:	19bb      	adds	r3, r7, r6
 80040e6:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 80040e8:	e00a      	b.n	8004100 <HW_RTC_StartWakeUpAlarm+0x98>
  {
    timeoutValue -= SECONDS_IN_1DAY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a88      	ldr	r2, [pc, #544]	@ (8004310 <HW_RTC_StartWakeUpAlarm+0x2a8>)
 80040ee:	4694      	mov	ip, r2
 80040f0:	4463      	add	r3, ip
 80040f2:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 80040f4:	2126      	movs	r1, #38	@ 0x26
 80040f6:	187b      	adds	r3, r7, r1
 80040f8:	881a      	ldrh	r2, [r3, #0]
 80040fa:	187b      	adds	r3, r7, r1
 80040fc:	3201      	adds	r2, #1
 80040fe:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a84      	ldr	r2, [pc, #528]	@ (8004314 <HW_RTC_StartWakeUpAlarm+0x2ac>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d8f0      	bhi.n	80040ea <HW_RTC_StartWakeUpAlarm+0x82>
  }

  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8004108:	2310      	movs	r3, #16
 800410a:	18fb      	adds	r3, r7, r3
 800410c:	781a      	ldrb	r2, [r3, #0]
 800410e:	2328      	movs	r3, #40	@ 0x28
 8004110:	18fb      	adds	r3, r7, r3
 8004112:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8004114:	e00a      	b.n	800412c <HW_RTC_StartWakeUpAlarm+0xc4>
  {
    timeoutValue -= SECONDS_IN_1HOUR;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a7f      	ldr	r2, [pc, #508]	@ (8004318 <HW_RTC_StartWakeUpAlarm+0x2b0>)
 800411a:	4694      	mov	ip, r2
 800411c:	4463      	add	r3, ip
 800411e:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 8004120:	2128      	movs	r1, #40	@ 0x28
 8004122:	187b      	adds	r3, r7, r1
 8004124:	881a      	ldrh	r2, [r3, #0]
 8004126:	187b      	adds	r3, r7, r1
 8004128:	3201      	adds	r2, #1
 800412a:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	23e1      	movs	r3, #225	@ 0xe1
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	429a      	cmp	r2, r3
 8004134:	d2ef      	bcs.n	8004116 <HW_RTC_StartWakeUpAlarm+0xae>
  }

  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8004136:	2310      	movs	r3, #16
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	785a      	ldrb	r2, [r3, #1]
 800413c:	232a      	movs	r3, #42	@ 0x2a
 800413e:	18fb      	adds	r3, r7, r3
 8004140:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8004142:	e008      	b.n	8004156 <HW_RTC_StartWakeUpAlarm+0xee>
  {
    timeoutValue -= SECONDS_IN_1MINUTE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3b3c      	subs	r3, #60	@ 0x3c
 8004148:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 800414a:	212a      	movs	r1, #42	@ 0x2a
 800414c:	187b      	adds	r3, r7, r1
 800414e:	881a      	ldrh	r2, [r3, #0]
 8004150:	187b      	adds	r3, r7, r1
 8004152:	3201      	adds	r2, #1
 8004154:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b3b      	cmp	r3, #59	@ 0x3b
 800415a:	d8f3      	bhi.n	8004144 <HW_RTC_StartWakeUpAlarm+0xdc>
  }

  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 800415c:	2310      	movs	r3, #16
 800415e:	18fb      	adds	r3, r7, r3
 8004160:	789b      	ldrb	r3, [r3, #2]
 8004162:	0019      	movs	r1, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	b29a      	uxth	r2, r3
 8004168:	232c      	movs	r3, #44	@ 0x2c
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	188a      	adds	r2, r1, r2
 800416e:	801a      	strh	r2, [r3, #0]

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (PREDIV_S + 1))
 8004170:	e00d      	b.n	800418e <HW_RTC_StartWakeUpAlarm+0x126>
  {
    rtcAlarmSubSeconds -= (PREDIV_S + 1);
 8004172:	222e      	movs	r2, #46	@ 0x2e
 8004174:	18bb      	adds	r3, r7, r2
 8004176:	18ba      	adds	r2, r7, r2
 8004178:	8812      	ldrh	r2, [r2, #0]
 800417a:	4968      	ldr	r1, [pc, #416]	@ (800431c <HW_RTC_StartWakeUpAlarm+0x2b4>)
 800417c:	468c      	mov	ip, r1
 800417e:	4462      	add	r2, ip
 8004180:	801a      	strh	r2, [r3, #0]
    rtcAlarmSeconds++;
 8004182:	212c      	movs	r1, #44	@ 0x2c
 8004184:	187b      	adds	r3, r7, r1
 8004186:	881a      	ldrh	r2, [r3, #0]
 8004188:	187b      	adds	r3, r7, r1
 800418a:	3201      	adds	r2, #1
 800418c:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSubSeconds >= (PREDIV_S + 1))
 800418e:	232e      	movs	r3, #46	@ 0x2e
 8004190:	18fb      	adds	r3, r7, r3
 8004192:	881a      	ldrh	r2, [r3, #0]
 8004194:	2380      	movs	r3, #128	@ 0x80
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	429a      	cmp	r2, r3
 800419a:	d2ea      	bcs.n	8004172 <HW_RTC_StartWakeUpAlarm+0x10a>
  }

  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 800419c:	e00b      	b.n	80041b6 <HW_RTC_StartWakeUpAlarm+0x14e>
  {
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 800419e:	222c      	movs	r2, #44	@ 0x2c
 80041a0:	18bb      	adds	r3, r7, r2
 80041a2:	18ba      	adds	r2, r7, r2
 80041a4:	8812      	ldrh	r2, [r2, #0]
 80041a6:	3a3c      	subs	r2, #60	@ 0x3c
 80041a8:	801a      	strh	r2, [r3, #0]
    rtcAlarmMinutes++;
 80041aa:	212a      	movs	r1, #42	@ 0x2a
 80041ac:	187b      	adds	r3, r7, r1
 80041ae:	881a      	ldrh	r2, [r3, #0]
 80041b0:	187b      	adds	r3, r7, r1
 80041b2:	3201      	adds	r2, #1
 80041b4:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 80041b6:	232c      	movs	r3, #44	@ 0x2c
 80041b8:	18fb      	adds	r3, r7, r3
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	2b3b      	cmp	r3, #59	@ 0x3b
 80041be:	d8ee      	bhi.n	800419e <HW_RTC_StartWakeUpAlarm+0x136>
  }

  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 80041c0:	e00b      	b.n	80041da <HW_RTC_StartWakeUpAlarm+0x172>
  {
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 80041c2:	222a      	movs	r2, #42	@ 0x2a
 80041c4:	18bb      	adds	r3, r7, r2
 80041c6:	18ba      	adds	r2, r7, r2
 80041c8:	8812      	ldrh	r2, [r2, #0]
 80041ca:	3a3c      	subs	r2, #60	@ 0x3c
 80041cc:	801a      	strh	r2, [r3, #0]
    rtcAlarmHours++;
 80041ce:	2128      	movs	r1, #40	@ 0x28
 80041d0:	187b      	adds	r3, r7, r1
 80041d2:	881a      	ldrh	r2, [r3, #0]
 80041d4:	187b      	adds	r3, r7, r1
 80041d6:	3201      	adds	r2, #1
 80041d8:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 80041da:	232a      	movs	r3, #42	@ 0x2a
 80041dc:	18fb      	adds	r3, r7, r3
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	2b3b      	cmp	r3, #59	@ 0x3b
 80041e2:	d8ee      	bhi.n	80041c2 <HW_RTC_StartWakeUpAlarm+0x15a>
  }

  while (rtcAlarmHours >= HOURS_IN_1DAY)
 80041e4:	e00b      	b.n	80041fe <HW_RTC_StartWakeUpAlarm+0x196>
  {
    rtcAlarmHours -= HOURS_IN_1DAY;
 80041e6:	2228      	movs	r2, #40	@ 0x28
 80041e8:	18bb      	adds	r3, r7, r2
 80041ea:	18ba      	adds	r2, r7, r2
 80041ec:	8812      	ldrh	r2, [r2, #0]
 80041ee:	3a18      	subs	r2, #24
 80041f0:	801a      	strh	r2, [r3, #0]
    rtcAlarmDays++;
 80041f2:	2126      	movs	r1, #38	@ 0x26
 80041f4:	187b      	adds	r3, r7, r1
 80041f6:	881a      	ldrh	r2, [r3, #0]
 80041f8:	187b      	adds	r3, r7, r1
 80041fa:	3201      	adds	r2, #1
 80041fc:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 80041fe:	2328      	movs	r3, #40	@ 0x28
 8004200:	18fb      	adds	r3, r7, r3
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	2b17      	cmp	r3, #23
 8004206:	d8ee      	bhi.n	80041e6 <HW_RTC_StartWakeUpAlarm+0x17e>
  }

  if (RTC_DateStruct.Year % 4 == 0)
 8004208:	210c      	movs	r1, #12
 800420a:	187b      	adds	r3, r7, r1
 800420c:	78db      	ldrb	r3, [r3, #3]
 800420e:	2203      	movs	r2, #3
 8004210:	4013      	ands	r3, r2
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d119      	bne.n	800424c <HW_RTC_StartWakeUpAlarm+0x1e4>
  {
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8004218:	187b      	adds	r3, r7, r1
 800421a:	785b      	ldrb	r3, [r3, #1]
 800421c:	3b01      	subs	r3, #1
 800421e:	4a40      	ldr	r2, [pc, #256]	@ (8004320 <HW_RTC_StartWakeUpAlarm+0x2b8>)
 8004220:	5cd3      	ldrb	r3, [r2, r3]
 8004222:	001a      	movs	r2, r3
 8004224:	2426      	movs	r4, #38	@ 0x26
 8004226:	193b      	adds	r3, r7, r4
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	4293      	cmp	r3, r2
 800422c:	d928      	bls.n	8004280 <HW_RTC_StartWakeUpAlarm+0x218>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 800422e:	193b      	adds	r3, r7, r4
 8004230:	8818      	ldrh	r0, [r3, #0]
 8004232:	187b      	adds	r3, r7, r1
 8004234:	785b      	ldrb	r3, [r3, #1]
 8004236:	3b01      	subs	r3, #1
 8004238:	4a39      	ldr	r2, [pc, #228]	@ (8004320 <HW_RTC_StartWakeUpAlarm+0x2b8>)
 800423a:	5cd3      	ldrb	r3, [r2, r3]
 800423c:	0019      	movs	r1, r3
 800423e:	f7fc f8dd 	bl	80003fc <__aeabi_idivmod>
 8004242:	000b      	movs	r3, r1
 8004244:	001a      	movs	r2, r3
 8004246:	193b      	adds	r3, r7, r4
 8004248:	801a      	strh	r2, [r3, #0]
 800424a:	e019      	b.n	8004280 <HW_RTC_StartWakeUpAlarm+0x218>
    }
  }
  else
  {
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800424c:	210c      	movs	r1, #12
 800424e:	187b      	adds	r3, r7, r1
 8004250:	785b      	ldrb	r3, [r3, #1]
 8004252:	3b01      	subs	r3, #1
 8004254:	4a33      	ldr	r2, [pc, #204]	@ (8004324 <HW_RTC_StartWakeUpAlarm+0x2bc>)
 8004256:	5cd3      	ldrb	r3, [r2, r3]
 8004258:	001a      	movs	r2, r3
 800425a:	2426      	movs	r4, #38	@ 0x26
 800425c:	193b      	adds	r3, r7, r4
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	4293      	cmp	r3, r2
 8004262:	d90d      	bls.n	8004280 <HW_RTC_StartWakeUpAlarm+0x218>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8004264:	193b      	adds	r3, r7, r4
 8004266:	8818      	ldrh	r0, [r3, #0]
 8004268:	187b      	adds	r3, r7, r1
 800426a:	785b      	ldrb	r3, [r3, #1]
 800426c:	3b01      	subs	r3, #1
 800426e:	4a2d      	ldr	r2, [pc, #180]	@ (8004324 <HW_RTC_StartWakeUpAlarm+0x2bc>)
 8004270:	5cd3      	ldrb	r3, [r2, r3]
 8004272:	0019      	movs	r1, r3
 8004274:	f7fc f8c2 	bl	80003fc <__aeabi_idivmod>
 8004278:	000b      	movs	r3, r1
 800427a:	001a      	movs	r2, r3
 800427c:	193b      	adds	r3, r7, r4
 800427e:	801a      	strh	r2, [r3, #0]
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 8004280:	232e      	movs	r3, #46	@ 0x2e
 8004282:	18fb      	adds	r3, r7, r3
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	4a21      	ldr	r2, [pc, #132]	@ (800430c <HW_RTC_StartWakeUpAlarm+0x2a4>)
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	001a      	movs	r2, r3
 800428c:	4b26      	ldr	r3, [pc, #152]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 800428e:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK;
 8004290:	4b25      	ldr	r3, [pc, #148]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 8004292:	22a0      	movs	r2, #160	@ 0xa0
 8004294:	0512      	lsls	r2, r2, #20
 8004296:	619a      	str	r2, [r3, #24]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8004298:	232c      	movs	r3, #44	@ 0x2c
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	4b21      	ldr	r3, [pc, #132]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 80042a2:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 80042a4:	232a      	movs	r3, #42	@ 0x2a
 80042a6:	18fb      	adds	r3, r7, r3
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 80042ae:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 80042b0:	2328      	movs	r3, #40	@ 0x28
 80042b2:	18fb      	adds	r3, r7, r3
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 80042ba:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80042bc:	2326      	movs	r3, #38	@ 0x26
 80042be:	18fb      	adds	r3, r7, r3
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	b2d9      	uxtb	r1, r3
 80042c4:	4b18      	ldr	r3, [pc, #96]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 80042c6:	2220      	movs	r2, #32
 80042c8:	5499      	strb	r1, [r3, r2]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80042ca:	2310      	movs	r3, #16
 80042cc:	18fb      	adds	r3, r7, r3
 80042ce:	78da      	ldrb	r2, [r3, #3]
 80042d0:	4b15      	ldr	r3, [pc, #84]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 80042d2:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80042d4:	4b14      	ldr	r3, [pc, #80]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 80042da:	4b13      	ldr	r3, [pc, #76]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 80042dc:	2200      	movs	r2, #0
 80042de:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80042e0:	4b11      	ldr	r3, [pc, #68]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 80042e2:	2280      	movs	r2, #128	@ 0x80
 80042e4:	0052      	lsls	r2, r2, #1
 80042e6:	625a      	str	r2, [r3, #36]	@ 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80042e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80042ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	611a      	str	r2, [r3, #16]

  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80042f4:	490c      	ldr	r1, [pc, #48]	@ (8004328 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 80042f6:	4b0d      	ldr	r3, [pc, #52]	@ (800432c <HW_RTC_StartWakeUpAlarm+0x2c4>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	0018      	movs	r0, r3
 80042fc:	f013 fe0e 	bl	8017f1c <HAL_RTC_SetAlarm_IT>
}
 8004300:	46c0      	nop			@ (mov r8, r8)
 8004302:	46bd      	mov	sp, r7
 8004304:	b00d      	add	sp, #52	@ 0x34
 8004306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004308:	2000020c 	.word	0x2000020c
 800430c:	000003ff 	.word	0x000003ff
 8004310:	fffeae80 	.word	0xfffeae80
 8004314:	0001517f 	.word	0x0001517f
 8004318:	fffff1f0 	.word	0xfffff1f0
 800431c:	fffffc00 	.word	0xfffffc00
 8004320:	0801ac74 	.word	0x0801ac74
 8004324:	0801ac68 	.word	0x0801ac68
 8004328:	200001e4 	.word	0x200001e4
 800432c:	200001c0 	.word	0x200001c0

08004330 <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint64_t HW_RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8004330:	b5b0      	push	{r4, r5, r7, lr}
 8004332:	b08c      	sub	sp, #48	@ 0x30
 8004334:	af00      	add	r7, sp, #0
 8004336:	6178      	str	r0, [r7, #20]
 8004338:	6139      	str	r1, [r7, #16]
  uint64_t calendarValue = 0;
 800433a:	2200      	movs	r2, #0
 800433c:	2300      	movs	r3, #0
 800433e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004340:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t first_read;
  uint32_t correction;
  uint32_t seconds;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 8004342:	6939      	ldr	r1, [r7, #16]
 8004344:	4b4a      	ldr	r3, [pc, #296]	@ (8004470 <HW_RTC_GetCalendarValue+0x140>)
 8004346:	2200      	movs	r2, #0
 8004348:	0018      	movs	r0, r3
 800434a:	f013 fc8f 	bl	8017c6c <HAL_RTC_GetTime>

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
 800434e:	4b49      	ldr	r3, [pc, #292]	@ (8004474 <HW_RTC_GetCalendarValue+0x144>)
 8004350:	0018      	movs	r0, r3
 8004352:	f7ff fccb 	bl	8003cec <LL_RTC_TIME_GetSubSecond>
 8004356:	0003      	movs	r3, r0
 8004358:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_RTC_GetDate(&RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN);
 800435a:	6979      	ldr	r1, [r7, #20]
 800435c:	4b44      	ldr	r3, [pc, #272]	@ (8004470 <HW_RTC_GetCalendarValue+0x140>)
 800435e:	2200      	movs	r2, #0
 8004360:	0018      	movs	r0, r3
 8004362:	f013 fd8d 	bl	8017e80 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 8004366:	6939      	ldr	r1, [r7, #16]
 8004368:	4b41      	ldr	r3, [pc, #260]	@ (8004470 <HW_RTC_GetCalendarValue+0x140>)
 800436a:	2200      	movs	r2, #0
 800436c:	0018      	movs	r0, r3
 800436e:	f013 fc7d 	bl	8017c6c <HAL_RTC_GetTime>

  }
  while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 8004372:	4b40      	ldr	r3, [pc, #256]	@ (8004474 <HW_RTC_GetCalendarValue+0x144>)
 8004374:	0018      	movs	r0, r3
 8004376:	f7ff fcb9 	bl	8003cec <LL_RTC_TIME_GetSubSecond>
 800437a:	0002      	movs	r2, r0
 800437c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437e:	4293      	cmp	r3, r2
 8004380:	d1e5      	bne.n	800434e <HW_RTC_GetCalendarValue+0x1e>

  /* calculte amount of elapsed days since 01/01/2000 */
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	78db      	ldrb	r3, [r3, #3]
 8004386:	001a      	movs	r2, r3
 8004388:	4b3b      	ldr	r3, [pc, #236]	@ (8004478 <HW_RTC_GetCalendarValue+0x148>)
 800438a:	4353      	muls	r3, r2
 800438c:	3303      	adds	r3, #3
 800438e:	089b      	lsrs	r3, r3, #2
 8004390:	623b      	str	r3, [r7, #32]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	78db      	ldrb	r3, [r3, #3]
 8004396:	2203      	movs	r2, #3
 8004398:	4013      	ands	r3, r2
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HW_RTC_GetCalendarValue+0x74>
 80043a0:	4b36      	ldr	r3, [pc, #216]	@ (800447c <HW_RTC_GetCalendarValue+0x14c>)
 80043a2:	e000      	b.n	80043a6 <HW_RTC_GetCalendarValue+0x76>
 80043a4:	4b36      	ldr	r3, [pc, #216]	@ (8004480 <HW_RTC_GetCalendarValue+0x150>)
 80043a6:	61fb      	str	r3, [r7, #28]

  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	785b      	ldrb	r3, [r3, #1]
 80043ac:	1e5a      	subs	r2, r3, #1
 80043ae:	0013      	movs	r3, r2
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	1a9b      	subs	r3, r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	189b      	adds	r3, r3, r2
 80043b8:	3301      	adds	r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	da00      	bge.n	80043c0 <HW_RTC_GetCalendarValue+0x90>
 80043be:	3301      	adds	r3, #1
 80043c0:	105b      	asrs	r3, r3, #1
 80043c2:	0019      	movs	r1, r3
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	785b      	ldrb	r3, [r3, #1]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	40da      	lsrs	r2, r3
 80043d0:	0013      	movs	r3, r2
 80043d2:	2203      	movs	r2, #3
 80043d4:	4013      	ands	r3, r2
 80043d6:	1acb      	subs	r3, r1, r3
 80043d8:	6a3a      	ldr	r2, [r7, #32]
 80043da:	18d3      	adds	r3, r2, r3
 80043dc:	623b      	str	r3, [r7, #32]

  seconds += (RTC_DateStruct->Date - 1);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	789b      	ldrb	r3, [r3, #2]
 80043e2:	001a      	movs	r2, r3
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	18d3      	adds	r3, r2, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	623b      	str	r3, [r7, #32]

  /* convert from days to seconds */
  seconds *= SECONDS_IN_1DAY;
 80043ec:	6a3a      	ldr	r2, [r7, #32]
 80043ee:	0013      	movs	r3, r2
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	189b      	adds	r3, r3, r2
 80043f4:	011a      	lsls	r2, r3, #4
 80043f6:	1ad2      	subs	r2, r2, r3
 80043f8:	0113      	lsls	r3, r2, #4
 80043fa:	1a9b      	subs	r3, r3, r2
 80043fc:	01db      	lsls	r3, r3, #7
 80043fe:	623b      	str	r3, [r7, #32]

  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	789b      	ldrb	r3, [r3, #2]
 8004404:	0019      	movs	r1, r3
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
              ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	001a      	movs	r2, r3
 800440c:	0013      	movs	r3, r2
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	011a      	lsls	r2, r3, #4
 8004414:	1ad2      	subs	r2, r2, r3
 8004416:	0113      	lsls	r3, r2, #4
 8004418:	001a      	movs	r2, r3
 800441a:	0010      	movs	r0, r2
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	785b      	ldrb	r3, [r3, #1]
 8004420:	001a      	movs	r2, r3
 8004422:	0013      	movs	r3, r2
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	1a9b      	subs	r3, r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	18c3      	adds	r3, r0, r3
 800442c:	18cb      	adds	r3, r1, r3
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 800442e:	6a3a      	ldr	r2, [r7, #32]
 8004430:	18d3      	adds	r3, r2, r3
 8004432:	623b      	str	r3, [r7, #32]



  calendarValue = (((uint64_t) seconds) << N_PREDIV_S) + (PREDIV_S - RTC_TimeStruct->SubSeconds);
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	60bb      	str	r3, [r7, #8]
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	0011      	movs	r1, r2
 8004442:	0d8d      	lsrs	r5, r1, #22
 8004444:	0013      	movs	r3, r2
 8004446:	029c      	lsls	r4, r3, #10
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	4a0d      	ldr	r2, [pc, #52]	@ (8004484 <HW_RTC_GetCalendarValue+0x154>)
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	603b      	str	r3, [r7, #0]
 8004452:	2300      	movs	r3, #0
 8004454:	607b      	str	r3, [r7, #4]
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	1912      	adds	r2, r2, r4
 800445c:	416b      	adcs	r3, r5
 800445e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004460:	62fb      	str	r3, [r7, #44]	@ 0x2c

  return (calendarValue);
 8004462:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004466:	0010      	movs	r0, r2
 8004468:	0019      	movs	r1, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	b00c      	add	sp, #48	@ 0x30
 800446e:	bdb0      	pop	{r4, r5, r7, pc}
 8004470:	200001c0 	.word	0x200001c0
 8004474:	40002800 	.word	0x40002800
 8004478:	000005b5 	.word	0x000005b5
 800447c:	00445550 	.word	0x00445550
 8004480:	0099aaa0 	.word	0x0099aaa0
 8004484:	000003ff 	.word	0x000003ff

08004488 <HW_RTC_GetCalendarTime>:
 * \param [IN]   pointer to ms
 *
 * \return uint32_t seconds
 */
uint32_t HW_RTC_GetCalendarTime(uint16_t *mSeconds)
{
 8004488:	b5b0      	push	{r4, r5, r7, lr}
 800448a:	b08c      	sub	sp, #48	@ 0x30
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8004490:	230c      	movs	r3, #12
 8004492:	18fa      	adds	r2, r7, r3
 8004494:	2308      	movs	r3, #8
 8004496:	18fb      	adds	r3, r7, r3
 8004498:	0011      	movs	r1, r2
 800449a:	0018      	movs	r0, r3
 800449c:	f7ff ff48 	bl	8004330 <HW_RTC_GetCalendarValue>
 80044a0:	0002      	movs	r2, r0
 80044a2:	000b      	movs	r3, r1
 80044a4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80044a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);
 80044a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044aa:	059b      	lsls	r3, r3, #22
 80044ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044ae:	0a94      	lsrs	r4, r2, #10
 80044b0:	431c      	orrs	r4, r3
 80044b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b4:	0a9d      	lsrs	r5, r3, #10
 80044b6:	0023      	movs	r3, r4
 80044b8:	627b      	str	r3, [r7, #36]	@ 0x24

  ticks = (uint32_t) calendarValue & PREDIV_S;
 80044ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044bc:	059b      	lsls	r3, r3, #22
 80044be:	0d9b      	lsrs	r3, r3, #22
 80044c0:	623b      	str	r3, [r7, #32]

  *mSeconds = HW_RTC_Tick2ms(ticks);
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	0018      	movs	r0, r3
 80044c6:	f7ff fcac 	bl	8003e22 <HW_RTC_Tick2ms>
 80044ca:	0003      	movs	r3, r0
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	801a      	strh	r2, [r3, #0]

  return seconds;
 80044d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80044d4:	0018      	movs	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	b00c      	add	sp, #48	@ 0x30
 80044da:	bdb0      	pop	{r4, r5, r7, pc}

080044dc <HW_RTC_BKUPWrite>:

void HW_RTC_BKUPWrite(uint32_t Data0, uint32_t Data1)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, Data0);
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	4b07      	ldr	r3, [pc, #28]	@ (8004508 <HW_RTC_BKUPWrite+0x2c>)
 80044ea:	2100      	movs	r1, #0
 80044ec:	0018      	movs	r0, r3
 80044ee:	f013 ff97 	bl	8018420 <HAL_RTCEx_BKUPWrite>
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, Data1);
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	4b04      	ldr	r3, [pc, #16]	@ (8004508 <HW_RTC_BKUPWrite+0x2c>)
 80044f6:	2101      	movs	r1, #1
 80044f8:	0018      	movs	r0, r3
 80044fa:	f013 ff91 	bl	8018420 <HAL_RTCEx_BKUPWrite>
}
 80044fe:	46c0      	nop			@ (mov r8, r8)
 8004500:	46bd      	mov	sp, r7
 8004502:	b002      	add	sp, #8
 8004504:	bd80      	pop	{r7, pc}
 8004506:	46c0      	nop			@ (mov r8, r8)
 8004508:	200001c0 	.word	0x200001c0

0800450c <HW_RTC_BKUPRead>:

void HW_RTC_BKUPRead(uint32_t *Data0, uint32_t *Data1)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 8004516:	4b0a      	ldr	r3, [pc, #40]	@ (8004540 <HW_RTC_BKUPRead+0x34>)
 8004518:	2100      	movs	r1, #0
 800451a:	0018      	movs	r0, r3
 800451c:	f013 ff96 	bl	801844c <HAL_RTCEx_BKUPRead>
 8004520:	0002      	movs	r2, r0
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	601a      	str	r2, [r3, #0]
  *Data1 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1);
 8004526:	4b06      	ldr	r3, [pc, #24]	@ (8004540 <HW_RTC_BKUPRead+0x34>)
 8004528:	2101      	movs	r1, #1
 800452a:	0018      	movs	r0, r3
 800452c:	f013 ff8e 	bl	801844c <HAL_RTCEx_BKUPRead>
 8004530:	0002      	movs	r2, r0
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	601a      	str	r2, [r3, #0]
}
 8004536:	46c0      	nop			@ (mov r8, r8)
 8004538:	46bd      	mov	sp, r7
 800453a:	b002      	add	sp, #8
 800453c:	bd80      	pop	{r7, pc}
 800453e:	46c0      	nop			@ (mov r8, r8)
 8004540:	200001c0 	.word	0x200001c0

08004544 <HW_SPI_Init>:
 * @brief Initializes the SPI object and MCU peripheral
 *
 * @param [IN] none
 */
void HW_SPI_Init(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0

  /*##-1- Configure the SPI peripheral */
  /* Set the SPI parameters */

  hspi.Instance = SPI1;
 8004548:	4b1d      	ldr	r3, [pc, #116]	@ (80045c0 <HW_SPI_Init+0x7c>)
 800454a:	4a1e      	ldr	r2, [pc, #120]	@ (80045c4 <HW_SPI_Init+0x80>)
 800454c:	601a      	str	r2, [r3, #0]

  hspi.Init.BaudRatePrescaler = SpiFrequency(10000000);
 800454e:	4b1e      	ldr	r3, [pc, #120]	@ (80045c8 <HW_SPI_Init+0x84>)
 8004550:	0018      	movs	r0, r3
 8004552:	f000 f89b 	bl	800468c <SpiFrequency>
 8004556:	0002      	movs	r2, r0
 8004558:	4b19      	ldr	r3, [pc, #100]	@ (80045c0 <HW_SPI_Init+0x7c>)
 800455a:	61da      	str	r2, [r3, #28]
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 800455c:	4b18      	ldr	r3, [pc, #96]	@ (80045c0 <HW_SPI_Init+0x7c>)
 800455e:	2200      	movs	r2, #0
 8004560:	609a      	str	r2, [r3, #8]
  hspi.Init.Mode           = SPI_MODE_MASTER;
 8004562:	4b17      	ldr	r3, [pc, #92]	@ (80045c0 <HW_SPI_Init+0x7c>)
 8004564:	2282      	movs	r2, #130	@ 0x82
 8004566:	0052      	lsls	r2, r2, #1
 8004568:	605a      	str	r2, [r3, #4]
  hspi.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800456a:	4b15      	ldr	r3, [pc, #84]	@ (80045c0 <HW_SPI_Init+0x7c>)
 800456c:	2200      	movs	r2, #0
 800456e:	611a      	str	r2, [r3, #16]
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8004570:	4b13      	ldr	r3, [pc, #76]	@ (80045c0 <HW_SPI_Init+0x7c>)
 8004572:	2200      	movs	r2, #0
 8004574:	615a      	str	r2, [r3, #20]
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 8004576:	4b12      	ldr	r3, [pc, #72]	@ (80045c0 <HW_SPI_Init+0x7c>)
 8004578:	2200      	movs	r2, #0
 800457a:	60da      	str	r2, [r3, #12]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800457c:	4b10      	ldr	r3, [pc, #64]	@ (80045c0 <HW_SPI_Init+0x7c>)
 800457e:	2200      	movs	r2, #0
 8004580:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8004582:	4b0f      	ldr	r3, [pc, #60]	@ (80045c0 <HW_SPI_Init+0x7c>)
 8004584:	2200      	movs	r2, #0
 8004586:	621a      	str	r2, [r3, #32]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 8004588:	4b0d      	ldr	r3, [pc, #52]	@ (80045c0 <HW_SPI_Init+0x7c>)
 800458a:	2280      	movs	r2, #128	@ 0x80
 800458c:	0092      	lsls	r2, r2, #2
 800458e:	619a      	str	r2, [r3, #24]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 8004590:	4b0b      	ldr	r3, [pc, #44]	@ (80045c0 <HW_SPI_Init+0x7c>)
 8004592:	2200      	movs	r2, #0
 8004594:	625a      	str	r2, [r3, #36]	@ 0x24


  SPI_CLK_ENABLE();
 8004596:	4b0d      	ldr	r3, [pc, #52]	@ (80045cc <HW_SPI_Init+0x88>)
 8004598:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800459a:	4b0c      	ldr	r3, [pc, #48]	@ (80045cc <HW_SPI_Init+0x88>)
 800459c:	2180      	movs	r1, #128	@ 0x80
 800459e:	0149      	lsls	r1, r1, #5
 80045a0:	430a      	orrs	r2, r1
 80045a2:	635a      	str	r2, [r3, #52]	@ 0x34


  if (HAL_SPI_Init(&hspi) != HAL_OK)
 80045a4:	4b06      	ldr	r3, [pc, #24]	@ (80045c0 <HW_SPI_Init+0x7c>)
 80045a6:	0018      	movs	r0, r3
 80045a8:	f013 ff98 	bl	80184dc <HAL_SPI_Init>
 80045ac:	1e03      	subs	r3, r0, #0
 80045ae:	d001      	beq.n	80045b4 <HW_SPI_Init+0x70>
  {
    /* Initialization Error */
    Error_Handler();
 80045b0:	f7ff fa62 	bl	8003a78 <Error_Handler>
  }

  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoInit();
 80045b4:	f000 f80c 	bl	80045d0 <HW_SPI_IoInit>
}
 80045b8:	46c0      	nop			@ (mov r8, r8)
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	46c0      	nop			@ (mov r8, r8)
 80045c0:	20000228 	.word	0x20000228
 80045c4:	40013000 	.word	0x40013000
 80045c8:	00989680 	.word	0x00989680
 80045cc:	40021000 	.word	0x40021000

080045d0 <HW_SPI_IoInit>:
  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoDeInit();
}

void HW_SPI_IoInit(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 80045d6:	1d3b      	adds	r3, r7, #4
 80045d8:	0018      	movs	r0, r3
 80045da:	2314      	movs	r3, #20
 80045dc:	001a      	movs	r2, r3
 80045de:	2100      	movs	r1, #0
 80045e0:	f015 f9e4 	bl	80199ac <memset>


  initStruct.Mode = GPIO_MODE_AF_PP;
 80045e4:	1d3b      	adds	r3, r7, #4
 80045e6:	2202      	movs	r2, #2
 80045e8:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL  ;
 80045ea:	1d3b      	adds	r3, r7, #4
 80045ec:	2200      	movs	r2, #0
 80045ee:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80045f0:	1d3b      	adds	r3, r7, #4
 80045f2:	2203      	movs	r2, #3
 80045f4:	60da      	str	r2, [r3, #12]
  initStruct.Alternate = SPI1_AF ;
 80045f6:	1d3b      	adds	r3, r7, #4
 80045f8:	2200      	movs	r2, #0
 80045fa:	611a      	str	r2, [r3, #16]

  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 80045fc:	1d3b      	adds	r3, r7, #4
 80045fe:	4816      	ldr	r0, [pc, #88]	@ (8004658 <HW_SPI_IoInit+0x88>)
 8004600:	001a      	movs	r2, r3
 8004602:	2108      	movs	r1, #8
 8004604:	f7ff fa42 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 8004608:	1d3a      	adds	r2, r7, #4
 800460a:	23a0      	movs	r3, #160	@ 0xa0
 800460c:	05db      	lsls	r3, r3, #23
 800460e:	2140      	movs	r1, #64	@ 0x40
 8004610:	0018      	movs	r0, r3
 8004612:	f7ff fa3b 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 8004616:	1d3a      	adds	r2, r7, #4
 8004618:	23a0      	movs	r3, #160	@ 0xa0
 800461a:	05db      	lsls	r3, r3, #23
 800461c:	2180      	movs	r1, #128	@ 0x80
 800461e:	0018      	movs	r0, r3
 8004620:	f7ff fa34 	bl	8003a8c <HW_GPIO_Init>

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004624:	1d3b      	adds	r3, r7, #4
 8004626:	2201      	movs	r2, #1
 8004628:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 800462a:	1d3b      	adds	r3, r7, #4
 800462c:	2200      	movs	r2, #0
 800462e:	609a      	str	r2, [r3, #8]

  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 8004630:	1d3a      	adds	r2, r7, #4
 8004632:	2380      	movs	r3, #128	@ 0x80
 8004634:	0219      	lsls	r1, r3, #8
 8004636:	23a0      	movs	r3, #160	@ 0xa0
 8004638:	05db      	lsls	r3, r3, #23
 800463a:	0018      	movs	r0, r3
 800463c:	f7ff fa26 	bl	8003a8c <HW_GPIO_Init>

  HW_GPIO_Write(RADIO_NSS_PORT, RADIO_NSS_PIN, 1);
 8004640:	2380      	movs	r3, #128	@ 0x80
 8004642:	0219      	lsls	r1, r3, #8
 8004644:	23a0      	movs	r3, #160	@ 0xa0
 8004646:	05db      	lsls	r3, r3, #23
 8004648:	2201      	movs	r2, #1
 800464a:	0018      	movs	r0, r3
 800464c:	f7ff faf0 	bl	8003c30 <HW_GPIO_Write>
}
 8004650:	46c0      	nop			@ (mov r8, r8)
 8004652:	46bd      	mov	sp, r7
 8004654:	b006      	add	sp, #24
 8004656:	bd80      	pop	{r7, pc}
 8004658:	50000400 	.word	0x50000400

0800465c <HW_SPI_InOut>:
 *
 * @param [IN] outData Byte to be sent
 * @retval inData      Received byte.
 */
uint16_t HW_SPI_InOut(uint16_t txData)
{
 800465c:	b590      	push	{r4, r7, lr}
 800465e:	b087      	sub	sp, #28
 8004660:	af02      	add	r7, sp, #8
 8004662:	0002      	movs	r2, r0
 8004664:	1dbb      	adds	r3, r7, #6
 8004666:	801a      	strh	r2, [r3, #0]
  uint16_t rxData ;

  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 8004668:	240e      	movs	r4, #14
 800466a:	193a      	adds	r2, r7, r4
 800466c:	1db9      	adds	r1, r7, #6
 800466e:	4806      	ldr	r0, [pc, #24]	@ (8004688 <HW_SPI_InOut+0x2c>)
 8004670:	2301      	movs	r3, #1
 8004672:	425b      	negs	r3, r3
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	2301      	movs	r3, #1
 8004678:	f013 ffa2 	bl	80185c0 <HAL_SPI_TransmitReceive>

  return rxData;
 800467c:	193b      	adds	r3, r7, r4
 800467e:	881b      	ldrh	r3, [r3, #0]
}
 8004680:	0018      	movs	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	b005      	add	sp, #20
 8004686:	bd90      	pop	{r4, r7, pc}
 8004688:	20000228 	.word	0x20000228

0800468c <SpiFrequency>:

/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency(uint32_t hz)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t divisor = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
  uint32_t SysClkTmp = SystemCoreClock;
 8004698:	4b17      	ldr	r3, [pc, #92]	@ (80046f8 <SpiFrequency+0x6c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	613b      	str	r3, [r7, #16]
  uint32_t baudRate;

  while (SysClkTmp > hz)
 800469e:	e008      	b.n	80046b2 <SpiFrequency+0x26>
  {
    divisor++;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	3301      	adds	r3, #1
 80046a4:	617b      	str	r3, [r7, #20]
    SysClkTmp = (SysClkTmp >> 1);
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	085b      	lsrs	r3, r3, #1
 80046aa:	613b      	str	r3, [r7, #16]

    if (divisor >= 7)
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2b06      	cmp	r3, #6
 80046b0:	d804      	bhi.n	80046bc <SpiFrequency+0x30>
  while (SysClkTmp > hz)
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d8f2      	bhi.n	80046a0 <SpiFrequency+0x14>
 80046ba:	e000      	b.n	80046be <SpiFrequency+0x32>
    {
      break;
 80046bc:	46c0      	nop			@ (mov r8, r8)
    }
  }

  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2204      	movs	r2, #4
 80046c2:	4013      	ands	r3, r2
 80046c4:	d101      	bne.n	80046ca <SpiFrequency+0x3e>
 80046c6:	2200      	movs	r2, #0
 80046c8:	e000      	b.n	80046cc <SpiFrequency+0x40>
 80046ca:	2220      	movs	r2, #32
             (((divisor & 0x2) == 0) ? 0x0 : SPI_CR1_BR_1) |
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2102      	movs	r1, #2
 80046d0:	400b      	ands	r3, r1
 80046d2:	d101      	bne.n	80046d8 <SpiFrequency+0x4c>
 80046d4:	2300      	movs	r3, #0
 80046d6:	e000      	b.n	80046da <SpiFrequency+0x4e>
 80046d8:	2310      	movs	r3, #16
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 80046da:	431a      	orrs	r2, r3
             (((divisor & 0x1) == 0) ? 0x0 : SPI_CR1_BR_0);
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2101      	movs	r1, #1
 80046e0:	400b      	ands	r3, r1
 80046e2:	d101      	bne.n	80046e8 <SpiFrequency+0x5c>
 80046e4:	2300      	movs	r3, #0
 80046e6:	e000      	b.n	80046ea <SpiFrequency+0x5e>
 80046e8:	2308      	movs	r3, #8
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]

  return baudRate;
 80046ee:	68fb      	ldr	r3, [r7, #12]
}
 80046f0:	0018      	movs	r0, r3
 80046f2:	46bd      	mov	sp, r7
 80046f4:	b006      	add	sp, #24
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	20000070 	.word	0x20000070

080046fc <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af02      	add	r7, sp, #8
  /* STM32 HAL library initialization*/
  HAL_Init();
 8004702:	f010 ff97 	bl	8015634 <HAL_Init>

  /* Configure the system clock*/
  SystemClock_Config();
 8004706:	f7fe fe07 	bl	8003318 <SystemClock_Config>

  /* Configure the debug mode*/
  DBG_Init();
 800470a:	f7ff f95b 	bl	80039c4 <DBG_Init>

  /* Configure the hardware*/
  HW_Init();
 800470e:	f7fe fd07 	bl	8003120 <HW_Init>

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /*Disbale Stand-by mode*/
  LPM_SetOffMode(LPM_APPLI_Id, LPM_Disable);
 8004712:	2101      	movs	r1, #1
 8004714:	2001      	movs	r0, #1
 8004716:	f00f ff93 	bl	8014640 <LPM_SetOffMode>

  PRINTF("APP_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__APP_VERSION >> 24), (uint8_t)(__APP_VERSION >> 16), (uint8_t)(__APP_VERSION >> 8), (uint8_t)__APP_VERSION);
 800471a:	481e      	ldr	r0, [pc, #120]	@ (8004794 <main+0x98>)
 800471c:	2300      	movs	r3, #0
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	2300      	movs	r3, #0
 8004722:	2203      	movs	r2, #3
 8004724:	2101      	movs	r1, #1
 8004726:	f010 fe1d 	bl	8015364 <TraceSend>
  PRINTF("MAC_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__LORA_MAC_VERSION >> 24), (uint8_t)(__LORA_MAC_VERSION >> 16), (uint8_t)(__LORA_MAC_VERSION >> 8), (uint8_t)__LORA_MAC_VERSION);
 800472a:	481b      	ldr	r0, [pc, #108]	@ (8004798 <main+0x9c>)
 800472c:	2300      	movs	r3, #0
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	2302      	movs	r3, #2
 8004732:	2204      	movs	r2, #4
 8004734:	2104      	movs	r1, #4
 8004736:	f010 fe15 	bl	8015364 <TraceSend>

  /* Configure the Lora Stack*/
  LORA_Init(&LoRaMainCallbacks, &LoRaParamInit);
 800473a:	4a18      	ldr	r2, [pc, #96]	@ (800479c <main+0xa0>)
 800473c:	4b18      	ldr	r3, [pc, #96]	@ (80047a0 <main+0xa4>)
 800473e:	0011      	movs	r1, r2
 8004740:	0018      	movs	r0, r3
 8004742:	f00f fcbf 	bl	80140c4 <LORA_Init>

  LORA_Join();
 8004746:	f00f fe31 	bl	80143ac <LORA_Join>

  LoraStartTx(TX_ON_TIMER) ;
 800474a:	2000      	movs	r0, #0
 800474c:	f000 fa1c 	bl	8004b88 <LoraStartTx>

  while (1)
  {
    if (AppProcessRequest == LORA_SET)
 8004750:	4b14      	ldr	r3, [pc, #80]	@ (80047a4 <main+0xa8>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d105      	bne.n	8004764 <main+0x68>
    {
      /*reset notification flag*/
      AppProcessRequest = LORA_RESET;
 8004758:	4b12      	ldr	r3, [pc, #72]	@ (80047a4 <main+0xa8>)
 800475a:	2200      	movs	r2, #0
 800475c:	701a      	strb	r2, [r3, #0]
      /*Send*/
      Send(NULL);
 800475e:	2000      	movs	r0, #0
 8004760:	f000 f83c 	bl	80047dc <Send>
    }
    if (LoraMacProcessRequest == LORA_SET)
 8004764:	4b10      	ldr	r3, [pc, #64]	@ (80047a8 <main+0xac>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d104      	bne.n	8004776 <main+0x7a>
    {
      /*reset notification flag*/
      LoraMacProcessRequest = LORA_RESET;
 800476c:	4b0e      	ldr	r3, [pc, #56]	@ (80047a8 <main+0xac>)
 800476e:	2200      	movs	r2, #0
 8004770:	701a      	strb	r2, [r3, #0]
      LoRaMacProcess();
 8004772:	f006 fa95 	bl	800aca0 <LoRaMacProcess>
  __ASM volatile ("cpsid i" : : : "memory");
 8004776:	b672      	cpsid	i
}
 8004778:	46c0      	nop			@ (mov r8, r8)
    /*If a flag is set at this point, mcu must not enter low power and must loop*/
    DISABLE_IRQ();

    /* if an interrupt has occurred after DISABLE_IRQ, it is kept pending
     * and cortex will not enter low power anyway  */
    if ((LoraMacProcessRequest != LORA_SET) && (AppProcessRequest != LORA_SET))
 800477a:	4b0b      	ldr	r3, [pc, #44]	@ (80047a8 <main+0xac>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d005      	beq.n	800478e <main+0x92>
 8004782:	4b08      	ldr	r3, [pc, #32]	@ (80047a4 <main+0xa8>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d001      	beq.n	800478e <main+0x92>
    {
#ifndef LOW_POWER_DISABLE
      LPM_EnterLowPower();
 800478a:	f00f ffc1 	bl	8014710 <LPM_EnterLowPower>
  __ASM volatile ("cpsie i" : : : "memory");
 800478e:	b662      	cpsie	i
}
 8004790:	46c0      	nop			@ (mov r8, r8)
    if (AppProcessRequest == LORA_SET)
 8004792:	e7dd      	b.n	8004750 <main+0x54>
 8004794:	0801a55c 	.word	0x0801a55c
 8004798:	0801a580 	.word	0x0801a580
 800479c:	2000002c 	.word	0x2000002c
 80047a0:	20000008 	.word	0x20000008
 80047a4:	200002c1 	.word	0x200002c1
 80047a8:	200002c0 	.word	0x200002c0

080047ac <LoraMacProcessNotify>:
  }
}


void LoraMacProcessNotify(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  LoraMacProcessRequest = LORA_SET;
 80047b0:	4b02      	ldr	r3, [pc, #8]	@ (80047bc <LoraMacProcessNotify+0x10>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	701a      	strb	r2, [r3, #0]
}
 80047b6:	46c0      	nop			@ (mov r8, r8)
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	200002c0 	.word	0x200002c0

080047c0 <LORA_HasJoined>:


static void LORA_HasJoined(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
#if( OVER_THE_AIR_ACTIVATION != 0 )
  PRINTF("JOINED\n\r");
 80047c4:	4b04      	ldr	r3, [pc, #16]	@ (80047d8 <LORA_HasJoined+0x18>)
 80047c6:	0018      	movs	r0, r3
 80047c8:	f010 fdcc 	bl	8015364 <TraceSend>
#endif
  LORA_RequestClass(LORAWAN_DEFAULT_CLASS);
 80047cc:	2002      	movs	r0, #2
 80047ce:	f00f fe8f 	bl	80144f0 <LORA_RequestClass>
}
 80047d2:	46c0      	nop			@ (mov r8, r8)
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	0801a5a4 	.word	0x0801a5a4

080047dc <Send>:

static void Send(void *context)
{
 80047dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047de:	b091      	sub	sp, #68	@ 0x44
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  uint16_t pressure = 0;
 80047e4:	233e      	movs	r3, #62	@ 0x3e
 80047e6:	18fb      	adds	r3, r7, r3
 80047e8:	2200      	movs	r2, #0
 80047ea:	801a      	strh	r2, [r3, #0]
  int16_t temperature = 0;
 80047ec:	233c      	movs	r3, #60	@ 0x3c
 80047ee:	18fb      	adds	r3, r7, r3
 80047f0:	2200      	movs	r2, #0
 80047f2:	801a      	strh	r2, [r3, #0]
  uint16_t humidity = 0;
 80047f4:	233a      	movs	r3, #58	@ 0x3a
 80047f6:	18fb      	adds	r3, r7, r3
 80047f8:	2200      	movs	r2, #0
 80047fa:	801a      	strh	r2, [r3, #0]
  uint8_t batteryLevel;
  sensor_t sensor_data;

  if (LORA_JoinStatus() != LORA_SET)
 80047fc:	f00f fdf4 	bl	80143e8 <LORA_JoinStatus>
 8004800:	0003      	movs	r3, r0
 8004802:	2b01      	cmp	r3, #1
 8004804:	d002      	beq.n	800480c <Send+0x30>
  {
    /*Not joined, try again later*/
    LORA_Join();
 8004806:	f00f fdd1 	bl	80143ac <LORA_Join>
 800480a:	e10e      	b.n	8004a2a <Send+0x24e>
    return;
  }

  TVL1(PRINTF("SEND REQUEST\n\r");)
#ifndef CAYENNE_LPP
  int32_t latitude, longitude = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint16_t altitudeGps = 0;
 8004810:	2632      	movs	r6, #50	@ 0x32
 8004812:	19bb      	adds	r3, r7, r6
 8004814:	2200      	movs	r2, #0
 8004816:	801a      	strh	r2, [r3, #0]
#endif

#ifdef USE_B_L072Z_LRWAN1
  TimerInit(&TxLedTimer, OnTimerLedEvent);
 8004818:	4a85      	ldr	r2, [pc, #532]	@ (8004a30 <Send+0x254>)
 800481a:	4b86      	ldr	r3, [pc, #536]	@ (8004a34 <Send+0x258>)
 800481c:	0011      	movs	r1, r2
 800481e:	0018      	movs	r0, r3
 8004820:	f010 fb2f 	bl	8014e82 <TimerInit>

  TimerSetValue(&TxLedTimer, 200);
 8004824:	4b83      	ldr	r3, [pc, #524]	@ (8004a34 <Send+0x258>)
 8004826:	21c8      	movs	r1, #200	@ 0xc8
 8004828:	0018      	movs	r0, r3
 800482a:	f010 fca5 	bl	8015178 <TimerSetValue>

  LED_On(LED_RED1) ;
 800482e:	2001      	movs	r0, #1
 8004830:	f000 fc6e 	bl	8005110 <BSP_LED_On>

  TimerStart(&TxLedTimer);
 8004834:	4b7f      	ldr	r3, [pc, #508]	@ (8004a34 <Send+0x258>)
 8004836:	0018      	movs	r0, r3
 8004838:	f010 fb42 	bl	8014ec0 <TimerStart>
#endif

  BSP_sensor_Read(&sensor_data);
 800483c:	250c      	movs	r5, #12
 800483e:	197b      	adds	r3, r7, r5
 8004840:	0018      	movs	r0, r3
 8004842:	f7ff f897 	bl	8003974 <BSP_sensor_Read>
  AppData.Buff[i++] = LPP_DATATYPE_DIGITAL_OUTPUT;
  AppData.Buff[i++] = AppLedStateOn;
#endif  /* REGION_XX915 */
#else  /* not CAYENNE_LPP */

  temperature = (int16_t)(sensor_data.temperature * 100);         /* in �C * 100 */
 8004846:	197b      	adds	r3, r7, r5
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	497b      	ldr	r1, [pc, #492]	@ (8004a38 <Send+0x25c>)
 800484c:	1c18      	adds	r0, r3, #0
 800484e:	f7fc f95b 	bl	8000b08 <__aeabi_fmul>
 8004852:	1c03      	adds	r3, r0, #0
 8004854:	243c      	movs	r4, #60	@ 0x3c
 8004856:	193c      	adds	r4, r7, r4
 8004858:	1c18      	adds	r0, r3, #0
 800485a:	f7fc fc37 	bl	80010cc <__aeabi_f2iz>
 800485e:	0003      	movs	r3, r0
 8004860:	8023      	strh	r3, [r4, #0]
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 8004862:	197b      	adds	r3, r7, r5
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4974      	ldr	r1, [pc, #464]	@ (8004a38 <Send+0x25c>)
 8004868:	1c18      	adds	r0, r3, #0
 800486a:	f7fc f94d 	bl	8000b08 <__aeabi_fmul>
 800486e:	1c03      	adds	r3, r0, #0
 8004870:	4972      	ldr	r1, [pc, #456]	@ (8004a3c <Send+0x260>)
 8004872:	1c18      	adds	r0, r3, #0
 8004874:	f7fb ff62 	bl	800073c <__aeabi_fdiv>
 8004878:	1c03      	adds	r3, r0, #0
 800487a:	223e      	movs	r2, #62	@ 0x3e
 800487c:	18bc      	adds	r4, r7, r2
 800487e:	1c18      	adds	r0, r3, #0
 8004880:	f7fb fe5a 	bl	8000538 <__aeabi_f2uiz>
 8004884:	0003      	movs	r3, r0
 8004886:	8023      	strh	r3, [r4, #0]
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8004888:	197b      	adds	r3, r7, r5
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	496b      	ldr	r1, [pc, #428]	@ (8004a3c <Send+0x260>)
 800488e:	1c18      	adds	r0, r3, #0
 8004890:	f7fc f93a 	bl	8000b08 <__aeabi_fmul>
 8004894:	1c03      	adds	r3, r0, #0
 8004896:	213a      	movs	r1, #58	@ 0x3a
 8004898:	187c      	adds	r4, r7, r1
 800489a:	1c18      	adds	r0, r3, #0
 800489c:	f7fb fe4c 	bl	8000538 <__aeabi_f2uiz>
 80048a0:	0003      	movs	r3, r0
 80048a2:	8023      	strh	r3, [r4, #0]
  latitude = sensor_data.latitude;
 80048a4:	197b      	adds	r3, r7, r5
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  longitude = sensor_data.longitude;
 80048aa:	197b      	adds	r3, r7, r5
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t i = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	62bb      	str	r3, [r7, #40]	@ 0x28

  batteryLevel = LORA_GetBatteryLevel();                      /* 1 (very low) to 254 (fully charged) */
 80048b4:	2327      	movs	r3, #39	@ 0x27
 80048b6:	18fc      	adds	r4, r7, r3
 80048b8:	f000 f9e6 	bl	8004c88 <LORA_GetBatteryLevel>
 80048bc:	0003      	movs	r3, r0
 80048be:	7023      	strb	r3, [r4, #0]

  AppData.Port = LORAWAN_APP_PORT;
 80048c0:	4b5f      	ldr	r3, [pc, #380]	@ (8004a40 <Send+0x264>)
 80048c2:	2202      	movs	r2, #2
 80048c4:	715a      	strb	r2, [r3, #5]
  AppData.Buff[i++] = batteryLevel;
  AppData.Buff[i++] = 0;
  AppData.Buff[i++] = 0;
  AppData.Buff[i++] = 0;
#else  /* not REGION_XX915 */
  AppData.Buff[i++] = AppLedStateOn;
 80048c6:	4b5e      	ldr	r3, [pc, #376]	@ (8004a40 <Send+0x264>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048cc:	1c59      	adds	r1, r3, #1
 80048ce:	62b9      	str	r1, [r7, #40]	@ 0x28
 80048d0:	18d3      	adds	r3, r2, r3
 80048d2:	4a5c      	ldr	r2, [pc, #368]	@ (8004a44 <Send+0x268>)
 80048d4:	7812      	ldrb	r2, [r2, #0]
 80048d6:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (pressure >> 8) & 0xFF;
 80048d8:	253e      	movs	r5, #62	@ 0x3e
 80048da:	197b      	adds	r3, r7, r5
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	0a1b      	lsrs	r3, r3, #8
 80048e0:	b298      	uxth	r0, r3
 80048e2:	4b57      	ldr	r3, [pc, #348]	@ (8004a40 <Send+0x264>)
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e8:	1c59      	adds	r1, r3, #1
 80048ea:	62b9      	str	r1, [r7, #40]	@ 0x28
 80048ec:	18d3      	adds	r3, r2, r3
 80048ee:	b2c2      	uxtb	r2, r0
 80048f0:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = pressure & 0xFF;
 80048f2:	4b53      	ldr	r3, [pc, #332]	@ (8004a40 <Send+0x264>)
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f8:	1c59      	adds	r1, r3, #1
 80048fa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80048fc:	18d3      	adds	r3, r2, r3
 80048fe:	197a      	adds	r2, r7, r5
 8004900:	8812      	ldrh	r2, [r2, #0]
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (temperature >> 8) & 0xFF;
 8004906:	243c      	movs	r4, #60	@ 0x3c
 8004908:	193b      	adds	r3, r7, r4
 800490a:	2000      	movs	r0, #0
 800490c:	5e1b      	ldrsh	r3, [r3, r0]
 800490e:	121b      	asrs	r3, r3, #8
 8004910:	b218      	sxth	r0, r3
 8004912:	4b4b      	ldr	r3, [pc, #300]	@ (8004a40 <Send+0x264>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004918:	1c59      	adds	r1, r3, #1
 800491a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800491c:	18d3      	adds	r3, r2, r3
 800491e:	b2c2      	uxtb	r2, r0
 8004920:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = temperature & 0xFF;
 8004922:	4b47      	ldr	r3, [pc, #284]	@ (8004a40 <Send+0x264>)
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004928:	1c59      	adds	r1, r3, #1
 800492a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800492c:	18d3      	adds	r3, r2, r3
 800492e:	193a      	adds	r2, r7, r4
 8004930:	8812      	ldrh	r2, [r2, #0]
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (humidity >> 8) & 0xFF;
 8004936:	243a      	movs	r4, #58	@ 0x3a
 8004938:	193b      	adds	r3, r7, r4
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	0a1b      	lsrs	r3, r3, #8
 800493e:	b298      	uxth	r0, r3
 8004940:	4b3f      	ldr	r3, [pc, #252]	@ (8004a40 <Send+0x264>)
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004946:	1c59      	adds	r1, r3, #1
 8004948:	62b9      	str	r1, [r7, #40]	@ 0x28
 800494a:	18d3      	adds	r3, r2, r3
 800494c:	b2c2      	uxtb	r2, r0
 800494e:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = humidity & 0xFF;
 8004950:	4b3b      	ldr	r3, [pc, #236]	@ (8004a40 <Send+0x264>)
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004956:	1c59      	adds	r1, r3, #1
 8004958:	62b9      	str	r1, [r7, #40]	@ 0x28
 800495a:	18d3      	adds	r3, r2, r3
 800495c:	193a      	adds	r2, r7, r4
 800495e:	8812      	ldrh	r2, [r2, #0]
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = batteryLevel;
 8004964:	4b36      	ldr	r3, [pc, #216]	@ (8004a40 <Send+0x264>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496a:	1c59      	adds	r1, r3, #1
 800496c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800496e:	18d3      	adds	r3, r2, r3
 8004970:	2227      	movs	r2, #39	@ 0x27
 8004972:	18ba      	adds	r2, r7, r2
 8004974:	7812      	ldrb	r2, [r2, #0]
 8004976:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (latitude >> 16) & 0xFF;
 8004978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800497a:	1418      	asrs	r0, r3, #16
 800497c:	4b30      	ldr	r3, [pc, #192]	@ (8004a40 <Send+0x264>)
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004982:	1c59      	adds	r1, r3, #1
 8004984:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004986:	18d3      	adds	r3, r2, r3
 8004988:	b2c2      	uxtb	r2, r0
 800498a:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (latitude >> 8) & 0xFF;
 800498c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800498e:	1218      	asrs	r0, r3, #8
 8004990:	4b2b      	ldr	r3, [pc, #172]	@ (8004a40 <Send+0x264>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004996:	1c59      	adds	r1, r3, #1
 8004998:	62b9      	str	r1, [r7, #40]	@ 0x28
 800499a:	18d3      	adds	r3, r2, r3
 800499c:	b2c2      	uxtb	r2, r0
 800499e:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = latitude & 0xFF;
 80049a0:	4b27      	ldr	r3, [pc, #156]	@ (8004a40 <Send+0x264>)
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a6:	1c59      	adds	r1, r3, #1
 80049a8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80049aa:	18d3      	adds	r3, r2, r3
 80049ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (longitude >> 16) & 0xFF;
 80049b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049b4:	1418      	asrs	r0, r3, #16
 80049b6:	4b22      	ldr	r3, [pc, #136]	@ (8004a40 <Send+0x264>)
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049bc:	1c59      	adds	r1, r3, #1
 80049be:	62b9      	str	r1, [r7, #40]	@ 0x28
 80049c0:	18d3      	adds	r3, r2, r3
 80049c2:	b2c2      	uxtb	r2, r0
 80049c4:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (longitude >> 8) & 0xFF;
 80049c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c8:	1218      	asrs	r0, r3, #8
 80049ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004a40 <Send+0x264>)
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d0:	1c59      	adds	r1, r3, #1
 80049d2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80049d4:	18d3      	adds	r3, r2, r3
 80049d6:	b2c2      	uxtb	r2, r0
 80049d8:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = longitude & 0xFF;
 80049da:	4b19      	ldr	r3, [pc, #100]	@ (8004a40 <Send+0x264>)
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e0:	1c59      	adds	r1, r3, #1
 80049e2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80049e4:	18d3      	adds	r3, r2, r3
 80049e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049e8:	b2d2      	uxtb	r2, r2
 80049ea:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (altitudeGps >> 8) & 0xFF;
 80049ec:	19bb      	adds	r3, r7, r6
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	0a1b      	lsrs	r3, r3, #8
 80049f2:	b298      	uxth	r0, r3
 80049f4:	4b12      	ldr	r3, [pc, #72]	@ (8004a40 <Send+0x264>)
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fa:	1c59      	adds	r1, r3, #1
 80049fc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80049fe:	18d3      	adds	r3, r2, r3
 8004a00:	b2c2      	uxtb	r2, r0
 8004a02:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = altitudeGps & 0xFF;
 8004a04:	4b0e      	ldr	r3, [pc, #56]	@ (8004a40 <Send+0x264>)
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0a:	1c59      	adds	r1, r3, #1
 8004a0c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004a0e:	18d3      	adds	r3, r2, r3
 8004a10:	19ba      	adds	r2, r7, r6
 8004a12:	8812      	ldrh	r2, [r2, #0]
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	701a      	strb	r2, [r3, #0]
#endif  /* REGION_XX915 */
#endif  /* CAYENNE_LPP */
  AppData.BuffSize = i;
 8004a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	4b08      	ldr	r3, [pc, #32]	@ (8004a40 <Send+0x264>)
 8004a1e:	711a      	strb	r2, [r3, #4]

  LORA_send(&AppData, LORAWAN_DEFAULT_CONFIRM_MSG_STATE);
 8004a20:	4b07      	ldr	r3, [pc, #28]	@ (8004a40 <Send+0x264>)
 8004a22:	2100      	movs	r1, #0
 8004a24:	0018      	movs	r0, r3
 8004a26:	f00f fcf5 	bl	8014414 <LORA_send>

  /* USER CODE END 3 */
}
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b011      	add	sp, #68	@ 0x44
 8004a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a30:	08004d01 	.word	0x08004d01
 8004a34:	200002dc 	.word	0x200002dc
 8004a38:	42c80000 	.word	0x42c80000
 8004a3c:	41200000 	.word	0x41200000
 8004a40:	20000000 	.word	0x20000000
 8004a44:	200002c2 	.word	0x200002c2

08004a48 <LORA_RxData>:


static void LORA_RxData(lora_AppData_t *AppData)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 4 */
  PRINTF("PACKET RECEIVED ON PORT %d\n\r", AppData->Port);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	795b      	ldrb	r3, [r3, #5]
 8004a54:	001a      	movs	r2, r3
 8004a56:	4b3e      	ldr	r3, [pc, #248]	@ (8004b50 <LORA_RxData+0x108>)
 8004a58:	0011      	movs	r1, r2
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f010 fc82 	bl	8015364 <TraceSend>
  PRINTF("PACKET RECEIVED ON PORT %d\n\r", *AppData->Buff);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	001a      	movs	r2, r3
 8004a68:	4b39      	ldr	r3, [pc, #228]	@ (8004b50 <LORA_RxData+0x108>)
 8004a6a:	0011      	movs	r1, r2
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f010 fc79 	bl	8015364 <TraceSend>
  switch (AppData->Port)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	795b      	ldrb	r3, [r3, #5]
 8004a76:	2b63      	cmp	r3, #99	@ 0x63
 8004a78:	d041      	beq.n	8004afe <LORA_RxData+0xb6>
 8004a7a:	dc5f      	bgt.n	8004b3c <LORA_RxData+0xf4>
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d01e      	beq.n	8004abe <LORA_RxData+0x76>
 8004a80:	2b03      	cmp	r3, #3
 8004a82:	d15b      	bne.n	8004b3c <LORA_RxData+0xf4>
  {
    case 3:
      /*this port switches the class*/
      if (AppData->BuffSize == 1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	791b      	ldrb	r3, [r3, #4]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d159      	bne.n	8004b40 <LORA_RxData+0xf8>
      {
        switch (AppData->Buff[0])
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d00d      	beq.n	8004ab2 <LORA_RxData+0x6a>
 8004a96:	dc10      	bgt.n	8004aba <LORA_RxData+0x72>
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <LORA_RxData+0x5a>
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d004      	beq.n	8004aaa <LORA_RxData+0x62>
          {
            LORA_RequestClass(CLASS_C);
            break;
          }
          default:
            break;
 8004aa0:	e00b      	b.n	8004aba <LORA_RxData+0x72>
            LORA_RequestClass(CLASS_A);
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	f00f fd24 	bl	80144f0 <LORA_RequestClass>
            break;
 8004aa8:	e008      	b.n	8004abc <LORA_RxData+0x74>
            LORA_RequestClass(CLASS_B);
 8004aaa:	2001      	movs	r0, #1
 8004aac:	f00f fd20 	bl	80144f0 <LORA_RequestClass>
            break;
 8004ab0:	e004      	b.n	8004abc <LORA_RxData+0x74>
            LORA_RequestClass(CLASS_C);
 8004ab2:	2002      	movs	r0, #2
 8004ab4:	f00f fd1c 	bl	80144f0 <LORA_RequestClass>
            break;
 8004ab8:	e000      	b.n	8004abc <LORA_RxData+0x74>
            break;
 8004aba:	46c0      	nop			@ (mov r8, r8)
        }
      }
      break;
 8004abc:	e040      	b.n	8004b40 <LORA_RxData+0xf8>
    case LORAWAN_APP_PORT:
      if (AppData->BuffSize == 1)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	791b      	ldrb	r3, [r3, #4]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d13e      	bne.n	8004b44 <LORA_RxData+0xfc>
      {
        AppLedStateOn = AppData->Buff[0] & 0x01;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2201      	movs	r2, #1
 8004ace:	4013      	ands	r3, r2
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	4b20      	ldr	r3, [pc, #128]	@ (8004b54 <LORA_RxData+0x10c>)
 8004ad4:	701a      	strb	r2, [r3, #0]
        if (AppLedStateOn == RESET)
 8004ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8004b54 <LORA_RxData+0x10c>)
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d107      	bne.n	8004aee <LORA_RxData+0xa6>
        {
          PRINTF("LED OFF\n\r");
 8004ade:	4b1e      	ldr	r3, [pc, #120]	@ (8004b58 <LORA_RxData+0x110>)
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f010 fc3f 	bl	8015364 <TraceSend>
          LED_Off(LED_BLUE) ;
 8004ae6:	2002      	movs	r0, #2
 8004ae8:	f000 fb2e 	bl	8005148 <BSP_LED_Off>
        {
          PRINTF("LED ON\n\r");
          LED_On(LED_BLUE) ;
        }
      }
      break;
 8004aec:	e02a      	b.n	8004b44 <LORA_RxData+0xfc>
          PRINTF("LED ON\n\r");
 8004aee:	4b1b      	ldr	r3, [pc, #108]	@ (8004b5c <LORA_RxData+0x114>)
 8004af0:	0018      	movs	r0, r3
 8004af2:	f010 fc37 	bl	8015364 <TraceSend>
          LED_On(LED_BLUE) ;
 8004af6:	2002      	movs	r0, #2
 8004af8:	f000 fb0a 	bl	8005110 <BSP_LED_On>
      break;
 8004afc:	e022      	b.n	8004b44 <LORA_RxData+0xfc>
    case LPP_APP_PORT:
    {
      AppLedStateOn = (AppData->Buff[2] == 100) ?  0x01 : 0x00;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	3302      	adds	r3, #2
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	3b64      	subs	r3, #100	@ 0x64
 8004b08:	425a      	negs	r2, r3
 8004b0a:	4153      	adcs	r3, r2
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	001a      	movs	r2, r3
 8004b10:	4b10      	ldr	r3, [pc, #64]	@ (8004b54 <LORA_RxData+0x10c>)
 8004b12:	701a      	strb	r2, [r3, #0]
      if (AppLedStateOn == RESET)
 8004b14:	4b0f      	ldr	r3, [pc, #60]	@ (8004b54 <LORA_RxData+0x10c>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d107      	bne.n	8004b2c <LORA_RxData+0xe4>
      {
        PRINTF("LED OFF\n\r");
 8004b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004b58 <LORA_RxData+0x110>)
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f010 fc20 	bl	8015364 <TraceSend>
        LED_Off(LED_BLUE) ;
 8004b24:	2002      	movs	r0, #2
 8004b26:	f000 fb0f 	bl	8005148 <BSP_LED_Off>
      else
      {
        PRINTF("LED ON\n\r");
        LED_On(LED_BLUE) ;
      }
      break;
 8004b2a:	e00c      	b.n	8004b46 <LORA_RxData+0xfe>
        PRINTF("LED ON\n\r");
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b5c <LORA_RxData+0x114>)
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f010 fc18 	bl	8015364 <TraceSend>
        LED_On(LED_BLUE) ;
 8004b34:	2002      	movs	r0, #2
 8004b36:	f000 faeb 	bl	8005110 <BSP_LED_On>
      break;
 8004b3a:	e004      	b.n	8004b46 <LORA_RxData+0xfe>
    }
    default:
      break;
 8004b3c:	46c0      	nop			@ (mov r8, r8)
 8004b3e:	e002      	b.n	8004b46 <LORA_RxData+0xfe>
      break;
 8004b40:	46c0      	nop			@ (mov r8, r8)
 8004b42:	e000      	b.n	8004b46 <LORA_RxData+0xfe>
      break;
 8004b44:	46c0      	nop			@ (mov r8, r8)
  }

  /* USER CODE END 4 */
}
 8004b46:	46c0      	nop			@ (mov r8, r8)
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	b002      	add	sp, #8
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	46c0      	nop			@ (mov r8, r8)
 8004b50:	0801a5b0 	.word	0x0801a5b0
 8004b54:	200002c2 	.word	0x200002c2
 8004b58:	0801a5d0 	.word	0x0801a5d0
 8004b5c:	0801a5dc 	.word	0x0801a5dc

08004b60 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /*Wait for next tx slot*/
  TimerStart(&TxTimer);
 8004b68:	4b05      	ldr	r3, [pc, #20]	@ (8004b80 <OnTxTimerEvent+0x20>)
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f010 f9a8 	bl	8014ec0 <TimerStart>

  AppProcessRequest = LORA_SET;
 8004b70:	4b04      	ldr	r3, [pc, #16]	@ (8004b84 <OnTxTimerEvent+0x24>)
 8004b72:	2201      	movs	r2, #1
 8004b74:	701a      	strb	r2, [r3, #0]
}
 8004b76:	46c0      	nop			@ (mov r8, r8)
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	b002      	add	sp, #8
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	46c0      	nop			@ (mov r8, r8)
 8004b80:	200002c4 	.word	0x200002c4
 8004b84:	200002c1 	.word	0x200002c1

08004b88 <LoraStartTx>:

static void LoraStartTx(TxEventType_t EventType)
{
 8004b88:	b590      	push	{r4, r7, lr}
 8004b8a:	b089      	sub	sp, #36	@ 0x24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	0002      	movs	r2, r0
 8004b90:	1dfb      	adds	r3, r7, #7
 8004b92:	701a      	strb	r2, [r3, #0]
  if (EventType == TX_ON_TIMER)
 8004b94:	1dfb      	adds	r3, r7, #7
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10f      	bne.n	8004bbc <LoraStartTx+0x34>
  {
    /* send everytime timer elapses */
    TimerInit(&TxTimer, OnTxTimerEvent);
 8004b9c:	4a18      	ldr	r2, [pc, #96]	@ (8004c00 <LoraStartTx+0x78>)
 8004b9e:	4b19      	ldr	r3, [pc, #100]	@ (8004c04 <LoraStartTx+0x7c>)
 8004ba0:	0011      	movs	r1, r2
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f010 f96d 	bl	8014e82 <TimerInit>
    TimerSetValue(&TxTimer,  APP_TX_DUTYCYCLE);
 8004ba8:	4a17      	ldr	r2, [pc, #92]	@ (8004c08 <LoraStartTx+0x80>)
 8004baa:	4b16      	ldr	r3, [pc, #88]	@ (8004c04 <LoraStartTx+0x7c>)
 8004bac:	0011      	movs	r1, r2
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f010 fae2 	bl	8015178 <TimerSetValue>
    OnTxTimerEvent(NULL);
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	f7ff ffd3 	bl	8004b60 <OnTxTimerEvent>
    initStruct.Speed = GPIO_SPEED_HIGH;

    HW_GPIO_Init(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, &initStruct);
    HW_GPIO_SetIrq(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, 0, Send);
  }
}
 8004bba:	e01c      	b.n	8004bf6 <LoraStartTx+0x6e>
    GPIO_InitTypeDef initStruct = {0};
 8004bbc:	240c      	movs	r4, #12
 8004bbe:	193b      	adds	r3, r7, r4
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	2314      	movs	r3, #20
 8004bc4:	001a      	movs	r2, r3
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	f014 fef0 	bl	80199ac <memset>
    initStruct.Mode = GPIO_MODE_IT_RISING;
 8004bcc:	193b      	adds	r3, r7, r4
 8004bce:	4a0f      	ldr	r2, [pc, #60]	@ (8004c0c <LoraStartTx+0x84>)
 8004bd0:	605a      	str	r2, [r3, #4]
    initStruct.Pull = GPIO_PULLUP;
 8004bd2:	193b      	adds	r3, r7, r4
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	609a      	str	r2, [r3, #8]
    initStruct.Speed = GPIO_SPEED_HIGH;
 8004bd8:	193b      	adds	r3, r7, r4
 8004bda:	2203      	movs	r2, #3
 8004bdc:	60da      	str	r2, [r3, #12]
    HW_GPIO_Init(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, &initStruct);
 8004bde:	193b      	adds	r3, r7, r4
 8004be0:	480b      	ldr	r0, [pc, #44]	@ (8004c10 <LoraStartTx+0x88>)
 8004be2:	001a      	movs	r2, r3
 8004be4:	2104      	movs	r1, #4
 8004be6:	f7fe ff51 	bl	8003a8c <HW_GPIO_Init>
    HW_GPIO_SetIrq(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, 0, Send);
 8004bea:	4b0a      	ldr	r3, [pc, #40]	@ (8004c14 <LoraStartTx+0x8c>)
 8004bec:	4808      	ldr	r0, [pc, #32]	@ (8004c10 <LoraStartTx+0x88>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	2104      	movs	r1, #4
 8004bf2:	f7fe ffc1 	bl	8003b78 <HW_GPIO_SetIrq>
}
 8004bf6:	46c0      	nop			@ (mov r8, r8)
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	b009      	add	sp, #36	@ 0x24
 8004bfc:	bd90      	pop	{r4, r7, pc}
 8004bfe:	46c0      	nop			@ (mov r8, r8)
 8004c00:	08004b61 	.word	0x08004b61
 8004c04:	200002c4 	.word	0x200002c4
 8004c08:	000493e0 	.word	0x000493e0
 8004c0c:	10110000 	.word	0x10110000
 8004c10:	50000400 	.word	0x50000400
 8004c14:	080047dd 	.word	0x080047dd

08004c18 <LORA_ConfirmClass>:

static void LORA_ConfirmClass(DeviceClass_t Class)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	0002      	movs	r2, r0
 8004c20:	1dfb      	adds	r3, r7, #7
 8004c22:	701a      	strb	r2, [r3, #0]
  PRINTF("switch to class %c done\n\r", "ABC"[Class]);
 8004c24:	1dfb      	adds	r3, r7, #7
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	4a0b      	ldr	r2, [pc, #44]	@ (8004c58 <LORA_ConfirmClass+0x40>)
 8004c2a:	5cd3      	ldrb	r3, [r2, r3]
 8004c2c:	001a      	movs	r2, r3
 8004c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c5c <LORA_ConfirmClass+0x44>)
 8004c30:	0011      	movs	r1, r2
 8004c32:	0018      	movs	r0, r3
 8004c34:	f010 fb96 	bl	8015364 <TraceSend>

  /*Optionnal*/
  /*informs the server that switch has occurred ASAP*/
  AppData.BuffSize = 0;
 8004c38:	4b09      	ldr	r3, [pc, #36]	@ (8004c60 <LORA_ConfirmClass+0x48>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	711a      	strb	r2, [r3, #4]
  AppData.Port = LORAWAN_APP_PORT;
 8004c3e:	4b08      	ldr	r3, [pc, #32]	@ (8004c60 <LORA_ConfirmClass+0x48>)
 8004c40:	2202      	movs	r2, #2
 8004c42:	715a      	strb	r2, [r3, #5]

  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
 8004c44:	4b06      	ldr	r3, [pc, #24]	@ (8004c60 <LORA_ConfirmClass+0x48>)
 8004c46:	2100      	movs	r1, #0
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f00f fbe3 	bl	8014414 <LORA_send>
}
 8004c4e:	46c0      	nop			@ (mov r8, r8)
 8004c50:	46bd      	mov	sp, r7
 8004c52:	b002      	add	sp, #8
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	46c0      	nop			@ (mov r8, r8)
 8004c58:	0801a604 	.word	0x0801a604
 8004c5c:	0801a5e8 	.word	0x0801a5e8
 8004c60:	20000000 	.word	0x20000000

08004c64 <LORA_TxNeeded>:

static void LORA_TxNeeded(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  AppData.BuffSize = 0;
 8004c68:	4b06      	ldr	r3, [pc, #24]	@ (8004c84 <LORA_TxNeeded+0x20>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	711a      	strb	r2, [r3, #4]
  AppData.Port = LORAWAN_APP_PORT;
 8004c6e:	4b05      	ldr	r3, [pc, #20]	@ (8004c84 <LORA_TxNeeded+0x20>)
 8004c70:	2202      	movs	r2, #2
 8004c72:	715a      	strb	r2, [r3, #5]

  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
 8004c74:	4b03      	ldr	r3, [pc, #12]	@ (8004c84 <LORA_TxNeeded+0x20>)
 8004c76:	2100      	movs	r1, #0
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f00f fbcb 	bl	8014414 <LORA_send>
}
 8004c7e:	46c0      	nop			@ (mov r8, r8)
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	20000000 	.word	0x20000000

08004c88 <LORA_GetBatteryLevel>:
  * @brief This function return the battery level
  * @param none
  * @retval the battery level  1 (very low) to 254 (fully charged)
  */
uint8_t LORA_GetBatteryLevel(void)
{
 8004c88:	b590      	push	{r4, r7, lr}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
  uint16_t batteryLevelmV;
  uint8_t batteryLevel = 0;
 8004c8e:	1dfb      	adds	r3, r7, #7
 8004c90:	2200      	movs	r2, #0
 8004c92:	701a      	strb	r2, [r3, #0]

  batteryLevelmV = HW_GetBatteryLevel();
 8004c94:	1d3c      	adds	r4, r7, #4
 8004c96:	f7fe fc71 	bl	800357c <HW_GetBatteryLevel>
 8004c9a:	0003      	movs	r3, r0
 8004c9c:	8023      	strh	r3, [r4, #0]


  /* Convert batterey level from mV to linea scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8004c9e:	1d3b      	adds	r3, r7, #4
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	4a15      	ldr	r2, [pc, #84]	@ (8004cf8 <LORA_GetBatteryLevel+0x70>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d903      	bls.n	8004cb0 <LORA_GetBatteryLevel+0x28>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8004ca8:	1dfb      	adds	r3, r7, #7
 8004caa:	22fe      	movs	r2, #254	@ 0xfe
 8004cac:	701a      	strb	r2, [r3, #0]
 8004cae:	e01d      	b.n	8004cec <LORA_GetBatteryLevel+0x64>
  }
  else if (batteryLevelmV < VDD_MIN)
 8004cb0:	1d3b      	adds	r3, r7, #4
 8004cb2:	881a      	ldrh	r2, [r3, #0]
 8004cb4:	23e1      	movs	r3, #225	@ 0xe1
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d203      	bcs.n	8004cc4 <LORA_GetBatteryLevel+0x3c>
  {
    batteryLevel = 0;
 8004cbc:	1dfb      	adds	r3, r7, #7
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	701a      	strb	r2, [r3, #0]
 8004cc2:	e013      	b.n	8004cec <LORA_GetBatteryLevel+0x64>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8004cc4:	1d3b      	adds	r3, r7, #4
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	4a0c      	ldr	r2, [pc, #48]	@ (8004cfc <LORA_GetBatteryLevel+0x74>)
 8004cca:	4694      	mov	ip, r2
 8004ccc:	4463      	add	r3, ip
 8004cce:	001a      	movs	r2, r3
 8004cd0:	0013      	movs	r3, r2
 8004cd2:	01db      	lsls	r3, r3, #7
 8004cd4:	1a9b      	subs	r3, r3, r2
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	001a      	movs	r2, r3
 8004cda:	2396      	movs	r3, #150	@ 0x96
 8004cdc:	00d9      	lsls	r1, r3, #3
 8004cde:	0010      	movs	r0, r2
 8004ce0:	f7fb fa1c 	bl	800011c <__udivsi3>
 8004ce4:	0003      	movs	r3, r0
 8004ce6:	001a      	movs	r2, r3
 8004ce8:	1dfb      	adds	r3, r7, #7
 8004cea:	701a      	strb	r2, [r3, #0]
  }

  return batteryLevel;
 8004cec:	1dfb      	adds	r3, r7, #7
 8004cee:	781b      	ldrb	r3, [r3, #0]
}
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	b003      	add	sp, #12
 8004cf6:	bd90      	pop	{r4, r7, pc}
 8004cf8:	00000bb8 	.word	0x00000bb8
 8004cfc:	fffff8f8 	.word	0xfffff8f8

08004d00 <OnTimerLedEvent>:

#ifdef USE_B_L072Z_LRWAN1
static void OnTimerLedEvent(void *context)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  LED_Off(LED_RED1) ;
 8004d08:	2001      	movs	r0, #1
 8004d0a:	f000 fa1d 	bl	8005148 <BSP_LED_Off>
}
 8004d0e:	46c0      	nop			@ (mov r8, r8)
 8004d10:	46bd      	mov	sp, r7
 8004d12:	b002      	add	sp, #8
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <vcom_Init>:

static void (*TxCpltCallback)(void);
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void vcom_Init(void (*TxCb)(void))
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]

  /*Record Tx complete for DMA*/
  TxCpltCallback = TxCb;
 8004d20:	4b12      	ldr	r3, [pc, #72]	@ (8004d6c <vcom_Init+0x54>)
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	601a      	str	r2, [r3, #0]
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;
 8004d26:	4b12      	ldr	r3, [pc, #72]	@ (8004d70 <vcom_Init+0x58>)
 8004d28:	4a12      	ldr	r2, [pc, #72]	@ (8004d74 <vcom_Init+0x5c>)
 8004d2a:	601a      	str	r2, [r3, #0]

  UartHandle.Init.BaudRate   = 115200;
 8004d2c:	4b10      	ldr	r3, [pc, #64]	@ (8004d70 <vcom_Init+0x58>)
 8004d2e:	22e1      	movs	r2, #225	@ 0xe1
 8004d30:	0252      	lsls	r2, r2, #9
 8004d32:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8004d34:	4b0e      	ldr	r3, [pc, #56]	@ (8004d70 <vcom_Init+0x58>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8004d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d70 <vcom_Init+0x58>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8004d40:	4b0b      	ldr	r3, [pc, #44]	@ (8004d70 <vcom_Init+0x58>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8004d46:	4b0a      	ldr	r3, [pc, #40]	@ (8004d70 <vcom_Init+0x58>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX;
 8004d4c:	4b08      	ldr	r3, [pc, #32]	@ (8004d70 <vcom_Init+0x58>)
 8004d4e:	2208      	movs	r2, #8
 8004d50:	615a      	str	r2, [r3, #20]

  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8004d52:	4b07      	ldr	r3, [pc, #28]	@ (8004d70 <vcom_Init+0x58>)
 8004d54:	0018      	movs	r0, r3
 8004d56:	f013 fe9d 	bl	8018a94 <HAL_UART_Init>
 8004d5a:	1e03      	subs	r3, r0, #0
 8004d5c:	d001      	beq.n	8004d62 <vcom_Init+0x4a>
  {
    /* Initialization Error */
    Error_Handler();
 8004d5e:	f7fe fe8b 	bl	8003a78 <Error_Handler>
  }
}
 8004d62:	46c0      	nop			@ (mov r8, r8)
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b002      	add	sp, #8
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	46c0      	nop			@ (mov r8, r8)
 8004d6c:	20000374 	.word	0x20000374
 8004d70:	200002f4 	.word	0x200002f4
 8004d74:	40004400 	.word	0x40004400

08004d78 <vcom_Trace>:

void vcom_Trace(uint8_t *p_data, uint16_t size)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	000a      	movs	r2, r1
 8004d82:	1cbb      	adds	r3, r7, #2
 8004d84:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 8004d86:	1cbb      	adds	r3, r7, #2
 8004d88:	881a      	ldrh	r2, [r3, #0]
 8004d8a:	6879      	ldr	r1, [r7, #4]
 8004d8c:	4b03      	ldr	r3, [pc, #12]	@ (8004d9c <vcom_Trace+0x24>)
 8004d8e:	0018      	movs	r0, r3
 8004d90:	f013 fed4 	bl	8018b3c <HAL_UART_Transmit_DMA>
}
 8004d94:	46c0      	nop			@ (mov r8, r8)
 8004d96:	46bd      	mov	sp, r7
 8004d98:	b002      	add	sp, #8
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	200002f4 	.word	0x200002f4

08004da0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* buffer transmission complete*/
  TxCpltCallback();
 8004da8:	4b03      	ldr	r3, [pc, #12]	@ (8004db8 <HAL_UART_TxCpltCallback+0x18>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4798      	blx	r3
}
 8004dae:	46c0      	nop			@ (mov r8, r8)
 8004db0:	46bd      	mov	sp, r7
 8004db2:	b002      	add	sp, #8
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	46c0      	nop			@ (mov r8, r8)
 8004db8:	20000374 	.word	0x20000374

08004dbc <vcom_DMA_TX_IRQHandler>:

void vcom_DMA_TX_IRQHandler(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(UartHandle.hdmatx);
 8004dc0:	4b03      	ldr	r3, [pc, #12]	@ (8004dd0 <vcom_DMA_TX_IRQHandler+0x14>)
 8004dc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	f011 fbc0 	bl	801654a <HAL_DMA_IRQHandler>
}
 8004dca:	46c0      	nop			@ (mov r8, r8)
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	200002f4 	.word	0x200002f4

08004dd4 <vcom_IRQHandler>:

void vcom_IRQHandler(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UartHandle);
 8004dd8:	4b03      	ldr	r3, [pc, #12]	@ (8004de8 <vcom_IRQHandler+0x14>)
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f013 ff3e 	bl	8018c5c <HAL_UART_IRQHandler>
}
 8004de0:	46c0      	nop			@ (mov r8, r8)
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	46c0      	nop			@ (mov r8, r8)
 8004de8:	200002f4 	.word	0x200002f4

08004dec <HAL_UART_MspInit>:
{
  HAL_UART_DeInit(&UartHandle);
}

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USARTx)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a34      	ldr	r2, [pc, #208]	@ (8004ecc <HAL_UART_MspInit+0xe0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d161      	bne.n	8004ec2 <HAL_UART_MspInit+0xd6>
    static DMA_HandleTypeDef hdma_tx;


    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 8004dfe:	4b34      	ldr	r3, [pc, #208]	@ (8004ed0 <HAL_UART_MspInit+0xe4>)
 8004e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e02:	4b33      	ldr	r3, [pc, #204]	@ (8004ed0 <HAL_UART_MspInit+0xe4>)
 8004e04:	2101      	movs	r1, #1
 8004e06:	430a      	orrs	r2, r1
 8004e08:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004e0a:	4b31      	ldr	r3, [pc, #196]	@ (8004ed0 <HAL_UART_MspInit+0xe4>)
 8004e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0e:	2201      	movs	r2, #1
 8004e10:	4013      	ands	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	697b      	ldr	r3, [r7, #20]
    USARTx_RX_GPIO_CLK_ENABLE();
 8004e16:	4b2e      	ldr	r3, [pc, #184]	@ (8004ed0 <HAL_UART_MspInit+0xe4>)
 8004e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e1a:	4b2d      	ldr	r3, [pc, #180]	@ (8004ed0 <HAL_UART_MspInit+0xe4>)
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004e22:	4b2b      	ldr	r3, [pc, #172]	@ (8004ed0 <HAL_UART_MspInit+0xe4>)
 8004e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e26:	2201      	movs	r2, #1
 8004e28:	4013      	ands	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	693b      	ldr	r3, [r7, #16]

    /* Enable USARTx clock */
    USARTx_CLK_ENABLE();
 8004e2e:	4b28      	ldr	r3, [pc, #160]	@ (8004ed0 <HAL_UART_MspInit+0xe4>)
 8004e30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e32:	4b27      	ldr	r3, [pc, #156]	@ (8004ed0 <HAL_UART_MspInit+0xe4>)
 8004e34:	2180      	movs	r1, #128	@ 0x80
 8004e36:	0289      	lsls	r1, r1, #10
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable DMA clock */
    DMAx_CLK_ENABLE();
 8004e3c:	4b24      	ldr	r3, [pc, #144]	@ (8004ed0 <HAL_UART_MspInit+0xe4>)
 8004e3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e40:	4b23      	ldr	r3, [pc, #140]	@ (8004ed0 <HAL_UART_MspInit+0xe4>)
 8004e42:	2101      	movs	r1, #1
 8004e44:	430a      	orrs	r2, r1
 8004e46:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e48:	4b21      	ldr	r3, [pc, #132]	@ (8004ed0 <HAL_UART_MspInit+0xe4>)
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	4013      	ands	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	68fb      	ldr	r3, [r7, #12]

    /*##-2- Configure peripheral GPIO ##########################################*/
    /* UART  pin configuration  */
    vcom_IoInit();
 8004e54:	f000 f842 	bl	8004edc <vcom_IoInit>

    /*##-3- Configure the DMA ##################################################*/
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8004e58:	4b1e      	ldr	r3, [pc, #120]	@ (8004ed4 <HAL_UART_MspInit+0xe8>)
 8004e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ed8 <HAL_UART_MspInit+0xec>)
 8004e5c:	601a      	str	r2, [r3, #0]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8004e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ed4 <HAL_UART_MspInit+0xe8>)
 8004e60:	2210      	movs	r2, #16
 8004e62:	609a      	str	r2, [r3, #8]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004e64:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed4 <HAL_UART_MspInit+0xe8>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	60da      	str	r2, [r3, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8004e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ed4 <HAL_UART_MspInit+0xe8>)
 8004e6c:	2280      	movs	r2, #128	@ 0x80
 8004e6e:	611a      	str	r2, [r3, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e70:	4b18      	ldr	r3, [pc, #96]	@ (8004ed4 <HAL_UART_MspInit+0xe8>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	615a      	str	r2, [r3, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8004e76:	4b17      	ldr	r3, [pc, #92]	@ (8004ed4 <HAL_UART_MspInit+0xe8>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	619a      	str	r2, [r3, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 8004e7c:	4b15      	ldr	r3, [pc, #84]	@ (8004ed4 <HAL_UART_MspInit+0xe8>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	61da      	str	r2, [r3, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8004e82:	4b14      	ldr	r3, [pc, #80]	@ (8004ed4 <HAL_UART_MspInit+0xe8>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	621a      	str	r2, [r3, #32]
#ifndef STM32L152xE
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8004e88:	4b12      	ldr	r3, [pc, #72]	@ (8004ed4 <HAL_UART_MspInit+0xe8>)
 8004e8a:	2204      	movs	r2, #4
 8004e8c:	605a      	str	r2, [r3, #4]
#endif
    HAL_DMA_Init(&hdma_tx);
 8004e8e:	4b11      	ldr	r3, [pc, #68]	@ (8004ed4 <HAL_UART_MspInit+0xe8>)
 8004e90:	0018      	movs	r0, r3
 8004e92:	f011 fa35 	bl	8016300 <HAL_DMA_Init>

    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a0e      	ldr	r2, [pc, #56]	@ (8004ed4 <HAL_UART_MspInit+0xe8>)
 8004e9a:	669a      	str	r2, [r3, #104]	@ 0x68
 8004e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed4 <HAL_UART_MspInit+0xe8>)
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	629a      	str	r2, [r3, #40]	@ 0x28

    /*##-4- Configure the NVIC for DMA #########################################*/
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	200b      	movs	r0, #11
 8004ea8:	f011 fa04 	bl	80162b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8004eac:	200b      	movs	r0, #11
 8004eae:	f011 fa16 	bl	80162de <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	201c      	movs	r0, #28
 8004eb8:	f011 f9fc 	bl	80162b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8004ebc:	201c      	movs	r0, #28
 8004ebe:	f011 fa0e 	bl	80162de <HAL_NVIC_EnableIRQ>
  }
}
 8004ec2:	46c0      	nop			@ (mov r8, r8)
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	b006      	add	sp, #24
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	46c0      	nop			@ (mov r8, r8)
 8004ecc:	40004400 	.word	0x40004400
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	20000378 	.word	0x20000378
 8004ed8:	40020080 	.word	0x40020080

08004edc <vcom_IoInit>:
  /*##-4- Disable the NVIC for DMA ###########################################*/
  HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
}

void vcom_IoInit(void)
{
 8004edc:	b590      	push	{r4, r7, lr}
 8004ede:	b089      	sub	sp, #36	@ 0x24
 8004ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8004ee2:	240c      	movs	r4, #12
 8004ee4:	193b      	adds	r3, r7, r4
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	2314      	movs	r3, #20
 8004eea:	001a      	movs	r2, r3
 8004eec:	2100      	movs	r1, #0
 8004eee:	f014 fd5d 	bl	80199ac <memset>
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8004ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8004f70 <vcom_IoInit+0x94>)
 8004ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8004f70 <vcom_IoInit+0x94>)
 8004ef8:	2101      	movs	r1, #1
 8004efa:	430a      	orrs	r2, r1
 8004efc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004efe:	4b1c      	ldr	r3, [pc, #112]	@ (8004f70 <vcom_IoInit+0x94>)
 8004f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f02:	2201      	movs	r2, #1
 8004f04:	4013      	ands	r3, r2
 8004f06:	60bb      	str	r3, [r7, #8]
 8004f08:	68bb      	ldr	r3, [r7, #8]
  USARTx_RX_GPIO_CLK_ENABLE();
 8004f0a:	4b19      	ldr	r3, [pc, #100]	@ (8004f70 <vcom_IoInit+0x94>)
 8004f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f0e:	4b18      	ldr	r3, [pc, #96]	@ (8004f70 <vcom_IoInit+0x94>)
 8004f10:	2101      	movs	r1, #1
 8004f12:	430a      	orrs	r2, r1
 8004f14:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004f16:	4b16      	ldr	r3, [pc, #88]	@ (8004f70 <vcom_IoInit+0x94>)
 8004f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	607b      	str	r3, [r7, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8004f22:	193b      	adds	r3, r7, r4
 8004f24:	2204      	movs	r2, #4
 8004f26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004f28:	193b      	adds	r3, r7, r4
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004f2e:	193b      	adds	r3, r7, r4
 8004f30:	2200      	movs	r2, #0
 8004f32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8004f34:	193b      	adds	r3, r7, r4
 8004f36:	2203      	movs	r2, #3
 8004f38:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8004f3a:	193b      	adds	r3, r7, r4
 8004f3c:	2204      	movs	r2, #4
 8004f3e:	611a      	str	r2, [r3, #16]

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8004f40:	193a      	adds	r2, r7, r4
 8004f42:	23a0      	movs	r3, #160	@ 0xa0
 8004f44:	05db      	lsls	r3, r3, #23
 8004f46:	0011      	movs	r1, r2
 8004f48:	0018      	movs	r0, r3
 8004f4a:	f011 fbdb 	bl	8016704 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8004f4e:	193b      	adds	r3, r7, r4
 8004f50:	2208      	movs	r2, #8
 8004f52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8004f54:	193b      	adds	r3, r7, r4
 8004f56:	2204      	movs	r2, #4
 8004f58:	611a      	str	r2, [r3, #16]

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8004f5a:	193a      	adds	r2, r7, r4
 8004f5c:	23a0      	movs	r3, #160	@ 0xa0
 8004f5e:	05db      	lsls	r3, r3, #23
 8004f60:	0011      	movs	r1, r2
 8004f62:	0018      	movs	r0, r3
 8004f64:	f011 fbce 	bl	8016704 <HAL_GPIO_Init>
}
 8004f68:	46c0      	nop			@ (mov r8, r8)
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	b009      	add	sp, #36	@ 0x24
 8004f6e:	bd90      	pop	{r4, r7, pc}
 8004f70:	40021000 	.word	0x40021000

08004f74 <vcom_IoDeInit>:

void vcom_IoDeInit(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8004f7a:	1d3b      	adds	r3, r7, #4
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	2314      	movs	r3, #20
 8004f80:	001a      	movs	r2, r3
 8004f82:	2100      	movs	r1, #0
 8004f84:	f014 fd12 	bl	80199ac <memset>

  USARTx_TX_GPIO_CLK_ENABLE();
 8004f88:	4b14      	ldr	r3, [pc, #80]	@ (8004fdc <vcom_IoDeInit+0x68>)
 8004f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f8c:	4b13      	ldr	r3, [pc, #76]	@ (8004fdc <vcom_IoDeInit+0x68>)
 8004f8e:	2101      	movs	r1, #1
 8004f90:	430a      	orrs	r2, r1
 8004f92:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004f94:	4b11      	ldr	r3, [pc, #68]	@ (8004fdc <vcom_IoDeInit+0x68>)
 8004f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f98:	2201      	movs	r2, #1
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	603b      	str	r3, [r7, #0]
 8004f9e:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8004fa0:	1d3b      	adds	r3, r7, #4
 8004fa2:	2203      	movs	r2, #3
 8004fa4:	605a      	str	r2, [r3, #4]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004fa6:	1d3b      	adds	r3, r7, #4
 8004fa8:	2200      	movs	r2, #0
 8004faa:	609a      	str	r2, [r3, #8]

  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
 8004fac:	1d3b      	adds	r3, r7, #4
 8004fae:	2204      	movs	r2, #4
 8004fb0:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 8004fb2:	1d3a      	adds	r2, r7, #4
 8004fb4:	23a0      	movs	r3, #160	@ 0xa0
 8004fb6:	05db      	lsls	r3, r3, #23
 8004fb8:	0011      	movs	r1, r2
 8004fba:	0018      	movs	r0, r3
 8004fbc:	f011 fba2 	bl	8016704 <HAL_GPIO_Init>

  GPIO_InitStructure.Pin =  USARTx_RX_PIN ;
 8004fc0:	1d3b      	adds	r3, r7, #4
 8004fc2:	2208      	movs	r2, #8
 8004fc4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStructure);
 8004fc6:	1d3a      	adds	r2, r7, #4
 8004fc8:	23a0      	movs	r3, #160	@ 0xa0
 8004fca:	05db      	lsls	r3, r3, #23
 8004fcc:	0011      	movs	r1, r2
 8004fce:	0018      	movs	r0, r3
 8004fd0:	f011 fb98 	bl	8016704 <HAL_GPIO_Init>
}
 8004fd4:	46c0      	nop			@ (mov r8, r8)
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	b006      	add	sp, #24
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	40021000 	.word	0x40021000

08004fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004fe0:	480d      	ldr	r0, [pc, #52]	@ (8005018 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004fe2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8004fe4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004fe6:	e003      	b.n	8004ff0 <LoopCopyDataInit>

08004fe8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800501c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8004fea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004fec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004fee:	3104      	adds	r1, #4

08004ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8004ff0:	480b      	ldr	r0, [pc, #44]	@ (8005020 <LoopForever+0xa>)
  ldr  r3, =_edata
 8004ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8005024 <LoopForever+0xe>)
  adds  r2, r0, r1
 8004ff4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004ff6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004ff8:	d3f6      	bcc.n	8004fe8 <CopyDataInit>
  ldr  r2, =_sbss
 8004ffa:	4a0b      	ldr	r2, [pc, #44]	@ (8005028 <LoopForever+0x12>)
  b  LoopFillZerobss
 8004ffc:	e002      	b.n	8005004 <LoopFillZerobss>

08004ffe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8004ffe:	2300      	movs	r3, #0
  str  r3, [r2]
 8005000:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005002:	3204      	adds	r2, #4

08005004 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8005004:	4b09      	ldr	r3, [pc, #36]	@ (800502c <LoopForever+0x16>)
  cmp  r2, r3
 8005006:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005008:	d3f9      	bcc.n	8004ffe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800500a:	f002 fe6b 	bl	8007ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800500e:	f014 fcd5 	bl	80199bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005012:	f7ff fb73 	bl	80046fc <main>

08005016 <LoopForever>:

LoopForever:
    b LoopForever
 8005016:	e7fe      	b.n	8005016 <LoopForever>
   ldr   r0, =_estack
 8005018:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 800501c:	0801b5c4 	.word	0x0801b5c4
  ldr  r0, =_sdata
 8005020:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005024:	20000100 	.word	0x20000100
  ldr  r2, =_sbss
 8005028:	20000100 	.word	0x20000100
  ldr  r3, = _ebss
 800502c:	20001604 	.word	0x20001604

08005030 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005030:	e7fe      	b.n	8005030 <ADC1_COMP_IRQHandler>
	...

08005034 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08c      	sub	sp, #48	@ 0x30
 8005038:	af00      	add	r7, sp, #0
 800503a:	0002      	movs	r2, r0
 800503c:	1dfb      	adds	r3, r7, #7
 800503e:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE( Led );
 8005040:	1dfb      	adds	r3, r7, #7
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2b03      	cmp	r3, #3
 8005046:	d02f      	beq.n	80050a8 <BSP_LED_Init+0x74>
 8005048:	dc3b      	bgt.n	80050c2 <BSP_LED_Init+0x8e>
 800504a:	2b02      	cmp	r3, #2
 800504c:	d01f      	beq.n	800508e <BSP_LED_Init+0x5a>
 800504e:	dc38      	bgt.n	80050c2 <BSP_LED_Init+0x8e>
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <BSP_LED_Init+0x26>
 8005054:	2b01      	cmp	r3, #1
 8005056:	d00d      	beq.n	8005074 <BSP_LED_Init+0x40>
 8005058:	e033      	b.n	80050c2 <BSP_LED_Init+0x8e>
 800505a:	4b2a      	ldr	r3, [pc, #168]	@ (8005104 <BSP_LED_Init+0xd0>)
 800505c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800505e:	4b29      	ldr	r3, [pc, #164]	@ (8005104 <BSP_LED_Init+0xd0>)
 8005060:	2102      	movs	r1, #2
 8005062:	430a      	orrs	r2, r1
 8005064:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005066:	4b27      	ldr	r3, [pc, #156]	@ (8005104 <BSP_LED_Init+0xd0>)
 8005068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506a:	2202      	movs	r2, #2
 800506c:	4013      	ands	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	e026      	b.n	80050c2 <BSP_LED_Init+0x8e>
 8005074:	4b23      	ldr	r3, [pc, #140]	@ (8005104 <BSP_LED_Init+0xd0>)
 8005076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005078:	4b22      	ldr	r3, [pc, #136]	@ (8005104 <BSP_LED_Init+0xd0>)
 800507a:	2101      	movs	r1, #1
 800507c:	430a      	orrs	r2, r1
 800507e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005080:	4b20      	ldr	r3, [pc, #128]	@ (8005104 <BSP_LED_Init+0xd0>)
 8005082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005084:	2201      	movs	r2, #1
 8005086:	4013      	ands	r3, r2
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	e019      	b.n	80050c2 <BSP_LED_Init+0x8e>
 800508e:	4b1d      	ldr	r3, [pc, #116]	@ (8005104 <BSP_LED_Init+0xd0>)
 8005090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005092:	4b1c      	ldr	r3, [pc, #112]	@ (8005104 <BSP_LED_Init+0xd0>)
 8005094:	2102      	movs	r1, #2
 8005096:	430a      	orrs	r2, r1
 8005098:	62da      	str	r2, [r3, #44]	@ 0x2c
 800509a:	4b1a      	ldr	r3, [pc, #104]	@ (8005104 <BSP_LED_Init+0xd0>)
 800509c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509e:	2202      	movs	r2, #2
 80050a0:	4013      	ands	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	e00c      	b.n	80050c2 <BSP_LED_Init+0x8e>
 80050a8:	4b16      	ldr	r3, [pc, #88]	@ (8005104 <BSP_LED_Init+0xd0>)
 80050aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ac:	4b15      	ldr	r3, [pc, #84]	@ (8005104 <BSP_LED_Init+0xd0>)
 80050ae:	2102      	movs	r1, #2
 80050b0:	430a      	orrs	r2, r1
 80050b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80050b4:	4b13      	ldr	r3, [pc, #76]	@ (8005104 <BSP_LED_Init+0xd0>)
 80050b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b8:	2202      	movs	r2, #2
 80050ba:	4013      	ands	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	46c0      	nop			@ (mov r8, r8)

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80050c2:	1dfb      	adds	r3, r7, #7
 80050c4:	781a      	ldrb	r2, [r3, #0]
 80050c6:	4b10      	ldr	r3, [pc, #64]	@ (8005108 <BSP_LED_Init+0xd4>)
 80050c8:	0052      	lsls	r2, r2, #1
 80050ca:	5ad3      	ldrh	r3, [r2, r3]
 80050cc:	001a      	movs	r2, r3
 80050ce:	211c      	movs	r1, #28
 80050d0:	187b      	adds	r3, r7, r1
 80050d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050d4:	187b      	adds	r3, r7, r1
 80050d6:	2201      	movs	r2, #1
 80050d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050da:	187b      	adds	r3, r7, r1
 80050dc:	2200      	movs	r2, #0
 80050de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050e0:	187b      	adds	r3, r7, r1
 80050e2:	2203      	movs	r2, #3
 80050e4:	60da      	str	r2, [r3, #12]
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80050e6:	1dfb      	adds	r3, r7, #7
 80050e8:	781a      	ldrb	r2, [r3, #0]
 80050ea:	4b08      	ldr	r3, [pc, #32]	@ (800510c <BSP_LED_Init+0xd8>)
 80050ec:	0092      	lsls	r2, r2, #2
 80050ee:	58d3      	ldr	r3, [r2, r3]
 80050f0:	187a      	adds	r2, r7, r1
 80050f2:	0011      	movs	r1, r2
 80050f4:	0018      	movs	r0, r3
 80050f6:	f011 fb05 	bl	8016704 <HAL_GPIO_Init>
}
 80050fa:	46c0      	nop			@ (mov r8, r8)
 80050fc:	46bd      	mov	sp, r7
 80050fe:	b00c      	add	sp, #48	@ 0x30
 8005100:	bd80      	pop	{r7, pc}
 8005102:	46c0      	nop			@ (mov r8, r8)
 8005104:	40021000 	.word	0x40021000
 8005108:	0801ac80 	.word	0x0801ac80
 800510c:	20000030 	.word	0x20000030

08005110 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	0002      	movs	r2, r0
 8005118:	1dfb      	adds	r3, r7, #7
 800511a:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 800511c:	1dfb      	adds	r3, r7, #7
 800511e:	781a      	ldrb	r2, [r3, #0]
 8005120:	4b07      	ldr	r3, [pc, #28]	@ (8005140 <BSP_LED_On+0x30>)
 8005122:	0092      	lsls	r2, r2, #2
 8005124:	58d0      	ldr	r0, [r2, r3]
 8005126:	1dfb      	adds	r3, r7, #7
 8005128:	781a      	ldrb	r2, [r3, #0]
 800512a:	4b06      	ldr	r3, [pc, #24]	@ (8005144 <BSP_LED_On+0x34>)
 800512c:	0052      	lsls	r2, r2, #1
 800512e:	5ad3      	ldrh	r3, [r2, r3]
 8005130:	2201      	movs	r2, #1
 8005132:	0019      	movs	r1, r3
 8005134:	f011 fc64 	bl	8016a00 <HAL_GPIO_WritePin>
}
 8005138:	46c0      	nop			@ (mov r8, r8)
 800513a:	46bd      	mov	sp, r7
 800513c:	b002      	add	sp, #8
 800513e:	bd80      	pop	{r7, pc}
 8005140:	20000030 	.word	0x20000030
 8005144:	0801ac80 	.word	0x0801ac80

08005148 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	0002      	movs	r2, r0
 8005150:	1dfb      	adds	r3, r7, #7
 8005152:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8005154:	1dfb      	adds	r3, r7, #7
 8005156:	781a      	ldrb	r2, [r3, #0]
 8005158:	4b07      	ldr	r3, [pc, #28]	@ (8005178 <BSP_LED_Off+0x30>)
 800515a:	0092      	lsls	r2, r2, #2
 800515c:	58d0      	ldr	r0, [r2, r3]
 800515e:	1dfb      	adds	r3, r7, #7
 8005160:	781a      	ldrb	r2, [r3, #0]
 8005162:	4b06      	ldr	r3, [pc, #24]	@ (800517c <BSP_LED_Off+0x34>)
 8005164:	0052      	lsls	r2, r2, #1
 8005166:	5ad3      	ldrh	r3, [r2, r3]
 8005168:	2200      	movs	r2, #0
 800516a:	0019      	movs	r1, r3
 800516c:	f011 fc48 	bl	8016a00 <HAL_GPIO_WritePin>
}
 8005170:	46c0      	nop			@ (mov r8, r8)
 8005172:	46bd      	mov	sp, r7
 8005174:	b002      	add	sp, #8
 8005176:	bd80      	pop	{r7, pc}
 8005178:	20000030 	.word	0x20000030
 800517c:	0801ac80 	.word	0x0801ac80

08005180 <SX1276GetWakeTime>:
    SX1276SetPublicNetwork,
    SX1276GetWakeupTime
};

uint32_t SX1276GetWakeTime( void )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
  return  BOARD_WAKEUP_TIME;
 8005184:	2305      	movs	r3, #5
}
 8005186:	0018      	movs	r0, r3
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <SX1276SetXO>:

void SX1276SetXO( uint8_t state )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	0002      	movs	r2, r0
 8005194:	1dfb      	adds	r3, r7, #7
 8005196:	701a      	strb	r2, [r3, #0]

  if (state == SET )
 8005198:	1dfb      	adds	r3, r7, #7
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d10b      	bne.n	80051b8 <SX1276SetXO+0x2c>
  {
    TCXO_ON(); 
 80051a0:	2380      	movs	r3, #128	@ 0x80
 80051a2:	0159      	lsls	r1, r3, #5
 80051a4:	23a0      	movs	r3, #160	@ 0xa0
 80051a6:	05db      	lsls	r3, r3, #23
 80051a8:	2201      	movs	r2, #1
 80051aa:	0018      	movs	r0, r3
 80051ac:	f7fe fd40 	bl	8003c30 <HW_GPIO_Write>
    
    DelayMs( BOARD_WAKEUP_TIME ); //start up time of TCXO
 80051b0:	2005      	movs	r0, #5
 80051b2:	f7fd ff02 	bl	8002fba <HAL_Delay>
  }
  else
  {
    TCXO_OFF(); 
  }
}
 80051b6:	e007      	b.n	80051c8 <SX1276SetXO+0x3c>
    TCXO_OFF(); 
 80051b8:	2380      	movs	r3, #128	@ 0x80
 80051ba:	0159      	lsls	r1, r3, #5
 80051bc:	23a0      	movs	r3, #160	@ 0xa0
 80051be:	05db      	lsls	r3, r3, #23
 80051c0:	2200      	movs	r2, #0
 80051c2:	0018      	movs	r0, r3
 80051c4:	f7fe fd34 	bl	8003c30 <HW_GPIO_Write>
}
 80051c8:	46c0      	nop			@ (mov r8, r8)
 80051ca:	46bd      	mov	sp, r7
 80051cc:	b002      	add	sp, #8
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <SX1276IoInit>:
void SX1276IoInit( void )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 80051d6:	1d3b      	adds	r3, r7, #4
 80051d8:	0018      	movs	r0, r3
 80051da:	2314      	movs	r3, #20
 80051dc:	001a      	movs	r2, r3
 80051de:	2100      	movs	r1, #0
 80051e0:	f014 fbe4 	bl	80199ac <memset>
  
  SX1276BoardInit( &BoardCallbacks );
 80051e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005254 <SX1276IoInit+0x84>)
 80051e6:	0018      	movs	r0, r3
 80051e8:	f000 fa68 	bl	80056bc <SX1276BoardInit>
  
  initStruct.Mode =GPIO_MODE_IT_RISING;
 80051ec:	1d3b      	adds	r3, r7, #4
 80051ee:	4a1a      	ldr	r2, [pc, #104]	@ (8005258 <SX1276IoInit+0x88>)
 80051f0:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLDOWN;
 80051f2:	1d3b      	adds	r3, r7, #4
 80051f4:	2202      	movs	r2, #2
 80051f6:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80051f8:	1d3b      	adds	r3, r7, #4
 80051fa:	2203      	movs	r2, #3
 80051fc:	60da      	str	r2, [r3, #12]

  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80051fe:	1d3b      	adds	r3, r7, #4
 8005200:	4816      	ldr	r0, [pc, #88]	@ (800525c <SX1276IoInit+0x8c>)
 8005202:	001a      	movs	r2, r3
 8005204:	2110      	movs	r1, #16
 8005206:	f7fe fc41 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 800520a:	1d3b      	adds	r3, r7, #4
 800520c:	4813      	ldr	r0, [pc, #76]	@ (800525c <SX1276IoInit+0x8c>)
 800520e:	001a      	movs	r2, r3
 8005210:	2102      	movs	r1, #2
 8005212:	f7fe fc3b 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8005216:	1d3b      	adds	r3, r7, #4
 8005218:	4810      	ldr	r0, [pc, #64]	@ (800525c <SX1276IoInit+0x8c>)
 800521a:	001a      	movs	r2, r3
 800521c:	2101      	movs	r1, #1
 800521e:	f7fe fc35 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8005222:	1d3a      	adds	r2, r7, #4
 8005224:	2380      	movs	r3, #128	@ 0x80
 8005226:	019b      	lsls	r3, r3, #6
 8005228:	480d      	ldr	r0, [pc, #52]	@ (8005260 <SX1276IoInit+0x90>)
 800522a:	0019      	movs	r1, r3
 800522c:	f7fe fc2e 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_4_PORT, RADIO_DIO_4_PIN, &initStruct );
#endif
#ifdef RADIO_DIO_5
  HW_GPIO_Init( RADIO_DIO_5_PORT, RADIO_DIO_5_PIN, &initStruct );
#endif
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8005230:	1d3b      	adds	r3, r7, #4
 8005232:	2201      	movs	r2, #1
 8005234:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;  
 8005236:	1d3b      	adds	r3, r7, #4
 8005238:	2200      	movs	r2, #0
 800523a:	609a      	str	r2, [r3, #8]
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 800523c:	1d3a      	adds	r2, r7, #4
 800523e:	2380      	movs	r3, #128	@ 0x80
 8005240:	0159      	lsls	r1, r3, #5
 8005242:	23a0      	movs	r3, #160	@ 0xa0
 8005244:	05db      	lsls	r3, r3, #23
 8005246:	0018      	movs	r0, r3
 8005248:	f7fe fc20 	bl	8003a8c <HW_GPIO_Init>
}
 800524c:	46c0      	nop			@ (mov r8, r8)
 800524e:	46bd      	mov	sp, r7
 8005250:	b006      	add	sp, #24
 8005252:	bd80      	pop	{r7, pc}
 8005254:	20000040 	.word	0x20000040
 8005258:	10110000 	.word	0x10110000
 800525c:	50000400 	.word	0x50000400
 8005260:	50000800 	.word	0x50000800

08005264 <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4810      	ldr	r0, [pc, #64]	@ (80052b4 <SX1276IoIrqInit+0x50>)
 8005272:	2200      	movs	r2, #0
 8005274:	2110      	movs	r1, #16
 8005276:	f7fe fc7f 	bl	8003b78 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	3304      	adds	r3, #4
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	480c      	ldr	r0, [pc, #48]	@ (80052b4 <SX1276IoIrqInit+0x50>)
 8005282:	2200      	movs	r2, #0
 8005284:	2102      	movs	r1, #2
 8005286:	f7fe fc77 	bl	8003b78 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	3308      	adds	r3, #8
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4808      	ldr	r0, [pc, #32]	@ (80052b4 <SX1276IoIrqInit+0x50>)
 8005292:	2200      	movs	r2, #0
 8005294:	2101      	movs	r1, #1
 8005296:	f7fe fc6f 	bl	8003b78 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	330c      	adds	r3, #12
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2280      	movs	r2, #128	@ 0x80
 80052a2:	0191      	lsls	r1, r2, #6
 80052a4:	4804      	ldr	r0, [pc, #16]	@ (80052b8 <SX1276IoIrqInit+0x54>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	f7fe fc66 	bl	8003b78 <HW_GPIO_SetIrq>
}
 80052ac:	46c0      	nop			@ (mov r8, r8)
 80052ae:	46bd      	mov	sp, r7
 80052b0:	b002      	add	sp, #8
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	50000400 	.word	0x50000400
 80052b8:	50000800 	.word	0x50000800

080052bc <SX1276IoDeInit>:

void SX1276IoDeInit( void )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 80052c2:	1d3b      	adds	r3, r7, #4
 80052c4:	0018      	movs	r0, r3
 80052c6:	2314      	movs	r3, #20
 80052c8:	001a      	movs	r2, r3
 80052ca:	2100      	movs	r1, #0
 80052cc:	f014 fb6e 	bl	80199ac <memset>

  initStruct.Mode = GPIO_MODE_IT_RISING ; //GPIO_MODE_ANALOG;
 80052d0:	1d3b      	adds	r3, r7, #4
 80052d2:	4a11      	ldr	r2, [pc, #68]	@ (8005318 <SX1276IoDeInit+0x5c>)
 80052d4:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLDOWN;
 80052d6:	1d3b      	adds	r3, r7, #4
 80052d8:	2202      	movs	r2, #2
 80052da:	609a      	str	r2, [r3, #8]
  
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80052dc:	1d3b      	adds	r3, r7, #4
 80052de:	480f      	ldr	r0, [pc, #60]	@ (800531c <SX1276IoDeInit+0x60>)
 80052e0:	001a      	movs	r2, r3
 80052e2:	2110      	movs	r1, #16
 80052e4:	f7fe fbd2 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 80052e8:	1d3b      	adds	r3, r7, #4
 80052ea:	480c      	ldr	r0, [pc, #48]	@ (800531c <SX1276IoDeInit+0x60>)
 80052ec:	001a      	movs	r2, r3
 80052ee:	2102      	movs	r1, #2
 80052f0:	f7fe fbcc 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 80052f4:	1d3b      	adds	r3, r7, #4
 80052f6:	4809      	ldr	r0, [pc, #36]	@ (800531c <SX1276IoDeInit+0x60>)
 80052f8:	001a      	movs	r2, r3
 80052fa:	2101      	movs	r1, #1
 80052fc:	f7fe fbc6 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8005300:	1d3a      	adds	r2, r7, #4
 8005302:	2380      	movs	r3, #128	@ 0x80
 8005304:	019b      	lsls	r3, r3, #6
 8005306:	4806      	ldr	r0, [pc, #24]	@ (8005320 <SX1276IoDeInit+0x64>)
 8005308:	0019      	movs	r1, r3
 800530a:	f7fe fbbf 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_4_PORT, RADIO_DIO_4_PIN, &initStruct );
#endif
#ifdef RADIO_DIO_5
  HW_GPIO_Init( RADIO_DIO_5_PORT, RADIO_DIO_5_PIN, &initStruct );
#endif
}
 800530e:	46c0      	nop			@ (mov r8, r8)
 8005310:	46bd      	mov	sp, r7
 8005312:	b006      	add	sp, #24
 8005314:	bd80      	pop	{r7, pc}
 8005316:	46c0      	nop			@ (mov r8, r8)
 8005318:	10110000 	.word	0x10110000
 800531c:	50000400 	.word	0x50000400
 8005320:	50000800 	.word	0x50000800

08005324 <SX1276SetRfTxPower>:

void SX1276SetRfTxPower( int8_t power )
{
 8005324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	0002      	movs	r2, r0
 800532c:	1dfb      	adds	r3, r7, #7
 800532e:	701a      	strb	r2, [r3, #0]
    uint8_t paConfig = 0;
 8005330:	250f      	movs	r5, #15
 8005332:	197b      	adds	r3, r7, r5
 8005334:	2200      	movs	r2, #0
 8005336:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 8005338:	260e      	movs	r6, #14
 800533a:	19bb      	adds	r3, r7, r6
 800533c:	2200      	movs	r2, #0
 800533e:	701a      	strb	r2, [r3, #0]

    paConfig = SX1276Read( REG_PACONFIG );
 8005340:	197c      	adds	r4, r7, r5
 8005342:	2009      	movs	r0, #9
 8005344:	f001 fed0 	bl	80070e8 <SX1276Read>
 8005348:	0003      	movs	r3, r0
 800534a:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 800534c:	19bc      	adds	r4, r7, r6
 800534e:	204d      	movs	r0, #77	@ 0x4d
 8005350:	f001 feca 	bl	80070e8 <SX1276Read>
 8005354:	0003      	movs	r3, r0
 8005356:	7023      	strb	r3, [r4, #0]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 8005358:	197b      	adds	r3, r7, r5
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	b25b      	sxtb	r3, r3
 800535e:	227f      	movs	r2, #127	@ 0x7f
 8005360:	4013      	ands	r3, r2
 8005362:	b25c      	sxtb	r4, r3
 8005364:	1dfb      	adds	r3, r7, #7
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	b25b      	sxtb	r3, r3
 800536a:	0018      	movs	r0, r3
 800536c:	f000 f8ba 	bl	80054e4 <SX1276GetPaSelect>
 8005370:	0003      	movs	r3, r0
 8005372:	b25b      	sxtb	r3, r3
 8005374:	4323      	orrs	r3, r4
 8005376:	b25a      	sxtb	r2, r3
 8005378:	197b      	adds	r3, r7, r5
 800537a:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800537c:	197b      	adds	r3, r7, r5
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	b25b      	sxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	da66      	bge.n	8005454 <SX1276SetRfTxPower+0x130>
    {
        if( power > 17 )
 8005386:	1dfb      	adds	r3, r7, #7
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	b25b      	sxtb	r3, r3
 800538c:	2b11      	cmp	r3, #17
 800538e:	dd06      	ble.n	800539e <SX1276SetRfTxPower+0x7a>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8005390:	19bb      	adds	r3, r7, r6
 8005392:	19ba      	adds	r2, r7, r6
 8005394:	7812      	ldrb	r2, [r2, #0]
 8005396:	2107      	movs	r1, #7
 8005398:	430a      	orrs	r2, r1
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	e00b      	b.n	80053b6 <SX1276SetRfTxPower+0x92>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800539e:	210e      	movs	r1, #14
 80053a0:	187b      	adds	r3, r7, r1
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	b25b      	sxtb	r3, r3
 80053a6:	2207      	movs	r2, #7
 80053a8:	4393      	bics	r3, r2
 80053aa:	b25b      	sxtb	r3, r3
 80053ac:	2204      	movs	r2, #4
 80053ae:	4313      	orrs	r3, r2
 80053b0:	b25a      	sxtb	r2, r3
 80053b2:	187b      	adds	r3, r7, r1
 80053b4:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 80053b6:	230e      	movs	r3, #14
 80053b8:	18fb      	adds	r3, r7, r3
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2207      	movs	r2, #7
 80053be:	4013      	ands	r3, r2
 80053c0:	2b07      	cmp	r3, #7
 80053c2:	d123      	bne.n	800540c <SX1276SetRfTxPower+0xe8>
        {
            if( power < 5 )
 80053c4:	1dfb      	adds	r3, r7, #7
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	b25b      	sxtb	r3, r3
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	dc02      	bgt.n	80053d4 <SX1276SetRfTxPower+0xb0>
            {
                power = 5;
 80053ce:	1dfb      	adds	r3, r7, #7
 80053d0:	2205      	movs	r2, #5
 80053d2:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 80053d4:	1dfb      	adds	r3, r7, #7
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	b25b      	sxtb	r3, r3
 80053da:	2b14      	cmp	r3, #20
 80053dc:	dd02      	ble.n	80053e4 <SX1276SetRfTxPower+0xc0>
            {
                power = 20;
 80053de:	1dfb      	adds	r3, r7, #7
 80053e0:	2214      	movs	r2, #20
 80053e2:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 80053e4:	200f      	movs	r0, #15
 80053e6:	183b      	adds	r3, r7, r0
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	b25b      	sxtb	r3, r3
 80053ec:	220f      	movs	r2, #15
 80053ee:	4393      	bics	r3, r2
 80053f0:	b25a      	sxtb	r2, r3
 80053f2:	1dfb      	adds	r3, r7, #7
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	3b05      	subs	r3, #5
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	b25b      	sxtb	r3, r3
 80053fc:	210f      	movs	r1, #15
 80053fe:	400b      	ands	r3, r1
 8005400:	b25b      	sxtb	r3, r3
 8005402:	4313      	orrs	r3, r2
 8005404:	b25a      	sxtb	r2, r3
 8005406:	183b      	adds	r3, r7, r0
 8005408:	701a      	strb	r2, [r3, #0]
 800540a:	e059      	b.n	80054c0 <SX1276SetRfTxPower+0x19c>
        }
        else
        {
            if( power < 2 )
 800540c:	1dfb      	adds	r3, r7, #7
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	b25b      	sxtb	r3, r3
 8005412:	2b01      	cmp	r3, #1
 8005414:	dc02      	bgt.n	800541c <SX1276SetRfTxPower+0xf8>
            {
                power = 2;
 8005416:	1dfb      	adds	r3, r7, #7
 8005418:	2202      	movs	r2, #2
 800541a:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 800541c:	1dfb      	adds	r3, r7, #7
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	b25b      	sxtb	r3, r3
 8005422:	2b11      	cmp	r3, #17
 8005424:	dd02      	ble.n	800542c <SX1276SetRfTxPower+0x108>
            {
                power = 17;
 8005426:	1dfb      	adds	r3, r7, #7
 8005428:	2211      	movs	r2, #17
 800542a:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 800542c:	200f      	movs	r0, #15
 800542e:	183b      	adds	r3, r7, r0
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	b25b      	sxtb	r3, r3
 8005434:	220f      	movs	r2, #15
 8005436:	4393      	bics	r3, r2
 8005438:	b25a      	sxtb	r2, r3
 800543a:	1dfb      	adds	r3, r7, #7
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	3b02      	subs	r3, #2
 8005440:	b2db      	uxtb	r3, r3
 8005442:	b25b      	sxtb	r3, r3
 8005444:	210f      	movs	r1, #15
 8005446:	400b      	ands	r3, r1
 8005448:	b25b      	sxtb	r3, r3
 800544a:	4313      	orrs	r3, r2
 800544c:	b25a      	sxtb	r2, r3
 800544e:	183b      	adds	r3, r7, r0
 8005450:	701a      	strb	r2, [r3, #0]
 8005452:	e035      	b.n	80054c0 <SX1276SetRfTxPower+0x19c>
        }
    }
    else
    {
        if( power > 0 )
 8005454:	1dfb      	adds	r3, r7, #7
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	b25b      	sxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	dd18      	ble.n	8005490 <SX1276SetRfTxPower+0x16c>
        {
            if( power > 15 )
 800545e:	1dfb      	adds	r3, r7, #7
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	b25b      	sxtb	r3, r3
 8005464:	2b0f      	cmp	r3, #15
 8005466:	dd02      	ble.n	800546e <SX1276SetRfTxPower+0x14a>
            {
                power = 15;
 8005468:	1dfb      	adds	r3, r7, #7
 800546a:	220f      	movs	r2, #15
 800546c:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 800546e:	210f      	movs	r1, #15
 8005470:	187b      	adds	r3, r7, r1
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	b25b      	sxtb	r3, r3
 8005476:	227f      	movs	r2, #127	@ 0x7f
 8005478:	4393      	bics	r3, r2
 800547a:	b25b      	sxtb	r3, r3
 800547c:	2270      	movs	r2, #112	@ 0x70
 800547e:	4313      	orrs	r3, r2
 8005480:	b25a      	sxtb	r2, r3
 8005482:	1dfb      	adds	r3, r7, #7
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	4313      	orrs	r3, r2
 8005488:	b25a      	sxtb	r2, r3
 800548a:	187b      	adds	r3, r7, r1
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	e017      	b.n	80054c0 <SX1276SetRfTxPower+0x19c>
        }
        else
        {
            if( power < -4 )
 8005490:	1dfb      	adds	r3, r7, #7
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	b25b      	sxtb	r3, r3
 8005496:	3304      	adds	r3, #4
 8005498:	da02      	bge.n	80054a0 <SX1276SetRfTxPower+0x17c>
            {
                power = -4;
 800549a:	1dfb      	adds	r3, r7, #7
 800549c:	22fc      	movs	r2, #252	@ 0xfc
 800549e:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 80054a0:	210f      	movs	r1, #15
 80054a2:	187b      	adds	r3, r7, r1
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	b25b      	sxtb	r3, r3
 80054a8:	227f      	movs	r2, #127	@ 0x7f
 80054aa:	4393      	bics	r3, r2
 80054ac:	b25a      	sxtb	r2, r3
 80054ae:	1dfb      	adds	r3, r7, #7
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	3304      	adds	r3, #4
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	b25b      	sxtb	r3, r3
 80054b8:	4313      	orrs	r3, r2
 80054ba:	b25a      	sxtb	r2, r3
 80054bc:	187b      	adds	r3, r7, r1
 80054be:	701a      	strb	r2, [r3, #0]
        }
    }
    SX1276Write( REG_PACONFIG, paConfig );
 80054c0:	230f      	movs	r3, #15
 80054c2:	18fb      	adds	r3, r7, r3
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	0019      	movs	r1, r3
 80054c8:	2009      	movs	r0, #9
 80054ca:	f001 fdf9 	bl	80070c0 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 80054ce:	230e      	movs	r3, #14
 80054d0:	18fb      	adds	r3, r7, r3
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	0019      	movs	r1, r3
 80054d6:	204d      	movs	r0, #77	@ 0x4d
 80054d8:	f001 fdf2 	bl	80070c0 <SX1276Write>
}
 80054dc:	46c0      	nop			@ (mov r8, r8)
 80054de:	46bd      	mov	sp, r7
 80054e0:	b005      	add	sp, #20
 80054e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054e4 <SX1276GetPaSelect>:

uint8_t SX1276GetPaSelect( int8_t power )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	0002      	movs	r2, r0
 80054ec:	1dfb      	adds	r3, r7, #7
 80054ee:	701a      	strb	r2, [r3, #0]
    if (power >14)
 80054f0:	1dfb      	adds	r3, r7, #7
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	b25b      	sxtb	r3, r3
 80054f6:	2b0e      	cmp	r3, #14
 80054f8:	dd01      	ble.n	80054fe <SX1276GetPaSelect+0x1a>
    {
        return RF_PACONFIG_PASELECT_PABOOST;
 80054fa:	2380      	movs	r3, #128	@ 0x80
 80054fc:	e000      	b.n	8005500 <SX1276GetPaSelect+0x1c>
    }
    else
    {
        return RF_PACONFIG_PASELECT_RFO;
 80054fe:	2300      	movs	r3, #0
    }
}
 8005500:	0018      	movs	r0, r3
 8005502:	46bd      	mov	sp, r7
 8005504:	b002      	add	sp, #8
 8005506:	bd80      	pop	{r7, pc}

08005508 <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	0002      	movs	r2, r0
 8005510:	1dfb      	adds	r3, r7, #7
 8005512:	701a      	strb	r2, [r3, #0]
    if( status == false )
 8005514:	1dfb      	adds	r3, r7, #7
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2201      	movs	r2, #1
 800551a:	4053      	eors	r3, r2
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <SX1276SetAntSwLowPower+0x20>
    {
      SX1276AntSwInit( );
 8005522:	f000 f807 	bl	8005534 <SX1276AntSwInit>
    }
    else 
    {
      SX1276AntSwDeInit( );
    }
}
 8005526:	e001      	b.n	800552c <SX1276SetAntSwLowPower+0x24>
      SX1276AntSwDeInit( );
 8005528:	f000 f844 	bl	80055b4 <SX1276AntSwDeInit>
}
 800552c:	46c0      	nop			@ (mov r8, r8)
 800552e:	46bd      	mov	sp, r7
 8005530:	b002      	add	sp, #8
 8005532:	bd80      	pop	{r7, pc}

08005534 <SX1276AntSwInit>:

static void SX1276AntSwInit( void )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 800553a:	1d3b      	adds	r3, r7, #4
 800553c:	0018      	movs	r0, r3
 800553e:	2314      	movs	r3, #20
 8005540:	001a      	movs	r2, r3
 8005542:	2100      	movs	r1, #0
 8005544:	f014 fa32 	bl	80199ac <memset>

  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8005548:	1d3b      	adds	r3, r7, #4
 800554a:	2201      	movs	r2, #1
 800554c:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL; 
 800554e:	1d3b      	adds	r3, r7, #4
 8005550:	2200      	movs	r2, #0
 8005552:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8005554:	1d3b      	adds	r3, r7, #4
 8005556:	2203      	movs	r2, #3
 8005558:	60da      	str	r2, [r3, #12]
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 800555a:	1d3a      	adds	r2, r7, #4
 800555c:	23a0      	movs	r3, #160	@ 0xa0
 800555e:	05db      	lsls	r3, r3, #23
 8005560:	2102      	movs	r1, #2
 8005562:	0018      	movs	r0, r3
 8005564:	f7fe fa92 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 8005568:	23a0      	movs	r3, #160	@ 0xa0
 800556a:	05db      	lsls	r3, r3, #23
 800556c:	2200      	movs	r2, #0
 800556e:	2102      	movs	r1, #2
 8005570:	0018      	movs	r0, r3
 8005572:	f7fe fb5d 	bl	8003c30 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 8005576:	1d3b      	adds	r3, r7, #4
 8005578:	480d      	ldr	r0, [pc, #52]	@ (80055b0 <SX1276AntSwInit+0x7c>)
 800557a:	001a      	movs	r2, r3
 800557c:	2102      	movs	r1, #2
 800557e:	f7fe fa85 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 8005582:	4b0b      	ldr	r3, [pc, #44]	@ (80055b0 <SX1276AntSwInit+0x7c>)
 8005584:	2200      	movs	r2, #0
 8005586:	2102      	movs	r1, #2
 8005588:	0018      	movs	r0, r3
 800558a:	f7fe fb51 	bl	8003c30 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 800558e:	1d3b      	adds	r3, r7, #4
 8005590:	4807      	ldr	r0, [pc, #28]	@ (80055b0 <SX1276AntSwInit+0x7c>)
 8005592:	001a      	movs	r2, r3
 8005594:	2104      	movs	r1, #4
 8005596:	f7fe fa79 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 800559a:	4b05      	ldr	r3, [pc, #20]	@ (80055b0 <SX1276AntSwInit+0x7c>)
 800559c:	2200      	movs	r2, #0
 800559e:	2104      	movs	r1, #4
 80055a0:	0018      	movs	r0, r3
 80055a2:	f7fe fb45 	bl	8003c30 <HW_GPIO_Write>
}
 80055a6:	46c0      	nop			@ (mov r8, r8)
 80055a8:	46bd      	mov	sp, r7
 80055aa:	b006      	add	sp, #24
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	46c0      	nop			@ (mov r8, r8)
 80055b0:	50000800 	.word	0x50000800

080055b4 <SX1276AntSwDeInit>:

static void SX1276AntSwDeInit( void )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 80055ba:	1d3b      	adds	r3, r7, #4
 80055bc:	0018      	movs	r0, r3
 80055be:	2314      	movs	r3, #20
 80055c0:	001a      	movs	r2, r3
 80055c2:	2100      	movs	r1, #0
 80055c4:	f014 f9f2 	bl	80199ac <memset>

  initStruct.Mode = GPIO_MODE_ANALOG ;
 80055c8:	1d3b      	adds	r3, r7, #4
 80055ca:	2203      	movs	r2, #3
 80055cc:	605a      	str	r2, [r3, #4]
  
  initStruct.Pull = GPIO_NOPULL;
 80055ce:	1d3b      	adds	r3, r7, #4
 80055d0:	2200      	movs	r2, #0
 80055d2:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80055d4:	1d3b      	adds	r3, r7, #4
 80055d6:	2203      	movs	r2, #3
 80055d8:	60da      	str	r2, [r3, #12]

  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 80055da:	1d3a      	adds	r2, r7, #4
 80055dc:	23a0      	movs	r3, #160	@ 0xa0
 80055de:	05db      	lsls	r3, r3, #23
 80055e0:	2102      	movs	r1, #2
 80055e2:	0018      	movs	r0, r3
 80055e4:	f7fe fa52 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 80055e8:	23a0      	movs	r3, #160	@ 0xa0
 80055ea:	05db      	lsls	r3, r3, #23
 80055ec:	2200      	movs	r2, #0
 80055ee:	2102      	movs	r1, #2
 80055f0:	0018      	movs	r0, r3
 80055f2:	f7fe fb1d 	bl	8003c30 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 80055f6:	1d3b      	adds	r3, r7, #4
 80055f8:	480d      	ldr	r0, [pc, #52]	@ (8005630 <SX1276AntSwDeInit+0x7c>)
 80055fa:	001a      	movs	r2, r3
 80055fc:	2102      	movs	r1, #2
 80055fe:	f7fe fa45 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 8005602:	4b0b      	ldr	r3, [pc, #44]	@ (8005630 <SX1276AntSwDeInit+0x7c>)
 8005604:	2200      	movs	r2, #0
 8005606:	2102      	movs	r1, #2
 8005608:	0018      	movs	r0, r3
 800560a:	f7fe fb11 	bl	8003c30 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 800560e:	1d3b      	adds	r3, r7, #4
 8005610:	4807      	ldr	r0, [pc, #28]	@ (8005630 <SX1276AntSwDeInit+0x7c>)
 8005612:	001a      	movs	r2, r3
 8005614:	2104      	movs	r1, #4
 8005616:	f7fe fa39 	bl	8003a8c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 800561a:	4b05      	ldr	r3, [pc, #20]	@ (8005630 <SX1276AntSwDeInit+0x7c>)
 800561c:	2200      	movs	r2, #0
 800561e:	2104      	movs	r1, #4
 8005620:	0018      	movs	r0, r3
 8005622:	f7fe fb05 	bl	8003c30 <HW_GPIO_Write>
}
 8005626:	46c0      	nop			@ (mov r8, r8)
 8005628:	46bd      	mov	sp, r7
 800562a:	b006      	add	sp, #24
 800562c:	bd80      	pop	{r7, pc}
 800562e:	46c0      	nop			@ (mov r8, r8)
 8005630:	50000800 	.word	0x50000800

08005634 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 8005634:	b5b0      	push	{r4, r5, r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	0002      	movs	r2, r0
 800563c:	1dfb      	adds	r3, r7, #7
 800563e:	701a      	strb	r2, [r3, #0]
 uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 8005640:	250f      	movs	r5, #15
 8005642:	197c      	adds	r4, r7, r5
 8005644:	2009      	movs	r0, #9
 8005646:	f001 fd4f 	bl	80070e8 <SX1276Read>
 800564a:	0003      	movs	r3, r0
 800564c:	7023      	strb	r3, [r4, #0]
    switch( opMode )
 800564e:	1dfb      	adds	r3, r7, #7
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	2b03      	cmp	r3, #3
 8005654:	d115      	bne.n	8005682 <SX1276SetAntSw+0x4e>
    {
    case RFLR_OPMODE_TRANSMITTER:
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8005656:	197b      	adds	r3, r7, r5
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	b25b      	sxtb	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	da06      	bge.n	800566e <SX1276SetAntSw+0x3a>
      {
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 1 );
 8005660:	4b0f      	ldr	r3, [pc, #60]	@ (80056a0 <SX1276SetAntSw+0x6c>)
 8005662:	2201      	movs	r2, #1
 8005664:	2102      	movs	r1, #2
 8005666:	0018      	movs	r0, r3
 8005668:	f7fe fae2 	bl	8003c30 <HW_GPIO_Write>
 800566c:	e005      	b.n	800567a <SX1276SetAntSw+0x46>
      }
      else
      {
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 1 );
 800566e:	4b0c      	ldr	r3, [pc, #48]	@ (80056a0 <SX1276SetAntSw+0x6c>)
 8005670:	2201      	movs	r2, #1
 8005672:	2104      	movs	r1, #4
 8005674:	0018      	movs	r0, r3
 8005676:	f7fe fadb 	bl	8003c30 <HW_GPIO_Write>
      }
      SX1276.RxTx = 1;
 800567a:	4b0a      	ldr	r3, [pc, #40]	@ (80056a4 <SX1276SetAntSw+0x70>)
 800567c:	2201      	movs	r2, #1
 800567e:	701a      	strb	r2, [r3, #0]
        break;
 8005680:	e00a      	b.n	8005698 <SX1276SetAntSw+0x64>
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
     SX1276.RxTx = 0;
 8005682:	4b08      	ldr	r3, [pc, #32]	@ (80056a4 <SX1276SetAntSw+0x70>)
 8005684:	2200      	movs	r2, #0
 8005686:	701a      	strb	r2, [r3, #0]
     HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 8005688:	23a0      	movs	r3, #160	@ 0xa0
 800568a:	05db      	lsls	r3, r3, #23
 800568c:	2201      	movs	r2, #1
 800568e:	2102      	movs	r1, #2
 8005690:	0018      	movs	r0, r3
 8005692:	f7fe facd 	bl	8003c30 <HW_GPIO_Write>
     break;
 8005696:	46c0      	nop			@ (mov r8, r8)
    }
}
 8005698:	46c0      	nop			@ (mov r8, r8)
 800569a:	46bd      	mov	sp, r7
 800569c:	b004      	add	sp, #16
 800569e:	bdb0      	pop	{r4, r5, r7, pc}
 80056a0:	50000800 	.word	0x50000800
 80056a4:	200004c8 	.word	0x200004c8

080056a8 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 80056b0:	2301      	movs	r3, #1
}
 80056b2:	0018      	movs	r0, r3
 80056b4:	46bd      	mov	sp, r7
 80056b6:	b002      	add	sp, #8
 80056b8:	bd80      	pop	{r7, pc}
	...

080056bc <SX1276BoardInit>:

/*
 * Radio driver functions implementation
 */
void SX1276BoardInit( LoRaBoardCallback_t *callbacks )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
    LoRaBoardCallbacks =callbacks;
 80056c4:	4b03      	ldr	r3, [pc, #12]	@ (80056d4 <SX1276BoardInit+0x18>)
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	601a      	str	r2, [r3, #0]
}
 80056ca:	46c0      	nop			@ (mov r8, r8)
 80056cc:	46bd      	mov	sp, r7
 80056ce:	b002      	add	sp, #8
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	46c0      	nop			@ (mov r8, r8)
 80056d4:	200004c4 	.word	0x200004c4

080056d8 <SX1276Init>:

uint32_t SX1276Init( RadioEvents_t *events )
{
 80056d8:	b590      	push	{r4, r7, lr}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 80056e0:	4b33      	ldr	r3, [pc, #204]	@ (80057b0 <SX1276Init+0xd8>)
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 80056e6:	4a33      	ldr	r2, [pc, #204]	@ (80057b4 <SX1276Init+0xdc>)
 80056e8:	4b33      	ldr	r3, [pc, #204]	@ (80057b8 <SX1276Init+0xe0>)
 80056ea:	0011      	movs	r1, r2
 80056ec:	0018      	movs	r0, r3
 80056ee:	f00f fbc8 	bl	8014e82 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 80056f2:	4a30      	ldr	r2, [pc, #192]	@ (80057b4 <SX1276Init+0xdc>)
 80056f4:	4b31      	ldr	r3, [pc, #196]	@ (80057bc <SX1276Init+0xe4>)
 80056f6:	0011      	movs	r1, r2
 80056f8:	0018      	movs	r0, r3
 80056fa:	f00f fbc2 	bl	8014e82 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 80056fe:	4a2d      	ldr	r2, [pc, #180]	@ (80057b4 <SX1276Init+0xdc>)
 8005700:	4b2f      	ldr	r3, [pc, #188]	@ (80057c0 <SX1276Init+0xe8>)
 8005702:	0011      	movs	r1, r2
 8005704:	0018      	movs	r0, r3
 8005706:	f00f fbbc 	bl	8014e82 <TimerInit>

    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 800570a:	4b2e      	ldr	r3, [pc, #184]	@ (80057c4 <SX1276Init+0xec>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2001      	movs	r0, #1
 8005712:	4798      	blx	r3

    SX1276Reset( );
 8005714:	f001 fbf6 	bl	8006f04 <SX1276Reset>

    RxChainCalibration( );
 8005718:	f000 f93c 	bl	8005994 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800571c:	2000      	movs	r0, #0
 800571e:	f001 fc25 	bl	8006f6c <SX1276SetOpMode>

    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 8005722:	4b28      	ldr	r3, [pc, #160]	@ (80057c4 <SX1276Init+0xec>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	4a27      	ldr	r2, [pc, #156]	@ (80057c8 <SX1276Init+0xf0>)
 800572a:	0010      	movs	r0, r2
 800572c:	4798      	blx	r3

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800572e:	230f      	movs	r3, #15
 8005730:	18fb      	adds	r3, r7, r3
 8005732:	2200      	movs	r2, #0
 8005734:	701a      	strb	r2, [r3, #0]
 8005736:	e025      	b.n	8005784 <SX1276Init+0xac>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 8005738:	240f      	movs	r4, #15
 800573a:	193b      	adds	r3, r7, r4
 800573c:	781a      	ldrb	r2, [r3, #0]
 800573e:	4923      	ldr	r1, [pc, #140]	@ (80057cc <SX1276Init+0xf4>)
 8005740:	0013      	movs	r3, r2
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	189b      	adds	r3, r3, r2
 8005746:	5c5b      	ldrb	r3, [r3, r1]
 8005748:	0018      	movs	r0, r3
 800574a:	f001 fc5f 	bl	800700c <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800574e:	193b      	adds	r3, r7, r4
 8005750:	781a      	ldrb	r2, [r3, #0]
 8005752:	491e      	ldr	r1, [pc, #120]	@ (80057cc <SX1276Init+0xf4>)
 8005754:	0013      	movs	r3, r2
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	189b      	adds	r3, r3, r2
 800575a:	18cb      	adds	r3, r1, r3
 800575c:	3301      	adds	r3, #1
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	0018      	movs	r0, r3
 8005762:	193b      	adds	r3, r7, r4
 8005764:	781a      	ldrb	r2, [r3, #0]
 8005766:	4919      	ldr	r1, [pc, #100]	@ (80057cc <SX1276Init+0xf4>)
 8005768:	0013      	movs	r3, r2
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	189b      	adds	r3, r3, r2
 800576e:	18cb      	adds	r3, r1, r3
 8005770:	3302      	adds	r3, #2
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	0019      	movs	r1, r3
 8005776:	f001 fca3 	bl	80070c0 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800577a:	193b      	adds	r3, r7, r4
 800577c:	781a      	ldrb	r2, [r3, #0]
 800577e:	193b      	adds	r3, r7, r4
 8005780:	3201      	adds	r2, #1
 8005782:	701a      	strb	r2, [r3, #0]
 8005784:	230f      	movs	r3, #15
 8005786:	18fb      	adds	r3, r7, r3
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	2b0f      	cmp	r3, #15
 800578c:	d9d4      	bls.n	8005738 <SX1276Init+0x60>
    }

    SX1276SetModem( MODEM_FSK );
 800578e:	2000      	movs	r0, #0
 8005790:	f001 fc3c 	bl	800700c <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 8005794:	4b0e      	ldr	r3, [pc, #56]	@ (80057d0 <SX1276Init+0xf8>)
 8005796:	2200      	movs	r2, #0
 8005798:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 800579a:	4b0a      	ldr	r3, [pc, #40]	@ (80057c4 <SX1276Init+0xec>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	4798      	blx	r3
 80057a2:	0003      	movs	r3, r0
 80057a4:	3302      	adds	r3, #2
}
 80057a6:	0018      	movs	r0, r3
 80057a8:	46bd      	mov	sp, r7
 80057aa:	b005      	add	sp, #20
 80057ac:	bd90      	pop	{r4, r7, pc}
 80057ae:	46c0      	nop			@ (mov r8, r8)
 80057b0:	200003c0 	.word	0x200003c0
 80057b4:	08007329 	.word	0x08007329
 80057b8:	20000530 	.word	0x20000530
 80057bc:	20000548 	.word	0x20000548
 80057c0:	20000560 	.word	0x20000560
 80057c4:	200004c4 	.word	0x200004c4
 80057c8:	20000058 	.word	0x20000058
 80057cc:	0801acfc 	.word	0x0801acfc
 80057d0:	200004c8 	.word	0x200004c8

080057d4 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 80057d8:	4b02      	ldr	r3, [pc, #8]	@ (80057e4 <SX1276GetStatus+0x10>)
 80057da:	791b      	ldrb	r3, [r3, #4]
}
 80057dc:	0018      	movs	r0, r3
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	46c0      	nop			@ (mov r8, r8)
 80057e4:	200004c8 	.word	0x200004c8

080057e8 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 80057e8:	b590      	push	{r4, r7, lr}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
    uint32_t channel;

    SX1276.Settings.Channel = freq;
 80057f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005868 <SX1276SetChannel+0x80>)
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	609a      	str	r2, [r3, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	491c      	ldr	r1, [pc, #112]	@ (800586c <SX1276SetChannel+0x84>)
 80057fa:	0018      	movs	r0, r3
 80057fc:	f7fa fc8e 	bl	800011c <__udivsi3>
 8005800:	0003      	movs	r3, r0
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	6979      	ldr	r1, [r7, #20]
 8005806:	000b      	movs	r3, r1
 8005808:	015b      	lsls	r3, r3, #5
 800580a:	1a5b      	subs	r3, r3, r1
 800580c:	019a      	lsls	r2, r3, #6
 800580e:	1ad2      	subs	r2, r2, r3
 8005810:	00d2      	lsls	r2, r2, #3
 8005812:	1853      	adds	r3, r2, r1
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	613b      	str	r3, [r7, #16]
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	021c      	lsls	r4, r3, #8
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	021b      	lsls	r3, r3, #8
 8005822:	4a13      	ldr	r2, [pc, #76]	@ (8005870 <SX1276SetChannel+0x88>)
 8005824:	4694      	mov	ip, r2
 8005826:	4463      	add	r3, ip
 8005828:	4910      	ldr	r1, [pc, #64]	@ (800586c <SX1276SetChannel+0x84>)
 800582a:	0018      	movs	r0, r3
 800582c:	f7fa fc76 	bl	800011c <__udivsi3>
 8005830:	0003      	movs	r3, r0
 8005832:	18e3      	adds	r3, r4, r3
 8005834:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	0c1b      	lsrs	r3, r3, #16
 800583a:	b2db      	uxtb	r3, r3
 800583c:	0019      	movs	r1, r3
 800583e:	2006      	movs	r0, #6
 8005840:	f001 fc3e 	bl	80070c0 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	0a1b      	lsrs	r3, r3, #8
 8005848:	b2db      	uxtb	r3, r3
 800584a:	0019      	movs	r1, r3
 800584c:	2007      	movs	r0, #7
 800584e:	f001 fc37 	bl	80070c0 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	b2db      	uxtb	r3, r3
 8005856:	0019      	movs	r1, r3
 8005858:	2008      	movs	r0, #8
 800585a:	f001 fc31 	bl	80070c0 <SX1276Write>
}
 800585e:	46c0      	nop			@ (mov r8, r8)
 8005860:	46bd      	mov	sp, r7
 8005862:	b007      	add	sp, #28
 8005864:	bd90      	pop	{r4, r7, pc}
 8005866:	46c0      	nop			@ (mov r8, r8)
 8005868:	200004c8 	.word	0x200004c8
 800586c:	00003d09 	.word	0x00003d09
 8005870:	00001e84 	.word	0x00001e84

08005874 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8005874:	b5b0      	push	{r4, r5, r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	60b9      	str	r1, [r7, #8]
 800587c:	0011      	movs	r1, r2
 800587e:	607b      	str	r3, [r7, #4]
 8005880:	230f      	movs	r3, #15
 8005882:	18fb      	adds	r3, r7, r3
 8005884:	1c02      	adds	r2, r0, #0
 8005886:	701a      	strb	r2, [r3, #0]
 8005888:	230c      	movs	r3, #12
 800588a:	18fb      	adds	r3, r7, r3
 800588c:	1c0a      	adds	r2, r1, #0
 800588e:	801a      	strh	r2, [r3, #0]
    bool status = true;
 8005890:	2317      	movs	r3, #23
 8005892:	18fb      	adds	r3, r7, r3
 8005894:	2201      	movs	r2, #1
 8005896:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 8005898:	2314      	movs	r3, #20
 800589a:	18fb      	adds	r3, r7, r3
 800589c:	2200      	movs	r2, #0
 800589e:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
 80058a0:	2300      	movs	r3, #0
 80058a2:	613b      	str	r3, [r7, #16]

    if( SX1276GetStatus( ) != RF_IDLE )
 80058a4:	f7ff ff96 	bl	80057d4 <SX1276GetStatus>
 80058a8:	1e03      	subs	r3, r0, #0
 80058aa:	d001      	beq.n	80058b0 <SX1276IsChannelFree+0x3c>
    {
        return false;
 80058ac:	2300      	movs	r3, #0
 80058ae:	e039      	b.n	8005924 <SX1276IsChannelFree+0xb0>
    }

    SX1276SetModem( modem );
 80058b0:	230f      	movs	r3, #15
 80058b2:	18fb      	adds	r3, r7, r3
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	0018      	movs	r0, r3
 80058b8:	f001 fba8 	bl	800700c <SX1276SetModem>

    SX1276SetChannel( freq );
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	0018      	movs	r0, r3
 80058c0:	f7ff ff92 	bl	80057e8 <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80058c4:	2005      	movs	r0, #5
 80058c6:	f001 fb51 	bl	8006f6c <SX1276SetOpMode>

    DelayMs( 1 );
 80058ca:	2001      	movs	r0, #1
 80058cc:	f7fd fb75 	bl	8002fba <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80058d0:	f00f fc77 	bl	80151c2 <TimerGetCurrentTime>
 80058d4:	0003      	movs	r3, r0
 80058d6:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80058d8:	e017      	b.n	800590a <SX1276IsChannelFree+0x96>
    {
        rssi = SX1276ReadRssi( modem );
 80058da:	2514      	movs	r5, #20
 80058dc:	197c      	adds	r4, r7, r5
 80058de:	230f      	movs	r3, #15
 80058e0:	18fb      	adds	r3, r7, r3
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	0018      	movs	r0, r3
 80058e6:	f001 fac5 	bl	8006e74 <SX1276ReadRssi>
 80058ea:	0003      	movs	r3, r0
 80058ec:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
 80058ee:	197a      	adds	r2, r7, r5
 80058f0:	230c      	movs	r3, #12
 80058f2:	18fb      	adds	r3, r7, r3
 80058f4:	2100      	movs	r1, #0
 80058f6:	5e52      	ldrsh	r2, [r2, r1]
 80058f8:	2100      	movs	r1, #0
 80058fa:	5e5b      	ldrsh	r3, [r3, r1]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	dd04      	ble.n	800590a <SX1276IsChannelFree+0x96>
        {
            status = false;
 8005900:	2317      	movs	r3, #23
 8005902:	18fb      	adds	r3, r7, r3
 8005904:	2200      	movs	r2, #0
 8005906:	701a      	strb	r2, [r3, #0]
            break;
 8005908:	e007      	b.n	800591a <SX1276IsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	0018      	movs	r0, r3
 800590e:	f00f fc68 	bl	80151e2 <TimerGetElapsedTime>
 8005912:	0002      	movs	r2, r0
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4293      	cmp	r3, r2
 8005918:	d8df      	bhi.n	80058da <SX1276IsChannelFree+0x66>
        }
    }
    SX1276SetSleep( );
 800591a:	f000 ffcd 	bl	80068b8 <SX1276SetSleep>
    return status;
 800591e:	2317      	movs	r3, #23
 8005920:	18fb      	adds	r3, r7, r3
 8005922:	781b      	ldrb	r3, [r3, #0]
}
 8005924:	0018      	movs	r0, r3
 8005926:	46bd      	mov	sp, r7
 8005928:	b006      	add	sp, #24
 800592a:	bdb0      	pop	{r4, r5, r7, pc}

0800592c <SX1276Random>:

uint32_t SX1276Random( void )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 8005932:	2300      	movs	r3, #0
 8005934:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 8005936:	2001      	movs	r0, #1
 8005938:	f001 fb68 	bl	800700c <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800593c:	21ff      	movs	r1, #255	@ 0xff
 800593e:	2011      	movs	r0, #17
 8005940:	f001 fbbe 	bl	80070c0 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8005944:	2005      	movs	r0, #5
 8005946:	f001 fb11 	bl	8006f6c <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 800594a:	1dfb      	adds	r3, r7, #7
 800594c:	2200      	movs	r2, #0
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	e015      	b.n	800597e <SX1276Random+0x52>
    {
        DelayMs( 1 );
 8005952:	2001      	movs	r0, #1
 8005954:	f7fd fb31 	bl	8002fba <HAL_Delay>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8005958:	202c      	movs	r0, #44	@ 0x2c
 800595a:	f001 fbc5 	bl	80070e8 <SX1276Read>
 800595e:	0003      	movs	r3, r0
 8005960:	001a      	movs	r2, r3
 8005962:	2301      	movs	r3, #1
 8005964:	401a      	ands	r2, r3
 8005966:	1dfb      	adds	r3, r7, #7
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	409a      	lsls	r2, r3
 800596c:	0013      	movs	r3, r2
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	4313      	orrs	r3, r2
 8005972:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 8005974:	1dfb      	adds	r3, r7, #7
 8005976:	781a      	ldrb	r2, [r3, #0]
 8005978:	1dfb      	adds	r3, r7, #7
 800597a:	3201      	adds	r2, #1
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	1dfb      	adds	r3, r7, #7
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	2b1f      	cmp	r3, #31
 8005984:	d9e5      	bls.n	8005952 <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 8005986:	f000 ff97 	bl	80068b8 <SX1276SetSleep>

    return rnd;
 800598a:	683b      	ldr	r3, [r7, #0]
}
 800598c:	0018      	movs	r0, r3
 800598e:	46bd      	mov	sp, r7
 8005990:	b002      	add	sp, #8
 8005992:	bd80      	pop	{r7, pc}

08005994 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
void RxChainCalibration( void )
{
 8005994:	b590      	push	{r4, r7, lr}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800599a:	2317      	movs	r3, #23
 800599c:	18fc      	adds	r4, r7, r3
 800599e:	2009      	movs	r0, #9
 80059a0:	f001 fba2 	bl	80070e8 <SX1276Read>
 80059a4:	0003      	movs	r3, r0
 80059a6:	7023      	strb	r3, [r4, #0]

    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80059a8:	2006      	movs	r0, #6
 80059aa:	f001 fb9d 	bl	80070e8 <SX1276Read>
 80059ae:	0003      	movs	r3, r0
 80059b0:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80059b2:	2007      	movs	r0, #7
 80059b4:	f001 fb98 	bl	80070e8 <SX1276Read>
 80059b8:	0003      	movs	r3, r0
 80059ba:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80059bc:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 80059be:	2008      	movs	r0, #8
 80059c0:	f001 fb92 	bl	80070e8 <SX1276Read>
 80059c4:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80059c6:	4323      	orrs	r3, r4
 80059c8:	613b      	str	r3, [r7, #16]

    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	0a1b      	lsrs	r3, r3, #8
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	021b      	lsls	r3, r3, #8
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	60bb      	str	r3, [r7, #8]
 80059da:	68f9      	ldr	r1, [r7, #12]
 80059dc:	000b      	movs	r3, r1
 80059de:	015b      	lsls	r3, r3, #5
 80059e0:	1a5b      	subs	r3, r3, r1
 80059e2:	019a      	lsls	r2, r3, #6
 80059e4:	1ad2      	subs	r2, r2, r3
 80059e6:	00d2      	lsls	r2, r2, #3
 80059e8:	1850      	adds	r0, r2, r1
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	000b      	movs	r3, r1
 80059ee:	015b      	lsls	r3, r3, #5
 80059f0:	1a5b      	subs	r3, r3, r1
 80059f2:	019a      	lsls	r2, r3, #6
 80059f4:	1ad2      	subs	r2, r2, r3
 80059f6:	00d2      	lsls	r2, r2, #3
 80059f8:	1853      	adds	r3, r2, r1
 80059fa:	3380      	adds	r3, #128	@ 0x80
 80059fc:	0a1b      	lsrs	r3, r3, #8
 80059fe:	18c3      	adds	r3, r0, r3
 8005a00:	607b      	str	r3, [r7, #4]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 8005a02:	2100      	movs	r1, #0
 8005a04:	2009      	movs	r0, #9
 8005a06:	f001 fb5b 	bl	80070c0 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8005a0a:	203b      	movs	r0, #59	@ 0x3b
 8005a0c:	f001 fb6c 	bl	80070e8 <SX1276Read>
 8005a10:	0003      	movs	r3, r0
 8005a12:	001a      	movs	r2, r3
 8005a14:	2340      	movs	r3, #64	@ 0x40
 8005a16:	4313      	orrs	r3, r2
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	0019      	movs	r1, r3
 8005a1c:	203b      	movs	r0, #59	@ 0x3b
 8005a1e:	f001 fb4f 	bl	80070c0 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8005a22:	46c0      	nop			@ (mov r8, r8)
 8005a24:	203b      	movs	r0, #59	@ 0x3b
 8005a26:	f001 fb5f 	bl	80070e8 <SX1276Read>
 8005a2a:	0003      	movs	r3, r0
 8005a2c:	001a      	movs	r2, r3
 8005a2e:	2320      	movs	r3, #32
 8005a30:	4013      	ands	r3, r2
 8005a32:	2b20      	cmp	r3, #32
 8005a34:	d0f6      	beq.n	8005a24 <RxChainCalibration+0x90>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 8005a36:	4b14      	ldr	r3, [pc, #80]	@ (8005a88 <RxChainCalibration+0xf4>)
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f7ff fed5 	bl	80057e8 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8005a3e:	203b      	movs	r0, #59	@ 0x3b
 8005a40:	f001 fb52 	bl	80070e8 <SX1276Read>
 8005a44:	0003      	movs	r3, r0
 8005a46:	001a      	movs	r2, r3
 8005a48:	2340      	movs	r3, #64	@ 0x40
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	0019      	movs	r1, r3
 8005a50:	203b      	movs	r0, #59	@ 0x3b
 8005a52:	f001 fb35 	bl	80070c0 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8005a56:	46c0      	nop			@ (mov r8, r8)
 8005a58:	203b      	movs	r0, #59	@ 0x3b
 8005a5a:	f001 fb45 	bl	80070e8 <SX1276Read>
 8005a5e:	0003      	movs	r3, r0
 8005a60:	001a      	movs	r2, r3
 8005a62:	2320      	movs	r3, #32
 8005a64:	4013      	ands	r3, r2
 8005a66:	2b20      	cmp	r3, #32
 8005a68:	d0f6      	beq.n	8005a58 <RxChainCalibration+0xc4>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8005a6a:	2317      	movs	r3, #23
 8005a6c:	18fb      	adds	r3, r7, r3
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	0019      	movs	r1, r3
 8005a72:	2009      	movs	r0, #9
 8005a74:	f001 fb24 	bl	80070c0 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	f7ff feb4 	bl	80057e8 <SX1276SetChannel>
}
 8005a80:	46c0      	nop			@ (mov r8, r8)
 8005a82:	46bd      	mov	sp, r7
 8005a84:	b007      	add	sp, #28
 8005a86:	bd90      	pop	{r4, r7, pc}
 8005a88:	33bca100 	.word	0x33bca100

08005a8c <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8005a94:	230f      	movs	r3, #15
 8005a96:	18fb      	adds	r3, r7, r3
 8005a98:	2200      	movs	r2, #0
 8005a9a:	701a      	strb	r2, [r3, #0]
 8005a9c:	e01f      	b.n	8005ade <GetFskBandwidthRegValue+0x52>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8005a9e:	210f      	movs	r1, #15
 8005aa0:	187b      	adds	r3, r7, r1
 8005aa2:	781a      	ldrb	r2, [r3, #0]
 8005aa4:	4b13      	ldr	r3, [pc, #76]	@ (8005af4 <GetFskBandwidthRegValue+0x68>)
 8005aa6:	00d2      	lsls	r2, r2, #3
 8005aa8:	58d3      	ldr	r3, [r2, r3]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d310      	bcc.n	8005ad2 <GetFskBandwidthRegValue+0x46>
 8005ab0:	187b      	adds	r3, r7, r1
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8005af4 <GetFskBandwidthRegValue+0x68>)
 8005ab8:	00d2      	lsls	r2, r2, #3
 8005aba:	58d3      	ldr	r3, [r2, r3]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d207      	bcs.n	8005ad2 <GetFskBandwidthRegValue+0x46>
        {
            return FskBandwidths[i].RegValue;
 8005ac2:	187b      	adds	r3, r7, r1
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	4a0b      	ldr	r2, [pc, #44]	@ (8005af4 <GetFskBandwidthRegValue+0x68>)
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	18d3      	adds	r3, r2, r3
 8005acc:	3304      	adds	r3, #4
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	e00c      	b.n	8005aec <GetFskBandwidthRegValue+0x60>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8005ad2:	210f      	movs	r1, #15
 8005ad4:	187b      	adds	r3, r7, r1
 8005ad6:	781a      	ldrb	r2, [r3, #0]
 8005ad8:	187b      	adds	r3, r7, r1
 8005ada:	3201      	adds	r2, #1
 8005adc:	701a      	strb	r2, [r3, #0]
 8005ade:	230f      	movs	r3, #15
 8005ae0:	18fb      	adds	r3, r7, r3
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	2b14      	cmp	r3, #20
 8005ae6:	d9da      	bls.n	8005a9e <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8005ae8:	46c0      	nop			@ (mov r8, r8)
 8005aea:	e7fd      	b.n	8005ae8 <GetFskBandwidthRegValue+0x5c>
}
 8005aec:	0018      	movs	r0, r3
 8005aee:	46bd      	mov	sp, r7
 8005af0:	b004      	add	sp, #16
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	0801ad2c 	.word	0x0801ad2c

08005af8 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8005af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	607a      	str	r2, [r7, #4]
 8005b02:	0019      	movs	r1, r3
 8005b04:	240f      	movs	r4, #15
 8005b06:	193b      	adds	r3, r7, r4
 8005b08:	1c02      	adds	r2, r0, #0
 8005b0a:	701a      	strb	r2, [r3, #0]
 8005b0c:	230e      	movs	r3, #14
 8005b0e:	18fb      	adds	r3, r7, r3
 8005b10:	1c0a      	adds	r2, r1, #0
 8005b12:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8005b14:	193b      	adds	r3, r7, r4
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	0018      	movs	r0, r3
 8005b1a:	f001 fa77 	bl	800700c <SX1276SetModem>

    switch( modem )
 8005b1e:	193b      	adds	r3, r7, r4
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <SX1276SetRxConfig+0x36>
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d100      	bne.n	8005b2c <SX1276SetRxConfig+0x34>
 8005b2a:	e0ef      	b.n	8005d0c <SX1276SetRxConfig+0x214>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8005b2c:	e252      	b.n	8005fd4 <SX1276SetRxConfig+0x4dc>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8005b2e:	4bb1      	ldr	r3, [pc, #708]	@ (8005df4 <SX1276SetRxConfig+0x2fc>)
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8005b34:	4baf      	ldr	r3, [pc, #700]	@ (8005df4 <SX1276SetRxConfig+0x2fc>)
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8005b3a:	4bae      	ldr	r3, [pc, #696]	@ (8005df4 <SX1276SetRxConfig+0x2fc>)
 8005b3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b3e:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8005b40:	4bac      	ldr	r3, [pc, #688]	@ (8005df4 <SX1276SetRxConfig+0x2fc>)
 8005b42:	222c      	movs	r2, #44	@ 0x2c
 8005b44:	2508      	movs	r5, #8
 8005b46:	1952      	adds	r2, r2, r5
 8005b48:	19d2      	adds	r2, r2, r7
 8005b4a:	2122      	movs	r1, #34	@ 0x22
 8005b4c:	7812      	ldrb	r2, [r2, #0]
 8005b4e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8005b50:	4ba8      	ldr	r3, [pc, #672]	@ (8005df4 <SX1276SetRxConfig+0x2fc>)
 8005b52:	2130      	movs	r1, #48	@ 0x30
 8005b54:	194a      	adds	r2, r1, r5
 8005b56:	19d2      	adds	r2, r2, r7
 8005b58:	2123      	movs	r1, #35	@ 0x23
 8005b5a:	7812      	ldrb	r2, [r2, #0]
 8005b5c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8005b5e:	4ba5      	ldr	r3, [pc, #660]	@ (8005df4 <SX1276SetRxConfig+0x2fc>)
 8005b60:	2034      	movs	r0, #52	@ 0x34
 8005b62:	1942      	adds	r2, r0, r5
 8005b64:	19d2      	adds	r2, r2, r7
 8005b66:	2124      	movs	r1, #36	@ 0x24
 8005b68:	7812      	ldrb	r2, [r2, #0]
 8005b6a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8005b6c:	4ba1      	ldr	r3, [pc, #644]	@ (8005df4 <SX1276SetRxConfig+0x2fc>)
 8005b6e:	2220      	movs	r2, #32
 8005b70:	2020      	movs	r0, #32
 8005b72:	1814      	adds	r4, r2, r0
 8005b74:	197a      	adds	r2, r7, r5
 8005b76:	18a2      	adds	r2, r4, r2
 8005b78:	2125      	movs	r1, #37	@ 0x25
 8005b7a:	7812      	ldrb	r2, [r2, #0]
 8005b7c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8005b7e:	4b9d      	ldr	r3, [pc, #628]	@ (8005df4 <SX1276SetRxConfig+0x2fc>)
 8005b80:	2224      	movs	r2, #36	@ 0x24
 8005b82:	1810      	adds	r0, r2, r0
 8005b84:	002c      	movs	r4, r5
 8005b86:	193a      	adds	r2, r7, r4
 8005b88:	1882      	adds	r2, r0, r2
 8005b8a:	2126      	movs	r1, #38	@ 0x26
 8005b8c:	7812      	ldrb	r2, [r2, #0]
 8005b8e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8005b90:	4b98      	ldr	r3, [pc, #608]	@ (8005df4 <SX1276SetRxConfig+0x2fc>)
 8005b92:	2624      	movs	r6, #36	@ 0x24
 8005b94:	1932      	adds	r2, r6, r4
 8005b96:	19d2      	adds	r2, r2, r7
 8005b98:	8812      	ldrh	r2, [r2, #0]
 8005b9a:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8005b9c:	2328      	movs	r3, #40	@ 0x28
 8005b9e:	191b      	adds	r3, r3, r4
 8005ba0:	19db      	adds	r3, r3, r7
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	0018      	movs	r0, r3
 8005ba6:	f7fd f93b 	bl	8002e20 <__aeabi_i2d>
 8005baa:	0004      	movs	r4, r0
 8005bac:	000d      	movs	r5, r1
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fd f964 	bl	8002e7c <__aeabi_ui2d>
 8005bb4:	0002      	movs	r2, r0
 8005bb6:	000b      	movs	r3, r1
 8005bb8:	2000      	movs	r0, #0
 8005bba:	498f      	ldr	r1, [pc, #572]	@ (8005df8 <SX1276SetRxConfig+0x300>)
 8005bbc:	f7fb fe4c 	bl	8001858 <__aeabi_ddiv>
 8005bc0:	0002      	movs	r2, r0
 8005bc2:	000b      	movs	r3, r1
 8005bc4:	0010      	movs	r0, r2
 8005bc6:	0019      	movs	r1, r3
 8005bc8:	2200      	movs	r2, #0
 8005bca:	4b8c      	ldr	r3, [pc, #560]	@ (8005dfc <SX1276SetRxConfig+0x304>)
 8005bcc:	f7fc fa88 	bl	80020e0 <__aeabi_dmul>
 8005bd0:	0002      	movs	r2, r0
 8005bd2:	000b      	movs	r3, r1
 8005bd4:	0020      	movs	r0, r4
 8005bd6:	0029      	movs	r1, r5
 8005bd8:	f7fc fa82 	bl	80020e0 <__aeabi_dmul>
 8005bdc:	0002      	movs	r2, r0
 8005bde:	000b      	movs	r3, r1
 8005be0:	0010      	movs	r0, r2
 8005be2:	0019      	movs	r1, r3
 8005be4:	2200      	movs	r2, #0
 8005be6:	4b86      	ldr	r3, [pc, #536]	@ (8005e00 <SX1276SetRxConfig+0x308>)
 8005be8:	f7fc fa7a 	bl	80020e0 <__aeabi_dmul>
 8005bec:	0002      	movs	r2, r0
 8005bee:	000b      	movs	r3, r1
 8005bf0:	0010      	movs	r0, r2
 8005bf2:	0019      	movs	r1, r3
 8005bf4:	f7fa fcb8 	bl	8000568 <__aeabi_d2uiz>
 8005bf8:	0002      	movs	r2, r0
 8005bfa:	4b7e      	ldr	r3, [pc, #504]	@ (8005df4 <SX1276SetRxConfig+0x2fc>)
 8005bfc:	62da      	str	r2, [r3, #44]	@ 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7fd f93c 	bl	8002e7c <__aeabi_ui2d>
 8005c04:	0002      	movs	r2, r0
 8005c06:	000b      	movs	r3, r1
 8005c08:	2000      	movs	r0, #0
 8005c0a:	497e      	ldr	r1, [pc, #504]	@ (8005e04 <SX1276SetRxConfig+0x30c>)
 8005c0c:	f7fb fe24 	bl	8001858 <__aeabi_ddiv>
 8005c10:	0002      	movs	r2, r0
 8005c12:	000b      	movs	r3, r1
 8005c14:	0010      	movs	r0, r2
 8005c16:	0019      	movs	r1, r3
 8005c18:	f7fa fca6 	bl	8000568 <__aeabi_d2uiz>
 8005c1c:	0003      	movs	r3, r0
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	0a1b      	lsrs	r3, r3, #8
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	0019      	movs	r1, r3
 8005c2a:	2002      	movs	r0, #2
 8005c2c:	f001 fa48 	bl	80070c0 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	0019      	movs	r1, r3
 8005c36:	2003      	movs	r0, #3
 8005c38:	f001 fa42 	bl	80070c0 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	0018      	movs	r0, r3
 8005c40:	f7ff ff24 	bl	8005a8c <GetFskBandwidthRegValue>
 8005c44:	0003      	movs	r3, r0
 8005c46:	0019      	movs	r1, r3
 8005c48:	2012      	movs	r0, #18
 8005c4a:	f001 fa39 	bl	80070c0 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8005c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c50:	0018      	movs	r0, r3
 8005c52:	f7ff ff1b 	bl	8005a8c <GetFskBandwidthRegValue>
 8005c56:	0003      	movs	r3, r0
 8005c58:	0019      	movs	r1, r3
 8005c5a:	2013      	movs	r0, #19
 8005c5c:	f001 fa30 	bl	80070c0 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8005c60:	2408      	movs	r4, #8
 8005c62:	1933      	adds	r3, r6, r4
 8005c64:	19db      	adds	r3, r3, r7
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	0a1b      	lsrs	r3, r3, #8
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	0019      	movs	r1, r3
 8005c70:	2025      	movs	r0, #37	@ 0x25
 8005c72:	f001 fa25 	bl	80070c0 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8005c76:	1933      	adds	r3, r6, r4
 8005c78:	19db      	adds	r3, r3, r7
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	0019      	movs	r1, r3
 8005c80:	2026      	movs	r0, #38	@ 0x26
 8005c82:	f001 fa1d 	bl	80070c0 <SX1276Write>
            if( fixLen == 1 )
 8005c86:	222c      	movs	r2, #44	@ 0x2c
 8005c88:	1913      	adds	r3, r2, r4
 8005c8a:	19db      	adds	r3, r3, r7
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d008      	beq.n	8005ca4 <SX1276SetRxConfig+0x1ac>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8005c92:	2130      	movs	r1, #48	@ 0x30
 8005c94:	190b      	adds	r3, r1, r4
 8005c96:	19db      	adds	r3, r3, r7
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	0019      	movs	r1, r3
 8005c9c:	2032      	movs	r0, #50	@ 0x32
 8005c9e:	f001 fa0f 	bl	80070c0 <SX1276Write>
 8005ca2:	e003      	b.n	8005cac <SX1276SetRxConfig+0x1b4>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8005ca4:	21ff      	movs	r1, #255	@ 0xff
 8005ca6:	2032      	movs	r0, #50	@ 0x32
 8005ca8:	f001 fa0a 	bl	80070c0 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8005cac:	2030      	movs	r0, #48	@ 0x30
 8005cae:	f001 fa1b 	bl	80070e8 <SX1276Read>
 8005cb2:	0003      	movs	r3, r0
 8005cb4:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8005cb6:	226f      	movs	r2, #111	@ 0x6f
 8005cb8:	4013      	ands	r3, r2
 8005cba:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8005cbc:	232c      	movs	r3, #44	@ 0x2c
 8005cbe:	2108      	movs	r1, #8
 8005cc0:	185b      	adds	r3, r3, r1
 8005cc2:	19db      	adds	r3, r3, r7
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <SX1276SetRxConfig+0x1d6>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	e001      	b.n	8005cd2 <SX1276SetRxConfig+0x1da>
 8005cce:	2380      	movs	r3, #128	@ 0x80
 8005cd0:	425b      	negs	r3, r3
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8005cd6:	2334      	movs	r3, #52	@ 0x34
 8005cd8:	2108      	movs	r1, #8
 8005cda:	185b      	adds	r3, r3, r1
 8005cdc:	19db      	adds	r3, r3, r7
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8005ce2:	b25b      	sxtb	r3, r3
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	0019      	movs	r1, r3
 8005cec:	2030      	movs	r0, #48	@ 0x30
 8005cee:	f001 f9e7 	bl	80070c0 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8005cf2:	2031      	movs	r0, #49	@ 0x31
 8005cf4:	f001 f9f8 	bl	80070e8 <SX1276Read>
 8005cf8:	0003      	movs	r3, r0
 8005cfa:	001a      	movs	r2, r3
 8005cfc:	2340      	movs	r3, #64	@ 0x40
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	0019      	movs	r1, r3
 8005d04:	2031      	movs	r0, #49	@ 0x31
 8005d06:	f001 f9db 	bl	80070c0 <SX1276Write>
        break;
 8005d0a:	e163      	b.n	8005fd4 <SX1276SetRxConfig+0x4dc>
            if( bandwidth > 2 )
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d901      	bls.n	8005d16 <SX1276SetRxConfig+0x21e>
                while( 1 );
 8005d12:	46c0      	nop			@ (mov r8, r8)
 8005d14:	e7fd      	b.n	8005d12 <SX1276SetRxConfig+0x21a>
            bandwidth += 7;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	3307      	adds	r3, #7
 8005d1a:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8005d1c:	4b35      	ldr	r3, [pc, #212]	@ (8005df4 <SX1276SetRxConfig+0x2fc>)
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	645a      	str	r2, [r3, #68]	@ 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8005d22:	4b34      	ldr	r3, [pc, #208]	@ (8005df4 <SX1276SetRxConfig+0x2fc>)
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	649a      	str	r2, [r3, #72]	@ 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8005d28:	4b32      	ldr	r3, [pc, #200]	@ (8005df4 <SX1276SetRxConfig+0x2fc>)
 8005d2a:	220e      	movs	r2, #14
 8005d2c:	18ba      	adds	r2, r7, r2
 8005d2e:	214d      	movs	r1, #77	@ 0x4d
 8005d30:	7812      	ldrb	r2, [r2, #0]
 8005d32:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8005d34:	4b2f      	ldr	r3, [pc, #188]	@ (8005df4 <SX1276SetRxConfig+0x2fc>)
 8005d36:	2224      	movs	r2, #36	@ 0x24
 8005d38:	2008      	movs	r0, #8
 8005d3a:	1812      	adds	r2, r2, r0
 8005d3c:	19d2      	adds	r2, r2, r7
 8005d3e:	214e      	movs	r1, #78	@ 0x4e
 8005d40:	8812      	ldrh	r2, [r2, #0]
 8005d42:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8005d44:	4b2b      	ldr	r3, [pc, #172]	@ (8005df4 <SX1276SetRxConfig+0x2fc>)
 8005d46:	222c      	movs	r2, #44	@ 0x2c
 8005d48:	1812      	adds	r2, r2, r0
 8005d4a:	19d2      	adds	r2, r2, r7
 8005d4c:	2150      	movs	r1, #80	@ 0x50
 8005d4e:	7812      	ldrb	r2, [r2, #0]
 8005d50:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8005d52:	4b28      	ldr	r3, [pc, #160]	@ (8005df4 <SX1276SetRxConfig+0x2fc>)
 8005d54:	2230      	movs	r2, #48	@ 0x30
 8005d56:	1812      	adds	r2, r2, r0
 8005d58:	19d2      	adds	r2, r2, r7
 8005d5a:	2151      	movs	r1, #81	@ 0x51
 8005d5c:	7812      	ldrb	r2, [r2, #0]
 8005d5e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8005d60:	4b24      	ldr	r3, [pc, #144]	@ (8005df4 <SX1276SetRxConfig+0x2fc>)
 8005d62:	2234      	movs	r2, #52	@ 0x34
 8005d64:	1812      	adds	r2, r2, r0
 8005d66:	19d2      	adds	r2, r2, r7
 8005d68:	2152      	movs	r1, #82	@ 0x52
 8005d6a:	7812      	ldrb	r2, [r2, #0]
 8005d6c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8005d6e:	4b21      	ldr	r3, [pc, #132]	@ (8005df4 <SX1276SetRxConfig+0x2fc>)
 8005d70:	2238      	movs	r2, #56	@ 0x38
 8005d72:	1812      	adds	r2, r2, r0
 8005d74:	19d2      	adds	r2, r2, r7
 8005d76:	2153      	movs	r1, #83	@ 0x53
 8005d78:	7812      	ldrb	r2, [r2, #0]
 8005d7a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8005d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8005df4 <SX1276SetRxConfig+0x2fc>)
 8005d7e:	223c      	movs	r2, #60	@ 0x3c
 8005d80:	1812      	adds	r2, r2, r0
 8005d82:	19d2      	adds	r2, r2, r7
 8005d84:	2154      	movs	r1, #84	@ 0x54
 8005d86:	7812      	ldrb	r2, [r2, #0]
 8005d88:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8005d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8005df4 <SX1276SetRxConfig+0x2fc>)
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	2020      	movs	r0, #32
 8005d90:	1812      	adds	r2, r2, r0
 8005d92:	2108      	movs	r1, #8
 8005d94:	468c      	mov	ip, r1
 8005d96:	44bc      	add	ip, r7
 8005d98:	4462      	add	r2, ip
 8005d9a:	2155      	movs	r1, #85	@ 0x55
 8005d9c:	7812      	ldrb	r2, [r2, #0]
 8005d9e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8005da0:	4b14      	ldr	r3, [pc, #80]	@ (8005df4 <SX1276SetRxConfig+0x2fc>)
 8005da2:	2224      	movs	r2, #36	@ 0x24
 8005da4:	1812      	adds	r2, r2, r0
 8005da6:	2108      	movs	r1, #8
 8005da8:	468c      	mov	ip, r1
 8005daa:	44bc      	add	ip, r7
 8005dac:	4462      	add	r2, ip
 8005dae:	2156      	movs	r1, #86	@ 0x56
 8005db0:	7812      	ldrb	r2, [r2, #0]
 8005db2:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b0c      	cmp	r3, #12
 8005db8:	d902      	bls.n	8005dc0 <SX1276SetRxConfig+0x2c8>
                datarate = 12;
 8005dba:	230c      	movs	r3, #12
 8005dbc:	607b      	str	r3, [r7, #4]
 8005dbe:	e004      	b.n	8005dca <SX1276SetRxConfig+0x2d2>
            else if( datarate < 6 )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b05      	cmp	r3, #5
 8005dc4:	d801      	bhi.n	8005dca <SX1276SetRxConfig+0x2d2>
                datarate = 6;
 8005dc6:	2306      	movs	r3, #6
 8005dc8:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2b07      	cmp	r3, #7
 8005dce:	d105      	bne.n	8005ddc <SX1276SetRxConfig+0x2e4>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b0b      	cmp	r3, #11
 8005dd4:	d008      	beq.n	8005de8 <SX1276SetRxConfig+0x2f0>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b0c      	cmp	r3, #12
 8005dda:	d005      	beq.n	8005de8 <SX1276SetRxConfig+0x2f0>
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2b08      	cmp	r3, #8
 8005de0:	d112      	bne.n	8005e08 <SX1276SetRxConfig+0x310>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b0c      	cmp	r3, #12
 8005de6:	d10f      	bne.n	8005e08 <SX1276SetRxConfig+0x310>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8005de8:	4b02      	ldr	r3, [pc, #8]	@ (8005df4 <SX1276SetRxConfig+0x2fc>)
 8005dea:	224c      	movs	r2, #76	@ 0x4c
 8005dec:	2101      	movs	r1, #1
 8005dee:	5499      	strb	r1, [r3, r2]
 8005df0:	e00e      	b.n	8005e10 <SX1276SetRxConfig+0x318>
 8005df2:	46c0      	nop			@ (mov r8, r8)
 8005df4:	200004c8 	.word	0x200004c8
 8005df8:	3ff00000 	.word	0x3ff00000
 8005dfc:	40200000 	.word	0x40200000
 8005e00:	408f4000 	.word	0x408f4000
 8005e04:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8005e08:	4b74      	ldr	r3, [pc, #464]	@ (8005fdc <SX1276SetRxConfig+0x4e4>)
 8005e0a:	224c      	movs	r2, #76	@ 0x4c
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8005e10:	201d      	movs	r0, #29
 8005e12:	f001 f969 	bl	80070e8 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	011b      	lsls	r3, r3, #4
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	230e      	movs	r3, #14
 8005e20:	18fb      	adds	r3, r7, r3
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	18db      	adds	r3, r3, r3
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8005e2c:	242c      	movs	r4, #44	@ 0x2c
 8005e2e:	2608      	movs	r6, #8
 8005e30:	19a3      	adds	r3, r4, r6
 8005e32:	19db      	adds	r3, r3, r7
 8005e34:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8005e36:	4313      	orrs	r3, r2
 8005e38:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8005e3a:	0019      	movs	r1, r3
 8005e3c:	201d      	movs	r0, #29
 8005e3e:	f001 f93f 	bl	80070c0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8005e42:	201e      	movs	r0, #30
 8005e44:	f001 f950 	bl	80070e8 <SX1276Read>
 8005e48:	0003      	movs	r3, r0
 8005e4a:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8005e4c:	2308      	movs	r3, #8
 8005e4e:	4013      	ands	r3, r2
 8005e50:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	011b      	lsls	r3, r3, #4
 8005e58:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8005e5e:	2334      	movs	r3, #52	@ 0x34
 8005e60:	199b      	adds	r3, r3, r6
 8005e62:	19db      	adds	r3, r3, r7
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8005e6e:	2528      	movs	r5, #40	@ 0x28
 8005e70:	19ab      	adds	r3, r5, r6
 8005e72:	19db      	adds	r3, r3, r7
 8005e74:	881b      	ldrh	r3, [r3, #0]
 8005e76:	0a1b      	lsrs	r3, r3, #8
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2103      	movs	r1, #3
 8005e7e:	400b      	ands	r3, r1
 8005e80:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8005e82:	4313      	orrs	r3, r2
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	0019      	movs	r1, r3
 8005e88:	201e      	movs	r0, #30
 8005e8a:	f001 f919 	bl	80070c0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8005e8e:	2026      	movs	r0, #38	@ 0x26
 8005e90:	f001 f92a 	bl	80070e8 <SX1276Read>
 8005e94:	0003      	movs	r3, r0
 8005e96:	b25b      	sxtb	r3, r3
 8005e98:	2208      	movs	r2, #8
 8005e9a:	4393      	bics	r3, r2
 8005e9c:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8005e9e:	4b4f      	ldr	r3, [pc, #316]	@ (8005fdc <SX1276SetRxConfig+0x4e4>)
 8005ea0:	214c      	movs	r1, #76	@ 0x4c
 8005ea2:	5c5b      	ldrb	r3, [r3, r1]
 8005ea4:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8005ea6:	b25b      	sxtb	r3, r3
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	0019      	movs	r1, r3
 8005eb0:	2026      	movs	r0, #38	@ 0x26
 8005eb2:	f001 f905 	bl	80070c0 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8005eb6:	19ab      	adds	r3, r5, r6
 8005eb8:	19db      	adds	r3, r3, r7
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	0019      	movs	r1, r3
 8005ec0:	201f      	movs	r0, #31
 8005ec2:	f001 f8fd 	bl	80070c0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8005ec6:	2524      	movs	r5, #36	@ 0x24
 8005ec8:	19ab      	adds	r3, r5, r6
 8005eca:	19db      	adds	r3, r3, r7
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	0a1b      	lsrs	r3, r3, #8
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	0019      	movs	r1, r3
 8005ed6:	2020      	movs	r0, #32
 8005ed8:	f001 f8f2 	bl	80070c0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8005edc:	19ab      	adds	r3, r5, r6
 8005ede:	19db      	adds	r3, r3, r7
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	0019      	movs	r1, r3
 8005ee6:	2021      	movs	r0, #33	@ 0x21
 8005ee8:	f001 f8ea 	bl	80070c0 <SX1276Write>
            if( fixLen == 1 )
 8005eec:	19a3      	adds	r3, r4, r6
 8005eee:	19db      	adds	r3, r3, r7
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d007      	beq.n	8005f06 <SX1276SetRxConfig+0x40e>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8005ef6:	2330      	movs	r3, #48	@ 0x30
 8005ef8:	199b      	adds	r3, r3, r6
 8005efa:	19db      	adds	r3, r3, r7
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	0019      	movs	r1, r3
 8005f00:	2022      	movs	r0, #34	@ 0x22
 8005f02:	f001 f8dd 	bl	80070c0 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005f06:	4b35      	ldr	r3, [pc, #212]	@ (8005fdc <SX1276SetRxConfig+0x4e4>)
 8005f08:	2253      	movs	r2, #83	@ 0x53
 8005f0a:	5c9b      	ldrb	r3, [r3, r2]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d013      	beq.n	8005f38 <SX1276SetRxConfig+0x440>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8005f10:	2044      	movs	r0, #68	@ 0x44
 8005f12:	f001 f8e9 	bl	80070e8 <SX1276Read>
 8005f16:	0003      	movs	r3, r0
 8005f18:	001a      	movs	r2, r3
 8005f1a:	2380      	movs	r3, #128	@ 0x80
 8005f1c:	425b      	negs	r3, r3
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	0019      	movs	r1, r3
 8005f24:	2044      	movs	r0, #68	@ 0x44
 8005f26:	f001 f8cb 	bl	80070c0 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8005f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8005fdc <SX1276SetRxConfig+0x4e4>)
 8005f2c:	2254      	movs	r2, #84	@ 0x54
 8005f2e:	5c9b      	ldrb	r3, [r3, r2]
 8005f30:	0019      	movs	r1, r3
 8005f32:	2024      	movs	r0, #36	@ 0x24
 8005f34:	f001 f8c4 	bl	80070c0 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2b09      	cmp	r3, #9
 8005f3c:	d10d      	bne.n	8005f5a <SX1276SetRxConfig+0x462>
 8005f3e:	4b27      	ldr	r3, [pc, #156]	@ (8005fdc <SX1276SetRxConfig+0x4e4>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	4a27      	ldr	r2, [pc, #156]	@ (8005fe0 <SX1276SetRxConfig+0x4e8>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d908      	bls.n	8005f5a <SX1276SetRxConfig+0x462>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8005f48:	2102      	movs	r1, #2
 8005f4a:	2036      	movs	r0, #54	@ 0x36
 8005f4c:	f001 f8b8 	bl	80070c0 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8005f50:	2164      	movs	r1, #100	@ 0x64
 8005f52:	203a      	movs	r0, #58	@ 0x3a
 8005f54:	f001 f8b4 	bl	80070c0 <SX1276Write>
 8005f58:	e00f      	b.n	8005f7a <SX1276SetRxConfig+0x482>
            else if( bandwidth == 9 )
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	2b09      	cmp	r3, #9
 8005f5e:	d108      	bne.n	8005f72 <SX1276SetRxConfig+0x47a>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8005f60:	2102      	movs	r1, #2
 8005f62:	2036      	movs	r0, #54	@ 0x36
 8005f64:	f001 f8ac 	bl	80070c0 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8005f68:	217f      	movs	r1, #127	@ 0x7f
 8005f6a:	203a      	movs	r0, #58	@ 0x3a
 8005f6c:	f001 f8a8 	bl	80070c0 <SX1276Write>
 8005f70:	e003      	b.n	8005f7a <SX1276SetRxConfig+0x482>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8005f72:	2103      	movs	r1, #3
 8005f74:	2036      	movs	r0, #54	@ 0x36
 8005f76:	f001 f8a3 	bl	80070c0 <SX1276Write>
            if( datarate == 6 )
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2b06      	cmp	r3, #6
 8005f7e:	d114      	bne.n	8005faa <SX1276SetRxConfig+0x4b2>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8005f80:	2031      	movs	r0, #49	@ 0x31
 8005f82:	f001 f8b1 	bl	80070e8 <SX1276Read>
 8005f86:	0003      	movs	r3, r0
 8005f88:	b25b      	sxtb	r3, r3
 8005f8a:	2207      	movs	r2, #7
 8005f8c:	4393      	bics	r3, r2
 8005f8e:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8005f90:	2205      	movs	r2, #5
 8005f92:	4313      	orrs	r3, r2
 8005f94:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	0019      	movs	r1, r3
 8005f9a:	2031      	movs	r0, #49	@ 0x31
 8005f9c:	f001 f890 	bl	80070c0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8005fa0:	210c      	movs	r1, #12
 8005fa2:	2037      	movs	r0, #55	@ 0x37
 8005fa4:	f001 f88c 	bl	80070c0 <SX1276Write>
        break;
 8005fa8:	e013      	b.n	8005fd2 <SX1276SetRxConfig+0x4da>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8005faa:	2031      	movs	r0, #49	@ 0x31
 8005fac:	f001 f89c 	bl	80070e8 <SX1276Read>
 8005fb0:	0003      	movs	r3, r0
 8005fb2:	b25b      	sxtb	r3, r3
 8005fb4:	2207      	movs	r2, #7
 8005fb6:	4393      	bics	r3, r2
 8005fb8:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8005fba:	2203      	movs	r2, #3
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	0019      	movs	r1, r3
 8005fc4:	2031      	movs	r0, #49	@ 0x31
 8005fc6:	f001 f87b 	bl	80070c0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8005fca:	210a      	movs	r1, #10
 8005fcc:	2037      	movs	r0, #55	@ 0x37
 8005fce:	f001 f877 	bl	80070c0 <SX1276Write>
        break;
 8005fd2:	46c0      	nop			@ (mov r8, r8)
}
 8005fd4:	46c0      	nop			@ (mov r8, r8)
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	b005      	add	sp, #20
 8005fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fdc:	200004c8 	.word	0x200004c8
 8005fe0:	1f4add40 	.word	0x1f4add40

08005fe4 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8005fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60ba      	str	r2, [r7, #8]
 8005fec:	607b      	str	r3, [r7, #4]
 8005fee:	240f      	movs	r4, #15
 8005ff0:	193b      	adds	r3, r7, r4
 8005ff2:	1c02      	adds	r2, r0, #0
 8005ff4:	701a      	strb	r2, [r3, #0]
 8005ff6:	250e      	movs	r5, #14
 8005ff8:	197b      	adds	r3, r7, r5
 8005ffa:	1c0a      	adds	r2, r1, #0
 8005ffc:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8005ffe:	193b      	adds	r3, r7, r4
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	0018      	movs	r0, r3
 8006004:	f001 f802 	bl	800700c <SX1276SetModem>

    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 8006008:	4ba6      	ldr	r3, [pc, #664]	@ (80062a4 <SX1276SetTxConfig+0x2c0>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	197a      	adds	r2, r7, r5
 8006010:	7812      	ldrb	r2, [r2, #0]
 8006012:	b252      	sxtb	r2, r2
 8006014:	0010      	movs	r0, r2
 8006016:	4798      	blx	r3

    switch( modem )
 8006018:	193b      	adds	r3, r7, r4
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <SX1276SetTxConfig+0x44>
 8006020:	2b01      	cmp	r3, #1
 8006022:	d100      	bne.n	8006026 <SX1276SetTxConfig+0x42>
 8006024:	e0c1      	b.n	80061aa <SX1276SetTxConfig+0x1c6>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8006026:	e1f9      	b.n	800641c <SX1276SetTxConfig+0x438>
            SX1276.Settings.Fsk.Power = power;
 8006028:	4b9f      	ldr	r3, [pc, #636]	@ (80062a8 <SX1276SetTxConfig+0x2c4>)
 800602a:	220e      	movs	r2, #14
 800602c:	18ba      	adds	r2, r7, r2
 800602e:	7812      	ldrb	r2, [r2, #0]
 8006030:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 8006032:	4b9d      	ldr	r3, [pc, #628]	@ (80062a8 <SX1276SetTxConfig+0x2c4>)
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8006038:	4b9b      	ldr	r3, [pc, #620]	@ (80062a8 <SX1276SetTxConfig+0x2c4>)
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 800603e:	4b9a      	ldr	r3, [pc, #616]	@ (80062a8 <SX1276SetTxConfig+0x2c4>)
 8006040:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006042:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8006044:	4b98      	ldr	r3, [pc, #608]	@ (80062a8 <SX1276SetTxConfig+0x2c4>)
 8006046:	2420      	movs	r4, #32
 8006048:	2608      	movs	r6, #8
 800604a:	19a2      	adds	r2, r4, r6
 800604c:	2108      	movs	r1, #8
 800604e:	468c      	mov	ip, r1
 8006050:	44bc      	add	ip, r7
 8006052:	4462      	add	r2, ip
 8006054:	8812      	ldrh	r2, [r2, #0]
 8006056:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8006058:	4b93      	ldr	r3, [pc, #588]	@ (80062a8 <SX1276SetTxConfig+0x2c4>)
 800605a:	2524      	movs	r5, #36	@ 0x24
 800605c:	19aa      	adds	r2, r5, r6
 800605e:	2108      	movs	r1, #8
 8006060:	468c      	mov	ip, r1
 8006062:	44bc      	add	ip, r7
 8006064:	4462      	add	r2, ip
 8006066:	2122      	movs	r1, #34	@ 0x22
 8006068:	7812      	ldrb	r2, [r2, #0]
 800606a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800606c:	4b8e      	ldr	r3, [pc, #568]	@ (80062a8 <SX1276SetTxConfig+0x2c4>)
 800606e:	2228      	movs	r2, #40	@ 0x28
 8006070:	1992      	adds	r2, r2, r6
 8006072:	2108      	movs	r1, #8
 8006074:	468c      	mov	ip, r1
 8006076:	44bc      	add	ip, r7
 8006078:	4462      	add	r2, ip
 800607a:	2124      	movs	r1, #36	@ 0x24
 800607c:	7812      	ldrb	r2, [r2, #0]
 800607e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8006080:	4b89      	ldr	r3, [pc, #548]	@ (80062a8 <SX1276SetTxConfig+0x2c4>)
 8006082:	2234      	movs	r2, #52	@ 0x34
 8006084:	1992      	adds	r2, r2, r6
 8006086:	2108      	movs	r1, #8
 8006088:	468c      	mov	ip, r1
 800608a:	44bc      	add	ip, r7
 800608c:	4462      	add	r2, ip
 800608e:	2125      	movs	r1, #37	@ 0x25
 8006090:	7812      	ldrb	r2, [r2, #0]
 8006092:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8006094:	4b84      	ldr	r3, [pc, #528]	@ (80062a8 <SX1276SetTxConfig+0x2c4>)
 8006096:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006098:	629a      	str	r2, [r3, #40]	@ 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 800609a:	68b8      	ldr	r0, [r7, #8]
 800609c:	f7fc feee 	bl	8002e7c <__aeabi_ui2d>
 80060a0:	2200      	movs	r2, #0
 80060a2:	4b82      	ldr	r3, [pc, #520]	@ (80062ac <SX1276SetTxConfig+0x2c8>)
 80060a4:	f7fb fbd8 	bl	8001858 <__aeabi_ddiv>
 80060a8:	0002      	movs	r2, r0
 80060aa:	000b      	movs	r3, r1
 80060ac:	0010      	movs	r0, r2
 80060ae:	0019      	movs	r1, r3
 80060b0:	f7fa fa5a 	bl	8000568 <__aeabi_d2uiz>
 80060b4:	0003      	movs	r3, r0
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	0a1b      	lsrs	r3, r3, #8
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	0019      	movs	r1, r3
 80060c2:	2004      	movs	r0, #4
 80060c4:	f000 fffc 	bl	80070c0 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	0019      	movs	r1, r3
 80060ce:	2005      	movs	r0, #5
 80060d0:	f000 fff6 	bl	80070c0 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80060d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060d6:	f7fc fed1 	bl	8002e7c <__aeabi_ui2d>
 80060da:	0002      	movs	r2, r0
 80060dc:	000b      	movs	r3, r1
 80060de:	2000      	movs	r0, #0
 80060e0:	4973      	ldr	r1, [pc, #460]	@ (80062b0 <SX1276SetTxConfig+0x2cc>)
 80060e2:	f7fb fbb9 	bl	8001858 <__aeabi_ddiv>
 80060e6:	0002      	movs	r2, r0
 80060e8:	000b      	movs	r3, r1
 80060ea:	0010      	movs	r0, r2
 80060ec:	0019      	movs	r1, r3
 80060ee:	f7fa fa3b 	bl	8000568 <__aeabi_d2uiz>
 80060f2:	0003      	movs	r3, r0
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	62bb      	str	r3, [r7, #40]	@ 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80060f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fa:	0a1b      	lsrs	r3, r3, #8
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	0019      	movs	r1, r3
 8006100:	2002      	movs	r0, #2
 8006102:	f000 ffdd 	bl	80070c0 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8006106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006108:	b2db      	uxtb	r3, r3
 800610a:	0019      	movs	r1, r3
 800610c:	2003      	movs	r0, #3
 800610e:	f000 ffd7 	bl	80070c0 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8006112:	19a3      	adds	r3, r4, r6
 8006114:	2208      	movs	r2, #8
 8006116:	4694      	mov	ip, r2
 8006118:	44bc      	add	ip, r7
 800611a:	4463      	add	r3, ip
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	0a1b      	lsrs	r3, r3, #8
 8006120:	b29b      	uxth	r3, r3
 8006122:	b2db      	uxtb	r3, r3
 8006124:	0019      	movs	r1, r3
 8006126:	2025      	movs	r0, #37	@ 0x25
 8006128:	f000 ffca 	bl	80070c0 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800612c:	19a3      	adds	r3, r4, r6
 800612e:	2208      	movs	r2, #8
 8006130:	4694      	mov	ip, r2
 8006132:	44bc      	add	ip, r7
 8006134:	4463      	add	r3, ip
 8006136:	881b      	ldrh	r3, [r3, #0]
 8006138:	b2db      	uxtb	r3, r3
 800613a:	0019      	movs	r1, r3
 800613c:	2026      	movs	r0, #38	@ 0x26
 800613e:	f000 ffbf 	bl	80070c0 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8006142:	2030      	movs	r0, #48	@ 0x30
 8006144:	f000 ffd0 	bl	80070e8 <SX1276Read>
 8006148:	0003      	movs	r3, r0
 800614a:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800614c:	226f      	movs	r2, #111	@ 0x6f
 800614e:	4013      	ands	r3, r2
 8006150:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8006152:	19ab      	adds	r3, r5, r6
 8006154:	2108      	movs	r1, #8
 8006156:	468c      	mov	ip, r1
 8006158:	44bc      	add	ip, r7
 800615a:	4463      	add	r3, ip
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <SX1276SetTxConfig+0x182>
 8006162:	2300      	movs	r3, #0
 8006164:	e001      	b.n	800616a <SX1276SetTxConfig+0x186>
 8006166:	2380      	movs	r3, #128	@ 0x80
 8006168:	425b      	negs	r3, r3
 800616a:	4313      	orrs	r3, r2
 800616c:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 800616e:	2328      	movs	r3, #40	@ 0x28
 8006170:	2108      	movs	r1, #8
 8006172:	185b      	adds	r3, r3, r1
 8006174:	2108      	movs	r1, #8
 8006176:	468c      	mov	ip, r1
 8006178:	44bc      	add	ip, r7
 800617a:	4463      	add	r3, ip
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8006180:	b25b      	sxtb	r3, r3
 8006182:	4313      	orrs	r3, r2
 8006184:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8006186:	b2db      	uxtb	r3, r3
 8006188:	0019      	movs	r1, r3
 800618a:	2030      	movs	r0, #48	@ 0x30
 800618c:	f000 ff98 	bl	80070c0 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8006190:	2031      	movs	r0, #49	@ 0x31
 8006192:	f000 ffa9 	bl	80070e8 <SX1276Read>
 8006196:	0003      	movs	r3, r0
 8006198:	001a      	movs	r2, r3
 800619a:	2340      	movs	r3, #64	@ 0x40
 800619c:	4313      	orrs	r3, r2
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	0019      	movs	r1, r3
 80061a2:	2031      	movs	r0, #49	@ 0x31
 80061a4:	f000 ff8c 	bl	80070c0 <SX1276Write>
        break;
 80061a8:	e138      	b.n	800641c <SX1276SetTxConfig+0x438>
            SX1276.Settings.LoRa.Power = power;
 80061aa:	4b3f      	ldr	r3, [pc, #252]	@ (80062a8 <SX1276SetTxConfig+0x2c4>)
 80061ac:	220e      	movs	r2, #14
 80061ae:	18ba      	adds	r2, r7, r2
 80061b0:	2140      	movs	r1, #64	@ 0x40
 80061b2:	7812      	ldrb	r2, [r2, #0]
 80061b4:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d901      	bls.n	80061c0 <SX1276SetTxConfig+0x1dc>
                while( 1 );
 80061bc:	46c0      	nop			@ (mov r8, r8)
 80061be:	e7fd      	b.n	80061bc <SX1276SetTxConfig+0x1d8>
            bandwidth += 7;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3307      	adds	r3, #7
 80061c4:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80061c6:	4b38      	ldr	r3, [pc, #224]	@ (80062a8 <SX1276SetTxConfig+0x2c4>)
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	645a      	str	r2, [r3, #68]	@ 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 80061cc:	4b36      	ldr	r3, [pc, #216]	@ (80062a8 <SX1276SetTxConfig+0x2c4>)
 80061ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061d0:	649a      	str	r2, [r3, #72]	@ 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 80061d2:	4b35      	ldr	r3, [pc, #212]	@ (80062a8 <SX1276SetTxConfig+0x2c4>)
 80061d4:	221c      	movs	r2, #28
 80061d6:	2008      	movs	r0, #8
 80061d8:	1812      	adds	r2, r2, r0
 80061da:	2108      	movs	r1, #8
 80061dc:	468c      	mov	ip, r1
 80061de:	44bc      	add	ip, r7
 80061e0:	4462      	add	r2, ip
 80061e2:	214d      	movs	r1, #77	@ 0x4d
 80061e4:	7812      	ldrb	r2, [r2, #0]
 80061e6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80061e8:	4b2f      	ldr	r3, [pc, #188]	@ (80062a8 <SX1276SetTxConfig+0x2c4>)
 80061ea:	2220      	movs	r2, #32
 80061ec:	1812      	adds	r2, r2, r0
 80061ee:	2108      	movs	r1, #8
 80061f0:	468c      	mov	ip, r1
 80061f2:	44bc      	add	ip, r7
 80061f4:	4462      	add	r2, ip
 80061f6:	214e      	movs	r1, #78	@ 0x4e
 80061f8:	8812      	ldrh	r2, [r2, #0]
 80061fa:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 80061fc:	4b2a      	ldr	r3, [pc, #168]	@ (80062a8 <SX1276SetTxConfig+0x2c4>)
 80061fe:	2224      	movs	r2, #36	@ 0x24
 8006200:	1812      	adds	r2, r2, r0
 8006202:	2108      	movs	r1, #8
 8006204:	468c      	mov	ip, r1
 8006206:	44bc      	add	ip, r7
 8006208:	4462      	add	r2, ip
 800620a:	2150      	movs	r1, #80	@ 0x50
 800620c:	7812      	ldrb	r2, [r2, #0]
 800620e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8006210:	4b25      	ldr	r3, [pc, #148]	@ (80062a8 <SX1276SetTxConfig+0x2c4>)
 8006212:	222c      	movs	r2, #44	@ 0x2c
 8006214:	1812      	adds	r2, r2, r0
 8006216:	2108      	movs	r1, #8
 8006218:	468c      	mov	ip, r1
 800621a:	44bc      	add	ip, r7
 800621c:	4462      	add	r2, ip
 800621e:	2153      	movs	r1, #83	@ 0x53
 8006220:	7812      	ldrb	r2, [r2, #0]
 8006222:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8006224:	4b20      	ldr	r3, [pc, #128]	@ (80062a8 <SX1276SetTxConfig+0x2c4>)
 8006226:	2230      	movs	r2, #48	@ 0x30
 8006228:	1812      	adds	r2, r2, r0
 800622a:	2108      	movs	r1, #8
 800622c:	468c      	mov	ip, r1
 800622e:	44bc      	add	ip, r7
 8006230:	4462      	add	r2, ip
 8006232:	2154      	movs	r1, #84	@ 0x54
 8006234:	7812      	ldrb	r2, [r2, #0]
 8006236:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8006238:	4b1b      	ldr	r3, [pc, #108]	@ (80062a8 <SX1276SetTxConfig+0x2c4>)
 800623a:	2228      	movs	r2, #40	@ 0x28
 800623c:	1812      	adds	r2, r2, r0
 800623e:	2108      	movs	r1, #8
 8006240:	468c      	mov	ip, r1
 8006242:	44bc      	add	ip, r7
 8006244:	4462      	add	r2, ip
 8006246:	2152      	movs	r1, #82	@ 0x52
 8006248:	7812      	ldrb	r2, [r2, #0]
 800624a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800624c:	4b16      	ldr	r3, [pc, #88]	@ (80062a8 <SX1276SetTxConfig+0x2c4>)
 800624e:	2234      	movs	r2, #52	@ 0x34
 8006250:	1812      	adds	r2, r2, r0
 8006252:	2108      	movs	r1, #8
 8006254:	468c      	mov	ip, r1
 8006256:	44bc      	add	ip, r7
 8006258:	4462      	add	r2, ip
 800625a:	2155      	movs	r1, #85	@ 0x55
 800625c:	7812      	ldrb	r2, [r2, #0]
 800625e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8006260:	4b11      	ldr	r3, [pc, #68]	@ (80062a8 <SX1276SetTxConfig+0x2c4>)
 8006262:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006264:	659a      	str	r2, [r3, #88]	@ 0x58
            if( datarate > 12 )
 8006266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006268:	2b0c      	cmp	r3, #12
 800626a:	d902      	bls.n	8006272 <SX1276SetTxConfig+0x28e>
                datarate = 12;
 800626c:	230c      	movs	r3, #12
 800626e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006270:	e004      	b.n	800627c <SX1276SetTxConfig+0x298>
            else if( datarate < 6 )
 8006272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006274:	2b05      	cmp	r3, #5
 8006276:	d801      	bhi.n	800627c <SX1276SetTxConfig+0x298>
                datarate = 6;
 8006278:	2306      	movs	r3, #6
 800627a:	62bb      	str	r3, [r7, #40]	@ 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b07      	cmp	r3, #7
 8006280:	d105      	bne.n	800628e <SX1276SetTxConfig+0x2aa>
 8006282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006284:	2b0b      	cmp	r3, #11
 8006286:	d008      	beq.n	800629a <SX1276SetTxConfig+0x2b6>
 8006288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628a:	2b0c      	cmp	r3, #12
 800628c:	d005      	beq.n	800629a <SX1276SetTxConfig+0x2b6>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b08      	cmp	r3, #8
 8006292:	d10f      	bne.n	80062b4 <SX1276SetTxConfig+0x2d0>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8006294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006296:	2b0c      	cmp	r3, #12
 8006298:	d10c      	bne.n	80062b4 <SX1276SetTxConfig+0x2d0>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800629a:	4b03      	ldr	r3, [pc, #12]	@ (80062a8 <SX1276SetTxConfig+0x2c4>)
 800629c:	224c      	movs	r2, #76	@ 0x4c
 800629e:	2101      	movs	r1, #1
 80062a0:	5499      	strb	r1, [r3, r2]
 80062a2:	e00b      	b.n	80062bc <SX1276SetTxConfig+0x2d8>
 80062a4:	200004c4 	.word	0x200004c4
 80062a8:	200004c8 	.word	0x200004c8
 80062ac:	404e8480 	.word	0x404e8480
 80062b0:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80062b4:	4b5b      	ldr	r3, [pc, #364]	@ (8006424 <SX1276SetTxConfig+0x440>)
 80062b6:	224c      	movs	r2, #76	@ 0x4c
 80062b8:	2100      	movs	r1, #0
 80062ba:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80062bc:	4b59      	ldr	r3, [pc, #356]	@ (8006424 <SX1276SetTxConfig+0x440>)
 80062be:	2253      	movs	r2, #83	@ 0x53
 80062c0:	5c9b      	ldrb	r3, [r3, r2]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d013      	beq.n	80062ee <SX1276SetTxConfig+0x30a>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80062c6:	2044      	movs	r0, #68	@ 0x44
 80062c8:	f000 ff0e 	bl	80070e8 <SX1276Read>
 80062cc:	0003      	movs	r3, r0
 80062ce:	001a      	movs	r2, r3
 80062d0:	2380      	movs	r3, #128	@ 0x80
 80062d2:	425b      	negs	r3, r3
 80062d4:	4313      	orrs	r3, r2
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	0019      	movs	r1, r3
 80062da:	2044      	movs	r0, #68	@ 0x44
 80062dc:	f000 fef0 	bl	80070c0 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80062e0:	4b50      	ldr	r3, [pc, #320]	@ (8006424 <SX1276SetTxConfig+0x440>)
 80062e2:	2254      	movs	r2, #84	@ 0x54
 80062e4:	5c9b      	ldrb	r3, [r3, r2]
 80062e6:	0019      	movs	r1, r3
 80062e8:	2024      	movs	r0, #36	@ 0x24
 80062ea:	f000 fee9 	bl	80070c0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80062ee:	201d      	movs	r0, #29
 80062f0:	f000 fefa 	bl	80070e8 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	011b      	lsls	r3, r3, #4
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	231c      	movs	r3, #28
 80062fe:	2508      	movs	r5, #8
 8006300:	195b      	adds	r3, r3, r5
 8006302:	2108      	movs	r1, #8
 8006304:	468c      	mov	ip, r1
 8006306:	44bc      	add	ip, r7
 8006308:	4463      	add	r3, ip
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	18db      	adds	r3, r3, r3
 800630e:	b2db      	uxtb	r3, r3
 8006310:	4313      	orrs	r3, r2
 8006312:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8006314:	2324      	movs	r3, #36	@ 0x24
 8006316:	195b      	adds	r3, r3, r5
 8006318:	2108      	movs	r1, #8
 800631a:	468c      	mov	ip, r1
 800631c:	44bc      	add	ip, r7
 800631e:	4463      	add	r3, ip
 8006320:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8006322:	4313      	orrs	r3, r2
 8006324:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8006326:	0019      	movs	r1, r3
 8006328:	201d      	movs	r0, #29
 800632a:	f000 fec9 	bl	80070c0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800632e:	201e      	movs	r0, #30
 8006330:	f000 feda 	bl	80070e8 <SX1276Read>
 8006334:	0003      	movs	r3, r0
 8006336:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 8006338:	230b      	movs	r3, #11
 800633a:	4013      	ands	r3, r2
 800633c:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800633e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006340:	b2db      	uxtb	r3, r3
 8006342:	011b      	lsls	r3, r3, #4
 8006344:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8006346:	4313      	orrs	r3, r2
 8006348:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800634a:	2328      	movs	r3, #40	@ 0x28
 800634c:	195b      	adds	r3, r3, r5
 800634e:	2108      	movs	r1, #8
 8006350:	468c      	mov	ip, r1
 8006352:	44bc      	add	ip, r7
 8006354:	4463      	add	r3, ip
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800635c:	4313      	orrs	r3, r2
 800635e:	b2db      	uxtb	r3, r3
 8006360:	0019      	movs	r1, r3
 8006362:	201e      	movs	r0, #30
 8006364:	f000 feac 	bl	80070c0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8006368:	2026      	movs	r0, #38	@ 0x26
 800636a:	f000 febd 	bl	80070e8 <SX1276Read>
 800636e:	0003      	movs	r3, r0
 8006370:	b25b      	sxtb	r3, r3
 8006372:	2208      	movs	r2, #8
 8006374:	4393      	bics	r3, r2
 8006376:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8006378:	4b2a      	ldr	r3, [pc, #168]	@ (8006424 <SX1276SetTxConfig+0x440>)
 800637a:	214c      	movs	r1, #76	@ 0x4c
 800637c:	5c5b      	ldrb	r3, [r3, r1]
 800637e:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8006380:	b25b      	sxtb	r3, r3
 8006382:	4313      	orrs	r3, r2
 8006384:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8006386:	b2db      	uxtb	r3, r3
 8006388:	0019      	movs	r1, r3
 800638a:	2026      	movs	r0, #38	@ 0x26
 800638c:	f000 fe98 	bl	80070c0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8006390:	2420      	movs	r4, #32
 8006392:	1963      	adds	r3, r4, r5
 8006394:	2208      	movs	r2, #8
 8006396:	4694      	mov	ip, r2
 8006398:	44bc      	add	ip, r7
 800639a:	4463      	add	r3, ip
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	0a1b      	lsrs	r3, r3, #8
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	0019      	movs	r1, r3
 80063a6:	2020      	movs	r0, #32
 80063a8:	f000 fe8a 	bl	80070c0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 80063ac:	1963      	adds	r3, r4, r5
 80063ae:	2208      	movs	r2, #8
 80063b0:	4694      	mov	ip, r2
 80063b2:	44bc      	add	ip, r7
 80063b4:	4463      	add	r3, ip
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	0019      	movs	r1, r3
 80063bc:	2021      	movs	r0, #33	@ 0x21
 80063be:	f000 fe7f 	bl	80070c0 <SX1276Write>
            if( datarate == 6 )
 80063c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c4:	2b06      	cmp	r3, #6
 80063c6:	d114      	bne.n	80063f2 <SX1276SetTxConfig+0x40e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80063c8:	2031      	movs	r0, #49	@ 0x31
 80063ca:	f000 fe8d 	bl	80070e8 <SX1276Read>
 80063ce:	0003      	movs	r3, r0
 80063d0:	b25b      	sxtb	r3, r3
 80063d2:	2207      	movs	r2, #7
 80063d4:	4393      	bics	r3, r2
 80063d6:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80063d8:	2205      	movs	r2, #5
 80063da:	4313      	orrs	r3, r2
 80063dc:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	0019      	movs	r1, r3
 80063e2:	2031      	movs	r0, #49	@ 0x31
 80063e4:	f000 fe6c 	bl	80070c0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80063e8:	210c      	movs	r1, #12
 80063ea:	2037      	movs	r0, #55	@ 0x37
 80063ec:	f000 fe68 	bl	80070c0 <SX1276Write>
        break;
 80063f0:	e013      	b.n	800641a <SX1276SetTxConfig+0x436>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80063f2:	2031      	movs	r0, #49	@ 0x31
 80063f4:	f000 fe78 	bl	80070e8 <SX1276Read>
 80063f8:	0003      	movs	r3, r0
 80063fa:	b25b      	sxtb	r3, r3
 80063fc:	2207      	movs	r2, #7
 80063fe:	4393      	bics	r3, r2
 8006400:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8006402:	2203      	movs	r2, #3
 8006404:	4313      	orrs	r3, r2
 8006406:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8006408:	b2db      	uxtb	r3, r3
 800640a:	0019      	movs	r1, r3
 800640c:	2031      	movs	r0, #49	@ 0x31
 800640e:	f000 fe57 	bl	80070c0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8006412:	210a      	movs	r1, #10
 8006414:	2037      	movs	r0, #55	@ 0x37
 8006416:	f000 fe53 	bl	80070c0 <SX1276Write>
        break;
 800641a:	46c0      	nop			@ (mov r8, r8)
}
 800641c:	46c0      	nop			@ (mov r8, r8)
 800641e:	46bd      	mov	sp, r7
 8006420:	b005      	add	sp, #20
 8006422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006424:	200004c8 	.word	0x200004c8

08006428 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 8006428:	b5b0      	push	{r4, r5, r7, lr}
 800642a:	b094      	sub	sp, #80	@ 0x50
 800642c:	af00      	add	r7, sp, #0
 800642e:	0002      	movs	r2, r0
 8006430:	1dfb      	adds	r3, r7, #7
 8006432:	701a      	strb	r2, [r3, #0]
 8006434:	1dbb      	adds	r3, r7, #6
 8006436:	1c0a      	adds	r2, r1, #0
 8006438:	701a      	strb	r2, [r3, #0]
    uint32_t airTime = 0;
 800643a:	2300      	movs	r3, #0
 800643c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    switch( modem )
 800643e:	1dfb      	adds	r3, r7, #7
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <SX1276GetTimeOnAir+0x26>
 8006446:	2b01      	cmp	r3, #1
 8006448:	d100      	bne.n	800644c <SX1276GetTimeOnAir+0x24>
 800644a:	e080      	b.n	800654e <SX1276GetTimeOnAir+0x126>
 800644c:	e15c      	b.n	8006708 <SX1276GetTimeOnAir+0x2e0>
    {
    case MODEM_FSK:
        {
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800644e:	4bb1      	ldr	r3, [pc, #708]	@ (8006714 <SX1276GetTimeOnAir+0x2ec>)
 8006450:	8c1b      	ldrh	r3, [r3, #32]
 8006452:	001c      	movs	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8006454:	2027      	movs	r0, #39	@ 0x27
 8006456:	f000 fe47 	bl	80070e8 <SX1276Read>
 800645a:	0003      	movs	r3, r0
 800645c:	001a      	movs	r2, r3
 800645e:	23f8      	movs	r3, #248	@ 0xf8
 8006460:	439a      	bics	r2, r3
 8006462:	0013      	movs	r3, r2
 8006464:	3301      	adds	r3, #1
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8006466:	18e3      	adds	r3, r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8006468:	0018      	movs	r0, r3
 800646a:	f7fc fcd9 	bl	8002e20 <__aeabi_i2d>
 800646e:	0002      	movs	r2, r0
 8006470:	000b      	movs	r3, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8006472:	49a8      	ldr	r1, [pc, #672]	@ (8006714 <SX1276GetTimeOnAir+0x2ec>)
 8006474:	2022      	movs	r0, #34	@ 0x22
 8006476:	5c09      	ldrb	r1, [r1, r0]
 8006478:	2900      	cmp	r1, #0
 800647a:	d002      	beq.n	8006482 <SX1276GetTimeOnAir+0x5a>
 800647c:	2000      	movs	r0, #0
 800647e:	2100      	movs	r1, #0
 8006480:	e001      	b.n	8006486 <SX1276GetTimeOnAir+0x5e>
 8006482:	2000      	movs	r0, #0
 8006484:	49a4      	ldr	r1, [pc, #656]	@ (8006718 <SX1276GetTimeOnAir+0x2f0>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8006486:	f7fa fe83 	bl	8001190 <__aeabi_dadd>
 800648a:	0002      	movs	r2, r0
 800648c:	000b      	movs	r3, r1
 800648e:	0014      	movs	r4, r2
 8006490:	001d      	movs	r5, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8006492:	2030      	movs	r0, #48	@ 0x30
 8006494:	f000 fe28 	bl	80070e8 <SX1276Read>
 8006498:	0003      	movs	r3, r0
 800649a:	001a      	movs	r2, r3
 800649c:	23f9      	movs	r3, #249	@ 0xf9
 800649e:	439a      	bics	r2, r3
 80064a0:	1e13      	subs	r3, r2, #0
 80064a2:	d002      	beq.n	80064aa <SX1276GetTimeOnAir+0x82>
 80064a4:	2000      	movs	r0, #0
 80064a6:	499c      	ldr	r1, [pc, #624]	@ (8006718 <SX1276GetTimeOnAir+0x2f0>)
 80064a8:	e001      	b.n	80064ae <SX1276GetTimeOnAir+0x86>
 80064aa:	2000      	movs	r0, #0
 80064ac:	2100      	movs	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80064ae:	0022      	movs	r2, r4
 80064b0:	002b      	movs	r3, r5
 80064b2:	f7fa fe6d 	bl	8001190 <__aeabi_dadd>
 80064b6:	0002      	movs	r2, r0
 80064b8:	000b      	movs	r3, r1
 80064ba:	0014      	movs	r4, r2
 80064bc:	001d      	movs	r5, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80064be:	1dbb      	adds	r3, r7, #6
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	0018      	movs	r0, r3
 80064c4:	f7fc fcac 	bl	8002e20 <__aeabi_i2d>
 80064c8:	0002      	movs	r2, r0
 80064ca:	000b      	movs	r3, r1
 80064cc:	0020      	movs	r0, r4
 80064ce:	0029      	movs	r1, r5
 80064d0:	f7fa fe5e 	bl	8001190 <__aeabi_dadd>
 80064d4:	0002      	movs	r2, r0
 80064d6:	000b      	movs	r3, r1
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80064d8:	498e      	ldr	r1, [pc, #568]	@ (8006714 <SX1276GetTimeOnAir+0x2ec>)
 80064da:	2024      	movs	r0, #36	@ 0x24
 80064dc:	5c09      	ldrb	r1, [r1, r0]
 80064de:	2900      	cmp	r1, #0
 80064e0:	d003      	beq.n	80064ea <SX1276GetTimeOnAir+0xc2>
 80064e2:	2000      	movs	r0, #0
 80064e4:	2180      	movs	r1, #128	@ 0x80
 80064e6:	05c9      	lsls	r1, r1, #23
 80064e8:	e001      	b.n	80064ee <SX1276GetTimeOnAir+0xc6>
 80064ea:	2000      	movs	r0, #0
 80064ec:	2100      	movs	r1, #0
                                     pktLen +
 80064ee:	f7fa fe4f 	bl	8001190 <__aeabi_dadd>
 80064f2:	0002      	movs	r2, r0
 80064f4:	000b      	movs	r3, r1
 80064f6:	0010      	movs	r0, r2
 80064f8:	0019      	movs	r1, r3
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80064fa:	2200      	movs	r2, #0
 80064fc:	4b87      	ldr	r3, [pc, #540]	@ (800671c <SX1276GetTimeOnAir+0x2f4>)
 80064fe:	f7fb fdef 	bl	80020e0 <__aeabi_dmul>
 8006502:	0002      	movs	r2, r0
 8006504:	000b      	movs	r3, r1
 8006506:	0014      	movs	r4, r2
 8006508:	001d      	movs	r5, r3
                                     SX1276.Settings.Fsk.Datarate ) * 1000 );
 800650a:	4b82      	ldr	r3, [pc, #520]	@ (8006714 <SX1276GetTimeOnAir+0x2ec>)
 800650c:	69db      	ldr	r3, [r3, #28]
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 800650e:	0018      	movs	r0, r3
 8006510:	f7fc fcb4 	bl	8002e7c <__aeabi_ui2d>
 8006514:	0002      	movs	r2, r0
 8006516:	000b      	movs	r3, r1
 8006518:	0020      	movs	r0, r4
 800651a:	0029      	movs	r1, r5
 800651c:	f7fb f99c 	bl	8001858 <__aeabi_ddiv>
 8006520:	0002      	movs	r2, r0
 8006522:	000b      	movs	r3, r1
 8006524:	0010      	movs	r0, r2
 8006526:	0019      	movs	r1, r3
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8006528:	2200      	movs	r2, #0
 800652a:	4b7d      	ldr	r3, [pc, #500]	@ (8006720 <SX1276GetTimeOnAir+0x2f8>)
 800652c:	f7fb fdd8 	bl	80020e0 <__aeabi_dmul>
 8006530:	0002      	movs	r2, r0
 8006532:	000b      	movs	r3, r1
 8006534:	0010      	movs	r0, r2
 8006536:	0019      	movs	r1, r3
 8006538:	f013 ffa4 	bl	801a484 <round>
 800653c:	0002      	movs	r2, r0
 800653e:	000b      	movs	r3, r1
 8006540:	0010      	movs	r0, r2
 8006542:	0019      	movs	r1, r3
 8006544:	f7fa f810 	bl	8000568 <__aeabi_d2uiz>
 8006548:	0003      	movs	r3, r0
 800654a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        break;
 800654c:	e0dc      	b.n	8006708 <SX1276GetTimeOnAir+0x2e0>
    case MODEM_LORA:
        {
            double bw = 0.0;
 800654e:	2200      	movs	r2, #0
 8006550:	2300      	movs	r3, #0
 8006552:	643a      	str	r2, [r7, #64]	@ 0x40
 8006554:	647b      	str	r3, [r7, #68]	@ 0x44
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 8006556:	4b6f      	ldr	r3, [pc, #444]	@ (8006714 <SX1276GetTimeOnAir+0x2ec>)
 8006558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800655a:	2b09      	cmp	r3, #9
 800655c:	d00f      	beq.n	800657e <SX1276GetTimeOnAir+0x156>
 800655e:	d813      	bhi.n	8006588 <SX1276GetTimeOnAir+0x160>
 8006560:	2b07      	cmp	r3, #7
 8006562:	d002      	beq.n	800656a <SX1276GetTimeOnAir+0x142>
 8006564:	2b08      	cmp	r3, #8
 8006566:	d005      	beq.n	8006574 <SX1276GetTimeOnAir+0x14c>
 8006568:	e00e      	b.n	8006588 <SX1276GetTimeOnAir+0x160>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 62500;
            //    break;
            case 7: // 125 kHz
                bw = 125000;
 800656a:	2200      	movs	r2, #0
 800656c:	4b6d      	ldr	r3, [pc, #436]	@ (8006724 <SX1276GetTimeOnAir+0x2fc>)
 800656e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006570:	647b      	str	r3, [r7, #68]	@ 0x44
                break;
 8006572:	e009      	b.n	8006588 <SX1276GetTimeOnAir+0x160>
            case 8: // 250 kHz
                bw = 250000;
 8006574:	2200      	movs	r2, #0
 8006576:	4b6c      	ldr	r3, [pc, #432]	@ (8006728 <SX1276GetTimeOnAir+0x300>)
 8006578:	643a      	str	r2, [r7, #64]	@ 0x40
 800657a:	647b      	str	r3, [r7, #68]	@ 0x44
                break;
 800657c:	e004      	b.n	8006588 <SX1276GetTimeOnAir+0x160>
            case 9: // 500 kHz
                bw = 500000;
 800657e:	2200      	movs	r2, #0
 8006580:	4b6a      	ldr	r3, [pc, #424]	@ (800672c <SX1276GetTimeOnAir+0x304>)
 8006582:	643a      	str	r2, [r7, #64]	@ 0x40
 8006584:	647b      	str	r3, [r7, #68]	@ 0x44
                break;
 8006586:	46c0      	nop			@ (mov r8, r8)
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8006588:	4b62      	ldr	r3, [pc, #392]	@ (8006714 <SX1276GetTimeOnAir+0x2ec>)
 800658a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800658c:	2201      	movs	r2, #1
 800658e:	409a      	lsls	r2, r3
 8006590:	0013      	movs	r3, r2
 8006592:	0018      	movs	r0, r3
 8006594:	f7fc fc44 	bl	8002e20 <__aeabi_i2d>
 8006598:	0002      	movs	r2, r0
 800659a:	000b      	movs	r3, r1
 800659c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800659e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80065a0:	f7fb f95a 	bl	8001858 <__aeabi_ddiv>
 80065a4:	0002      	movs	r2, r0
 80065a6:	000b      	movs	r3, r1
 80065a8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80065aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
            double ts = 1 / rs;
 80065ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065b0:	2000      	movs	r0, #0
 80065b2:	4959      	ldr	r1, [pc, #356]	@ (8006718 <SX1276GetTimeOnAir+0x2f0>)
 80065b4:	f7fb f950 	bl	8001858 <__aeabi_ddiv>
 80065b8:	0002      	movs	r2, r0
 80065ba:	000b      	movs	r3, r1
 80065bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80065be:	637b      	str	r3, [r7, #52]	@ 0x34
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 80065c0:	4b54      	ldr	r3, [pc, #336]	@ (8006714 <SX1276GetTimeOnAir+0x2ec>)
 80065c2:	224e      	movs	r2, #78	@ 0x4e
 80065c4:	5a9b      	ldrh	r3, [r3, r2]
 80065c6:	0018      	movs	r0, r3
 80065c8:	f7fc fc2a 	bl	8002e20 <__aeabi_i2d>
 80065cc:	2200      	movs	r2, #0
 80065ce:	4b58      	ldr	r3, [pc, #352]	@ (8006730 <SX1276GetTimeOnAir+0x308>)
 80065d0:	f7fa fdde 	bl	8001190 <__aeabi_dadd>
 80065d4:	0002      	movs	r2, r0
 80065d6:	000b      	movs	r3, r1
 80065d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80065dc:	f7fb fd80 	bl	80020e0 <__aeabi_dmul>
 80065e0:	0002      	movs	r2, r0
 80065e2:	000b      	movs	r3, r1
 80065e4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80065e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80065e8:	1dbb      	adds	r3, r7, #6
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	00db      	lsls	r3, r3, #3
 80065ee:	001a      	movs	r2, r3
 80065f0:	4b48      	ldr	r3, [pc, #288]	@ (8006714 <SX1276GetTimeOnAir+0x2ec>)
 80065f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 80065f8:	4a46      	ldr	r2, [pc, #280]	@ (8006714 <SX1276GetTimeOnAir+0x2ec>)
 80065fa:	2152      	movs	r1, #82	@ 0x52
 80065fc:	5c52      	ldrb	r2, [r2, r1]
 80065fe:	0112      	lsls	r2, r2, #4
 8006600:	189a      	adds	r2, r3, r2
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8006602:	4b44      	ldr	r3, [pc, #272]	@ (8006714 <SX1276GetTimeOnAir+0x2ec>)
 8006604:	2150      	movs	r1, #80	@ 0x50
 8006606:	5c5b      	ldrb	r3, [r3, r1]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <SX1276GetTimeOnAir+0x1e8>
 800660c:	2314      	movs	r3, #20
 800660e:	e000      	b.n	8006612 <SX1276GetTimeOnAir+0x1ea>
 8006610:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8006616:	0018      	movs	r0, r3
 8006618:	f7fc fc30 	bl	8002e7c <__aeabi_ui2d>
 800661c:	0004      	movs	r4, r0
 800661e:	000d      	movs	r5, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8006620:	4b3c      	ldr	r3, [pc, #240]	@ (8006714 <SX1276GetTimeOnAir+0x2ec>)
 8006622:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8006624:	4b3b      	ldr	r3, [pc, #236]	@ (8006714 <SX1276GetTimeOnAir+0x2ec>)
 8006626:	214c      	movs	r1, #76	@ 0x4c
 8006628:	5c5b      	ldrb	r3, [r3, r1]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <SX1276GetTimeOnAir+0x20a>
 800662e:	2302      	movs	r3, #2
 8006630:	e000      	b.n	8006634 <SX1276GetTimeOnAir+0x20c>
 8006632:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	0018      	movs	r0, r3
 800663a:	f7fc fc1f 	bl	8002e7c <__aeabi_ui2d>
 800663e:	0002      	movs	r2, r0
 8006640:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8006642:	0020      	movs	r0, r4
 8006644:	0029      	movs	r1, r5
 8006646:	f7fb f907 	bl	8001858 <__aeabi_ddiv>
 800664a:	0002      	movs	r2, r0
 800664c:	000b      	movs	r3, r1
 800664e:	0010      	movs	r0, r2
 8006650:	0019      	movs	r1, r3
 8006652:	f013 fe23 	bl	801a29c <ceil>
 8006656:	0004      	movs	r4, r0
 8006658:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 800665a:	4b2e      	ldr	r3, [pc, #184]	@ (8006714 <SX1276GetTimeOnAir+0x2ec>)
 800665c:	224d      	movs	r2, #77	@ 0x4d
 800665e:	5c9b      	ldrb	r3, [r3, r2]
 8006660:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8006662:	0018      	movs	r0, r3
 8006664:	f7fc fbdc 	bl	8002e20 <__aeabi_i2d>
 8006668:	0002      	movs	r2, r0
 800666a:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800666c:	0020      	movs	r0, r4
 800666e:	0029      	movs	r1, r5
 8006670:	f7fb fd36 	bl	80020e0 <__aeabi_dmul>
 8006674:	0002      	movs	r2, r0
 8006676:	000b      	movs	r3, r1
 8006678:	623a      	str	r2, [r7, #32]
 800667a:	627b      	str	r3, [r7, #36]	@ 0x24
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 800667c:	2200      	movs	r2, #0
 800667e:	2300      	movs	r3, #0
 8006680:	6a38      	ldr	r0, [r7, #32]
 8006682:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006684:	f7f9 feea 	bl	800045c <__aeabi_dcmpgt>
 8006688:	1e03      	subs	r3, r0, #0
 800668a:	d002      	beq.n	8006692 <SX1276GetTimeOnAir+0x26a>
 800668c:	6a38      	ldr	r0, [r7, #32]
 800668e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006690:	e001      	b.n	8006696 <SX1276GetTimeOnAir+0x26e>
 8006692:	2000      	movs	r0, #0
 8006694:	2100      	movs	r1, #0
 8006696:	2200      	movs	r2, #0
 8006698:	4b20      	ldr	r3, [pc, #128]	@ (800671c <SX1276GetTimeOnAir+0x2f4>)
 800669a:	f7fa fd79 	bl	8001190 <__aeabi_dadd>
 800669e:	0002      	movs	r2, r0
 80066a0:	000b      	movs	r3, r1
 80066a2:	61ba      	str	r2, [r7, #24]
 80066a4:	61fb      	str	r3, [r7, #28]
            double tPayload = nPayload * ts;
 80066a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066aa:	69b8      	ldr	r0, [r7, #24]
 80066ac:	69f9      	ldr	r1, [r7, #28]
 80066ae:	f7fb fd17 	bl	80020e0 <__aeabi_dmul>
 80066b2:	0002      	movs	r2, r0
 80066b4:	000b      	movs	r3, r1
 80066b6:	613a      	str	r2, [r7, #16]
 80066b8:	617b      	str	r3, [r7, #20]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066c2:	f7fa fd65 	bl	8001190 <__aeabi_dadd>
 80066c6:	0002      	movs	r2, r0
 80066c8:	000b      	movs	r3, r1
 80066ca:	60ba      	str	r2, [r7, #8]
 80066cc:	60fb      	str	r3, [r7, #12]
            // return ms secs
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 80066ce:	2200      	movs	r2, #0
 80066d0:	4b13      	ldr	r3, [pc, #76]	@ (8006720 <SX1276GetTimeOnAir+0x2f8>)
 80066d2:	68b8      	ldr	r0, [r7, #8]
 80066d4:	68f9      	ldr	r1, [r7, #12]
 80066d6:	f7fb fd03 	bl	80020e0 <__aeabi_dmul>
 80066da:	0002      	movs	r2, r0
 80066dc:	000b      	movs	r3, r1
 80066de:	0010      	movs	r0, r2
 80066e0:	0019      	movs	r1, r3
 80066e2:	4a14      	ldr	r2, [pc, #80]	@ (8006734 <SX1276GetTimeOnAir+0x30c>)
 80066e4:	4b14      	ldr	r3, [pc, #80]	@ (8006738 <SX1276GetTimeOnAir+0x310>)
 80066e6:	f7fa fd53 	bl	8001190 <__aeabi_dadd>
 80066ea:	0002      	movs	r2, r0
 80066ec:	000b      	movs	r3, r1
 80066ee:	0010      	movs	r0, r2
 80066f0:	0019      	movs	r1, r3
 80066f2:	f013 fe4b 	bl	801a38c <floor>
 80066f6:	0002      	movs	r2, r0
 80066f8:	000b      	movs	r3, r1
 80066fa:	0010      	movs	r0, r2
 80066fc:	0019      	movs	r1, r3
 80066fe:	f7f9 ff33 	bl	8000568 <__aeabi_d2uiz>
 8006702:	0003      	movs	r3, r0
 8006704:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        break;
 8006706:	46c0      	nop			@ (mov r8, r8)
    }
    return airTime;
 8006708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800670a:	0018      	movs	r0, r3
 800670c:	46bd      	mov	sp, r7
 800670e:	b014      	add	sp, #80	@ 0x50
 8006710:	bdb0      	pop	{r4, r5, r7, pc}
 8006712:	46c0      	nop			@ (mov r8, r8)
 8006714:	200004c8 	.word	0x200004c8
 8006718:	3ff00000 	.word	0x3ff00000
 800671c:	40200000 	.word	0x40200000
 8006720:	408f4000 	.word	0x408f4000
 8006724:	40fe8480 	.word	0x40fe8480
 8006728:	410e8480 	.word	0x410e8480
 800672c:	411e8480 	.word	0x411e8480
 8006730:	40110000 	.word	0x40110000
 8006734:	d916872b 	.word	0xd916872b
 8006738:	3feff7ce 	.word	0x3feff7ce

0800673c <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	000a      	movs	r2, r1
 8006746:	1cfb      	adds	r3, r7, #3
 8006748:	701a      	strb	r2, [r3, #0]
    uint32_t txTimeout = 0;
 800674a:	2300      	movs	r3, #0
 800674c:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 800674e:	4b58      	ldr	r3, [pc, #352]	@ (80068b0 <SX1276Send+0x174>)
 8006750:	795b      	ldrb	r3, [r3, #5]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d002      	beq.n	800675c <SX1276Send+0x20>
 8006756:	2b01      	cmp	r3, #1
 8006758:	d04b      	beq.n	80067f2 <SX1276Send+0xb6>
 800675a:	e0a1      	b.n	80068a0 <SX1276Send+0x164>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800675c:	4b54      	ldr	r3, [pc, #336]	@ (80068b0 <SX1276Send+0x174>)
 800675e:	2200      	movs	r2, #0
 8006760:	879a      	strh	r2, [r3, #60]	@ 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 8006762:	1cfb      	adds	r3, r7, #3
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	001a      	movs	r2, r3
 8006768:	4b51      	ldr	r3, [pc, #324]	@ (80068b0 <SX1276Send+0x174>)
 800676a:	875a      	strh	r2, [r3, #58]	@ 0x3a

            if( SX1276.Settings.Fsk.FixLen == false )
 800676c:	4b50      	ldr	r3, [pc, #320]	@ (80068b0 <SX1276Send+0x174>)
 800676e:	2222      	movs	r2, #34	@ 0x22
 8006770:	5c9b      	ldrb	r3, [r3, r2]
 8006772:	2201      	movs	r2, #1
 8006774:	4053      	eors	r3, r2
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	d005      	beq.n	8006788 <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 800677c:	1cfb      	adds	r3, r7, #3
 800677e:	2101      	movs	r1, #1
 8006780:	0018      	movs	r0, r3
 8006782:	f000 fd4a 	bl	800721a <SX1276WriteFifo>
 8006786:	e005      	b.n	8006794 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 8006788:	1cfb      	adds	r3, r7, #3
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	0019      	movs	r1, r3
 800678e:	2032      	movs	r0, #50	@ 0x32
 8006790:	f000 fc96 	bl	80070c0 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 8006794:	1cfb      	adds	r3, r7, #3
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d009      	beq.n	80067b0 <SX1276Send+0x74>
 800679c:	1cfb      	adds	r3, r7, #3
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	2b40      	cmp	r3, #64	@ 0x40
 80067a2:	d805      	bhi.n	80067b0 <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 80067a4:	1cfb      	adds	r3, r7, #3
 80067a6:	7819      	ldrb	r1, [r3, #0]
 80067a8:	4b41      	ldr	r3, [pc, #260]	@ (80068b0 <SX1276Send+0x174>)
 80067aa:	223f      	movs	r2, #63	@ 0x3f
 80067ac:	5499      	strb	r1, [r3, r2]
 80067ae:	e00b      	b.n	80067c8 <SX1276Send+0x8c>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 80067b0:	1cfb      	adds	r3, r7, #3
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	001a      	movs	r2, r3
 80067b6:	6879      	ldr	r1, [r7, #4]
 80067b8:	4b3e      	ldr	r3, [pc, #248]	@ (80068b4 <SX1276Send+0x178>)
 80067ba:	0018      	movs	r0, r3
 80067bc:	f00e fedc 	bl	8015578 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 80067c0:	4b3b      	ldr	r3, [pc, #236]	@ (80068b0 <SX1276Send+0x174>)
 80067c2:	223f      	movs	r2, #63	@ 0x3f
 80067c4:	2120      	movs	r1, #32
 80067c6:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 80067c8:	4b39      	ldr	r3, [pc, #228]	@ (80068b0 <SX1276Send+0x174>)
 80067ca:	223f      	movs	r2, #63	@ 0x3f
 80067cc:	5c9a      	ldrb	r2, [r3, r2]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	0011      	movs	r1, r2
 80067d2:	0018      	movs	r0, r3
 80067d4:	f000 fd21 	bl	800721a <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80067d8:	4b35      	ldr	r3, [pc, #212]	@ (80068b0 <SX1276Send+0x174>)
 80067da:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80067dc:	4a34      	ldr	r2, [pc, #208]	@ (80068b0 <SX1276Send+0x174>)
 80067de:	213f      	movs	r1, #63	@ 0x3f
 80067e0:	5c52      	ldrb	r2, [r2, r1]
 80067e2:	189b      	adds	r3, r3, r2
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	4b32      	ldr	r3, [pc, #200]	@ (80068b0 <SX1276Send+0x174>)
 80067e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 80067ea:	4b31      	ldr	r3, [pc, #196]	@ (80068b0 <SX1276Send+0x174>)
 80067ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ee:	60fb      	str	r3, [r7, #12]
        }
        break;
 80067f0:	e056      	b.n	80068a0 <SX1276Send+0x164>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 80067f2:	4b2f      	ldr	r3, [pc, #188]	@ (80068b0 <SX1276Send+0x174>)
 80067f4:	2255      	movs	r2, #85	@ 0x55
 80067f6:	5c9b      	ldrb	r3, [r3, r2]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d011      	beq.n	8006820 <SX1276Send+0xe4>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 80067fc:	2033      	movs	r0, #51	@ 0x33
 80067fe:	f000 fc73 	bl	80070e8 <SX1276Read>
 8006802:	0003      	movs	r3, r0
 8006804:	001a      	movs	r2, r3
 8006806:	2341      	movs	r3, #65	@ 0x41
 8006808:	439a      	bics	r2, r3
 800680a:	0013      	movs	r3, r2
 800680c:	b2db      	uxtb	r3, r3
 800680e:	0019      	movs	r1, r3
 8006810:	2033      	movs	r0, #51	@ 0x33
 8006812:	f000 fc55 	bl	80070c0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8006816:	2119      	movs	r1, #25
 8006818:	203b      	movs	r0, #59	@ 0x3b
 800681a:	f000 fc51 	bl	80070c0 <SX1276Write>
 800681e:	e013      	b.n	8006848 <SX1276Send+0x10c>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8006820:	2033      	movs	r0, #51	@ 0x33
 8006822:	f000 fc61 	bl	80070e8 <SX1276Read>
 8006826:	0003      	movs	r3, r0
 8006828:	b25b      	sxtb	r3, r3
 800682a:	2241      	movs	r2, #65	@ 0x41
 800682c:	4393      	bics	r3, r2
 800682e:	b25b      	sxtb	r3, r3
 8006830:	2201      	movs	r2, #1
 8006832:	4313      	orrs	r3, r2
 8006834:	b25b      	sxtb	r3, r3
 8006836:	b2db      	uxtb	r3, r3
 8006838:	0019      	movs	r1, r3
 800683a:	2033      	movs	r0, #51	@ 0x33
 800683c:	f000 fc40 	bl	80070c0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8006840:	211d      	movs	r1, #29
 8006842:	203b      	movs	r0, #59	@ 0x3b
 8006844:	f000 fc3c 	bl	80070c0 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 8006848:	1cfb      	adds	r3, r7, #3
 800684a:	7819      	ldrb	r1, [r3, #0]
 800684c:	4b18      	ldr	r3, [pc, #96]	@ (80068b0 <SX1276Send+0x174>)
 800684e:	2264      	movs	r2, #100	@ 0x64
 8006850:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8006852:	1cfb      	adds	r3, r7, #3
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	0019      	movs	r1, r3
 8006858:	2022      	movs	r0, #34	@ 0x22
 800685a:	f000 fc31 	bl	80070c0 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800685e:	2100      	movs	r1, #0
 8006860:	200e      	movs	r0, #14
 8006862:	f000 fc2d 	bl	80070c0 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8006866:	2100      	movs	r1, #0
 8006868:	200d      	movs	r0, #13
 800686a:	f000 fc29 	bl	80070c0 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800686e:	2001      	movs	r0, #1
 8006870:	f000 fc3a 	bl	80070e8 <SX1276Read>
 8006874:	0003      	movs	r3, r0
 8006876:	001a      	movs	r2, r3
 8006878:	23f8      	movs	r3, #248	@ 0xf8
 800687a:	439a      	bics	r2, r3
 800687c:	1e13      	subs	r3, r2, #0
 800687e:	d104      	bne.n	800688a <SX1276Send+0x14e>
            {
                SX1276SetStby( );
 8006880:	f000 f840 	bl	8006904 <SX1276SetStby>
                DelayMs( 1 );
 8006884:	2001      	movs	r0, #1
 8006886:	f7fc fb98 	bl	8002fba <HAL_Delay>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 800688a:	1cfb      	adds	r3, r7, #3
 800688c:	781a      	ldrb	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	0011      	movs	r1, r2
 8006892:	0018      	movs	r0, r3
 8006894:	f000 fcc1 	bl	800721a <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8006898:	4b05      	ldr	r3, [pc, #20]	@ (80068b0 <SX1276Send+0x174>)
 800689a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800689c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800689e:	46c0      	nop			@ (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	0018      	movs	r0, r3
 80068a4:	f000 f9dc 	bl	8006c60 <SX1276SetTx>
}
 80068a8:	46c0      	nop			@ (mov r8, r8)
 80068aa:	46bd      	mov	sp, r7
 80068ac:	b004      	add	sp, #16
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	200004c8 	.word	0x200004c8
 80068b4:	200003c4 	.word	0x200003c4

080068b8 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 80068bc:	4b0c      	ldr	r3, [pc, #48]	@ (80068f0 <SX1276SetSleep+0x38>)
 80068be:	0018      	movs	r0, r3
 80068c0:	f00e fbdc 	bl	801507c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80068c4:	4b0b      	ldr	r3, [pc, #44]	@ (80068f4 <SX1276SetSleep+0x3c>)
 80068c6:	0018      	movs	r0, r3
 80068c8:	f00e fbd8 	bl	801507c <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80068cc:	4b0a      	ldr	r3, [pc, #40]	@ (80068f8 <SX1276SetSleep+0x40>)
 80068ce:	0018      	movs	r0, r3
 80068d0:	f00e fbd4 	bl	801507c <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80068d4:	2000      	movs	r0, #0
 80068d6:	f000 fb49 	bl	8006f6c <SX1276SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    LoRaBoardCallbacks->SX1276BoardSetXO( RESET );
 80068da:	4b08      	ldr	r3, [pc, #32]	@ (80068fc <SX1276SetSleep+0x44>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2000      	movs	r0, #0
 80068e2:	4798      	blx	r3

    SX1276.Settings.State = RF_IDLE;
 80068e4:	4b06      	ldr	r3, [pc, #24]	@ (8006900 <SX1276SetSleep+0x48>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	711a      	strb	r2, [r3, #4]
}
 80068ea:	46c0      	nop			@ (mov r8, r8)
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	20000548 	.word	0x20000548
 80068f4:	20000530 	.word	0x20000530
 80068f8:	20000560 	.word	0x20000560
 80068fc:	200004c4 	.word	0x200004c4
 8006900:	200004c8 	.word	0x200004c8

08006904 <SX1276SetStby>:

void SX1276SetStby( void )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8006908:	4b0a      	ldr	r3, [pc, #40]	@ (8006934 <SX1276SetStby+0x30>)
 800690a:	0018      	movs	r0, r3
 800690c:	f00e fbb6 	bl	801507c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8006910:	4b09      	ldr	r3, [pc, #36]	@ (8006938 <SX1276SetStby+0x34>)
 8006912:	0018      	movs	r0, r3
 8006914:	f00e fbb2 	bl	801507c <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8006918:	4b08      	ldr	r3, [pc, #32]	@ (800693c <SX1276SetStby+0x38>)
 800691a:	0018      	movs	r0, r3
 800691c:	f00e fbae 	bl	801507c <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8006920:	2001      	movs	r0, #1
 8006922:	f000 fb23 	bl	8006f6c <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8006926:	4b06      	ldr	r3, [pc, #24]	@ (8006940 <SX1276SetStby+0x3c>)
 8006928:	2200      	movs	r2, #0
 800692a:	711a      	strb	r2, [r3, #4]
}
 800692c:	46c0      	nop			@ (mov r8, r8)
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	46c0      	nop			@ (mov r8, r8)
 8006934:	20000548 	.word	0x20000548
 8006938:	20000530 	.word	0x20000530
 800693c:	20000560 	.word	0x20000560
 8006940:	200004c8 	.word	0x200004c8

08006944 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 800694c:	230f      	movs	r3, #15
 800694e:	18fb      	adds	r3, r7, r3
 8006950:	2200      	movs	r2, #0
 8006952:	701a      	strb	r2, [r3, #0]
    TimerStop( &TxTimeoutTimer );
 8006954:	4bb6      	ldr	r3, [pc, #728]	@ (8006c30 <SX1276SetRx+0x2ec>)
 8006956:	0018      	movs	r0, r3
 8006958:	f00e fb90 	bl	801507c <TimerStop>

    switch( SX1276.Settings.Modem )
 800695c:	4bb5      	ldr	r3, [pc, #724]	@ (8006c34 <SX1276SetRx+0x2f0>)
 800695e:	795b      	ldrb	r3, [r3, #5]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d002      	beq.n	800696a <SX1276SetRx+0x26>
 8006964:	2b01      	cmp	r3, #1
 8006966:	d041      	beq.n	80069ec <SX1276SetRx+0xa8>
 8006968:	e127      	b.n	8006bba <SX1276SetRx+0x276>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800696a:	230f      	movs	r3, #15
 800696c:	18fb      	adds	r3, r7, r3
 800696e:	4ab1      	ldr	r2, [pc, #708]	@ (8006c34 <SX1276SetRx+0x2f0>)
 8006970:	2126      	movs	r1, #38	@ 0x26
 8006972:	5c52      	ldrb	r2, [r2, r1]
 8006974:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8006976:	2040      	movs	r0, #64	@ 0x40
 8006978:	f000 fbb6 	bl	80070e8 <SX1276Read>
 800697c:	0003      	movs	r3, r0
 800697e:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8006980:	2203      	movs	r2, #3
 8006982:	4013      	ands	r3, r2
 8006984:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 8006986:	220c      	movs	r2, #12
 8006988:	4313      	orrs	r3, r2
 800698a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800698c:	b2db      	uxtb	r3, r3
 800698e:	0019      	movs	r1, r3
 8006990:	2040      	movs	r0, #64	@ 0x40
 8006992:	f000 fb95 	bl	80070c0 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8006996:	2041      	movs	r0, #65	@ 0x41
 8006998:	f000 fba6 	bl	80070e8 <SX1276Read>
 800699c:	0003      	movs	r3, r0
 800699e:	001a      	movs	r2, r3
 80069a0:	233f      	movs	r3, #63	@ 0x3f
 80069a2:	425b      	negs	r3, r3
 80069a4:	4313      	orrs	r3, r2
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	0019      	movs	r1, r3
 80069aa:	2041      	movs	r0, #65	@ 0x41
 80069ac:	f000 fb88 	bl	80070c0 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 80069b0:	2035      	movs	r0, #53	@ 0x35
 80069b2:	f000 fb99 	bl	80070e8 <SX1276Read>
 80069b6:	0003      	movs	r3, r0
 80069b8:	001a      	movs	r2, r3
 80069ba:	233f      	movs	r3, #63	@ 0x3f
 80069bc:	4013      	ands	r3, r2
 80069be:	b2d9      	uxtb	r1, r3
 80069c0:	4b9c      	ldr	r3, [pc, #624]	@ (8006c34 <SX1276SetRx+0x2f0>)
 80069c2:	223e      	movs	r2, #62	@ 0x3e
 80069c4:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 80069c6:	211e      	movs	r1, #30
 80069c8:	200d      	movs	r0, #13
 80069ca:	f000 fb79 	bl	80070c0 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80069ce:	4b99      	ldr	r3, [pc, #612]	@ (8006c34 <SX1276SetRx+0x2f0>)
 80069d0:	2230      	movs	r2, #48	@ 0x30
 80069d2:	2100      	movs	r1, #0
 80069d4:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80069d6:	4b97      	ldr	r3, [pc, #604]	@ (8006c34 <SX1276SetRx+0x2f0>)
 80069d8:	2231      	movs	r2, #49	@ 0x31
 80069da:	2100      	movs	r1, #0
 80069dc:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80069de:	4b95      	ldr	r3, [pc, #596]	@ (8006c34 <SX1276SetRx+0x2f0>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 80069e4:	4b93      	ldr	r3, [pc, #588]	@ (8006c34 <SX1276SetRx+0x2f0>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	875a      	strh	r2, [r3, #58]	@ 0x3a
        }
        break;
 80069ea:	e0e6      	b.n	8006bba <SX1276SetRx+0x276>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 80069ec:	4b91      	ldr	r3, [pc, #580]	@ (8006c34 <SX1276SetRx+0x2f0>)
 80069ee:	2255      	movs	r2, #85	@ 0x55
 80069f0:	5c9b      	ldrb	r3, [r3, r2]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d010      	beq.n	8006a18 <SX1276SetRx+0xd4>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 80069f6:	2033      	movs	r0, #51	@ 0x33
 80069f8:	f000 fb76 	bl	80070e8 <SX1276Read>
 80069fc:	0003      	movs	r3, r0
 80069fe:	001a      	movs	r2, r3
 8006a00:	2341      	movs	r3, #65	@ 0x41
 8006a02:	4313      	orrs	r3, r2
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	0019      	movs	r1, r3
 8006a08:	2033      	movs	r0, #51	@ 0x33
 8006a0a:	f000 fb59 	bl	80070c0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8006a0e:	2119      	movs	r1, #25
 8006a10:	203b      	movs	r0, #59	@ 0x3b
 8006a12:	f000 fb55 	bl	80070c0 <SX1276Write>
 8006a16:	e013      	b.n	8006a40 <SX1276SetRx+0xfc>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8006a18:	2033      	movs	r0, #51	@ 0x33
 8006a1a:	f000 fb65 	bl	80070e8 <SX1276Read>
 8006a1e:	0003      	movs	r3, r0
 8006a20:	b25b      	sxtb	r3, r3
 8006a22:	2241      	movs	r2, #65	@ 0x41
 8006a24:	4393      	bics	r3, r2
 8006a26:	b25b      	sxtb	r3, r3
 8006a28:	2201      	movs	r2, #1
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	b25b      	sxtb	r3, r3
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	0019      	movs	r1, r3
 8006a32:	2033      	movs	r0, #51	@ 0x33
 8006a34:	f000 fb44 	bl	80070c0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8006a38:	211d      	movs	r1, #29
 8006a3a:	203b      	movs	r0, #59	@ 0x3b
 8006a3c:	f000 fb40 	bl	80070c0 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8006a40:	4b7c      	ldr	r3, [pc, #496]	@ (8006c34 <SX1276SetRx+0x2f0>)
 8006a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a44:	2b08      	cmp	r3, #8
 8006a46:	d900      	bls.n	8006a4a <SX1276SetRx+0x106>
 8006a48:	e075      	b.n	8006b36 <SX1276SetRx+0x1f2>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8006a4a:	2031      	movs	r0, #49	@ 0x31
 8006a4c:	f000 fb4c 	bl	80070e8 <SX1276Read>
 8006a50:	0003      	movs	r3, r0
 8006a52:	001a      	movs	r2, r3
 8006a54:	237f      	movs	r3, #127	@ 0x7f
 8006a56:	4013      	ands	r3, r2
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	0019      	movs	r1, r3
 8006a5c:	2031      	movs	r0, #49	@ 0x31
 8006a5e:	f000 fb2f 	bl	80070c0 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8006a62:	2100      	movs	r1, #0
 8006a64:	2030      	movs	r0, #48	@ 0x30
 8006a66:	f000 fb2b 	bl	80070c0 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8006a6a:	4b72      	ldr	r3, [pc, #456]	@ (8006c34 <SX1276SetRx+0x2f0>)
 8006a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a6e:	2b08      	cmp	r3, #8
 8006a70:	d86e      	bhi.n	8006b50 <SX1276SetRx+0x20c>
 8006a72:	009a      	lsls	r2, r3, #2
 8006a74:	4b70      	ldr	r3, [pc, #448]	@ (8006c38 <SX1276SetRx+0x2f4>)
 8006a76:	18d3      	adds	r3, r2, r3
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8006a7c:	2148      	movs	r1, #72	@ 0x48
 8006a7e:	202f      	movs	r0, #47	@ 0x2f
 8006a80:	f000 fb1e 	bl	80070c0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8006a84:	4b6b      	ldr	r3, [pc, #428]	@ (8006c34 <SX1276SetRx+0x2f0>)
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	4a6c      	ldr	r2, [pc, #432]	@ (8006c3c <SX1276SetRx+0x2f8>)
 8006a8a:	4694      	mov	ip, r2
 8006a8c:	4463      	add	r3, ip
 8006a8e:	0018      	movs	r0, r3
 8006a90:	f7fe feaa 	bl	80057e8 <SX1276SetChannel>
                    break;
 8006a94:	e05c      	b.n	8006b50 <SX1276SetRx+0x20c>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006a96:	2144      	movs	r1, #68	@ 0x44
 8006a98:	202f      	movs	r0, #47	@ 0x2f
 8006a9a:	f000 fb11 	bl	80070c0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8006a9e:	4b65      	ldr	r3, [pc, #404]	@ (8006c34 <SX1276SetRx+0x2f0>)
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	4a67      	ldr	r2, [pc, #412]	@ (8006c40 <SX1276SetRx+0x2fc>)
 8006aa4:	4694      	mov	ip, r2
 8006aa6:	4463      	add	r3, ip
 8006aa8:	0018      	movs	r0, r3
 8006aaa:	f7fe fe9d 	bl	80057e8 <SX1276SetChannel>
                    break;
 8006aae:	e04f      	b.n	8006b50 <SX1276SetRx+0x20c>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006ab0:	2144      	movs	r1, #68	@ 0x44
 8006ab2:	202f      	movs	r0, #47	@ 0x2f
 8006ab4:	f000 fb04 	bl	80070c0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8006ab8:	4b5e      	ldr	r3, [pc, #376]	@ (8006c34 <SX1276SetRx+0x2f0>)
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	4a61      	ldr	r2, [pc, #388]	@ (8006c44 <SX1276SetRx+0x300>)
 8006abe:	4694      	mov	ip, r2
 8006ac0:	4463      	add	r3, ip
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	f7fe fe90 	bl	80057e8 <SX1276SetChannel>
                    break;
 8006ac8:	e042      	b.n	8006b50 <SX1276SetRx+0x20c>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006aca:	2144      	movs	r1, #68	@ 0x44
 8006acc:	202f      	movs	r0, #47	@ 0x2f
 8006ace:	f000 faf7 	bl	80070c0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8006ad2:	4b58      	ldr	r3, [pc, #352]	@ (8006c34 <SX1276SetRx+0x2f0>)
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	4a5c      	ldr	r2, [pc, #368]	@ (8006c48 <SX1276SetRx+0x304>)
 8006ad8:	4694      	mov	ip, r2
 8006ada:	4463      	add	r3, ip
 8006adc:	0018      	movs	r0, r3
 8006ade:	f7fe fe83 	bl	80057e8 <SX1276SetChannel>
                    break;
 8006ae2:	e035      	b.n	8006b50 <SX1276SetRx+0x20c>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006ae4:	2144      	movs	r1, #68	@ 0x44
 8006ae6:	202f      	movs	r0, #47	@ 0x2f
 8006ae8:	f000 faea 	bl	80070c0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8006aec:	4b51      	ldr	r3, [pc, #324]	@ (8006c34 <SX1276SetRx+0x2f0>)
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	4a56      	ldr	r2, [pc, #344]	@ (8006c4c <SX1276SetRx+0x308>)
 8006af2:	4694      	mov	ip, r2
 8006af4:	4463      	add	r3, ip
 8006af6:	0018      	movs	r0, r3
 8006af8:	f7fe fe76 	bl	80057e8 <SX1276SetChannel>
                    break;
 8006afc:	e028      	b.n	8006b50 <SX1276SetRx+0x20c>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006afe:	2144      	movs	r1, #68	@ 0x44
 8006b00:	202f      	movs	r0, #47	@ 0x2f
 8006b02:	f000 fadd 	bl	80070c0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8006b06:	4b4b      	ldr	r3, [pc, #300]	@ (8006c34 <SX1276SetRx+0x2f0>)
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	4a51      	ldr	r2, [pc, #324]	@ (8006c50 <SX1276SetRx+0x30c>)
 8006b0c:	4694      	mov	ip, r2
 8006b0e:	4463      	add	r3, ip
 8006b10:	0018      	movs	r0, r3
 8006b12:	f7fe fe69 	bl	80057e8 <SX1276SetChannel>
                    break;
 8006b16:	e01b      	b.n	8006b50 <SX1276SetRx+0x20c>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8006b18:	2140      	movs	r1, #64	@ 0x40
 8006b1a:	202f      	movs	r0, #47	@ 0x2f
 8006b1c:	f000 fad0 	bl	80070c0 <SX1276Write>
                    break;
 8006b20:	e016      	b.n	8006b50 <SX1276SetRx+0x20c>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8006b22:	2140      	movs	r1, #64	@ 0x40
 8006b24:	202f      	movs	r0, #47	@ 0x2f
 8006b26:	f000 facb 	bl	80070c0 <SX1276Write>
                    break;
 8006b2a:	e011      	b.n	8006b50 <SX1276SetRx+0x20c>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8006b2c:	2140      	movs	r1, #64	@ 0x40
 8006b2e:	202f      	movs	r0, #47	@ 0x2f
 8006b30:	f000 fac6 	bl	80070c0 <SX1276Write>
                    break;
 8006b34:	e00c      	b.n	8006b50 <SX1276SetRx+0x20c>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8006b36:	2031      	movs	r0, #49	@ 0x31
 8006b38:	f000 fad6 	bl	80070e8 <SX1276Read>
 8006b3c:	0003      	movs	r3, r0
 8006b3e:	001a      	movs	r2, r3
 8006b40:	2380      	movs	r3, #128	@ 0x80
 8006b42:	425b      	negs	r3, r3
 8006b44:	4313      	orrs	r3, r2
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	0019      	movs	r1, r3
 8006b4a:	2031      	movs	r0, #49	@ 0x31
 8006b4c:	f000 fab8 	bl	80070c0 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8006b50:	230f      	movs	r3, #15
 8006b52:	18fb      	adds	r3, r7, r3
 8006b54:	4a37      	ldr	r2, [pc, #220]	@ (8006c34 <SX1276SetRx+0x2f0>)
 8006b56:	2156      	movs	r1, #86	@ 0x56
 8006b58:	5c52      	ldrb	r2, [r2, r1]
 8006b5a:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006b5c:	4b35      	ldr	r3, [pc, #212]	@ (8006c34 <SX1276SetRx+0x2f0>)
 8006b5e:	2253      	movs	r2, #83	@ 0x53
 8006b60:	5c9b      	ldrb	r3, [r3, r2]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d010      	beq.n	8006b88 <SX1276SetRx+0x244>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8006b66:	211d      	movs	r1, #29
 8006b68:	2011      	movs	r0, #17
 8006b6a:	f000 faa9 	bl	80070c0 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8006b6e:	2040      	movs	r0, #64	@ 0x40
 8006b70:	f000 faba 	bl	80070e8 <SX1276Read>
 8006b74:	0003      	movs	r3, r0
 8006b76:	001a      	movs	r2, r3
 8006b78:	2333      	movs	r3, #51	@ 0x33
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	0019      	movs	r1, r3
 8006b80:	2040      	movs	r0, #64	@ 0x40
 8006b82:	f000 fa9d 	bl	80070c0 <SX1276Write>
 8006b86:	e00f      	b.n	8006ba8 <SX1276SetRx+0x264>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8006b88:	211f      	movs	r1, #31
 8006b8a:	2011      	movs	r0, #17
 8006b8c:	f000 fa98 	bl	80070c0 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8006b90:	2040      	movs	r0, #64	@ 0x40
 8006b92:	f000 faa9 	bl	80070e8 <SX1276Read>
 8006b96:	0003      	movs	r3, r0
 8006b98:	001a      	movs	r2, r3
 8006b9a:	233f      	movs	r3, #63	@ 0x3f
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	0019      	movs	r1, r3
 8006ba2:	2040      	movs	r0, #64	@ 0x40
 8006ba4:	f000 fa8c 	bl	80070c0 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8006ba8:	2100      	movs	r1, #0
 8006baa:	200f      	movs	r0, #15
 8006bac:	f000 fa88 	bl	80070c0 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	200d      	movs	r0, #13
 8006bb4:	f000 fa84 	bl	80070c0 <SX1276Write>
        }
        break;
 8006bb8:	46c0      	nop			@ (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8006bba:	2380      	movs	r3, #128	@ 0x80
 8006bbc:	005a      	lsls	r2, r3, #1
 8006bbe:	4b25      	ldr	r3, [pc, #148]	@ (8006c54 <SX1276SetRx+0x310>)
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	f012 fef2 	bl	80199ac <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 8006bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8006c34 <SX1276SetRx+0x2f0>)
 8006bca:	2201      	movs	r2, #1
 8006bcc:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d009      	beq.n	8006be8 <SX1276SetRx+0x2a4>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	4b20      	ldr	r3, [pc, #128]	@ (8006c58 <SX1276SetRx+0x314>)
 8006bd8:	0011      	movs	r1, r2
 8006bda:	0018      	movs	r0, r3
 8006bdc:	f00e facc 	bl	8015178 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8006be0:	4b1d      	ldr	r3, [pc, #116]	@ (8006c58 <SX1276SetRx+0x314>)
 8006be2:	0018      	movs	r0, r3
 8006be4:	f00e f96c 	bl	8014ec0 <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 8006be8:	4b12      	ldr	r3, [pc, #72]	@ (8006c34 <SX1276SetRx+0x2f0>)
 8006bea:	795b      	ldrb	r3, [r3, #5]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10e      	bne.n	8006c0e <SX1276SetRx+0x2ca>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8006bf0:	2005      	movs	r0, #5
 8006bf2:	f000 f9bb 	bl	8006f6c <SX1276SetOpMode>

        TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8006bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8006c34 <SX1276SetRx+0x2f0>)
 8006bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bfa:	4b18      	ldr	r3, [pc, #96]	@ (8006c5c <SX1276SetRx+0x318>)
 8006bfc:	0011      	movs	r1, r2
 8006bfe:	0018      	movs	r0, r3
 8006c00:	f00e faba 	bl	8015178 <TimerSetValue>
        TimerStart( &RxTimeoutSyncWord );
 8006c04:	4b15      	ldr	r3, [pc, #84]	@ (8006c5c <SX1276SetRx+0x318>)
 8006c06:	0018      	movs	r0, r3
 8006c08:	f00e f95a 	bl	8014ec0 <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 8006c0c:	e00b      	b.n	8006c26 <SX1276SetRx+0x2e2>
        if( rxContinuous == true )
 8006c0e:	230f      	movs	r3, #15
 8006c10:	18fb      	adds	r3, r7, r3
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <SX1276SetRx+0x2dc>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8006c18:	2005      	movs	r0, #5
 8006c1a:	f000 f9a7 	bl	8006f6c <SX1276SetOpMode>
}
 8006c1e:	e002      	b.n	8006c26 <SX1276SetRx+0x2e2>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8006c20:	2006      	movs	r0, #6
 8006c22:	f000 f9a3 	bl	8006f6c <SX1276SetOpMode>
}
 8006c26:	46c0      	nop			@ (mov r8, r8)
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	b004      	add	sp, #16
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	46c0      	nop			@ (mov r8, r8)
 8006c30:	20000530 	.word	0x20000530
 8006c34:	200004c8 	.word	0x200004c8
 8006c38:	0801addc 	.word	0x0801addc
 8006c3c:	00001e82 	.word	0x00001e82
 8006c40:	000028b4 	.word	0x000028b4
 8006c44:	00003d04 	.word	0x00003d04
 8006c48:	0000515e 	.word	0x0000515e
 8006c4c:	00007a12 	.word	0x00007a12
 8006c50:	0000a2c6 	.word	0x0000a2c6
 8006c54:	200003c4 	.word	0x200003c4
 8006c58:	20000548 	.word	0x20000548
 8006c5c:	20000560 	.word	0x20000560

08006c60 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 8006c68:	4b3a      	ldr	r3, [pc, #232]	@ (8006d54 <SX1276SetTx+0xf4>)
 8006c6a:	0018      	movs	r0, r3
 8006c6c:	f00e fa06 	bl	801507c <TimerStop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	4b39      	ldr	r3, [pc, #228]	@ (8006d58 <SX1276SetTx+0xf8>)
 8006c74:	0011      	movs	r1, r2
 8006c76:	0018      	movs	r0, r3
 8006c78:	f00e fa7e 	bl	8015178 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 8006c7c:	4b37      	ldr	r3, [pc, #220]	@ (8006d5c <SX1276SetTx+0xfc>)
 8006c7e:	795b      	ldrb	r3, [r3, #5]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <SX1276SetTx+0x2a>
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d028      	beq.n	8006cda <SX1276SetTx+0x7a>
 8006c88:	e056      	b.n	8006d38 <SX1276SetTx+0xd8>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8006c8a:	2040      	movs	r0, #64	@ 0x40
 8006c8c:	f000 fa2c 	bl	80070e8 <SX1276Read>
 8006c90:	0003      	movs	r3, r0
 8006c92:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 8006c94:	2203      	movs	r2, #3
 8006c96:	4013      	ands	r3, r2
 8006c98:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 8006c9a:	2210      	movs	r2, #16
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	0019      	movs	r1, r3
 8006ca4:	2040      	movs	r0, #64	@ 0x40
 8006ca6:	f000 fa0b 	bl	80070c0 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8006caa:	2041      	movs	r0, #65	@ 0x41
 8006cac:	f000 fa1c 	bl	80070e8 <SX1276Read>
 8006cb0:	0003      	movs	r3, r0
 8006cb2:	001a      	movs	r2, r3
 8006cb4:	233e      	movs	r3, #62	@ 0x3e
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	0019      	movs	r1, r3
 8006cbc:	2041      	movs	r0, #65	@ 0x41
 8006cbe:	f000 f9ff 	bl	80070c0 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8006cc2:	2035      	movs	r0, #53	@ 0x35
 8006cc4:	f000 fa10 	bl	80070e8 <SX1276Read>
 8006cc8:	0003      	movs	r3, r0
 8006cca:	001a      	movs	r2, r3
 8006ccc:	233f      	movs	r3, #63	@ 0x3f
 8006cce:	4013      	ands	r3, r2
 8006cd0:	b2d9      	uxtb	r1, r3
 8006cd2:	4b22      	ldr	r3, [pc, #136]	@ (8006d5c <SX1276SetTx+0xfc>)
 8006cd4:	223e      	movs	r2, #62	@ 0x3e
 8006cd6:	5499      	strb	r1, [r3, r2]
        }
        break;
 8006cd8:	e02e      	b.n	8006d38 <SX1276SetTx+0xd8>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006cda:	4b20      	ldr	r3, [pc, #128]	@ (8006d5c <SX1276SetTx+0xfc>)
 8006cdc:	2253      	movs	r2, #83	@ 0x53
 8006cde:	5c9b      	ldrb	r3, [r3, r2]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d014      	beq.n	8006d0e <SX1276SetTx+0xae>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8006ce4:	21f5      	movs	r1, #245	@ 0xf5
 8006ce6:	2011      	movs	r0, #17
 8006ce8:	f000 f9ea 	bl	80070c0 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8006cec:	2040      	movs	r0, #64	@ 0x40
 8006cee:	f000 f9fb 	bl	80070e8 <SX1276Read>
 8006cf2:	0003      	movs	r3, r0
 8006cf4:	b25b      	sxtb	r3, r3
 8006cf6:	2233      	movs	r2, #51	@ 0x33
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	b25b      	sxtb	r3, r3
 8006cfc:	2240      	movs	r2, #64	@ 0x40
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	b25b      	sxtb	r3, r3
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	0019      	movs	r1, r3
 8006d06:	2040      	movs	r0, #64	@ 0x40
 8006d08:	f000 f9da 	bl	80070c0 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 8006d0c:	e013      	b.n	8006d36 <SX1276SetTx+0xd6>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8006d0e:	21f7      	movs	r1, #247	@ 0xf7
 8006d10:	2011      	movs	r0, #17
 8006d12:	f000 f9d5 	bl	80070c0 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8006d16:	2040      	movs	r0, #64	@ 0x40
 8006d18:	f000 f9e6 	bl	80070e8 <SX1276Read>
 8006d1c:	0003      	movs	r3, r0
 8006d1e:	b25b      	sxtb	r3, r3
 8006d20:	223f      	movs	r2, #63	@ 0x3f
 8006d22:	4013      	ands	r3, r2
 8006d24:	b25b      	sxtb	r3, r3
 8006d26:	2240      	movs	r2, #64	@ 0x40
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	b25b      	sxtb	r3, r3
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	0019      	movs	r1, r3
 8006d30:	2040      	movs	r0, #64	@ 0x40
 8006d32:	f000 f9c5 	bl	80070c0 <SX1276Write>
        break;
 8006d36:	46c0      	nop			@ (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 8006d38:	4b08      	ldr	r3, [pc, #32]	@ (8006d5c <SX1276SetTx+0xfc>)
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8006d3e:	4b06      	ldr	r3, [pc, #24]	@ (8006d58 <SX1276SetTx+0xf8>)
 8006d40:	0018      	movs	r0, r3
 8006d42:	f00e f8bd 	bl	8014ec0 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8006d46:	2003      	movs	r0, #3
 8006d48:	f000 f910 	bl	8006f6c <SX1276SetOpMode>
}
 8006d4c:	46c0      	nop			@ (mov r8, r8)
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	b002      	add	sp, #8
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	20000548 	.word	0x20000548
 8006d58:	20000530 	.word	0x20000530
 8006d5c:	200004c8 	.word	0x200004c8

08006d60 <SX1276StartCad>:

void SX1276StartCad( void )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 8006d64:	4b11      	ldr	r3, [pc, #68]	@ (8006dac <SX1276StartCad+0x4c>)
 8006d66:	795b      	ldrb	r3, [r3, #5]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d01a      	beq.n	8006da2 <SX1276StartCad+0x42>
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d000      	beq.n	8006d72 <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 8006d70:	e018      	b.n	8006da4 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8006d72:	21fa      	movs	r1, #250	@ 0xfa
 8006d74:	2011      	movs	r0, #17
 8006d76:	f000 f9a3 	bl	80070c0 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8006d7a:	2040      	movs	r0, #64	@ 0x40
 8006d7c:	f000 f9b4 	bl	80070e8 <SX1276Read>
 8006d80:	0003      	movs	r3, r0
 8006d82:	001a      	movs	r2, r3
 8006d84:	2303      	movs	r3, #3
 8006d86:	439a      	bics	r2, r3
 8006d88:	0013      	movs	r3, r2
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	0019      	movs	r1, r3
 8006d8e:	2040      	movs	r0, #64	@ 0x40
 8006d90:	f000 f996 	bl	80070c0 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8006d94:	4b05      	ldr	r3, [pc, #20]	@ (8006dac <SX1276StartCad+0x4c>)
 8006d96:	2203      	movs	r2, #3
 8006d98:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8006d9a:	2007      	movs	r0, #7
 8006d9c:	f000 f8e6 	bl	8006f6c <SX1276SetOpMode>
        break;
 8006da0:	e000      	b.n	8006da4 <SX1276StartCad+0x44>
        break;
 8006da2:	46c0      	nop			@ (mov r8, r8)
    }
}
 8006da4:	46c0      	nop			@ (mov r8, r8)
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	46c0      	nop			@ (mov r8, r8)
 8006dac:	200004c8 	.word	0x200004c8

08006db0 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08e      	sub	sp, #56	@ 0x38
 8006db4:	af0a      	add	r7, sp, #40	@ 0x28
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	0008      	movs	r0, r1
 8006dba:	0011      	movs	r1, r2
 8006dbc:	1cfb      	adds	r3, r7, #3
 8006dbe:	1c02      	adds	r2, r0, #0
 8006dc0:	701a      	strb	r2, [r3, #0]
 8006dc2:	003b      	movs	r3, r7
 8006dc4:	1c0a      	adds	r2, r1, #0
 8006dc6:	801a      	strh	r2, [r3, #0]
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8006dc8:	003b      	movs	r3, r7
 8006dca:	881a      	ldrh	r2, [r3, #0]
 8006dcc:	0013      	movs	r3, r2
 8006dce:	015b      	lsls	r3, r3, #5
 8006dd0:	1a9b      	subs	r3, r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	189b      	adds	r3, r3, r2
 8006dd6:	00db      	lsls	r3, r3, #3
 8006dd8:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	0018      	movs	r0, r3
 8006dde:	f7fe fd03 	bl	80057e8 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8006de2:	1cfb      	adds	r3, r7, #3
 8006de4:	2100      	movs	r1, #0
 8006de6:	5659      	ldrsb	r1, [r3, r1]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	9308      	str	r3, [sp, #32]
 8006dec:	2300      	movs	r3, #0
 8006dee:	9307      	str	r3, [sp, #28]
 8006df0:	2300      	movs	r3, #0
 8006df2:	9306      	str	r3, [sp, #24]
 8006df4:	2300      	movs	r3, #0
 8006df6:	9305      	str	r3, [sp, #20]
 8006df8:	2300      	movs	r3, #0
 8006dfa:	9304      	str	r3, [sp, #16]
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	9303      	str	r3, [sp, #12]
 8006e00:	2305      	movs	r3, #5
 8006e02:	9302      	str	r3, [sp, #8]
 8006e04:	2300      	movs	r3, #0
 8006e06:	9301      	str	r3, [sp, #4]
 8006e08:	2396      	movs	r3, #150	@ 0x96
 8006e0a:	015b      	lsls	r3, r3, #5
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	2200      	movs	r2, #0
 8006e12:	2000      	movs	r0, #0
 8006e14:	f7ff f8e6 	bl	8005fe4 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8006e18:	2031      	movs	r0, #49	@ 0x31
 8006e1a:	f000 f965 	bl	80070e8 <SX1276Read>
 8006e1e:	0003      	movs	r3, r0
 8006e20:	001a      	movs	r2, r3
 8006e22:	2340      	movs	r3, #64	@ 0x40
 8006e24:	439a      	bics	r2, r3
 8006e26:	0013      	movs	r3, r2
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	0019      	movs	r1, r3
 8006e2c:	2031      	movs	r0, #49	@ 0x31
 8006e2e:	f000 f947 	bl	80070c0 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8006e32:	21f0      	movs	r1, #240	@ 0xf0
 8006e34:	2040      	movs	r0, #64	@ 0x40
 8006e36:	f000 f943 	bl	80070c0 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8006e3a:	21a0      	movs	r1, #160	@ 0xa0
 8006e3c:	2041      	movs	r0, #65	@ 0x41
 8006e3e:	f000 f93f 	bl	80070c0 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	4b09      	ldr	r3, [pc, #36]	@ (8006e6c <SX1276SetTxContinuousWave+0xbc>)
 8006e46:	0011      	movs	r1, r2
 8006e48:	0018      	movs	r0, r3
 8006e4a:	f00e f995 	bl	8015178 <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING;
 8006e4e:	4b08      	ldr	r3, [pc, #32]	@ (8006e70 <SX1276SetTxContinuousWave+0xc0>)
 8006e50:	2202      	movs	r2, #2
 8006e52:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8006e54:	4b05      	ldr	r3, [pc, #20]	@ (8006e6c <SX1276SetTxContinuousWave+0xbc>)
 8006e56:	0018      	movs	r0, r3
 8006e58:	f00e f832 	bl	8014ec0 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8006e5c:	2003      	movs	r0, #3
 8006e5e:	f000 f885 	bl	8006f6c <SX1276SetOpMode>
}
 8006e62:	46c0      	nop			@ (mov r8, r8)
 8006e64:	46bd      	mov	sp, r7
 8006e66:	b004      	add	sp, #16
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	46c0      	nop			@ (mov r8, r8)
 8006e6c:	20000530 	.word	0x20000530
 8006e70:	200004c8 	.word	0x200004c8

08006e74 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	0002      	movs	r2, r0
 8006e7c:	1dfb      	adds	r3, r7, #7
 8006e7e:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 8006e80:	230e      	movs	r3, #14
 8006e82:	18fb      	adds	r3, r7, r3
 8006e84:	2200      	movs	r2, #0
 8006e86:	801a      	strh	r2, [r3, #0]

    switch( modem )
 8006e88:	1dfb      	adds	r3, r7, #7
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <SX1276ReadRssi+0x22>
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d00c      	beq.n	8006eae <SX1276ReadRssi+0x3a>
 8006e94:	e024      	b.n	8006ee0 <SX1276ReadRssi+0x6c>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8006e96:	2011      	movs	r0, #17
 8006e98:	f000 f926 	bl	80070e8 <SX1276Read>
 8006e9c:	0003      	movs	r3, r0
 8006e9e:	085b      	lsrs	r3, r3, #1
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	425b      	negs	r3, r3
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	230e      	movs	r3, #14
 8006ea8:	18fb      	adds	r3, r7, r3
 8006eaa:	801a      	strh	r2, [r3, #0]
        break;
 8006eac:	e01e      	b.n	8006eec <SX1276ReadRssi+0x78>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006eae:	4b13      	ldr	r3, [pc, #76]	@ (8006efc <SX1276ReadRssi+0x88>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	4a13      	ldr	r2, [pc, #76]	@ (8006f00 <SX1276ReadRssi+0x8c>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d909      	bls.n	8006ecc <SX1276ReadRssi+0x58>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8006eb8:	201b      	movs	r0, #27
 8006eba:	f000 f915 	bl	80070e8 <SX1276Read>
 8006ebe:	0003      	movs	r3, r0
 8006ec0:	3b9d      	subs	r3, #157	@ 0x9d
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	230e      	movs	r3, #14
 8006ec6:	18fb      	adds	r3, r7, r3
 8006ec8:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 8006eca:	e00f      	b.n	8006eec <SX1276ReadRssi+0x78>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8006ecc:	201b      	movs	r0, #27
 8006ece:	f000 f90b 	bl	80070e8 <SX1276Read>
 8006ed2:	0003      	movs	r3, r0
 8006ed4:	3ba4      	subs	r3, #164	@ 0xa4
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	230e      	movs	r3, #14
 8006eda:	18fb      	adds	r3, r7, r3
 8006edc:	801a      	strh	r2, [r3, #0]
        break;
 8006ede:	e005      	b.n	8006eec <SX1276ReadRssi+0x78>
    default:
        rssi = -1;
 8006ee0:	230e      	movs	r3, #14
 8006ee2:	18fb      	adds	r3, r7, r3
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	4252      	negs	r2, r2
 8006ee8:	801a      	strh	r2, [r3, #0]
        break;
 8006eea:	46c0      	nop			@ (mov r8, r8)
    }
    return rssi;
 8006eec:	230e      	movs	r3, #14
 8006eee:	18fb      	adds	r3, r7, r3
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	5e9b      	ldrsh	r3, [r3, r2]
}
 8006ef4:	0018      	movs	r0, r3
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	b004      	add	sp, #16
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	200004c8 	.word	0x200004c8
 8006f00:	1f4add40 	.word	0x1f4add40

08006f04 <SX1276Reset>:

void SX1276Reset( void )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initStruct = { 0 };
 8006f0a:	1d3b      	adds	r3, r7, #4
 8006f0c:	0018      	movs	r0, r3
 8006f0e:	2314      	movs	r3, #20
 8006f10:	001a      	movs	r2, r3
 8006f12:	2100      	movs	r1, #0
 8006f14:	f012 fd4a 	bl	80199ac <memset>

    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8006f18:	1d3b      	adds	r3, r7, #4
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	605a      	str	r2, [r3, #4]
    initStruct.Pull = GPIO_NOPULL;
 8006f1e:	1d3b      	adds	r3, r7, #4
 8006f20:	2200      	movs	r2, #0
 8006f22:	609a      	str	r2, [r3, #8]
    initStruct.Speed = GPIO_SPEED_HIGH;
 8006f24:	1d3b      	adds	r3, r7, #4
 8006f26:	2203      	movs	r2, #3
 8006f28:	60da      	str	r2, [r3, #12]

    // Set RESET pin to 0
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8006f2a:	1d3b      	adds	r3, r7, #4
 8006f2c:	480e      	ldr	r0, [pc, #56]	@ (8006f68 <SX1276Reset+0x64>)
 8006f2e:	001a      	movs	r2, r3
 8006f30:	2101      	movs	r1, #1
 8006f32:	f7fc fdab 	bl	8003a8c <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 8006f36:	4b0c      	ldr	r3, [pc, #48]	@ (8006f68 <SX1276Reset+0x64>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	2101      	movs	r1, #1
 8006f3c:	0018      	movs	r0, r3
 8006f3e:	f7fc fe77 	bl	8003c30 <HW_GPIO_Write>

    // Wait 1 ms
    DelayMs( 1 );
 8006f42:	2001      	movs	r0, #1
 8006f44:	f7fc f839 	bl	8002fba <HAL_Delay>

    // Configure RESET as input
    initStruct.Mode = GPIO_NOPULL;
 8006f48:	1d3b      	adds	r3, r7, #4
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	605a      	str	r2, [r3, #4]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8006f4e:	1d3b      	adds	r3, r7, #4
 8006f50:	4805      	ldr	r0, [pc, #20]	@ (8006f68 <SX1276Reset+0x64>)
 8006f52:	001a      	movs	r2, r3
 8006f54:	2101      	movs	r1, #1
 8006f56:	f7fc fd99 	bl	8003a8c <HW_GPIO_Init>

    // Wait 6 ms
    DelayMs( 6 );
 8006f5a:	2006      	movs	r0, #6
 8006f5c:	f7fc f82d 	bl	8002fba <HAL_Delay>
}
 8006f60:	46c0      	nop			@ (mov r8, r8)
 8006f62:	46bd      	mov	sp, r7
 8006f64:	b006      	add	sp, #24
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	50000800 	.word	0x50000800

08006f6c <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	0002      	movs	r2, r0
 8006f74:	1dfb      	adds	r3, r7, #7
 8006f76:	701a      	strb	r2, [r3, #0]
    if( opMode == RF_OPMODE_SLEEP )
 8006f78:	1dfb      	adds	r3, r7, #7
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d11c      	bne.n	8006fba <SX1276SetOpMode+0x4e>
    {
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8006f80:	2001      	movs	r0, #1
 8006f82:	f000 f8b1 	bl	80070e8 <SX1276Read>
 8006f86:	0003      	movs	r3, r0
 8006f88:	b25b      	sxtb	r3, r3
 8006f8a:	2207      	movs	r2, #7
 8006f8c:	4393      	bics	r3, r2
 8006f8e:	b25a      	sxtb	r2, r3
 8006f90:	1dfb      	adds	r3, r7, #7
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	b25b      	sxtb	r3, r3
 8006f96:	4313      	orrs	r3, r2
 8006f98:	b25b      	sxtb	r3, r3
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	0019      	movs	r1, r3
 8006f9e:	2001      	movs	r0, #1
 8006fa0:	f000 f88e 	bl	80070c0 <SX1276Write>
      
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 8006fa4:	4b18      	ldr	r3, [pc, #96]	@ (8007008 <SX1276SetOpMode+0x9c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	2001      	movs	r0, #1
 8006fac:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 8006fae:	4b16      	ldr	r3, [pc, #88]	@ (8007008 <SX1276SetOpMode+0x9c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
      
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 8006fb8:	e022      	b.n	8007000 <SX1276SetOpMode+0x94>
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 8006fba:	4b13      	ldr	r3, [pc, #76]	@ (8007008 <SX1276SetOpMode+0x9c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2001      	movs	r0, #1
 8006fc2:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 8006fc4:	4b10      	ldr	r3, [pc, #64]	@ (8007008 <SX1276SetOpMode+0x9c>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	2000      	movs	r0, #0
 8006fcc:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 8006fce:	4b0e      	ldr	r3, [pc, #56]	@ (8007008 <SX1276SetOpMode+0x9c>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	1dfa      	adds	r2, r7, #7
 8006fd6:	7812      	ldrb	r2, [r2, #0]
 8006fd8:	0010      	movs	r0, r2
 8006fda:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8006fdc:	2001      	movs	r0, #1
 8006fde:	f000 f883 	bl	80070e8 <SX1276Read>
 8006fe2:	0003      	movs	r3, r0
 8006fe4:	b25b      	sxtb	r3, r3
 8006fe6:	2207      	movs	r2, #7
 8006fe8:	4393      	bics	r3, r2
 8006fea:	b25a      	sxtb	r2, r3
 8006fec:	1dfb      	adds	r3, r7, #7
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	b25b      	sxtb	r3, r3
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	b25b      	sxtb	r3, r3
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	0019      	movs	r1, r3
 8006ffa:	2001      	movs	r0, #1
 8006ffc:	f000 f860 	bl	80070c0 <SX1276Write>
}
 8007000:	46c0      	nop			@ (mov r8, r8)
 8007002:	46bd      	mov	sp, r7
 8007004:	b002      	add	sp, #8
 8007006:	bd80      	pop	{r7, pc}
 8007008:	200004c4 	.word	0x200004c4

0800700c <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	0002      	movs	r2, r0
 8007014:	1dfb      	adds	r3, r7, #7
 8007016:	701a      	strb	r2, [r3, #0]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8007018:	2001      	movs	r0, #1
 800701a:	f000 f865 	bl	80070e8 <SX1276Read>
 800701e:	0003      	movs	r3, r0
 8007020:	b25b      	sxtb	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	da03      	bge.n	800702e <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 8007026:	4b25      	ldr	r3, [pc, #148]	@ (80070bc <SX1276SetModem+0xb0>)
 8007028:	2201      	movs	r2, #1
 800702a:	715a      	strb	r2, [r3, #5]
 800702c:	e002      	b.n	8007034 <SX1276SetModem+0x28>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 800702e:	4b23      	ldr	r3, [pc, #140]	@ (80070bc <SX1276SetModem+0xb0>)
 8007030:	2200      	movs	r2, #0
 8007032:	715a      	strb	r2, [r3, #5]
    }

    if( SX1276.Settings.Modem == modem )
 8007034:	4b21      	ldr	r3, [pc, #132]	@ (80070bc <SX1276SetModem+0xb0>)
 8007036:	795b      	ldrb	r3, [r3, #5]
 8007038:	1dfa      	adds	r2, r7, #7
 800703a:	7812      	ldrb	r2, [r2, #0]
 800703c:	429a      	cmp	r2, r3
 800703e:	d038      	beq.n	80070b2 <SX1276SetModem+0xa6>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 8007040:	4b1e      	ldr	r3, [pc, #120]	@ (80070bc <SX1276SetModem+0xb0>)
 8007042:	1dfa      	adds	r2, r7, #7
 8007044:	7812      	ldrb	r2, [r2, #0]
 8007046:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 8007048:	4b1c      	ldr	r3, [pc, #112]	@ (80070bc <SX1276SetModem+0xb0>)
 800704a:	795b      	ldrb	r3, [r3, #5]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d017      	beq.n	8007080 <SX1276SetModem+0x74>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8007050:	2000      	movs	r0, #0
 8007052:	f7ff ff8b 	bl	8006f6c <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8007056:	2001      	movs	r0, #1
 8007058:	f000 f846 	bl	80070e8 <SX1276Read>
 800705c:	0003      	movs	r3, r0
 800705e:	001a      	movs	r2, r3
 8007060:	237f      	movs	r3, #127	@ 0x7f
 8007062:	4013      	ands	r3, r2
 8007064:	b2db      	uxtb	r3, r3
 8007066:	0019      	movs	r1, r3
 8007068:	2001      	movs	r0, #1
 800706a:	f000 f829 	bl	80070c0 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800706e:	2100      	movs	r1, #0
 8007070:	2040      	movs	r0, #64	@ 0x40
 8007072:	f000 f825 	bl	80070c0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8007076:	2130      	movs	r1, #48	@ 0x30
 8007078:	2041      	movs	r0, #65	@ 0x41
 800707a:	f000 f821 	bl	80070c0 <SX1276Write>
        break;
 800707e:	e019      	b.n	80070b4 <SX1276SetModem+0xa8>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8007080:	2000      	movs	r0, #0
 8007082:	f7ff ff73 	bl	8006f6c <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8007086:	2001      	movs	r0, #1
 8007088:	f000 f82e 	bl	80070e8 <SX1276Read>
 800708c:	0003      	movs	r3, r0
 800708e:	001a      	movs	r2, r3
 8007090:	2380      	movs	r3, #128	@ 0x80
 8007092:	425b      	negs	r3, r3
 8007094:	4313      	orrs	r3, r2
 8007096:	b2db      	uxtb	r3, r3
 8007098:	0019      	movs	r1, r3
 800709a:	2001      	movs	r0, #1
 800709c:	f000 f810 	bl	80070c0 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80070a0:	2100      	movs	r1, #0
 80070a2:	2040      	movs	r0, #64	@ 0x40
 80070a4:	f000 f80c 	bl	80070c0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 80070a8:	2100      	movs	r1, #0
 80070aa:	2041      	movs	r0, #65	@ 0x41
 80070ac:	f000 f808 	bl	80070c0 <SX1276Write>
        break;
 80070b0:	e000      	b.n	80070b4 <SX1276SetModem+0xa8>
        return;
 80070b2:	46c0      	nop			@ (mov r8, r8)
    }
}
 80070b4:	46bd      	mov	sp, r7
 80070b6:	b002      	add	sp, #8
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	46c0      	nop			@ (mov r8, r8)
 80070bc:	200004c8 	.word	0x200004c8

080070c0 <SX1276Write>:

void SX1276Write( uint16_t addr, uint8_t data )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	0002      	movs	r2, r0
 80070c8:	1dbb      	adds	r3, r7, #6
 80070ca:	801a      	strh	r2, [r3, #0]
 80070cc:	1d7b      	adds	r3, r7, #5
 80070ce:	1c0a      	adds	r2, r1, #0
 80070d0:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( addr, &data, 1 );
 80070d2:	1d79      	adds	r1, r7, #5
 80070d4:	1dbb      	adds	r3, r7, #6
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	2201      	movs	r2, #1
 80070da:	0018      	movs	r0, r3
 80070dc:	f000 f818 	bl	8007110 <SX1276WriteBuffer>
}
 80070e0:	46c0      	nop			@ (mov r8, r8)
 80070e2:	46bd      	mov	sp, r7
 80070e4:	b002      	add	sp, #8
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <SX1276Read>:

uint8_t SX1276Read( uint16_t addr )
{
 80070e8:	b590      	push	{r4, r7, lr}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	0002      	movs	r2, r0
 80070f0:	1dbb      	adds	r3, r7, #6
 80070f2:	801a      	strh	r2, [r3, #0]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 80070f4:	240f      	movs	r4, #15
 80070f6:	1939      	adds	r1, r7, r4
 80070f8:	1dbb      	adds	r3, r7, #6
 80070fa:	881b      	ldrh	r3, [r3, #0]
 80070fc:	2201      	movs	r2, #1
 80070fe:	0018      	movs	r0, r3
 8007100:	f000 f847 	bl	8007192 <SX1276ReadBuffer>
    return data;
 8007104:	193b      	adds	r3, r7, r4
 8007106:	781b      	ldrb	r3, [r3, #0]
}
 8007108:	0018      	movs	r0, r3
 800710a:	46bd      	mov	sp, r7
 800710c:	b005      	add	sp, #20
 800710e:	bd90      	pop	{r4, r7, pc}

08007110 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8007110:	b590      	push	{r4, r7, lr}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6039      	str	r1, [r7, #0]
 8007118:	0011      	movs	r1, r2
 800711a:	1dbb      	adds	r3, r7, #6
 800711c:	1c02      	adds	r2, r0, #0
 800711e:	801a      	strh	r2, [r3, #0]
 8007120:	1d7b      	adds	r3, r7, #5
 8007122:	1c0a      	adds	r2, r1, #0
 8007124:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8007126:	2380      	movs	r3, #128	@ 0x80
 8007128:	0219      	lsls	r1, r3, #8
 800712a:	23a0      	movs	r3, #160	@ 0xa0
 800712c:	05db      	lsls	r3, r3, #23
 800712e:	2200      	movs	r2, #0
 8007130:	0018      	movs	r0, r3
 8007132:	f7fc fd7d 	bl	8003c30 <HW_GPIO_Write>

    HW_SPI_InOut( addr | 0x80 );
 8007136:	1dbb      	adds	r3, r7, #6
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	2280      	movs	r2, #128	@ 0x80
 800713c:	4313      	orrs	r3, r2
 800713e:	b29b      	uxth	r3, r3
 8007140:	0018      	movs	r0, r3
 8007142:	f7fd fa8b 	bl	800465c <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8007146:	230f      	movs	r3, #15
 8007148:	18fb      	adds	r3, r7, r3
 800714a:	2200      	movs	r2, #0
 800714c:	701a      	strb	r2, [r3, #0]
 800714e:	e00d      	b.n	800716c <SX1276WriteBuffer+0x5c>
    {
        HW_SPI_InOut( buffer[i] );
 8007150:	240f      	movs	r4, #15
 8007152:	193b      	adds	r3, r7, r4
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	18d3      	adds	r3, r2, r3
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	0018      	movs	r0, r3
 800715e:	f7fd fa7d 	bl	800465c <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8007162:	193b      	adds	r3, r7, r4
 8007164:	781a      	ldrb	r2, [r3, #0]
 8007166:	193b      	adds	r3, r7, r4
 8007168:	3201      	adds	r2, #1
 800716a:	701a      	strb	r2, [r3, #0]
 800716c:	230f      	movs	r3, #15
 800716e:	18fa      	adds	r2, r7, r3
 8007170:	1d7b      	adds	r3, r7, #5
 8007172:	7812      	ldrb	r2, [r2, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	429a      	cmp	r2, r3
 8007178:	d3ea      	bcc.n	8007150 <SX1276WriteBuffer+0x40>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 800717a:	2380      	movs	r3, #128	@ 0x80
 800717c:	0219      	lsls	r1, r3, #8
 800717e:	23a0      	movs	r3, #160	@ 0xa0
 8007180:	05db      	lsls	r3, r3, #23
 8007182:	2201      	movs	r2, #1
 8007184:	0018      	movs	r0, r3
 8007186:	f7fc fd53 	bl	8003c30 <HW_GPIO_Write>
}
 800718a:	46c0      	nop			@ (mov r8, r8)
 800718c:	46bd      	mov	sp, r7
 800718e:	b005      	add	sp, #20
 8007190:	bd90      	pop	{r4, r7, pc}

08007192 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b084      	sub	sp, #16
 8007196:	af00      	add	r7, sp, #0
 8007198:	6039      	str	r1, [r7, #0]
 800719a:	0011      	movs	r1, r2
 800719c:	1dbb      	adds	r3, r7, #6
 800719e:	1c02      	adds	r2, r0, #0
 80071a0:	801a      	strh	r2, [r3, #0]
 80071a2:	1d7b      	adds	r3, r7, #5
 80071a4:	1c0a      	adds	r2, r1, #0
 80071a6:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 80071a8:	2380      	movs	r3, #128	@ 0x80
 80071aa:	0219      	lsls	r1, r3, #8
 80071ac:	23a0      	movs	r3, #160	@ 0xa0
 80071ae:	05db      	lsls	r3, r3, #23
 80071b0:	2200      	movs	r2, #0
 80071b2:	0018      	movs	r0, r3
 80071b4:	f7fc fd3c 	bl	8003c30 <HW_GPIO_Write>

    HW_SPI_InOut( addr & 0x7F );
 80071b8:	1dbb      	adds	r3, r7, #6
 80071ba:	881b      	ldrh	r3, [r3, #0]
 80071bc:	227f      	movs	r2, #127	@ 0x7f
 80071be:	4013      	ands	r3, r2
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	0018      	movs	r0, r3
 80071c4:	f7fd fa4a 	bl	800465c <HW_SPI_InOut>

    for( i = 0; i < size; i++ )
 80071c8:	230f      	movs	r3, #15
 80071ca:	18fb      	adds	r3, r7, r3
 80071cc:	2200      	movs	r2, #0
 80071ce:	701a      	strb	r2, [r3, #0]
 80071d0:	e010      	b.n	80071f4 <SX1276ReadBuffer+0x62>
    {
        buffer[i] = HW_SPI_InOut( 0 );
 80071d2:	2000      	movs	r0, #0
 80071d4:	f7fd fa42 	bl	800465c <HW_SPI_InOut>
 80071d8:	0003      	movs	r3, r0
 80071da:	0019      	movs	r1, r3
 80071dc:	200f      	movs	r0, #15
 80071de:	183b      	adds	r3, r7, r0
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	18d3      	adds	r3, r2, r3
 80071e6:	b2ca      	uxtb	r2, r1
 80071e8:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80071ea:	183b      	adds	r3, r7, r0
 80071ec:	781a      	ldrb	r2, [r3, #0]
 80071ee:	183b      	adds	r3, r7, r0
 80071f0:	3201      	adds	r2, #1
 80071f2:	701a      	strb	r2, [r3, #0]
 80071f4:	230f      	movs	r3, #15
 80071f6:	18fa      	adds	r2, r7, r3
 80071f8:	1d7b      	adds	r3, r7, #5
 80071fa:	7812      	ldrb	r2, [r2, #0]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d3e7      	bcc.n	80071d2 <SX1276ReadBuffer+0x40>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8007202:	2380      	movs	r3, #128	@ 0x80
 8007204:	0219      	lsls	r1, r3, #8
 8007206:	23a0      	movs	r3, #160	@ 0xa0
 8007208:	05db      	lsls	r3, r3, #23
 800720a:	2201      	movs	r2, #1
 800720c:	0018      	movs	r0, r3
 800720e:	f7fc fd0f 	bl	8003c30 <HW_GPIO_Write>
}
 8007212:	46c0      	nop			@ (mov r8, r8)
 8007214:	46bd      	mov	sp, r7
 8007216:	b004      	add	sp, #16
 8007218:	bd80      	pop	{r7, pc}

0800721a <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b082      	sub	sp, #8
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	000a      	movs	r2, r1
 8007224:	1cfb      	adds	r3, r7, #3
 8007226:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( 0, buffer, size );
 8007228:	1cfb      	adds	r3, r7, #3
 800722a:	781a      	ldrb	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	0019      	movs	r1, r3
 8007230:	2000      	movs	r0, #0
 8007232:	f7ff ff6d 	bl	8007110 <SX1276WriteBuffer>
}
 8007236:	46c0      	nop			@ (mov r8, r8)
 8007238:	46bd      	mov	sp, r7
 800723a:	b002      	add	sp, #8
 800723c:	bd80      	pop	{r7, pc}

0800723e <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b082      	sub	sp, #8
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	000a      	movs	r2, r1
 8007248:	1cfb      	adds	r3, r7, #3
 800724a:	701a      	strb	r2, [r3, #0]
    SX1276ReadBuffer( 0, buffer, size );
 800724c:	1cfb      	adds	r3, r7, #3
 800724e:	781a      	ldrb	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	0019      	movs	r1, r3
 8007254:	2000      	movs	r0, #0
 8007256:	f7ff ff9c 	bl	8007192 <SX1276ReadBuffer>
}
 800725a:	46c0      	nop			@ (mov r8, r8)
 800725c:	46bd      	mov	sp, r7
 800725e:	b002      	add	sp, #8
 8007260:	bd80      	pop	{r7, pc}
	...

08007264 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	0002      	movs	r2, r0
 800726c:	1dfb      	adds	r3, r7, #7
 800726e:	701a      	strb	r2, [r3, #0]
 8007270:	1dbb      	adds	r3, r7, #6
 8007272:	1c0a      	adds	r2, r1, #0
 8007274:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8007276:	1dfb      	adds	r3, r7, #7
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	0018      	movs	r0, r3
 800727c:	f7ff fec6 	bl	800700c <SX1276SetModem>

    switch( modem )
 8007280:	1dfb      	adds	r3, r7, #7
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d002      	beq.n	800728e <SX1276SetMaxPayloadLength+0x2a>
 8007288:	2b01      	cmp	r3, #1
 800728a:	d00f      	beq.n	80072ac <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 800728c:	e016      	b.n	80072bc <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 800728e:	4b0d      	ldr	r3, [pc, #52]	@ (80072c4 <SX1276SetMaxPayloadLength+0x60>)
 8007290:	2222      	movs	r2, #34	@ 0x22
 8007292:	5c9b      	ldrb	r3, [r3, r2]
 8007294:	2201      	movs	r2, #1
 8007296:	4053      	eors	r3, r2
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00d      	beq.n	80072ba <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 800729e:	1dbb      	adds	r3, r7, #6
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	0019      	movs	r1, r3
 80072a4:	2032      	movs	r0, #50	@ 0x32
 80072a6:	f7ff ff0b 	bl	80070c0 <SX1276Write>
        break;
 80072aa:	e006      	b.n	80072ba <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 80072ac:	1dbb      	adds	r3, r7, #6
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	0019      	movs	r1, r3
 80072b2:	2023      	movs	r0, #35	@ 0x23
 80072b4:	f7ff ff04 	bl	80070c0 <SX1276Write>
        break;
 80072b8:	e000      	b.n	80072bc <SX1276SetMaxPayloadLength+0x58>
        break;
 80072ba:	46c0      	nop			@ (mov r8, r8)
}
 80072bc:	46c0      	nop			@ (mov r8, r8)
 80072be:	46bd      	mov	sp, r7
 80072c0:	b002      	add	sp, #8
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	200004c8 	.word	0x200004c8

080072c8 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	0002      	movs	r2, r0
 80072d0:	1dfb      	adds	r3, r7, #7
 80072d2:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( MODEM_LORA );
 80072d4:	2001      	movs	r0, #1
 80072d6:	f7ff fe99 	bl	800700c <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 80072da:	4b0b      	ldr	r3, [pc, #44]	@ (8007308 <SX1276SetPublicNetwork+0x40>)
 80072dc:	1dfa      	adds	r2, r7, #7
 80072de:	215c      	movs	r1, #92	@ 0x5c
 80072e0:	7812      	ldrb	r2, [r2, #0]
 80072e2:	545a      	strb	r2, [r3, r1]
    if( enable == true )
 80072e4:	1dfb      	adds	r3, r7, #7
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d004      	beq.n	80072f6 <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 80072ec:	2134      	movs	r1, #52	@ 0x34
 80072ee:	2039      	movs	r0, #57	@ 0x39
 80072f0:	f7ff fee6 	bl	80070c0 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 80072f4:	e003      	b.n	80072fe <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 80072f6:	2112      	movs	r1, #18
 80072f8:	2039      	movs	r0, #57	@ 0x39
 80072fa:	f7ff fee1 	bl	80070c0 <SX1276Write>
}
 80072fe:	46c0      	nop			@ (mov r8, r8)
 8007300:	46bd      	mov	sp, r7
 8007302:	b002      	add	sp, #8
 8007304:	bd80      	pop	{r7, pc}
 8007306:	46c0      	nop			@ (mov r8, r8)
 8007308:	200004c8 	.word	0x200004c8

0800730c <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8007310:	4b04      	ldr	r3, [pc, #16]	@ (8007324 <SX1276GetWakeupTime+0x18>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	4798      	blx	r3
 8007318:	0003      	movs	r3, r0
 800731a:	3302      	adds	r3, #2
}
 800731c:	0018      	movs	r0, r3
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	46c0      	nop			@ (mov r8, r8)
 8007324:	200004c4 	.word	0x200004c4

08007328 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void* context )
{
 8007328:	b590      	push	{r4, r7, lr}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 8007330:	4b51      	ldr	r3, [pc, #324]	@ (8007478 <SX1276OnTimeoutIrq+0x150>)
 8007332:	791b      	ldrb	r3, [r3, #4]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d002      	beq.n	800733e <SX1276OnTimeoutIrq+0x16>
 8007338:	2b02      	cmp	r3, #2
 800733a:	d045      	beq.n	80073c8 <SX1276OnTimeoutIrq+0xa0>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 800733c:	e098      	b.n	8007470 <SX1276OnTimeoutIrq+0x148>
        if( SX1276.Settings.Modem == MODEM_FSK )
 800733e:	4b4e      	ldr	r3, [pc, #312]	@ (8007478 <SX1276OnTimeoutIrq+0x150>)
 8007340:	795b      	ldrb	r3, [r3, #5]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d132      	bne.n	80073ac <SX1276OnTimeoutIrq+0x84>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8007346:	4b4c      	ldr	r3, [pc, #304]	@ (8007478 <SX1276OnTimeoutIrq+0x150>)
 8007348:	2230      	movs	r2, #48	@ 0x30
 800734a:	2100      	movs	r1, #0
 800734c:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800734e:	4b4a      	ldr	r3, [pc, #296]	@ (8007478 <SX1276OnTimeoutIrq+0x150>)
 8007350:	2231      	movs	r2, #49	@ 0x31
 8007352:	2100      	movs	r1, #0
 8007354:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8007356:	4b48      	ldr	r3, [pc, #288]	@ (8007478 <SX1276OnTimeoutIrq+0x150>)
 8007358:	2200      	movs	r2, #0
 800735a:	879a      	strh	r2, [r3, #60]	@ 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 800735c:	4b46      	ldr	r3, [pc, #280]	@ (8007478 <SX1276OnTimeoutIrq+0x150>)
 800735e:	2200      	movs	r2, #0
 8007360:	875a      	strh	r2, [r3, #58]	@ 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8007362:	210b      	movs	r1, #11
 8007364:	203e      	movs	r0, #62	@ 0x3e
 8007366:	f7ff feab 	bl	80070c0 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800736a:	2110      	movs	r1, #16
 800736c:	203f      	movs	r0, #63	@ 0x3f
 800736e:	f7ff fea7 	bl	80070c0 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8007372:	4b41      	ldr	r3, [pc, #260]	@ (8007478 <SX1276OnTimeoutIrq+0x150>)
 8007374:	2226      	movs	r2, #38	@ 0x26
 8007376:	5c9b      	ldrb	r3, [r3, r2]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d010      	beq.n	800739e <SX1276OnTimeoutIrq+0x76>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800737c:	200d      	movs	r0, #13
 800737e:	f7ff feb3 	bl	80070e8 <SX1276Read>
 8007382:	0003      	movs	r3, r0
 8007384:	001a      	movs	r2, r3
 8007386:	2340      	movs	r3, #64	@ 0x40
 8007388:	4313      	orrs	r3, r2
 800738a:	b2db      	uxtb	r3, r3
 800738c:	0019      	movs	r1, r3
 800738e:	200d      	movs	r0, #13
 8007390:	f7ff fe96 	bl	80070c0 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 8007394:	4b39      	ldr	r3, [pc, #228]	@ (800747c <SX1276OnTimeoutIrq+0x154>)
 8007396:	0018      	movs	r0, r3
 8007398:	f00d fd92 	bl	8014ec0 <TimerStart>
 800739c:	e006      	b.n	80073ac <SX1276OnTimeoutIrq+0x84>
                SX1276.Settings.State = RF_IDLE;
 800739e:	4b36      	ldr	r3, [pc, #216]	@ (8007478 <SX1276OnTimeoutIrq+0x150>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 80073a4:	4b35      	ldr	r3, [pc, #212]	@ (800747c <SX1276OnTimeoutIrq+0x154>)
 80073a6:	0018      	movs	r0, r3
 80073a8:	f00d fe68 	bl	801507c <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80073ac:	4b34      	ldr	r3, [pc, #208]	@ (8007480 <SX1276OnTimeoutIrq+0x158>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d05a      	beq.n	800746a <SX1276OnTimeoutIrq+0x142>
 80073b4:	4b32      	ldr	r3, [pc, #200]	@ (8007480 <SX1276OnTimeoutIrq+0x158>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d055      	beq.n	800746a <SX1276OnTimeoutIrq+0x142>
            RadioEvents->RxTimeout( );
 80073be:	4b30      	ldr	r3, [pc, #192]	@ (8007480 <SX1276OnTimeoutIrq+0x158>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	4798      	blx	r3
        break;
 80073c6:	e050      	b.n	800746a <SX1276OnTimeoutIrq+0x142>
        SX1276Reset( );
 80073c8:	f7ff fd9c 	bl	8006f04 <SX1276Reset>
        RxChainCalibration( );
 80073cc:	f7fe fae2 	bl	8005994 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 80073d0:	2000      	movs	r0, #0
 80073d2:	f7ff fdcb 	bl	8006f6c <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80073d6:	230f      	movs	r3, #15
 80073d8:	18fb      	adds	r3, r7, r3
 80073da:	2200      	movs	r2, #0
 80073dc:	701a      	strb	r2, [r3, #0]
 80073de:	e025      	b.n	800742c <SX1276OnTimeoutIrq+0x104>
            SX1276SetModem( RadioRegsInit[i].Modem );
 80073e0:	240f      	movs	r4, #15
 80073e2:	193b      	adds	r3, r7, r4
 80073e4:	781a      	ldrb	r2, [r3, #0]
 80073e6:	4927      	ldr	r1, [pc, #156]	@ (8007484 <SX1276OnTimeoutIrq+0x15c>)
 80073e8:	0013      	movs	r3, r2
 80073ea:	005b      	lsls	r3, r3, #1
 80073ec:	189b      	adds	r3, r3, r2
 80073ee:	5c5b      	ldrb	r3, [r3, r1]
 80073f0:	0018      	movs	r0, r3
 80073f2:	f7ff fe0b 	bl	800700c <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80073f6:	193b      	adds	r3, r7, r4
 80073f8:	781a      	ldrb	r2, [r3, #0]
 80073fa:	4922      	ldr	r1, [pc, #136]	@ (8007484 <SX1276OnTimeoutIrq+0x15c>)
 80073fc:	0013      	movs	r3, r2
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	189b      	adds	r3, r3, r2
 8007402:	18cb      	adds	r3, r1, r3
 8007404:	3301      	adds	r3, #1
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	0018      	movs	r0, r3
 800740a:	193b      	adds	r3, r7, r4
 800740c:	781a      	ldrb	r2, [r3, #0]
 800740e:	491d      	ldr	r1, [pc, #116]	@ (8007484 <SX1276OnTimeoutIrq+0x15c>)
 8007410:	0013      	movs	r3, r2
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	189b      	adds	r3, r3, r2
 8007416:	18cb      	adds	r3, r1, r3
 8007418:	3302      	adds	r3, #2
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	0019      	movs	r1, r3
 800741e:	f7ff fe4f 	bl	80070c0 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8007422:	193b      	adds	r3, r7, r4
 8007424:	781a      	ldrb	r2, [r3, #0]
 8007426:	193b      	adds	r3, r7, r4
 8007428:	3201      	adds	r2, #1
 800742a:	701a      	strb	r2, [r3, #0]
 800742c:	230f      	movs	r3, #15
 800742e:	18fb      	adds	r3, r7, r3
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	2b0f      	cmp	r3, #15
 8007434:	d9d4      	bls.n	80073e0 <SX1276OnTimeoutIrq+0xb8>
        SX1276SetModem( MODEM_FSK );
 8007436:	2000      	movs	r0, #0
 8007438:	f7ff fde8 	bl	800700c <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 800743c:	4b0e      	ldr	r3, [pc, #56]	@ (8007478 <SX1276OnTimeoutIrq+0x150>)
 800743e:	225c      	movs	r2, #92	@ 0x5c
 8007440:	5c9b      	ldrb	r3, [r3, r2]
 8007442:	0018      	movs	r0, r3
 8007444:	f7ff ff40 	bl	80072c8 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8007448:	4b0b      	ldr	r3, [pc, #44]	@ (8007478 <SX1276OnTimeoutIrq+0x150>)
 800744a:	2200      	movs	r2, #0
 800744c:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800744e:	4b0c      	ldr	r3, [pc, #48]	@ (8007480 <SX1276OnTimeoutIrq+0x158>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00b      	beq.n	800746e <SX1276OnTimeoutIrq+0x146>
 8007456:	4b0a      	ldr	r3, [pc, #40]	@ (8007480 <SX1276OnTimeoutIrq+0x158>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d006      	beq.n	800746e <SX1276OnTimeoutIrq+0x146>
            RadioEvents->TxTimeout( );
 8007460:	4b07      	ldr	r3, [pc, #28]	@ (8007480 <SX1276OnTimeoutIrq+0x158>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	4798      	blx	r3
        break;
 8007468:	e001      	b.n	800746e <SX1276OnTimeoutIrq+0x146>
        break;
 800746a:	46c0      	nop			@ (mov r8, r8)
 800746c:	e000      	b.n	8007470 <SX1276OnTimeoutIrq+0x148>
        break;
 800746e:	46c0      	nop			@ (mov r8, r8)
    }
}
 8007470:	46c0      	nop			@ (mov r8, r8)
 8007472:	46bd      	mov	sp, r7
 8007474:	b005      	add	sp, #20
 8007476:	bd90      	pop	{r4, r7, pc}
 8007478:	200004c8 	.word	0x200004c8
 800747c:	20000560 	.word	0x20000560
 8007480:	200003c0 	.word	0x200003c0
 8007484:	0801acfc 	.word	0x0801acfc

08007488 <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void* context )
{
 8007488:	b5b0      	push	{r4, r5, r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
    volatile uint8_t irqFlags = 0;
 8007490:	230d      	movs	r3, #13
 8007492:	18fb      	adds	r3, r7, r3
 8007494:	2200      	movs	r2, #0
 8007496:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 8007498:	4bca      	ldr	r3, [pc, #808]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 800749a:	791b      	ldrb	r3, [r3, #4]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d003      	beq.n	80074a8 <SX1276OnDio0Irq+0x20>
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d100      	bne.n	80074a6 <SX1276OnDio0Irq+0x1e>
 80074a4:	e1f2      	b.n	800788c <SX1276OnDio0Irq+0x404>
                }
                break;
            }
            break;
        default:
            break;
 80074a6:	e20f      	b.n	80078c8 <SX1276OnDio0Irq+0x440>
            switch( SX1276.Settings.Modem )
 80074a8:	4bc6      	ldr	r3, [pc, #792]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 80074aa:	795b      	ldrb	r3, [r3, #5]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d003      	beq.n	80074b8 <SX1276OnDio0Irq+0x30>
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d100      	bne.n	80074b6 <SX1276OnDio0Irq+0x2e>
 80074b4:	e0eb      	b.n	800768e <SX1276OnDio0Irq+0x206>
                break;
 80074b6:	e1e8      	b.n	800788a <SX1276OnDio0Irq+0x402>
                if( SX1276.Settings.Fsk.CrcOn == true )
 80074b8:	4bc2      	ldr	r3, [pc, #776]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 80074ba:	2224      	movs	r2, #36	@ 0x24
 80074bc:	5c9b      	ldrb	r3, [r3, r2]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d057      	beq.n	8007572 <SX1276OnDio0Irq+0xea>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 80074c2:	203f      	movs	r0, #63	@ 0x3f
 80074c4:	f7ff fe10 	bl	80070e8 <SX1276Read>
 80074c8:	0003      	movs	r3, r0
 80074ca:	001a      	movs	r2, r3
 80074cc:	210d      	movs	r1, #13
 80074ce:	187b      	adds	r3, r7, r1
 80074d0:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 80074d2:	187b      	adds	r3, r7, r1
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	001a      	movs	r2, r3
 80074da:	2302      	movs	r3, #2
 80074dc:	4013      	ands	r3, r2
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d047      	beq.n	8007572 <SX1276OnDio0Irq+0xea>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80074e2:	210b      	movs	r1, #11
 80074e4:	203e      	movs	r0, #62	@ 0x3e
 80074e6:	f7ff fdeb 	bl	80070c0 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80074ea:	2110      	movs	r1, #16
 80074ec:	203f      	movs	r0, #63	@ 0x3f
 80074ee:	f7ff fde7 	bl	80070c0 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 80074f2:	4bb5      	ldr	r3, [pc, #724]	@ (80077c8 <SX1276OnDio0Irq+0x340>)
 80074f4:	0018      	movs	r0, r3
 80074f6:	f00d fdc1 	bl	801507c <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 80074fa:	4bb2      	ldr	r3, [pc, #712]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 80074fc:	2226      	movs	r2, #38	@ 0x26
 80074fe:	5c9b      	ldrb	r3, [r3, r2]
 8007500:	2201      	movs	r2, #1
 8007502:	4053      	eors	r3, r2
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d007      	beq.n	800751a <SX1276OnDio0Irq+0x92>
                            TimerStop( &RxTimeoutSyncWord );
 800750a:	4bb0      	ldr	r3, [pc, #704]	@ (80077cc <SX1276OnDio0Irq+0x344>)
 800750c:	0018      	movs	r0, r3
 800750e:	f00d fdb5 	bl	801507c <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8007512:	4bac      	ldr	r3, [pc, #688]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 8007514:	2200      	movs	r2, #0
 8007516:	711a      	strb	r2, [r3, #4]
 8007518:	e00f      	b.n	800753a <SX1276OnDio0Irq+0xb2>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800751a:	200d      	movs	r0, #13
 800751c:	f7ff fde4 	bl	80070e8 <SX1276Read>
 8007520:	0003      	movs	r3, r0
 8007522:	001a      	movs	r2, r3
 8007524:	2340      	movs	r3, #64	@ 0x40
 8007526:	4313      	orrs	r3, r2
 8007528:	b2db      	uxtb	r3, r3
 800752a:	0019      	movs	r1, r3
 800752c:	200d      	movs	r0, #13
 800752e:	f7ff fdc7 	bl	80070c0 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 8007532:	4ba6      	ldr	r3, [pc, #664]	@ (80077cc <SX1276OnDio0Irq+0x344>)
 8007534:	0018      	movs	r0, r3
 8007536:	f00d fcc3 	bl	8014ec0 <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800753a:	4ba5      	ldr	r3, [pc, #660]	@ (80077d0 <SX1276OnDio0Irq+0x348>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d008      	beq.n	8007554 <SX1276OnDio0Irq+0xcc>
 8007542:	4ba3      	ldr	r3, [pc, #652]	@ (80077d0 <SX1276OnDio0Irq+0x348>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <SX1276OnDio0Irq+0xcc>
                            RadioEvents->RxError( );
 800754c:	4ba0      	ldr	r3, [pc, #640]	@ (80077d0 <SX1276OnDio0Irq+0x348>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8007554:	4b9b      	ldr	r3, [pc, #620]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 8007556:	2230      	movs	r2, #48	@ 0x30
 8007558:	2100      	movs	r1, #0
 800755a:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800755c:	4b99      	ldr	r3, [pc, #612]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 800755e:	2231      	movs	r2, #49	@ 0x31
 8007560:	2100      	movs	r1, #0
 8007562:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8007564:	4b97      	ldr	r3, [pc, #604]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 8007566:	2200      	movs	r2, #0
 8007568:	879a      	strh	r2, [r3, #60]	@ 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 800756a:	4b96      	ldr	r3, [pc, #600]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 800756c:	2200      	movs	r2, #0
 800756e:	875a      	strh	r2, [r3, #58]	@ 0x3a
                        break;
 8007570:	e18b      	b.n	800788a <SX1276OnDio0Irq+0x402>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8007572:	4b94      	ldr	r3, [pc, #592]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 8007574:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8007576:	2b00      	cmp	r3, #0
 8007578:	d12d      	bne.n	80075d6 <SX1276OnDio0Irq+0x14e>
 800757a:	4b92      	ldr	r3, [pc, #584]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 800757c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800757e:	2b00      	cmp	r3, #0
 8007580:	d129      	bne.n	80075d6 <SX1276OnDio0Irq+0x14e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8007582:	4b90      	ldr	r3, [pc, #576]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 8007584:	2222      	movs	r2, #34	@ 0x22
 8007586:	5c9b      	ldrb	r3, [r3, r2]
 8007588:	2201      	movs	r2, #1
 800758a:	4053      	eors	r3, r2
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d005      	beq.n	800759e <SX1276OnDio0Irq+0x116>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8007592:	4b90      	ldr	r3, [pc, #576]	@ (80077d4 <SX1276OnDio0Irq+0x34c>)
 8007594:	2101      	movs	r1, #1
 8007596:	0018      	movs	r0, r3
 8007598:	f7ff fe51 	bl	800723e <SX1276ReadFifo>
 800759c:	e006      	b.n	80075ac <SX1276OnDio0Irq+0x124>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800759e:	2032      	movs	r0, #50	@ 0x32
 80075a0:	f7ff fda2 	bl	80070e8 <SX1276Read>
 80075a4:	0003      	movs	r3, r0
 80075a6:	001a      	movs	r2, r3
 80075a8:	4b86      	ldr	r3, [pc, #536]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 80075aa:	875a      	strh	r2, [r3, #58]	@ 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80075ac:	4b85      	ldr	r3, [pc, #532]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 80075ae:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80075b0:	001a      	movs	r2, r3
 80075b2:	4b89      	ldr	r3, [pc, #548]	@ (80077d8 <SX1276OnDio0Irq+0x350>)
 80075b4:	18d0      	adds	r0, r2, r3
 80075b6:	4b83      	ldr	r3, [pc, #524]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 80075b8:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	4b81      	ldr	r3, [pc, #516]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 80075be:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	0019      	movs	r1, r3
 80075c8:	f7ff fe39 	bl	800723e <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80075cc:	4b7d      	ldr	r3, [pc, #500]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 80075ce:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 80075d0:	4b7c      	ldr	r3, [pc, #496]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 80075d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80075d4:	e013      	b.n	80075fe <SX1276OnDio0Irq+0x176>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80075d6:	4b7b      	ldr	r3, [pc, #492]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 80075d8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80075da:	001a      	movs	r2, r3
 80075dc:	4b7e      	ldr	r3, [pc, #504]	@ (80077d8 <SX1276OnDio0Irq+0x350>)
 80075de:	18d0      	adds	r0, r2, r3
 80075e0:	4b78      	ldr	r3, [pc, #480]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 80075e2:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	4b77      	ldr	r3, [pc, #476]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 80075e8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	0019      	movs	r1, r3
 80075f2:	f7ff fe24 	bl	800723e <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80075f6:	4b73      	ldr	r3, [pc, #460]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 80075f8:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 80075fa:	4b72      	ldr	r3, [pc, #456]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 80075fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
                TimerStop( &RxTimeoutTimer );
 80075fe:	4b72      	ldr	r3, [pc, #456]	@ (80077c8 <SX1276OnDio0Irq+0x340>)
 8007600:	0018      	movs	r0, r3
 8007602:	f00d fd3b 	bl	801507c <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8007606:	4b6f      	ldr	r3, [pc, #444]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 8007608:	2226      	movs	r2, #38	@ 0x26
 800760a:	5c9b      	ldrb	r3, [r3, r2]
 800760c:	2201      	movs	r2, #1
 800760e:	4053      	eors	r3, r2
 8007610:	b2db      	uxtb	r3, r3
 8007612:	2b00      	cmp	r3, #0
 8007614:	d007      	beq.n	8007626 <SX1276OnDio0Irq+0x19e>
                    SX1276.Settings.State = RF_IDLE;
 8007616:	4b6b      	ldr	r3, [pc, #428]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 8007618:	2200      	movs	r2, #0
 800761a:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 800761c:	4b6b      	ldr	r3, [pc, #428]	@ (80077cc <SX1276OnDio0Irq+0x344>)
 800761e:	0018      	movs	r0, r3
 8007620:	f00d fd2c 	bl	801507c <TimerStop>
 8007624:	e00f      	b.n	8007646 <SX1276OnDio0Irq+0x1be>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8007626:	200d      	movs	r0, #13
 8007628:	f7ff fd5e 	bl	80070e8 <SX1276Read>
 800762c:	0003      	movs	r3, r0
 800762e:	001a      	movs	r2, r3
 8007630:	2340      	movs	r3, #64	@ 0x40
 8007632:	4313      	orrs	r3, r2
 8007634:	b2db      	uxtb	r3, r3
 8007636:	0019      	movs	r1, r3
 8007638:	200d      	movs	r0, #13
 800763a:	f7ff fd41 	bl	80070c0 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 800763e:	4b63      	ldr	r3, [pc, #396]	@ (80077cc <SX1276OnDio0Irq+0x344>)
 8007640:	0018      	movs	r0, r3
 8007642:	f00d fc3d 	bl	8014ec0 <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8007646:	4b62      	ldr	r3, [pc, #392]	@ (80077d0 <SX1276OnDio0Irq+0x348>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d010      	beq.n	8007670 <SX1276OnDio0Irq+0x1e8>
 800764e:	4b60      	ldr	r3, [pc, #384]	@ (80077d0 <SX1276OnDio0Irq+0x348>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00b      	beq.n	8007670 <SX1276OnDio0Irq+0x1e8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8007658:	4b5d      	ldr	r3, [pc, #372]	@ (80077d0 <SX1276OnDio0Irq+0x348>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	689c      	ldr	r4, [r3, #8]
 800765e:	4b59      	ldr	r3, [pc, #356]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 8007660:	8f59      	ldrh	r1, [r3, #58]	@ 0x3a
 8007662:	4b58      	ldr	r3, [pc, #352]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 8007664:	2232      	movs	r2, #50	@ 0x32
 8007666:	569b      	ldrsb	r3, [r3, r2]
 8007668:	001a      	movs	r2, r3
 800766a:	485b      	ldr	r0, [pc, #364]	@ (80077d8 <SX1276OnDio0Irq+0x350>)
 800766c:	2300      	movs	r3, #0
 800766e:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8007670:	4b54      	ldr	r3, [pc, #336]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 8007672:	2230      	movs	r2, #48	@ 0x30
 8007674:	2100      	movs	r1, #0
 8007676:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8007678:	4b52      	ldr	r3, [pc, #328]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 800767a:	2231      	movs	r2, #49	@ 0x31
 800767c:	2100      	movs	r1, #0
 800767e:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8007680:	4b50      	ldr	r3, [pc, #320]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 8007682:	2200      	movs	r2, #0
 8007684:	879a      	strh	r2, [r3, #60]	@ 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 8007686:	4b4f      	ldr	r3, [pc, #316]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 8007688:	2200      	movs	r2, #0
 800768a:	875a      	strh	r2, [r3, #58]	@ 0x3a
                break;
 800768c:	e0fd      	b.n	800788a <SX1276OnDio0Irq+0x402>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800768e:	2140      	movs	r1, #64	@ 0x40
 8007690:	2012      	movs	r0, #18
 8007692:	f7ff fd15 	bl	80070c0 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8007696:	2012      	movs	r0, #18
 8007698:	f7ff fd26 	bl	80070e8 <SX1276Read>
 800769c:	0003      	movs	r3, r0
 800769e:	001a      	movs	r2, r3
 80076a0:	210d      	movs	r1, #13
 80076a2:	187b      	adds	r3, r7, r1
 80076a4:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 80076a6:	187b      	adds	r3, r7, r1
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	001a      	movs	r2, r3
 80076ae:	2320      	movs	r3, #32
 80076b0:	4013      	ands	r3, r2
 80076b2:	2b20      	cmp	r3, #32
 80076b4:	d122      	bne.n	80076fc <SX1276OnDio0Irq+0x274>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 80076b6:	2120      	movs	r1, #32
 80076b8:	2012      	movs	r0, #18
 80076ba:	f7ff fd01 	bl	80070c0 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 80076be:	4b41      	ldr	r3, [pc, #260]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 80076c0:	2256      	movs	r2, #86	@ 0x56
 80076c2:	5c9b      	ldrb	r3, [r3, r2]
 80076c4:	2201      	movs	r2, #1
 80076c6:	4053      	eors	r3, r2
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d002      	beq.n	80076d4 <SX1276OnDio0Irq+0x24c>
                            SX1276.Settings.State = RF_IDLE;
 80076ce:	4b3d      	ldr	r3, [pc, #244]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 80076d4:	4b3c      	ldr	r3, [pc, #240]	@ (80077c8 <SX1276OnDio0Irq+0x340>)
 80076d6:	0018      	movs	r0, r3
 80076d8:	f00d fcd0 	bl	801507c <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80076dc:	4b3c      	ldr	r3, [pc, #240]	@ (80077d0 <SX1276OnDio0Irq+0x348>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d100      	bne.n	80076e6 <SX1276OnDio0Irq+0x25e>
 80076e4:	e0ce      	b.n	8007884 <SX1276OnDio0Irq+0x3fc>
 80076e6:	4b3a      	ldr	r3, [pc, #232]	@ (80077d0 <SX1276OnDio0Irq+0x348>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d100      	bne.n	80076f2 <SX1276OnDio0Irq+0x26a>
 80076f0:	e0c8      	b.n	8007884 <SX1276OnDio0Irq+0x3fc>
                            RadioEvents->RxError( );
 80076f2:	4b37      	ldr	r3, [pc, #220]	@ (80077d0 <SX1276OnDio0Irq+0x348>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	4798      	blx	r3
                        break;
 80076fa:	e0c3      	b.n	8007884 <SX1276OnDio0Irq+0x3fc>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 80076fc:	2019      	movs	r0, #25
 80076fe:	f7ff fcf3 	bl	80070e8 <SX1276Read>
 8007702:	0003      	movs	r3, r0
 8007704:	b25b      	sxtb	r3, r3
 8007706:	3302      	adds	r3, #2
 8007708:	109b      	asrs	r3, r3, #2
 800770a:	b259      	sxtb	r1, r3
 800770c:	4b2d      	ldr	r3, [pc, #180]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 800770e:	2260      	movs	r2, #96	@ 0x60
 8007710:	5499      	strb	r1, [r3, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8007712:	201a      	movs	r0, #26
 8007714:	f7ff fce8 	bl	80070e8 <SX1276Read>
 8007718:	0003      	movs	r3, r0
 800771a:	001a      	movs	r2, r3
 800771c:	210e      	movs	r1, #14
 800771e:	187b      	adds	r3, r7, r1
 8007720:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8007722:	4b28      	ldr	r3, [pc, #160]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 8007724:	2260      	movs	r2, #96	@ 0x60
 8007726:	569b      	ldrsb	r3, [r3, r2]
 8007728:	2b00      	cmp	r3, #0
 800772a:	da33      	bge.n	8007794 <SX1276OnDio0Irq+0x30c>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800772c:	4b25      	ldr	r3, [pc, #148]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	4a2a      	ldr	r2, [pc, #168]	@ (80077dc <SX1276OnDio0Irq+0x354>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d916      	bls.n	8007764 <SX1276OnDio0Irq+0x2dc>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8007736:	187b      	adds	r3, r7, r1
 8007738:	2200      	movs	r2, #0
 800773a:	5e9b      	ldrsh	r3, [r3, r2]
 800773c:	111b      	asrs	r3, r3, #4
 800773e:	b21b      	sxth	r3, r3
 8007740:	b29a      	uxth	r2, r3
 8007742:	187b      	adds	r3, r7, r1
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	18d3      	adds	r3, r2, r3
 8007748:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 800774a:	4b1e      	ldr	r3, [pc, #120]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 800774c:	2160      	movs	r1, #96	@ 0x60
 800774e:	565b      	ldrsb	r3, [r3, r1]
 8007750:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8007752:	18d3      	adds	r3, r2, r3
 8007754:	b29b      	uxth	r3, r3
 8007756:	3b9d      	subs	r3, #157	@ 0x9d
 8007758:	b29b      	uxth	r3, r3
 800775a:	b219      	sxth	r1, r3
 800775c:	4b19      	ldr	r3, [pc, #100]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 800775e:	2262      	movs	r2, #98	@ 0x62
 8007760:	5299      	strh	r1, [r3, r2]
 8007762:	e04e      	b.n	8007802 <SX1276OnDio0Irq+0x37a>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8007764:	210e      	movs	r1, #14
 8007766:	187b      	adds	r3, r7, r1
 8007768:	2200      	movs	r2, #0
 800776a:	5e9b      	ldrsh	r3, [r3, r2]
 800776c:	111b      	asrs	r3, r3, #4
 800776e:	b21b      	sxth	r3, r3
 8007770:	b29a      	uxth	r2, r3
 8007772:	187b      	adds	r3, r7, r1
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	18d3      	adds	r3, r2, r3
 8007778:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 800777a:	4b12      	ldr	r3, [pc, #72]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 800777c:	2160      	movs	r1, #96	@ 0x60
 800777e:	565b      	ldrsb	r3, [r3, r1]
 8007780:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8007782:	18d3      	adds	r3, r2, r3
 8007784:	b29b      	uxth	r3, r3
 8007786:	3ba4      	subs	r3, #164	@ 0xa4
 8007788:	b29b      	uxth	r3, r3
 800778a:	b219      	sxth	r1, r3
 800778c:	4b0d      	ldr	r3, [pc, #52]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 800778e:	2262      	movs	r2, #98	@ 0x62
 8007790:	5299      	strh	r1, [r3, r2]
 8007792:	e036      	b.n	8007802 <SX1276OnDio0Irq+0x37a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8007794:	4b0b      	ldr	r3, [pc, #44]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	4a10      	ldr	r2, [pc, #64]	@ (80077dc <SX1276OnDio0Irq+0x354>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d920      	bls.n	80077e0 <SX1276OnDio0Irq+0x358>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800779e:	210e      	movs	r1, #14
 80077a0:	187b      	adds	r3, r7, r1
 80077a2:	2200      	movs	r2, #0
 80077a4:	5e9b      	ldrsh	r3, [r3, r2]
 80077a6:	111b      	asrs	r3, r3, #4
 80077a8:	b21b      	sxth	r3, r3
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	187b      	adds	r3, r7, r1
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	18d3      	adds	r3, r2, r3
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	3b9d      	subs	r3, #157	@ 0x9d
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	b219      	sxth	r1, r3
 80077ba:	4b02      	ldr	r3, [pc, #8]	@ (80077c4 <SX1276OnDio0Irq+0x33c>)
 80077bc:	2262      	movs	r2, #98	@ 0x62
 80077be:	5299      	strh	r1, [r3, r2]
 80077c0:	e01f      	b.n	8007802 <SX1276OnDio0Irq+0x37a>
 80077c2:	46c0      	nop			@ (mov r8, r8)
 80077c4:	200004c8 	.word	0x200004c8
 80077c8:	20000548 	.word	0x20000548
 80077cc:	20000560 	.word	0x20000560
 80077d0:	200003c0 	.word	0x200003c0
 80077d4:	20000502 	.word	0x20000502
 80077d8:	200003c4 	.word	0x200003c4
 80077dc:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80077e0:	210e      	movs	r1, #14
 80077e2:	187b      	adds	r3, r7, r1
 80077e4:	2200      	movs	r2, #0
 80077e6:	5e9b      	ldrsh	r3, [r3, r2]
 80077e8:	111b      	asrs	r3, r3, #4
 80077ea:	b21b      	sxth	r3, r3
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	187b      	adds	r3, r7, r1
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	18d3      	adds	r3, r2, r3
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	3ba4      	subs	r3, #164	@ 0xa4
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	b219      	sxth	r1, r3
 80077fc:	4b34      	ldr	r3, [pc, #208]	@ (80078d0 <SX1276OnDio0Irq+0x448>)
 80077fe:	2262      	movs	r2, #98	@ 0x62
 8007800:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8007802:	2013      	movs	r0, #19
 8007804:	f7ff fc70 	bl	80070e8 <SX1276Read>
 8007808:	0003      	movs	r3, r0
 800780a:	0019      	movs	r1, r3
 800780c:	4b30      	ldr	r3, [pc, #192]	@ (80078d0 <SX1276OnDio0Irq+0x448>)
 800780e:	2264      	movs	r2, #100	@ 0x64
 8007810:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8007812:	2010      	movs	r0, #16
 8007814:	f7ff fc68 	bl	80070e8 <SX1276Read>
 8007818:	0003      	movs	r3, r0
 800781a:	0019      	movs	r1, r3
 800781c:	200d      	movs	r0, #13
 800781e:	f7ff fc4f 	bl	80070c0 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 8007822:	4b2b      	ldr	r3, [pc, #172]	@ (80078d0 <SX1276OnDio0Irq+0x448>)
 8007824:	2264      	movs	r2, #100	@ 0x64
 8007826:	5c9a      	ldrb	r2, [r3, r2]
 8007828:	4b2a      	ldr	r3, [pc, #168]	@ (80078d4 <SX1276OnDio0Irq+0x44c>)
 800782a:	0011      	movs	r1, r2
 800782c:	0018      	movs	r0, r3
 800782e:	f7ff fd06 	bl	800723e <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8007832:	4b27      	ldr	r3, [pc, #156]	@ (80078d0 <SX1276OnDio0Irq+0x448>)
 8007834:	2256      	movs	r2, #86	@ 0x56
 8007836:	5c9b      	ldrb	r3, [r3, r2]
 8007838:	2201      	movs	r2, #1
 800783a:	4053      	eors	r3, r2
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	d002      	beq.n	8007848 <SX1276OnDio0Irq+0x3c0>
                        SX1276.Settings.State = RF_IDLE;
 8007842:	4b23      	ldr	r3, [pc, #140]	@ (80078d0 <SX1276OnDio0Irq+0x448>)
 8007844:	2200      	movs	r2, #0
 8007846:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 8007848:	4b23      	ldr	r3, [pc, #140]	@ (80078d8 <SX1276OnDio0Irq+0x450>)
 800784a:	0018      	movs	r0, r3
 800784c:	f00d fc16 	bl	801507c <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8007850:	4b22      	ldr	r3, [pc, #136]	@ (80078dc <SX1276OnDio0Irq+0x454>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d017      	beq.n	8007888 <SX1276OnDio0Irq+0x400>
 8007858:	4b20      	ldr	r3, [pc, #128]	@ (80078dc <SX1276OnDio0Irq+0x454>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d012      	beq.n	8007888 <SX1276OnDio0Irq+0x400>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8007862:	4b1e      	ldr	r3, [pc, #120]	@ (80078dc <SX1276OnDio0Irq+0x454>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	689c      	ldr	r4, [r3, #8]
 8007868:	4b19      	ldr	r3, [pc, #100]	@ (80078d0 <SX1276OnDio0Irq+0x448>)
 800786a:	2264      	movs	r2, #100	@ 0x64
 800786c:	5c9b      	ldrb	r3, [r3, r2]
 800786e:	001d      	movs	r5, r3
 8007870:	4b17      	ldr	r3, [pc, #92]	@ (80078d0 <SX1276OnDio0Irq+0x448>)
 8007872:	2262      	movs	r2, #98	@ 0x62
 8007874:	5e9a      	ldrsh	r2, [r3, r2]
 8007876:	4b16      	ldr	r3, [pc, #88]	@ (80078d0 <SX1276OnDio0Irq+0x448>)
 8007878:	2160      	movs	r1, #96	@ 0x60
 800787a:	565b      	ldrsb	r3, [r3, r1]
 800787c:	4815      	ldr	r0, [pc, #84]	@ (80078d4 <SX1276OnDio0Irq+0x44c>)
 800787e:	0029      	movs	r1, r5
 8007880:	47a0      	blx	r4
                break;
 8007882:	e001      	b.n	8007888 <SX1276OnDio0Irq+0x400>
                        break;
 8007884:	46c0      	nop			@ (mov r8, r8)
 8007886:	e01f      	b.n	80078c8 <SX1276OnDio0Irq+0x440>
                break;
 8007888:	46c0      	nop			@ (mov r8, r8)
            break;
 800788a:	e01d      	b.n	80078c8 <SX1276OnDio0Irq+0x440>
            TimerStop( &TxTimeoutTimer );
 800788c:	4b14      	ldr	r3, [pc, #80]	@ (80078e0 <SX1276OnDio0Irq+0x458>)
 800788e:	0018      	movs	r0, r3
 8007890:	f00d fbf4 	bl	801507c <TimerStop>
            switch( SX1276.Settings.Modem )
 8007894:	4b0e      	ldr	r3, [pc, #56]	@ (80078d0 <SX1276OnDio0Irq+0x448>)
 8007896:	795b      	ldrb	r3, [r3, #5]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d103      	bne.n	80078a4 <SX1276OnDio0Irq+0x41c>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800789c:	2108      	movs	r1, #8
 800789e:	2012      	movs	r0, #18
 80078a0:	f7ff fc0e 	bl	80070c0 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80078a4:	4b0a      	ldr	r3, [pc, #40]	@ (80078d0 <SX1276OnDio0Irq+0x448>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80078aa:	4b0c      	ldr	r3, [pc, #48]	@ (80078dc <SX1276OnDio0Irq+0x454>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d008      	beq.n	80078c4 <SX1276OnDio0Irq+0x43c>
 80078b2:	4b0a      	ldr	r3, [pc, #40]	@ (80078dc <SX1276OnDio0Irq+0x454>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d003      	beq.n	80078c4 <SX1276OnDio0Irq+0x43c>
                    RadioEvents->TxDone( );
 80078bc:	4b07      	ldr	r3, [pc, #28]	@ (80078dc <SX1276OnDio0Irq+0x454>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4798      	blx	r3
                break;
 80078c4:	46c0      	nop			@ (mov r8, r8)
            break;
 80078c6:	46c0      	nop			@ (mov r8, r8)
    }
}
 80078c8:	46c0      	nop			@ (mov r8, r8)
 80078ca:	46bd      	mov	sp, r7
 80078cc:	b004      	add	sp, #16
 80078ce:	bdb0      	pop	{r4, r5, r7, pc}
 80078d0:	200004c8 	.word	0x200004c8
 80078d4:	200003c4 	.word	0x200003c4
 80078d8:	20000548 	.word	0x20000548
 80078dc:	200003c0 	.word	0x200003c0
 80078e0:	20000530 	.word	0x20000530

080078e4 <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void* context )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 80078ec:	4b61      	ldr	r3, [pc, #388]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 80078ee:	791b      	ldrb	r3, [r3, #4]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d003      	beq.n	80078fc <SX1276OnDio1Irq+0x18>
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d100      	bne.n	80078fa <SX1276OnDio1Irq+0x16>
 80078f8:	e07c      	b.n	80079f4 <SX1276OnDio1Irq+0x110>
            default:
                break;
            }
            break;
        default:
            break;
 80078fa:	e0b7      	b.n	8007a6c <SX1276OnDio1Irq+0x188>
            switch( SX1276.Settings.Modem )
 80078fc:	4b5d      	ldr	r3, [pc, #372]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 80078fe:	795b      	ldrb	r3, [r3, #5]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <SX1276OnDio1Irq+0x26>
 8007904:	2b01      	cmp	r3, #1
 8007906:	d05b      	beq.n	80079c0 <SX1276OnDio1Irq+0xdc>
                break;
 8007908:	e073      	b.n	80079f2 <SX1276OnDio1Irq+0x10e>
                TimerStop( &RxTimeoutSyncWord );
 800790a:	4b5b      	ldr	r3, [pc, #364]	@ (8007a78 <SX1276OnDio1Irq+0x194>)
 800790c:	0018      	movs	r0, r3
 800790e:	f00d fbb5 	bl	801507c <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8007912:	4b58      	ldr	r3, [pc, #352]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 8007914:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8007916:	2b00      	cmp	r3, #0
 8007918:	d118      	bne.n	800794c <SX1276OnDio1Irq+0x68>
 800791a:	4b56      	ldr	r3, [pc, #344]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 800791c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800791e:	2b00      	cmp	r3, #0
 8007920:	d114      	bne.n	800794c <SX1276OnDio1Irq+0x68>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8007922:	4b54      	ldr	r3, [pc, #336]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 8007924:	2222      	movs	r2, #34	@ 0x22
 8007926:	5c9b      	ldrb	r3, [r3, r2]
 8007928:	2201      	movs	r2, #1
 800792a:	4053      	eors	r3, r2
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b00      	cmp	r3, #0
 8007930:	d005      	beq.n	800793e <SX1276OnDio1Irq+0x5a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8007932:	4b52      	ldr	r3, [pc, #328]	@ (8007a7c <SX1276OnDio1Irq+0x198>)
 8007934:	2101      	movs	r1, #1
 8007936:	0018      	movs	r0, r3
 8007938:	f7ff fc81 	bl	800723e <SX1276ReadFifo>
 800793c:	e006      	b.n	800794c <SX1276OnDio1Irq+0x68>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800793e:	2032      	movs	r0, #50	@ 0x32
 8007940:	f7ff fbd2 	bl	80070e8 <SX1276Read>
 8007944:	0003      	movs	r3, r0
 8007946:	001a      	movs	r2, r3
 8007948:	4b4a      	ldr	r3, [pc, #296]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 800794a:	875a      	strh	r2, [r3, #58]	@ 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 800794c:	4b49      	ldr	r3, [pc, #292]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 800794e:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8007950:	001a      	movs	r2, r3
 8007952:	4b48      	ldr	r3, [pc, #288]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 8007954:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	4a46      	ldr	r2, [pc, #280]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 800795a:	213e      	movs	r1, #62	@ 0x3e
 800795c:	5c52      	ldrb	r2, [r2, r1]
 800795e:	4293      	cmp	r3, r2
 8007960:	db19      	blt.n	8007996 <SX1276OnDio1Irq+0xb2>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8007962:	4b44      	ldr	r3, [pc, #272]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 8007964:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8007966:	001a      	movs	r2, r3
 8007968:	4b45      	ldr	r3, [pc, #276]	@ (8007a80 <SX1276OnDio1Irq+0x19c>)
 800796a:	18d2      	adds	r2, r2, r3
 800796c:	4b41      	ldr	r3, [pc, #260]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 800796e:	213e      	movs	r1, #62	@ 0x3e
 8007970:	5c5b      	ldrb	r3, [r3, r1]
 8007972:	3b01      	subs	r3, #1
 8007974:	b2db      	uxtb	r3, r3
 8007976:	0019      	movs	r1, r3
 8007978:	0010      	movs	r0, r2
 800797a:	f7ff fc60 	bl	800723e <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 800797e:	4b3d      	ldr	r3, [pc, #244]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 8007980:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8007982:	4a3c      	ldr	r2, [pc, #240]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 8007984:	213e      	movs	r1, #62	@ 0x3e
 8007986:	5c52      	ldrb	r2, [r2, r1]
 8007988:	189b      	adds	r3, r3, r2
 800798a:	b29b      	uxth	r3, r3
 800798c:	3b01      	subs	r3, #1
 800798e:	b29a      	uxth	r2, r3
 8007990:	4b38      	ldr	r3, [pc, #224]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 8007992:	879a      	strh	r2, [r3, #60]	@ 0x3c
                break;
 8007994:	e02d      	b.n	80079f2 <SX1276OnDio1Irq+0x10e>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8007996:	4b37      	ldr	r3, [pc, #220]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 8007998:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800799a:	001a      	movs	r2, r3
 800799c:	4b38      	ldr	r3, [pc, #224]	@ (8007a80 <SX1276OnDio1Irq+0x19c>)
 800799e:	18d0      	adds	r0, r2, r3
 80079a0:	4b34      	ldr	r3, [pc, #208]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 80079a2:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	4b33      	ldr	r3, [pc, #204]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 80079a8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	0019      	movs	r1, r3
 80079b2:	f7ff fc44 	bl	800723e <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80079b6:	4b2f      	ldr	r3, [pc, #188]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 80079b8:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 80079ba:	4b2e      	ldr	r3, [pc, #184]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 80079bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
                break;
 80079be:	e018      	b.n	80079f2 <SX1276OnDio1Irq+0x10e>
                TimerStop( &RxTimeoutTimer );
 80079c0:	4b30      	ldr	r3, [pc, #192]	@ (8007a84 <SX1276OnDio1Irq+0x1a0>)
 80079c2:	0018      	movs	r0, r3
 80079c4:	f00d fb5a 	bl	801507c <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 80079c8:	2180      	movs	r1, #128	@ 0x80
 80079ca:	2012      	movs	r0, #18
 80079cc:	f7ff fb78 	bl	80070c0 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80079d0:	4b28      	ldr	r3, [pc, #160]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80079d6:	4b2c      	ldr	r3, [pc, #176]	@ (8007a88 <SX1276OnDio1Irq+0x1a4>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d008      	beq.n	80079f0 <SX1276OnDio1Irq+0x10c>
 80079de:	4b2a      	ldr	r3, [pc, #168]	@ (8007a88 <SX1276OnDio1Irq+0x1a4>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d003      	beq.n	80079f0 <SX1276OnDio1Irq+0x10c>
                    RadioEvents->RxTimeout( );
 80079e8:	4b27      	ldr	r3, [pc, #156]	@ (8007a88 <SX1276OnDio1Irq+0x1a4>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	4798      	blx	r3
                break;
 80079f0:	46c0      	nop			@ (mov r8, r8)
            break;
 80079f2:	e03b      	b.n	8007a6c <SX1276OnDio1Irq+0x188>
            switch( SX1276.Settings.Modem )
 80079f4:	4b1f      	ldr	r3, [pc, #124]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 80079f6:	795b      	ldrb	r3, [r3, #5]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d135      	bne.n	8007a68 <SX1276OnDio1Irq+0x184>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80079fc:	4b1d      	ldr	r3, [pc, #116]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 80079fe:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8007a00:	001a      	movs	r2, r3
 8007a02:	4b1c      	ldr	r3, [pc, #112]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 8007a04:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	4a1a      	ldr	r2, [pc, #104]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 8007a0a:	213f      	movs	r1, #63	@ 0x3f
 8007a0c:	5c52      	ldrb	r2, [r2, r1]
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	dd15      	ble.n	8007a3e <SX1276OnDio1Irq+0x15a>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8007a12:	4b18      	ldr	r3, [pc, #96]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 8007a14:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8007a16:	001a      	movs	r2, r3
 8007a18:	4b19      	ldr	r3, [pc, #100]	@ (8007a80 <SX1276OnDio1Irq+0x19c>)
 8007a1a:	18d2      	adds	r2, r2, r3
 8007a1c:	4b15      	ldr	r3, [pc, #84]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 8007a1e:	213f      	movs	r1, #63	@ 0x3f
 8007a20:	5c5b      	ldrb	r3, [r3, r1]
 8007a22:	0019      	movs	r1, r3
 8007a24:	0010      	movs	r0, r2
 8007a26:	f7ff fbf8 	bl	800721a <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8007a2a:	4b12      	ldr	r3, [pc, #72]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 8007a2c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8007a2e:	4a11      	ldr	r2, [pc, #68]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 8007a30:	213f      	movs	r1, #63	@ 0x3f
 8007a32:	5c52      	ldrb	r2, [r2, r1]
 8007a34:	189b      	adds	r3, r3, r2
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	4b0e      	ldr	r3, [pc, #56]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 8007a3a:	879a      	strh	r2, [r3, #60]	@ 0x3c
                break;
 8007a3c:	e015      	b.n	8007a6a <SX1276OnDio1Irq+0x186>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8007a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 8007a40:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8007a42:	001a      	movs	r2, r3
 8007a44:	4b0e      	ldr	r3, [pc, #56]	@ (8007a80 <SX1276OnDio1Irq+0x19c>)
 8007a46:	18d0      	adds	r0, r2, r3
 8007a48:	4b0a      	ldr	r3, [pc, #40]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 8007a4a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	4b09      	ldr	r3, [pc, #36]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 8007a50:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	0019      	movs	r1, r3
 8007a5a:	f7ff fbde 	bl	800721a <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8007a5e:	4b05      	ldr	r3, [pc, #20]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 8007a60:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 8007a62:	4b04      	ldr	r3, [pc, #16]	@ (8007a74 <SX1276OnDio1Irq+0x190>)
 8007a64:	879a      	strh	r2, [r3, #60]	@ 0x3c
                break;
 8007a66:	e000      	b.n	8007a6a <SX1276OnDio1Irq+0x186>
                break;
 8007a68:	46c0      	nop			@ (mov r8, r8)
            break;
 8007a6a:	46c0      	nop			@ (mov r8, r8)
    }
}
 8007a6c:	46c0      	nop			@ (mov r8, r8)
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	b002      	add	sp, #8
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	200004c8 	.word	0x200004c8
 8007a78:	20000560 	.word	0x20000560
 8007a7c:	20000502 	.word	0x20000502
 8007a80:	200003c4 	.word	0x200003c4
 8007a84:	20000548 	.word	0x20000548
 8007a88:	200003c0 	.word	0x200003c0

08007a8c <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void* context )
{
 8007a8c:	b590      	push	{r4, r7, lr}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
    uint32_t afcChannel = 0;
 8007a94:	2300      	movs	r3, #0
 8007a96:	617b      	str	r3, [r7, #20]

    switch( SX1276.Settings.State )
 8007a98:	4b5d      	ldr	r3, [pc, #372]	@ (8007c10 <SX1276OnDio2Irq+0x184>)
 8007a9a:	791b      	ldrb	r3, [r3, #4]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d003      	beq.n	8007aa8 <SX1276OnDio2Irq+0x1c>
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d100      	bne.n	8007aa6 <SX1276OnDio2Irq+0x1a>
 8007aa4:	e083      	b.n	8007bae <SX1276OnDio2Irq+0x122>
            default:
                break;
            }
            break;
        default:
            break;
 8007aa6:	e0ae      	b.n	8007c06 <SX1276OnDio2Irq+0x17a>
            switch( SX1276.Settings.Modem )
 8007aa8:	4b59      	ldr	r3, [pc, #356]	@ (8007c10 <SX1276OnDio2Irq+0x184>)
 8007aaa:	795b      	ldrb	r3, [r3, #5]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d002      	beq.n	8007ab6 <SX1276OnDio2Irq+0x2a>
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d058      	beq.n	8007b66 <SX1276OnDio2Irq+0xda>
                break;
 8007ab4:	e07a      	b.n	8007bac <SX1276OnDio2Irq+0x120>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8007ab6:	4b56      	ldr	r3, [pc, #344]	@ (8007c10 <SX1276OnDio2Irq+0x184>)
 8007ab8:	2230      	movs	r2, #48	@ 0x30
 8007aba:	2101      	movs	r1, #1
 8007abc:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8007abe:	4b54      	ldr	r3, [pc, #336]	@ (8007c10 <SX1276OnDio2Irq+0x184>)
 8007ac0:	2230      	movs	r2, #48	@ 0x30
 8007ac2:	5c9b      	ldrb	r3, [r3, r2]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d16e      	bne.n	8007ba6 <SX1276OnDio2Irq+0x11a>
 8007ac8:	4b51      	ldr	r3, [pc, #324]	@ (8007c10 <SX1276OnDio2Irq+0x184>)
 8007aca:	2231      	movs	r2, #49	@ 0x31
 8007acc:	5c9b      	ldrb	r3, [r3, r2]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d169      	bne.n	8007ba6 <SX1276OnDio2Irq+0x11a>
                    TimerStop( &RxTimeoutSyncWord );
 8007ad2:	4b50      	ldr	r3, [pc, #320]	@ (8007c14 <SX1276OnDio2Irq+0x188>)
 8007ad4:	0018      	movs	r0, r3
 8007ad6:	f00d fad1 	bl	801507c <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8007ada:	4b4d      	ldr	r3, [pc, #308]	@ (8007c10 <SX1276OnDio2Irq+0x184>)
 8007adc:	2231      	movs	r2, #49	@ 0x31
 8007ade:	2101      	movs	r1, #1
 8007ae0:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8007ae2:	2011      	movs	r0, #17
 8007ae4:	f7ff fb00 	bl	80070e8 <SX1276Read>
 8007ae8:	0003      	movs	r3, r0
 8007aea:	085b      	lsrs	r3, r3, #1
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	425b      	negs	r3, r3
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	b259      	sxtb	r1, r3
 8007af4:	4b46      	ldr	r3, [pc, #280]	@ (8007c10 <SX1276OnDio2Irq+0x184>)
 8007af6:	2232      	movs	r2, #50	@ 0x32
 8007af8:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8007afa:	201b      	movs	r0, #27
 8007afc:	f7ff faf4 	bl	80070e8 <SX1276Read>
 8007b00:	0003      	movs	r3, r0
 8007b02:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8007b04:	201c      	movs	r0, #28
 8007b06:	f7ff faef 	bl	80070e8 <SX1276Read>
 8007b0a:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8007b0c:	4323      	orrs	r3, r4
 8007b0e:	617b      	str	r3, [r7, #20]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	0a1b      	lsrs	r3, r3, #8
 8007b14:	613b      	str	r3, [r7, #16]
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	021b      	lsls	r3, r3, #8
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	60fb      	str	r3, [r7, #12]
 8007b20:	6939      	ldr	r1, [r7, #16]
 8007b22:	000b      	movs	r3, r1
 8007b24:	015b      	lsls	r3, r3, #5
 8007b26:	1a5b      	subs	r3, r3, r1
 8007b28:	019a      	lsls	r2, r3, #6
 8007b2a:	1ad2      	subs	r2, r2, r3
 8007b2c:	00d2      	lsls	r2, r2, #3
 8007b2e:	1850      	adds	r0, r2, r1
 8007b30:	68f9      	ldr	r1, [r7, #12]
 8007b32:	000b      	movs	r3, r1
 8007b34:	015b      	lsls	r3, r3, #5
 8007b36:	1a5b      	subs	r3, r3, r1
 8007b38:	019a      	lsls	r2, r3, #6
 8007b3a:	1ad2      	subs	r2, r2, r3
 8007b3c:	00d2      	lsls	r2, r2, #3
 8007b3e:	1853      	adds	r3, r2, r1
 8007b40:	3380      	adds	r3, #128	@ 0x80
 8007b42:	0a1b      	lsrs	r3, r3, #8
 8007b44:	18c3      	adds	r3, r0, r3
 8007b46:	001a      	movs	r2, r3
 8007b48:	4b31      	ldr	r3, [pc, #196]	@ (8007c10 <SX1276OnDio2Irq+0x184>)
 8007b4a:	635a      	str	r2, [r3, #52]	@ 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8007b4c:	200c      	movs	r0, #12
 8007b4e:	f7ff facb 	bl	80070e8 <SX1276Read>
 8007b52:	0003      	movs	r3, r0
 8007b54:	095b      	lsrs	r3, r3, #5
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2207      	movs	r2, #7
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	b2d9      	uxtb	r1, r3
 8007b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8007c10 <SX1276OnDio2Irq+0x184>)
 8007b60:	2238      	movs	r2, #56	@ 0x38
 8007b62:	5499      	strb	r1, [r3, r2]
                break;
 8007b64:	e01f      	b.n	8007ba6 <SX1276OnDio2Irq+0x11a>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8007b66:	4b2a      	ldr	r3, [pc, #168]	@ (8007c10 <SX1276OnDio2Irq+0x184>)
 8007b68:	2253      	movs	r2, #83	@ 0x53
 8007b6a:	5c9b      	ldrb	r3, [r3, r2]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d01c      	beq.n	8007baa <SX1276OnDio2Irq+0x11e>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8007b70:	2102      	movs	r1, #2
 8007b72:	2012      	movs	r0, #18
 8007b74:	f7ff faa4 	bl	80070c0 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8007b78:	4b27      	ldr	r3, [pc, #156]	@ (8007c18 <SX1276OnDio2Irq+0x18c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d014      	beq.n	8007baa <SX1276OnDio2Irq+0x11e>
 8007b80:	4b25      	ldr	r3, [pc, #148]	@ (8007c18 <SX1276OnDio2Irq+0x18c>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00f      	beq.n	8007baa <SX1276OnDio2Irq+0x11e>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8007b8a:	4b23      	ldr	r3, [pc, #140]	@ (8007c18 <SX1276OnDio2Irq+0x18c>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	695c      	ldr	r4, [r3, #20]
 8007b90:	201c      	movs	r0, #28
 8007b92:	f7ff faa9 	bl	80070e8 <SX1276Read>
 8007b96:	0003      	movs	r3, r0
 8007b98:	001a      	movs	r2, r3
 8007b9a:	233f      	movs	r3, #63	@ 0x3f
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	0018      	movs	r0, r3
 8007ba2:	47a0      	blx	r4
                break;
 8007ba4:	e001      	b.n	8007baa <SX1276OnDio2Irq+0x11e>
                break;
 8007ba6:	46c0      	nop			@ (mov r8, r8)
 8007ba8:	e02d      	b.n	8007c06 <SX1276OnDio2Irq+0x17a>
                break;
 8007baa:	46c0      	nop			@ (mov r8, r8)
            break;
 8007bac:	e02b      	b.n	8007c06 <SX1276OnDio2Irq+0x17a>
            switch( SX1276.Settings.Modem )
 8007bae:	4b18      	ldr	r3, [pc, #96]	@ (8007c10 <SX1276OnDio2Irq+0x184>)
 8007bb0:	795b      	ldrb	r3, [r3, #5]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d021      	beq.n	8007bfa <SX1276OnDio2Irq+0x16e>
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d121      	bne.n	8007bfe <SX1276OnDio2Irq+0x172>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8007bba:	4b15      	ldr	r3, [pc, #84]	@ (8007c10 <SX1276OnDio2Irq+0x184>)
 8007bbc:	2253      	movs	r2, #83	@ 0x53
 8007bbe:	5c9b      	ldrb	r3, [r3, r2]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d01e      	beq.n	8007c02 <SX1276OnDio2Irq+0x176>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8007bc4:	2102      	movs	r1, #2
 8007bc6:	2012      	movs	r0, #18
 8007bc8:	f7ff fa7a 	bl	80070c0 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8007bcc:	4b12      	ldr	r3, [pc, #72]	@ (8007c18 <SX1276OnDio2Irq+0x18c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d016      	beq.n	8007c02 <SX1276OnDio2Irq+0x176>
 8007bd4:	4b10      	ldr	r3, [pc, #64]	@ (8007c18 <SX1276OnDio2Irq+0x18c>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d011      	beq.n	8007c02 <SX1276OnDio2Irq+0x176>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8007bde:	4b0e      	ldr	r3, [pc, #56]	@ (8007c18 <SX1276OnDio2Irq+0x18c>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	695c      	ldr	r4, [r3, #20]
 8007be4:	201c      	movs	r0, #28
 8007be6:	f7ff fa7f 	bl	80070e8 <SX1276Read>
 8007bea:	0003      	movs	r3, r0
 8007bec:	001a      	movs	r2, r3
 8007bee:	233f      	movs	r3, #63	@ 0x3f
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	0018      	movs	r0, r3
 8007bf6:	47a0      	blx	r4
                break;
 8007bf8:	e003      	b.n	8007c02 <SX1276OnDio2Irq+0x176>
                break;
 8007bfa:	46c0      	nop			@ (mov r8, r8)
 8007bfc:	e002      	b.n	8007c04 <SX1276OnDio2Irq+0x178>
                break;
 8007bfe:	46c0      	nop			@ (mov r8, r8)
 8007c00:	e000      	b.n	8007c04 <SX1276OnDio2Irq+0x178>
                break;
 8007c02:	46c0      	nop			@ (mov r8, r8)
            break;
 8007c04:	46c0      	nop			@ (mov r8, r8)
    }
}
 8007c06:	46c0      	nop			@ (mov r8, r8)
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	b007      	add	sp, #28
 8007c0c:	bd90      	pop	{r4, r7, pc}
 8007c0e:	46c0      	nop			@ (mov r8, r8)
 8007c10:	200004c8 	.word	0x200004c8
 8007c14:	20000560 	.word	0x20000560
 8007c18:	200003c0 	.word	0x200003c0

08007c1c <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void* context )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 8007c24:	4b1e      	ldr	r3, [pc, #120]	@ (8007ca0 <SX1276OnDio3Irq+0x84>)
 8007c26:	795b      	ldrb	r3, [r3, #5]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d031      	beq.n	8007c90 <SX1276OnDio3Irq+0x74>
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d000      	beq.n	8007c32 <SX1276OnDio3Irq+0x16>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 8007c30:	e031      	b.n	8007c96 <SX1276OnDio3Irq+0x7a>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8007c32:	2012      	movs	r0, #18
 8007c34:	f7ff fa58 	bl	80070e8 <SX1276Read>
 8007c38:	0003      	movs	r3, r0
 8007c3a:	001a      	movs	r2, r3
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	4013      	ands	r3, r2
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d112      	bne.n	8007c6a <SX1276OnDio3Irq+0x4e>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8007c44:	2105      	movs	r1, #5
 8007c46:	2012      	movs	r0, #18
 8007c48:	f7ff fa3a 	bl	80070c0 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007c4c:	4b15      	ldr	r3, [pc, #84]	@ (8007ca4 <SX1276OnDio3Irq+0x88>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d01f      	beq.n	8007c94 <SX1276OnDio3Irq+0x78>
 8007c54:	4b13      	ldr	r3, [pc, #76]	@ (8007ca4 <SX1276OnDio3Irq+0x88>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d01a      	beq.n	8007c94 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( true );
 8007c5e:	4b11      	ldr	r3, [pc, #68]	@ (8007ca4 <SX1276OnDio3Irq+0x88>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	2001      	movs	r0, #1
 8007c66:	4798      	blx	r3
        break;
 8007c68:	e014      	b.n	8007c94 <SX1276OnDio3Irq+0x78>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8007c6a:	2104      	movs	r1, #4
 8007c6c:	2012      	movs	r0, #18
 8007c6e:	f7ff fa27 	bl	80070c0 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007c72:	4b0c      	ldr	r3, [pc, #48]	@ (8007ca4 <SX1276OnDio3Irq+0x88>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00c      	beq.n	8007c94 <SX1276OnDio3Irq+0x78>
 8007c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8007ca4 <SX1276OnDio3Irq+0x88>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d007      	beq.n	8007c94 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( false );
 8007c84:	4b07      	ldr	r3, [pc, #28]	@ (8007ca4 <SX1276OnDio3Irq+0x88>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	4798      	blx	r3
        break;
 8007c8e:	e001      	b.n	8007c94 <SX1276OnDio3Irq+0x78>
        break;
 8007c90:	46c0      	nop			@ (mov r8, r8)
 8007c92:	e000      	b.n	8007c96 <SX1276OnDio3Irq+0x7a>
        break;
 8007c94:	46c0      	nop			@ (mov r8, r8)
    }
}
 8007c96:	46c0      	nop			@ (mov r8, r8)
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	b002      	add	sp, #8
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	46c0      	nop			@ (mov r8, r8)
 8007ca0:	200004c8 	.word	0x200004c8
 8007ca4:	200003c0 	.word	0x200003c0

08007ca8 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void* context )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 8007cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ce0 <SX1276OnDio4Irq+0x38>)
 8007cb2:	795b      	ldrb	r3, [r3, #5]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d002      	beq.n	8007cbe <SX1276OnDio4Irq+0x16>
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d00a      	beq.n	8007cd2 <SX1276OnDio4Irq+0x2a>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 8007cbc:	e00c      	b.n	8007cd8 <SX1276OnDio4Irq+0x30>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8007cbe:	4b08      	ldr	r3, [pc, #32]	@ (8007ce0 <SX1276OnDio4Irq+0x38>)
 8007cc0:	2230      	movs	r2, #48	@ 0x30
 8007cc2:	5c9b      	ldrb	r3, [r3, r2]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d106      	bne.n	8007cd6 <SX1276OnDio4Irq+0x2e>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8007cc8:	4b05      	ldr	r3, [pc, #20]	@ (8007ce0 <SX1276OnDio4Irq+0x38>)
 8007cca:	2230      	movs	r2, #48	@ 0x30
 8007ccc:	2101      	movs	r1, #1
 8007cce:	5499      	strb	r1, [r3, r2]
        break;
 8007cd0:	e001      	b.n	8007cd6 <SX1276OnDio4Irq+0x2e>
        break;
 8007cd2:	46c0      	nop			@ (mov r8, r8)
 8007cd4:	e000      	b.n	8007cd8 <SX1276OnDio4Irq+0x30>
        break;
 8007cd6:	46c0      	nop			@ (mov r8, r8)
    }
}
 8007cd8:	46c0      	nop			@ (mov r8, r8)
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	b002      	add	sp, #8
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	200004c8 	.word	0x200004c8

08007ce4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8007ce8:	4b17      	ldr	r3, [pc, #92]	@ (8007d48 <SystemInit+0x64>)
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	4b16      	ldr	r3, [pc, #88]	@ (8007d48 <SystemInit+0x64>)
 8007cee:	2180      	movs	r1, #128	@ 0x80
 8007cf0:	0049      	lsls	r1, r1, #1
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8007cf6:	4b14      	ldr	r3, [pc, #80]	@ (8007d48 <SystemInit+0x64>)
 8007cf8:	68da      	ldr	r2, [r3, #12]
 8007cfa:	4b13      	ldr	r3, [pc, #76]	@ (8007d48 <SystemInit+0x64>)
 8007cfc:	4913      	ldr	r1, [pc, #76]	@ (8007d4c <SystemInit+0x68>)
 8007cfe:	400a      	ands	r2, r1
 8007d00:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8007d02:	4b11      	ldr	r3, [pc, #68]	@ (8007d48 <SystemInit+0x64>)
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4b10      	ldr	r3, [pc, #64]	@ (8007d48 <SystemInit+0x64>)
 8007d08:	4911      	ldr	r1, [pc, #68]	@ (8007d50 <SystemInit+0x6c>)
 8007d0a:	400a      	ands	r2, r1
 8007d0c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8007d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8007d48 <SystemInit+0x64>)
 8007d10:	689a      	ldr	r2, [r3, #8]
 8007d12:	4b0d      	ldr	r3, [pc, #52]	@ (8007d48 <SystemInit+0x64>)
 8007d14:	2101      	movs	r1, #1
 8007d16:	438a      	bics	r2, r1
 8007d18:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8007d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8007d48 <SystemInit+0x64>)
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8007d48 <SystemInit+0x64>)
 8007d20:	490c      	ldr	r1, [pc, #48]	@ (8007d54 <SystemInit+0x70>)
 8007d22:	400a      	ands	r2, r1
 8007d24:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8007d26:	4b08      	ldr	r3, [pc, #32]	@ (8007d48 <SystemInit+0x64>)
 8007d28:	68da      	ldr	r2, [r3, #12]
 8007d2a:	4b07      	ldr	r3, [pc, #28]	@ (8007d48 <SystemInit+0x64>)
 8007d2c:	490a      	ldr	r1, [pc, #40]	@ (8007d58 <SystemInit+0x74>)
 8007d2e:	400a      	ands	r2, r1
 8007d30:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8007d32:	4b05      	ldr	r3, [pc, #20]	@ (8007d48 <SystemInit+0x64>)
 8007d34:	2200      	movs	r2, #0
 8007d36:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007d38:	4b08      	ldr	r3, [pc, #32]	@ (8007d5c <SystemInit+0x78>)
 8007d3a:	2280      	movs	r2, #128	@ 0x80
 8007d3c:	0512      	lsls	r2, r2, #20
 8007d3e:	609a      	str	r2, [r3, #8]
#endif
}
 8007d40:	46c0      	nop			@ (mov r8, r8)
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	46c0      	nop			@ (mov r8, r8)
 8007d48:	40021000 	.word	0x40021000
 8007d4c:	88ff400c 	.word	0x88ff400c
 8007d50:	fef6fff6 	.word	0xfef6fff6
 8007d54:	fffbffff 	.word	0xfffbffff
 8007d58:	ff02ffff 	.word	0xff02ffff
 8007d5c:	e000ed00 	.word	0xe000ed00

08007d60 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	781a      	ldrb	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	3301      	adds	r3, #1
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	7852      	ldrb	r2, [r2, #1]
 8007d7a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	3302      	adds	r3, #2
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	7892      	ldrb	r2, [r2, #2]
 8007d84:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	3303      	adds	r3, #3
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	78d2      	ldrb	r2, [r2, #3]
 8007d8e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	3304      	adds	r3, #4
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	7912      	ldrb	r2, [r2, #4]
 8007d98:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	3305      	adds	r3, #5
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	7952      	ldrb	r2, [r2, #5]
 8007da2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	3306      	adds	r3, #6
 8007da8:	683a      	ldr	r2, [r7, #0]
 8007daa:	7992      	ldrb	r2, [r2, #6]
 8007dac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	3307      	adds	r3, #7
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	79d2      	ldrb	r2, [r2, #7]
 8007db6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	3308      	adds	r3, #8
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	7a12      	ldrb	r2, [r2, #8]
 8007dc0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	3309      	adds	r3, #9
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	7a52      	ldrb	r2, [r2, #9]
 8007dca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	330a      	adds	r3, #10
 8007dd0:	683a      	ldr	r2, [r7, #0]
 8007dd2:	7a92      	ldrb	r2, [r2, #10]
 8007dd4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	330b      	adds	r3, #11
 8007dda:	683a      	ldr	r2, [r7, #0]
 8007ddc:	7ad2      	ldrb	r2, [r2, #11]
 8007dde:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	330c      	adds	r3, #12
 8007de4:	683a      	ldr	r2, [r7, #0]
 8007de6:	7b12      	ldrb	r2, [r2, #12]
 8007de8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	330d      	adds	r3, #13
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	7b52      	ldrb	r2, [r2, #13]
 8007df2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	330e      	adds	r3, #14
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	7b92      	ldrb	r2, [r2, #14]
 8007dfc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	330f      	adds	r3, #15
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	7bd2      	ldrb	r2, [r2, #15]
 8007e06:	701a      	strb	r2, [r3, #0]
#endif
}
 8007e08:	46c0      	nop			@ (mov r8, r8)
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	b002      	add	sp, #8
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	1dfb      	adds	r3, r7, #7
 8007e1c:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 8007e1e:	e007      	b.n	8007e30 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	1c53      	adds	r3, r2, #1
 8007e24:	60bb      	str	r3, [r7, #8]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	1c59      	adds	r1, r3, #1
 8007e2a:	60f9      	str	r1, [r7, #12]
 8007e2c:	7812      	ldrb	r2, [r2, #0]
 8007e2e:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 8007e30:	1dfb      	adds	r3, r7, #7
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	1dfa      	adds	r2, r7, #7
 8007e36:	1e59      	subs	r1, r3, #1
 8007e38:	7011      	strb	r1, [r2, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1f0      	bne.n	8007e20 <copy_block_nn+0x10>
}
 8007e3e:	46c0      	nop			@ (mov r8, r8)
 8007e40:	46c0      	nop			@ (mov r8, r8)
 8007e42:	46bd      	mov	sp, r7
 8007e44:	b004      	add	sp, #16
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <xor_block>:

static void xor_block( void *d, const void *s )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	781a      	ldrb	r2, [r3, #0]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	4053      	eors	r3, r2
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	3301      	adds	r3, #1
 8007e66:	7819      	ldrb	r1, [r3, #0]
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	781a      	ldrb	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	3301      	adds	r3, #1
 8007e72:	404a      	eors	r2, r1
 8007e74:	b2d2      	uxtb	r2, r2
 8007e76:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	3302      	adds	r3, #2
 8007e7c:	7819      	ldrb	r1, [r3, #0]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	3302      	adds	r3, #2
 8007e82:	781a      	ldrb	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	3302      	adds	r3, #2
 8007e88:	404a      	eors	r2, r1
 8007e8a:	b2d2      	uxtb	r2, r2
 8007e8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	3303      	adds	r3, #3
 8007e92:	7819      	ldrb	r1, [r3, #0]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	3303      	adds	r3, #3
 8007e98:	781a      	ldrb	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	3303      	adds	r3, #3
 8007e9e:	404a      	eors	r2, r1
 8007ea0:	b2d2      	uxtb	r2, r2
 8007ea2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	3304      	adds	r3, #4
 8007ea8:	7819      	ldrb	r1, [r3, #0]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	3304      	adds	r3, #4
 8007eae:	781a      	ldrb	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	404a      	eors	r2, r1
 8007eb6:	b2d2      	uxtb	r2, r2
 8007eb8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	3305      	adds	r3, #5
 8007ebe:	7819      	ldrb	r1, [r3, #0]
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	3305      	adds	r3, #5
 8007ec4:	781a      	ldrb	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	3305      	adds	r3, #5
 8007eca:	404a      	eors	r2, r1
 8007ecc:	b2d2      	uxtb	r2, r2
 8007ece:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	3306      	adds	r3, #6
 8007ed4:	7819      	ldrb	r1, [r3, #0]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	3306      	adds	r3, #6
 8007eda:	781a      	ldrb	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	3306      	adds	r3, #6
 8007ee0:	404a      	eors	r2, r1
 8007ee2:	b2d2      	uxtb	r2, r2
 8007ee4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	3307      	adds	r3, #7
 8007eea:	7819      	ldrb	r1, [r3, #0]
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	3307      	adds	r3, #7
 8007ef0:	781a      	ldrb	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3307      	adds	r3, #7
 8007ef6:	404a      	eors	r2, r1
 8007ef8:	b2d2      	uxtb	r2, r2
 8007efa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	3308      	adds	r3, #8
 8007f00:	7819      	ldrb	r1, [r3, #0]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	3308      	adds	r3, #8
 8007f06:	781a      	ldrb	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3308      	adds	r3, #8
 8007f0c:	404a      	eors	r2, r1
 8007f0e:	b2d2      	uxtb	r2, r2
 8007f10:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	3309      	adds	r3, #9
 8007f16:	7819      	ldrb	r1, [r3, #0]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	3309      	adds	r3, #9
 8007f1c:	781a      	ldrb	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	3309      	adds	r3, #9
 8007f22:	404a      	eors	r2, r1
 8007f24:	b2d2      	uxtb	r2, r2
 8007f26:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	330a      	adds	r3, #10
 8007f2c:	7819      	ldrb	r1, [r3, #0]
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	330a      	adds	r3, #10
 8007f32:	781a      	ldrb	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	330a      	adds	r3, #10
 8007f38:	404a      	eors	r2, r1
 8007f3a:	b2d2      	uxtb	r2, r2
 8007f3c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	330b      	adds	r3, #11
 8007f42:	7819      	ldrb	r1, [r3, #0]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	330b      	adds	r3, #11
 8007f48:	781a      	ldrb	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	330b      	adds	r3, #11
 8007f4e:	404a      	eors	r2, r1
 8007f50:	b2d2      	uxtb	r2, r2
 8007f52:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	330c      	adds	r3, #12
 8007f58:	7819      	ldrb	r1, [r3, #0]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	330c      	adds	r3, #12
 8007f5e:	781a      	ldrb	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	330c      	adds	r3, #12
 8007f64:	404a      	eors	r2, r1
 8007f66:	b2d2      	uxtb	r2, r2
 8007f68:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	330d      	adds	r3, #13
 8007f6e:	7819      	ldrb	r1, [r3, #0]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	330d      	adds	r3, #13
 8007f74:	781a      	ldrb	r2, [r3, #0]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	330d      	adds	r3, #13
 8007f7a:	404a      	eors	r2, r1
 8007f7c:	b2d2      	uxtb	r2, r2
 8007f7e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	330e      	adds	r3, #14
 8007f84:	7819      	ldrb	r1, [r3, #0]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	330e      	adds	r3, #14
 8007f8a:	781a      	ldrb	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	330e      	adds	r3, #14
 8007f90:	404a      	eors	r2, r1
 8007f92:	b2d2      	uxtb	r2, r2
 8007f94:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	330f      	adds	r3, #15
 8007f9a:	7819      	ldrb	r1, [r3, #0]
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	330f      	adds	r3, #15
 8007fa0:	781a      	ldrb	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	330f      	adds	r3, #15
 8007fa6:	404a      	eors	r2, r1
 8007fa8:	b2d2      	uxtb	r2, r2
 8007faa:	701a      	strb	r2, [r3, #0]
#endif
}
 8007fac:	46c0      	nop			@ (mov r8, r8)
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	b002      	add	sp, #8
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	781a      	ldrb	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	4053      	eors	r3, r2
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	7819      	ldrb	r1, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	781a      	ldrb	r2, [r3, #0]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	404a      	eors	r2, r1
 8007fe2:	b2d2      	uxtb	r2, r2
 8007fe4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	3302      	adds	r3, #2
 8007fea:	7819      	ldrb	r1, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	3302      	adds	r3, #2
 8007ff0:	781a      	ldrb	r2, [r3, #0]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	3302      	adds	r3, #2
 8007ff6:	404a      	eors	r2, r1
 8007ff8:	b2d2      	uxtb	r2, r2
 8007ffa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	3303      	adds	r3, #3
 8008000:	7819      	ldrb	r1, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	3303      	adds	r3, #3
 8008006:	781a      	ldrb	r2, [r3, #0]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	3303      	adds	r3, #3
 800800c:	404a      	eors	r2, r1
 800800e:	b2d2      	uxtb	r2, r2
 8008010:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	3304      	adds	r3, #4
 8008016:	7819      	ldrb	r1, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	3304      	adds	r3, #4
 800801c:	781a      	ldrb	r2, [r3, #0]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3304      	adds	r3, #4
 8008022:	404a      	eors	r2, r1
 8008024:	b2d2      	uxtb	r2, r2
 8008026:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	3305      	adds	r3, #5
 800802c:	7819      	ldrb	r1, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	3305      	adds	r3, #5
 8008032:	781a      	ldrb	r2, [r3, #0]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	3305      	adds	r3, #5
 8008038:	404a      	eors	r2, r1
 800803a:	b2d2      	uxtb	r2, r2
 800803c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	3306      	adds	r3, #6
 8008042:	7819      	ldrb	r1, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3306      	adds	r3, #6
 8008048:	781a      	ldrb	r2, [r3, #0]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	3306      	adds	r3, #6
 800804e:	404a      	eors	r2, r1
 8008050:	b2d2      	uxtb	r2, r2
 8008052:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	3307      	adds	r3, #7
 8008058:	7819      	ldrb	r1, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	3307      	adds	r3, #7
 800805e:	781a      	ldrb	r2, [r3, #0]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	3307      	adds	r3, #7
 8008064:	404a      	eors	r2, r1
 8008066:	b2d2      	uxtb	r2, r2
 8008068:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	3308      	adds	r3, #8
 800806e:	7819      	ldrb	r1, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	3308      	adds	r3, #8
 8008074:	781a      	ldrb	r2, [r3, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	3308      	adds	r3, #8
 800807a:	404a      	eors	r2, r1
 800807c:	b2d2      	uxtb	r2, r2
 800807e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	3309      	adds	r3, #9
 8008084:	7819      	ldrb	r1, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	3309      	adds	r3, #9
 800808a:	781a      	ldrb	r2, [r3, #0]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	3309      	adds	r3, #9
 8008090:	404a      	eors	r2, r1
 8008092:	b2d2      	uxtb	r2, r2
 8008094:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	330a      	adds	r3, #10
 800809a:	7819      	ldrb	r1, [r3, #0]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	330a      	adds	r3, #10
 80080a0:	781a      	ldrb	r2, [r3, #0]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	330a      	adds	r3, #10
 80080a6:	404a      	eors	r2, r1
 80080a8:	b2d2      	uxtb	r2, r2
 80080aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	330b      	adds	r3, #11
 80080b0:	7819      	ldrb	r1, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	330b      	adds	r3, #11
 80080b6:	781a      	ldrb	r2, [r3, #0]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	330b      	adds	r3, #11
 80080bc:	404a      	eors	r2, r1
 80080be:	b2d2      	uxtb	r2, r2
 80080c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	330c      	adds	r3, #12
 80080c6:	7819      	ldrb	r1, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	330c      	adds	r3, #12
 80080cc:	781a      	ldrb	r2, [r3, #0]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	330c      	adds	r3, #12
 80080d2:	404a      	eors	r2, r1
 80080d4:	b2d2      	uxtb	r2, r2
 80080d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	330d      	adds	r3, #13
 80080dc:	7819      	ldrb	r1, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	330d      	adds	r3, #13
 80080e2:	781a      	ldrb	r2, [r3, #0]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	330d      	adds	r3, #13
 80080e8:	404a      	eors	r2, r1
 80080ea:	b2d2      	uxtb	r2, r2
 80080ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	330e      	adds	r3, #14
 80080f2:	7819      	ldrb	r1, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	330e      	adds	r3, #14
 80080f8:	781a      	ldrb	r2, [r3, #0]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	330e      	adds	r3, #14
 80080fe:	404a      	eors	r2, r1
 8008100:	b2d2      	uxtb	r2, r2
 8008102:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	330f      	adds	r3, #15
 8008108:	7819      	ldrb	r1, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	330f      	adds	r3, #15
 800810e:	781a      	ldrb	r2, [r3, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	330f      	adds	r3, #15
 8008114:	404a      	eors	r2, r1
 8008116:	b2d2      	uxtb	r2, r2
 8008118:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800811a:	46c0      	nop			@ (mov r8, r8)
 800811c:	46bd      	mov	sp, r7
 800811e:	b004      	add	sp, #16
 8008120:	bd80      	pop	{r7, pc}

08008122 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b082      	sub	sp, #8
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800812c:	683a      	ldr	r2, [r7, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	0011      	movs	r1, r2
 8008132:	0018      	movs	r0, r3
 8008134:	f7ff fe88 	bl	8007e48 <xor_block>
}
 8008138:	46c0      	nop			@ (mov r8, r8)
 800813a:	46bd      	mov	sp, r7
 800813c:	b002      	add	sp, #8
 800813e:	bd80      	pop	{r7, pc}

08008140 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	001a      	movs	r2, r3
 800814e:	4b4c      	ldr	r3, [pc, #304]	@ (8008280 <shift_sub_rows+0x140>)
 8008150:	5c9a      	ldrb	r2, [r3, r2]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	701a      	strb	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	3304      	adds	r3, #4
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	0019      	movs	r1, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	3304      	adds	r3, #4
 8008162:	4a47      	ldr	r2, [pc, #284]	@ (8008280 <shift_sub_rows+0x140>)
 8008164:	5c52      	ldrb	r2, [r2, r1]
 8008166:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	3308      	adds	r3, #8
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	0019      	movs	r1, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	3308      	adds	r3, #8
 8008174:	4a42      	ldr	r2, [pc, #264]	@ (8008280 <shift_sub_rows+0x140>)
 8008176:	5c52      	ldrb	r2, [r2, r1]
 8008178:	701a      	strb	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	330c      	adds	r3, #12
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	0019      	movs	r1, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	330c      	adds	r3, #12
 8008186:	4a3e      	ldr	r2, [pc, #248]	@ (8008280 <shift_sub_rows+0x140>)
 8008188:	5c52      	ldrb	r2, [r2, r1]
 800818a:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800818c:	200f      	movs	r0, #15
 800818e:	183b      	adds	r3, r7, r0
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	7852      	ldrb	r2, [r2, #1]
 8008194:	701a      	strb	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	3305      	adds	r3, #5
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	0019      	movs	r1, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	3301      	adds	r3, #1
 80081a2:	4a37      	ldr	r2, [pc, #220]	@ (8008280 <shift_sub_rows+0x140>)
 80081a4:	5c52      	ldrb	r2, [r2, r1]
 80081a6:	701a      	strb	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	3309      	adds	r3, #9
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	0019      	movs	r1, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	3305      	adds	r3, #5
 80081b4:	4a32      	ldr	r2, [pc, #200]	@ (8008280 <shift_sub_rows+0x140>)
 80081b6:	5c52      	ldrb	r2, [r2, r1]
 80081b8:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	330d      	adds	r3, #13
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	0019      	movs	r1, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	3309      	adds	r3, #9
 80081c6:	4a2e      	ldr	r2, [pc, #184]	@ (8008280 <shift_sub_rows+0x140>)
 80081c8:	5c52      	ldrb	r2, [r2, r1]
 80081ca:	701a      	strb	r2, [r3, #0]
 80081cc:	183b      	adds	r3, r7, r0
 80081ce:	781a      	ldrb	r2, [r3, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	330d      	adds	r3, #13
 80081d4:	492a      	ldr	r1, [pc, #168]	@ (8008280 <shift_sub_rows+0x140>)
 80081d6:	5c8a      	ldrb	r2, [r1, r2]
 80081d8:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 80081da:	183b      	adds	r3, r7, r0
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	7892      	ldrb	r2, [r2, #2]
 80081e0:	701a      	strb	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	330a      	adds	r3, #10
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	0019      	movs	r1, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3302      	adds	r3, #2
 80081ee:	4a24      	ldr	r2, [pc, #144]	@ (8008280 <shift_sub_rows+0x140>)
 80081f0:	5c52      	ldrb	r2, [r2, r1]
 80081f2:	701a      	strb	r2, [r3, #0]
 80081f4:	183b      	adds	r3, r7, r0
 80081f6:	781a      	ldrb	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	330a      	adds	r3, #10
 80081fc:	4920      	ldr	r1, [pc, #128]	@ (8008280 <shift_sub_rows+0x140>)
 80081fe:	5c8a      	ldrb	r2, [r1, r2]
 8008200:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8008202:	183b      	adds	r3, r7, r0
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	7992      	ldrb	r2, [r2, #6]
 8008208:	701a      	strb	r2, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	330e      	adds	r3, #14
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	0019      	movs	r1, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	3306      	adds	r3, #6
 8008216:	4a1a      	ldr	r2, [pc, #104]	@ (8008280 <shift_sub_rows+0x140>)
 8008218:	5c52      	ldrb	r2, [r2, r1]
 800821a:	701a      	strb	r2, [r3, #0]
 800821c:	183b      	adds	r3, r7, r0
 800821e:	781a      	ldrb	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	330e      	adds	r3, #14
 8008224:	4916      	ldr	r1, [pc, #88]	@ (8008280 <shift_sub_rows+0x140>)
 8008226:	5c8a      	ldrb	r2, [r1, r2]
 8008228:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800822a:	183b      	adds	r3, r7, r0
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	7bd2      	ldrb	r2, [r2, #15]
 8008230:	701a      	strb	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	330b      	adds	r3, #11
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	0019      	movs	r1, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	330f      	adds	r3, #15
 800823e:	4a10      	ldr	r2, [pc, #64]	@ (8008280 <shift_sub_rows+0x140>)
 8008240:	5c52      	ldrb	r2, [r2, r1]
 8008242:	701a      	strb	r2, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	3307      	adds	r3, #7
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	0019      	movs	r1, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	330b      	adds	r3, #11
 8008250:	4a0b      	ldr	r2, [pc, #44]	@ (8008280 <shift_sub_rows+0x140>)
 8008252:	5c52      	ldrb	r2, [r2, r1]
 8008254:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	3303      	adds	r3, #3
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	0019      	movs	r1, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	3307      	adds	r3, #7
 8008262:	4a07      	ldr	r2, [pc, #28]	@ (8008280 <shift_sub_rows+0x140>)
 8008264:	5c52      	ldrb	r2, [r2, r1]
 8008266:	701a      	strb	r2, [r3, #0]
 8008268:	183b      	adds	r3, r7, r0
 800826a:	781a      	ldrb	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	3303      	adds	r3, #3
 8008270:	4903      	ldr	r1, [pc, #12]	@ (8008280 <shift_sub_rows+0x140>)
 8008272:	5c8a      	ldrb	r2, [r1, r2]
 8008274:	701a      	strb	r2, [r3, #0]
}
 8008276:	46c0      	nop			@ (mov r8, r8)
 8008278:	46bd      	mov	sp, r7
 800827a:	b004      	add	sp, #16
 800827c:	bd80      	pop	{r7, pc}
 800827e:	46c0      	nop			@ (mov r8, r8)
 8008280:	0801ae24 	.word	0x0801ae24

08008284 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8008284:	b590      	push	{r4, r7, lr}
 8008286:	b087      	sub	sp, #28
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	2408      	movs	r4, #8
 8008290:	193b      	adds	r3, r7, r4
 8008292:	0011      	movs	r1, r2
 8008294:	0018      	movs	r0, r3
 8008296:	f7ff fd63 	bl	8007d60 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800829a:	0020      	movs	r0, r4
 800829c:	183b      	adds	r3, r7, r0
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	001a      	movs	r2, r3
 80082a2:	4be8      	ldr	r3, [pc, #928]	@ (8008644 <mix_sub_columns+0x3c0>)
 80082a4:	5c9a      	ldrb	r2, [r3, r2]
 80082a6:	183b      	adds	r3, r7, r0
 80082a8:	795b      	ldrb	r3, [r3, #5]
 80082aa:	0019      	movs	r1, r3
 80082ac:	4be6      	ldr	r3, [pc, #920]	@ (8008648 <mix_sub_columns+0x3c4>)
 80082ae:	5c5b      	ldrb	r3, [r3, r1]
 80082b0:	4053      	eors	r3, r2
 80082b2:	b2da      	uxtb	r2, r3
 80082b4:	183b      	adds	r3, r7, r0
 80082b6:	7a9b      	ldrb	r3, [r3, #10]
 80082b8:	0019      	movs	r1, r3
 80082ba:	4be4      	ldr	r3, [pc, #912]	@ (800864c <mix_sub_columns+0x3c8>)
 80082bc:	5c5b      	ldrb	r3, [r3, r1]
 80082be:	4053      	eors	r3, r2
 80082c0:	b2da      	uxtb	r2, r3
 80082c2:	183b      	adds	r3, r7, r0
 80082c4:	7bdb      	ldrb	r3, [r3, #15]
 80082c6:	0019      	movs	r1, r3
 80082c8:	4be0      	ldr	r3, [pc, #896]	@ (800864c <mix_sub_columns+0x3c8>)
 80082ca:	5c5b      	ldrb	r3, [r3, r1]
 80082cc:	4053      	eors	r3, r2
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80082d4:	183b      	adds	r3, r7, r0
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	001a      	movs	r2, r3
 80082da:	4bdc      	ldr	r3, [pc, #880]	@ (800864c <mix_sub_columns+0x3c8>)
 80082dc:	5c9a      	ldrb	r2, [r3, r2]
 80082de:	183b      	adds	r3, r7, r0
 80082e0:	795b      	ldrb	r3, [r3, #5]
 80082e2:	0019      	movs	r1, r3
 80082e4:	4bd7      	ldr	r3, [pc, #860]	@ (8008644 <mix_sub_columns+0x3c0>)
 80082e6:	5c5b      	ldrb	r3, [r3, r1]
 80082e8:	4053      	eors	r3, r2
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	183b      	adds	r3, r7, r0
 80082ee:	7a9b      	ldrb	r3, [r3, #10]
 80082f0:	0019      	movs	r1, r3
 80082f2:	4bd5      	ldr	r3, [pc, #852]	@ (8008648 <mix_sub_columns+0x3c4>)
 80082f4:	5c5b      	ldrb	r3, [r3, r1]
 80082f6:	4053      	eors	r3, r2
 80082f8:	b2d9      	uxtb	r1, r3
 80082fa:	183b      	adds	r3, r7, r0
 80082fc:	7bdb      	ldrb	r3, [r3, #15]
 80082fe:	001a      	movs	r2, r3
 8008300:	4bd2      	ldr	r3, [pc, #840]	@ (800864c <mix_sub_columns+0x3c8>)
 8008302:	5c9a      	ldrb	r2, [r3, r2]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	3301      	adds	r3, #1
 8008308:	404a      	eors	r2, r1
 800830a:	b2d2      	uxtb	r2, r2
 800830c:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800830e:	183b      	adds	r3, r7, r0
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	001a      	movs	r2, r3
 8008314:	4bcd      	ldr	r3, [pc, #820]	@ (800864c <mix_sub_columns+0x3c8>)
 8008316:	5c9a      	ldrb	r2, [r3, r2]
 8008318:	183b      	adds	r3, r7, r0
 800831a:	795b      	ldrb	r3, [r3, #5]
 800831c:	0019      	movs	r1, r3
 800831e:	4bcb      	ldr	r3, [pc, #812]	@ (800864c <mix_sub_columns+0x3c8>)
 8008320:	5c5b      	ldrb	r3, [r3, r1]
 8008322:	4053      	eors	r3, r2
 8008324:	b2da      	uxtb	r2, r3
 8008326:	183b      	adds	r3, r7, r0
 8008328:	7a9b      	ldrb	r3, [r3, #10]
 800832a:	0019      	movs	r1, r3
 800832c:	4bc5      	ldr	r3, [pc, #788]	@ (8008644 <mix_sub_columns+0x3c0>)
 800832e:	5c5b      	ldrb	r3, [r3, r1]
 8008330:	4053      	eors	r3, r2
 8008332:	b2d9      	uxtb	r1, r3
 8008334:	183b      	adds	r3, r7, r0
 8008336:	7bdb      	ldrb	r3, [r3, #15]
 8008338:	001a      	movs	r2, r3
 800833a:	4bc3      	ldr	r3, [pc, #780]	@ (8008648 <mix_sub_columns+0x3c4>)
 800833c:	5c9a      	ldrb	r2, [r3, r2]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	3302      	adds	r3, #2
 8008342:	404a      	eors	r2, r1
 8008344:	b2d2      	uxtb	r2, r2
 8008346:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8008348:	183b      	adds	r3, r7, r0
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	001a      	movs	r2, r3
 800834e:	4bbe      	ldr	r3, [pc, #760]	@ (8008648 <mix_sub_columns+0x3c4>)
 8008350:	5c9a      	ldrb	r2, [r3, r2]
 8008352:	183b      	adds	r3, r7, r0
 8008354:	795b      	ldrb	r3, [r3, #5]
 8008356:	0019      	movs	r1, r3
 8008358:	4bbc      	ldr	r3, [pc, #752]	@ (800864c <mix_sub_columns+0x3c8>)
 800835a:	5c5b      	ldrb	r3, [r3, r1]
 800835c:	4053      	eors	r3, r2
 800835e:	b2da      	uxtb	r2, r3
 8008360:	183b      	adds	r3, r7, r0
 8008362:	7a9b      	ldrb	r3, [r3, #10]
 8008364:	0019      	movs	r1, r3
 8008366:	4bb9      	ldr	r3, [pc, #740]	@ (800864c <mix_sub_columns+0x3c8>)
 8008368:	5c5b      	ldrb	r3, [r3, r1]
 800836a:	4053      	eors	r3, r2
 800836c:	b2d9      	uxtb	r1, r3
 800836e:	183b      	adds	r3, r7, r0
 8008370:	7bdb      	ldrb	r3, [r3, #15]
 8008372:	001a      	movs	r2, r3
 8008374:	4bb3      	ldr	r3, [pc, #716]	@ (8008644 <mix_sub_columns+0x3c0>)
 8008376:	5c9a      	ldrb	r2, [r3, r2]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	3303      	adds	r3, #3
 800837c:	404a      	eors	r2, r1
 800837e:	b2d2      	uxtb	r2, r2
 8008380:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8008382:	183b      	adds	r3, r7, r0
 8008384:	791b      	ldrb	r3, [r3, #4]
 8008386:	001a      	movs	r2, r3
 8008388:	4bae      	ldr	r3, [pc, #696]	@ (8008644 <mix_sub_columns+0x3c0>)
 800838a:	5c9a      	ldrb	r2, [r3, r2]
 800838c:	183b      	adds	r3, r7, r0
 800838e:	7a5b      	ldrb	r3, [r3, #9]
 8008390:	0019      	movs	r1, r3
 8008392:	4bad      	ldr	r3, [pc, #692]	@ (8008648 <mix_sub_columns+0x3c4>)
 8008394:	5c5b      	ldrb	r3, [r3, r1]
 8008396:	4053      	eors	r3, r2
 8008398:	b2da      	uxtb	r2, r3
 800839a:	183b      	adds	r3, r7, r0
 800839c:	7b9b      	ldrb	r3, [r3, #14]
 800839e:	0019      	movs	r1, r3
 80083a0:	4baa      	ldr	r3, [pc, #680]	@ (800864c <mix_sub_columns+0x3c8>)
 80083a2:	5c5b      	ldrb	r3, [r3, r1]
 80083a4:	4053      	eors	r3, r2
 80083a6:	b2d9      	uxtb	r1, r3
 80083a8:	183b      	adds	r3, r7, r0
 80083aa:	78db      	ldrb	r3, [r3, #3]
 80083ac:	001a      	movs	r2, r3
 80083ae:	4ba7      	ldr	r3, [pc, #668]	@ (800864c <mix_sub_columns+0x3c8>)
 80083b0:	5c9a      	ldrb	r2, [r3, r2]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	3304      	adds	r3, #4
 80083b6:	404a      	eors	r2, r1
 80083b8:	b2d2      	uxtb	r2, r2
 80083ba:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 80083bc:	183b      	adds	r3, r7, r0
 80083be:	791b      	ldrb	r3, [r3, #4]
 80083c0:	001a      	movs	r2, r3
 80083c2:	4ba2      	ldr	r3, [pc, #648]	@ (800864c <mix_sub_columns+0x3c8>)
 80083c4:	5c9a      	ldrb	r2, [r3, r2]
 80083c6:	183b      	adds	r3, r7, r0
 80083c8:	7a5b      	ldrb	r3, [r3, #9]
 80083ca:	0019      	movs	r1, r3
 80083cc:	4b9d      	ldr	r3, [pc, #628]	@ (8008644 <mix_sub_columns+0x3c0>)
 80083ce:	5c5b      	ldrb	r3, [r3, r1]
 80083d0:	4053      	eors	r3, r2
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	183b      	adds	r3, r7, r0
 80083d6:	7b9b      	ldrb	r3, [r3, #14]
 80083d8:	0019      	movs	r1, r3
 80083da:	4b9b      	ldr	r3, [pc, #620]	@ (8008648 <mix_sub_columns+0x3c4>)
 80083dc:	5c5b      	ldrb	r3, [r3, r1]
 80083de:	4053      	eors	r3, r2
 80083e0:	b2d9      	uxtb	r1, r3
 80083e2:	183b      	adds	r3, r7, r0
 80083e4:	78db      	ldrb	r3, [r3, #3]
 80083e6:	001a      	movs	r2, r3
 80083e8:	4b98      	ldr	r3, [pc, #608]	@ (800864c <mix_sub_columns+0x3c8>)
 80083ea:	5c9a      	ldrb	r2, [r3, r2]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	3305      	adds	r3, #5
 80083f0:	404a      	eors	r2, r1
 80083f2:	b2d2      	uxtb	r2, r2
 80083f4:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80083f6:	183b      	adds	r3, r7, r0
 80083f8:	791b      	ldrb	r3, [r3, #4]
 80083fa:	001a      	movs	r2, r3
 80083fc:	4b93      	ldr	r3, [pc, #588]	@ (800864c <mix_sub_columns+0x3c8>)
 80083fe:	5c9a      	ldrb	r2, [r3, r2]
 8008400:	183b      	adds	r3, r7, r0
 8008402:	7a5b      	ldrb	r3, [r3, #9]
 8008404:	0019      	movs	r1, r3
 8008406:	4b91      	ldr	r3, [pc, #580]	@ (800864c <mix_sub_columns+0x3c8>)
 8008408:	5c5b      	ldrb	r3, [r3, r1]
 800840a:	4053      	eors	r3, r2
 800840c:	b2da      	uxtb	r2, r3
 800840e:	183b      	adds	r3, r7, r0
 8008410:	7b9b      	ldrb	r3, [r3, #14]
 8008412:	0019      	movs	r1, r3
 8008414:	4b8b      	ldr	r3, [pc, #556]	@ (8008644 <mix_sub_columns+0x3c0>)
 8008416:	5c5b      	ldrb	r3, [r3, r1]
 8008418:	4053      	eors	r3, r2
 800841a:	b2d9      	uxtb	r1, r3
 800841c:	183b      	adds	r3, r7, r0
 800841e:	78db      	ldrb	r3, [r3, #3]
 8008420:	001a      	movs	r2, r3
 8008422:	4b89      	ldr	r3, [pc, #548]	@ (8008648 <mix_sub_columns+0x3c4>)
 8008424:	5c9a      	ldrb	r2, [r3, r2]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	3306      	adds	r3, #6
 800842a:	404a      	eors	r2, r1
 800842c:	b2d2      	uxtb	r2, r2
 800842e:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8008430:	183b      	adds	r3, r7, r0
 8008432:	791b      	ldrb	r3, [r3, #4]
 8008434:	001a      	movs	r2, r3
 8008436:	4b84      	ldr	r3, [pc, #528]	@ (8008648 <mix_sub_columns+0x3c4>)
 8008438:	5c9a      	ldrb	r2, [r3, r2]
 800843a:	183b      	adds	r3, r7, r0
 800843c:	7a5b      	ldrb	r3, [r3, #9]
 800843e:	0019      	movs	r1, r3
 8008440:	4b82      	ldr	r3, [pc, #520]	@ (800864c <mix_sub_columns+0x3c8>)
 8008442:	5c5b      	ldrb	r3, [r3, r1]
 8008444:	4053      	eors	r3, r2
 8008446:	b2da      	uxtb	r2, r3
 8008448:	183b      	adds	r3, r7, r0
 800844a:	7b9b      	ldrb	r3, [r3, #14]
 800844c:	0019      	movs	r1, r3
 800844e:	4b7f      	ldr	r3, [pc, #508]	@ (800864c <mix_sub_columns+0x3c8>)
 8008450:	5c5b      	ldrb	r3, [r3, r1]
 8008452:	4053      	eors	r3, r2
 8008454:	b2d9      	uxtb	r1, r3
 8008456:	183b      	adds	r3, r7, r0
 8008458:	78db      	ldrb	r3, [r3, #3]
 800845a:	001a      	movs	r2, r3
 800845c:	4b79      	ldr	r3, [pc, #484]	@ (8008644 <mix_sub_columns+0x3c0>)
 800845e:	5c9a      	ldrb	r2, [r3, r2]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	3307      	adds	r3, #7
 8008464:	404a      	eors	r2, r1
 8008466:	b2d2      	uxtb	r2, r2
 8008468:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800846a:	183b      	adds	r3, r7, r0
 800846c:	7a1b      	ldrb	r3, [r3, #8]
 800846e:	001a      	movs	r2, r3
 8008470:	4b74      	ldr	r3, [pc, #464]	@ (8008644 <mix_sub_columns+0x3c0>)
 8008472:	5c9a      	ldrb	r2, [r3, r2]
 8008474:	183b      	adds	r3, r7, r0
 8008476:	7b5b      	ldrb	r3, [r3, #13]
 8008478:	0019      	movs	r1, r3
 800847a:	4b73      	ldr	r3, [pc, #460]	@ (8008648 <mix_sub_columns+0x3c4>)
 800847c:	5c5b      	ldrb	r3, [r3, r1]
 800847e:	4053      	eors	r3, r2
 8008480:	b2da      	uxtb	r2, r3
 8008482:	183b      	adds	r3, r7, r0
 8008484:	789b      	ldrb	r3, [r3, #2]
 8008486:	0019      	movs	r1, r3
 8008488:	4b70      	ldr	r3, [pc, #448]	@ (800864c <mix_sub_columns+0x3c8>)
 800848a:	5c5b      	ldrb	r3, [r3, r1]
 800848c:	4053      	eors	r3, r2
 800848e:	b2d9      	uxtb	r1, r3
 8008490:	183b      	adds	r3, r7, r0
 8008492:	79db      	ldrb	r3, [r3, #7]
 8008494:	001a      	movs	r2, r3
 8008496:	4b6d      	ldr	r3, [pc, #436]	@ (800864c <mix_sub_columns+0x3c8>)
 8008498:	5c9a      	ldrb	r2, [r3, r2]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	3308      	adds	r3, #8
 800849e:	404a      	eors	r2, r1
 80084a0:	b2d2      	uxtb	r2, r2
 80084a2:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 80084a4:	183b      	adds	r3, r7, r0
 80084a6:	7a1b      	ldrb	r3, [r3, #8]
 80084a8:	001a      	movs	r2, r3
 80084aa:	4b68      	ldr	r3, [pc, #416]	@ (800864c <mix_sub_columns+0x3c8>)
 80084ac:	5c9a      	ldrb	r2, [r3, r2]
 80084ae:	183b      	adds	r3, r7, r0
 80084b0:	7b5b      	ldrb	r3, [r3, #13]
 80084b2:	0019      	movs	r1, r3
 80084b4:	4b63      	ldr	r3, [pc, #396]	@ (8008644 <mix_sub_columns+0x3c0>)
 80084b6:	5c5b      	ldrb	r3, [r3, r1]
 80084b8:	4053      	eors	r3, r2
 80084ba:	b2da      	uxtb	r2, r3
 80084bc:	183b      	adds	r3, r7, r0
 80084be:	789b      	ldrb	r3, [r3, #2]
 80084c0:	0019      	movs	r1, r3
 80084c2:	4b61      	ldr	r3, [pc, #388]	@ (8008648 <mix_sub_columns+0x3c4>)
 80084c4:	5c5b      	ldrb	r3, [r3, r1]
 80084c6:	4053      	eors	r3, r2
 80084c8:	b2d9      	uxtb	r1, r3
 80084ca:	183b      	adds	r3, r7, r0
 80084cc:	79db      	ldrb	r3, [r3, #7]
 80084ce:	001a      	movs	r2, r3
 80084d0:	4b5e      	ldr	r3, [pc, #376]	@ (800864c <mix_sub_columns+0x3c8>)
 80084d2:	5c9a      	ldrb	r2, [r3, r2]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	3309      	adds	r3, #9
 80084d8:	404a      	eors	r2, r1
 80084da:	b2d2      	uxtb	r2, r2
 80084dc:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 80084de:	183b      	adds	r3, r7, r0
 80084e0:	7a1b      	ldrb	r3, [r3, #8]
 80084e2:	001a      	movs	r2, r3
 80084e4:	4b59      	ldr	r3, [pc, #356]	@ (800864c <mix_sub_columns+0x3c8>)
 80084e6:	5c9a      	ldrb	r2, [r3, r2]
 80084e8:	183b      	adds	r3, r7, r0
 80084ea:	7b5b      	ldrb	r3, [r3, #13]
 80084ec:	0019      	movs	r1, r3
 80084ee:	4b57      	ldr	r3, [pc, #348]	@ (800864c <mix_sub_columns+0x3c8>)
 80084f0:	5c5b      	ldrb	r3, [r3, r1]
 80084f2:	4053      	eors	r3, r2
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	183b      	adds	r3, r7, r0
 80084f8:	789b      	ldrb	r3, [r3, #2]
 80084fa:	0019      	movs	r1, r3
 80084fc:	4b51      	ldr	r3, [pc, #324]	@ (8008644 <mix_sub_columns+0x3c0>)
 80084fe:	5c5b      	ldrb	r3, [r3, r1]
 8008500:	4053      	eors	r3, r2
 8008502:	b2d9      	uxtb	r1, r3
 8008504:	183b      	adds	r3, r7, r0
 8008506:	79db      	ldrb	r3, [r3, #7]
 8008508:	001a      	movs	r2, r3
 800850a:	4b4f      	ldr	r3, [pc, #316]	@ (8008648 <mix_sub_columns+0x3c4>)
 800850c:	5c9a      	ldrb	r2, [r3, r2]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	330a      	adds	r3, #10
 8008512:	404a      	eors	r2, r1
 8008514:	b2d2      	uxtb	r2, r2
 8008516:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8008518:	183b      	adds	r3, r7, r0
 800851a:	7a1b      	ldrb	r3, [r3, #8]
 800851c:	001a      	movs	r2, r3
 800851e:	4b4a      	ldr	r3, [pc, #296]	@ (8008648 <mix_sub_columns+0x3c4>)
 8008520:	5c9a      	ldrb	r2, [r3, r2]
 8008522:	183b      	adds	r3, r7, r0
 8008524:	7b5b      	ldrb	r3, [r3, #13]
 8008526:	0019      	movs	r1, r3
 8008528:	4b48      	ldr	r3, [pc, #288]	@ (800864c <mix_sub_columns+0x3c8>)
 800852a:	5c5b      	ldrb	r3, [r3, r1]
 800852c:	4053      	eors	r3, r2
 800852e:	b2da      	uxtb	r2, r3
 8008530:	183b      	adds	r3, r7, r0
 8008532:	789b      	ldrb	r3, [r3, #2]
 8008534:	0019      	movs	r1, r3
 8008536:	4b45      	ldr	r3, [pc, #276]	@ (800864c <mix_sub_columns+0x3c8>)
 8008538:	5c5b      	ldrb	r3, [r3, r1]
 800853a:	4053      	eors	r3, r2
 800853c:	b2d9      	uxtb	r1, r3
 800853e:	183b      	adds	r3, r7, r0
 8008540:	79db      	ldrb	r3, [r3, #7]
 8008542:	001a      	movs	r2, r3
 8008544:	4b3f      	ldr	r3, [pc, #252]	@ (8008644 <mix_sub_columns+0x3c0>)
 8008546:	5c9a      	ldrb	r2, [r3, r2]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	330b      	adds	r3, #11
 800854c:	404a      	eors	r2, r1
 800854e:	b2d2      	uxtb	r2, r2
 8008550:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8008552:	183b      	adds	r3, r7, r0
 8008554:	7b1b      	ldrb	r3, [r3, #12]
 8008556:	001a      	movs	r2, r3
 8008558:	4b3a      	ldr	r3, [pc, #232]	@ (8008644 <mix_sub_columns+0x3c0>)
 800855a:	5c9a      	ldrb	r2, [r3, r2]
 800855c:	183b      	adds	r3, r7, r0
 800855e:	785b      	ldrb	r3, [r3, #1]
 8008560:	0019      	movs	r1, r3
 8008562:	4b39      	ldr	r3, [pc, #228]	@ (8008648 <mix_sub_columns+0x3c4>)
 8008564:	5c5b      	ldrb	r3, [r3, r1]
 8008566:	4053      	eors	r3, r2
 8008568:	b2da      	uxtb	r2, r3
 800856a:	183b      	adds	r3, r7, r0
 800856c:	799b      	ldrb	r3, [r3, #6]
 800856e:	0019      	movs	r1, r3
 8008570:	4b36      	ldr	r3, [pc, #216]	@ (800864c <mix_sub_columns+0x3c8>)
 8008572:	5c5b      	ldrb	r3, [r3, r1]
 8008574:	4053      	eors	r3, r2
 8008576:	b2d9      	uxtb	r1, r3
 8008578:	183b      	adds	r3, r7, r0
 800857a:	7adb      	ldrb	r3, [r3, #11]
 800857c:	001a      	movs	r2, r3
 800857e:	4b33      	ldr	r3, [pc, #204]	@ (800864c <mix_sub_columns+0x3c8>)
 8008580:	5c9a      	ldrb	r2, [r3, r2]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	330c      	adds	r3, #12
 8008586:	404a      	eors	r2, r1
 8008588:	b2d2      	uxtb	r2, r2
 800858a:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800858c:	183b      	adds	r3, r7, r0
 800858e:	7b1b      	ldrb	r3, [r3, #12]
 8008590:	001a      	movs	r2, r3
 8008592:	4b2e      	ldr	r3, [pc, #184]	@ (800864c <mix_sub_columns+0x3c8>)
 8008594:	5c9a      	ldrb	r2, [r3, r2]
 8008596:	183b      	adds	r3, r7, r0
 8008598:	785b      	ldrb	r3, [r3, #1]
 800859a:	0019      	movs	r1, r3
 800859c:	4b29      	ldr	r3, [pc, #164]	@ (8008644 <mix_sub_columns+0x3c0>)
 800859e:	5c5b      	ldrb	r3, [r3, r1]
 80085a0:	4053      	eors	r3, r2
 80085a2:	b2da      	uxtb	r2, r3
 80085a4:	183b      	adds	r3, r7, r0
 80085a6:	799b      	ldrb	r3, [r3, #6]
 80085a8:	0019      	movs	r1, r3
 80085aa:	4b27      	ldr	r3, [pc, #156]	@ (8008648 <mix_sub_columns+0x3c4>)
 80085ac:	5c5b      	ldrb	r3, [r3, r1]
 80085ae:	4053      	eors	r3, r2
 80085b0:	b2d9      	uxtb	r1, r3
 80085b2:	183b      	adds	r3, r7, r0
 80085b4:	7adb      	ldrb	r3, [r3, #11]
 80085b6:	001a      	movs	r2, r3
 80085b8:	4b24      	ldr	r3, [pc, #144]	@ (800864c <mix_sub_columns+0x3c8>)
 80085ba:	5c9a      	ldrb	r2, [r3, r2]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	330d      	adds	r3, #13
 80085c0:	404a      	eors	r2, r1
 80085c2:	b2d2      	uxtb	r2, r2
 80085c4:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80085c6:	183b      	adds	r3, r7, r0
 80085c8:	7b1b      	ldrb	r3, [r3, #12]
 80085ca:	001a      	movs	r2, r3
 80085cc:	4b1f      	ldr	r3, [pc, #124]	@ (800864c <mix_sub_columns+0x3c8>)
 80085ce:	5c9a      	ldrb	r2, [r3, r2]
 80085d0:	183b      	adds	r3, r7, r0
 80085d2:	785b      	ldrb	r3, [r3, #1]
 80085d4:	0019      	movs	r1, r3
 80085d6:	4b1d      	ldr	r3, [pc, #116]	@ (800864c <mix_sub_columns+0x3c8>)
 80085d8:	5c5b      	ldrb	r3, [r3, r1]
 80085da:	4053      	eors	r3, r2
 80085dc:	b2da      	uxtb	r2, r3
 80085de:	183b      	adds	r3, r7, r0
 80085e0:	799b      	ldrb	r3, [r3, #6]
 80085e2:	0019      	movs	r1, r3
 80085e4:	4b17      	ldr	r3, [pc, #92]	@ (8008644 <mix_sub_columns+0x3c0>)
 80085e6:	5c5b      	ldrb	r3, [r3, r1]
 80085e8:	4053      	eors	r3, r2
 80085ea:	b2d9      	uxtb	r1, r3
 80085ec:	183b      	adds	r3, r7, r0
 80085ee:	7adb      	ldrb	r3, [r3, #11]
 80085f0:	001a      	movs	r2, r3
 80085f2:	4b15      	ldr	r3, [pc, #84]	@ (8008648 <mix_sub_columns+0x3c4>)
 80085f4:	5c9a      	ldrb	r2, [r3, r2]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	330e      	adds	r3, #14
 80085fa:	404a      	eors	r2, r1
 80085fc:	b2d2      	uxtb	r2, r2
 80085fe:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8008600:	183b      	adds	r3, r7, r0
 8008602:	7b1b      	ldrb	r3, [r3, #12]
 8008604:	001a      	movs	r2, r3
 8008606:	4b10      	ldr	r3, [pc, #64]	@ (8008648 <mix_sub_columns+0x3c4>)
 8008608:	5c9a      	ldrb	r2, [r3, r2]
 800860a:	183b      	adds	r3, r7, r0
 800860c:	785b      	ldrb	r3, [r3, #1]
 800860e:	0019      	movs	r1, r3
 8008610:	4b0e      	ldr	r3, [pc, #56]	@ (800864c <mix_sub_columns+0x3c8>)
 8008612:	5c5b      	ldrb	r3, [r3, r1]
 8008614:	4053      	eors	r3, r2
 8008616:	b2da      	uxtb	r2, r3
 8008618:	183b      	adds	r3, r7, r0
 800861a:	799b      	ldrb	r3, [r3, #6]
 800861c:	0019      	movs	r1, r3
 800861e:	4b0b      	ldr	r3, [pc, #44]	@ (800864c <mix_sub_columns+0x3c8>)
 8008620:	5c5b      	ldrb	r3, [r3, r1]
 8008622:	4053      	eors	r3, r2
 8008624:	b2d9      	uxtb	r1, r3
 8008626:	183b      	adds	r3, r7, r0
 8008628:	7adb      	ldrb	r3, [r3, #11]
 800862a:	001a      	movs	r2, r3
 800862c:	4b05      	ldr	r3, [pc, #20]	@ (8008644 <mix_sub_columns+0x3c0>)
 800862e:	5c9a      	ldrb	r2, [r3, r2]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	330f      	adds	r3, #15
 8008634:	404a      	eors	r2, r1
 8008636:	b2d2      	uxtb	r2, r2
 8008638:	701a      	strb	r2, [r3, #0]
  }
 800863a:	46c0      	nop			@ (mov r8, r8)
 800863c:	46bd      	mov	sp, r7
 800863e:	b007      	add	sp, #28
 8008640:	bd90      	pop	{r4, r7, pc}
 8008642:	46c0      	nop			@ (mov r8, r8)
 8008644:	0801af24 	.word	0x0801af24
 8008648:	0801b024 	.word	0x0801b024
 800864c:	0801ae24 	.word	0x0801ae24

08008650 <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 8008650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008652:	b087      	sub	sp, #28
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	607a      	str	r2, [r7, #4]
 800865a:	200b      	movs	r0, #11
 800865c:	183b      	adds	r3, r7, r0
 800865e:	1c0a      	adds	r2, r1, #0
 8008660:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
 8008662:	183b      	adds	r3, r7, r0
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	3b10      	subs	r3, #16
 8008668:	2210      	movs	r2, #16
 800866a:	429a      	cmp	r2, r3
 800866c:	4192      	sbcs	r2, r2
 800866e:	4252      	negs	r2, r2
 8008670:	b2d2      	uxtb	r2, r2
 8008672:	2a00      	cmp	r2, #0
 8008674:	d109      	bne.n	800868a <aes_set_key+0x3a>
 8008676:	4a92      	ldr	r2, [pc, #584]	@ (80088c0 <aes_set_key+0x270>)
 8008678:	40da      	lsrs	r2, r3
 800867a:	0013      	movs	r3, r2
 800867c:	2201      	movs	r2, #1
 800867e:	4013      	ands	r3, r2
 8008680:	1e5a      	subs	r2, r3, #1
 8008682:	4193      	sbcs	r3, r2
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d105      	bne.n	8008696 <aes_set_key+0x46>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	22f0      	movs	r2, #240	@ 0xf0
 800868e:	2100      	movs	r1, #0
 8008690:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
 8008692:	23ff      	movs	r3, #255	@ 0xff
 8008694:	e10f      	b.n	80088b6 <aes_set_key+0x266>
        break;
 8008696:	46c0      	nop			@ (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	240b      	movs	r4, #11
 800869c:	193b      	adds	r3, r7, r4
 800869e:	781a      	ldrb	r2, [r3, #0]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	0019      	movs	r1, r3
 80086a4:	f7ff fbb4 	bl	8007e10 <copy_block_nn>
    hi = (keylen + 28) << 2;
 80086a8:	0020      	movs	r0, r4
 80086aa:	183b      	adds	r3, r7, r0
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	331c      	adds	r3, #28
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	2111      	movs	r1, #17
 80086b4:	187b      	adds	r3, r7, r1
 80086b6:	0092      	lsls	r2, r2, #2
 80086b8:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
 80086ba:	187b      	adds	r3, r7, r1
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	091b      	lsrs	r3, r3, #4
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	3b01      	subs	r3, #1
 80086c4:	b2d9      	uxtb	r1, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	22f0      	movs	r2, #240	@ 0xf0
 80086ca:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80086cc:	2317      	movs	r3, #23
 80086ce:	18fb      	adds	r3, r7, r3
 80086d0:	183a      	adds	r2, r7, r0
 80086d2:	7812      	ldrb	r2, [r2, #0]
 80086d4:	701a      	strb	r2, [r3, #0]
 80086d6:	2316      	movs	r3, #22
 80086d8:	18fb      	adds	r3, r7, r3
 80086da:	2201      	movs	r2, #1
 80086dc:	701a      	strb	r2, [r3, #0]
 80086de:	e0e0      	b.n	80088a2 <aes_set_key+0x252>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 80086e0:	2017      	movs	r0, #23
 80086e2:	183b      	adds	r3, r7, r0
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	1f1a      	subs	r2, r3, #4
 80086e8:	2415      	movs	r4, #21
 80086ea:	193b      	adds	r3, r7, r4
 80086ec:	6879      	ldr	r1, [r7, #4]
 80086ee:	5c8a      	ldrb	r2, [r1, r2]
 80086f0:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
 80086f2:	183b      	adds	r3, r7, r0
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	1eda      	subs	r2, r3, #3
 80086f8:	2514      	movs	r5, #20
 80086fa:	197b      	adds	r3, r7, r5
 80086fc:	6879      	ldr	r1, [r7, #4]
 80086fe:	5c8a      	ldrb	r2, [r1, r2]
 8008700:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 8008702:	183b      	adds	r3, r7, r0
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	1e9a      	subs	r2, r3, #2
 8008708:	2613      	movs	r6, #19
 800870a:	19bb      	adds	r3, r7, r6
 800870c:	6879      	ldr	r1, [r7, #4]
 800870e:	5c8a      	ldrb	r2, [r1, r2]
 8008710:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
 8008712:	183b      	adds	r3, r7, r0
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	1e5a      	subs	r2, r3, #1
 8008718:	2312      	movs	r3, #18
 800871a:	18fb      	adds	r3, r7, r3
 800871c:	6879      	ldr	r1, [r7, #4]
 800871e:	5c8a      	ldrb	r2, [r1, r2]
 8008720:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
 8008722:	183a      	adds	r2, r7, r0
 8008724:	210b      	movs	r1, #11
 8008726:	187b      	adds	r3, r7, r1
 8008728:	7812      	ldrb	r2, [r2, #0]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	0019      	movs	r1, r3
 800872e:	0010      	movs	r0, r2
 8008730:	f7f7 fd7a 	bl	8000228 <__aeabi_uidivmod>
 8008734:	000b      	movs	r3, r1
 8008736:	b2db      	uxtb	r3, r3
 8008738:	2b00      	cmp	r3, #0
 800873a:	d13b      	bne.n	80087b4 <aes_set_key+0x164>
        {
            tt = t0;
 800873c:	2210      	movs	r2, #16
 800873e:	18bb      	adds	r3, r7, r2
 8008740:	193a      	adds	r2, r7, r4
 8008742:	7812      	ldrb	r2, [r2, #0]
 8008744:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
 8008746:	197b      	adds	r3, r7, r5
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	4a5e      	ldr	r2, [pc, #376]	@ (80088c4 <aes_set_key+0x274>)
 800874c:	5cd1      	ldrb	r1, [r2, r3]
 800874e:	193b      	adds	r3, r7, r4
 8008750:	2016      	movs	r0, #22
 8008752:	183a      	adds	r2, r7, r0
 8008754:	7812      	ldrb	r2, [r2, #0]
 8008756:	404a      	eors	r2, r1
 8008758:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
 800875a:	19bb      	adds	r3, r7, r6
 800875c:	781a      	ldrb	r2, [r3, #0]
 800875e:	197b      	adds	r3, r7, r5
 8008760:	4958      	ldr	r1, [pc, #352]	@ (80088c4 <aes_set_key+0x274>)
 8008762:	5c8a      	ldrb	r2, [r1, r2]
 8008764:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
 8008766:	2412      	movs	r4, #18
 8008768:	193b      	adds	r3, r7, r4
 800876a:	781a      	ldrb	r2, [r3, #0]
 800876c:	19bb      	adds	r3, r7, r6
 800876e:	4955      	ldr	r1, [pc, #340]	@ (80088c4 <aes_set_key+0x274>)
 8008770:	5c8a      	ldrb	r2, [r1, r2]
 8008772:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
 8008774:	2210      	movs	r2, #16
 8008776:	18bb      	adds	r3, r7, r2
 8008778:	781a      	ldrb	r2, [r3, #0]
 800877a:	193b      	adds	r3, r7, r4
 800877c:	4951      	ldr	r1, [pc, #324]	@ (80088c4 <aes_set_key+0x274>)
 800877e:	5c8a      	ldrb	r2, [r1, r2]
 8008780:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
 8008782:	183b      	adds	r3, r7, r0
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	005b      	lsls	r3, r3, #1
 8008788:	b25a      	sxtb	r2, r3
 800878a:	0004      	movs	r4, r0
 800878c:	183b      	adds	r3, r7, r0
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	09db      	lsrs	r3, r3, #7
 8008792:	b2db      	uxtb	r3, r3
 8008794:	1c19      	adds	r1, r3, #0
 8008796:	1c0b      	adds	r3, r1, #0
 8008798:	18db      	adds	r3, r3, r3
 800879a:	185b      	adds	r3, r3, r1
 800879c:	1c19      	adds	r1, r3, #0
 800879e:	00c8      	lsls	r0, r1, #3
 80087a0:	1c19      	adds	r1, r3, #0
 80087a2:	1c03      	adds	r3, r0, #0
 80087a4:	18cb      	adds	r3, r1, r3
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	b25b      	sxtb	r3, r3
 80087aa:	4053      	eors	r3, r2
 80087ac:	b25a      	sxtb	r2, r3
 80087ae:	193b      	adds	r3, r7, r4
 80087b0:	701a      	strb	r2, [r3, #0]
 80087b2:	e02d      	b.n	8008810 <aes_set_key+0x1c0>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 80087b4:	210b      	movs	r1, #11
 80087b6:	187b      	adds	r3, r7, r1
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	2b18      	cmp	r3, #24
 80087bc:	d928      	bls.n	8008810 <aes_set_key+0x1c0>
 80087be:	2317      	movs	r3, #23
 80087c0:	18fa      	adds	r2, r7, r3
 80087c2:	187b      	adds	r3, r7, r1
 80087c4:	7812      	ldrb	r2, [r2, #0]
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	0019      	movs	r1, r3
 80087ca:	0010      	movs	r0, r2
 80087cc:	f7f7 fd2c 	bl	8000228 <__aeabi_uidivmod>
 80087d0:	000b      	movs	r3, r1
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b10      	cmp	r3, #16
 80087d6:	d11b      	bne.n	8008810 <aes_set_key+0x1c0>
        {
            t0 = s_box(t0);
 80087d8:	2115      	movs	r1, #21
 80087da:	187b      	adds	r3, r7, r1
 80087dc:	781a      	ldrb	r2, [r3, #0]
 80087de:	187b      	adds	r3, r7, r1
 80087e0:	4938      	ldr	r1, [pc, #224]	@ (80088c4 <aes_set_key+0x274>)
 80087e2:	5c8a      	ldrb	r2, [r1, r2]
 80087e4:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
 80087e6:	2114      	movs	r1, #20
 80087e8:	187b      	adds	r3, r7, r1
 80087ea:	781a      	ldrb	r2, [r3, #0]
 80087ec:	187b      	adds	r3, r7, r1
 80087ee:	4935      	ldr	r1, [pc, #212]	@ (80088c4 <aes_set_key+0x274>)
 80087f0:	5c8a      	ldrb	r2, [r1, r2]
 80087f2:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
 80087f4:	2113      	movs	r1, #19
 80087f6:	187b      	adds	r3, r7, r1
 80087f8:	781a      	ldrb	r2, [r3, #0]
 80087fa:	187b      	adds	r3, r7, r1
 80087fc:	4931      	ldr	r1, [pc, #196]	@ (80088c4 <aes_set_key+0x274>)
 80087fe:	5c8a      	ldrb	r2, [r1, r2]
 8008800:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
 8008802:	2112      	movs	r1, #18
 8008804:	187b      	adds	r3, r7, r1
 8008806:	781a      	ldrb	r2, [r3, #0]
 8008808:	187b      	adds	r3, r7, r1
 800880a:	492e      	ldr	r1, [pc, #184]	@ (80088c4 <aes_set_key+0x274>)
 800880c:	5c8a      	ldrb	r2, [r1, r2]
 800880e:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
 8008810:	2410      	movs	r4, #16
 8008812:	193b      	adds	r3, r7, r4
 8008814:	2017      	movs	r0, #23
 8008816:	1839      	adds	r1, r7, r0
 8008818:	220b      	movs	r2, #11
 800881a:	18ba      	adds	r2, r7, r2
 800881c:	7809      	ldrb	r1, [r1, #0]
 800881e:	7812      	ldrb	r2, [r2, #0]
 8008820:	1a8a      	subs	r2, r1, r2
 8008822:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8008824:	193b      	adds	r3, r7, r4
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	5cd1      	ldrb	r1, [r2, r3]
 800882c:	183b      	adds	r3, r7, r0
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	2215      	movs	r2, #21
 8008832:	18ba      	adds	r2, r7, r2
 8008834:	7812      	ldrb	r2, [r2, #0]
 8008836:	404a      	eors	r2, r1
 8008838:	b2d1      	uxtb	r1, r2
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800883e:	193b      	adds	r3, r7, r4
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	3301      	adds	r3, #1
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	5cd1      	ldrb	r1, [r2, r3]
 8008848:	183b      	adds	r3, r7, r0
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	3301      	adds	r3, #1
 800884e:	2214      	movs	r2, #20
 8008850:	18ba      	adds	r2, r7, r2
 8008852:	7812      	ldrb	r2, [r2, #0]
 8008854:	404a      	eors	r2, r1
 8008856:	b2d1      	uxtb	r1, r2
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800885c:	193b      	adds	r3, r7, r4
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	3302      	adds	r3, #2
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	5cd1      	ldrb	r1, [r2, r3]
 8008866:	183b      	adds	r3, r7, r0
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	3302      	adds	r3, #2
 800886c:	2213      	movs	r2, #19
 800886e:	18ba      	adds	r2, r7, r2
 8008870:	7812      	ldrb	r2, [r2, #0]
 8008872:	404a      	eors	r2, r1
 8008874:	b2d1      	uxtb	r1, r2
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800887a:	193b      	adds	r3, r7, r4
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	3303      	adds	r3, #3
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	5cd1      	ldrb	r1, [r2, r3]
 8008884:	183b      	adds	r3, r7, r0
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	3303      	adds	r3, #3
 800888a:	2212      	movs	r2, #18
 800888c:	18ba      	adds	r2, r7, r2
 800888e:	7812      	ldrb	r2, [r2, #0]
 8008890:	404a      	eors	r2, r1
 8008892:	b2d1      	uxtb	r1, r2
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8008898:	183b      	adds	r3, r7, r0
 800889a:	183a      	adds	r2, r7, r0
 800889c:	7812      	ldrb	r2, [r2, #0]
 800889e:	3204      	adds	r2, #4
 80088a0:	701a      	strb	r2, [r3, #0]
 80088a2:	2317      	movs	r3, #23
 80088a4:	18fa      	adds	r2, r7, r3
 80088a6:	2311      	movs	r3, #17
 80088a8:	18fb      	adds	r3, r7, r3
 80088aa:	7812      	ldrb	r2, [r2, #0]
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d200      	bcs.n	80088b4 <aes_set_key+0x264>
 80088b2:	e715      	b.n	80086e0 <aes_set_key+0x90>
    }
    return 0;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	0018      	movs	r0, r3
 80088b8:	46bd      	mov	sp, r7
 80088ba:	b007      	add	sp, #28
 80088bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088be:	46c0      	nop			@ (mov r8, r8)
 80088c0:	00010101 	.word	0x00010101
 80088c4:	0801ae24 	.word	0x0801ae24

080088c8 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 80088c8:	b5b0      	push	{r4, r5, r7, lr}
 80088ca:	b08a      	sub	sp, #40	@ 0x28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	22f0      	movs	r2, #240	@ 0xf0
 80088d8:	5c9b      	ldrb	r3, [r3, r2]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d039      	beq.n	8008952 <aes_encrypt+0x8a>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	68f9      	ldr	r1, [r7, #12]
 80088e2:	2314      	movs	r3, #20
 80088e4:	18fb      	adds	r3, r7, r3
 80088e6:	0018      	movs	r0, r3
 80088e8:	f7ff fb64 	bl	8007fb4 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 80088ec:	2327      	movs	r3, #39	@ 0x27
 80088ee:	18fb      	adds	r3, r7, r3
 80088f0:	2201      	movs	r2, #1
 80088f2:	701a      	strb	r2, [r3, #0]
 80088f4:	e014      	b.n	8008920 <aes_encrypt+0x58>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 80088f6:	2514      	movs	r5, #20
 80088f8:	197b      	adds	r3, r7, r5
 80088fa:	0018      	movs	r0, r3
 80088fc:	f7ff fcc2 	bl	8008284 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2427      	movs	r4, #39	@ 0x27
 8008904:	193a      	adds	r2, r7, r4
 8008906:	7812      	ldrb	r2, [r2, #0]
 8008908:	0112      	lsls	r2, r2, #4
 800890a:	189a      	adds	r2, r3, r2
 800890c:	197b      	adds	r3, r7, r5
 800890e:	0011      	movs	r1, r2
 8008910:	0018      	movs	r0, r3
 8008912:	f7ff fc06 	bl	8008122 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8008916:	193b      	adds	r3, r7, r4
 8008918:	193a      	adds	r2, r7, r4
 800891a:	7812      	ldrb	r2, [r2, #0]
 800891c:	3201      	adds	r2, #1
 800891e:	701a      	strb	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	22f0      	movs	r2, #240	@ 0xf0
 8008924:	5c9b      	ldrb	r3, [r3, r2]
 8008926:	2427      	movs	r4, #39	@ 0x27
 8008928:	193a      	adds	r2, r7, r4
 800892a:	7812      	ldrb	r2, [r2, #0]
 800892c:	429a      	cmp	r2, r3
 800892e:	d3e2      	bcc.n	80088f6 <aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8008930:	2514      	movs	r5, #20
 8008932:	197b      	adds	r3, r7, r5
 8008934:	0018      	movs	r0, r3
 8008936:	f7ff fc03 	bl	8008140 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	193a      	adds	r2, r7, r4
 800893e:	7812      	ldrb	r2, [r2, #0]
 8008940:	0112      	lsls	r2, r2, #4
 8008942:	189a      	adds	r2, r3, r2
 8008944:	1979      	adds	r1, r7, r5
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	0018      	movs	r0, r3
 800894a:	f7ff fb33 	bl	8007fb4 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800894e:	2300      	movs	r3, #0
 8008950:	e000      	b.n	8008954 <aes_encrypt+0x8c>
        return ( uint8_t )-1;
 8008952:	23ff      	movs	r3, #255	@ 0xff
}
 8008954:	0018      	movs	r0, r3
 8008956:	46bd      	mov	sp, r7
 8008958:	b00a      	add	sp, #40	@ 0x28
 800895a:	bdb0      	pop	{r4, r5, r7, pc}

0800895c <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
            memset1(ctx->X, 0, sizeof ctx->X);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	33f1      	adds	r3, #241	@ 0xf1
 8008968:	2210      	movs	r2, #16
 800896a:	2100      	movs	r1, #0
 800896c:	0018      	movs	r0, r3
 800896e:	f00c fe41 	bl	80155f4 <memset1>
            ctx->M_n = 0;
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	238a      	movs	r3, #138	@ 0x8a
 8008976:	005b      	lsls	r3, r3, #1
 8008978:	2100      	movs	r1, #0
 800897a:	50d1      	str	r1, [r2, r3]
        memset1(ctx->rijndael.ksch, '\0', 240);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	22f0      	movs	r2, #240	@ 0xf0
 8008980:	2100      	movs	r1, #0
 8008982:	0018      	movs	r0, r3
 8008984:	f00c fe36 	bl	80155f4 <memset1>
}
 8008988:	46c0      	nop			@ (mov r8, r8)
 800898a:	46bd      	mov	sp, r7
 800898c:	b002      	add	sp, #8
 800898e:	bd80      	pop	{r7, pc}

08008990 <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	2110      	movs	r1, #16
 80089a0:	0018      	movs	r0, r3
 80089a2:	f7ff fe55 	bl	8008650 <aes_set_key>
}
 80089a6:	46c0      	nop			@ (mov r8, r8)
 80089a8:	46bd      	mov	sp, r7
 80089aa:	b002      	add	sp, #8
 80089ac:	bd80      	pop	{r7, pc}

080089ae <AES_CMAC_Update>:
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
 80089ae:	b590      	push	{r4, r7, lr}
 80089b0:	b08d      	sub	sp, #52	@ 0x34
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	60f8      	str	r0, [r7, #12]
 80089b6:	60b9      	str	r1, [r7, #8]
 80089b8:	607a      	str	r2, [r7, #4]
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	238a      	movs	r3, #138	@ 0x8a
 80089be:	005b      	lsls	r3, r3, #1
 80089c0:	58d3      	ldr	r3, [r2, r3]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d100      	bne.n	80089c8 <AES_CMAC_Update+0x1a>
 80089c6:	e097      	b.n	8008af8 <AES_CMAC_Update+0x14a>
                  mlen = MIN(16 - ctx->M_n, len);
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	238a      	movs	r3, #138	@ 0x8a
 80089cc:	005b      	lsls	r3, r3, #1
 80089ce:	58d3      	ldr	r3, [r2, r3]
 80089d0:	2210      	movs	r2, #16
 80089d2:	1ad2      	subs	r2, r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d900      	bls.n	80089dc <AES_CMAC_Update+0x2e>
 80089da:	0013      	movs	r3, r2
 80089dc:	627b      	str	r3, [r7, #36]	@ 0x24
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	1c9a      	adds	r2, r3, #2
 80089e2:	32ff      	adds	r2, #255	@ 0xff
 80089e4:	68f9      	ldr	r1, [r7, #12]
 80089e6:	238a      	movs	r3, #138	@ 0x8a
 80089e8:	005b      	lsls	r3, r3, #1
 80089ea:	58cb      	ldr	r3, [r1, r3]
 80089ec:	18d3      	adds	r3, r2, r3
 80089ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089f0:	b292      	uxth	r2, r2
 80089f2:	68b9      	ldr	r1, [r7, #8]
 80089f4:	0018      	movs	r0, r3
 80089f6:	f00c fdbf 	bl	8015578 <memcpy1>
                    ctx->M_n += mlen;
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	238a      	movs	r3, #138	@ 0x8a
 80089fe:	005b      	lsls	r3, r3, #1
 8008a00:	58d2      	ldr	r2, [r2, r3]
 8008a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a04:	18d1      	adds	r1, r2, r3
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	238a      	movs	r3, #138	@ 0x8a
 8008a0a:	005b      	lsls	r3, r3, #1
 8008a0c:	50d1      	str	r1, [r2, r3]
                    if (ctx->M_n < 16 || len == mlen)
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	238a      	movs	r3, #138	@ 0x8a
 8008a12:	005b      	lsls	r3, r3, #1
 8008a14:	58d3      	ldr	r3, [r2, r3]
 8008a16:	2b0f      	cmp	r3, #15
 8008a18:	d800      	bhi.n	8008a1c <AES_CMAC_Update+0x6e>
 8008a1a:	e07f      	b.n	8008b1c <AES_CMAC_Update+0x16e>
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d100      	bne.n	8008a26 <AES_CMAC_Update+0x78>
 8008a24:	e07a      	b.n	8008b1c <AES_CMAC_Update+0x16e>
                            return;
                   XOR(ctx->M_last, ctx->X);
 8008a26:	2300      	movs	r3, #0
 8008a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a2a:	e018      	b.n	8008a5e <AES_CMAC_Update+0xb0>
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	21f1      	movs	r1, #241	@ 0xf1
 8008a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a32:	18d3      	adds	r3, r2, r3
 8008a34:	185b      	adds	r3, r3, r1
 8008a36:	781a      	ldrb	r2, [r3, #0]
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	2302      	movs	r3, #2
 8008a3c:	33ff      	adds	r3, #255	@ 0xff
 8008a3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a40:	1841      	adds	r1, r0, r1
 8008a42:	18cb      	adds	r3, r1, r3
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	4053      	eors	r3, r2
 8008a48:	b2d8      	uxtb	r0, r3
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	21f1      	movs	r1, #241	@ 0xf1
 8008a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a50:	18d3      	adds	r3, r2, r3
 8008a52:	185b      	adds	r3, r3, r1
 8008a54:	1c02      	adds	r2, r0, #0
 8008a56:	701a      	strb	r2, [r3, #0]
 8008a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a60:	2b0f      	cmp	r3, #15
 8008a62:	dde3      	ble.n	8008a2c <AES_CMAC_Update+0x7e>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	33f1      	adds	r3, #241	@ 0xf1
 8008a68:	0018      	movs	r0, r3
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	33f1      	adds	r3, #241	@ 0xf1
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	0019      	movs	r1, r3
 8008a72:	f7ff ff29 	bl	80088c8 <aes_encrypt>
                    data += mlen;
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a7a:	18d3      	adds	r3, r2, r3
 8008a7c:	60bb      	str	r3, [r7, #8]
                    len -= mlen;
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	607b      	str	r3, [r7, #4]
            }
            while (len > 16) {      /* not last block */
 8008a86:	e037      	b.n	8008af8 <AES_CMAC_Update+0x14a>

                    XOR(data, ctx->X);
 8008a88:	2300      	movs	r3, #0
 8008a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a8c:	e015      	b.n	8008aba <AES_CMAC_Update+0x10c>
 8008a8e:	68fa      	ldr	r2, [r7, #12]
 8008a90:	21f1      	movs	r1, #241	@ 0xf1
 8008a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a94:	18d3      	adds	r3, r2, r3
 8008a96:	185b      	adds	r3, r3, r1
 8008a98:	781a      	ldrb	r2, [r3, #0]
 8008a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a9c:	68b9      	ldr	r1, [r7, #8]
 8008a9e:	18cb      	adds	r3, r1, r3
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	4053      	eors	r3, r2
 8008aa4:	b2d8      	uxtb	r0, r3
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	21f1      	movs	r1, #241	@ 0xf1
 8008aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aac:	18d3      	adds	r3, r2, r3
 8008aae:	185b      	adds	r3, r3, r1
 8008ab0:	1c02      	adds	r2, r0, #0
 8008ab2:	701a      	strb	r2, [r3, #0]
 8008ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008abc:	2b0f      	cmp	r3, #15
 8008abe:	dde6      	ble.n	8008a8e <AES_CMAC_Update+0xe0>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	33f1      	adds	r3, #241	@ 0xf1
 8008ac4:	0019      	movs	r1, r3
 8008ac6:	2414      	movs	r4, #20
 8008ac8:	193b      	adds	r3, r7, r4
 8008aca:	2210      	movs	r2, #16
 8008acc:	0018      	movs	r0, r3
 8008ace:	f00c fd53 	bl	8015578 <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	1939      	adds	r1, r7, r4
 8008ad6:	193b      	adds	r3, r7, r4
 8008ad8:	0018      	movs	r0, r3
 8008ada:	f7ff fef5 	bl	80088c8 <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	33f1      	adds	r3, #241	@ 0xf1
 8008ae2:	1939      	adds	r1, r7, r4
 8008ae4:	2210      	movs	r2, #16
 8008ae6:	0018      	movs	r0, r3
 8008ae8:	f00c fd46 	bl	8015578 <memcpy1>

                    data += 16;
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	3310      	adds	r3, #16
 8008af0:	60bb      	str	r3, [r7, #8]
                    len -= 16;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	3b10      	subs	r3, #16
 8008af6:	607b      	str	r3, [r7, #4]
            while (len > 16) {      /* not last block */
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b10      	cmp	r3, #16
 8008afc:	d8c4      	bhi.n	8008a88 <AES_CMAC_Update+0xda>
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	3302      	adds	r3, #2
 8008b02:	33ff      	adds	r3, #255	@ 0xff
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	b292      	uxth	r2, r2
 8008b08:	68b9      	ldr	r1, [r7, #8]
 8008b0a:	0018      	movs	r0, r3
 8008b0c:	f00c fd34 	bl	8015578 <memcpy1>
            ctx->M_n = len;
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	238a      	movs	r3, #138	@ 0x8a
 8008b14:	005b      	lsls	r3, r3, #1
 8008b16:	6879      	ldr	r1, [r7, #4]
 8008b18:	50d1      	str	r1, [r2, r3]
 8008b1a:	e000      	b.n	8008b1e <AES_CMAC_Update+0x170>
                            return;
 8008b1c:	46c0      	nop			@ (mov r8, r8)
}
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	b00d      	add	sp, #52	@ 0x34
 8008b22:	bd90      	pop	{r4, r7, pc}

08008b24 <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 8008b24:	b590      	push	{r4, r7, lr}
 8008b26:	b093      	sub	sp, #76	@ 0x4c
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 8008b2e:	241c      	movs	r4, #28
 8008b30:	193b      	adds	r3, r7, r4
 8008b32:	2210      	movs	r2, #16
 8008b34:	2100      	movs	r1, #0
 8008b36:	0018      	movs	r0, r3
 8008b38:	f00c fd5c 	bl	80155f4 <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	1939      	adds	r1, r7, r4
 8008b40:	193b      	adds	r3, r7, r4
 8008b42:	0018      	movs	r0, r3
 8008b44:	f7ff fec0 	bl	80088c8 <aes_encrypt>

            if (K[0] & 0x80) {
 8008b48:	193b      	adds	r3, r7, r4
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	b25b      	sxtb	r3, r3
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	da2e      	bge.n	8008bb0 <AES_CMAC_Final+0x8c>
                    LSHIFT(K, K);
 8008b52:	2300      	movs	r3, #0
 8008b54:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b56:	e018      	b.n	8008b8a <AES_CMAC_Final+0x66>
 8008b58:	201c      	movs	r0, #28
 8008b5a:	183a      	adds	r2, r7, r0
 8008b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b5e:	18d3      	adds	r3, r2, r3
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	005b      	lsls	r3, r3, #1
 8008b64:	b25a      	sxtb	r2, r3
 8008b66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b68:	3301      	adds	r3, #1
 8008b6a:	1839      	adds	r1, r7, r0
 8008b6c:	5ccb      	ldrb	r3, [r1, r3]
 8008b6e:	09db      	lsrs	r3, r3, #7
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	b25b      	sxtb	r3, r3
 8008b74:	4313      	orrs	r3, r2
 8008b76:	b25b      	sxtb	r3, r3
 8008b78:	b2d9      	uxtb	r1, r3
 8008b7a:	183a      	adds	r2, r7, r0
 8008b7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b7e:	18d3      	adds	r3, r2, r3
 8008b80:	1c0a      	adds	r2, r1, #0
 8008b82:	701a      	strb	r2, [r3, #0]
 8008b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b86:	3301      	adds	r3, #1
 8008b88:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b8c:	2b0e      	cmp	r3, #14
 8008b8e:	dde3      	ble.n	8008b58 <AES_CMAC_Final+0x34>
 8008b90:	211c      	movs	r1, #28
 8008b92:	187b      	adds	r3, r7, r1
 8008b94:	7bdb      	ldrb	r3, [r3, #15]
 8008b96:	18db      	adds	r3, r3, r3
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	187b      	adds	r3, r7, r1
 8008b9c:	73da      	strb	r2, [r3, #15]
                   K[15] ^= 0x87;
 8008b9e:	187b      	adds	r3, r7, r1
 8008ba0:	7bdb      	ldrb	r3, [r3, #15]
 8008ba2:	2279      	movs	r2, #121	@ 0x79
 8008ba4:	4252      	negs	r2, r2
 8008ba6:	4053      	eors	r3, r2
 8008ba8:	b2da      	uxtb	r2, r3
 8008baa:	187b      	adds	r3, r7, r1
 8008bac:	73da      	strb	r2, [r3, #15]
 8008bae:	e025      	b.n	8008bfc <AES_CMAC_Final+0xd8>
            } else
                    LSHIFT(K, K);
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bb4:	e018      	b.n	8008be8 <AES_CMAC_Final+0xc4>
 8008bb6:	201c      	movs	r0, #28
 8008bb8:	183a      	adds	r2, r7, r0
 8008bba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bbc:	18d3      	adds	r3, r2, r3
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	005b      	lsls	r3, r3, #1
 8008bc2:	b25a      	sxtb	r2, r3
 8008bc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	1839      	adds	r1, r7, r0
 8008bca:	5ccb      	ldrb	r3, [r1, r3]
 8008bcc:	09db      	lsrs	r3, r3, #7
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	b25b      	sxtb	r3, r3
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	b25b      	sxtb	r3, r3
 8008bd6:	b2d9      	uxtb	r1, r3
 8008bd8:	183a      	adds	r2, r7, r0
 8008bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bdc:	18d3      	adds	r3, r2, r3
 8008bde:	1c0a      	adds	r2, r1, #0
 8008be0:	701a      	strb	r2, [r3, #0]
 8008be2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008be4:	3301      	adds	r3, #1
 8008be6:	643b      	str	r3, [r7, #64]	@ 0x40
 8008be8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bea:	2b0e      	cmp	r3, #14
 8008bec:	dde3      	ble.n	8008bb6 <AES_CMAC_Final+0x92>
 8008bee:	211c      	movs	r1, #28
 8008bf0:	187b      	adds	r3, r7, r1
 8008bf2:	7bdb      	ldrb	r3, [r3, #15]
 8008bf4:	18db      	adds	r3, r3, r3
 8008bf6:	b2da      	uxtb	r2, r3
 8008bf8:	187b      	adds	r3, r7, r1
 8008bfa:	73da      	strb	r2, [r3, #15]


            if (ctx->M_n == 16) {
 8008bfc:	683a      	ldr	r2, [r7, #0]
 8008bfe:	238a      	movs	r3, #138	@ 0x8a
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	58d3      	ldr	r3, [r2, r3]
 8008c04:	2b10      	cmp	r3, #16
 8008c06:	d11f      	bne.n	8008c48 <AES_CMAC_Final+0x124>
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 8008c08:	2300      	movs	r3, #0
 8008c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c0c:	e018      	b.n	8008c40 <AES_CMAC_Final+0x11c>
 8008c0e:	6839      	ldr	r1, [r7, #0]
 8008c10:	2302      	movs	r3, #2
 8008c12:	33ff      	adds	r3, #255	@ 0xff
 8008c14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008c16:	188a      	adds	r2, r1, r2
 8008c18:	18d3      	adds	r3, r2, r3
 8008c1a:	781a      	ldrb	r2, [r3, #0]
 8008c1c:	231c      	movs	r3, #28
 8008c1e:	18f9      	adds	r1, r7, r3
 8008c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c22:	18cb      	adds	r3, r1, r3
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	4053      	eors	r3, r2
 8008c28:	b2d8      	uxtb	r0, r3
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	33ff      	adds	r3, #255	@ 0xff
 8008c30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008c32:	188a      	adds	r2, r1, r2
 8008c34:	18d3      	adds	r3, r2, r3
 8008c36:	1c02      	adds	r2, r0, #0
 8008c38:	701a      	strb	r2, [r3, #0]
 8008c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c42:	2b0f      	cmp	r3, #15
 8008c44:	dde3      	ble.n	8008c0e <AES_CMAC_Final+0xea>
 8008c46:	e09f      	b.n	8008d88 <AES_CMAC_Final+0x264>

           } else {
                   /* generate subkey K2 */
                  if (K[0] & 0x80) {
 8008c48:	231c      	movs	r3, #28
 8008c4a:	18fb      	adds	r3, r7, r3
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	b25b      	sxtb	r3, r3
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	da2e      	bge.n	8008cb2 <AES_CMAC_Final+0x18e>
                          LSHIFT(K, K);
 8008c54:	2300      	movs	r3, #0
 8008c56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c58:	e018      	b.n	8008c8c <AES_CMAC_Final+0x168>
 8008c5a:	201c      	movs	r0, #28
 8008c5c:	183a      	adds	r2, r7, r0
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c60:	18d3      	adds	r3, r2, r3
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	005b      	lsls	r3, r3, #1
 8008c66:	b25a      	sxtb	r2, r3
 8008c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	1839      	adds	r1, r7, r0
 8008c6e:	5ccb      	ldrb	r3, [r1, r3]
 8008c70:	09db      	lsrs	r3, r3, #7
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	b25b      	sxtb	r3, r3
 8008c76:	4313      	orrs	r3, r2
 8008c78:	b25b      	sxtb	r3, r3
 8008c7a:	b2d9      	uxtb	r1, r3
 8008c7c:	183a      	adds	r2, r7, r0
 8008c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c80:	18d3      	adds	r3, r2, r3
 8008c82:	1c0a      	adds	r2, r1, #0
 8008c84:	701a      	strb	r2, [r3, #0]
 8008c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c88:	3301      	adds	r3, #1
 8008c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8e:	2b0e      	cmp	r3, #14
 8008c90:	dde3      	ble.n	8008c5a <AES_CMAC_Final+0x136>
 8008c92:	211c      	movs	r1, #28
 8008c94:	187b      	adds	r3, r7, r1
 8008c96:	7bdb      	ldrb	r3, [r3, #15]
 8008c98:	18db      	adds	r3, r3, r3
 8008c9a:	b2da      	uxtb	r2, r3
 8008c9c:	187b      	adds	r3, r7, r1
 8008c9e:	73da      	strb	r2, [r3, #15]
                          K[15] ^= 0x87;
 8008ca0:	187b      	adds	r3, r7, r1
 8008ca2:	7bdb      	ldrb	r3, [r3, #15]
 8008ca4:	2279      	movs	r2, #121	@ 0x79
 8008ca6:	4252      	negs	r2, r2
 8008ca8:	4053      	eors	r3, r2
 8008caa:	b2da      	uxtb	r2, r3
 8008cac:	187b      	adds	r3, r7, r1
 8008cae:	73da      	strb	r2, [r3, #15]
 8008cb0:	e025      	b.n	8008cfe <AES_CMAC_Final+0x1da>
                  } else
                           LSHIFT(K, K);
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cb6:	e018      	b.n	8008cea <AES_CMAC_Final+0x1c6>
 8008cb8:	201c      	movs	r0, #28
 8008cba:	183a      	adds	r2, r7, r0
 8008cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cbe:	18d3      	adds	r3, r2, r3
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	005b      	lsls	r3, r3, #1
 8008cc4:	b25a      	sxtb	r2, r3
 8008cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cc8:	3301      	adds	r3, #1
 8008cca:	1839      	adds	r1, r7, r0
 8008ccc:	5ccb      	ldrb	r3, [r1, r3]
 8008cce:	09db      	lsrs	r3, r3, #7
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	b25b      	sxtb	r3, r3
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	b25b      	sxtb	r3, r3
 8008cd8:	b2d9      	uxtb	r1, r3
 8008cda:	183a      	adds	r2, r7, r0
 8008cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cde:	18d3      	adds	r3, r2, r3
 8008ce0:	1c0a      	adds	r2, r1, #0
 8008ce2:	701a      	strb	r2, [r3, #0]
 8008ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cec:	2b0e      	cmp	r3, #14
 8008cee:	dde3      	ble.n	8008cb8 <AES_CMAC_Final+0x194>
 8008cf0:	211c      	movs	r1, #28
 8008cf2:	187b      	adds	r3, r7, r1
 8008cf4:	7bdb      	ldrb	r3, [r3, #15]
 8008cf6:	18db      	adds	r3, r3, r3
 8008cf8:	b2da      	uxtb	r2, r3
 8008cfa:	187b      	adds	r3, r7, r1
 8008cfc:	73da      	strb	r2, [r3, #15]

                   /* padding(M_last) */
                   ctx->M_last[ctx->M_n] = 0x80;
 8008cfe:	683a      	ldr	r2, [r7, #0]
 8008d00:	238a      	movs	r3, #138	@ 0x8a
 8008d02:	005b      	lsls	r3, r3, #1
 8008d04:	58d2      	ldr	r2, [r2, r3]
 8008d06:	6839      	ldr	r1, [r7, #0]
 8008d08:	2302      	movs	r3, #2
 8008d0a:	33ff      	adds	r3, #255	@ 0xff
 8008d0c:	188a      	adds	r2, r1, r2
 8008d0e:	18d3      	adds	r3, r2, r3
 8008d10:	2280      	movs	r2, #128	@ 0x80
 8008d12:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
 8008d14:	e00a      	b.n	8008d2c <AES_CMAC_Final+0x208>
                         ctx->M_last[ctx->M_n] = 0;
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	238a      	movs	r3, #138	@ 0x8a
 8008d1a:	005b      	lsls	r3, r3, #1
 8008d1c:	58d2      	ldr	r2, [r2, r3]
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	2302      	movs	r3, #2
 8008d22:	33ff      	adds	r3, #255	@ 0xff
 8008d24:	188a      	adds	r2, r1, r2
 8008d26:	18d3      	adds	r3, r2, r3
 8008d28:	2200      	movs	r2, #0
 8008d2a:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
 8008d2c:	683a      	ldr	r2, [r7, #0]
 8008d2e:	238a      	movs	r3, #138	@ 0x8a
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	58d3      	ldr	r3, [r2, r3]
 8008d34:	1c59      	adds	r1, r3, #1
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	238a      	movs	r3, #138	@ 0x8a
 8008d3a:	005b      	lsls	r3, r3, #1
 8008d3c:	50d1      	str	r1, [r2, r3]
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	238a      	movs	r3, #138	@ 0x8a
 8008d42:	005b      	lsls	r3, r3, #1
 8008d44:	58d3      	ldr	r3, [r2, r3]
 8008d46:	2b0f      	cmp	r3, #15
 8008d48:	d9e5      	bls.n	8008d16 <AES_CMAC_Final+0x1f2>
   
                  XOR(K, ctx->M_last);
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d4e:	e018      	b.n	8008d82 <AES_CMAC_Final+0x25e>
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	2302      	movs	r3, #2
 8008d54:	33ff      	adds	r3, #255	@ 0xff
 8008d56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d58:	188a      	adds	r2, r1, r2
 8008d5a:	18d3      	adds	r3, r2, r3
 8008d5c:	781a      	ldrb	r2, [r3, #0]
 8008d5e:	231c      	movs	r3, #28
 8008d60:	18f9      	adds	r1, r7, r3
 8008d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d64:	18cb      	adds	r3, r1, r3
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	4053      	eors	r3, r2
 8008d6a:	b2d8      	uxtb	r0, r3
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	2302      	movs	r3, #2
 8008d70:	33ff      	adds	r3, #255	@ 0xff
 8008d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d74:	188a      	adds	r2, r1, r2
 8008d76:	18d3      	adds	r3, r2, r3
 8008d78:	1c02      	adds	r2, r0, #0
 8008d7a:	701a      	strb	r2, [r3, #0]
 8008d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7e:	3301      	adds	r3, #1
 8008d80:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d84:	2b0f      	cmp	r3, #15
 8008d86:	dde3      	ble.n	8008d50 <AES_CMAC_Final+0x22c>


           }
           XOR(ctx->M_last, ctx->X);
 8008d88:	2300      	movs	r3, #0
 8008d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d8c:	e018      	b.n	8008dc0 <AES_CMAC_Final+0x29c>
 8008d8e:	683a      	ldr	r2, [r7, #0]
 8008d90:	21f1      	movs	r1, #241	@ 0xf1
 8008d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d94:	18d3      	adds	r3, r2, r3
 8008d96:	185b      	adds	r3, r3, r1
 8008d98:	781a      	ldrb	r2, [r3, #0]
 8008d9a:	6838      	ldr	r0, [r7, #0]
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	33ff      	adds	r3, #255	@ 0xff
 8008da0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008da2:	1841      	adds	r1, r0, r1
 8008da4:	18cb      	adds	r3, r1, r3
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	4053      	eors	r3, r2
 8008daa:	b2d8      	uxtb	r0, r3
 8008dac:	683a      	ldr	r2, [r7, #0]
 8008dae:	21f1      	movs	r1, #241	@ 0xf1
 8008db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db2:	18d3      	adds	r3, r2, r3
 8008db4:	185b      	adds	r3, r3, r1
 8008db6:	1c02      	adds	r2, r0, #0
 8008db8:	701a      	strb	r2, [r3, #0]
 8008dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc2:	2b0f      	cmp	r3, #15
 8008dc4:	dde3      	ble.n	8008d8e <AES_CMAC_Final+0x26a>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	33f1      	adds	r3, #241	@ 0xf1
 8008dca:	0019      	movs	r1, r3
 8008dcc:	240c      	movs	r4, #12
 8008dce:	193b      	adds	r3, r7, r4
 8008dd0:	2210      	movs	r2, #16
 8008dd2:	0018      	movs	r0, r3
 8008dd4:	f00c fbd0 	bl	8015578 <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 8008dd8:	683a      	ldr	r2, [r7, #0]
 8008dda:	6879      	ldr	r1, [r7, #4]
 8008ddc:	193b      	adds	r3, r7, r4
 8008dde:	0018      	movs	r0, r3
 8008de0:	f7ff fd72 	bl	80088c8 <aes_encrypt>
           memset1(K, 0, sizeof K);
 8008de4:	231c      	movs	r3, #28
 8008de6:	18fb      	adds	r3, r7, r3
 8008de8:	2210      	movs	r2, #16
 8008dea:	2100      	movs	r1, #0
 8008dec:	0018      	movs	r0, r3
 8008dee:	f00c fc01 	bl	80155f4 <memset1>

}
 8008df2:	46c0      	nop			@ (mov r8, r8)
 8008df4:	46bd      	mov	sp, r7
 8008df6:	b013      	add	sp, #76	@ 0x4c
 8008df8:	bd90      	pop	{r4, r7, pc}
	...

08008dfc <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 8008dfc:	b590      	push	{r4, r7, lr}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	0002      	movs	r2, r0
 8008e04:	6039      	str	r1, [r7, #0]
 8008e06:	1dfb      	adds	r3, r7, #7
 8008e08:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8008e0a:	230f      	movs	r3, #15
 8008e0c:	18fb      	adds	r3, r7, r3
 8008e0e:	2200      	movs	r2, #0
 8008e10:	701a      	strb	r2, [r3, #0]
 8008e12:	e024      	b.n	8008e5e <GetKeyByID+0x62>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8008e14:	240f      	movs	r4, #15
 8008e16:	193b      	adds	r3, r7, r4
 8008e18:	781a      	ldrb	r2, [r3, #0]
 8008e1a:	4816      	ldr	r0, [pc, #88]	@ (8008e74 <GetKeyByID+0x78>)
 8008e1c:	238b      	movs	r3, #139	@ 0x8b
 8008e1e:	0099      	lsls	r1, r3, #2
 8008e20:	0013      	movs	r3, r2
 8008e22:	011b      	lsls	r3, r3, #4
 8008e24:	189b      	adds	r3, r3, r2
 8008e26:	18c3      	adds	r3, r0, r3
 8008e28:	185b      	adds	r3, r3, r1
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	1dfa      	adds	r2, r7, #7
 8008e2e:	7812      	ldrb	r2, [r2, #0]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d10e      	bne.n	8008e52 <GetKeyByID+0x56>
        {
            *keyItem = &( SeNvmCtx.KeyList[i] );
 8008e34:	193b      	adds	r3, r7, r4
 8008e36:	781a      	ldrb	r2, [r3, #0]
 8008e38:	0013      	movs	r3, r2
 8008e3a:	011b      	lsls	r3, r3, #4
 8008e3c:	189b      	adds	r3, r3, r2
 8008e3e:	228a      	movs	r2, #138	@ 0x8a
 8008e40:	0092      	lsls	r2, r2, #2
 8008e42:	189a      	adds	r2, r3, r2
 8008e44:	4b0b      	ldr	r3, [pc, #44]	@ (8008e74 <GetKeyByID+0x78>)
 8008e46:	18d3      	adds	r3, r2, r3
 8008e48:	1d1a      	adds	r2, r3, #4
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	e00b      	b.n	8008e6a <GetKeyByID+0x6e>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8008e52:	210f      	movs	r1, #15
 8008e54:	187b      	adds	r3, r7, r1
 8008e56:	781a      	ldrb	r2, [r3, #0]
 8008e58:	187b      	adds	r3, r7, r1
 8008e5a:	3201      	adds	r2, #1
 8008e5c:	701a      	strb	r2, [r3, #0]
 8008e5e:	230f      	movs	r3, #15
 8008e60:	18fb      	adds	r3, r7, r3
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	2b17      	cmp	r3, #23
 8008e66:	d9d5      	bls.n	8008e14 <GetKeyByID+0x18>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8008e68:	2303      	movs	r3, #3
}
 8008e6a:	0018      	movs	r0, r3
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	b005      	add	sp, #20
 8008e70:	bd90      	pop	{r4, r7, pc}
 8008e72:	46c0      	nop			@ (mov r8, r8)
 8008e74:	20000578 	.word	0x20000578

08008e78 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	af00      	add	r7, sp, #0
    return;
 8008e7c:	46c0      	nop			@ (mov r8, r8)
}
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
	...

08008e84 <ComputeCmac>:
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8008e84:	b5b0      	push	{r4, r5, r7, lr}
 8008e86:	b08a      	sub	sp, #40	@ 0x28
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	0019      	movs	r1, r3
 8008e90:	1dbb      	adds	r3, r7, #6
 8008e92:	801a      	strh	r2, [r3, #0]
 8008e94:	1d7b      	adds	r3, r7, #5
 8008e96:	1c0a      	adds	r2, r1, #0
 8008e98:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d002      	beq.n	8008ea6 <ComputeCmac+0x22>
 8008ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d101      	bne.n	8008eaa <ComputeCmac+0x26>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8008ea6:	2302      	movs	r3, #2
 8008ea8:	e045      	b.n	8008f36 <ComputeCmac+0xb2>
    }

    uint8_t Cmac[16];

    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 8008eaa:	4b25      	ldr	r3, [pc, #148]	@ (8008f40 <ComputeCmac+0xbc>)
 8008eac:	0018      	movs	r0, r3
 8008eae:	f7ff fd55 	bl	800895c <AES_CMAC_Init>

    Key_t* keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8008eb2:	2527      	movs	r5, #39	@ 0x27
 8008eb4:	197c      	adds	r4, r7, r5
 8008eb6:	2310      	movs	r3, #16
 8008eb8:	18fa      	adds	r2, r7, r3
 8008eba:	1d7b      	adds	r3, r7, #5
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	0011      	movs	r1, r2
 8008ec0:	0018      	movs	r0, r3
 8008ec2:	f7ff ff9b 	bl	8008dfc <GetKeyByID>
 8008ec6:	0003      	movs	r3, r0
 8008ec8:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 8008eca:	197b      	adds	r3, r7, r5
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d12e      	bne.n	8008f30 <ComputeCmac+0xac>
    {
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	1c5a      	adds	r2, r3, #1
 8008ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8008f40 <ComputeCmac+0xbc>)
 8008ed8:	0011      	movs	r1, r2
 8008eda:	0018      	movs	r0, r3
 8008edc:	f7ff fd58 	bl	8008990 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d005      	beq.n	8008ef2 <ComputeCmac+0x6e>
        {
            AES_CMAC_Update( SeNvmCtx.AesCmacCtx, micBxBuffer, 16 );
 8008ee6:	68f9      	ldr	r1, [r7, #12]
 8008ee8:	4b15      	ldr	r3, [pc, #84]	@ (8008f40 <ComputeCmac+0xbc>)
 8008eea:	2210      	movs	r2, #16
 8008eec:	0018      	movs	r0, r3
 8008eee:	f7ff fd5e 	bl	80089ae <AES_CMAC_Update>
        }

        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
 8008ef2:	1dbb      	adds	r3, r7, #6
 8008ef4:	881a      	ldrh	r2, [r3, #0]
 8008ef6:	68b9      	ldr	r1, [r7, #8]
 8008ef8:	4b11      	ldr	r3, [pc, #68]	@ (8008f40 <ComputeCmac+0xbc>)
 8008efa:	0018      	movs	r0, r3
 8008efc:	f7ff fd57 	bl	80089ae <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
 8008f00:	4a0f      	ldr	r2, [pc, #60]	@ (8008f40 <ComputeCmac+0xbc>)
 8008f02:	2414      	movs	r4, #20
 8008f04:	193b      	adds	r3, r7, r4
 8008f06:	0011      	movs	r1, r2
 8008f08:	0018      	movs	r0, r3
 8008f0a:	f7ff fe0b 	bl	8008b24 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
 8008f0e:	0021      	movs	r1, r4
 8008f10:	187b      	adds	r3, r7, r1
 8008f12:	78db      	ldrb	r3, [r3, #3]
 8008f14:	061a      	lsls	r2, r3, #24
 8008f16:	187b      	adds	r3, r7, r1
 8008f18:	789b      	ldrb	r3, [r3, #2]
 8008f1a:	041b      	lsls	r3, r3, #16
 8008f1c:	431a      	orrs	r2, r3
 8008f1e:	187b      	adds	r3, r7, r1
 8008f20:	785b      	ldrb	r3, [r3, #1]
 8008f22:	021b      	lsls	r3, r3, #8
 8008f24:	4313      	orrs	r3, r2
 8008f26:	187a      	adds	r2, r7, r1
 8008f28:	7812      	ldrb	r2, [r2, #0]
 8008f2a:	431a      	orrs	r2, r3
 8008f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f2e:	601a      	str	r2, [r3, #0]
    }

    return retval;
 8008f30:	2327      	movs	r3, #39	@ 0x27
 8008f32:	18fb      	adds	r3, r7, r3
 8008f34:	781b      	ldrb	r3, [r3, #0]
}
 8008f36:	0018      	movs	r0, r3
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	b00a      	add	sp, #40	@ 0x28
 8008f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8008f3e:	46c0      	nop			@ (mov r8, r8)
 8008f40:	2000068c 	.word	0x2000068c

08008f44 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( SecureElementNvmEvent seNvmCtxChanged )
{
 8008f44:	b5b0      	push	{r4, r5, r7, lr}
 8008f46:	b088      	sub	sp, #32
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
    uint8_t itr = 0;
 8008f4c:	241f      	movs	r4, #31
 8008f4e:	193b      	adds	r3, r7, r4
 8008f50:	2200      	movs	r2, #0
 8008f52:	701a      	strb	r2, [r3, #0]
    uint8_t zeroKey[16] = { 0 };
 8008f54:	250c      	movs	r5, #12
 8008f56:	197b      	adds	r3, r7, r5
 8008f58:	2200      	movs	r2, #0
 8008f5a:	601a      	str	r2, [r3, #0]
 8008f5c:	3304      	adds	r3, #4
 8008f5e:	220c      	movs	r2, #12
 8008f60:	2100      	movs	r1, #0
 8008f62:	0018      	movs	r0, r3
 8008f64:	f010 fd22 	bl	80199ac <memset>

    // Initialize with defaults
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 8008f68:	193b      	adds	r3, r7, r4
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	193a      	adds	r2, r7, r4
 8008f6e:	1c59      	adds	r1, r3, #1
 8008f70:	7011      	strb	r1, [r2, #0]
 8008f72:	0018      	movs	r0, r3
 8008f74:	49d0      	ldr	r1, [pc, #832]	@ (80092b8 <SecureElementInit+0x374>)
 8008f76:	238b      	movs	r3, #139	@ 0x8b
 8008f78:	009a      	lsls	r2, r3, #2
 8008f7a:	0003      	movs	r3, r0
 8008f7c:	011b      	lsls	r3, r3, #4
 8008f7e:	181b      	adds	r3, r3, r0
 8008f80:	18cb      	adds	r3, r1, r3
 8008f82:	189b      	adds	r3, r3, r2
 8008f84:	2200      	movs	r2, #0
 8008f86:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = GEN_APP_KEY;
 8008f88:	193b      	adds	r3, r7, r4
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	193a      	adds	r2, r7, r4
 8008f8e:	1c59      	adds	r1, r3, #1
 8008f90:	7011      	strb	r1, [r2, #0]
 8008f92:	0018      	movs	r0, r3
 8008f94:	49c8      	ldr	r1, [pc, #800]	@ (80092b8 <SecureElementInit+0x374>)
 8008f96:	238b      	movs	r3, #139	@ 0x8b
 8008f98:	009a      	lsls	r2, r3, #2
 8008f9a:	0003      	movs	r3, r0
 8008f9c:	011b      	lsls	r3, r3, #4
 8008f9e:	181b      	adds	r3, r3, r0
 8008fa0:	18cb      	adds	r3, r1, r3
 8008fa2:	189b      	adds	r3, r3, r2
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_KEY;
 8008fa8:	193b      	adds	r3, r7, r4
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	193a      	adds	r2, r7, r4
 8008fae:	1c59      	adds	r1, r3, #1
 8008fb0:	7011      	strb	r1, [r2, #0]
 8008fb2:	0018      	movs	r0, r3
 8008fb4:	49c0      	ldr	r1, [pc, #768]	@ (80092b8 <SecureElementInit+0x374>)
 8008fb6:	238b      	movs	r3, #139	@ 0x8b
 8008fb8:	009a      	lsls	r2, r3, #2
 8008fba:	0003      	movs	r3, r0
 8008fbc:	011b      	lsls	r3, r3, #4
 8008fbe:	181b      	adds	r3, r3, r0
 8008fc0:	18cb      	adds	r3, r1, r3
 8008fc2:	189b      	adds	r3, r3, r2
 8008fc4:	2202      	movs	r2, #2
 8008fc6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_INT_KEY;
 8008fc8:	193b      	adds	r3, r7, r4
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	193a      	adds	r2, r7, r4
 8008fce:	1c59      	adds	r1, r3, #1
 8008fd0:	7011      	strb	r1, [r2, #0]
 8008fd2:	0018      	movs	r0, r3
 8008fd4:	49b8      	ldr	r1, [pc, #736]	@ (80092b8 <SecureElementInit+0x374>)
 8008fd6:	238b      	movs	r3, #139	@ 0x8b
 8008fd8:	009a      	lsls	r2, r3, #2
 8008fda:	0003      	movs	r3, r0
 8008fdc:	011b      	lsls	r3, r3, #4
 8008fde:	181b      	adds	r3, r3, r0
 8008fe0:	18cb      	adds	r3, r1, r3
 8008fe2:	189b      	adds	r3, r3, r2
 8008fe4:	2203      	movs	r2, #3
 8008fe6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_ENC_KEY;
 8008fe8:	193b      	adds	r3, r7, r4
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	193a      	adds	r2, r7, r4
 8008fee:	1c59      	adds	r1, r3, #1
 8008ff0:	7011      	strb	r1, [r2, #0]
 8008ff2:	0018      	movs	r0, r3
 8008ff4:	49b0      	ldr	r1, [pc, #704]	@ (80092b8 <SecureElementInit+0x374>)
 8008ff6:	238b      	movs	r3, #139	@ 0x8b
 8008ff8:	009a      	lsls	r2, r3, #2
 8008ffa:	0003      	movs	r3, r0
 8008ffc:	011b      	lsls	r3, r3, #4
 8008ffe:	181b      	adds	r3, r3, r0
 8009000:	18cb      	adds	r3, r1, r3
 8009002:	189b      	adds	r3, r3, r2
 8009004:	2204      	movs	r2, #4
 8009006:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = F_NWK_S_INT_KEY;
 8009008:	193b      	adds	r3, r7, r4
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	193a      	adds	r2, r7, r4
 800900e:	1c59      	adds	r1, r3, #1
 8009010:	7011      	strb	r1, [r2, #0]
 8009012:	0018      	movs	r0, r3
 8009014:	49a8      	ldr	r1, [pc, #672]	@ (80092b8 <SecureElementInit+0x374>)
 8009016:	238b      	movs	r3, #139	@ 0x8b
 8009018:	009a      	lsls	r2, r3, #2
 800901a:	0003      	movs	r3, r0
 800901c:	011b      	lsls	r3, r3, #4
 800901e:	181b      	adds	r3, r3, r0
 8009020:	18cb      	adds	r3, r1, r3
 8009022:	189b      	adds	r3, r3, r2
 8009024:	2205      	movs	r2, #5
 8009026:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = S_NWK_S_INT_KEY;
 8009028:	193b      	adds	r3, r7, r4
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	193a      	adds	r2, r7, r4
 800902e:	1c59      	adds	r1, r3, #1
 8009030:	7011      	strb	r1, [r2, #0]
 8009032:	0018      	movs	r0, r3
 8009034:	49a0      	ldr	r1, [pc, #640]	@ (80092b8 <SecureElementInit+0x374>)
 8009036:	238b      	movs	r3, #139	@ 0x8b
 8009038:	009a      	lsls	r2, r3, #2
 800903a:	0003      	movs	r3, r0
 800903c:	011b      	lsls	r3, r3, #4
 800903e:	181b      	adds	r3, r3, r0
 8009040:	18cb      	adds	r3, r1, r3
 8009042:	189b      	adds	r3, r3, r2
 8009044:	2206      	movs	r2, #6
 8009046:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_S_ENC_KEY;
 8009048:	193b      	adds	r3, r7, r4
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	193a      	adds	r2, r7, r4
 800904e:	1c59      	adds	r1, r3, #1
 8009050:	7011      	strb	r1, [r2, #0]
 8009052:	0018      	movs	r0, r3
 8009054:	4998      	ldr	r1, [pc, #608]	@ (80092b8 <SecureElementInit+0x374>)
 8009056:	238b      	movs	r3, #139	@ 0x8b
 8009058:	009a      	lsls	r2, r3, #2
 800905a:	0003      	movs	r3, r0
 800905c:	011b      	lsls	r3, r3, #4
 800905e:	181b      	adds	r3, r3, r0
 8009060:	18cb      	adds	r3, r1, r3
 8009062:	189b      	adds	r3, r3, r2
 8009064:	2207      	movs	r2, #7
 8009066:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = APP_S_KEY;
 8009068:	193b      	adds	r3, r7, r4
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	193a      	adds	r2, r7, r4
 800906e:	1c59      	adds	r1, r3, #1
 8009070:	7011      	strb	r1, [r2, #0]
 8009072:	0018      	movs	r0, r3
 8009074:	4990      	ldr	r1, [pc, #576]	@ (80092b8 <SecureElementInit+0x374>)
 8009076:	238b      	movs	r3, #139	@ 0x8b
 8009078:	009a      	lsls	r2, r3, #2
 800907a:	0003      	movs	r3, r0
 800907c:	011b      	lsls	r3, r3, #4
 800907e:	181b      	adds	r3, r3, r0
 8009080:	18cb      	adds	r3, r1, r3
 8009082:	189b      	adds	r3, r3, r2
 8009084:	2208      	movs	r2, #8
 8009086:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_ROOT_KEY;
 8009088:	193b      	adds	r3, r7, r4
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	193a      	adds	r2, r7, r4
 800908e:	1c59      	adds	r1, r3, #1
 8009090:	7011      	strb	r1, [r2, #0]
 8009092:	0018      	movs	r0, r3
 8009094:	4988      	ldr	r1, [pc, #544]	@ (80092b8 <SecureElementInit+0x374>)
 8009096:	238b      	movs	r3, #139	@ 0x8b
 8009098:	009a      	lsls	r2, r3, #2
 800909a:	0003      	movs	r3, r0
 800909c:	011b      	lsls	r3, r3, #4
 800909e:	181b      	adds	r3, r3, r0
 80090a0:	18cb      	adds	r3, r1, r3
 80090a2:	189b      	adds	r3, r3, r2
 80090a4:	2209      	movs	r2, #9
 80090a6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KE_KEY;
 80090a8:	193b      	adds	r3, r7, r4
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	193a      	adds	r2, r7, r4
 80090ae:	1c59      	adds	r1, r3, #1
 80090b0:	7011      	strb	r1, [r2, #0]
 80090b2:	0018      	movs	r0, r3
 80090b4:	4980      	ldr	r1, [pc, #512]	@ (80092b8 <SecureElementInit+0x374>)
 80090b6:	238b      	movs	r3, #139	@ 0x8b
 80090b8:	009a      	lsls	r2, r3, #2
 80090ba:	0003      	movs	r3, r0
 80090bc:	011b      	lsls	r3, r3, #4
 80090be:	181b      	adds	r3, r3, r0
 80090c0:	18cb      	adds	r3, r1, r3
 80090c2:	189b      	adds	r3, r3, r2
 80090c4:	227f      	movs	r2, #127	@ 0x7f
 80090c6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_0;
 80090c8:	193b      	adds	r3, r7, r4
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	193a      	adds	r2, r7, r4
 80090ce:	1c59      	adds	r1, r3, #1
 80090d0:	7011      	strb	r1, [r2, #0]
 80090d2:	0018      	movs	r0, r3
 80090d4:	4978      	ldr	r1, [pc, #480]	@ (80092b8 <SecureElementInit+0x374>)
 80090d6:	238b      	movs	r3, #139	@ 0x8b
 80090d8:	009a      	lsls	r2, r3, #2
 80090da:	0003      	movs	r3, r0
 80090dc:	011b      	lsls	r3, r3, #4
 80090de:	181b      	adds	r3, r3, r0
 80090e0:	18cb      	adds	r3, r1, r3
 80090e2:	189b      	adds	r3, r3, r2
 80090e4:	2280      	movs	r2, #128	@ 0x80
 80090e6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_0;
 80090e8:	193b      	adds	r3, r7, r4
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	193a      	adds	r2, r7, r4
 80090ee:	1c59      	adds	r1, r3, #1
 80090f0:	7011      	strb	r1, [r2, #0]
 80090f2:	0018      	movs	r0, r3
 80090f4:	4970      	ldr	r1, [pc, #448]	@ (80092b8 <SecureElementInit+0x374>)
 80090f6:	238b      	movs	r3, #139	@ 0x8b
 80090f8:	009a      	lsls	r2, r3, #2
 80090fa:	0003      	movs	r3, r0
 80090fc:	011b      	lsls	r3, r3, #4
 80090fe:	181b      	adds	r3, r3, r0
 8009100:	18cb      	adds	r3, r1, r3
 8009102:	189b      	adds	r3, r3, r2
 8009104:	2281      	movs	r2, #129	@ 0x81
 8009106:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_0;
 8009108:	193b      	adds	r3, r7, r4
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	193a      	adds	r2, r7, r4
 800910e:	1c59      	adds	r1, r3, #1
 8009110:	7011      	strb	r1, [r2, #0]
 8009112:	0018      	movs	r0, r3
 8009114:	4968      	ldr	r1, [pc, #416]	@ (80092b8 <SecureElementInit+0x374>)
 8009116:	238b      	movs	r3, #139	@ 0x8b
 8009118:	009a      	lsls	r2, r3, #2
 800911a:	0003      	movs	r3, r0
 800911c:	011b      	lsls	r3, r3, #4
 800911e:	181b      	adds	r3, r3, r0
 8009120:	18cb      	adds	r3, r1, r3
 8009122:	189b      	adds	r3, r3, r2
 8009124:	2282      	movs	r2, #130	@ 0x82
 8009126:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_1;
 8009128:	193b      	adds	r3, r7, r4
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	193a      	adds	r2, r7, r4
 800912e:	1c59      	adds	r1, r3, #1
 8009130:	7011      	strb	r1, [r2, #0]
 8009132:	0018      	movs	r0, r3
 8009134:	4960      	ldr	r1, [pc, #384]	@ (80092b8 <SecureElementInit+0x374>)
 8009136:	238b      	movs	r3, #139	@ 0x8b
 8009138:	009a      	lsls	r2, r3, #2
 800913a:	0003      	movs	r3, r0
 800913c:	011b      	lsls	r3, r3, #4
 800913e:	181b      	adds	r3, r3, r0
 8009140:	18cb      	adds	r3, r1, r3
 8009142:	189b      	adds	r3, r3, r2
 8009144:	2283      	movs	r2, #131	@ 0x83
 8009146:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_1;
 8009148:	193b      	adds	r3, r7, r4
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	193a      	adds	r2, r7, r4
 800914e:	1c59      	adds	r1, r3, #1
 8009150:	7011      	strb	r1, [r2, #0]
 8009152:	0018      	movs	r0, r3
 8009154:	4958      	ldr	r1, [pc, #352]	@ (80092b8 <SecureElementInit+0x374>)
 8009156:	238b      	movs	r3, #139	@ 0x8b
 8009158:	009a      	lsls	r2, r3, #2
 800915a:	0003      	movs	r3, r0
 800915c:	011b      	lsls	r3, r3, #4
 800915e:	181b      	adds	r3, r3, r0
 8009160:	18cb      	adds	r3, r1, r3
 8009162:	189b      	adds	r3, r3, r2
 8009164:	2284      	movs	r2, #132	@ 0x84
 8009166:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_1;
 8009168:	193b      	adds	r3, r7, r4
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	193a      	adds	r2, r7, r4
 800916e:	1c59      	adds	r1, r3, #1
 8009170:	7011      	strb	r1, [r2, #0]
 8009172:	0018      	movs	r0, r3
 8009174:	4950      	ldr	r1, [pc, #320]	@ (80092b8 <SecureElementInit+0x374>)
 8009176:	238b      	movs	r3, #139	@ 0x8b
 8009178:	009a      	lsls	r2, r3, #2
 800917a:	0003      	movs	r3, r0
 800917c:	011b      	lsls	r3, r3, #4
 800917e:	181b      	adds	r3, r3, r0
 8009180:	18cb      	adds	r3, r1, r3
 8009182:	189b      	adds	r3, r3, r2
 8009184:	2285      	movs	r2, #133	@ 0x85
 8009186:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_2;
 8009188:	193b      	adds	r3, r7, r4
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	193a      	adds	r2, r7, r4
 800918e:	1c59      	adds	r1, r3, #1
 8009190:	7011      	strb	r1, [r2, #0]
 8009192:	0018      	movs	r0, r3
 8009194:	4948      	ldr	r1, [pc, #288]	@ (80092b8 <SecureElementInit+0x374>)
 8009196:	238b      	movs	r3, #139	@ 0x8b
 8009198:	009a      	lsls	r2, r3, #2
 800919a:	0003      	movs	r3, r0
 800919c:	011b      	lsls	r3, r3, #4
 800919e:	181b      	adds	r3, r3, r0
 80091a0:	18cb      	adds	r3, r1, r3
 80091a2:	189b      	adds	r3, r3, r2
 80091a4:	2286      	movs	r2, #134	@ 0x86
 80091a6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_2;
 80091a8:	193b      	adds	r3, r7, r4
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	193a      	adds	r2, r7, r4
 80091ae:	1c59      	adds	r1, r3, #1
 80091b0:	7011      	strb	r1, [r2, #0]
 80091b2:	0018      	movs	r0, r3
 80091b4:	4940      	ldr	r1, [pc, #256]	@ (80092b8 <SecureElementInit+0x374>)
 80091b6:	238b      	movs	r3, #139	@ 0x8b
 80091b8:	009a      	lsls	r2, r3, #2
 80091ba:	0003      	movs	r3, r0
 80091bc:	011b      	lsls	r3, r3, #4
 80091be:	181b      	adds	r3, r3, r0
 80091c0:	18cb      	adds	r3, r1, r3
 80091c2:	189b      	adds	r3, r3, r2
 80091c4:	2287      	movs	r2, #135	@ 0x87
 80091c6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_2;
 80091c8:	193b      	adds	r3, r7, r4
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	193a      	adds	r2, r7, r4
 80091ce:	1c59      	adds	r1, r3, #1
 80091d0:	7011      	strb	r1, [r2, #0]
 80091d2:	0018      	movs	r0, r3
 80091d4:	4938      	ldr	r1, [pc, #224]	@ (80092b8 <SecureElementInit+0x374>)
 80091d6:	238b      	movs	r3, #139	@ 0x8b
 80091d8:	009a      	lsls	r2, r3, #2
 80091da:	0003      	movs	r3, r0
 80091dc:	011b      	lsls	r3, r3, #4
 80091de:	181b      	adds	r3, r3, r0
 80091e0:	18cb      	adds	r3, r1, r3
 80091e2:	189b      	adds	r3, r3, r2
 80091e4:	2288      	movs	r2, #136	@ 0x88
 80091e6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_3;
 80091e8:	193b      	adds	r3, r7, r4
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	193a      	adds	r2, r7, r4
 80091ee:	1c59      	adds	r1, r3, #1
 80091f0:	7011      	strb	r1, [r2, #0]
 80091f2:	0018      	movs	r0, r3
 80091f4:	4930      	ldr	r1, [pc, #192]	@ (80092b8 <SecureElementInit+0x374>)
 80091f6:	238b      	movs	r3, #139	@ 0x8b
 80091f8:	009a      	lsls	r2, r3, #2
 80091fa:	0003      	movs	r3, r0
 80091fc:	011b      	lsls	r3, r3, #4
 80091fe:	181b      	adds	r3, r3, r0
 8009200:	18cb      	adds	r3, r1, r3
 8009202:	189b      	adds	r3, r3, r2
 8009204:	2289      	movs	r2, #137	@ 0x89
 8009206:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_3;
 8009208:	193b      	adds	r3, r7, r4
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	193a      	adds	r2, r7, r4
 800920e:	1c59      	adds	r1, r3, #1
 8009210:	7011      	strb	r1, [r2, #0]
 8009212:	0018      	movs	r0, r3
 8009214:	4928      	ldr	r1, [pc, #160]	@ (80092b8 <SecureElementInit+0x374>)
 8009216:	238b      	movs	r3, #139	@ 0x8b
 8009218:	009a      	lsls	r2, r3, #2
 800921a:	0003      	movs	r3, r0
 800921c:	011b      	lsls	r3, r3, #4
 800921e:	181b      	adds	r3, r3, r0
 8009220:	18cb      	adds	r3, r1, r3
 8009222:	189b      	adds	r3, r3, r2
 8009224:	228a      	movs	r2, #138	@ 0x8a
 8009226:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
 8009228:	193b      	adds	r3, r7, r4
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	193a      	adds	r2, r7, r4
 800922e:	1c59      	adds	r1, r3, #1
 8009230:	7011      	strb	r1, [r2, #0]
 8009232:	0018      	movs	r0, r3
 8009234:	4920      	ldr	r1, [pc, #128]	@ (80092b8 <SecureElementInit+0x374>)
 8009236:	238b      	movs	r3, #139	@ 0x8b
 8009238:	009a      	lsls	r2, r3, #2
 800923a:	0003      	movs	r3, r0
 800923c:	011b      	lsls	r3, r3, #4
 800923e:	181b      	adds	r3, r3, r0
 8009240:	18cb      	adds	r3, r1, r3
 8009242:	189b      	adds	r3, r3, r2
 8009244:	228b      	movs	r2, #139	@ 0x8b
 8009246:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;
 8009248:	193b      	adds	r3, r7, r4
 800924a:	781a      	ldrb	r2, [r3, #0]
 800924c:	481a      	ldr	r0, [pc, #104]	@ (80092b8 <SecureElementInit+0x374>)
 800924e:	238b      	movs	r3, #139	@ 0x8b
 8009250:	0099      	lsls	r1, r3, #2
 8009252:	0013      	movs	r3, r2
 8009254:	011b      	lsls	r3, r3, #4
 8009256:	189b      	adds	r3, r3, r2
 8009258:	18c3      	adds	r3, r0, r3
 800925a:	185b      	adds	r3, r3, r1
 800925c:	228c      	movs	r2, #140	@ 0x8c
 800925e:	701a      	strb	r2, [r3, #0]

    // Set standard keys
    memcpy1( SeNvmCtx.KeyList[itr].KeyValue, zeroKey, KEY_SIZE );
 8009260:	193b      	adds	r3, r7, r4
 8009262:	781a      	ldrb	r2, [r3, #0]
 8009264:	0013      	movs	r3, r2
 8009266:	011b      	lsls	r3, r3, #4
 8009268:	189b      	adds	r3, r3, r2
 800926a:	228a      	movs	r2, #138	@ 0x8a
 800926c:	0092      	lsls	r2, r2, #2
 800926e:	189a      	adds	r2, r3, r2
 8009270:	4b11      	ldr	r3, [pc, #68]	@ (80092b8 <SecureElementInit+0x374>)
 8009272:	18d3      	adds	r3, r2, r3
 8009274:	3305      	adds	r3, #5
 8009276:	1979      	adds	r1, r7, r5
 8009278:	2210      	movs	r2, #16
 800927a:	0018      	movs	r0, r3
 800927c:	f00c f97c 	bl	8015578 <memcpy1>

    memset1( SeNvmCtx.DevEui, 0, SE_EUI_SIZE );
 8009280:	4b0d      	ldr	r3, [pc, #52]	@ (80092b8 <SecureElementInit+0x374>)
 8009282:	2210      	movs	r2, #16
 8009284:	2100      	movs	r1, #0
 8009286:	0018      	movs	r0, r3
 8009288:	f00c f9b4 	bl	80155f4 <memset1>
    memset1( SeNvmCtx.JoinEui, 0, SE_EUI_SIZE );
 800928c:	4b0b      	ldr	r3, [pc, #44]	@ (80092bc <SecureElementInit+0x378>)
 800928e:	2210      	movs	r2, #16
 8009290:	2100      	movs	r1, #0
 8009292:	0018      	movs	r0, r3
 8009294:	f00c f9ae 	bl	80155f4 <memset1>

    // Assign callback
    if( seNvmCtxChanged != 0 )
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d003      	beq.n	80092a6 <SecureElementInit+0x362>
    {
        SeNvmCtxChanged = seNvmCtxChanged;
 800929e:	4b08      	ldr	r3, [pc, #32]	@ (80092c0 <SecureElementInit+0x37c>)
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	601a      	str	r2, [r3, #0]
 80092a4:	e002      	b.n	80092ac <SecureElementInit+0x368>
    }
    else
    {
        SeNvmCtxChanged = DummyCB;
 80092a6:	4b06      	ldr	r3, [pc, #24]	@ (80092c0 <SecureElementInit+0x37c>)
 80092a8:	4a06      	ldr	r2, [pc, #24]	@ (80092c4 <SecureElementInit+0x380>)
 80092aa:	601a      	str	r2, [r3, #0]
    }

    return SECURE_ELEMENT_SUCCESS;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	0018      	movs	r0, r3
 80092b0:	46bd      	mov	sp, r7
 80092b2:	b008      	add	sp, #32
 80092b4:	bdb0      	pop	{r4, r5, r7, pc}
 80092b6:	46c0      	nop			@ (mov r8, r8)
 80092b8:	20000578 	.word	0x20000578
 80092bc:	20000588 	.word	0x20000588
 80092c0:	2000093c 	.word	0x2000093c
 80092c4:	08008e79 	.word	0x08008e79

080092c8 <SecureElementRestoreNvmCtx>:

SecureElementStatus_t SecureElementRestoreNvmCtx( void* seNvmCtx )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
    // Restore nvm context
    if( seNvmCtx != 0 )
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d008      	beq.n	80092e8 <SecureElementRestoreNvmCtx+0x20>
    {
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
 80092d6:	23f1      	movs	r3, #241	@ 0xf1
 80092d8:	009a      	lsls	r2, r3, #2
 80092da:	6879      	ldr	r1, [r7, #4]
 80092dc:	4b05      	ldr	r3, [pc, #20]	@ (80092f4 <SecureElementRestoreNvmCtx+0x2c>)
 80092de:	0018      	movs	r0, r3
 80092e0:	f00c f94a 	bl	8015578 <memcpy1>
        return SECURE_ELEMENT_SUCCESS;
 80092e4:	2300      	movs	r3, #0
 80092e6:	e000      	b.n	80092ea <SecureElementRestoreNvmCtx+0x22>
    }
    else
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80092e8:	2302      	movs	r3, #2
    }
}
 80092ea:	0018      	movs	r0, r3
 80092ec:	46bd      	mov	sp, r7
 80092ee:	b002      	add	sp, #8
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	46c0      	nop			@ (mov r8, r8)
 80092f4:	20000578 	.word	0x20000578

080092f8 <SecureElementGetNvmCtx>:

void* SecureElementGetNvmCtx( size_t* seNvmCtxSize )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
    *seNvmCtxSize = sizeof( SeNvmCtx );
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	22f1      	movs	r2, #241	@ 0xf1
 8009304:	0092      	lsls	r2, r2, #2
 8009306:	601a      	str	r2, [r3, #0]
    return &SeNvmCtx;
 8009308:	4b02      	ldr	r3, [pc, #8]	@ (8009314 <SecureElementGetNvmCtx+0x1c>)
}
 800930a:	0018      	movs	r0, r3
 800930c:	46bd      	mov	sp, r7
 800930e:	b002      	add	sp, #8
 8009310:	bd80      	pop	{r7, pc}
 8009312:	46c0      	nop			@ (mov r8, r8)
 8009314:	20000578 	.word	0x20000578

08009318 <SecureElementSetKey>:

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8009318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800931a:	b089      	sub	sp, #36	@ 0x24
 800931c:	af00      	add	r7, sp, #0
 800931e:	0002      	movs	r2, r0
 8009320:	6039      	str	r1, [r7, #0]
 8009322:	1dfb      	adds	r3, r7, #7
 8009324:	701a      	strb	r2, [r3, #0]
    if( key == NULL )
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d101      	bne.n	8009330 <SecureElementSetKey+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800932c:	2302      	movs	r3, #2
 800932e:	e074      	b.n	800941a <SecureElementSetKey+0x102>
    }

    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8009330:	231f      	movs	r3, #31
 8009332:	18fb      	adds	r3, r7, r3
 8009334:	2200      	movs	r2, #0
 8009336:	701a      	strb	r2, [r3, #0]
 8009338:	e069      	b.n	800940e <SecureElementSetKey+0xf6>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 800933a:	231f      	movs	r3, #31
 800933c:	18fb      	adds	r3, r7, r3
 800933e:	781a      	ldrb	r2, [r3, #0]
 8009340:	4838      	ldr	r0, [pc, #224]	@ (8009424 <SecureElementSetKey+0x10c>)
 8009342:	238b      	movs	r3, #139	@ 0x8b
 8009344:	0099      	lsls	r1, r3, #2
 8009346:	0013      	movs	r3, r2
 8009348:	011b      	lsls	r3, r3, #4
 800934a:	189b      	adds	r3, r3, r2
 800934c:	18c3      	adds	r3, r0, r3
 800934e:	185b      	adds	r3, r3, r1
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	1dfa      	adds	r2, r7, #7
 8009354:	7812      	ldrb	r2, [r2, #0]
 8009356:	429a      	cmp	r2, r3
 8009358:	d153      	bne.n	8009402 <SecureElementSetKey+0xea>
        {
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 800935a:	1dfb      	adds	r3, r7, #7
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	2b80      	cmp	r3, #128	@ 0x80
 8009360:	d00b      	beq.n	800937a <SecureElementSetKey+0x62>
 8009362:	1dfb      	adds	r3, r7, #7
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	2b83      	cmp	r3, #131	@ 0x83
 8009368:	d007      	beq.n	800937a <SecureElementSetKey+0x62>
 800936a:	1dfb      	adds	r3, r7, #7
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	2b86      	cmp	r3, #134	@ 0x86
 8009370:	d003      	beq.n	800937a <SecureElementSetKey+0x62>
 8009372:	1dfb      	adds	r3, r7, #7
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	2b89      	cmp	r3, #137	@ 0x89
 8009378:	d12d      	bne.n	80093d6 <SecureElementSetKey+0xbe>
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800937a:	251e      	movs	r5, #30
 800937c:	197b      	adds	r3, r7, r5
 800937e:	2206      	movs	r2, #6
 8009380:	701a      	strb	r2, [r3, #0]
                uint8_t decryptedKey[16] = { 0 };
 8009382:	260c      	movs	r6, #12
 8009384:	19bb      	adds	r3, r7, r6
 8009386:	2200      	movs	r2, #0
 8009388:	601a      	str	r2, [r3, #0]
 800938a:	3304      	adds	r3, #4
 800938c:	220c      	movs	r2, #12
 800938e:	2100      	movs	r1, #0
 8009390:	0018      	movs	r0, r3
 8009392:	f010 fb0b 	bl	80199ac <memset>

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8009396:	197c      	adds	r4, r7, r5
 8009398:	19bb      	adds	r3, r7, r6
 800939a:	6838      	ldr	r0, [r7, #0]
 800939c:	227f      	movs	r2, #127	@ 0x7f
 800939e:	2110      	movs	r1, #16
 80093a0:	f000 f8a6 	bl	80094f0 <SecureElementAesEncrypt>
 80093a4:	0003      	movs	r3, r0
 80093a6:	7023      	strb	r3, [r4, #0]

                memcpy1( SeNvmCtx.KeyList[i].KeyValue, decryptedKey, KEY_SIZE );
 80093a8:	231f      	movs	r3, #31
 80093aa:	18fb      	adds	r3, r7, r3
 80093ac:	781a      	ldrb	r2, [r3, #0]
 80093ae:	0013      	movs	r3, r2
 80093b0:	011b      	lsls	r3, r3, #4
 80093b2:	189b      	adds	r3, r3, r2
 80093b4:	228a      	movs	r2, #138	@ 0x8a
 80093b6:	0092      	lsls	r2, r2, #2
 80093b8:	189a      	adds	r2, r3, r2
 80093ba:	4b1a      	ldr	r3, [pc, #104]	@ (8009424 <SecureElementSetKey+0x10c>)
 80093bc:	18d3      	adds	r3, r2, r3
 80093be:	3305      	adds	r3, #5
 80093c0:	19b9      	adds	r1, r7, r6
 80093c2:	2210      	movs	r2, #16
 80093c4:	0018      	movs	r0, r3
 80093c6:	f00c f8d7 	bl	8015578 <memcpy1>
                SeNvmCtxChanged( );
 80093ca:	4b17      	ldr	r3, [pc, #92]	@ (8009428 <SecureElementSetKey+0x110>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4798      	blx	r3

                return retval;
 80093d0:	197b      	adds	r3, r7, r5
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	e021      	b.n	800941a <SecureElementSetKey+0x102>
            }
            else
            {
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
 80093d6:	231f      	movs	r3, #31
 80093d8:	18fb      	adds	r3, r7, r3
 80093da:	781a      	ldrb	r2, [r3, #0]
 80093dc:	0013      	movs	r3, r2
 80093de:	011b      	lsls	r3, r3, #4
 80093e0:	189b      	adds	r3, r3, r2
 80093e2:	228a      	movs	r2, #138	@ 0x8a
 80093e4:	0092      	lsls	r2, r2, #2
 80093e6:	189a      	adds	r2, r3, r2
 80093e8:	4b0e      	ldr	r3, [pc, #56]	@ (8009424 <SecureElementSetKey+0x10c>)
 80093ea:	18d3      	adds	r3, r2, r3
 80093ec:	3305      	adds	r3, #5
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	2210      	movs	r2, #16
 80093f2:	0018      	movs	r0, r3
 80093f4:	f00c f8c0 	bl	8015578 <memcpy1>
                SeNvmCtxChanged( );
 80093f8:	4b0b      	ldr	r3, [pc, #44]	@ (8009428 <SecureElementSetKey+0x110>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
 80093fe:	2300      	movs	r3, #0
 8009400:	e00b      	b.n	800941a <SecureElementSetKey+0x102>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8009402:	211f      	movs	r1, #31
 8009404:	187b      	adds	r3, r7, r1
 8009406:	781a      	ldrb	r2, [r3, #0]
 8009408:	187b      	adds	r3, r7, r1
 800940a:	3201      	adds	r2, #1
 800940c:	701a      	strb	r2, [r3, #0]
 800940e:	231f      	movs	r3, #31
 8009410:	18fb      	adds	r3, r7, r3
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	2b17      	cmp	r3, #23
 8009416:	d990      	bls.n	800933a <SecureElementSetKey+0x22>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8009418:	2303      	movs	r3, #3
}
 800941a:	0018      	movs	r0, r3
 800941c:	46bd      	mov	sp, r7
 800941e:	b009      	add	sp, #36	@ 0x24
 8009420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009422:	46c0      	nop			@ (mov r8, r8)
 8009424:	20000578 	.word	0x20000578
 8009428:	2000093c 	.word	0x2000093c

0800942c <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 800942c:	b590      	push	{r4, r7, lr}
 800942e:	b087      	sub	sp, #28
 8009430:	af02      	add	r7, sp, #8
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	0019      	movs	r1, r3
 8009438:	1dbb      	adds	r3, r7, #6
 800943a:	801a      	strh	r2, [r3, #0]
 800943c:	1d7b      	adds	r3, r7, #5
 800943e:	1c0a      	adds	r2, r1, #0
 8009440:	701a      	strb	r2, [r3, #0]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8009442:	1d7b      	adds	r3, r7, #5
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	2b7e      	cmp	r3, #126	@ 0x7e
 8009448:	d901      	bls.n	800944e <SecureElementComputeAesCmac+0x22>
    {
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800944a:	2303      	movs	r3, #3
 800944c:	e00b      	b.n	8009466 <SecureElementComputeAesCmac+0x3a>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800944e:	1d7b      	adds	r3, r7, #5
 8009450:	781c      	ldrb	r4, [r3, #0]
 8009452:	1dbb      	adds	r3, r7, #6
 8009454:	881a      	ldrh	r2, [r3, #0]
 8009456:	68b9      	ldr	r1, [r7, #8]
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	6a3b      	ldr	r3, [r7, #32]
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	0023      	movs	r3, r4
 8009460:	f7ff fd10 	bl	8008e84 <ComputeCmac>
 8009464:	0003      	movs	r3, r0
}
 8009466:	0018      	movs	r0, r3
 8009468:	46bd      	mov	sp, r7
 800946a:	b005      	add	sp, #20
 800946c:	bd90      	pop	{r4, r7, pc}

0800946e <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
 800946e:	b5b0      	push	{r4, r5, r7, lr}
 8009470:	b088      	sub	sp, #32
 8009472:	af02      	add	r7, sp, #8
 8009474:	60f8      	str	r0, [r7, #12]
 8009476:	0008      	movs	r0, r1
 8009478:	607a      	str	r2, [r7, #4]
 800947a:	0019      	movs	r1, r3
 800947c:	230a      	movs	r3, #10
 800947e:	18fb      	adds	r3, r7, r3
 8009480:	1c02      	adds	r2, r0, #0
 8009482:	801a      	strh	r2, [r3, #0]
 8009484:	2309      	movs	r3, #9
 8009486:	18fb      	adds	r3, r7, r3
 8009488:	1c0a      	adds	r2, r1, #0
 800948a:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL )
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d101      	bne.n	8009496 <SecureElementVerifyAesCmac+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8009492:	2302      	movs	r3, #2
 8009494:	e028      	b.n	80094e8 <SecureElementVerifyAesCmac+0x7a>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8009496:	2517      	movs	r5, #23
 8009498:	197b      	adds	r3, r7, r5
 800949a:	2206      	movs	r2, #6
 800949c:	701a      	strb	r2, [r3, #0]
    uint32_t compCmac = 0;
 800949e:	2300      	movs	r3, #0
 80094a0:	613b      	str	r3, [r7, #16]
    retval = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 80094a2:	197c      	adds	r4, r7, r5
 80094a4:	2309      	movs	r3, #9
 80094a6:	18fb      	adds	r3, r7, r3
 80094a8:	7818      	ldrb	r0, [r3, #0]
 80094aa:	230a      	movs	r3, #10
 80094ac:	18fb      	adds	r3, r7, r3
 80094ae:	881a      	ldrh	r2, [r3, #0]
 80094b0:	68f9      	ldr	r1, [r7, #12]
 80094b2:	2310      	movs	r3, #16
 80094b4:	18fb      	adds	r3, r7, r3
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	0003      	movs	r3, r0
 80094ba:	2000      	movs	r0, #0
 80094bc:	f7ff fce2 	bl	8008e84 <ComputeCmac>
 80094c0:	0003      	movs	r3, r0
 80094c2:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 80094c4:	197b      	adds	r3, r7, r5
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d002      	beq.n	80094d2 <SecureElementVerifyAesCmac+0x64>
    {
        return retval;
 80094cc:	197b      	adds	r3, r7, r5
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	e00a      	b.n	80094e8 <SecureElementVerifyAesCmac+0x7a>
    }

    if( expectedCmac != compCmac )
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d003      	beq.n	80094e2 <SecureElementVerifyAesCmac+0x74>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 80094da:	2317      	movs	r3, #23
 80094dc:	18fb      	adds	r3, r7, r3
 80094de:	2201      	movs	r2, #1
 80094e0:	701a      	strb	r2, [r3, #0]
    }

    return retval;
 80094e2:	2317      	movs	r3, #23
 80094e4:	18fb      	adds	r3, r7, r3
 80094e6:	781b      	ldrb	r3, [r3, #0]
}
 80094e8:	0018      	movs	r0, r3
 80094ea:	46bd      	mov	sp, r7
 80094ec:	b006      	add	sp, #24
 80094ee:	bdb0      	pop	{r4, r5, r7, pc}

080094f0 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
 80094f0:	b5b0      	push	{r4, r5, r7, lr}
 80094f2:	b086      	sub	sp, #24
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	0008      	movs	r0, r1
 80094fa:	0011      	movs	r1, r2
 80094fc:	607b      	str	r3, [r7, #4]
 80094fe:	230a      	movs	r3, #10
 8009500:	18fb      	adds	r3, r7, r3
 8009502:	1c02      	adds	r2, r0, #0
 8009504:	801a      	strh	r2, [r3, #0]
 8009506:	2309      	movs	r3, #9
 8009508:	18fb      	adds	r3, r7, r3
 800950a:	1c0a      	adds	r2, r1, #0
 800950c:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL || encBuffer == NULL )
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d002      	beq.n	800951a <SecureElementAesEncrypt+0x2a>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d101      	bne.n	800951e <SecureElementAesEncrypt+0x2e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800951a:	2302      	movs	r3, #2
 800951c:	e04c      	b.n	80095b8 <SecureElementAesEncrypt+0xc8>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800951e:	230a      	movs	r3, #10
 8009520:	18fb      	adds	r3, r7, r3
 8009522:	881b      	ldrh	r3, [r3, #0]
 8009524:	220f      	movs	r2, #15
 8009526:	4013      	ands	r3, r2
 8009528:	b29b      	uxth	r3, r3
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800952e:	2305      	movs	r3, #5
 8009530:	e042      	b.n	80095b8 <SecureElementAesEncrypt+0xc8>
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
 8009532:	4b23      	ldr	r3, [pc, #140]	@ (80095c0 <SecureElementAesEncrypt+0xd0>)
 8009534:	22f0      	movs	r2, #240	@ 0xf0
 8009536:	2100      	movs	r1, #0
 8009538:	0018      	movs	r0, r3
 800953a:	f00c f85b 	bl	80155f4 <memset1>

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800953e:	2516      	movs	r5, #22
 8009540:	197c      	adds	r4, r7, r5
 8009542:	2310      	movs	r3, #16
 8009544:	18fa      	adds	r2, r7, r3
 8009546:	2309      	movs	r3, #9
 8009548:	18fb      	adds	r3, r7, r3
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	0011      	movs	r1, r2
 800954e:	0018      	movs	r0, r3
 8009550:	f7ff fc54 	bl	8008dfc <GetKeyByID>
 8009554:	0003      	movs	r3, r0
 8009556:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 8009558:	197b      	adds	r3, r7, r5
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d128      	bne.n	80095b2 <SecureElementAesEncrypt+0xc2>
    {
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	3301      	adds	r3, #1
 8009564:	4a16      	ldr	r2, [pc, #88]	@ (80095c0 <SecureElementAesEncrypt+0xd0>)
 8009566:	2110      	movs	r1, #16
 8009568:	0018      	movs	r0, r3
 800956a:	f7ff f871 	bl	8008650 <aes_set_key>

        uint8_t block = 0;
 800956e:	2317      	movs	r3, #23
 8009570:	18fb      	adds	r3, r7, r3
 8009572:	2200      	movs	r2, #0
 8009574:	701a      	strb	r2, [r3, #0]

        while( size != 0 )
 8009576:	e017      	b.n	80095a8 <SecureElementAesEncrypt+0xb8>
        {
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 8009578:	2417      	movs	r4, #23
 800957a:	193b      	adds	r3, r7, r4
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	18d0      	adds	r0, r2, r3
 8009582:	193b      	adds	r3, r7, r4
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	18d3      	adds	r3, r2, r3
 800958a:	4a0d      	ldr	r2, [pc, #52]	@ (80095c0 <SecureElementAesEncrypt+0xd0>)
 800958c:	0019      	movs	r1, r3
 800958e:	f7ff f99b 	bl	80088c8 <aes_encrypt>
            block = block + 16;
 8009592:	193b      	adds	r3, r7, r4
 8009594:	193a      	adds	r2, r7, r4
 8009596:	7812      	ldrb	r2, [r2, #0]
 8009598:	3210      	adds	r2, #16
 800959a:	701a      	strb	r2, [r3, #0]
            size = size - 16;
 800959c:	220a      	movs	r2, #10
 800959e:	18bb      	adds	r3, r7, r2
 80095a0:	18ba      	adds	r2, r7, r2
 80095a2:	8812      	ldrh	r2, [r2, #0]
 80095a4:	3a10      	subs	r2, #16
 80095a6:	801a      	strh	r2, [r3, #0]
        while( size != 0 )
 80095a8:	230a      	movs	r3, #10
 80095aa:	18fb      	adds	r3, r7, r3
 80095ac:	881b      	ldrh	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1e2      	bne.n	8009578 <SecureElementAesEncrypt+0x88>
        }
    }
    return retval;
 80095b2:	2316      	movs	r3, #22
 80095b4:	18fb      	adds	r3, r7, r3
 80095b6:	781b      	ldrb	r3, [r3, #0]
}
 80095b8:	0018      	movs	r0, r3
 80095ba:	46bd      	mov	sp, r7
 80095bc:	b006      	add	sp, #24
 80095be:	bdb0      	pop	{r4, r5, r7, pc}
 80095c0:	20000598 	.word	0x20000598

080095c4 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
 80095c4:	b5b0      	push	{r4, r5, r7, lr}
 80095c6:	b08a      	sub	sp, #40	@ 0x28
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	0019      	movs	r1, r3
 80095d0:	1dfb      	adds	r3, r7, #7
 80095d2:	701a      	strb	r2, [r3, #0]
 80095d4:	1dbb      	adds	r3, r7, #6
 80095d6:	1c0a      	adds	r2, r1, #0
 80095d8:	701a      	strb	r2, [r3, #0]
    if( input == NULL )
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d101      	bne.n	80095e4 <SecureElementDeriveAndStoreKey+0x20>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80095e0:	2302      	movs	r3, #2
 80095e2:	e048      	b.n	8009676 <SecureElementDeriveAndStoreKey+0xb2>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80095e4:	2327      	movs	r3, #39	@ 0x27
 80095e6:	18fb      	adds	r3, r7, r3
 80095e8:	2206      	movs	r2, #6
 80095ea:	701a      	strb	r2, [r3, #0]
    uint8_t key[16] = { 0 };
 80095ec:	2314      	movs	r3, #20
 80095ee:	18fb      	adds	r3, r7, r3
 80095f0:	2200      	movs	r2, #0
 80095f2:	601a      	str	r2, [r3, #0]
 80095f4:	3304      	adds	r3, #4
 80095f6:	220c      	movs	r2, #12
 80095f8:	2100      	movs	r1, #0
 80095fa:	0018      	movs	r0, r3
 80095fc:	f010 f9d6 	bl	80199ac <memset>

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
 8009600:	1dbb      	adds	r3, r7, #6
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	2b7f      	cmp	r3, #127	@ 0x7f
 8009606:	d10e      	bne.n	8009626 <SecureElementDeriveAndStoreKey+0x62>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 8009608:	1dfb      	adds	r3, r7, #7
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d104      	bne.n	800961a <SecureElementDeriveAndStoreKey+0x56>
 8009610:	230c      	movs	r3, #12
 8009612:	18fb      	adds	r3, r7, r3
 8009614:	789b      	ldrb	r3, [r3, #2]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d003      	beq.n	8009622 <SecureElementDeriveAndStoreKey+0x5e>
 800961a:	1dfb      	adds	r3, r7, #7
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	2b02      	cmp	r3, #2
 8009620:	d101      	bne.n	8009626 <SecureElementDeriveAndStoreKey+0x62>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8009622:	2303      	movs	r3, #3
 8009624:	e027      	b.n	8009676 <SecureElementDeriveAndStoreKey+0xb2>
        }
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8009626:	2527      	movs	r5, #39	@ 0x27
 8009628:	197c      	adds	r4, r7, r5
 800962a:	2314      	movs	r3, #20
 800962c:	18f9      	adds	r1, r7, r3
 800962e:	1dfb      	adds	r3, r7, #7
 8009630:	781a      	ldrb	r2, [r3, #0]
 8009632:	68b8      	ldr	r0, [r7, #8]
 8009634:	000b      	movs	r3, r1
 8009636:	2110      	movs	r1, #16
 8009638:	f7ff ff5a 	bl	80094f0 <SecureElementAesEncrypt>
 800963c:	0003      	movs	r3, r0
 800963e:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8009640:	197b      	adds	r3, r7, r5
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d002      	beq.n	800964e <SecureElementDeriveAndStoreKey+0x8a>
    {
        return retval;
 8009648:	197b      	adds	r3, r7, r5
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	e013      	b.n	8009676 <SecureElementDeriveAndStoreKey+0xb2>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800964e:	2527      	movs	r5, #39	@ 0x27
 8009650:	197c      	adds	r4, r7, r5
 8009652:	2314      	movs	r3, #20
 8009654:	18fa      	adds	r2, r7, r3
 8009656:	1dbb      	adds	r3, r7, #6
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	0011      	movs	r1, r2
 800965c:	0018      	movs	r0, r3
 800965e:	f7ff fe5b 	bl	8009318 <SecureElementSetKey>
 8009662:	0003      	movs	r3, r0
 8009664:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8009666:	197b      	adds	r3, r7, r5
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d002      	beq.n	8009674 <SecureElementDeriveAndStoreKey+0xb0>
    {
        return retval;
 800966e:	197b      	adds	r3, r7, r5
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	e000      	b.n	8009676 <SecureElementDeriveAndStoreKey+0xb2>
    }

    return SECURE_ELEMENT_SUCCESS;
 8009674:	2300      	movs	r3, #0
}
 8009676:	0018      	movs	r0, r3
 8009678:	46bd      	mov	sp, r7
 800967a:	b00a      	add	sp, #40	@ 0x28
 800967c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009680 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d101      	bne.n	8009692 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800968e:	2302      	movs	r3, #2
 8009690:	e006      	b.n	80096a0 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random( );
 8009692:	4b05      	ldr	r3, [pc, #20]	@ (80096a8 <SecureElementRandomNumber+0x28>)
 8009694:	69db      	ldr	r3, [r3, #28]
 8009696:	4798      	blx	r3
 8009698:	0002      	movs	r2, r0
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	0018      	movs	r0, r3
 80096a2:	46bd      	mov	sp, r7
 80096a4:	b002      	add	sp, #8
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	0801ac88 	.word	0x0801ac88

080096ac <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d101      	bne.n	80096be <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80096ba:	2302      	movs	r3, #2
 80096bc:	e009      	b.n	80096d2 <SecureElementSetDevEui+0x26>
    }
    memcpy1( SeNvmCtx.DevEui, devEui, SE_EUI_SIZE );
 80096be:	6879      	ldr	r1, [r7, #4]
 80096c0:	4b06      	ldr	r3, [pc, #24]	@ (80096dc <SecureElementSetDevEui+0x30>)
 80096c2:	2210      	movs	r2, #16
 80096c4:	0018      	movs	r0, r3
 80096c6:	f00b ff57 	bl	8015578 <memcpy1>
    SeNvmCtxChanged( );
 80096ca:	4b05      	ldr	r3, [pc, #20]	@ (80096e0 <SecureElementSetDevEui+0x34>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	0018      	movs	r0, r3
 80096d4:	46bd      	mov	sp, r7
 80096d6:	b002      	add	sp, #8
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	46c0      	nop			@ (mov r8, r8)
 80096dc:	20000578 	.word	0x20000578
 80096e0:	2000093c 	.word	0x2000093c

080096e4 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	af00      	add	r7, sp, #0
    return SeNvmCtx.DevEui;
 80096e8:	4b01      	ldr	r3, [pc, #4]	@ (80096f0 <SecureElementGetDevEui+0xc>)
}
 80096ea:	0018      	movs	r0, r3
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	20000578 	.word	0x20000578

080096f4 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d101      	bne.n	8009706 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8009702:	2302      	movs	r3, #2
 8009704:	e009      	b.n	800971a <SecureElementSetJoinEui+0x26>
    }
    memcpy1( SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE );
 8009706:	6879      	ldr	r1, [r7, #4]
 8009708:	4b06      	ldr	r3, [pc, #24]	@ (8009724 <SecureElementSetJoinEui+0x30>)
 800970a:	2210      	movs	r2, #16
 800970c:	0018      	movs	r0, r3
 800970e:	f00b ff33 	bl	8015578 <memcpy1>
    SeNvmCtxChanged( );
 8009712:	4b05      	ldr	r3, [pc, #20]	@ (8009728 <SecureElementSetJoinEui+0x34>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 8009718:	2300      	movs	r3, #0
}
 800971a:	0018      	movs	r0, r3
 800971c:	46bd      	mov	sp, r7
 800971e:	b002      	add	sp, #8
 8009720:	bd80      	pop	{r7, pc}
 8009722:	46c0      	nop			@ (mov r8, r8)
 8009724:	20000588 	.word	0x20000588
 8009728:	2000093c 	.word	0x2000093c

0800972c <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	af00      	add	r7, sp, #0
    return SeNvmCtx.JoinEui;
 8009730:	4b01      	ldr	r3, [pc, #4]	@ (8009738 <SecureElementGetJoinEui+0xc>)
}
 8009732:	0018      	movs	r0, r3
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	20000588 	.word	0x20000588

0800973c <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800973c:	b5b0      	push	{r4, r5, r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8009742:	f00b fd3e 	bl	80151c2 <TimerGetCurrentTime>
 8009746:	0002      	movs	r2, r0
 8009748:	4b1e      	ldr	r3, [pc, #120]	@ (80097c4 <OnRadioTxDone+0x88>)
 800974a:	601a      	str	r2, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800974c:	4d1e      	ldr	r5, [pc, #120]	@ (80097c8 <OnRadioTxDone+0x8c>)
 800974e:	23ce      	movs	r3, #206	@ 0xce
 8009750:	009c      	lsls	r4, r3, #2
 8009752:	003b      	movs	r3, r7
 8009754:	0018      	movs	r0, r3
 8009756:	f00b fb41 	bl	8014ddc <SysTimeGet>
 800975a:	003a      	movs	r2, r7
 800975c:	192b      	adds	r3, r5, r4
 800975e:	ca03      	ldmia	r2!, {r0, r1}
 8009760:	c303      	stmia	r3!, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 8009762:	4b1a      	ldr	r3, [pc, #104]	@ (80097cc <OnRadioTxDone+0x90>)
 8009764:	781a      	ldrb	r2, [r3, #0]
 8009766:	2110      	movs	r1, #16
 8009768:	430a      	orrs	r2, r1
 800976a:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800976c:	4a16      	ldr	r2, [pc, #88]	@ (80097c8 <OnRadioTxDone+0x8c>)
 800976e:	23d2      	movs	r3, #210	@ 0xd2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	58d3      	ldr	r3, [r2, r3]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00c      	beq.n	8009792 <OnRadioTxDone+0x56>
 8009778:	4a13      	ldr	r2, [pc, #76]	@ (80097c8 <OnRadioTxDone+0x8c>)
 800977a:	23d2      	movs	r3, #210	@ 0xd2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	58d3      	ldr	r3, [r2, r3]
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d005      	beq.n	8009792 <OnRadioTxDone+0x56>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009786:	4a10      	ldr	r2, [pc, #64]	@ (80097c8 <OnRadioTxDone+0x8c>)
 8009788:	23d2      	movs	r3, #210	@ 0xd2
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	58d3      	ldr	r3, [r2, r3]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY txDone\n\r" );
 8009792:	2408      	movs	r4, #8
 8009794:	193b      	adds	r3, r7, r4
 8009796:	0018      	movs	r0, r3
 8009798:	f00b fb58 	bl	8014e4c <SysTimeGetMcuTime>
 800979c:	0022      	movs	r2, r4
 800979e:	18bb      	adds	r3, r7, r2
 80097a0:	6819      	ldr	r1, [r3, #0]
 80097a2:	18bb      	adds	r3, r7, r2
 80097a4:	2204      	movs	r2, #4
 80097a6:	5e9b      	ldrsh	r3, [r3, r2]
 80097a8:	001a      	movs	r2, r3
 80097aa:	4b09      	ldr	r3, [pc, #36]	@ (80097d0 <OnRadioTxDone+0x94>)
 80097ac:	0018      	movs	r0, r3
 80097ae:	f00b fdd9 	bl	8015364 <TraceSend>
 80097b2:	4b08      	ldr	r3, [pc, #32]	@ (80097d4 <OnRadioTxDone+0x98>)
 80097b4:	0018      	movs	r0, r3
 80097b6:	f00b fdd5 	bl	8015364 <TraceSend>
#endif
}
 80097ba:	46c0      	nop			@ (mov r8, r8)
 80097bc:	46bd      	mov	sp, r7
 80097be:	b004      	add	sp, #16
 80097c0:	bdb0      	pop	{r4, r5, r7, pc}
 80097c2:	46c0      	nop			@ (mov r8, r8)
 80097c4:	20000fe0 	.word	0x20000fe0
 80097c8:	20000940 	.word	0x20000940
 80097cc:	20000fdc 	.word	0x20000fdc
 80097d0:	0801a608 	.word	0x0801a608
 80097d4:	0801a614 	.word	0x0801a614

080097d8 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 80097d8:	b5b0      	push	{r4, r5, r7, lr}
 80097da:	b086      	sub	sp, #24
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	000c      	movs	r4, r1
 80097e2:	0010      	movs	r0, r2
 80097e4:	0019      	movs	r1, r3
 80097e6:	250a      	movs	r5, #10
 80097e8:	197b      	adds	r3, r7, r5
 80097ea:	1c22      	adds	r2, r4, #0
 80097ec:	801a      	strh	r2, [r3, #0]
 80097ee:	2408      	movs	r4, #8
 80097f0:	193b      	adds	r3, r7, r4
 80097f2:	1c02      	adds	r2, r0, #0
 80097f4:	801a      	strh	r2, [r3, #0]
 80097f6:	1dfb      	adds	r3, r7, #7
 80097f8:	1c0a      	adds	r2, r1, #0
 80097fa:	701a      	strb	r2, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80097fc:	f00b fce1 	bl	80151c2 <TimerGetCurrentTime>
 8009800:	0002      	movs	r2, r0
 8009802:	4b20      	ldr	r3, [pc, #128]	@ (8009884 <OnRadioRxDone+0xac>)
 8009804:	601a      	str	r2, [r3, #0]
    RxDoneParams.Payload = payload;
 8009806:	4b1f      	ldr	r3, [pc, #124]	@ (8009884 <OnRadioRxDone+0xac>)
 8009808:	68fa      	ldr	r2, [r7, #12]
 800980a:	605a      	str	r2, [r3, #4]
    RxDoneParams.Size = size;
 800980c:	4b1d      	ldr	r3, [pc, #116]	@ (8009884 <OnRadioRxDone+0xac>)
 800980e:	197a      	adds	r2, r7, r5
 8009810:	8812      	ldrh	r2, [r2, #0]
 8009812:	811a      	strh	r2, [r3, #8]
    RxDoneParams.Rssi = rssi;
 8009814:	4b1b      	ldr	r3, [pc, #108]	@ (8009884 <OnRadioRxDone+0xac>)
 8009816:	193a      	adds	r2, r7, r4
 8009818:	8812      	ldrh	r2, [r2, #0]
 800981a:	815a      	strh	r2, [r3, #10]
    RxDoneParams.Snr = snr;
 800981c:	4b19      	ldr	r3, [pc, #100]	@ (8009884 <OnRadioRxDone+0xac>)
 800981e:	1dfa      	adds	r2, r7, #7
 8009820:	7812      	ldrb	r2, [r2, #0]
 8009822:	731a      	strb	r2, [r3, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 8009824:	4b18      	ldr	r3, [pc, #96]	@ (8009888 <OnRadioRxDone+0xb0>)
 8009826:	781a      	ldrb	r2, [r3, #0]
 8009828:	2108      	movs	r1, #8
 800982a:	430a      	orrs	r2, r1
 800982c:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800982e:	4a17      	ldr	r2, [pc, #92]	@ (800988c <OnRadioRxDone+0xb4>)
 8009830:	23d2      	movs	r3, #210	@ 0xd2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	58d3      	ldr	r3, [r2, r3]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00c      	beq.n	8009854 <OnRadioRxDone+0x7c>
 800983a:	4a14      	ldr	r2, [pc, #80]	@ (800988c <OnRadioRxDone+0xb4>)
 800983c:	23d2      	movs	r3, #210	@ 0xd2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	58d3      	ldr	r3, [r2, r3]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d005      	beq.n	8009854 <OnRadioRxDone+0x7c>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009848:	4a10      	ldr	r2, [pc, #64]	@ (800988c <OnRadioRxDone+0xb4>)
 800984a:	23d2      	movs	r3, #210	@ 0xd2
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	58d3      	ldr	r3, [r2, r3]
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY rxDone\n\r" );
 8009854:	2410      	movs	r4, #16
 8009856:	193b      	adds	r3, r7, r4
 8009858:	0018      	movs	r0, r3
 800985a:	f00b faf7 	bl	8014e4c <SysTimeGetMcuTime>
 800985e:	0022      	movs	r2, r4
 8009860:	18bb      	adds	r3, r7, r2
 8009862:	6819      	ldr	r1, [r3, #0]
 8009864:	18bb      	adds	r3, r7, r2
 8009866:	2204      	movs	r2, #4
 8009868:	5e9b      	ldrsh	r3, [r3, r2]
 800986a:	001a      	movs	r2, r3
 800986c:	4b08      	ldr	r3, [pc, #32]	@ (8009890 <OnRadioRxDone+0xb8>)
 800986e:	0018      	movs	r0, r3
 8009870:	f00b fd78 	bl	8015364 <TraceSend>
 8009874:	4b07      	ldr	r3, [pc, #28]	@ (8009894 <OnRadioRxDone+0xbc>)
 8009876:	0018      	movs	r0, r3
 8009878:	f00b fd74 	bl	8015364 <TraceSend>
#endif
}
 800987c:	46c0      	nop			@ (mov r8, r8)
 800987e:	46bd      	mov	sp, r7
 8009880:	b006      	add	sp, #24
 8009882:	bdb0      	pop	{r4, r5, r7, pc}
 8009884:	20000fe4 	.word	0x20000fe4
 8009888:	20000fdc 	.word	0x20000fdc
 800988c:	20000940 	.word	0x20000940
 8009890:	0801a608 	.word	0x0801a608
 8009894:	0801a624 	.word	0x0801a624

08009898 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800989e:	4b17      	ldr	r3, [pc, #92]	@ (80098fc <OnRadioTxTimeout+0x64>)
 80098a0:	781a      	ldrb	r2, [r3, #0]
 80098a2:	2104      	movs	r1, #4
 80098a4:	430a      	orrs	r2, r1
 80098a6:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80098a8:	4a15      	ldr	r2, [pc, #84]	@ (8009900 <OnRadioTxTimeout+0x68>)
 80098aa:	23d2      	movs	r3, #210	@ 0xd2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	58d3      	ldr	r3, [r2, r3]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00c      	beq.n	80098ce <OnRadioTxTimeout+0x36>
 80098b4:	4a12      	ldr	r2, [pc, #72]	@ (8009900 <OnRadioTxTimeout+0x68>)
 80098b6:	23d2      	movs	r3, #210	@ 0xd2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	58d3      	ldr	r3, [r2, r3]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d005      	beq.n	80098ce <OnRadioTxTimeout+0x36>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80098c2:	4a0f      	ldr	r2, [pc, #60]	@ (8009900 <OnRadioTxTimeout+0x68>)
 80098c4:	23d2      	movs	r3, #210	@ 0xd2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	58d3      	ldr	r3, [r2, r3]
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY txTimeOut\n\r" );
 80098ce:	003b      	movs	r3, r7
 80098d0:	0018      	movs	r0, r3
 80098d2:	f00b fabb 	bl	8014e4c <SysTimeGetMcuTime>
 80098d6:	003b      	movs	r3, r7
 80098d8:	6819      	ldr	r1, [r3, #0]
 80098da:	003b      	movs	r3, r7
 80098dc:	2204      	movs	r2, #4
 80098de:	5e9b      	ldrsh	r3, [r3, r2]
 80098e0:	001a      	movs	r2, r3
 80098e2:	4b08      	ldr	r3, [pc, #32]	@ (8009904 <OnRadioTxTimeout+0x6c>)
 80098e4:	0018      	movs	r0, r3
 80098e6:	f00b fd3d 	bl	8015364 <TraceSend>
 80098ea:	4b07      	ldr	r3, [pc, #28]	@ (8009908 <OnRadioTxTimeout+0x70>)
 80098ec:	0018      	movs	r0, r3
 80098ee:	f00b fd39 	bl	8015364 <TraceSend>
#endif
}
 80098f2:	46c0      	nop			@ (mov r8, r8)
 80098f4:	46bd      	mov	sp, r7
 80098f6:	b002      	add	sp, #8
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	46c0      	nop			@ (mov r8, r8)
 80098fc:	20000fdc 	.word	0x20000fdc
 8009900:	20000940 	.word	0x20000940
 8009904:	0801a608 	.word	0x0801a608
 8009908:	0801a634 	.word	0x0801a634

0800990c <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 8009910:	4b0d      	ldr	r3, [pc, #52]	@ (8009948 <OnRadioRxError+0x3c>)
 8009912:	781a      	ldrb	r2, [r3, #0]
 8009914:	2102      	movs	r1, #2
 8009916:	430a      	orrs	r2, r1
 8009918:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800991a:	4a0c      	ldr	r2, [pc, #48]	@ (800994c <OnRadioRxError+0x40>)
 800991c:	23d2      	movs	r3, #210	@ 0xd2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	58d3      	ldr	r3, [r2, r3]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00c      	beq.n	8009940 <OnRadioRxError+0x34>
 8009926:	4a09      	ldr	r2, [pc, #36]	@ (800994c <OnRadioRxError+0x40>)
 8009928:	23d2      	movs	r3, #210	@ 0xd2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	58d3      	ldr	r3, [r2, r3]
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d005      	beq.n	8009940 <OnRadioRxError+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009934:	4a05      	ldr	r2, [pc, #20]	@ (800994c <OnRadioRxError+0x40>)
 8009936:	23d2      	movs	r3, #210	@ 0xd2
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	58d3      	ldr	r3, [r2, r3]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	4798      	blx	r3
    }
}
 8009940:	46c0      	nop			@ (mov r8, r8)
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	46c0      	nop			@ (mov r8, r8)
 8009948:	20000fdc 	.word	0x20000fdc
 800994c:	20000940 	.word	0x20000940

08009950 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8009956:	4b17      	ldr	r3, [pc, #92]	@ (80099b4 <OnRadioRxTimeout+0x64>)
 8009958:	781a      	ldrb	r2, [r3, #0]
 800995a:	2101      	movs	r1, #1
 800995c:	430a      	orrs	r2, r1
 800995e:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009960:	4a15      	ldr	r2, [pc, #84]	@ (80099b8 <OnRadioRxTimeout+0x68>)
 8009962:	23d2      	movs	r3, #210	@ 0xd2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	58d3      	ldr	r3, [r2, r3]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d00c      	beq.n	8009986 <OnRadioRxTimeout+0x36>
 800996c:	4a12      	ldr	r2, [pc, #72]	@ (80099b8 <OnRadioRxTimeout+0x68>)
 800996e:	23d2      	movs	r3, #210	@ 0xd2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	58d3      	ldr	r3, [r2, r3]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d005      	beq.n	8009986 <OnRadioRxTimeout+0x36>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800997a:	4a0f      	ldr	r2, [pc, #60]	@ (80099b8 <OnRadioRxTimeout+0x68>)
 800997c:	23d2      	movs	r3, #210	@ 0xd2
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	58d3      	ldr	r3, [r2, r3]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY rxTimeOut\n\r" );
 8009986:	003b      	movs	r3, r7
 8009988:	0018      	movs	r0, r3
 800998a:	f00b fa5f 	bl	8014e4c <SysTimeGetMcuTime>
 800998e:	003b      	movs	r3, r7
 8009990:	6819      	ldr	r1, [r3, #0]
 8009992:	003b      	movs	r3, r7
 8009994:	2204      	movs	r2, #4
 8009996:	5e9b      	ldrsh	r3, [r3, r2]
 8009998:	001a      	movs	r2, r3
 800999a:	4b08      	ldr	r3, [pc, #32]	@ (80099bc <OnRadioRxTimeout+0x6c>)
 800999c:	0018      	movs	r0, r3
 800999e:	f00b fce1 	bl	8015364 <TraceSend>
 80099a2:	4b07      	ldr	r3, [pc, #28]	@ (80099c0 <OnRadioRxTimeout+0x70>)
 80099a4:	0018      	movs	r0, r3
 80099a6:	f00b fcdd 	bl	8015364 <TraceSend>
#endif
}
 80099aa:	46c0      	nop			@ (mov r8, r8)
 80099ac:	46bd      	mov	sp, r7
 80099ae:	b002      	add	sp, #8
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	46c0      	nop			@ (mov r8, r8)
 80099b4:	20000fdc 	.word	0x20000fdc
 80099b8:	20000940 	.word	0x20000940
 80099bc:	0801a608 	.word	0x0801a608
 80099c0:	0801a644 	.word	0x0801a644

080099c4 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80099c8:	4b0a      	ldr	r3, [pc, #40]	@ (80099f4 <UpdateRxSlotIdleState+0x30>)
 80099ca:	4a0b      	ldr	r2, [pc, #44]	@ (80099f8 <UpdateRxSlotIdleState+0x34>)
 80099cc:	589b      	ldr	r3, [r3, r2]
 80099ce:	22f0      	movs	r2, #240	@ 0xf0
 80099d0:	5c9b      	ldrb	r3, [r3, r2]
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d005      	beq.n	80099e2 <UpdateRxSlotIdleState+0x1e>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 80099d6:	4a07      	ldr	r2, [pc, #28]	@ (80099f4 <UpdateRxSlotIdleState+0x30>)
 80099d8:	2390      	movs	r3, #144	@ 0x90
 80099da:	00db      	lsls	r3, r3, #3
 80099dc:	2106      	movs	r1, #6
 80099de:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 80099e0:	e004      	b.n	80099ec <UpdateRxSlotIdleState+0x28>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 80099e2:	4a04      	ldr	r2, [pc, #16]	@ (80099f4 <UpdateRxSlotIdleState+0x30>)
 80099e4:	2390      	movs	r3, #144	@ 0x90
 80099e6:	00db      	lsls	r3, r3, #3
 80099e8:	2102      	movs	r1, #2
 80099ea:	54d1      	strb	r1, [r2, r3]
}
 80099ec:	46c0      	nop			@ (mov r8, r8)
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	46c0      	nop			@ (mov r8, r8)
 80099f4:	20000940 	.word	0x20000940
 80099f8:	00000484 	.word	0x00000484

080099fc <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009a02:	4b4a      	ldr	r3, [pc, #296]	@ (8009b2c <ProcessRadioTxDone+0x130>)
 8009a04:	4a4a      	ldr	r2, [pc, #296]	@ (8009b30 <ProcessRadioTxDone+0x134>)
 8009a06:	589b      	ldr	r3, [r3, r2]
 8009a08:	22f0      	movs	r2, #240	@ 0xf0
 8009a0a:	5c9b      	ldrb	r3, [r3, r2]
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	d002      	beq.n	8009a16 <ProcessRadioTxDone+0x1a>
    {
        Radio.Sleep( );
 8009a10:	4b48      	ldr	r3, [pc, #288]	@ (8009b34 <ProcessRadioTxDone+0x138>)
 8009a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a14:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8009a16:	4a45      	ldr	r2, [pc, #276]	@ (8009b2c <ProcessRadioTxDone+0x130>)
 8009a18:	23ec      	movs	r3, #236	@ 0xec
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	58d2      	ldr	r2, [r2, r3]
 8009a1e:	4b46      	ldr	r3, [pc, #280]	@ (8009b38 <ProcessRadioTxDone+0x13c>)
 8009a20:	0011      	movs	r1, r2
 8009a22:	0018      	movs	r0, r3
 8009a24:	f00b fba8 	bl	8015178 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8009a28:	4b43      	ldr	r3, [pc, #268]	@ (8009b38 <ProcessRadioTxDone+0x13c>)
 8009a2a:	0018      	movs	r0, r3
 8009a2c:	f00b fa48 	bl	8014ec0 <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8009a30:	4a3e      	ldr	r2, [pc, #248]	@ (8009b2c <ProcessRadioTxDone+0x130>)
 8009a32:	23ed      	movs	r3, #237	@ 0xed
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	58d2      	ldr	r2, [r2, r3]
 8009a38:	4b40      	ldr	r3, [pc, #256]	@ (8009b3c <ProcessRadioTxDone+0x140>)
 8009a3a:	0011      	movs	r1, r2
 8009a3c:	0018      	movs	r0, r3
 8009a3e:	f00b fb9b 	bl	8015178 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8009a42:	4b3e      	ldr	r3, [pc, #248]	@ (8009b3c <ProcessRadioTxDone+0x140>)
 8009a44:	0018      	movs	r0, r3
 8009a46:	f00b fa3b 	bl	8014ec0 <TimerStart>

    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8009a4a:	4b38      	ldr	r3, [pc, #224]	@ (8009b2c <ProcessRadioTxDone+0x130>)
 8009a4c:	4a38      	ldr	r2, [pc, #224]	@ (8009b30 <ProcessRadioTxDone+0x134>)
 8009a4e:	589b      	ldr	r3, [r3, r2]
 8009a50:	22f0      	movs	r2, #240	@ 0xf0
 8009a52:	5c9b      	ldrb	r3, [r3, r2]
 8009a54:	2b02      	cmp	r3, #2
 8009a56:	d004      	beq.n	8009a62 <ProcessRadioTxDone+0x66>
 8009a58:	4b34      	ldr	r3, [pc, #208]	@ (8009b2c <ProcessRadioTxDone+0x130>)
 8009a5a:	4a39      	ldr	r2, [pc, #228]	@ (8009b40 <ProcessRadioTxDone+0x144>)
 8009a5c:	5c9b      	ldrb	r3, [r3, r2]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d021      	beq.n	8009aa6 <ProcessRadioTxDone+0xaa>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8009a62:	210c      	movs	r1, #12
 8009a64:	187b      	adds	r3, r7, r1
 8009a66:	2216      	movs	r2, #22
 8009a68:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009a6a:	4b30      	ldr	r3, [pc, #192]	@ (8009b2c <ProcessRadioTxDone+0x130>)
 8009a6c:	4a30      	ldr	r2, [pc, #192]	@ (8009b30 <ProcessRadioTxDone+0x134>)
 8009a6e:	589b      	ldr	r3, [r3, r2]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	187a      	adds	r2, r7, r1
 8009a74:	0011      	movs	r1, r2
 8009a76:	0018      	movs	r0, r3
 8009a78:	f007 fdbb 	bl	80115f2 <RegionGetPhyParam>
 8009a7c:	0003      	movs	r3, r0
 8009a7e:	001a      	movs	r2, r3
 8009a80:	2108      	movs	r1, #8
 8009a82:	187b      	adds	r3, r7, r1
 8009a84:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8009a86:	4a29      	ldr	r2, [pc, #164]	@ (8009b2c <ProcessRadioTxDone+0x130>)
 8009a88:	23ed      	movs	r3, #237	@ 0xed
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	58d2      	ldr	r2, [r2, r3]
 8009a8e:	187b      	adds	r3, r7, r1
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	18d2      	adds	r2, r2, r3
 8009a94:	4b2b      	ldr	r3, [pc, #172]	@ (8009b44 <ProcessRadioTxDone+0x148>)
 8009a96:	0011      	movs	r1, r2
 8009a98:	0018      	movs	r0, r3
 8009a9a:	f00b fb6d 	bl	8015178 <TimerSetValue>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8009a9e:	4b29      	ldr	r3, [pc, #164]	@ (8009b44 <ProcessRadioTxDone+0x148>)
 8009aa0:	0018      	movs	r0, r3
 8009aa2:	f00b fa0d 	bl	8014ec0 <TimerStart>
    }

    // Store last Tx channel
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 8009aa6:	4b21      	ldr	r3, [pc, #132]	@ (8009b2c <ProcessRadioTxDone+0x130>)
 8009aa8:	4a21      	ldr	r2, [pc, #132]	@ (8009b30 <ProcessRadioTxDone+0x134>)
 8009aaa:	589a      	ldr	r2, [r3, r2]
 8009aac:	4b1f      	ldr	r3, [pc, #124]	@ (8009b2c <ProcessRadioTxDone+0x130>)
 8009aae:	4926      	ldr	r1, [pc, #152]	@ (8009b48 <ProcessRadioTxDone+0x14c>)
 8009ab0:	5c59      	ldrb	r1, [r3, r1]
 8009ab2:	239f      	movs	r3, #159	@ 0x9f
 8009ab4:	005b      	lsls	r3, r3, #1
 8009ab6:	54d1      	strb	r1, [r2, r3]
    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 8009ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8009b2c <ProcessRadioTxDone+0x130>)
 8009aba:	4a23      	ldr	r2, [pc, #140]	@ (8009b48 <ProcessRadioTxDone+0x14c>)
 8009abc:	5c9a      	ldrb	r2, [r3, r2]
 8009abe:	003b      	movs	r3, r7
 8009ac0:	701a      	strb	r2, [r3, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8009ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8009b2c <ProcessRadioTxDone+0x130>)
 8009ac4:	4a1a      	ldr	r2, [pc, #104]	@ (8009b30 <ProcessRadioTxDone+0x134>)
 8009ac6:	589a      	ldr	r2, [r3, r2]
 8009ac8:	23ea      	movs	r3, #234	@ 0xea
 8009aca:	005b      	lsls	r3, r3, #1
 8009acc:	5cd3      	ldrb	r3, [r2, r3]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d103      	bne.n	8009ada <ProcessRadioTxDone+0xde>
    {
        txDone.Joined  = false;
 8009ad2:	003b      	movs	r3, r7
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	705a      	strb	r2, [r3, #1]
 8009ad8:	e002      	b.n	8009ae0 <ProcessRadioTxDone+0xe4>
    }
    else
    {
        txDone.Joined  = true;
 8009ada:	003b      	movs	r3, r7
 8009adc:	2201      	movs	r2, #1
 8009ade:	705a      	strb	r2, [r3, #1]
    }
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8009ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8009b4c <ProcessRadioTxDone+0x150>)
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	003b      	movs	r3, r7
 8009ae6:	605a      	str	r2, [r3, #4]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 8009ae8:	4b10      	ldr	r3, [pc, #64]	@ (8009b2c <ProcessRadioTxDone+0x130>)
 8009aea:	4a11      	ldr	r2, [pc, #68]	@ (8009b30 <ProcessRadioTxDone+0x134>)
 8009aec:	589b      	ldr	r3, [r3, r2]
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	003a      	movs	r2, r7
 8009af2:	0011      	movs	r1, r2
 8009af4:	0018      	movs	r0, r3
 8009af6:	f007 fda3 	bl	8011640 <RegionSetBandTxDone>
    // Update Aggregated last tx done time
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 8009afa:	4b0c      	ldr	r3, [pc, #48]	@ (8009b2c <ProcessRadioTxDone+0x130>)
 8009afc:	4a0c      	ldr	r2, [pc, #48]	@ (8009b30 <ProcessRadioTxDone+0x134>)
 8009afe:	589a      	ldr	r2, [r3, r2]
 8009b00:	4b12      	ldr	r3, [pc, #72]	@ (8009b4c <ProcessRadioTxDone+0x150>)
 8009b02:	6819      	ldr	r1, [r3, #0]
 8009b04:	23e2      	movs	r3, #226	@ 0xe2
 8009b06:	005b      	lsls	r3, r3, #1
 8009b08:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NodeAckRequested == false )
 8009b0a:	4b08      	ldr	r3, [pc, #32]	@ (8009b2c <ProcessRadioTxDone+0x130>)
 8009b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8009b40 <ProcessRadioTxDone+0x144>)
 8009b0e:	5c9b      	ldrb	r3, [r3, r2]
 8009b10:	2201      	movs	r2, #1
 8009b12:	4053      	eors	r3, r2
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d003      	beq.n	8009b22 <ProcessRadioTxDone+0x126>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009b1a:	4b04      	ldr	r3, [pc, #16]	@ (8009b2c <ProcessRadioTxDone+0x130>)
 8009b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8009b50 <ProcessRadioTxDone+0x154>)
 8009b1e:	2100      	movs	r1, #0
 8009b20:	5499      	strb	r1, [r3, r2]
    }
}
 8009b22:	46c0      	nop			@ (mov r8, r8)
 8009b24:	46bd      	mov	sp, r7
 8009b26:	b004      	add	sp, #16
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	46c0      	nop			@ (mov r8, r8)
 8009b2c:	20000940 	.word	0x20000940
 8009b30:	00000484 	.word	0x00000484
 8009b34:	0801ac88 	.word	0x0801ac88
 8009b38:	20000cc0 	.word	0x20000cc0
 8009b3c:	20000cd8 	.word	0x20000cd8
 8009b40:	00000414 	.word	0x00000414
 8009b44:	20000d38 	.word	0x20000d38
 8009b48:	00000415 	.word	0x00000415
 8009b4c:	20000fe0 	.word	0x20000fe0
 8009b50:	0000043d 	.word	0x0000043d

08009b54 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8009b58:	4a11      	ldr	r2, [pc, #68]	@ (8009ba0 <PrepareRxDoneAbort+0x4c>)
 8009b5a:	23d0      	movs	r3, #208	@ 0xd0
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	58d3      	ldr	r3, [r2, r3]
 8009b60:	2280      	movs	r2, #128	@ 0x80
 8009b62:	431a      	orrs	r2, r3
 8009b64:	0011      	movs	r1, r2
 8009b66:	4a0e      	ldr	r2, [pc, #56]	@ (8009ba0 <PrepareRxDoneAbort+0x4c>)
 8009b68:	23d0      	movs	r3, #208	@ 0xd0
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NodeAckRequested == true )
 8009b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8009ba0 <PrepareRxDoneAbort+0x4c>)
 8009b70:	4a0c      	ldr	r2, [pc, #48]	@ (8009ba4 <PrepareRxDoneAbort+0x50>)
 8009b72:	5c9b      	ldrb	r3, [r3, r2]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d002      	beq.n	8009b7e <PrepareRxDoneAbort+0x2a>
    {
        OnAckTimeoutTimerEvent( NULL );
 8009b78:	2000      	movs	r0, #0
 8009b7a:	f001 f9bb 	bl	800aef4 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8009b7e:	4b08      	ldr	r3, [pc, #32]	@ (8009ba0 <PrepareRxDoneAbort+0x4c>)
 8009b80:	4a09      	ldr	r2, [pc, #36]	@ (8009ba8 <PrepareRxDoneAbort+0x54>)
 8009b82:	5c99      	ldrb	r1, [r3, r2]
 8009b84:	2002      	movs	r0, #2
 8009b86:	4301      	orrs	r1, r0
 8009b88:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009b8a:	4b05      	ldr	r3, [pc, #20]	@ (8009ba0 <PrepareRxDoneAbort+0x4c>)
 8009b8c:	4a06      	ldr	r2, [pc, #24]	@ (8009ba8 <PrepareRxDoneAbort+0x54>)
 8009b8e:	5c99      	ldrb	r1, [r3, r2]
 8009b90:	2020      	movs	r0, #32
 8009b92:	4301      	orrs	r1, r0
 8009b94:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 8009b96:	f7ff ff15 	bl	80099c4 <UpdateRxSlotIdleState>
}
 8009b9a:	46c0      	nop			@ (mov r8, r8)
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	20000940 	.word	0x20000940
 8009ba4:	00000414 	.word	0x00000414
 8009ba8:	00000481 	.word	0x00000481

08009bac <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8009bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bae:	b0a7      	sub	sp, #156	@ 0x9c
 8009bb0:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8009bb2:	2380      	movs	r3, #128	@ 0x80
 8009bb4:	18fb      	adds	r3, r7, r3
 8009bb6:	2213      	movs	r2, #19
 8009bb8:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 8009bba:	4bdd      	ldr	r3, [pc, #884]	@ (8009f30 <ProcessRadioRxDone+0x384>)
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint16_t size = RxDoneParams.Size;
 8009bc0:	267a      	movs	r6, #122	@ 0x7a
 8009bc2:	19bb      	adds	r3, r7, r6
 8009bc4:	4ada      	ldr	r2, [pc, #872]	@ (8009f30 <ProcessRadioRxDone+0x384>)
 8009bc6:	8912      	ldrh	r2, [r2, #8]
 8009bc8:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
 8009bca:	2478      	movs	r4, #120	@ 0x78
 8009bcc:	193b      	adds	r3, r7, r4
 8009bce:	4ad8      	ldr	r2, [pc, #864]	@ (8009f30 <ProcessRadioRxDone+0x384>)
 8009bd0:	8952      	ldrh	r2, [r2, #10]
 8009bd2:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
 8009bd4:	2577      	movs	r5, #119	@ 0x77
 8009bd6:	197b      	adds	r3, r7, r5
 8009bd8:	4ad5      	ldr	r2, [pc, #852]	@ (8009f30 <ProcessRadioRxDone+0x384>)
 8009bda:	7b12      	ldrb	r2, [r2, #12]
 8009bdc:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
 8009bde:	2376      	movs	r3, #118	@ 0x76
 8009be0:	18fb      	adds	r3, r7, r3
 8009be2:	2200      	movs	r2, #0
 8009be4:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
 8009be6:	2300      	movs	r3, #0
 8009be8:	60bb      	str	r3, [r7, #8]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8009bea:	4bd2      	ldr	r3, [pc, #840]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009bec:	4ad2      	ldr	r2, [pc, #840]	@ (8009f38 <ProcessRadioRxDone+0x38c>)
 8009bee:	589b      	ldr	r3, [r3, r2]
 8009bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009bf2:	2284      	movs	r2, #132	@ 0x84
 8009bf4:	18ba      	adds	r2, r7, r2
 8009bf6:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
 8009bf8:	2383      	movs	r3, #131	@ 0x83
 8009bfa:	18fb      	adds	r3, r7, r3
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8009c00:	2382      	movs	r3, #130	@ 0x82
 8009c02:	18fb      	adds	r3, r7, r3
 8009c04:	2204      	movs	r2, #4
 8009c06:	701a      	strb	r2, [r3, #0]
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 8009c08:	4aca      	ldr	r2, [pc, #808]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009c0a:	2388      	movs	r3, #136	@ 0x88
 8009c0c:	00db      	lsls	r3, r3, #3
 8009c0e:	2100      	movs	r1, #0
 8009c10:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 8009c12:	4bc8      	ldr	r3, [pc, #800]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009c14:	193a      	adds	r2, r7, r4
 8009c16:	49c9      	ldr	r1, [pc, #804]	@ (8009f3c <ProcessRadioRxDone+0x390>)
 8009c18:	8812      	ldrh	r2, [r2, #0]
 8009c1a:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
 8009c1c:	4bc5      	ldr	r3, [pc, #788]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009c1e:	197a      	adds	r2, r7, r5
 8009c20:	49c7      	ldr	r1, [pc, #796]	@ (8009f40 <ProcessRadioRxDone+0x394>)
 8009c22:	7812      	ldrb	r2, [r2, #0]
 8009c24:	545a      	strb	r2, [r3, r1]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 8009c26:	4ac3      	ldr	r2, [pc, #780]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009c28:	2390      	movs	r3, #144	@ 0x90
 8009c2a:	00db      	lsls	r3, r3, #3
 8009c2c:	5cd1      	ldrb	r1, [r2, r3]
 8009c2e:	4bc1      	ldr	r3, [pc, #772]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009c30:	4ac4      	ldr	r2, [pc, #784]	@ (8009f44 <ProcessRadioRxDone+0x398>)
 8009c32:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
 8009c34:	4bbf      	ldr	r3, [pc, #764]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009c36:	4ac4      	ldr	r2, [pc, #784]	@ (8009f48 <ProcessRadioRxDone+0x39c>)
 8009c38:	2100      	movs	r1, #0
 8009c3a:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
 8009c3c:	4bbd      	ldr	r3, [pc, #756]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009c3e:	4ac3      	ldr	r2, [pc, #780]	@ (8009f4c <ProcessRadioRxDone+0x3a0>)
 8009c40:	2100      	movs	r1, #0
 8009c42:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
 8009c44:	4bbb      	ldr	r3, [pc, #748]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009c46:	4ac2      	ldr	r2, [pc, #776]	@ (8009f50 <ProcessRadioRxDone+0x3a4>)
 8009c48:	2100      	movs	r1, #0
 8009c4a:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 8009c4c:	4bb9      	ldr	r3, [pc, #740]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009c4e:	4ac1      	ldr	r2, [pc, #772]	@ (8009f54 <ProcessRadioRxDone+0x3a8>)
 8009c50:	2100      	movs	r1, #0
 8009c52:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 8009c54:	4ab7      	ldr	r2, [pc, #732]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009c56:	2385      	movs	r3, #133	@ 0x85
 8009c58:	00db      	lsls	r3, r3, #3
 8009c5a:	2100      	movs	r1, #0
 8009c5c:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxData = false;
 8009c5e:	4bb5      	ldr	r3, [pc, #724]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009c60:	4abd      	ldr	r2, [pc, #756]	@ (8009f58 <ProcessRadioRxDone+0x3ac>)
 8009c62:	2100      	movs	r1, #0
 8009c64:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
 8009c66:	4bb3      	ldr	r3, [pc, #716]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009c68:	4abc      	ldr	r2, [pc, #752]	@ (8009f5c <ProcessRadioRxDone+0x3b0>)
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8009c6e:	4ab1      	ldr	r2, [pc, #708]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009c70:	2386      	movs	r3, #134	@ 0x86
 8009c72:	00db      	lsls	r3, r3, #3
 8009c74:	2100      	movs	r1, #0
 8009c76:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8009c78:	4bae      	ldr	r3, [pc, #696]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009c7a:	4ab9      	ldr	r2, [pc, #740]	@ (8009f60 <ProcessRadioRxDone+0x3b4>)
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 8009c80:	4bac      	ldr	r3, [pc, #688]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009c82:	4ab8      	ldr	r2, [pc, #736]	@ (8009f64 <ProcessRadioRxDone+0x3b8>)
 8009c84:	2100      	movs	r1, #0
 8009c86:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8009c88:	4aaa      	ldr	r2, [pc, #680]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009c8a:	2387      	movs	r3, #135	@ 0x87
 8009c8c:	00db      	lsls	r3, r3, #3
 8009c8e:	2100      	movs	r1, #0
 8009c90:	54d1      	strb	r1, [r2, r3]

    Radio.Sleep( );
 8009c92:	4bb5      	ldr	r3, [pc, #724]	@ (8009f68 <ProcessRadioRxDone+0x3bc>)
 8009c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c96:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 8009c98:	4bb4      	ldr	r3, [pc, #720]	@ (8009f6c <ProcessRadioRxDone+0x3c0>)
 8009c9a:	0018      	movs	r0, r3
 8009c9c:	f00b f9ee 	bl	801507c <TimerStop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8009ca0:	19bb      	adds	r3, r7, r6
 8009ca2:	881a      	ldrh	r2, [r3, #0]
 8009ca4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009ca6:	0011      	movs	r1, r2
 8009ca8:	0018      	movs	r0, r3
 8009caa:	f005 fa5b 	bl	800f164 <LoRaMacClassBRxBeacon>
 8009cae:	1e03      	subs	r3, r0, #0
 8009cb0:	d00c      	beq.n	8009ccc <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8009cb2:	4ba0      	ldr	r3, [pc, #640]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009cb4:	193a      	adds	r2, r7, r4
 8009cb6:	49ae      	ldr	r1, [pc, #696]	@ (8009f70 <ProcessRadioRxDone+0x3c4>)
 8009cb8:	8812      	ldrh	r2, [r2, #0]
 8009cba:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8009cbc:	4a9d      	ldr	r2, [pc, #628]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009cbe:	1979      	adds	r1, r7, r5
 8009cc0:	238f      	movs	r3, #143	@ 0x8f
 8009cc2:	00db      	lsls	r3, r3, #3
 8009cc4:	7809      	ldrb	r1, [r1, #0]
 8009cc6:	54d1      	strb	r1, [r2, r3]
        return;
 8009cc8:	f000 fc84 	bl	800a5d4 <ProcessRadioRxDone+0xa28>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8009ccc:	4b99      	ldr	r3, [pc, #612]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009cce:	4a9a      	ldr	r2, [pc, #616]	@ (8009f38 <ProcessRadioRxDone+0x38c>)
 8009cd0:	589b      	ldr	r3, [r3, r2]
 8009cd2:	22f0      	movs	r2, #240	@ 0xf0
 8009cd4:	5c9b      	ldrb	r3, [r3, r2]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d11c      	bne.n	8009d14 <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009cda:	f005 fa55 	bl	800f188 <LoRaMacClassBIsPingExpected>
 8009cde:	1e03      	subs	r3, r0, #0
 8009ce0:	d00a      	beq.n	8009cf8 <ProcessRadioRxDone+0x14c>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	f005 fa0c 	bl	800f100 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8009ce8:	2000      	movs	r0, #0
 8009cea:	f005 fa2b 	bl	800f144 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8009cee:	4b91      	ldr	r3, [pc, #580]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009cf0:	4a94      	ldr	r2, [pc, #592]	@ (8009f44 <ProcessRadioRxDone+0x398>)
 8009cf2:	2104      	movs	r1, #4
 8009cf4:	5499      	strb	r1, [r3, r2]
 8009cf6:	e00d      	b.n	8009d14 <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009cf8:	f005 fa4c 	bl	800f194 <LoRaMacClassBIsMulticastExpected>
 8009cfc:	1e03      	subs	r3, r0, #0
 8009cfe:	d009      	beq.n	8009d14 <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009d00:	2000      	movs	r0, #0
 8009d02:	f005 fa07 	bl	800f114 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8009d06:	2000      	movs	r0, #0
 8009d08:	f005 fa24 	bl	800f154 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8009d0c:	4b89      	ldr	r3, [pc, #548]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009d0e:	4a8d      	ldr	r2, [pc, #564]	@ (8009f44 <ProcessRadioRxDone+0x398>)
 8009d10:	2105      	movs	r1, #5
 8009d12:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 8009d14:	2276      	movs	r2, #118	@ 0x76
 8009d16:	18bb      	adds	r3, r7, r2
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	18ba      	adds	r2, r7, r2
 8009d1c:	1c59      	adds	r1, r3, #1
 8009d1e:	7011      	strb	r1, [r2, #0]
 8009d20:	001a      	movs	r2, r3
 8009d22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009d24:	189b      	adds	r3, r3, r2
 8009d26:	781a      	ldrb	r2, [r3, #0]
 8009d28:	2174      	movs	r1, #116	@ 0x74
 8009d2a:	187b      	adds	r3, r7, r1
 8009d2c:	701a      	strb	r2, [r3, #0]

    switch( macHdr.Bits.MType )
 8009d2e:	187b      	adds	r3, r7, r1
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	061b      	lsls	r3, r3, #24
 8009d34:	0f5b      	lsrs	r3, r3, #29
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	2b07      	cmp	r3, #7
 8009d3a:	d101      	bne.n	8009d40 <ProcessRadioRxDone+0x194>
 8009d3c:	f000 fbf2 	bl	800a524 <ProcessRadioRxDone+0x978>
 8009d40:	dd01      	ble.n	8009d46 <ProcessRadioRxDone+0x19a>
 8009d42:	f000 fc1e 	bl	800a582 <ProcessRadioRxDone+0x9d6>
 8009d46:	2b05      	cmp	r3, #5
 8009d48:	d100      	bne.n	8009d4c <ProcessRadioRxDone+0x1a0>
 8009d4a:	e115      	b.n	8009f78 <ProcessRadioRxDone+0x3cc>
 8009d4c:	dd01      	ble.n	8009d52 <ProcessRadioRxDone+0x1a6>
 8009d4e:	f000 fc18 	bl	800a582 <ProcessRadioRxDone+0x9d6>
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d004      	beq.n	8009d60 <ProcessRadioRxDone+0x1b4>
 8009d56:	2b03      	cmp	r3, #3
 8009d58:	d100      	bne.n	8009d5c <ProcessRadioRxDone+0x1b0>
 8009d5a:	e111      	b.n	8009f80 <ProcessRadioRxDone+0x3d4>
 8009d5c:	f000 fc11 	bl	800a582 <ProcessRadioRxDone+0x9d6>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            macMsgJoinAccept.Buffer = payload;
 8009d60:	210c      	movs	r1, #12
 8009d62:	187b      	adds	r3, r7, r1
 8009d64:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009d66:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
 8009d68:	237a      	movs	r3, #122	@ 0x7a
 8009d6a:	18fb      	adds	r3, r7, r3
 8009d6c:	881b      	ldrh	r3, [r3, #0]
 8009d6e:	b2da      	uxtb	r2, r3
 8009d70:	187b      	adds	r3, r7, r1
 8009d72:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8009d74:	4b6f      	ldr	r3, [pc, #444]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009d76:	4a70      	ldr	r2, [pc, #448]	@ (8009f38 <ProcessRadioRxDone+0x38c>)
 8009d78:	589a      	ldr	r2, [r3, r2]
 8009d7a:	23ea      	movs	r3, #234	@ 0xea
 8009d7c:	005b      	lsls	r3, r3, #1
 8009d7e:	5cd3      	ldrb	r3, [r2, r3]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d007      	beq.n	8009d94 <ProcessRadioRxDone+0x1e8>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009d84:	4b6b      	ldr	r3, [pc, #428]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009d86:	4a7b      	ldr	r2, [pc, #492]	@ (8009f74 <ProcessRadioRxDone+0x3c8>)
 8009d88:	2101      	movs	r1, #1
 8009d8a:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 8009d8c:	f7ff fee2 	bl	8009b54 <PrepareRxDoneAbort>
                return;
 8009d90:	f000 fc20 	bl	800a5d4 <ProcessRadioRxDone+0xa28>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8009d94:	f7ff fcca 	bl	800972c <SecureElementGetJoinEui>
 8009d98:	0001      	movs	r1, r0
 8009d9a:	2680      	movs	r6, #128	@ 0x80
 8009d9c:	19bc      	adds	r4, r7, r6
 8009d9e:	250c      	movs	r5, #12
 8009da0:	197b      	adds	r3, r7, r5
 8009da2:	001a      	movs	r2, r3
 8009da4:	20ff      	movs	r0, #255	@ 0xff
 8009da6:	f006 fcb7 	bl	8010718 <LoRaMacCryptoHandleJoinAccept>
 8009daa:	0003      	movs	r3, r0
 8009dac:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8009dae:	19bb      	adds	r3, r7, r6
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d000      	beq.n	8009db8 <ProcessRadioRxDone+0x20c>
 8009db6:	e0b0      	b.n	8009f1a <ProcessRadioRxDone+0x36e>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8009db8:	002c      	movs	r4, r5
 8009dba:	193b      	adds	r3, r7, r4
 8009dbc:	7a59      	ldrb	r1, [r3, #9]
 8009dbe:	4b5d      	ldr	r3, [pc, #372]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009dc0:	4a5d      	ldr	r2, [pc, #372]	@ (8009f38 <ProcessRadioRxDone+0x38c>)
 8009dc2:	589b      	ldr	r3, [r3, r2]
 8009dc4:	000a      	movs	r2, r1
 8009dc6:	649a      	str	r2, [r3, #72]	@ 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8009dc8:	4b5a      	ldr	r3, [pc, #360]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009dca:	4a5b      	ldr	r2, [pc, #364]	@ (8009f38 <ProcessRadioRxDone+0x38c>)
 8009dcc:	589b      	ldr	r3, [r3, r2]
 8009dce:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8009dd0:	193b      	adds	r3, r7, r4
 8009dd2:	7a9b      	ldrb	r3, [r3, #10]
 8009dd4:	021a      	lsls	r2, r3, #8
 8009dd6:	4b57      	ldr	r3, [pc, #348]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009dd8:	4857      	ldr	r0, [pc, #348]	@ (8009f38 <ProcessRadioRxDone+0x38c>)
 8009dda:	581b      	ldr	r3, [r3, r0]
 8009ddc:	430a      	orrs	r2, r1
 8009dde:	649a      	str	r2, [r3, #72]	@ 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8009de0:	4b54      	ldr	r3, [pc, #336]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009de2:	4a55      	ldr	r2, [pc, #340]	@ (8009f38 <ProcessRadioRxDone+0x38c>)
 8009de4:	589b      	ldr	r3, [r3, r2]
 8009de6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8009de8:	193b      	adds	r3, r7, r4
 8009dea:	7adb      	ldrb	r3, [r3, #11]
 8009dec:	041a      	lsls	r2, r3, #16
 8009dee:	4b51      	ldr	r3, [pc, #324]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009df0:	4851      	ldr	r0, [pc, #324]	@ (8009f38 <ProcessRadioRxDone+0x38c>)
 8009df2:	581b      	ldr	r3, [r3, r0]
 8009df4:	430a      	orrs	r2, r1
 8009df6:	649a      	str	r2, [r3, #72]	@ 0x48

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 8009df8:	4b4e      	ldr	r3, [pc, #312]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009dfa:	4a4f      	ldr	r2, [pc, #316]	@ (8009f38 <ProcessRadioRxDone+0x38c>)
 8009dfc:	589b      	ldr	r3, [r3, r2]
 8009dfe:	0020      	movs	r0, r4
 8009e00:	183a      	adds	r2, r7, r0
 8009e02:	68d2      	ldr	r2, [r2, #12]
 8009e04:	64da      	str	r2, [r3, #76]	@ 0x4c

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8009e06:	183b      	adds	r3, r7, r0
 8009e08:	7c1b      	ldrb	r3, [r3, #16]
 8009e0a:	065b      	lsls	r3, r3, #25
 8009e0c:	0f5b      	lsrs	r3, r3, #29
 8009e0e:	b2d9      	uxtb	r1, r3
 8009e10:	4b48      	ldr	r3, [pc, #288]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009e12:	4a49      	ldr	r2, [pc, #292]	@ (8009f38 <ProcessRadioRxDone+0x38c>)
 8009e14:	589a      	ldr	r2, [r3, r2]
 8009e16:	231a      	movs	r3, #26
 8009e18:	33ff      	adds	r3, #255	@ 0xff
 8009e1a:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8009e1c:	183b      	adds	r3, r7, r0
 8009e1e:	7c1b      	ldrb	r3, [r3, #16]
 8009e20:	071b      	lsls	r3, r3, #28
 8009e22:	0f1b      	lsrs	r3, r3, #28
 8009e24:	b2d9      	uxtb	r1, r3
 8009e26:	4b43      	ldr	r3, [pc, #268]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009e28:	4a43      	ldr	r2, [pc, #268]	@ (8009f38 <ProcessRadioRxDone+0x38c>)
 8009e2a:	589a      	ldr	r2, [r3, r2]
 8009e2c:	2390      	movs	r3, #144	@ 0x90
 8009e2e:	005b      	lsls	r3, r3, #1
 8009e30:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8009e32:	183b      	adds	r3, r7, r0
 8009e34:	7c1b      	ldrb	r3, [r3, #16]
 8009e36:	071b      	lsls	r3, r3, #28
 8009e38:	0f1b      	lsrs	r3, r3, #28
 8009e3a:	b2d9      	uxtb	r1, r3
 8009e3c:	4b3d      	ldr	r3, [pc, #244]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009e3e:	4a3e      	ldr	r2, [pc, #248]	@ (8009f38 <ProcessRadioRxDone+0x38c>)
 8009e40:	589a      	ldr	r2, [r3, r2]
 8009e42:	2394      	movs	r3, #148	@ 0x94
 8009e44:	005b      	lsls	r3, r3, #1
 8009e46:	54d1      	strb	r1, [r2, r3]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8009e48:	183b      	adds	r3, r7, r0
 8009e4a:	7c59      	ldrb	r1, [r3, #17]
 8009e4c:	4b39      	ldr	r3, [pc, #228]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009e4e:	4a3a      	ldr	r2, [pc, #232]	@ (8009f38 <ProcessRadioRxDone+0x38c>)
 8009e50:	589a      	ldr	r2, [r3, r2]
 8009e52:	2384      	movs	r3, #132	@ 0x84
 8009e54:	005b      	lsls	r3, r3, #1
 8009e56:	50d1      	str	r1, [r2, r3]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 8009e58:	4b36      	ldr	r3, [pc, #216]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009e5a:	4a37      	ldr	r2, [pc, #220]	@ (8009f38 <ProcessRadioRxDone+0x38c>)
 8009e5c:	589a      	ldr	r2, [r3, r2]
 8009e5e:	2384      	movs	r3, #132	@ 0x84
 8009e60:	005b      	lsls	r3, r3, #1
 8009e62:	58d3      	ldr	r3, [r2, r3]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d106      	bne.n	8009e76 <ProcessRadioRxDone+0x2ca>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 8009e68:	4b32      	ldr	r3, [pc, #200]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009e6a:	4a33      	ldr	r2, [pc, #204]	@ (8009f38 <ProcessRadioRxDone+0x38c>)
 8009e6c:	589a      	ldr	r2, [r3, r2]
 8009e6e:	2384      	movs	r3, #132	@ 0x84
 8009e70:	005b      	lsls	r3, r3, #1
 8009e72:	2101      	movs	r1, #1
 8009e74:	50d1      	str	r1, [r2, r3]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 8009e76:	4b2f      	ldr	r3, [pc, #188]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009e78:	4a2f      	ldr	r2, [pc, #188]	@ (8009f38 <ProcessRadioRxDone+0x38c>)
 8009e7a:	589a      	ldr	r2, [r3, r2]
 8009e7c:	2384      	movs	r3, #132	@ 0x84
 8009e7e:	005b      	lsls	r3, r3, #1
 8009e80:	58d2      	ldr	r2, [r2, r3]
 8009e82:	4b2c      	ldr	r3, [pc, #176]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009e84:	492c      	ldr	r1, [pc, #176]	@ (8009f38 <ProcessRadioRxDone+0x38c>)
 8009e86:	5859      	ldr	r1, [r3, r1]
 8009e88:	0013      	movs	r3, r2
 8009e8a:	015b      	lsls	r3, r3, #5
 8009e8c:	1a9b      	subs	r3, r3, r2
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	189b      	adds	r3, r3, r2
 8009e92:	00db      	lsls	r3, r3, #3
 8009e94:	001a      	movs	r2, r3
 8009e96:	2384      	movs	r3, #132	@ 0x84
 8009e98:	005b      	lsls	r3, r3, #1
 8009e9a:	50ca      	str	r2, [r1, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8009e9c:	4b25      	ldr	r3, [pc, #148]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009e9e:	4a26      	ldr	r2, [pc, #152]	@ (8009f38 <ProcessRadioRxDone+0x38c>)
 8009ea0:	589a      	ldr	r2, [r3, r2]
 8009ea2:	2384      	movs	r3, #132	@ 0x84
 8009ea4:	005b      	lsls	r3, r3, #1
 8009ea6:	58d3      	ldr	r3, [r2, r3]
 8009ea8:	4a22      	ldr	r2, [pc, #136]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009eaa:	4923      	ldr	r1, [pc, #140]	@ (8009f38 <ProcessRadioRxDone+0x38c>)
 8009eac:	5852      	ldr	r2, [r2, r1]
 8009eae:	21fa      	movs	r1, #250	@ 0xfa
 8009eb0:	0089      	lsls	r1, r1, #2
 8009eb2:	1859      	adds	r1, r3, r1
 8009eb4:	2386      	movs	r3, #134	@ 0x86
 8009eb6:	005b      	lsls	r3, r3, #1
 8009eb8:	50d1      	str	r1, [r2, r3]

                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 8009eba:	4b1e      	ldr	r3, [pc, #120]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009ebc:	4a1e      	ldr	r2, [pc, #120]	@ (8009f38 <ProcessRadioRxDone+0x38c>)
 8009ebe:	589a      	ldr	r2, [r3, r2]
 8009ec0:	23e9      	movs	r3, #233	@ 0xe9
 8009ec2:	005b      	lsls	r3, r3, #1
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	54d1      	strb	r1, [r2, r3]

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8009ec8:	216c      	movs	r1, #108	@ 0x6c
 8009eca:	187b      	adds	r3, r7, r1
 8009ecc:	220c      	movs	r2, #12
 8009ece:	18ba      	adds	r2, r7, r2
 8009ed0:	3212      	adds	r2, #18
 8009ed2:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8009ed4:	237a      	movs	r3, #122	@ 0x7a
 8009ed6:	18fb      	adds	r3, r7, r3
 8009ed8:	881b      	ldrh	r3, [r3, #0]
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	3b11      	subs	r3, #17
 8009ede:	b2da      	uxtb	r2, r3
 8009ee0:	187b      	adds	r3, r7, r1
 8009ee2:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 8009ee4:	4b13      	ldr	r3, [pc, #76]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009ee6:	4a14      	ldr	r2, [pc, #80]	@ (8009f38 <ProcessRadioRxDone+0x38c>)
 8009ee8:	589b      	ldr	r3, [r3, r2]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	187a      	adds	r2, r7, r1
 8009eee:	0011      	movs	r1, r2
 8009ef0:	0018      	movs	r0, r3
 8009ef2:	f007 fc01 	bl	80116f8 <RegionApplyCFList>

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 8009ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8009f34 <ProcessRadioRxDone+0x388>)
 8009ef8:	4a0f      	ldr	r2, [pc, #60]	@ (8009f38 <ProcessRadioRxDone+0x38c>)
 8009efa:	589a      	ldr	r2, [r3, r2]
 8009efc:	23ea      	movs	r3, #234	@ 0xea
 8009efe:	005b      	lsls	r3, r3, #1
 8009f00:	2102      	movs	r1, #2
 8009f02:	54d1      	strb	r1, [r2, r3]

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009f04:	2000      	movs	r0, #0
 8009f06:	f005 fdf7 	bl	800faf8 <LoRaMacConfirmQueueIsCmdActive>
 8009f0a:	1e03      	subs	r3, r0, #0
 8009f0c:	d100      	bne.n	8009f10 <ProcessRadioRxDone+0x364>
 8009f0e:	e33f      	b.n	800a590 <ProcessRadioRxDone+0x9e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8009f10:	2100      	movs	r1, #0
 8009f12:	2000      	movs	r0, #0
 8009f14:	f005 fd6c 	bl	800f9f0 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 8009f18:	e33a      	b.n	800a590 <ProcessRadioRxDone+0x9e4>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009f1a:	2000      	movs	r0, #0
 8009f1c:	f005 fdec 	bl	800faf8 <LoRaMacConfirmQueueIsCmdActive>
 8009f20:	1e03      	subs	r3, r0, #0
 8009f22:	d100      	bne.n	8009f26 <ProcessRadioRxDone+0x37a>
 8009f24:	e334      	b.n	800a590 <ProcessRadioRxDone+0x9e4>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8009f26:	2100      	movs	r1, #0
 8009f28:	2007      	movs	r0, #7
 8009f2a:	f005 fd61 	bl	800f9f0 <LoRaMacConfirmQueueSetStatus>
            break;
 8009f2e:	e32f      	b.n	800a590 <ProcessRadioRxDone+0x9e4>
 8009f30:	20000fe4 	.word	0x20000fe4
 8009f34:	20000940 	.word	0x20000940
 8009f38:	00000484 	.word	0x00000484
 8009f3c:	0000042a 	.word	0x0000042a
 8009f40:	0000042c 	.word	0x0000042c
 8009f44:	0000042d 	.word	0x0000042d
 8009f48:	0000041f 	.word	0x0000041f
 8009f4c:	0000041e 	.word	0x0000041e
 8009f50:	00000421 	.word	0x00000421
 8009f54:	00000424 	.word	0x00000424
 8009f58:	00000429 	.word	0x00000429
 8009f5c:	0000042e 	.word	0x0000042e
 8009f60:	0000041c 	.word	0x0000041c
 8009f64:	00000434 	.word	0x00000434
 8009f68:	0801ac88 	.word	0x0801ac88
 8009f6c:	20000cd8 	.word	0x20000cd8
 8009f70:	00000476 	.word	0x00000476
 8009f74:	0000041d 	.word	0x0000041d
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8009f78:	4bca      	ldr	r3, [pc, #808]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 8009f7a:	4acb      	ldr	r2, [pc, #812]	@ (800a2a8 <ProcessRadioRxDone+0x6fc>)
 8009f7c:	2101      	movs	r1, #1
 8009f7e:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009f80:	4bc8      	ldr	r3, [pc, #800]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 8009f82:	4aca      	ldr	r2, [pc, #808]	@ (800a2ac <ProcessRadioRxDone+0x700>)
 8009f84:	589a      	ldr	r2, [r3, r2]
 8009f86:	232e      	movs	r3, #46	@ 0x2e
 8009f88:	33ff      	adds	r3, #255	@ 0xff
 8009f8a:	5cd2      	ldrb	r2, [r2, r3]
 8009f8c:	2168      	movs	r1, #104	@ 0x68
 8009f8e:	187b      	adds	r3, r7, r1
 8009f90:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8009f92:	4ac4      	ldr	r2, [pc, #784]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 8009f94:	2384      	movs	r3, #132	@ 0x84
 8009f96:	00db      	lsls	r3, r3, #3
 8009f98:	5cd3      	ldrb	r3, [r2, r3]
 8009f9a:	b25a      	sxtb	r2, r3
 8009f9c:	187b      	adds	r3, r7, r1
 8009f9e:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8009fa0:	187b      	adds	r3, r7, r1
 8009fa2:	220d      	movs	r2, #13
 8009fa4:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 8009fa6:	4bbf      	ldr	r3, [pc, #764]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 8009fa8:	4ac0      	ldr	r2, [pc, #768]	@ (800a2ac <ProcessRadioRxDone+0x700>)
 8009faa:	589a      	ldr	r2, [r3, r2]
 8009fac:	2340      	movs	r3, #64	@ 0x40
 8009fae:	33ff      	adds	r3, #255	@ 0xff
 8009fb0:	5cd3      	ldrb	r3, [r2, r3]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d002      	beq.n	8009fbc <ProcessRadioRxDone+0x410>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8009fb6:	187b      	adds	r3, r7, r1
 8009fb8:	220e      	movs	r2, #14
 8009fba:	701a      	strb	r2, [r3, #0]
            }
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009fbc:	4bb9      	ldr	r3, [pc, #740]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 8009fbe:	4abb      	ldr	r2, [pc, #748]	@ (800a2ac <ProcessRadioRxDone+0x700>)
 8009fc0:	589b      	ldr	r3, [r3, r2]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	2268      	movs	r2, #104	@ 0x68
 8009fc6:	18ba      	adds	r2, r7, r2
 8009fc8:	0011      	movs	r1, r2
 8009fca:	0018      	movs	r0, r3
 8009fcc:	f007 fb11 	bl	80115f2 <RegionGetPhyParam>
 8009fd0:	0003      	movs	r3, r0
 8009fd2:	001a      	movs	r2, r3
 8009fd4:	2364      	movs	r3, #100	@ 0x64
 8009fd6:	18fb      	adds	r3, r7, r3
 8009fd8:	601a      	str	r2, [r3, #0]
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 8009fda:	237a      	movs	r3, #122	@ 0x7a
 8009fdc:	18fb      	adds	r3, r7, r3
 8009fde:	881b      	ldrh	r3, [r3, #0]
 8009fe0:	3b0d      	subs	r3, #13
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	b21b      	sxth	r3, r3
 8009fe6:	1c1a      	adds	r2, r3, #0
 8009fe8:	b213      	sxth	r3, r2
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	da01      	bge.n	8009ff2 <ProcessRadioRxDone+0x446>
 8009fee:	2300      	movs	r3, #0
 8009ff0:	1c1a      	adds	r2, r3, #0
 8009ff2:	b212      	sxth	r2, r2
 8009ff4:	2364      	movs	r3, #100	@ 0x64
 8009ff6:	18fb      	adds	r3, r7, r3
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	b21b      	sxth	r3, r3
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	dd06      	ble.n	800a00e <ProcessRadioRxDone+0x462>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a000:	4ba8      	ldr	r3, [pc, #672]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 800a002:	4aab      	ldr	r2, [pc, #684]	@ (800a2b0 <ProcessRadioRxDone+0x704>)
 800a004:	2101      	movs	r1, #1
 800a006:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800a008:	f7ff fda4 	bl	8009b54 <PrepareRxDoneAbort>
                return;
 800a00c:	e2e2      	b.n	800a5d4 <ProcessRadioRxDone+0xa28>
            }
            macMsgData.Buffer = payload;
 800a00e:	2134      	movs	r1, #52	@ 0x34
 800a010:	187b      	adds	r3, r7, r1
 800a012:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a014:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
 800a016:	237a      	movs	r3, #122	@ 0x7a
 800a018:	18fb      	adds	r3, r7, r3
 800a01a:	881b      	ldrh	r3, [r3, #0]
 800a01c:	b2da      	uxtb	r2, r3
 800a01e:	187b      	adds	r3, r7, r1
 800a020:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800a022:	187b      	adds	r3, r7, r1
 800a024:	4aa3      	ldr	r2, [pc, #652]	@ (800a2b4 <ProcessRadioRxDone+0x708>)
 800a026:	625a      	str	r2, [r3, #36]	@ 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800a028:	0008      	movs	r0, r1
 800a02a:	187b      	adds	r3, r7, r1
 800a02c:	2228      	movs	r2, #40	@ 0x28
 800a02e:	21ff      	movs	r1, #255	@ 0xff
 800a030:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800a032:	183b      	adds	r3, r7, r0
 800a034:	0018      	movs	r0, r3
 800a036:	f006 fff9 	bl	801102c <LoRaMacParserData>
 800a03a:	1e03      	subs	r3, r0, #0
 800a03c:	d006      	beq.n	800a04c <ProcessRadioRxDone+0x4a0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a03e:	4b99      	ldr	r3, [pc, #612]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 800a040:	4a9b      	ldr	r2, [pc, #620]	@ (800a2b0 <ProcessRadioRxDone+0x704>)
 800a042:	2101      	movs	r1, #1
 800a044:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800a046:	f7ff fd85 	bl	8009b54 <PrepareRxDoneAbort>
                return;
 800a04a:	e2c3      	b.n	800a5d4 <ProcessRadioRxDone+0xa28>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800a04c:	2034      	movs	r0, #52	@ 0x34
 800a04e:	183b      	adds	r3, r7, r0
 800a050:	689a      	ldr	r2, [r3, #8]
 800a052:	4b94      	ldr	r3, [pc, #592]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 800a054:	4998      	ldr	r1, [pc, #608]	@ (800a2b8 <ProcessRadioRxDone+0x70c>)
 800a056:	505a      	str	r2, [r3, r1]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800a058:	1dba      	adds	r2, r7, #6
 800a05a:	183b      	adds	r3, r7, r0
 800a05c:	0011      	movs	r1, r2
 800a05e:	0018      	movs	r0, r3
 800a060:	f002 fff6 	bl	800d050 <DetermineFrameType>
 800a064:	1e03      	subs	r3, r0, #0
 800a066:	d006      	beq.n	800a076 <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a068:	4b8e      	ldr	r3, [pc, #568]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 800a06a:	4a91      	ldr	r2, [pc, #580]	@ (800a2b0 <ProcessRadioRxDone+0x704>)
 800a06c:	2101      	movs	r1, #1
 800a06e:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800a070:	f7ff fd70 	bl	8009b54 <PrepareRxDoneAbort>
                return;
 800a074:	e2ae      	b.n	800a5d4 <ProcessRadioRxDone+0xa28>
            }

            //Check if it is a multicast message
            multicast = 0;
 800a076:	2383      	movs	r3, #131	@ 0x83
 800a078:	18fb      	adds	r3, r7, r3
 800a07a:	2200      	movs	r2, #0
 800a07c:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
 800a07e:	2300      	movs	r3, #0
 800a080:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a082:	2381      	movs	r3, #129	@ 0x81
 800a084:	18fb      	adds	r3, r7, r3
 800a086:	2200      	movs	r2, #0
 800a088:	701a      	strb	r2, [r3, #0]
 800a08a:	e065      	b.n	800a158 <ProcessRadioRxDone+0x5ac>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a08c:	4b85      	ldr	r3, [pc, #532]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 800a08e:	4a87      	ldr	r2, [pc, #540]	@ (800a2ac <ProcessRadioRxDone+0x700>)
 800a090:	5899      	ldr	r1, [r3, r2]
 800a092:	2481      	movs	r4, #129	@ 0x81
 800a094:	193b      	adds	r3, r7, r4
 800a096:	781a      	ldrb	r2, [r3, #0]
 800a098:	0013      	movs	r3, r2
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	189b      	adds	r3, r3, r2
 800a09e:	00db      	lsls	r3, r3, #3
 800a0a0:	18cb      	adds	r3, r1, r3
 800a0a2:	3354      	adds	r3, #84	@ 0x54
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	2334      	movs	r3, #52	@ 0x34
 800a0a8:	18fb      	adds	r3, r7, r3
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d14d      	bne.n	800a14c <ProcessRadioRxDone+0x5a0>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800a0b0:	4b7c      	ldr	r3, [pc, #496]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 800a0b2:	4a7e      	ldr	r2, [pc, #504]	@ (800a2ac <ProcessRadioRxDone+0x700>)
 800a0b4:	5899      	ldr	r1, [r3, r2]
 800a0b6:	193b      	adds	r3, r7, r4
 800a0b8:	781a      	ldrb	r2, [r3, #0]
 800a0ba:	2051      	movs	r0, #81	@ 0x51
 800a0bc:	0013      	movs	r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	189b      	adds	r3, r3, r2
 800a0c2:	00db      	lsls	r3, r3, #3
 800a0c4:	18cb      	adds	r3, r1, r3
 800a0c6:	181b      	adds	r3, r3, r0
 800a0c8:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d03e      	beq.n	800a14c <ProcessRadioRxDone+0x5a0>
                {
                    multicast = 1;
 800a0ce:	2383      	movs	r3, #131	@ 0x83
 800a0d0:	18fb      	adds	r3, r7, r3
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 800a0d6:	4b73      	ldr	r3, [pc, #460]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 800a0d8:	4a74      	ldr	r2, [pc, #464]	@ (800a2ac <ProcessRadioRxDone+0x700>)
 800a0da:	5898      	ldr	r0, [r3, r2]
 800a0dc:	0025      	movs	r5, r4
 800a0de:	193b      	adds	r3, r7, r4
 800a0e0:	781a      	ldrb	r2, [r3, #0]
 800a0e2:	2382      	movs	r3, #130	@ 0x82
 800a0e4:	18f9      	adds	r1, r7, r3
 800a0e6:	2452      	movs	r4, #82	@ 0x52
 800a0e8:	0013      	movs	r3, r2
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	189b      	adds	r3, r3, r2
 800a0ee:	00db      	lsls	r3, r3, #3
 800a0f0:	18c3      	adds	r3, r0, r3
 800a0f2:	191b      	adds	r3, r3, r4
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	700b      	strb	r3, [r1, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800a0f8:	4b6a      	ldr	r3, [pc, #424]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 800a0fa:	4a6c      	ldr	r2, [pc, #432]	@ (800a2ac <ProcessRadioRxDone+0x700>)
 800a0fc:	5899      	ldr	r1, [r3, r2]
 800a0fe:	002c      	movs	r4, r5
 800a100:	193b      	adds	r3, r7, r4
 800a102:	781a      	ldrb	r2, [r3, #0]
 800a104:	0013      	movs	r3, r2
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	189b      	adds	r3, r3, r2
 800a10a:	00db      	lsls	r3, r3, #3
 800a10c:	18cb      	adds	r3, r1, r3
 800a10e:	336c      	adds	r3, #108	@ 0x6c
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	60bb      	str	r3, [r7, #8]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address;
 800a116:	4b63      	ldr	r3, [pc, #396]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 800a118:	4a64      	ldr	r2, [pc, #400]	@ (800a2ac <ProcessRadioRxDone+0x700>)
 800a11a:	5899      	ldr	r1, [r3, r2]
 800a11c:	193b      	adds	r3, r7, r4
 800a11e:	781a      	ldrb	r2, [r3, #0]
 800a120:	0013      	movs	r3, r2
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	189b      	adds	r3, r3, r2
 800a126:	00db      	lsls	r3, r3, #3
 800a128:	18cb      	adds	r3, r1, r3
 800a12a:	3354      	adds	r3, #84	@ 0x54
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2284      	movs	r2, #132	@ 0x84
 800a130:	18ba      	adds	r2, r7, r2
 800a132:	6013      	str	r3, [r2, #0]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800a134:	4b5b      	ldr	r3, [pc, #364]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 800a136:	4a5d      	ldr	r2, [pc, #372]	@ (800a2ac <ProcessRadioRxDone+0x700>)
 800a138:	589b      	ldr	r3, [r3, r2]
 800a13a:	22f0      	movs	r2, #240	@ 0xf0
 800a13c:	5c9b      	ldrb	r3, [r3, r2]
 800a13e:	2b02      	cmp	r3, #2
 800a140:	d110      	bne.n	800a164 <ProcessRadioRxDone+0x5b8>
                    {
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800a142:	4b58      	ldr	r3, [pc, #352]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 800a144:	4a5d      	ldr	r2, [pc, #372]	@ (800a2bc <ProcessRadioRxDone+0x710>)
 800a146:	2103      	movs	r1, #3
 800a148:	5499      	strb	r1, [r3, r2]
                    }
                    break;
 800a14a:	e00b      	b.n	800a164 <ProcessRadioRxDone+0x5b8>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a14c:	2181      	movs	r1, #129	@ 0x81
 800a14e:	187b      	adds	r3, r7, r1
 800a150:	781a      	ldrb	r2, [r3, #0]
 800a152:	187b      	adds	r3, r7, r1
 800a154:	3201      	adds	r2, #1
 800a156:	701a      	strb	r2, [r3, #0]
 800a158:	2381      	movs	r3, #129	@ 0x81
 800a15a:	18fb      	adds	r3, r7, r3
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	2b03      	cmp	r3, #3
 800a160:	d994      	bls.n	800a08c <ProcessRadioRxDone+0x4e0>
 800a162:	e000      	b.n	800a166 <ProcessRadioRxDone+0x5ba>
                    break;
 800a164:	46c0      	nop			@ (mov r8, r8)
                }
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800a166:	2168      	movs	r1, #104	@ 0x68
 800a168:	187b      	adds	r3, r7, r1
 800a16a:	2215      	movs	r2, #21
 800a16c:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a16e:	4b4d      	ldr	r3, [pc, #308]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 800a170:	4a4e      	ldr	r2, [pc, #312]	@ (800a2ac <ProcessRadioRxDone+0x700>)
 800a172:	589b      	ldr	r3, [r3, r2]
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	187a      	adds	r2, r7, r1
 800a178:	0011      	movs	r1, r2
 800a17a:	0018      	movs	r0, r3
 800a17c:	f007 fa39 	bl	80115f2 <RegionGetPhyParam>
 800a180:	0003      	movs	r3, r0
 800a182:	001a      	movs	r2, r3
 800a184:	2064      	movs	r0, #100	@ 0x64
 800a186:	183b      	adds	r3, r7, r0
 800a188:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800a18a:	1dbb      	adds	r3, r7, #6
 800a18c:	781d      	ldrb	r5, [r3, #0]
 800a18e:	4b45      	ldr	r3, [pc, #276]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 800a190:	4a46      	ldr	r2, [pc, #280]	@ (800a2ac <ProcessRadioRxDone+0x700>)
 800a192:	5899      	ldr	r1, [r3, r2]
 800a194:	183b      	adds	r3, r7, r0
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	b29b      	uxth	r3, r3
 800a19a:	2280      	movs	r2, #128	@ 0x80
 800a19c:	18bc      	adds	r4, r7, r2
 800a19e:	22e8      	movs	r2, #232	@ 0xe8
 800a1a0:	0052      	lsls	r2, r2, #1
 800a1a2:	588e      	ldr	r6, [r1, r2]
 800a1a4:	2134      	movs	r1, #52	@ 0x34
 800a1a6:	1879      	adds	r1, r7, r1
 800a1a8:	2082      	movs	r0, #130	@ 0x82
 800a1aa:	183a      	adds	r2, r7, r0
 800a1ac:	7810      	ldrb	r0, [r2, #0]
 800a1ae:	2208      	movs	r2, #8
 800a1b0:	18ba      	adds	r2, r7, r2
 800a1b2:	9202      	str	r2, [sp, #8]
 800a1b4:	1dfa      	adds	r2, r7, #7
 800a1b6:	9201      	str	r2, [sp, #4]
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	0033      	movs	r3, r6
 800a1bc:	000a      	movs	r2, r1
 800a1be:	0029      	movs	r1, r5
 800a1c0:	f000 feda 	bl	800af78 <GetFCntDown>
 800a1c4:	0003      	movs	r3, r0
 800a1c6:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a1c8:	2280      	movs	r2, #128	@ 0x80
 800a1ca:	18bb      	adds	r3, r7, r2
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d040      	beq.n	800a254 <ProcessRadioRxDone+0x6a8>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800a1d2:	18bb      	adds	r3, r7, r2
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	2b07      	cmp	r3, #7
 800a1d8:	d126      	bne.n	800a228 <ProcessRadioRxDone+0x67c>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800a1da:	4b32      	ldr	r3, [pc, #200]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 800a1dc:	4a34      	ldr	r2, [pc, #208]	@ (800a2b0 <ProcessRadioRxDone+0x704>)
 800a1de:	2108      	movs	r1, #8
 800a1e0:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800a1e2:	4b30      	ldr	r3, [pc, #192]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 800a1e4:	4a31      	ldr	r2, [pc, #196]	@ (800a2ac <ProcessRadioRxDone+0x700>)
 800a1e6:	589a      	ldr	r2, [r3, r2]
 800a1e8:	23e9      	movs	r3, #233	@ 0xe9
 800a1ea:	005b      	lsls	r3, r3, #1
 800a1ec:	5cd3      	ldrb	r3, [r2, r3]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d128      	bne.n	800a244 <ProcessRadioRxDone+0x698>
 800a1f2:	2374      	movs	r3, #116	@ 0x74
 800a1f4:	18fb      	adds	r3, r7, r3
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	221f      	movs	r2, #31
 800a1fa:	4393      	bics	r3, r2
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	2ba0      	cmp	r3, #160	@ 0xa0
 800a200:	d120      	bne.n	800a244 <ProcessRadioRxDone+0x698>
 800a202:	4b28      	ldr	r3, [pc, #160]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 800a204:	4a29      	ldr	r2, [pc, #164]	@ (800a2ac <ProcessRadioRxDone+0x700>)
 800a206:	589a      	ldr	r2, [r3, r2]
 800a208:	23ec      	movs	r3, #236	@ 0xec
 800a20a:	005b      	lsls	r3, r3, #1
 800a20c:	58d2      	ldr	r2, [r2, r3]
 800a20e:	2134      	movs	r1, #52	@ 0x34
 800a210:	187b      	adds	r3, r7, r1
 800a212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a214:	429a      	cmp	r2, r3
 800a216:	d115      	bne.n	800a244 <ProcessRadioRxDone+0x698>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
 800a218:	4b22      	ldr	r3, [pc, #136]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 800a21a:	4a24      	ldr	r2, [pc, #144]	@ (800a2ac <ProcessRadioRxDone+0x700>)
 800a21c:	589a      	ldr	r2, [r3, r2]
 800a21e:	23e0      	movs	r3, #224	@ 0xe0
 800a220:	005b      	lsls	r3, r3, #1
 800a222:	2101      	movs	r1, #1
 800a224:	54d1      	strb	r1, [r2, r3]
 800a226:	e00d      	b.n	800a244 <ProcessRadioRxDone+0x698>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800a228:	2380      	movs	r3, #128	@ 0x80
 800a22a:	18fb      	adds	r3, r7, r3
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	2b08      	cmp	r3, #8
 800a230:	d104      	bne.n	800a23c <ProcessRadioRxDone+0x690>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800a232:	4b1c      	ldr	r3, [pc, #112]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 800a234:	4a1e      	ldr	r2, [pc, #120]	@ (800a2b0 <ProcessRadioRxDone+0x704>)
 800a236:	210a      	movs	r1, #10
 800a238:	5499      	strb	r1, [r3, r2]
 800a23a:	e003      	b.n	800a244 <ProcessRadioRxDone+0x698>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a23c:	4b19      	ldr	r3, [pc, #100]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 800a23e:	4a1c      	ldr	r2, [pc, #112]	@ (800a2b0 <ProcessRadioRxDone+0x704>)
 800a240:	2101      	movs	r1, #1
 800a242:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a244:	68b9      	ldr	r1, [r7, #8]
 800a246:	4a17      	ldr	r2, [pc, #92]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 800a248:	2386      	movs	r3, #134	@ 0x86
 800a24a:	00db      	lsls	r3, r3, #3
 800a24c:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800a24e:	f7ff fc81 	bl	8009b54 <PrepareRxDoneAbort>
                return;
 800a252:	e1bf      	b.n	800a5d4 <ProcessRadioRxDone+0xa28>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800a254:	1dfb      	adds	r3, r7, #7
 800a256:	781a      	ldrb	r2, [r3, #0]
 800a258:	68bd      	ldr	r5, [r7, #8]
 800a25a:	2680      	movs	r6, #128	@ 0x80
 800a25c:	19bc      	adds	r4, r7, r6
 800a25e:	2384      	movs	r3, #132	@ 0x84
 800a260:	18fb      	adds	r3, r7, r3
 800a262:	6819      	ldr	r1, [r3, #0]
 800a264:	2382      	movs	r3, #130	@ 0x82
 800a266:	18fb      	adds	r3, r7, r3
 800a268:	7818      	ldrb	r0, [r3, #0]
 800a26a:	2334      	movs	r3, #52	@ 0x34
 800a26c:	18fb      	adds	r3, r7, r3
 800a26e:	9300      	str	r3, [sp, #0]
 800a270:	002b      	movs	r3, r5
 800a272:	f006 fcb7 	bl	8010be4 <LoRaMacCryptoUnsecureMessage>
 800a276:	0003      	movs	r3, r0
 800a278:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a27a:	19bb      	adds	r3, r7, r6
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d01e      	beq.n	800a2c0 <ProcessRadioRxDone+0x714>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800a282:	19bb      	adds	r3, r7, r6
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	2b02      	cmp	r3, #2
 800a288:	d104      	bne.n	800a294 <ProcessRadioRxDone+0x6e8>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800a28a:	4b06      	ldr	r3, [pc, #24]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 800a28c:	4a08      	ldr	r2, [pc, #32]	@ (800a2b0 <ProcessRadioRxDone+0x704>)
 800a28e:	210b      	movs	r1, #11
 800a290:	5499      	strb	r1, [r3, r2]
 800a292:	e003      	b.n	800a29c <ProcessRadioRxDone+0x6f0>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800a294:	4b03      	ldr	r3, [pc, #12]	@ (800a2a4 <ProcessRadioRxDone+0x6f8>)
 800a296:	4a06      	ldr	r2, [pc, #24]	@ (800a2b0 <ProcessRadioRxDone+0x704>)
 800a298:	210c      	movs	r1, #12
 800a29a:	5499      	strb	r1, [r3, r2]
                }
                PrepareRxDoneAbort( );
 800a29c:	f7ff fc5a 	bl	8009b54 <PrepareRxDoneAbort>
                return;
 800a2a0:	e198      	b.n	800a5d4 <ProcessRadioRxDone+0xa28>
 800a2a2:	46c0      	nop			@ (mov r8, r8)
 800a2a4:	20000940 	.word	0x20000940
 800a2a8:	0000041c 	.word	0x0000041c
 800a2ac:	00000484 	.word	0x00000484
 800a2b0:	0000041d 	.word	0x0000041d
 800a2b4:	20000b78 	.word	0x20000b78
 800a2b8:	00000434 	.word	0x00000434
 800a2bc:	0000042d 	.word	0x0000042d
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a2c0:	4bc6      	ldr	r3, [pc, #792]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a2c2:	4ac7      	ldr	r2, [pc, #796]	@ (800a5e0 <ProcessRadioRxDone+0xa34>)
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 800a2c8:	4bc4      	ldr	r3, [pc, #784]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a2ca:	2283      	movs	r2, #131	@ 0x83
 800a2cc:	18ba      	adds	r2, r7, r2
 800a2ce:	49c5      	ldr	r1, [pc, #788]	@ (800a5e4 <ProcessRadioRxDone+0xa38>)
 800a2d0:	7812      	ldrb	r2, [r2, #0]
 800a2d2:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800a2d4:	2034      	movs	r0, #52	@ 0x34
 800a2d6:	183b      	adds	r3, r7, r0
 800a2d8:	7b1b      	ldrb	r3, [r3, #12]
 800a2da:	06db      	lsls	r3, r3, #27
 800a2dc:	0fdb      	lsrs	r3, r3, #31
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	0019      	movs	r1, r3
 800a2e2:	4bbe      	ldr	r3, [pc, #760]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a2e4:	4ac0      	ldr	r2, [pc, #768]	@ (800a5e8 <ProcessRadioRxDone+0xa3c>)
 800a2e6:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
 800a2e8:	4bbc      	ldr	r3, [pc, #752]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a2ea:	4ac0      	ldr	r2, [pc, #768]	@ (800a5ec <ProcessRadioRxDone+0xa40>)
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	5099      	str	r1, [r3, r2]
            MacCtx.McpsIndication.BufferSize = 0;
 800a2f0:	4aba      	ldr	r2, [pc, #744]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a2f2:	2385      	movs	r3, #133	@ 0x85
 800a2f4:	00db      	lsls	r3, r3, #3
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a2fa:	68b9      	ldr	r1, [r7, #8]
 800a2fc:	4ab7      	ldr	r2, [pc, #732]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a2fe:	2386      	movs	r3, #134	@ 0x86
 800a300:	00db      	lsls	r3, r3, #3
 800a302:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a304:	183b      	adds	r3, r7, r0
 800a306:	7b1b      	ldrb	r3, [r3, #12]
 800a308:	069b      	lsls	r3, r3, #26
 800a30a:	0fdb      	lsrs	r3, r3, #31
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	1e5a      	subs	r2, r3, #1
 800a310:	4193      	sbcs	r3, r2
 800a312:	b2d9      	uxtb	r1, r3
 800a314:	4bb1      	ldr	r3, [pc, #708]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a316:	4ab6      	ldr	r2, [pc, #728]	@ (800a5f0 <ProcessRadioRxDone+0xa44>)
 800a318:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a31a:	4bb0      	ldr	r3, [pc, #704]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a31c:	4ab5      	ldr	r2, [pc, #724]	@ (800a5f4 <ProcessRadioRxDone+0xa48>)
 800a31e:	2100      	movs	r1, #0
 800a320:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a322:	183b      	adds	r3, r7, r0
 800a324:	7b1b      	ldrb	r3, [r3, #12]
 800a326:	069b      	lsls	r3, r3, #26
 800a328:	0fdb      	lsrs	r3, r3, #31
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	1e5a      	subs	r2, r3, #1
 800a32e:	4193      	sbcs	r3, r2
 800a330:	b2d9      	uxtb	r1, r3
 800a332:	4aaa      	ldr	r2, [pc, #680]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a334:	2388      	movs	r3, #136	@ 0x88
 800a336:	00db      	lsls	r3, r3, #3
 800a338:	54d1      	strb	r1, [r2, r3]

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800a33a:	4ba8      	ldr	r3, [pc, #672]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a33c:	4aae      	ldr	r2, [pc, #696]	@ (800a5f8 <ProcessRadioRxDone+0xa4c>)
 800a33e:	5c9b      	ldrb	r3, [r3, r2]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d004      	beq.n	800a34e <ProcessRadioRxDone+0x7a2>
                ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_2 ) )
 800a344:	4ba5      	ldr	r3, [pc, #660]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a346:	4aac      	ldr	r2, [pc, #688]	@ (800a5f8 <ProcessRadioRxDone+0xa4c>)
 800a348:	5c9b      	ldrb	r3, [r3, r2]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d105      	bne.n	800a35a <ProcessRadioRxDone+0x7ae>
            {
                MacCtx.NvmCtx->AdrAckCounter = 0;
 800a34e:	4ba3      	ldr	r3, [pc, #652]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a350:	4aaa      	ldr	r2, [pc, #680]	@ (800a5fc <ProcessRadioRxDone+0xa50>)
 800a352:	589b      	ldr	r3, [r3, r2]
 800a354:	22f4      	movs	r2, #244	@ 0xf4
 800a356:	2100      	movs	r1, #0
 800a358:	5099      	str	r1, [r3, r2]
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800a35a:	2383      	movs	r3, #131	@ 0x83
 800a35c:	18fb      	adds	r3, r7, r3
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	2b01      	cmp	r3, #1
 800a362:	d104      	bne.n	800a36e <ProcessRadioRxDone+0x7c2>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800a364:	4b9d      	ldr	r3, [pc, #628]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a366:	4aa6      	ldr	r2, [pc, #664]	@ (800a600 <ProcessRadioRxDone+0xa54>)
 800a368:	2102      	movs	r1, #2
 800a36a:	5499      	strb	r1, [r3, r2]
 800a36c:	e02f      	b.n	800a3ce <ProcessRadioRxDone+0x822>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800a36e:	2374      	movs	r3, #116	@ 0x74
 800a370:	18fb      	adds	r3, r7, r3
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	221f      	movs	r2, #31
 800a376:	4393      	bics	r3, r2
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	2ba0      	cmp	r3, #160	@ 0xa0
 800a37c:	d11c      	bne.n	800a3b8 <ProcessRadioRxDone+0x80c>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
 800a37e:	4b97      	ldr	r3, [pc, #604]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a380:	4a9e      	ldr	r2, [pc, #632]	@ (800a5fc <ProcessRadioRxDone+0xa50>)
 800a382:	589a      	ldr	r2, [r3, r2]
 800a384:	23e0      	movs	r3, #224	@ 0xe0
 800a386:	005b      	lsls	r3, r3, #1
 800a388:	2101      	movs	r1, #1
 800a38a:	54d1      	strb	r1, [r2, r3]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800a38c:	4b93      	ldr	r3, [pc, #588]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a38e:	4a9b      	ldr	r2, [pc, #620]	@ (800a5fc <ProcessRadioRxDone+0xa50>)
 800a390:	589a      	ldr	r2, [r3, r2]
 800a392:	23e9      	movs	r3, #233	@ 0xe9
 800a394:	005b      	lsls	r3, r3, #1
 800a396:	5cd3      	ldrb	r3, [r2, r3]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d108      	bne.n	800a3ae <ProcessRadioRxDone+0x802>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 800a39c:	4b8f      	ldr	r3, [pc, #572]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a39e:	4a97      	ldr	r2, [pc, #604]	@ (800a5fc <ProcessRadioRxDone+0xa50>)
 800a3a0:	589a      	ldr	r2, [r3, r2]
 800a3a2:	2334      	movs	r3, #52	@ 0x34
 800a3a4:	18fb      	adds	r3, r7, r3
 800a3a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a3a8:	23ec      	movs	r3, #236	@ 0xec
 800a3aa:	005b      	lsls	r3, r3, #1
 800a3ac:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a3ae:	4b8b      	ldr	r3, [pc, #556]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a3b0:	4a93      	ldr	r2, [pc, #588]	@ (800a600 <ProcessRadioRxDone+0xa54>)
 800a3b2:	2101      	movs	r1, #1
 800a3b4:	5499      	strb	r1, [r3, r2]
 800a3b6:	e00a      	b.n	800a3ce <ProcessRadioRxDone+0x822>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800a3b8:	4b88      	ldr	r3, [pc, #544]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a3ba:	4a90      	ldr	r2, [pc, #576]	@ (800a5fc <ProcessRadioRxDone+0xa50>)
 800a3bc:	589a      	ldr	r2, [r3, r2]
 800a3be:	23e0      	movs	r3, #224	@ 0xe0
 800a3c0:	005b      	lsls	r3, r3, #1
 800a3c2:	2100      	movs	r1, #0
 800a3c4:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a3c6:	4b85      	ldr	r3, [pc, #532]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a3c8:	4a8d      	ldr	r2, [pc, #564]	@ (800a600 <ProcessRadioRxDone+0xa54>)
 800a3ca:	2100      	movs	r1, #0
 800a3cc:	5499      	strb	r1, [r3, r2]
                }
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800a3ce:	4b83      	ldr	r3, [pc, #524]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a3d0:	4a89      	ldr	r2, [pc, #548]	@ (800a5f8 <ProcessRadioRxDone+0xa4c>)
 800a3d2:	5c98      	ldrb	r0, [r3, r2]
 800a3d4:	4b81      	ldr	r3, [pc, #516]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a3d6:	4a8b      	ldr	r2, [pc, #556]	@ (800a604 <ProcessRadioRxDone+0xa58>)
 800a3d8:	5c9a      	ldrb	r2, [r3, r2]
 800a3da:	2334      	movs	r3, #52	@ 0x34
 800a3dc:	18fb      	adds	r3, r7, r3
 800a3de:	7b1b      	ldrb	r3, [r3, #12]
 800a3e0:	1c19      	adds	r1, r3, #0
 800a3e2:	f002 f947 	bl	800c674 <RemoveMacCommands>

            switch( fType )
 800a3e6:	1dbb      	adds	r3, r7, #6
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	2b03      	cmp	r3, #3
 800a3ec:	d100      	bne.n	800a3f0 <ProcessRadioRxDone+0x844>
 800a3ee:	e073      	b.n	800a4d8 <ProcessRadioRxDone+0x92c>
 800a3f0:	dd00      	ble.n	800a3f4 <ProcessRadioRxDone+0x848>
 800a3f2:	e089      	b.n	800a508 <ProcessRadioRxDone+0x95c>
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d055      	beq.n	800a4a4 <ProcessRadioRxDone+0x8f8>
 800a3f8:	dd00      	ble.n	800a3fc <ProcessRadioRxDone+0x850>
 800a3fa:	e085      	b.n	800a508 <ProcessRadioRxDone+0x95c>
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d002      	beq.n	800a406 <ProcessRadioRxDone+0x85a>
 800a400:	2b01      	cmp	r3, #1
 800a402:	d030      	beq.n	800a466 <ProcessRadioRxDone+0x8ba>
 800a404:	e080      	b.n	800a508 <ProcessRadioRxDone+0x95c>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800a406:	2034      	movs	r0, #52	@ 0x34
 800a408:	183b      	adds	r3, r7, r0
 800a40a:	7b1b      	ldrb	r3, [r3, #12]
 800a40c:	071b      	lsls	r3, r3, #28
 800a40e:	0f1b      	lsrs	r3, r3, #28
 800a410:	b2db      	uxtb	r3, r3
 800a412:	001c      	movs	r4, r3
 800a414:	4b71      	ldr	r3, [pc, #452]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a416:	4a78      	ldr	r2, [pc, #480]	@ (800a5f8 <ProcessRadioRxDone+0xa4c>)
 800a418:	5c9b      	ldrb	r3, [r3, r2]
 800a41a:	2277      	movs	r2, #119	@ 0x77
 800a41c:	18ba      	adds	r2, r7, r2
 800a41e:	2100      	movs	r1, #0
 800a420:	5651      	ldrsb	r1, [r2, r1]
 800a422:	0005      	movs	r5, r0
 800a424:	183a      	adds	r2, r7, r0
 800a426:	3210      	adds	r2, #16
 800a428:	0010      	movs	r0, r2
 800a42a:	9300      	str	r3, [sp, #0]
 800a42c:	000b      	movs	r3, r1
 800a42e:	0022      	movs	r2, r4
 800a430:	2100      	movs	r1, #0
 800a432:	f000 ffd5 	bl	800b3e0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a436:	0028      	movs	r0, r5
 800a438:	183b      	adds	r3, r7, r0
 800a43a:	2220      	movs	r2, #32
 800a43c:	5c99      	ldrb	r1, [r3, r2]
 800a43e:	4b67      	ldr	r3, [pc, #412]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a440:	4a71      	ldr	r2, [pc, #452]	@ (800a608 <ProcessRadioRxDone+0xa5c>)
 800a442:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a444:	183b      	adds	r3, r7, r0
 800a446:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a448:	4b64      	ldr	r3, [pc, #400]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a44a:	4968      	ldr	r1, [pc, #416]	@ (800a5ec <ProcessRadioRxDone+0xa40>)
 800a44c:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800a44e:	183b      	adds	r3, r7, r0
 800a450:	2228      	movs	r2, #40	@ 0x28
 800a452:	5c99      	ldrb	r1, [r3, r2]
 800a454:	4a61      	ldr	r2, [pc, #388]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a456:	2385      	movs	r3, #133	@ 0x85
 800a458:	00db      	lsls	r3, r3, #3
 800a45a:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800a45c:	4b5f      	ldr	r3, [pc, #380]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a45e:	4a6b      	ldr	r2, [pc, #428]	@ (800a60c <ProcessRadioRxDone+0xa60>)
 800a460:	2101      	movs	r1, #1
 800a462:	5499      	strb	r1, [r3, r2]
                    break;
 800a464:	e057      	b.n	800a516 <ProcessRadioRxDone+0x96a>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800a466:	2034      	movs	r0, #52	@ 0x34
 800a468:	183b      	adds	r3, r7, r0
 800a46a:	7b1b      	ldrb	r3, [r3, #12]
 800a46c:	071b      	lsls	r3, r3, #28
 800a46e:	0f1b      	lsrs	r3, r3, #28
 800a470:	b2db      	uxtb	r3, r3
 800a472:	001c      	movs	r4, r3
 800a474:	4b59      	ldr	r3, [pc, #356]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a476:	4a60      	ldr	r2, [pc, #384]	@ (800a5f8 <ProcessRadioRxDone+0xa4c>)
 800a478:	5c9b      	ldrb	r3, [r3, r2]
 800a47a:	2277      	movs	r2, #119	@ 0x77
 800a47c:	18ba      	adds	r2, r7, r2
 800a47e:	2100      	movs	r1, #0
 800a480:	5651      	ldrsb	r1, [r2, r1]
 800a482:	0005      	movs	r5, r0
 800a484:	183a      	adds	r2, r7, r0
 800a486:	3210      	adds	r2, #16
 800a488:	0010      	movs	r0, r2
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	000b      	movs	r3, r1
 800a48e:	0022      	movs	r2, r4
 800a490:	2100      	movs	r1, #0
 800a492:	f000 ffa5 	bl	800b3e0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a496:	197b      	adds	r3, r7, r5
 800a498:	2220      	movs	r2, #32
 800a49a:	5c99      	ldrb	r1, [r3, r2]
 800a49c:	4b4f      	ldr	r3, [pc, #316]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a49e:	4a5a      	ldr	r2, [pc, #360]	@ (800a608 <ProcessRadioRxDone+0xa5c>)
 800a4a0:	5499      	strb	r1, [r3, r2]
                    break;
 800a4a2:	e038      	b.n	800a516 <ProcessRadioRxDone+0x96a>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800a4a4:	2434      	movs	r4, #52	@ 0x34
 800a4a6:	193b      	adds	r3, r7, r4
 800a4a8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a4aa:	193b      	adds	r3, r7, r4
 800a4ac:	2228      	movs	r2, #40	@ 0x28
 800a4ae:	5c99      	ldrb	r1, [r3, r2]
 800a4b0:	4b4a      	ldr	r3, [pc, #296]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a4b2:	4a51      	ldr	r2, [pc, #324]	@ (800a5f8 <ProcessRadioRxDone+0xa4c>)
 800a4b4:	5c9b      	ldrb	r3, [r3, r2]
 800a4b6:	2277      	movs	r2, #119	@ 0x77
 800a4b8:	18ba      	adds	r2, r7, r2
 800a4ba:	7812      	ldrb	r2, [r2, #0]
 800a4bc:	b252      	sxtb	r2, r2
 800a4be:	9300      	str	r3, [sp, #0]
 800a4c0:	0013      	movs	r3, r2
 800a4c2:	000a      	movs	r2, r1
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	f000 ff8b 	bl	800b3e0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a4ca:	193b      	adds	r3, r7, r4
 800a4cc:	2220      	movs	r2, #32
 800a4ce:	5c99      	ldrb	r1, [r3, r2]
 800a4d0:	4b42      	ldr	r3, [pc, #264]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a4d2:	4a4d      	ldr	r2, [pc, #308]	@ (800a608 <ProcessRadioRxDone+0xa5c>)
 800a4d4:	5499      	strb	r1, [r3, r2]
                    break;
 800a4d6:	e01e      	b.n	800a516 <ProcessRadioRxDone+0x96a>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a4d8:	2034      	movs	r0, #52	@ 0x34
 800a4da:	183b      	adds	r3, r7, r0
 800a4dc:	2220      	movs	r2, #32
 800a4de:	5c99      	ldrb	r1, [r3, r2]
 800a4e0:	4b3e      	ldr	r3, [pc, #248]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a4e2:	4a49      	ldr	r2, [pc, #292]	@ (800a608 <ProcessRadioRxDone+0xa5c>)
 800a4e4:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a4e6:	183b      	adds	r3, r7, r0
 800a4e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a4ea:	4b3c      	ldr	r3, [pc, #240]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a4ec:	493f      	ldr	r1, [pc, #252]	@ (800a5ec <ProcessRadioRxDone+0xa40>)
 800a4ee:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800a4f0:	183b      	adds	r3, r7, r0
 800a4f2:	2228      	movs	r2, #40	@ 0x28
 800a4f4:	5c99      	ldrb	r1, [r3, r2]
 800a4f6:	4a39      	ldr	r2, [pc, #228]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a4f8:	2385      	movs	r3, #133	@ 0x85
 800a4fa:	00db      	lsls	r3, r3, #3
 800a4fc:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800a4fe:	4b37      	ldr	r3, [pc, #220]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a500:	4a42      	ldr	r2, [pc, #264]	@ (800a60c <ProcessRadioRxDone+0xa60>)
 800a502:	2101      	movs	r1, #1
 800a504:	5499      	strb	r1, [r3, r2]
                    break;
 800a506:	e006      	b.n	800a516 <ProcessRadioRxDone+0x96a>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a508:	4b34      	ldr	r3, [pc, #208]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a50a:	4a35      	ldr	r2, [pc, #212]	@ (800a5e0 <ProcessRadioRxDone+0xa34>)
 800a50c:	2101      	movs	r1, #1
 800a50e:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 800a510:	f7ff fb20 	bl	8009b54 <PrepareRxDoneAbort>
                    break;
 800a514:	46c0      	nop			@ (mov r8, r8)
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a516:	4b31      	ldr	r3, [pc, #196]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a518:	4a3d      	ldr	r2, [pc, #244]	@ (800a610 <ProcessRadioRxDone+0xa64>)
 800a51a:	5c99      	ldrb	r1, [r3, r2]
 800a51c:	2002      	movs	r0, #2
 800a51e:	4301      	orrs	r1, r0
 800a520:	5499      	strb	r1, [r3, r2]

            break;
 800a522:	e036      	b.n	800a592 <ProcessRadioRxDone+0x9e6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800a524:	2476      	movs	r4, #118	@ 0x76
 800a526:	193b      	adds	r3, r7, r4
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a52c:	18d1      	adds	r1, r2, r3
 800a52e:	193b      	adds	r3, r7, r4
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	b29b      	uxth	r3, r3
 800a534:	257a      	movs	r5, #122	@ 0x7a
 800a536:	197a      	adds	r2, r7, r5
 800a538:	8812      	ldrh	r2, [r2, #0]
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	b29a      	uxth	r2, r3
 800a53e:	4b35      	ldr	r3, [pc, #212]	@ (800a614 <ProcessRadioRxDone+0xa68>)
 800a540:	0018      	movs	r0, r3
 800a542:	f00b f819 	bl	8015578 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800a546:	4b25      	ldr	r3, [pc, #148]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a548:	4a2d      	ldr	r2, [pc, #180]	@ (800a600 <ProcessRadioRxDone+0xa54>)
 800a54a:	2103      	movs	r1, #3
 800a54c:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a54e:	4b23      	ldr	r3, [pc, #140]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a550:	4a23      	ldr	r2, [pc, #140]	@ (800a5e0 <ProcessRadioRxDone+0xa34>)
 800a552:	2100      	movs	r1, #0
 800a554:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800a556:	4b21      	ldr	r3, [pc, #132]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a558:	4924      	ldr	r1, [pc, #144]	@ (800a5ec <ProcessRadioRxDone+0xa40>)
 800a55a:	4a2e      	ldr	r2, [pc, #184]	@ (800a614 <ProcessRadioRxDone+0xa68>)
 800a55c:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800a55e:	197b      	adds	r3, r7, r5
 800a560:	881b      	ldrh	r3, [r3, #0]
 800a562:	b2da      	uxtb	r2, r3
 800a564:	193b      	adds	r3, r7, r4
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	b2d9      	uxtb	r1, r3
 800a56c:	4a1b      	ldr	r2, [pc, #108]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a56e:	2385      	movs	r3, #133	@ 0x85
 800a570:	00db      	lsls	r3, r3, #3
 800a572:	54d1      	strb	r1, [r2, r3]

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a574:	4b19      	ldr	r3, [pc, #100]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a576:	4a26      	ldr	r2, [pc, #152]	@ (800a610 <ProcessRadioRxDone+0xa64>)
 800a578:	5c99      	ldrb	r1, [r3, r2]
 800a57a:	2002      	movs	r0, #2
 800a57c:	4301      	orrs	r1, r0
 800a57e:	5499      	strb	r1, [r3, r2]
            break;
 800a580:	e007      	b.n	800a592 <ProcessRadioRxDone+0x9e6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a582:	4b16      	ldr	r3, [pc, #88]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a584:	4a16      	ldr	r2, [pc, #88]	@ (800a5e0 <ProcessRadioRxDone+0xa34>)
 800a586:	2101      	movs	r1, #1
 800a588:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 800a58a:	f7ff fae3 	bl	8009b54 <PrepareRxDoneAbort>
            break;
 800a58e:	e000      	b.n	800a592 <ProcessRadioRxDone+0x9e6>
            break;
 800a590:	46c0      	nop			@ (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800a592:	4b12      	ldr	r3, [pc, #72]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a594:	4a20      	ldr	r2, [pc, #128]	@ (800a618 <ProcessRadioRxDone+0xa6c>)
 800a596:	5c9b      	ldrb	r3, [r3, r2]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d009      	beq.n	800a5b0 <ProcessRadioRxDone+0xa04>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800a59c:	4a0f      	ldr	r2, [pc, #60]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a59e:	2388      	movs	r3, #136	@ 0x88
 800a5a0:	00db      	lsls	r3, r3, #3
 800a5a2:	5cd3      	ldrb	r3, [r2, r3]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00d      	beq.n	800a5c4 <ProcessRadioRxDone+0xa18>
        {
            OnAckTimeoutTimerEvent( NULL );
 800a5a8:	2000      	movs	r0, #0
 800a5aa:	f000 fca3 	bl	800aef4 <OnAckTimeoutTimerEvent>
 800a5ae:	e009      	b.n	800a5c4 <ProcessRadioRxDone+0xa18>
        }
    }
    else
    {
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800a5b0:	4b0a      	ldr	r3, [pc, #40]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a5b2:	4a12      	ldr	r2, [pc, #72]	@ (800a5fc <ProcessRadioRxDone+0xa50>)
 800a5b4:	589b      	ldr	r3, [r3, r2]
 800a5b6:	22f0      	movs	r2, #240	@ 0xf0
 800a5b8:	5c9b      	ldrb	r3, [r3, r2]
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	d102      	bne.n	800a5c4 <ProcessRadioRxDone+0xa18>
        {
            OnAckTimeoutTimerEvent( NULL );
 800a5be:	2000      	movs	r0, #0
 800a5c0:	f000 fc98 	bl	800aef4 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a5c4:	4b05      	ldr	r3, [pc, #20]	@ (800a5dc <ProcessRadioRxDone+0xa30>)
 800a5c6:	4a12      	ldr	r2, [pc, #72]	@ (800a610 <ProcessRadioRxDone+0xa64>)
 800a5c8:	5c99      	ldrb	r1, [r3, r2]
 800a5ca:	2020      	movs	r0, #32
 800a5cc:	4301      	orrs	r1, r0
 800a5ce:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800a5d0:	f7ff f9f8 	bl	80099c4 <UpdateRxSlotIdleState>
}
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	b023      	add	sp, #140	@ 0x8c
 800a5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5da:	46c0      	nop			@ (mov r8, r8)
 800a5dc:	20000940 	.word	0x20000940
 800a5e0:	0000041d 	.word	0x0000041d
 800a5e4:	0000041e 	.word	0x0000041e
 800a5e8:	00000421 	.word	0x00000421
 800a5ec:	00000424 	.word	0x00000424
 800a5f0:	0000042e 	.word	0x0000042e
 800a5f4:	0000043d 	.word	0x0000043d
 800a5f8:	0000042d 	.word	0x0000042d
 800a5fc:	00000484 	.word	0x00000484
 800a600:	0000041c 	.word	0x0000041c
 800a604:	0000043c 	.word	0x0000043c
 800a608:	0000041f 	.word	0x0000041f
 800a60c:	00000429 	.word	0x00000429
 800a610:	00000481 	.word	0x00000481
 800a614:	20000b78 	.word	0x20000b78
 800a618:	00000414 	.word	0x00000414

0800a61c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800a620:	4b12      	ldr	r3, [pc, #72]	@ (800a66c <ProcessRadioTxTimeout+0x50>)
 800a622:	4a13      	ldr	r2, [pc, #76]	@ (800a670 <ProcessRadioTxTimeout+0x54>)
 800a624:	589b      	ldr	r3, [r3, r2]
 800a626:	22f0      	movs	r2, #240	@ 0xf0
 800a628:	5c9b      	ldrb	r3, [r3, r2]
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d002      	beq.n	800a634 <ProcessRadioTxTimeout+0x18>
    {
        Radio.Sleep( );
 800a62e:	4b11      	ldr	r3, [pc, #68]	@ (800a674 <ProcessRadioTxTimeout+0x58>)
 800a630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a632:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800a634:	f7ff f9c6 	bl	80099c4 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800a638:	4b0c      	ldr	r3, [pc, #48]	@ (800a66c <ProcessRadioTxTimeout+0x50>)
 800a63a:	4a0f      	ldr	r2, [pc, #60]	@ (800a678 <ProcessRadioTxTimeout+0x5c>)
 800a63c:	2102      	movs	r1, #2
 800a63e:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800a640:	2002      	movs	r0, #2
 800a642:	f005 fa27 	bl	800fa94 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800a646:	4b09      	ldr	r3, [pc, #36]	@ (800a66c <ProcessRadioTxTimeout+0x50>)
 800a648:	4a0c      	ldr	r2, [pc, #48]	@ (800a67c <ProcessRadioTxTimeout+0x60>)
 800a64a:	5c9b      	ldrb	r3, [r3, r2]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d003      	beq.n	800a658 <ProcessRadioTxTimeout+0x3c>
    {
        MacCtx.AckTimeoutRetry = true;
 800a650:	4b06      	ldr	r3, [pc, #24]	@ (800a66c <ProcessRadioTxTimeout+0x50>)
 800a652:	4a0b      	ldr	r2, [pc, #44]	@ (800a680 <ProcessRadioTxTimeout+0x64>)
 800a654:	2101      	movs	r1, #1
 800a656:	5499      	strb	r1, [r3, r2]
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a658:	4b04      	ldr	r3, [pc, #16]	@ (800a66c <ProcessRadioTxTimeout+0x50>)
 800a65a:	4a0a      	ldr	r2, [pc, #40]	@ (800a684 <ProcessRadioTxTimeout+0x68>)
 800a65c:	5c99      	ldrb	r1, [r3, r2]
 800a65e:	2020      	movs	r0, #32
 800a660:	4301      	orrs	r1, r0
 800a662:	5499      	strb	r1, [r3, r2]
}
 800a664:	46c0      	nop			@ (mov r8, r8)
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	46c0      	nop			@ (mov r8, r8)
 800a66c:	20000940 	.word	0x20000940
 800a670:	00000484 	.word	0x00000484
 800a674:	0801ac88 	.word	0x0801ac88
 800a678:	0000043d 	.word	0x0000043d
 800a67c:	00000414 	.word	0x00000414
 800a680:	00000413 	.word	0x00000413
 800a684:	00000481 	.word	0x00000481

0800a688 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	0002      	movs	r2, r0
 800a690:	1dfb      	adds	r3, r7, #7
 800a692:	701a      	strb	r2, [r3, #0]
 800a694:	1dbb      	adds	r3, r7, #6
 800a696:	1c0a      	adds	r2, r1, #0
 800a698:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
 800a69a:	230f      	movs	r3, #15
 800a69c:	18fb      	adds	r3, r7, r3
 800a69e:	2200      	movs	r2, #0
 800a6a0:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800a6a2:	4b3d      	ldr	r3, [pc, #244]	@ (800a798 <HandleRadioRxErrorTimeout+0x110>)
 800a6a4:	4a3d      	ldr	r2, [pc, #244]	@ (800a79c <HandleRadioRxErrorTimeout+0x114>)
 800a6a6:	589b      	ldr	r3, [r3, r2]
 800a6a8:	22f0      	movs	r2, #240	@ 0xf0
 800a6aa:	5c9b      	ldrb	r3, [r3, r2]
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	d002      	beq.n	800a6b6 <HandleRadioRxErrorTimeout+0x2e>
    {
        Radio.Sleep( );
 800a6b0:	4b3b      	ldr	r3, [pc, #236]	@ (800a7a0 <HandleRadioRxErrorTimeout+0x118>)
 800a6b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6b4:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800a6b6:	f004 fd61 	bl	800f17c <LoRaMacClassBIsBeaconExpected>
 800a6ba:	1e03      	subs	r3, r0, #0
 800a6bc:	d009      	beq.n	800a6d2 <HandleRadioRxErrorTimeout+0x4a>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800a6be:	2002      	movs	r0, #2
 800a6c0:	f004 fd14 	bl	800f0ec <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	f004 fd35 	bl	800f134 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800a6ca:	230f      	movs	r3, #15
 800a6cc:	18fb      	adds	r3, r7, r3
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800a6d2:	4b31      	ldr	r3, [pc, #196]	@ (800a798 <HandleRadioRxErrorTimeout+0x110>)
 800a6d4:	4a31      	ldr	r2, [pc, #196]	@ (800a79c <HandleRadioRxErrorTimeout+0x114>)
 800a6d6:	589b      	ldr	r3, [r3, r2]
 800a6d8:	22f0      	movs	r2, #240	@ 0xf0
 800a6da:	5c9b      	ldrb	r3, [r3, r2]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d11b      	bne.n	800a718 <HandleRadioRxErrorTimeout+0x90>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a6e0:	f004 fd52 	bl	800f188 <LoRaMacClassBIsPingExpected>
 800a6e4:	1e03      	subs	r3, r0, #0
 800a6e6:	d009      	beq.n	800a6fc <HandleRadioRxErrorTimeout+0x74>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a6e8:	2000      	movs	r0, #0
 800a6ea:	f004 fd09 	bl	800f100 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800a6ee:	2000      	movs	r0, #0
 800a6f0:	f004 fd28 	bl	800f144 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800a6f4:	230f      	movs	r3, #15
 800a6f6:	18fb      	adds	r3, r7, r3
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a6fc:	f004 fd4a 	bl	800f194 <LoRaMacClassBIsMulticastExpected>
 800a700:	1e03      	subs	r3, r0, #0
 800a702:	d009      	beq.n	800a718 <HandleRadioRxErrorTimeout+0x90>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a704:	2000      	movs	r0, #0
 800a706:	f004 fd05 	bl	800f114 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a70a:	2000      	movs	r0, #0
 800a70c:	f004 fd22 	bl	800f154 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800a710:	230f      	movs	r3, #15
 800a712:	18fb      	adds	r3, r7, r3
 800a714:	2201      	movs	r2, #1
 800a716:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
 800a718:	230f      	movs	r3, #15
 800a71a:	18fb      	adds	r3, r7, r3
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	2201      	movs	r2, #1
 800a720:	4053      	eors	r3, r2
 800a722:	b2db      	uxtb	r3, r3
 800a724:	2b00      	cmp	r3, #0
 800a726:	d031      	beq.n	800a78c <HandleRadioRxErrorTimeout+0x104>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800a728:	4a1b      	ldr	r2, [pc, #108]	@ (800a798 <HandleRadioRxErrorTimeout+0x110>)
 800a72a:	2390      	movs	r3, #144	@ 0x90
 800a72c:	00db      	lsls	r3, r3, #3
 800a72e:	5cd3      	ldrb	r3, [r2, r3]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d10f      	bne.n	800a754 <HandleRadioRxErrorTimeout+0xcc>
        {
            if( MacCtx.NodeAckRequested == true )
 800a734:	4b18      	ldr	r3, [pc, #96]	@ (800a798 <HandleRadioRxErrorTimeout+0x110>)
 800a736:	4a1b      	ldr	r2, [pc, #108]	@ (800a7a4 <HandleRadioRxErrorTimeout+0x11c>)
 800a738:	5c9b      	ldrb	r3, [r3, r2]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d004      	beq.n	800a748 <HandleRadioRxErrorTimeout+0xc0>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800a73e:	4b16      	ldr	r3, [pc, #88]	@ (800a798 <HandleRadioRxErrorTimeout+0x110>)
 800a740:	1dfa      	adds	r2, r7, #7
 800a742:	4919      	ldr	r1, [pc, #100]	@ (800a7a8 <HandleRadioRxErrorTimeout+0x120>)
 800a744:	7812      	ldrb	r2, [r2, #0]
 800a746:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800a748:	1dfb      	adds	r3, r7, #7
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	0018      	movs	r0, r3
 800a74e:	f005 f9a1 	bl	800fa94 <LoRaMacConfirmQueueSetStatusCmn>
 800a752:	e01b      	b.n	800a78c <HandleRadioRxErrorTimeout+0x104>
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800a754:	4b10      	ldr	r3, [pc, #64]	@ (800a798 <HandleRadioRxErrorTimeout+0x110>)
 800a756:	4a13      	ldr	r2, [pc, #76]	@ (800a7a4 <HandleRadioRxErrorTimeout+0x11c>)
 800a758:	5c9b      	ldrb	r3, [r3, r2]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d004      	beq.n	800a768 <HandleRadioRxErrorTimeout+0xe0>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800a75e:	4b0e      	ldr	r3, [pc, #56]	@ (800a798 <HandleRadioRxErrorTimeout+0x110>)
 800a760:	1dba      	adds	r2, r7, #6
 800a762:	4911      	ldr	r1, [pc, #68]	@ (800a7a8 <HandleRadioRxErrorTimeout+0x120>)
 800a764:	7812      	ldrb	r2, [r2, #0]
 800a766:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800a768:	1dbb      	adds	r3, r7, #6
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	0018      	movs	r0, r3
 800a76e:	f005 f991 	bl	800fa94 <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800a772:	4b09      	ldr	r3, [pc, #36]	@ (800a798 <HandleRadioRxErrorTimeout+0x110>)
 800a774:	4a09      	ldr	r2, [pc, #36]	@ (800a79c <HandleRadioRxErrorTimeout+0x114>)
 800a776:	589b      	ldr	r3, [r3, r2]
 800a778:	22f0      	movs	r2, #240	@ 0xf0
 800a77a:	5c9b      	ldrb	r3, [r3, r2]
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d005      	beq.n	800a78c <HandleRadioRxErrorTimeout+0x104>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800a780:	4b05      	ldr	r3, [pc, #20]	@ (800a798 <HandleRadioRxErrorTimeout+0x110>)
 800a782:	4a0a      	ldr	r2, [pc, #40]	@ (800a7ac <HandleRadioRxErrorTimeout+0x124>)
 800a784:	5c99      	ldrb	r1, [r3, r2]
 800a786:	2020      	movs	r0, #32
 800a788:	4301      	orrs	r1, r0
 800a78a:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    UpdateRxSlotIdleState( );
 800a78c:	f7ff f91a 	bl	80099c4 <UpdateRxSlotIdleState>
}
 800a790:	46c0      	nop			@ (mov r8, r8)
 800a792:	46bd      	mov	sp, r7
 800a794:	b004      	add	sp, #16
 800a796:	bd80      	pop	{r7, pc}
 800a798:	20000940 	.word	0x20000940
 800a79c:	00000484 	.word	0x00000484
 800a7a0:	0801ac88 	.word	0x0801ac88
 800a7a4:	00000414 	.word	0x00000414
 800a7a8:	0000043d 	.word	0x0000043d
 800a7ac:	00000481 	.word	0x00000481

0800a7b0 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800a7b4:	2106      	movs	r1, #6
 800a7b6:	2005      	movs	r0, #5
 800a7b8:	f7ff ff66 	bl	800a688 <HandleRadioRxErrorTimeout>
}
 800a7bc:	46c0      	nop			@ (mov r8, r8)
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800a7c6:	2104      	movs	r1, #4
 800a7c8:	2003      	movs	r0, #3
 800a7ca:	f7ff ff5d 	bl	800a688 <HandleRadioRxErrorTimeout>
}
 800a7ce:	46c0      	nop			@ (mov r8, r8)
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7da:	f3ef 8310 	mrs	r3, PRIMASK
 800a7de:	607b      	str	r3, [r7, #4]
  return(result);
 800a7e0:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800a7e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7e4:	b672      	cpsid	i
}
 800a7e6:	46c0      	nop			@ (mov r8, r8)
    events = LoRaMacRadioEvents;
 800a7e8:	4b1f      	ldr	r3, [pc, #124]	@ (800a868 <LoRaMacHandleIrqEvents+0x94>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800a7ee:	4b1e      	ldr	r3, [pc, #120]	@ (800a868 <LoRaMacHandleIrqEvents+0x94>)
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	601a      	str	r2, [r3, #0]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	f383 8810 	msr	PRIMASK, r3
}
 800a7fe:	46c0      	nop			@ (mov r8, r8)
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d02c      	beq.n	800a860 <LoRaMacHandleIrqEvents+0x8c>
    {
        if( events.Events.TxDone == 1 )
 800a806:	003b      	movs	r3, r7
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	2210      	movs	r2, #16
 800a80c:	4013      	ands	r3, r2
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	2b00      	cmp	r3, #0
 800a812:	d001      	beq.n	800a818 <LoRaMacHandleIrqEvents+0x44>
        {
            ProcessRadioTxDone( );
 800a814:	f7ff f8f2 	bl	80099fc <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800a818:	003b      	movs	r3, r7
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	2208      	movs	r2, #8
 800a81e:	4013      	ands	r3, r2
 800a820:	b2db      	uxtb	r3, r3
 800a822:	2b00      	cmp	r3, #0
 800a824:	d001      	beq.n	800a82a <LoRaMacHandleIrqEvents+0x56>
        {
            ProcessRadioRxDone( );
 800a826:	f7ff f9c1 	bl	8009bac <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800a82a:	003b      	movs	r3, r7
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	2204      	movs	r2, #4
 800a830:	4013      	ands	r3, r2
 800a832:	b2db      	uxtb	r3, r3
 800a834:	2b00      	cmp	r3, #0
 800a836:	d001      	beq.n	800a83c <LoRaMacHandleIrqEvents+0x68>
        {
            ProcessRadioTxTimeout( );
 800a838:	f7ff fef0 	bl	800a61c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800a83c:	003b      	movs	r3, r7
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	2202      	movs	r2, #2
 800a842:	4013      	ands	r3, r2
 800a844:	b2db      	uxtb	r3, r3
 800a846:	2b00      	cmp	r3, #0
 800a848:	d001      	beq.n	800a84e <LoRaMacHandleIrqEvents+0x7a>
        {
            ProcessRadioRxError( );
 800a84a:	f7ff ffb1 	bl	800a7b0 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800a84e:	003b      	movs	r3, r7
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	2201      	movs	r2, #1
 800a854:	4013      	ands	r3, r2
 800a856:	b2db      	uxtb	r3, r3
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d001      	beq.n	800a860 <LoRaMacHandleIrqEvents+0x8c>
        {
            ProcessRadioRxTimeout( );
 800a85c:	f7ff ffb1 	bl	800a7c2 <ProcessRadioRxTimeout>
        }
    }
}
 800a860:	46c0      	nop			@ (mov r8, r8)
 800a862:	46bd      	mov	sp, r7
 800a864:	b004      	add	sp, #16
 800a866:	bd80      	pop	{r7, pc}
 800a868:	20000fdc 	.word	0x20000fdc

0800a86c <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800a870:	4a08      	ldr	r2, [pc, #32]	@ (800a894 <LoRaMacIsBusy+0x28>)
 800a872:	23d0      	movs	r3, #208	@ 0xd0
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	58d3      	ldr	r3, [r2, r3]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d106      	bne.n	800a88a <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800a87c:	4b05      	ldr	r3, [pc, #20]	@ (800a894 <LoRaMacIsBusy+0x28>)
 800a87e:	4a06      	ldr	r2, [pc, #24]	@ (800a898 <LoRaMacIsBusy+0x2c>)
 800a880:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800a882:	2b01      	cmp	r3, #1
 800a884:	d101      	bne.n	800a88a <LoRaMacIsBusy+0x1e>
    {
        return false;
 800a886:	2300      	movs	r3, #0
 800a888:	e000      	b.n	800a88c <LoRaMacIsBusy+0x20>
    }
    return true;
 800a88a:	2301      	movs	r3, #1
}
 800a88c:	0018      	movs	r0, r3
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	46c0      	nop			@ (mov r8, r8)
 800a894:	20000940 	.word	0x20000940
 800a898:	00000482 	.word	0x00000482

0800a89c <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	0002      	movs	r2, r0
 800a8a4:	1dfb      	adds	r3, r7, #7
 800a8a6:	701a      	strb	r2, [r3, #0]
    MacCtx.AllowRequests = requestState;
 800a8a8:	4b04      	ldr	r3, [pc, #16]	@ (800a8bc <LoRaMacEnableRequests+0x20>)
 800a8aa:	1dfa      	adds	r2, r7, #7
 800a8ac:	4904      	ldr	r1, [pc, #16]	@ (800a8c0 <LoRaMacEnableRequests+0x24>)
 800a8ae:	7812      	ldrb	r2, [r2, #0]
 800a8b0:	545a      	strb	r2, [r3, r1]
}
 800a8b2:	46c0      	nop			@ (mov r8, r8)
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	b002      	add	sp, #8
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	46c0      	nop			@ (mov r8, r8)
 800a8bc:	20000940 	.word	0x20000940
 800a8c0:	00000482 	.word	0x00000482

0800a8c4 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800a8ca:	1d3b      	adds	r3, r7, #4
 800a8cc:	4a2c      	ldr	r2, [pc, #176]	@ (800a980 <LoRaMacHandleRequestEvents+0xbc>)
 800a8ce:	492d      	ldr	r1, [pc, #180]	@ (800a984 <LoRaMacHandleRequestEvents+0xc0>)
 800a8d0:	5c52      	ldrb	r2, [r2, r1]
 800a8d2:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800a8d4:	4a2a      	ldr	r2, [pc, #168]	@ (800a980 <LoRaMacHandleRequestEvents+0xbc>)
 800a8d6:	23d0      	movs	r3, #208	@ 0xd0
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	58d3      	ldr	r3, [r2, r3]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d14a      	bne.n	800a976 <LoRaMacHandleRequestEvents+0xb2>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a8e0:	4b27      	ldr	r3, [pc, #156]	@ (800a980 <LoRaMacHandleRequestEvents+0xbc>)
 800a8e2:	4a28      	ldr	r2, [pc, #160]	@ (800a984 <LoRaMacHandleRequestEvents+0xc0>)
 800a8e4:	5c9b      	ldrb	r3, [r3, r2]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	4013      	ands	r3, r2
 800a8ea:	b2db      	uxtb	r3, r3
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d005      	beq.n	800a8fc <LoRaMacHandleRequestEvents+0x38>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800a8f0:	4b23      	ldr	r3, [pc, #140]	@ (800a980 <LoRaMacHandleRequestEvents+0xbc>)
 800a8f2:	4a24      	ldr	r2, [pc, #144]	@ (800a984 <LoRaMacHandleRequestEvents+0xc0>)
 800a8f4:	5c99      	ldrb	r1, [r3, r2]
 800a8f6:	2001      	movs	r0, #1
 800a8f8:	4381      	bics	r1, r0
 800a8fa:	5499      	strb	r1, [r3, r2]
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a8fc:	4b20      	ldr	r3, [pc, #128]	@ (800a980 <LoRaMacHandleRequestEvents+0xbc>)
 800a8fe:	4a21      	ldr	r2, [pc, #132]	@ (800a984 <LoRaMacHandleRequestEvents+0xc0>)
 800a900:	5c9b      	ldrb	r3, [r3, r2]
 800a902:	2204      	movs	r2, #4
 800a904:	4013      	ands	r3, r2
 800a906:	b2db      	uxtb	r3, r3
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d005      	beq.n	800a918 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800a90c:	4b1c      	ldr	r3, [pc, #112]	@ (800a980 <LoRaMacHandleRequestEvents+0xbc>)
 800a90e:	4a1d      	ldr	r2, [pc, #116]	@ (800a984 <LoRaMacHandleRequestEvents+0xc0>)
 800a910:	5c99      	ldrb	r1, [r3, r2]
 800a912:	2004      	movs	r0, #4
 800a914:	4381      	bics	r1, r0
 800a916:	5499      	strb	r1, [r3, r2]
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a918:	2001      	movs	r0, #1
 800a91a:	f7ff ffbf 	bl	800a89c <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800a91e:	1d3b      	adds	r3, r7, #4
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	2201      	movs	r2, #1
 800a924:	4013      	ands	r3, r2
 800a926:	b2db      	uxtb	r3, r3
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d007      	beq.n	800a93c <LoRaMacHandleRequestEvents+0x78>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800a92c:	4a14      	ldr	r2, [pc, #80]	@ (800a980 <LoRaMacHandleRequestEvents+0xbc>)
 800a92e:	23d1      	movs	r3, #209	@ 0xd1
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	58d3      	ldr	r3, [r2, r3]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a14      	ldr	r2, [pc, #80]	@ (800a988 <LoRaMacHandleRequestEvents+0xc4>)
 800a938:	0010      	movs	r0, r2
 800a93a:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800a93c:	1d3b      	adds	r3, r7, #4
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	2204      	movs	r2, #4
 800a942:	4013      	ands	r3, r2
 800a944:	b2db      	uxtb	r3, r3
 800a946:	2b00      	cmp	r3, #0
 800a948:	d00d      	beq.n	800a966 <LoRaMacHandleRequestEvents+0xa2>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800a94a:	4b10      	ldr	r3, [pc, #64]	@ (800a98c <LoRaMacHandleRequestEvents+0xc8>)
 800a94c:	0018      	movs	r0, r3
 800a94e:	f005 f8ed 	bl	800fb2c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800a952:	f005 f94d 	bl	800fbf0 <LoRaMacConfirmQueueGetCnt>
 800a956:	1e03      	subs	r3, r0, #0
 800a958:	d005      	beq.n	800a966 <LoRaMacHandleRequestEvents+0xa2>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a95a:	4b09      	ldr	r3, [pc, #36]	@ (800a980 <LoRaMacHandleRequestEvents+0xbc>)
 800a95c:	4a09      	ldr	r2, [pc, #36]	@ (800a984 <LoRaMacHandleRequestEvents+0xc0>)
 800a95e:	5c99      	ldrb	r1, [r3, r2]
 800a960:	2004      	movs	r0, #4
 800a962:	4301      	orrs	r1, r0
 800a964:	5499      	strb	r1, [r3, r2]
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800a966:	f004 fc30 	bl	800f1ca <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800a96a:	4b05      	ldr	r3, [pc, #20]	@ (800a980 <LoRaMacHandleRequestEvents+0xbc>)
 800a96c:	4a05      	ldr	r2, [pc, #20]	@ (800a984 <LoRaMacHandleRequestEvents+0xc0>)
 800a96e:	5c99      	ldrb	r1, [r3, r2]
 800a970:	2020      	movs	r0, #32
 800a972:	4381      	bics	r1, r0
 800a974:	5499      	strb	r1, [r3, r2]
    }
}
 800a976:	46c0      	nop			@ (mov r8, r8)
 800a978:	46bd      	mov	sp, r7
 800a97a:	b002      	add	sp, #8
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	46c0      	nop			@ (mov r8, r8)
 800a980:	20000940 	.word	0x20000940
 800a984:	00000481 	.word	0x00000481
 800a988:	20000d7c 	.word	0x20000d7c
 800a98c:	20000d90 	.word	0x20000d90

0800a990 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800a996:	4a0b      	ldr	r2, [pc, #44]	@ (800a9c4 <LoRaMacHandleScheduleUplinkEvent+0x34>)
 800a998:	23d0      	movs	r3, #208	@ 0xd0
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	58d3      	ldr	r3, [r2, r3]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10c      	bne.n	800a9bc <LoRaMacHandleScheduleUplinkEvent+0x2c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800a9a2:	1dfb      	adds	r3, r7, #7
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800a9a8:	1dfb      	adds	r3, r7, #7
 800a9aa:	0018      	movs	r0, r3
 800a9ac:	f004 ff18 	bl	800f7e0 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800a9b0:	1dfb      	adds	r3, r7, #7
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d001      	beq.n	800a9bc <LoRaMacHandleScheduleUplinkEvent+0x2c>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800a9b8:	f000 fd02 	bl	800b3c0 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800a9bc:	46c0      	nop			@ (mov r8, r8)
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	b002      	add	sp, #8
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	20000940 	.word	0x20000940

0800a9c8 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b088      	sub	sp, #32
 800a9cc:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800a9ce:	4b26      	ldr	r3, [pc, #152]	@ (800aa68 <LoRaMacHandleIndicationEvents+0xa0>)
 800a9d0:	4a26      	ldr	r2, [pc, #152]	@ (800aa6c <LoRaMacHandleIndicationEvents+0xa4>)
 800a9d2:	5c9b      	ldrb	r3, [r3, r2]
 800a9d4:	2208      	movs	r2, #8
 800a9d6:	4013      	ands	r3, r2
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00d      	beq.n	800a9fa <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800a9de:	4b22      	ldr	r3, [pc, #136]	@ (800aa68 <LoRaMacHandleIndicationEvents+0xa0>)
 800a9e0:	4a22      	ldr	r2, [pc, #136]	@ (800aa6c <LoRaMacHandleIndicationEvents+0xa4>)
 800a9e2:	5c99      	ldrb	r1, [r3, r2]
 800a9e4:	2008      	movs	r0, #8
 800a9e6:	4381      	bics	r1, r0
 800a9e8:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800a9ea:	4a1f      	ldr	r2, [pc, #124]	@ (800aa68 <LoRaMacHandleIndicationEvents+0xa0>)
 800a9ec:	23d1      	movs	r3, #209	@ 0xd1
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	58d3      	ldr	r3, [r2, r3]
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	4a1e      	ldr	r2, [pc, #120]	@ (800aa70 <LoRaMacHandleIndicationEvents+0xa8>)
 800a9f6:	0010      	movs	r0, r2
 800a9f8:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800a9fa:	4b1b      	ldr	r3, [pc, #108]	@ (800aa68 <LoRaMacHandleIndicationEvents+0xa0>)
 800a9fc:	4a1b      	ldr	r2, [pc, #108]	@ (800aa6c <LoRaMacHandleIndicationEvents+0xa4>)
 800a9fe:	5c9b      	ldrb	r3, [r3, r2]
 800aa00:	2210      	movs	r2, #16
 800aa02:	4013      	ands	r3, r2
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d013      	beq.n	800aa32 <LoRaMacHandleIndicationEvents+0x6a>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800aa0a:	1d3b      	adds	r3, r7, #4
 800aa0c:	2206      	movs	r2, #6
 800aa0e:	701a      	strb	r2, [r3, #0]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800aa10:	1d3b      	adds	r3, r7, #4
 800aa12:	2200      	movs	r2, #0
 800aa14:	705a      	strb	r2, [r3, #1]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 800aa16:	4a14      	ldr	r2, [pc, #80]	@ (800aa68 <LoRaMacHandleIndicationEvents+0xa0>)
 800aa18:	23d1      	movs	r3, #209	@ 0xd1
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	58d3      	ldr	r3, [r2, r3]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	1d3a      	adds	r2, r7, #4
 800aa22:	0010      	movs	r0, r2
 800aa24:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800aa26:	4b10      	ldr	r3, [pc, #64]	@ (800aa68 <LoRaMacHandleIndicationEvents+0xa0>)
 800aa28:	4a10      	ldr	r2, [pc, #64]	@ (800aa6c <LoRaMacHandleIndicationEvents+0xa4>)
 800aa2a:	5c99      	ldrb	r1, [r3, r2]
 800aa2c:	2010      	movs	r0, #16
 800aa2e:	4381      	bics	r1, r0
 800aa30:	5499      	strb	r1, [r3, r2]
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800aa32:	4b0d      	ldr	r3, [pc, #52]	@ (800aa68 <LoRaMacHandleIndicationEvents+0xa0>)
 800aa34:	4a0d      	ldr	r2, [pc, #52]	@ (800aa6c <LoRaMacHandleIndicationEvents+0xa4>)
 800aa36:	5c9b      	ldrb	r3, [r3, r2]
 800aa38:	2202      	movs	r2, #2
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00d      	beq.n	800aa5e <LoRaMacHandleIndicationEvents+0x96>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800aa42:	4b09      	ldr	r3, [pc, #36]	@ (800aa68 <LoRaMacHandleIndicationEvents+0xa0>)
 800aa44:	4a09      	ldr	r2, [pc, #36]	@ (800aa6c <LoRaMacHandleIndicationEvents+0xa4>)
 800aa46:	5c99      	ldrb	r1, [r3, r2]
 800aa48:	2002      	movs	r0, #2
 800aa4a:	4381      	bics	r1, r0
 800aa4c:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 800aa4e:	4a06      	ldr	r2, [pc, #24]	@ (800aa68 <LoRaMacHandleIndicationEvents+0xa0>)
 800aa50:	23d1      	movs	r3, #209	@ 0xd1
 800aa52:	009b      	lsls	r3, r3, #2
 800aa54:	58d3      	ldr	r3, [r2, r3]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	4a06      	ldr	r2, [pc, #24]	@ (800aa74 <LoRaMacHandleIndicationEvents+0xac>)
 800aa5a:	0010      	movs	r0, r2
 800aa5c:	4798      	blx	r3
    }
}
 800aa5e:	46c0      	nop			@ (mov r8, r8)
 800aa60:	46bd      	mov	sp, r7
 800aa62:	b008      	add	sp, #32
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	46c0      	nop			@ (mov r8, r8)
 800aa68:	20000940 	.word	0x20000940
 800aa6c:	00000481 	.word	0x00000481
 800aa70:	20000da4 	.word	0x20000da4
 800aa74:	20000d5c 	.word	0x20000d5c

0800aa78 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800aa78:	b590      	push	{r4, r7, lr}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800aa7e:	4b39      	ldr	r3, [pc, #228]	@ (800ab64 <LoRaMacHandleMcpsRequest+0xec>)
 800aa80:	4a39      	ldr	r2, [pc, #228]	@ (800ab68 <LoRaMacHandleMcpsRequest+0xf0>)
 800aa82:	5c9b      	ldrb	r3, [r3, r2]
 800aa84:	2201      	movs	r2, #1
 800aa86:	4013      	ands	r3, r2
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d066      	beq.n	800ab5c <LoRaMacHandleMcpsRequest+0xe4>
    {
        bool stopRetransmission = false;
 800aa8e:	1dfb      	adds	r3, r7, #7
 800aa90:	2200      	movs	r2, #0
 800aa92:	701a      	strb	r2, [r3, #0]
        bool waitForRetransmission = false;
 800aa94:	1dbb      	adds	r3, r7, #6
 800aa96:	2200      	movs	r2, #0
 800aa98:	701a      	strb	r2, [r3, #0]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800aa9a:	4b32      	ldr	r3, [pc, #200]	@ (800ab64 <LoRaMacHandleMcpsRequest+0xec>)
 800aa9c:	4a33      	ldr	r2, [pc, #204]	@ (800ab6c <LoRaMacHandleMcpsRequest+0xf4>)
 800aa9e:	5c9b      	ldrb	r3, [r3, r2]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d004      	beq.n	800aaae <LoRaMacHandleMcpsRequest+0x36>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800aaa4:	4b2f      	ldr	r3, [pc, #188]	@ (800ab64 <LoRaMacHandleMcpsRequest+0xec>)
 800aaa6:	4a31      	ldr	r2, [pc, #196]	@ (800ab6c <LoRaMacHandleMcpsRequest+0xf4>)
 800aaa8:	5c9b      	ldrb	r3, [r3, r2]
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800aaaa:	2b03      	cmp	r3, #3
 800aaac:	d105      	bne.n	800aaba <LoRaMacHandleMcpsRequest+0x42>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800aaae:	1dfc      	adds	r4, r7, #7
 800aab0:	f002 fb1c 	bl	800d0ec <CheckRetransUnconfirmedUplink>
 800aab4:	0003      	movs	r3, r0
 800aab6:	7023      	strb	r3, [r4, #0]
 800aab8:	e026      	b.n	800ab08 <LoRaMacHandleMcpsRequest+0x90>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800aaba:	4b2a      	ldr	r3, [pc, #168]	@ (800ab64 <LoRaMacHandleMcpsRequest+0xec>)
 800aabc:	4a2b      	ldr	r2, [pc, #172]	@ (800ab6c <LoRaMacHandleMcpsRequest+0xf4>)
 800aabe:	5c9b      	ldrb	r3, [r3, r2]
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d121      	bne.n	800ab08 <LoRaMacHandleMcpsRequest+0x90>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800aac4:	4b27      	ldr	r3, [pc, #156]	@ (800ab64 <LoRaMacHandleMcpsRequest+0xec>)
 800aac6:	4a2a      	ldr	r2, [pc, #168]	@ (800ab70 <LoRaMacHandleMcpsRequest+0xf8>)
 800aac8:	5c9b      	ldrb	r3, [r3, r2]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d019      	beq.n	800ab02 <LoRaMacHandleMcpsRequest+0x8a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800aace:	1dfc      	adds	r4, r7, #7
 800aad0:	f002 fb40 	bl	800d154 <CheckRetransConfirmedUplink>
 800aad4:	0003      	movs	r3, r0
 800aad6:	7023      	strb	r3, [r4, #0]

                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800aad8:	4b22      	ldr	r3, [pc, #136]	@ (800ab64 <LoRaMacHandleMcpsRequest+0xec>)
 800aada:	4a26      	ldr	r2, [pc, #152]	@ (800ab74 <LoRaMacHandleMcpsRequest+0xfc>)
 800aadc:	589a      	ldr	r2, [r3, r2]
 800aade:	23e9      	movs	r3, #233	@ 0xe9
 800aae0:	005b      	lsls	r3, r3, #1
 800aae2:	5cd3      	ldrb	r3, [r2, r3]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10f      	bne.n	800ab08 <LoRaMacHandleMcpsRequest+0x90>
                {
                    if( stopRetransmission == false )
 800aae8:	1dfb      	adds	r3, r7, #7
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	2201      	movs	r2, #1
 800aaee:	4053      	eors	r3, r2
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d002      	beq.n	800aafc <LoRaMacHandleMcpsRequest+0x84>
                    {
                        AckTimeoutRetriesProcess( );
 800aaf6:	f002 fba1 	bl	800d23c <AckTimeoutRetriesProcess>
 800aafa:	e005      	b.n	800ab08 <LoRaMacHandleMcpsRequest+0x90>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800aafc:	f002 fbec 	bl	800d2d8 <AckTimeoutRetriesFinalize>
 800ab00:	e002      	b.n	800ab08 <LoRaMacHandleMcpsRequest+0x90>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800ab02:	1dbb      	adds	r3, r7, #6
 800ab04:	2201      	movs	r2, #1
 800ab06:	701a      	strb	r2, [r3, #0]
            }
        }

        if( stopRetransmission == true )
 800ab08:	1dfb      	adds	r3, r7, #7
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d011      	beq.n	800ab34 <LoRaMacHandleMcpsRequest+0xbc>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800ab10:	4b19      	ldr	r3, [pc, #100]	@ (800ab78 <LoRaMacHandleMcpsRequest+0x100>)
 800ab12:	0018      	movs	r0, r3
 800ab14:	f00a fab2 	bl	801507c <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ab18:	4a12      	ldr	r2, [pc, #72]	@ (800ab64 <LoRaMacHandleMcpsRequest+0xec>)
 800ab1a:	23d0      	movs	r3, #208	@ 0xd0
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	58d3      	ldr	r3, [r2, r3]
 800ab20:	2220      	movs	r2, #32
 800ab22:	4393      	bics	r3, r2
 800ab24:	0019      	movs	r1, r3
 800ab26:	4a0f      	ldr	r2, [pc, #60]	@ (800ab64 <LoRaMacHandleMcpsRequest+0xec>)
 800ab28:	23d0      	movs	r3, #208	@ 0xd0
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	50d1      	str	r1, [r2, r3]
            StopRetransmission( );
 800ab2e:	f002 fb39 	bl	800d1a4 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800ab32:	e013      	b.n	800ab5c <LoRaMacHandleMcpsRequest+0xe4>
        else if( waitForRetransmission == false )
 800ab34:	1dbb      	adds	r3, r7, #6
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	4053      	eors	r3, r2
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d00c      	beq.n	800ab5c <LoRaMacHandleMcpsRequest+0xe4>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800ab42:	4b08      	ldr	r3, [pc, #32]	@ (800ab64 <LoRaMacHandleMcpsRequest+0xec>)
 800ab44:	4a08      	ldr	r2, [pc, #32]	@ (800ab68 <LoRaMacHandleMcpsRequest+0xf0>)
 800ab46:	5c99      	ldrb	r1, [r3, r2]
 800ab48:	2020      	movs	r0, #32
 800ab4a:	4381      	bics	r1, r0
 800ab4c:	5499      	strb	r1, [r3, r2]
            MacCtx.AckTimeoutRetry = false;
 800ab4e:	4b05      	ldr	r3, [pc, #20]	@ (800ab64 <LoRaMacHandleMcpsRequest+0xec>)
 800ab50:	4a07      	ldr	r2, [pc, #28]	@ (800ab70 <LoRaMacHandleMcpsRequest+0xf8>)
 800ab52:	2100      	movs	r1, #0
 800ab54:	5499      	strb	r1, [r3, r2]
            OnTxDelayedTimerEvent( NULL );
 800ab56:	2000      	movs	r0, #0
 800ab58:	f000 f8e8 	bl	800ad2c <OnTxDelayedTimerEvent>
}
 800ab5c:	46c0      	nop			@ (mov r8, r8)
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	b003      	add	sp, #12
 800ab62:	bd90      	pop	{r4, r7, pc}
 800ab64:	20000940 	.word	0x20000940
 800ab68:	00000481 	.word	0x00000481
 800ab6c:	0000043c 	.word	0x0000043c
 800ab70:	00000413 	.word	0x00000413
 800ab74:	00000484 	.word	0x00000484
 800ab78:	20000ca8 	.word	0x20000ca8

0800ab7c <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ab80:	4b1d      	ldr	r3, [pc, #116]	@ (800abf8 <LoRaMacHandleMlmeRequest+0x7c>)
 800ab82:	4a1e      	ldr	r2, [pc, #120]	@ (800abfc <LoRaMacHandleMlmeRequest+0x80>)
 800ab84:	5c9b      	ldrb	r3, [r3, r2]
 800ab86:	2204      	movs	r2, #4
 800ab88:	4013      	ands	r3, r2
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d02f      	beq.n	800abf0 <LoRaMacHandleMlmeRequest+0x74>
    {
        if( ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 800ab90:	2000      	movs	r0, #0
 800ab92:	f004 ffb1 	bl	800faf8 <LoRaMacConfirmQueueIsCmdActive>
 800ab96:	1e03      	subs	r3, r0, #0
 800ab98:	d015      	beq.n	800abc6 <LoRaMacHandleMlmeRequest+0x4a>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800ab9a:	2000      	movs	r0, #0
 800ab9c:	f004 ff54 	bl	800fa48 <LoRaMacConfirmQueueGetStatus>
 800aba0:	1e03      	subs	r3, r0, #0
 800aba2:	d104      	bne.n	800abae <LoRaMacHandleMlmeRequest+0x32>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800aba4:	4a14      	ldr	r2, [pc, #80]	@ (800abf8 <LoRaMacHandleMlmeRequest+0x7c>)
 800aba6:	2382      	movs	r3, #130	@ 0x82
 800aba8:	00db      	lsls	r3, r3, #3
 800abaa:	2100      	movs	r1, #0
 800abac:	54d1      	strb	r1, [r2, r3]
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800abae:	4a12      	ldr	r2, [pc, #72]	@ (800abf8 <LoRaMacHandleMlmeRequest+0x7c>)
 800abb0:	23d0      	movs	r3, #208	@ 0xd0
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	58d3      	ldr	r3, [r2, r3]
 800abb6:	2202      	movs	r2, #2
 800abb8:	4393      	bics	r3, r2
 800abba:	0019      	movs	r1, r3
 800abbc:	4a0e      	ldr	r2, [pc, #56]	@ (800abf8 <LoRaMacHandleMlmeRequest+0x7c>)
 800abbe:	23d0      	movs	r3, #208	@ 0xd0
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	50d1      	str	r1, [r2, r3]
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800abc4:	e014      	b.n	800abf0 <LoRaMacHandleMlmeRequest+0x74>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800abc6:	2004      	movs	r0, #4
 800abc8:	f004 ff96 	bl	800faf8 <LoRaMacConfirmQueueIsCmdActive>
 800abcc:	1e03      	subs	r3, r0, #0
 800abce:	d104      	bne.n	800abda <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800abd0:	2005      	movs	r0, #5
 800abd2:	f004 ff91 	bl	800faf8 <LoRaMacConfirmQueueIsCmdActive>
 800abd6:	1e03      	subs	r3, r0, #0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800abd8:	d00a      	beq.n	800abf0 <LoRaMacHandleMlmeRequest+0x74>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800abda:	4a07      	ldr	r2, [pc, #28]	@ (800abf8 <LoRaMacHandleMlmeRequest+0x7c>)
 800abdc:	23d0      	movs	r3, #208	@ 0xd0
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	58d3      	ldr	r3, [r2, r3]
 800abe2:	2202      	movs	r2, #2
 800abe4:	4393      	bics	r3, r2
 800abe6:	0019      	movs	r1, r3
 800abe8:	4a03      	ldr	r2, [pc, #12]	@ (800abf8 <LoRaMacHandleMlmeRequest+0x7c>)
 800abea:	23d0      	movs	r3, #208	@ 0xd0
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	50d1      	str	r1, [r2, r3]
}
 800abf0:	46c0      	nop			@ (mov r8, r8)
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	46c0      	nop			@ (mov r8, r8)
 800abf8:	20000940 	.word	0x20000940
 800abfc:	00000481 	.word	0x00000481

0800ac00 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800ac04:	200b      	movs	r0, #11
 800ac06:	f004 ff77 	bl	800faf8 <LoRaMacConfirmQueueIsCmdActive>
 800ac0a:	1e03      	subs	r3, r0, #0
 800ac0c:	d01c      	beq.n	800ac48 <LoRaMacCheckForBeaconAcquisition+0x48>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800ac0e:	4b10      	ldr	r3, [pc, #64]	@ (800ac50 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800ac10:	4a10      	ldr	r2, [pc, #64]	@ (800ac54 <LoRaMacCheckForBeaconAcquisition+0x54>)
 800ac12:	5c9b      	ldrb	r3, [r3, r2]
 800ac14:	2201      	movs	r2, #1
 800ac16:	4013      	ands	r3, r2
 800ac18:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d114      	bne.n	800ac48 <LoRaMacCheckForBeaconAcquisition+0x48>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ac1e:	4b0c      	ldr	r3, [pc, #48]	@ (800ac50 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800ac20:	4a0c      	ldr	r2, [pc, #48]	@ (800ac54 <LoRaMacCheckForBeaconAcquisition+0x54>)
 800ac22:	5c9b      	ldrb	r3, [r3, r2]
 800ac24:	2204      	movs	r2, #4
 800ac26:	4013      	ands	r3, r2
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00c      	beq.n	800ac48 <LoRaMacCheckForBeaconAcquisition+0x48>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ac2e:	4a08      	ldr	r2, [pc, #32]	@ (800ac50 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800ac30:	23d0      	movs	r3, #208	@ 0xd0
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	58d3      	ldr	r3, [r2, r3]
 800ac36:	2202      	movs	r2, #2
 800ac38:	4393      	bics	r3, r2
 800ac3a:	0019      	movs	r1, r3
 800ac3c:	4a04      	ldr	r2, [pc, #16]	@ (800ac50 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800ac3e:	23d0      	movs	r3, #208	@ 0xd0
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	50d1      	str	r1, [r2, r3]
            return 0x01;
 800ac44:	2301      	movs	r3, #1
 800ac46:	e000      	b.n	800ac4a <LoRaMacCheckForBeaconAcquisition+0x4a>
        }
    }
    return 0x00;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	0018      	movs	r0, r3
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	20000940 	.word	0x20000940
 800ac54:	00000481 	.word	0x00000481

0800ac58 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800ac5c:	4a0f      	ldr	r2, [pc, #60]	@ (800ac9c <LoRaMacCheckForRxAbort+0x44>)
 800ac5e:	23d0      	movs	r3, #208	@ 0xd0
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	58d3      	ldr	r3, [r2, r3]
 800ac64:	2280      	movs	r2, #128	@ 0x80
 800ac66:	4013      	ands	r3, r2
 800ac68:	d015      	beq.n	800ac96 <LoRaMacCheckForRxAbort+0x3e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800ac6a:	4a0c      	ldr	r2, [pc, #48]	@ (800ac9c <LoRaMacCheckForRxAbort+0x44>)
 800ac6c:	23d0      	movs	r3, #208	@ 0xd0
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	58d3      	ldr	r3, [r2, r3]
 800ac72:	2280      	movs	r2, #128	@ 0x80
 800ac74:	4393      	bics	r3, r2
 800ac76:	0019      	movs	r1, r3
 800ac78:	4a08      	ldr	r2, [pc, #32]	@ (800ac9c <LoRaMacCheckForRxAbort+0x44>)
 800ac7a:	23d0      	movs	r3, #208	@ 0xd0
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	50d1      	str	r1, [r2, r3]
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ac80:	4a06      	ldr	r2, [pc, #24]	@ (800ac9c <LoRaMacCheckForRxAbort+0x44>)
 800ac82:	23d0      	movs	r3, #208	@ 0xd0
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	58d3      	ldr	r3, [r2, r3]
 800ac88:	2202      	movs	r2, #2
 800ac8a:	4393      	bics	r3, r2
 800ac8c:	0019      	movs	r1, r3
 800ac8e:	4a03      	ldr	r2, [pc, #12]	@ (800ac9c <LoRaMacCheckForRxAbort+0x44>)
 800ac90:	23d0      	movs	r3, #208	@ 0xd0
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	50d1      	str	r1, [r2, r3]
    }
}
 800ac96:	46c0      	nop			@ (mov r8, r8)
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	20000940 	.word	0x20000940

0800aca0 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800aca6:	1dfb      	adds	r3, r7, #7
 800aca8:	2200      	movs	r2, #0
 800acaa:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
 800acac:	f7ff fd92 	bl	800a7d4 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800acb0:	f004 fae8 	bl	800f284 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800acb4:	4b1b      	ldr	r3, [pc, #108]	@ (800ad24 <LoRaMacProcess+0x84>)
 800acb6:	4a1c      	ldr	r2, [pc, #112]	@ (800ad28 <LoRaMacProcess+0x88>)
 800acb8:	5c9b      	ldrb	r3, [r3, r2]
 800acba:	2220      	movs	r2, #32
 800acbc:	4013      	ands	r3, r2
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d020      	beq.n	800ad06 <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800acc4:	2000      	movs	r0, #0
 800acc6:	f7ff fde9 	bl	800a89c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800acca:	f7ff ffc5 	bl	800ac58 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800acce:	f002 fb99 	bl	800d404 <IsRequestPending>
 800acd2:	1e03      	subs	r3, r0, #0
 800acd4:	d008      	beq.n	800ace8 <LoRaMacProcess+0x48>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800acd6:	f7ff ff93 	bl	800ac00 <LoRaMacCheckForBeaconAcquisition>
 800acda:	0003      	movs	r3, r0
 800acdc:	0019      	movs	r1, r3
 800acde:	1dfb      	adds	r3, r7, #7
 800ace0:	1dfa      	adds	r2, r7, #7
 800ace2:	7812      	ldrb	r2, [r2, #0]
 800ace4:	430a      	orrs	r2, r1
 800ace6:	701a      	strb	r2, [r3, #0]
        }

        if( noTx == 0x00 )
 800ace8:	1dfb      	adds	r3, r7, #7
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d103      	bne.n	800acf8 <LoRaMacProcess+0x58>
        {
            LoRaMacHandleMlmeRequest( );
 800acf0:	f7ff ff44 	bl	800ab7c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800acf4:	f7ff fec0 	bl	800aa78 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800acf8:	f7ff fde4 	bl	800a8c4 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800acfc:	f7ff fe48 	bl	800a990 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ad00:	2001      	movs	r0, #1
 800ad02:	f7ff fdcb 	bl	800a89c <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800ad06:	f7ff fe5f 	bl	800a9c8 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800ad0a:	4a06      	ldr	r2, [pc, #24]	@ (800ad24 <LoRaMacProcess+0x84>)
 800ad0c:	2390      	movs	r3, #144	@ 0x90
 800ad0e:	00db      	lsls	r3, r3, #3
 800ad10:	5cd3      	ldrb	r3, [r2, r3]
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d101      	bne.n	800ad1a <LoRaMacProcess+0x7a>
    {
        OpenContinuousRxCWindow( );
 800ad16:	f001 fe05 	bl	800c924 <OpenContinuousRxCWindow>
    }
}
 800ad1a:	46c0      	nop			@ (mov r8, r8)
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	b002      	add	sp, #8
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	46c0      	nop			@ (mov r8, r8)
 800ad24:	20000940 	.word	0x20000940
 800ad28:	00000481 	.word	0x00000481

0800ad2c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800ad34:	4b19      	ldr	r3, [pc, #100]	@ (800ad9c <OnTxDelayedTimerEvent+0x70>)
 800ad36:	0018      	movs	r0, r3
 800ad38:	f00a f9a0 	bl	801507c <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ad3c:	4a18      	ldr	r2, [pc, #96]	@ (800ada0 <OnTxDelayedTimerEvent+0x74>)
 800ad3e:	23d0      	movs	r3, #208	@ 0xd0
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	58d3      	ldr	r3, [r2, r3]
 800ad44:	2220      	movs	r2, #32
 800ad46:	4393      	bics	r3, r2
 800ad48:	0019      	movs	r1, r3
 800ad4a:	4a15      	ldr	r2, [pc, #84]	@ (800ada0 <OnTxDelayedTimerEvent+0x74>)
 800ad4c:	23d0      	movs	r3, #208	@ 0xd0
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800ad52:	2001      	movs	r0, #1
 800ad54:	f001 fa46 	bl	800c1e4 <ScheduleTx>
 800ad58:	1e03      	subs	r3, r0, #0
 800ad5a:	d01a      	beq.n	800ad92 <OnTxDelayedTimerEvent+0x66>
 800ad5c:	2b0b      	cmp	r3, #11
 800ad5e:	d018      	beq.n	800ad92 <OnTxDelayedTimerEvent+0x66>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800ad60:	4b0f      	ldr	r3, [pc, #60]	@ (800ada0 <OnTxDelayedTimerEvent+0x74>)
 800ad62:	4a10      	ldr	r2, [pc, #64]	@ (800ada4 <OnTxDelayedTimerEvent+0x78>)
 800ad64:	589b      	ldr	r3, [r3, r2]
 800ad66:	22f9      	movs	r2, #249	@ 0xf9
 800ad68:	569b      	ldrsb	r3, [r3, r2]
 800ad6a:	b2d9      	uxtb	r1, r3
 800ad6c:	4b0c      	ldr	r3, [pc, #48]	@ (800ada0 <OnTxDelayedTimerEvent+0x74>)
 800ad6e:	4a0e      	ldr	r2, [pc, #56]	@ (800ada8 <OnTxDelayedTimerEvent+0x7c>)
 800ad70:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800ad72:	4b0b      	ldr	r3, [pc, #44]	@ (800ada0 <OnTxDelayedTimerEvent+0x74>)
 800ad74:	4a0d      	ldr	r2, [pc, #52]	@ (800adac <OnTxDelayedTimerEvent+0x80>)
 800ad76:	5c99      	ldrb	r1, [r3, r2]
 800ad78:	4b09      	ldr	r3, [pc, #36]	@ (800ada0 <OnTxDelayedTimerEvent+0x74>)
 800ad7a:	4a0d      	ldr	r2, [pc, #52]	@ (800adb0 <OnTxDelayedTimerEvent+0x84>)
 800ad7c:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800ad7e:	4b08      	ldr	r3, [pc, #32]	@ (800ada0 <OnTxDelayedTimerEvent+0x74>)
 800ad80:	4a0c      	ldr	r2, [pc, #48]	@ (800adb4 <OnTxDelayedTimerEvent+0x88>)
 800ad82:	2109      	movs	r1, #9
 800ad84:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800ad86:	2009      	movs	r0, #9
 800ad88:	f004 fe84 	bl	800fa94 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800ad8c:	f002 fa0a 	bl	800d1a4 <StopRetransmission>
            break;
 800ad90:	e000      	b.n	800ad94 <OnTxDelayedTimerEvent+0x68>
            break;
 800ad92:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 800ad94:	46c0      	nop			@ (mov r8, r8)
 800ad96:	46bd      	mov	sp, r7
 800ad98:	b002      	add	sp, #8
 800ad9a:	bd80      	pop	{r7, pc}
 800ad9c:	20000ca8 	.word	0x20000ca8
 800ada0:	20000940 	.word	0x20000940
 800ada4:	00000484 	.word	0x00000484
 800ada8:	0000043e 	.word	0x0000043e
 800adac:	00000412 	.word	0x00000412
 800adb0:	00000441 	.word	0x00000441
 800adb4:	0000043d 	.word	0x0000043d

0800adb8 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800adc0:	4b1a      	ldr	r3, [pc, #104]	@ (800ae2c <OnRxWindow1TimerEvent+0x74>)
 800adc2:	4a1b      	ldr	r2, [pc, #108]	@ (800ae30 <OnRxWindow1TimerEvent+0x78>)
 800adc4:	5c99      	ldrb	r1, [r3, r2]
 800adc6:	4a19      	ldr	r2, [pc, #100]	@ (800ae2c <OnRxWindow1TimerEvent+0x74>)
 800adc8:	23ee      	movs	r3, #238	@ 0xee
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 800adce:	4b17      	ldr	r3, [pc, #92]	@ (800ae2c <OnRxWindow1TimerEvent+0x74>)
 800add0:	4a18      	ldr	r2, [pc, #96]	@ (800ae34 <OnRxWindow1TimerEvent+0x7c>)
 800add2:	589a      	ldr	r2, [r3, r2]
 800add4:	231a      	movs	r3, #26
 800add6:	33ff      	adds	r3, #255	@ 0xff
 800add8:	5cd3      	ldrb	r3, [r2, r3]
 800adda:	b259      	sxtb	r1, r3
 800addc:	4b13      	ldr	r3, [pc, #76]	@ (800ae2c <OnRxWindow1TimerEvent+0x74>)
 800adde:	4a16      	ldr	r2, [pc, #88]	@ (800ae38 <OnRxWindow1TimerEvent+0x80>)
 800ade0:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ade2:	4b12      	ldr	r3, [pc, #72]	@ (800ae2c <OnRxWindow1TimerEvent+0x74>)
 800ade4:	4a13      	ldr	r2, [pc, #76]	@ (800ae34 <OnRxWindow1TimerEvent+0x7c>)
 800ade6:	589a      	ldr	r2, [r3, r2]
 800ade8:	232e      	movs	r3, #46	@ 0x2e
 800adea:	33ff      	adds	r3, #255	@ 0xff
 800adec:	5cd1      	ldrb	r1, [r2, r3]
 800adee:	4a0f      	ldr	r2, [pc, #60]	@ (800ae2c <OnRxWindow1TimerEvent+0x74>)
 800adf0:	23f2      	movs	r3, #242	@ 0xf2
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800adf6:	4b0d      	ldr	r3, [pc, #52]	@ (800ae2c <OnRxWindow1TimerEvent+0x74>)
 800adf8:	4a0e      	ldr	r2, [pc, #56]	@ (800ae34 <OnRxWindow1TimerEvent+0x7c>)
 800adfa:	589a      	ldr	r2, [r3, r2]
 800adfc:	2340      	movs	r3, #64	@ 0x40
 800adfe:	33ff      	adds	r3, #255	@ 0xff
 800ae00:	5cd1      	ldrb	r1, [r2, r3]
 800ae02:	4b0a      	ldr	r3, [pc, #40]	@ (800ae2c <OnRxWindow1TimerEvent+0x74>)
 800ae04:	4a0d      	ldr	r2, [pc, #52]	@ (800ae3c <OnRxWindow1TimerEvent+0x84>)
 800ae06:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 800ae08:	4b08      	ldr	r3, [pc, #32]	@ (800ae2c <OnRxWindow1TimerEvent+0x74>)
 800ae0a:	4a0d      	ldr	r2, [pc, #52]	@ (800ae40 <OnRxWindow1TimerEvent+0x88>)
 800ae0c:	2100      	movs	r1, #0
 800ae0e:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800ae10:	4b06      	ldr	r3, [pc, #24]	@ (800ae2c <OnRxWindow1TimerEvent+0x74>)
 800ae12:	4a0c      	ldr	r2, [pc, #48]	@ (800ae44 <OnRxWindow1TimerEvent+0x8c>)
 800ae14:	2100      	movs	r1, #0
 800ae16:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800ae18:	4a0b      	ldr	r2, [pc, #44]	@ (800ae48 <OnRxWindow1TimerEvent+0x90>)
 800ae1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ae4c <OnRxWindow1TimerEvent+0x94>)
 800ae1c:	0011      	movs	r1, r2
 800ae1e:	0018      	movs	r0, r3
 800ae20:	f001 fd4c 	bl	800c8bc <RxWindowSetup>
}
 800ae24:	46c0      	nop			@ (mov r8, r8)
 800ae26:	46bd      	mov	sp, r7
 800ae28:	b002      	add	sp, #8
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	20000940 	.word	0x20000940
 800ae30:	00000415 	.word	0x00000415
 800ae34:	00000484 	.word	0x00000484
 800ae38:	000003bb 	.word	0x000003bb
 800ae3c:	000003c9 	.word	0x000003c9
 800ae40:	000003ca 	.word	0x000003ca
 800ae44:	000003cb 	.word	0x000003cb
 800ae48:	20000cf8 	.word	0x20000cf8
 800ae4c:	20000cc0 	.word	0x20000cc0

0800ae50 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ae58:	4a1e      	ldr	r2, [pc, #120]	@ (800aed4 <OnRxWindow2TimerEvent+0x84>)
 800ae5a:	2390      	movs	r3, #144	@ 0x90
 800ae5c:	00db      	lsls	r3, r3, #3
 800ae5e:	5cd3      	ldrb	r3, [r2, r3]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d032      	beq.n	800aeca <OnRxWindow2TimerEvent+0x7a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800ae64:	4b1b      	ldr	r3, [pc, #108]	@ (800aed4 <OnRxWindow2TimerEvent+0x84>)
 800ae66:	4a1c      	ldr	r2, [pc, #112]	@ (800aed8 <OnRxWindow2TimerEvent+0x88>)
 800ae68:	5c99      	ldrb	r1, [r3, r2]
 800ae6a:	4a1a      	ldr	r2, [pc, #104]	@ (800aed4 <OnRxWindow2TimerEvent+0x84>)
 800ae6c:	23f3      	movs	r3, #243	@ 0xf3
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800ae72:	4b18      	ldr	r3, [pc, #96]	@ (800aed4 <OnRxWindow2TimerEvent+0x84>)
 800ae74:	4a19      	ldr	r2, [pc, #100]	@ (800aedc <OnRxWindow2TimerEvent+0x8c>)
 800ae76:	589a      	ldr	r2, [r3, r2]
 800ae78:	238e      	movs	r3, #142	@ 0x8e
 800ae7a:	005b      	lsls	r3, r3, #1
 800ae7c:	58d1      	ldr	r1, [r2, r3]
 800ae7e:	4a15      	ldr	r2, [pc, #84]	@ (800aed4 <OnRxWindow2TimerEvent+0x84>)
 800ae80:	23f4      	movs	r3, #244	@ 0xf4
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ae86:	4b13      	ldr	r3, [pc, #76]	@ (800aed4 <OnRxWindow2TimerEvent+0x84>)
 800ae88:	4a14      	ldr	r2, [pc, #80]	@ (800aedc <OnRxWindow2TimerEvent+0x8c>)
 800ae8a:	589a      	ldr	r2, [r3, r2]
 800ae8c:	232e      	movs	r3, #46	@ 0x2e
 800ae8e:	33ff      	adds	r3, #255	@ 0xff
 800ae90:	5cd1      	ldrb	r1, [r2, r3]
 800ae92:	4a10      	ldr	r2, [pc, #64]	@ (800aed4 <OnRxWindow2TimerEvent+0x84>)
 800ae94:	23f7      	movs	r3, #247	@ 0xf7
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800ae9a:	4b0e      	ldr	r3, [pc, #56]	@ (800aed4 <OnRxWindow2TimerEvent+0x84>)
 800ae9c:	4a0f      	ldr	r2, [pc, #60]	@ (800aedc <OnRxWindow2TimerEvent+0x8c>)
 800ae9e:	589a      	ldr	r2, [r3, r2]
 800aea0:	2340      	movs	r3, #64	@ 0x40
 800aea2:	33ff      	adds	r3, #255	@ 0xff
 800aea4:	5cd1      	ldrb	r1, [r2, r3]
 800aea6:	4b0b      	ldr	r3, [pc, #44]	@ (800aed4 <OnRxWindow2TimerEvent+0x84>)
 800aea8:	4a0d      	ldr	r2, [pc, #52]	@ (800aee0 <OnRxWindow2TimerEvent+0x90>)
 800aeaa:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 800aeac:	4b09      	ldr	r3, [pc, #36]	@ (800aed4 <OnRxWindow2TimerEvent+0x84>)
 800aeae:	4a0d      	ldr	r2, [pc, #52]	@ (800aee4 <OnRxWindow2TimerEvent+0x94>)
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800aeb4:	4b07      	ldr	r3, [pc, #28]	@ (800aed4 <OnRxWindow2TimerEvent+0x84>)
 800aeb6:	4a0c      	ldr	r2, [pc, #48]	@ (800aee8 <OnRxWindow2TimerEvent+0x98>)
 800aeb8:	2101      	movs	r1, #1
 800aeba:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800aebc:	4a0b      	ldr	r2, [pc, #44]	@ (800aeec <OnRxWindow2TimerEvent+0x9c>)
 800aebe:	4b0c      	ldr	r3, [pc, #48]	@ (800aef0 <OnRxWindow2TimerEvent+0xa0>)
 800aec0:	0011      	movs	r1, r2
 800aec2:	0018      	movs	r0, r3
 800aec4:	f001 fcfa 	bl	800c8bc <RxWindowSetup>
 800aec8:	e000      	b.n	800aecc <OnRxWindow2TimerEvent+0x7c>
        return;
 800aeca:	46c0      	nop			@ (mov r8, r8)
}
 800aecc:	46bd      	mov	sp, r7
 800aece:	b002      	add	sp, #8
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	46c0      	nop			@ (mov r8, r8)
 800aed4:	20000940 	.word	0x20000940
 800aed8:	00000415 	.word	0x00000415
 800aedc:	00000484 	.word	0x00000484
 800aee0:	000003dd 	.word	0x000003dd
 800aee4:	000003de 	.word	0x000003de
 800aee8:	000003df 	.word	0x000003df
 800aeec:	20000d0c 	.word	0x20000d0c
 800aef0:	20000cd8 	.word	0x20000cd8

0800aef4 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800aefc:	4b18      	ldr	r3, [pc, #96]	@ (800af60 <OnAckTimeoutTimerEvent+0x6c>)
 800aefe:	0018      	movs	r0, r3
 800af00:	f00a f8bc 	bl	801507c <TimerStop>

    if( MacCtx.NodeAckRequested == true )
 800af04:	4b17      	ldr	r3, [pc, #92]	@ (800af64 <OnAckTimeoutTimerEvent+0x70>)
 800af06:	4a18      	ldr	r2, [pc, #96]	@ (800af68 <OnAckTimeoutTimerEvent+0x74>)
 800af08:	5c9b      	ldrb	r3, [r3, r2]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d003      	beq.n	800af16 <OnAckTimeoutTimerEvent+0x22>
    {
        MacCtx.AckTimeoutRetry = true;
 800af0e:	4b15      	ldr	r3, [pc, #84]	@ (800af64 <OnAckTimeoutTimerEvent+0x70>)
 800af10:	4a16      	ldr	r2, [pc, #88]	@ (800af6c <OnAckTimeoutTimerEvent+0x78>)
 800af12:	2101      	movs	r1, #1
 800af14:	5499      	strb	r1, [r3, r2]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800af16:	4b13      	ldr	r3, [pc, #76]	@ (800af64 <OnAckTimeoutTimerEvent+0x70>)
 800af18:	4a15      	ldr	r2, [pc, #84]	@ (800af70 <OnAckTimeoutTimerEvent+0x7c>)
 800af1a:	589b      	ldr	r3, [r3, r2]
 800af1c:	22f0      	movs	r2, #240	@ 0xf0
 800af1e:	5c9b      	ldrb	r3, [r3, r2]
 800af20:	2b02      	cmp	r3, #2
 800af22:	d105      	bne.n	800af30 <OnAckTimeoutTimerEvent+0x3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800af24:	4b0f      	ldr	r3, [pc, #60]	@ (800af64 <OnAckTimeoutTimerEvent+0x70>)
 800af26:	4a13      	ldr	r2, [pc, #76]	@ (800af74 <OnAckTimeoutTimerEvent+0x80>)
 800af28:	5c99      	ldrb	r1, [r3, r2]
 800af2a:	2020      	movs	r0, #32
 800af2c:	4301      	orrs	r1, r0
 800af2e:	5499      	strb	r1, [r3, r2]
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800af30:	4a0c      	ldr	r2, [pc, #48]	@ (800af64 <OnAckTimeoutTimerEvent+0x70>)
 800af32:	23d2      	movs	r3, #210	@ 0xd2
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	58d3      	ldr	r3, [r2, r3]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d00c      	beq.n	800af56 <OnAckTimeoutTimerEvent+0x62>
 800af3c:	4a09      	ldr	r2, [pc, #36]	@ (800af64 <OnAckTimeoutTimerEvent+0x70>)
 800af3e:	23d2      	movs	r3, #210	@ 0xd2
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	58d3      	ldr	r3, [r2, r3]
 800af44:	68db      	ldr	r3, [r3, #12]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d005      	beq.n	800af56 <OnAckTimeoutTimerEvent+0x62>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800af4a:	4a06      	ldr	r2, [pc, #24]	@ (800af64 <OnAckTimeoutTimerEvent+0x70>)
 800af4c:	23d2      	movs	r3, #210	@ 0xd2
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	58d3      	ldr	r3, [r2, r3]
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	4798      	blx	r3
    }
}
 800af56:	46c0      	nop			@ (mov r8, r8)
 800af58:	46bd      	mov	sp, r7
 800af5a:	b002      	add	sp, #8
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	46c0      	nop			@ (mov r8, r8)
 800af60:	20000d38 	.word	0x20000d38
 800af64:	20000940 	.word	0x20000940
 800af68:	00000414 	.word	0x00000414
 800af6c:	00000413 	.word	0x00000413
 800af70:	00000484 	.word	0x00000484
 800af74:	00000481 	.word	0x00000481

0800af78 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800af78:	b590      	push	{r4, r7, lr}
 800af7a:	b085      	sub	sp, #20
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	60ba      	str	r2, [r7, #8]
 800af80:	607b      	str	r3, [r7, #4]
 800af82:	230f      	movs	r3, #15
 800af84:	18fb      	adds	r3, r7, r3
 800af86:	1c02      	adds	r2, r0, #0
 800af88:	701a      	strb	r2, [r3, #0]
 800af8a:	230e      	movs	r3, #14
 800af8c:	18fb      	adds	r3, r7, r3
 800af8e:	1c0a      	adds	r2, r1, #0
 800af90:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d005      	beq.n	800afa4 <GetFCntDown+0x2c>
 800af98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d002      	beq.n	800afa4 <GetFCntDown+0x2c>
 800af9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d101      	bne.n	800afa8 <GetFCntDown+0x30>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800afa4:	230a      	movs	r3, #10
 800afa6:	e042      	b.n	800b02e <GetFCntDown+0xb6>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800afa8:	230f      	movs	r3, #15
 800afaa:	18fb      	adds	r3, r7, r3
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	2b04      	cmp	r3, #4
 800afb0:	d82d      	bhi.n	800b00e <GetFCntDown+0x96>
 800afb2:	009a      	lsls	r2, r3, #2
 800afb4:	4b20      	ldr	r3, [pc, #128]	@ (800b038 <GetFCntDown+0xc0>)
 800afb6:	18d3      	adds	r3, r2, r3
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	469f      	mov	pc, r3
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800afbc:	1d3b      	adds	r3, r7, #4
 800afbe:	789b      	ldrb	r3, [r3, #2]
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d110      	bne.n	800afe6 <GetFCntDown+0x6e>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800afc4:	220e      	movs	r2, #14
 800afc6:	18bb      	adds	r3, r7, r2
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d003      	beq.n	800afd6 <GetFCntDown+0x5e>
 800afce:	18bb      	adds	r3, r7, r2
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	2b03      	cmp	r3, #3
 800afd4:	d103      	bne.n	800afde <GetFCntDown+0x66>
                {
                    *fCntID = A_FCNT_DOWN;
 800afd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd8:	2202      	movs	r2, #2
 800afda:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800afdc:	e019      	b.n	800b012 <GetFCntDown+0x9a>
                    *fCntID = N_FCNT_DOWN;
 800afde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe0:	2201      	movs	r2, #1
 800afe2:	701a      	strb	r2, [r3, #0]
            break;
 800afe4:	e015      	b.n	800b012 <GetFCntDown+0x9a>
                *fCntID = FCNT_DOWN;
 800afe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe8:	2203      	movs	r2, #3
 800afea:	701a      	strb	r2, [r3, #0]
            break;
 800afec:	e011      	b.n	800b012 <GetFCntDown+0x9a>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800afee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff0:	2204      	movs	r2, #4
 800aff2:	701a      	strb	r2, [r3, #0]
            break;
 800aff4:	e00d      	b.n	800b012 <GetFCntDown+0x9a>
        case MULTICAST_1_ADDR:
            *fCntID = MC_FCNT_DOWN_1;
 800aff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff8:	2205      	movs	r2, #5
 800affa:	701a      	strb	r2, [r3, #0]
            break;
 800affc:	e009      	b.n	800b012 <GetFCntDown+0x9a>
        case MULTICAST_2_ADDR:
            *fCntID = MC_FCNT_DOWN_2;
 800affe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b000:	2206      	movs	r2, #6
 800b002:	701a      	strb	r2, [r3, #0]
            break;
 800b004:	e005      	b.n	800b012 <GetFCntDown+0x9a>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
 800b006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b008:	2207      	movs	r2, #7
 800b00a:	701a      	strb	r2, [r3, #0]
            break;
 800b00c:	e001      	b.n	800b012 <GetFCntDown+0x9a>
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800b00e:	2305      	movs	r3, #5
 800b010:	e00d      	b.n	800b02e <GetFCntDown+0xb6>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800b012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b014:	7818      	ldrb	r0, [r3, #0]
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	89db      	ldrh	r3, [r3, #14]
 800b01a:	001c      	movs	r4, r3
 800b01c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b01e:	2320      	movs	r3, #32
 800b020:	18fb      	adds	r3, r7, r3
 800b022:	8819      	ldrh	r1, [r3, #0]
 800b024:	0013      	movs	r3, r2
 800b026:	0022      	movs	r2, r4
 800b028:	f005 fa46 	bl	80104b8 <LoRaMacCryptoGetFCntDown>
 800b02c:	0003      	movs	r3, r0
}
 800b02e:	0018      	movs	r0, r3
 800b030:	46bd      	mov	sp, r7
 800b032:	b005      	add	sp, #20
 800b034:	bd90      	pop	{r4, r7, pc}
 800b036:	46c0      	nop			@ (mov r8, r8)
 800b038:	0801b134 	.word	0x0801b134

0800b03c <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800b03c:	b5b0      	push	{r4, r5, r7, lr}
 800b03e:	b086      	sub	sp, #24
 800b040:	af02      	add	r7, sp, #8
 800b042:	0002      	movs	r2, r0
 800b044:	1dfb      	adds	r3, r7, #7
 800b046:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b048:	230f      	movs	r3, #15
 800b04a:	18fb      	adds	r3, r7, r3
 800b04c:	2203      	movs	r2, #3
 800b04e:	701a      	strb	r2, [r3, #0]

    switch( MacCtx.NvmCtx->DeviceClass )
 800b050:	4b96      	ldr	r3, [pc, #600]	@ (800b2ac <SwitchClass+0x270>)
 800b052:	4a97      	ldr	r2, [pc, #604]	@ (800b2b0 <SwitchClass+0x274>)
 800b054:	589b      	ldr	r3, [r3, r2]
 800b056:	22f0      	movs	r2, #240	@ 0xf0
 800b058:	5c9b      	ldrb	r3, [r3, r2]
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	d100      	bne.n	800b060 <SwitchClass+0x24>
 800b05e:	e106      	b.n	800b26e <SwitchClass+0x232>
 800b060:	dd00      	ble.n	800b064 <SwitchClass+0x28>
 800b062:	e11c      	b.n	800b29e <SwitchClass+0x262>
 800b064:	2b00      	cmp	r3, #0
 800b066:	d003      	beq.n	800b070 <SwitchClass+0x34>
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d100      	bne.n	800b06e <SwitchClass+0x32>
 800b06c:	e0ea      	b.n	800b244 <SwitchClass+0x208>
 800b06e:	e116      	b.n	800b29e <SwitchClass+0x262>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800b070:	1dfb      	adds	r3, r7, #7
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d10d      	bne.n	800b094 <SwitchClass+0x58>
            {
                // Revert back RxC parameters
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 800b078:	4b8c      	ldr	r3, [pc, #560]	@ (800b2ac <SwitchClass+0x270>)
 800b07a:	4a8d      	ldr	r2, [pc, #564]	@ (800b2b0 <SwitchClass+0x274>)
 800b07c:	5899      	ldr	r1, [r3, r2]
 800b07e:	4b8b      	ldr	r3, [pc, #556]	@ (800b2ac <SwitchClass+0x270>)
 800b080:	4a8b      	ldr	r2, [pc, #556]	@ (800b2b0 <SwitchClass+0x274>)
 800b082:	5898      	ldr	r0, [r3, r2]
 800b084:	2392      	movs	r3, #146	@ 0x92
 800b086:	005b      	lsls	r3, r3, #1
 800b088:	228e      	movs	r2, #142	@ 0x8e
 800b08a:	0052      	lsls	r2, r2, #1
 800b08c:	18c3      	adds	r3, r0, r3
 800b08e:	188a      	adds	r2, r1, r2
 800b090:	ca03      	ldmia	r2!, {r0, r1}
 800b092:	c303      	stmia	r3!, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800b094:	1dfb      	adds	r3, r7, #7
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d113      	bne.n	800b0c4 <SwitchClass+0x88>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800b09c:	250f      	movs	r5, #15
 800b09e:	197c      	adds	r4, r7, r5
 800b0a0:	1dfb      	adds	r3, r7, #7
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	0018      	movs	r0, r3
 800b0a6:	f004 f895 	bl	800f1d4 <LoRaMacClassBSwitchClass>
 800b0aa:	0003      	movs	r3, r0
 800b0ac:	7023      	strb	r3, [r4, #0]
                if( status == LORAMAC_STATUS_OK )
 800b0ae:	197b      	adds	r3, r7, r5
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d106      	bne.n	800b0c4 <SwitchClass+0x88>
                {
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
 800b0b6:	4b7d      	ldr	r3, [pc, #500]	@ (800b2ac <SwitchClass+0x270>)
 800b0b8:	4a7d      	ldr	r2, [pc, #500]	@ (800b2b0 <SwitchClass+0x274>)
 800b0ba:	589b      	ldr	r3, [r3, r2]
 800b0bc:	1dfa      	adds	r2, r7, #7
 800b0be:	21f0      	movs	r1, #240	@ 0xf0
 800b0c0:	7812      	ldrb	r2, [r2, #0]
 800b0c2:	545a      	strb	r2, [r3, r1]
                }
            }

            if( deviceClass == CLASS_C )
 800b0c4:	1dfb      	adds	r3, r7, #7
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d000      	beq.n	800b0ce <SwitchClass+0x92>
 800b0cc:	e0e2      	b.n	800b294 <SwitchClass+0x258>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800b0ce:	4b77      	ldr	r3, [pc, #476]	@ (800b2ac <SwitchClass+0x270>)
 800b0d0:	4a77      	ldr	r2, [pc, #476]	@ (800b2b0 <SwitchClass+0x274>)
 800b0d2:	589b      	ldr	r3, [r3, r2]
 800b0d4:	1dfa      	adds	r2, r7, #7
 800b0d6:	21f0      	movs	r1, #240	@ 0xf0
 800b0d8:	7812      	ldrb	r2, [r2, #0]
 800b0da:	545a      	strb	r2, [r3, r1]

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800b0dc:	4873      	ldr	r0, [pc, #460]	@ (800b2ac <SwitchClass+0x270>)
 800b0de:	23f8      	movs	r3, #248	@ 0xf8
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	4972      	ldr	r1, [pc, #456]	@ (800b2ac <SwitchClass+0x270>)
 800b0e4:	22f3      	movs	r2, #243	@ 0xf3
 800b0e6:	0092      	lsls	r2, r2, #2
 800b0e8:	18c3      	adds	r3, r0, r3
 800b0ea:	188a      	adds	r2, r1, r2
 800b0ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 800b0ee:	c313      	stmia	r3!, {r0, r1, r4}
 800b0f0:	ca03      	ldmia	r2!, {r0, r1}
 800b0f2:	c303      	stmia	r3!, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b0f4:	4b6d      	ldr	r3, [pc, #436]	@ (800b2ac <SwitchClass+0x270>)
 800b0f6:	4a6f      	ldr	r2, [pc, #444]	@ (800b2b4 <SwitchClass+0x278>)
 800b0f8:	2102      	movs	r1, #2
 800b0fa:	5499      	strb	r1, [r3, r2]

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b0fc:	230e      	movs	r3, #14
 800b0fe:	18fb      	adds	r3, r7, r3
 800b100:	2200      	movs	r2, #0
 800b102:	701a      	strb	r2, [r3, #0]
 800b104:	e06f      	b.n	800b1e6 <SwitchClass+0x1aa>
                {
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800b106:	4b69      	ldr	r3, [pc, #420]	@ (800b2ac <SwitchClass+0x270>)
 800b108:	4a69      	ldr	r2, [pc, #420]	@ (800b2b0 <SwitchClass+0x274>)
 800b10a:	5899      	ldr	r1, [r3, r2]
 800b10c:	240e      	movs	r4, #14
 800b10e:	193b      	adds	r3, r7, r4
 800b110:	2200      	movs	r2, #0
 800b112:	569a      	ldrsb	r2, [r3, r2]
 800b114:	2051      	movs	r0, #81	@ 0x51
 800b116:	0013      	movs	r3, r2
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	189b      	adds	r3, r3, r2
 800b11c:	00db      	lsls	r3, r3, #3
 800b11e:	18cb      	adds	r3, r1, r3
 800b120:	181b      	adds	r3, r3, r0
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d055      	beq.n	800b1d4 <SwitchClass+0x198>
                    // TODO: Check multicast channel device class.
                    {
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800b128:	4b60      	ldr	r3, [pc, #384]	@ (800b2ac <SwitchClass+0x270>)
 800b12a:	4a61      	ldr	r2, [pc, #388]	@ (800b2b0 <SwitchClass+0x274>)
 800b12c:	5898      	ldr	r0, [r3, r2]
 800b12e:	193b      	adds	r3, r7, r4
 800b130:	2200      	movs	r2, #0
 800b132:	569a      	ldrsb	r2, [r3, r2]
 800b134:	4b5d      	ldr	r3, [pc, #372]	@ (800b2ac <SwitchClass+0x270>)
 800b136:	495e      	ldr	r1, [pc, #376]	@ (800b2b0 <SwitchClass+0x274>)
 800b138:	5859      	ldr	r1, [r3, r1]
 800b13a:	0013      	movs	r3, r2
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	189b      	adds	r3, r3, r2
 800b140:	00db      	lsls	r3, r3, #3
 800b142:	18c3      	adds	r3, r0, r3
 800b144:	3364      	adds	r3, #100	@ 0x64
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	2392      	movs	r3, #146	@ 0x92
 800b14a:	005b      	lsls	r3, r3, #1
 800b14c:	50ca      	str	r2, [r1, r3]
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800b14e:	4b57      	ldr	r3, [pc, #348]	@ (800b2ac <SwitchClass+0x270>)
 800b150:	4a57      	ldr	r2, [pc, #348]	@ (800b2b0 <SwitchClass+0x274>)
 800b152:	5899      	ldr	r1, [r3, r2]
 800b154:	193b      	adds	r3, r7, r4
 800b156:	2200      	movs	r2, #0
 800b158:	569a      	ldrsb	r2, [r3, r2]
 800b15a:	2068      	movs	r0, #104	@ 0x68
 800b15c:	0013      	movs	r3, r2
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	189b      	adds	r3, r3, r2
 800b162:	00db      	lsls	r3, r3, #3
 800b164:	18cb      	adds	r3, r1, r3
 800b166:	181b      	adds	r3, r3, r0
 800b168:	2100      	movs	r1, #0
 800b16a:	5659      	ldrsb	r1, [r3, r1]
 800b16c:	4b4f      	ldr	r3, [pc, #316]	@ (800b2ac <SwitchClass+0x270>)
 800b16e:	4a50      	ldr	r2, [pc, #320]	@ (800b2b0 <SwitchClass+0x274>)
 800b170:	589a      	ldr	r2, [r3, r2]
 800b172:	b2c9      	uxtb	r1, r1
 800b174:	2394      	movs	r3, #148	@ 0x94
 800b176:	005b      	lsls	r3, r3, #1
 800b178:	54d1      	strb	r1, [r2, r3]

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800b17a:	4b4c      	ldr	r3, [pc, #304]	@ (800b2ac <SwitchClass+0x270>)
 800b17c:	4a4e      	ldr	r2, [pc, #312]	@ (800b2b8 <SwitchClass+0x27c>)
 800b17e:	5c99      	ldrb	r1, [r3, r2]
 800b180:	4a4a      	ldr	r2, [pc, #296]	@ (800b2ac <SwitchClass+0x270>)
 800b182:	23f8      	movs	r3, #248	@ 0xf8
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 800b188:	4b48      	ldr	r3, [pc, #288]	@ (800b2ac <SwitchClass+0x270>)
 800b18a:	4a49      	ldr	r2, [pc, #292]	@ (800b2b0 <SwitchClass+0x274>)
 800b18c:	589a      	ldr	r2, [r3, r2]
 800b18e:	2392      	movs	r3, #146	@ 0x92
 800b190:	005b      	lsls	r3, r3, #1
 800b192:	58d1      	ldr	r1, [r2, r3]
 800b194:	4a45      	ldr	r2, [pc, #276]	@ (800b2ac <SwitchClass+0x270>)
 800b196:	23f9      	movs	r3, #249	@ 0xf9
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	50d1      	str	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b19c:	4b43      	ldr	r3, [pc, #268]	@ (800b2ac <SwitchClass+0x270>)
 800b19e:	4a44      	ldr	r2, [pc, #272]	@ (800b2b0 <SwitchClass+0x274>)
 800b1a0:	589a      	ldr	r2, [r3, r2]
 800b1a2:	232e      	movs	r3, #46	@ 0x2e
 800b1a4:	33ff      	adds	r3, #255	@ 0xff
 800b1a6:	5cd1      	ldrb	r1, [r2, r3]
 800b1a8:	4a40      	ldr	r2, [pc, #256]	@ (800b2ac <SwitchClass+0x270>)
 800b1aa:	23fc      	movs	r3, #252	@ 0xfc
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800b1b0:	4b3e      	ldr	r3, [pc, #248]	@ (800b2ac <SwitchClass+0x270>)
 800b1b2:	4a3f      	ldr	r2, [pc, #252]	@ (800b2b0 <SwitchClass+0x274>)
 800b1b4:	589a      	ldr	r2, [r3, r2]
 800b1b6:	2340      	movs	r3, #64	@ 0x40
 800b1b8:	33ff      	adds	r3, #255	@ 0xff
 800b1ba:	5cd1      	ldrb	r1, [r2, r3]
 800b1bc:	4b3b      	ldr	r3, [pc, #236]	@ (800b2ac <SwitchClass+0x270>)
 800b1be:	4a3f      	ldr	r2, [pc, #252]	@ (800b2bc <SwitchClass+0x280>)
 800b1c0:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800b1c2:	4b3a      	ldr	r3, [pc, #232]	@ (800b2ac <SwitchClass+0x270>)
 800b1c4:	4a3b      	ldr	r2, [pc, #236]	@ (800b2b4 <SwitchClass+0x278>)
 800b1c6:	2103      	movs	r1, #3
 800b1c8:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800b1ca:	4b38      	ldr	r3, [pc, #224]	@ (800b2ac <SwitchClass+0x270>)
 800b1cc:	4a3c      	ldr	r2, [pc, #240]	@ (800b2c0 <SwitchClass+0x284>)
 800b1ce:	2101      	movs	r1, #1
 800b1d0:	5499      	strb	r1, [r3, r2]
                        break;
 800b1d2:	e00e      	b.n	800b1f2 <SwitchClass+0x1b6>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b1d4:	210e      	movs	r1, #14
 800b1d6:	187b      	adds	r3, r7, r1
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	b25b      	sxtb	r3, r3
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	3301      	adds	r3, #1
 800b1e0:	b2da      	uxtb	r2, r3
 800b1e2:	187b      	adds	r3, r7, r1
 800b1e4:	701a      	strb	r2, [r3, #0]
 800b1e6:	230e      	movs	r3, #14
 800b1e8:	18fb      	adds	r3, r7, r3
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	b25b      	sxtb	r3, r3
 800b1ee:	2b03      	cmp	r3, #3
 800b1f0:	dd89      	ble.n	800b106 <SwitchClass+0xca>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800b1f2:	4b2e      	ldr	r3, [pc, #184]	@ (800b2ac <SwitchClass+0x270>)
 800b1f4:	4a33      	ldr	r2, [pc, #204]	@ (800b2c4 <SwitchClass+0x288>)
 800b1f6:	2100      	movs	r1, #0
 800b1f8:	5499      	strb	r1, [r3, r2]
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800b1fa:	4b33      	ldr	r3, [pc, #204]	@ (800b2c8 <SwitchClass+0x28c>)
 800b1fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1fe:	4798      	blx	r3
                // Compute Rx2 windows parameters in case the RX2 datarate has changed
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b200:	4b2a      	ldr	r3, [pc, #168]	@ (800b2ac <SwitchClass+0x270>)
 800b202:	4a2b      	ldr	r2, [pc, #172]	@ (800b2b0 <SwitchClass+0x274>)
 800b204:	589b      	ldr	r3, [r3, r2]
 800b206:	7818      	ldrb	r0, [r3, #0]
                                                 MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 800b208:	4b28      	ldr	r3, [pc, #160]	@ (800b2ac <SwitchClass+0x270>)
 800b20a:	4a29      	ldr	r2, [pc, #164]	@ (800b2b0 <SwitchClass+0x274>)
 800b20c:	589a      	ldr	r2, [r3, r2]
 800b20e:	2394      	movs	r3, #148	@ 0x94
 800b210:	005b      	lsls	r3, r3, #1
 800b212:	5cd3      	ldrb	r3, [r2, r3]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b214:	b259      	sxtb	r1, r3
                                                 MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800b216:	4b25      	ldr	r3, [pc, #148]	@ (800b2ac <SwitchClass+0x270>)
 800b218:	4a25      	ldr	r2, [pc, #148]	@ (800b2b0 <SwitchClass+0x274>)
 800b21a:	589a      	ldr	r2, [r3, r2]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b21c:	2380      	movs	r3, #128	@ 0x80
 800b21e:	005b      	lsls	r3, r3, #1
 800b220:	5cd2      	ldrb	r2, [r2, r3]
                                                 MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800b222:	4b22      	ldr	r3, [pc, #136]	@ (800b2ac <SwitchClass+0x270>)
 800b224:	4c22      	ldr	r4, [pc, #136]	@ (800b2b0 <SwitchClass+0x274>)
 800b226:	591b      	ldr	r3, [r3, r4]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b228:	24fc      	movs	r4, #252	@ 0xfc
 800b22a:	591c      	ldr	r4, [r3, r4]
 800b22c:	4b27      	ldr	r3, [pc, #156]	@ (800b2cc <SwitchClass+0x290>)
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	0023      	movs	r3, r4
 800b232:	f006 fa8c 	bl	801174e <RegionComputeRxWindowParameters>
                                                 &MacCtx.RxWindowCConfig );
                OpenContinuousRxCWindow( );
 800b236:	f001 fb75 	bl	800c924 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800b23a:	230f      	movs	r3, #15
 800b23c:	18fb      	adds	r3, r7, r3
 800b23e:	2200      	movs	r2, #0
 800b240:	701a      	strb	r2, [r3, #0]
            }
            break;
 800b242:	e027      	b.n	800b294 <SwitchClass+0x258>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800b244:	250f      	movs	r5, #15
 800b246:	197c      	adds	r4, r7, r5
 800b248:	1dfb      	adds	r3, r7, #7
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	0018      	movs	r0, r3
 800b24e:	f003 ffc1 	bl	800f1d4 <LoRaMacClassBSwitchClass>
 800b252:	0003      	movs	r3, r0
 800b254:	7023      	strb	r3, [r4, #0]
            if( status == LORAMAC_STATUS_OK )
 800b256:	197b      	adds	r3, r7, r5
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d11c      	bne.n	800b298 <SwitchClass+0x25c>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800b25e:	4b13      	ldr	r3, [pc, #76]	@ (800b2ac <SwitchClass+0x270>)
 800b260:	4a13      	ldr	r2, [pc, #76]	@ (800b2b0 <SwitchClass+0x274>)
 800b262:	589b      	ldr	r3, [r3, r2]
 800b264:	1dfa      	adds	r2, r7, #7
 800b266:	21f0      	movs	r1, #240	@ 0xf0
 800b268:	7812      	ldrb	r2, [r2, #0]
 800b26a:	545a      	strb	r2, [r3, r1]
            }
            break;
 800b26c:	e014      	b.n	800b298 <SwitchClass+0x25c>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800b26e:	1dfb      	adds	r3, r7, #7
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d112      	bne.n	800b29c <SwitchClass+0x260>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800b276:	4b0d      	ldr	r3, [pc, #52]	@ (800b2ac <SwitchClass+0x270>)
 800b278:	4a0d      	ldr	r2, [pc, #52]	@ (800b2b0 <SwitchClass+0x274>)
 800b27a:	589b      	ldr	r3, [r3, r2]
 800b27c:	1dfa      	adds	r2, r7, #7
 800b27e:	21f0      	movs	r1, #240	@ 0xf0
 800b280:	7812      	ldrb	r2, [r2, #0]
 800b282:	545a      	strb	r2, [r3, r1]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800b284:	4b10      	ldr	r3, [pc, #64]	@ (800b2c8 <SwitchClass+0x28c>)
 800b286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b288:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800b28a:	230f      	movs	r3, #15
 800b28c:	18fb      	adds	r3, r7, r3
 800b28e:	2200      	movs	r2, #0
 800b290:	701a      	strb	r2, [r3, #0]
            }
            break;
 800b292:	e003      	b.n	800b29c <SwitchClass+0x260>
            break;
 800b294:	46c0      	nop			@ (mov r8, r8)
 800b296:	e002      	b.n	800b29e <SwitchClass+0x262>
            break;
 800b298:	46c0      	nop			@ (mov r8, r8)
 800b29a:	e000      	b.n	800b29e <SwitchClass+0x262>
            break;
 800b29c:	46c0      	nop			@ (mov r8, r8)
        }
    }

    return status;
 800b29e:	230f      	movs	r3, #15
 800b2a0:	18fb      	adds	r3, r7, r3
 800b2a2:	781b      	ldrb	r3, [r3, #0]
}
 800b2a4:	0018      	movs	r0, r3
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	b004      	add	sp, #16
 800b2aa:	bdb0      	pop	{r4, r5, r7, pc}
 800b2ac:	20000940 	.word	0x20000940
 800b2b0:	00000484 	.word	0x00000484
 800b2b4:	000003f3 	.word	0x000003f3
 800b2b8:	00000415 	.word	0x00000415
 800b2bc:	000003f1 	.word	0x000003f1
 800b2c0:	000003f2 	.word	0x000003f2
 800b2c4:	00000414 	.word	0x00000414
 800b2c8:	0801ac88 	.word	0x0801ac88
 800b2cc:	20000d20 	.word	0x20000d20

0800b2d0 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	0002      	movs	r2, r0
 800b2d8:	1dfb      	adds	r3, r7, #7
 800b2da:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b2dc:	4b18      	ldr	r3, [pc, #96]	@ (800b340 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 800b2de:	4a19      	ldr	r2, [pc, #100]	@ (800b344 <GetMaxAppPayloadWithoutFOptsLength+0x74>)
 800b2e0:	589a      	ldr	r2, [r3, r2]
 800b2e2:	2396      	movs	r3, #150	@ 0x96
 800b2e4:	005b      	lsls	r3, r3, #1
 800b2e6:	5cd2      	ldrb	r2, [r2, r3]
 800b2e8:	210c      	movs	r1, #12
 800b2ea:	187b      	adds	r3, r7, r1
 800b2ec:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
 800b2ee:	187b      	adds	r3, r7, r1
 800b2f0:	1dfa      	adds	r2, r7, #7
 800b2f2:	7812      	ldrb	r2, [r2, #0]
 800b2f4:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800b2f6:	187b      	adds	r3, r7, r1
 800b2f8:	220d      	movs	r2, #13
 800b2fa:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 800b2fc:	4b10      	ldr	r3, [pc, #64]	@ (800b340 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 800b2fe:	4a11      	ldr	r2, [pc, #68]	@ (800b344 <GetMaxAppPayloadWithoutFOptsLength+0x74>)
 800b300:	589a      	ldr	r2, [r3, r2]
 800b302:	2340      	movs	r3, #64	@ 0x40
 800b304:	33ff      	adds	r3, #255	@ 0xff
 800b306:	5cd3      	ldrb	r3, [r2, r3]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d002      	beq.n	800b312 <GetMaxAppPayloadWithoutFOptsLength+0x42>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800b30c:	187b      	adds	r3, r7, r1
 800b30e:	220e      	movs	r2, #14
 800b310:	701a      	strb	r2, [r3, #0]
    }
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b312:	4b0b      	ldr	r3, [pc, #44]	@ (800b340 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 800b314:	4a0b      	ldr	r2, [pc, #44]	@ (800b344 <GetMaxAppPayloadWithoutFOptsLength+0x74>)
 800b316:	589b      	ldr	r3, [r3, r2]
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	220c      	movs	r2, #12
 800b31c:	18ba      	adds	r2, r7, r2
 800b31e:	0011      	movs	r1, r2
 800b320:	0018      	movs	r0, r3
 800b322:	f006 f966 	bl	80115f2 <RegionGetPhyParam>
 800b326:	0003      	movs	r3, r0
 800b328:	001a      	movs	r2, r3
 800b32a:	2108      	movs	r1, #8
 800b32c:	187b      	adds	r3, r7, r1
 800b32e:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
 800b330:	187b      	adds	r3, r7, r1
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	b2db      	uxtb	r3, r3
}
 800b336:	0018      	movs	r0, r3
 800b338:	46bd      	mov	sp, r7
 800b33a:	b004      	add	sp, #16
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	46c0      	nop			@ (mov r8, r8)
 800b340:	20000940 	.word	0x20000940
 800b344:	00000484 	.word	0x00000484

0800b348 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800b348:	b5b0      	push	{r4, r5, r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	0004      	movs	r4, r0
 800b350:	0008      	movs	r0, r1
 800b352:	0011      	movs	r1, r2
 800b354:	1dfb      	adds	r3, r7, #7
 800b356:	1c22      	adds	r2, r4, #0
 800b358:	701a      	strb	r2, [r3, #0]
 800b35a:	1dbb      	adds	r3, r7, #6
 800b35c:	1c02      	adds	r2, r0, #0
 800b35e:	701a      	strb	r2, [r3, #0]
 800b360:	1d7b      	adds	r3, r7, #5
 800b362:	1c0a      	adds	r2, r1, #0
 800b364:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
 800b366:	250e      	movs	r5, #14
 800b368:	197b      	adds	r3, r7, r5
 800b36a:	2200      	movs	r2, #0
 800b36c:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
 800b36e:	240c      	movs	r4, #12
 800b370:	193b      	adds	r3, r7, r4
 800b372:	2200      	movs	r2, #0
 800b374:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800b376:	1dbb      	adds	r3, r7, #6
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	b25b      	sxtb	r3, r3
 800b37c:	0018      	movs	r0, r3
 800b37e:	f7ff ffa7 	bl	800b2d0 <GetMaxAppPayloadWithoutFOptsLength>
 800b382:	0003      	movs	r3, r0
 800b384:	001a      	movs	r2, r3
 800b386:	0028      	movs	r0, r5
 800b388:	183b      	adds	r3, r7, r0
 800b38a:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800b38c:	1dfb      	adds	r3, r7, #7
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	b299      	uxth	r1, r3
 800b392:	1d7b      	adds	r3, r7, #5
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	b29a      	uxth	r2, r3
 800b398:	193b      	adds	r3, r7, r4
 800b39a:	188a      	adds	r2, r1, r2
 800b39c:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800b39e:	193a      	adds	r2, r7, r4
 800b3a0:	183b      	adds	r3, r7, r0
 800b3a2:	8812      	ldrh	r2, [r2, #0]
 800b3a4:	881b      	ldrh	r3, [r3, #0]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d805      	bhi.n	800b3b6 <ValidatePayloadLength+0x6e>
 800b3aa:	193b      	adds	r3, r7, r4
 800b3ac:	881b      	ldrh	r3, [r3, #0]
 800b3ae:	2bff      	cmp	r3, #255	@ 0xff
 800b3b0:	d801      	bhi.n	800b3b6 <ValidatePayloadLength+0x6e>
    {
        return true;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e000      	b.n	800b3b8 <ValidatePayloadLength+0x70>
    }
    return false;
 800b3b6:	2300      	movs	r3, #0
}
 800b3b8:	0018      	movs	r0, r3
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	b004      	add	sp, #16
 800b3be:	bdb0      	pop	{r4, r5, r7, pc}

0800b3c0 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800b3c4:	4b04      	ldr	r3, [pc, #16]	@ (800b3d8 <SetMlmeScheduleUplinkIndication+0x18>)
 800b3c6:	4a05      	ldr	r2, [pc, #20]	@ (800b3dc <SetMlmeScheduleUplinkIndication+0x1c>)
 800b3c8:	5c99      	ldrb	r1, [r3, r2]
 800b3ca:	2010      	movs	r0, #16
 800b3cc:	4301      	orrs	r1, r0
 800b3ce:	5499      	strb	r1, [r3, r2]
}
 800b3d0:	46c0      	nop			@ (mov r8, r8)
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	46c0      	nop			@ (mov r8, r8)
 800b3d8:	20000940 	.word	0x20000940
 800b3dc:	00000481 	.word	0x00000481

0800b3e0 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800b3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3e2:	b0a5      	sub	sp, #148	@ 0x94
 800b3e4:	af02      	add	r7, sp, #8
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	000c      	movs	r4, r1
 800b3ea:	0010      	movs	r0, r2
 800b3ec:	0019      	movs	r1, r3
 800b3ee:	1cfb      	adds	r3, r7, #3
 800b3f0:	1c22      	adds	r2, r4, #0
 800b3f2:	701a      	strb	r2, [r3, #0]
 800b3f4:	1cbb      	adds	r3, r7, #2
 800b3f6:	1c02      	adds	r2, r0, #0
 800b3f8:	701a      	strb	r2, [r3, #0]
 800b3fa:	1c7b      	adds	r3, r7, #1
 800b3fc:	1c0a      	adds	r2, r1, #0
 800b3fe:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
 800b400:	236b      	movs	r3, #107	@ 0x6b
 800b402:	18fb      	adds	r3, r7, r3
 800b404:	2200      	movs	r2, #0
 800b406:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
 800b408:	2387      	movs	r3, #135	@ 0x87
 800b40a:	18fb      	adds	r3, r7, r3
 800b40c:	2200      	movs	r2, #0
 800b40e:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b410:	2368      	movs	r3, #104	@ 0x68
 800b412:	18fb      	adds	r3, r7, r3
 800b414:	2200      	movs	r2, #0
 800b416:	801a      	strh	r2, [r3, #0]

    while( macIndex < commandsSize )
 800b418:	f000 fd37 	bl	800be8a <ProcessMacCommands+0xaaa>
    {
        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800b41c:	1cfb      	adds	r3, r7, #3
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	1cfa      	adds	r2, r7, #3
 800b422:	1c59      	adds	r1, r3, #1
 800b424:	7011      	strb	r1, [r2, #0]
 800b426:	001a      	movs	r2, r3
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	189b      	adds	r3, r3, r2
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	2b13      	cmp	r3, #19
 800b430:	d901      	bls.n	800b436 <ProcessMacCommands+0x56>
 800b432:	f000 fd33 	bl	800be9c <ProcessMacCommands+0xabc>
 800b436:	009a      	lsls	r2, r3, #2
 800b438:	4bf2      	ldr	r3, [pc, #968]	@ (800b804 <ProcessMacCommands+0x424>)
 800b43a:	18d3      	adds	r3, r2, r3
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	469f      	mov	pc, r3
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800b440:	2003      	movs	r0, #3
 800b442:	f004 fb59 	bl	800faf8 <LoRaMacConfirmQueueIsCmdActive>
 800b446:	1e03      	subs	r3, r0, #0
 800b448:	d101      	bne.n	800b44e <ProcessMacCommands+0x6e>
 800b44a:	f000 fd17 	bl	800be7c <ProcessMacCommands+0xa9c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800b44e:	2103      	movs	r1, #3
 800b450:	2000      	movs	r0, #0
 800b452:	f004 facd 	bl	800f9f0 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800b456:	1cfb      	adds	r3, r7, #3
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	1cfa      	adds	r2, r7, #3
 800b45c:	1c59      	adds	r1, r3, #1
 800b45e:	7011      	strb	r1, [r2, #0]
 800b460:	001a      	movs	r2, r3
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	189b      	adds	r3, r3, r2
 800b466:	7819      	ldrb	r1, [r3, #0]
 800b468:	4ae7      	ldr	r2, [pc, #924]	@ (800b808 <ProcessMacCommands+0x428>)
 800b46a:	238b      	movs	r3, #139	@ 0x8b
 800b46c:	00db      	lsls	r3, r3, #3
 800b46e:	54d1      	strb	r1, [r2, r3]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800b470:	1cfb      	adds	r3, r7, #3
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	1cfa      	adds	r2, r7, #3
 800b476:	1c59      	adds	r1, r3, #1
 800b478:	7011      	strb	r1, [r2, #0]
 800b47a:	001a      	movs	r2, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	189b      	adds	r3, r3, r2
 800b480:	7819      	ldrb	r1, [r3, #0]
 800b482:	4be1      	ldr	r3, [pc, #900]	@ (800b808 <ProcessMacCommands+0x428>)
 800b484:	4ae1      	ldr	r2, [pc, #900]	@ (800b80c <ProcessMacCommands+0x42c>)
 800b486:	5499      	strb	r1, [r3, r2]
                }
                break;
 800b488:	f000 fcf8 	bl	800be7c <ProcessMacCommands+0xa9c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800b48c:	2657      	movs	r6, #87	@ 0x57
 800b48e:	19bb      	adds	r3, r7, r6
 800b490:	2200      	movs	r2, #0
 800b492:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 800b494:	2456      	movs	r4, #86	@ 0x56
 800b496:	193b      	adds	r3, r7, r4
 800b498:	2200      	movs	r2, #0
 800b49a:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
 800b49c:	2555      	movs	r5, #85	@ 0x55
 800b49e:	197b      	adds	r3, r7, r5
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 800b4a4:	2354      	movs	r3, #84	@ 0x54
 800b4a6:	18fb      	adds	r3, r7, r3
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
 800b4ac:	2187      	movs	r1, #135	@ 0x87
 800b4ae:	187b      	adds	r3, r7, r1
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	4053      	eors	r3, r2
 800b4b6:	b2db      	uxtb	r3, r3
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d101      	bne.n	800b4c0 <ProcessMacCommands+0xe0>
 800b4bc:	f000 fce0 	bl	800be80 <ProcessMacCommands+0xaa0>
                {
                    adrBlockFound = true;
 800b4c0:	187b      	adds	r3, r7, r1
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800b4c6:	1cfb      	adds	r3, r7, #3
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	3b01      	subs	r3, #1
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	18d2      	adds	r2, r2, r3
 800b4d0:	2158      	movs	r1, #88	@ 0x58
 800b4d2:	187b      	adds	r3, r7, r1
 800b4d4:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800b4d6:	1cba      	adds	r2, r7, #2
 800b4d8:	1cfb      	adds	r3, r7, #3
 800b4da:	7812      	ldrb	r2, [r2, #0]
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	1ad3      	subs	r3, r2, r3
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	b2da      	uxtb	r2, r3
 800b4e6:	187b      	adds	r3, r7, r1
 800b4e8:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800b4ea:	4bc7      	ldr	r3, [pc, #796]	@ (800b808 <ProcessMacCommands+0x428>)
 800b4ec:	4ac8      	ldr	r2, [pc, #800]	@ (800b810 <ProcessMacCommands+0x430>)
 800b4ee:	589b      	ldr	r3, [r3, r2]
 800b4f0:	22f2      	movs	r2, #242	@ 0xf2
 800b4f2:	5c9a      	ldrb	r2, [r3, r2]
 800b4f4:	187b      	adds	r3, r7, r1
 800b4f6:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b4f8:	4bc3      	ldr	r3, [pc, #780]	@ (800b808 <ProcessMacCommands+0x428>)
 800b4fa:	4ac5      	ldr	r2, [pc, #788]	@ (800b810 <ProcessMacCommands+0x430>)
 800b4fc:	589a      	ldr	r2, [r3, r2]
 800b4fe:	2396      	movs	r3, #150	@ 0x96
 800b500:	005b      	lsls	r3, r3, #1
 800b502:	5cd2      	ldrb	r2, [r2, r3]
 800b504:	000d      	movs	r5, r1
 800b506:	197b      	adds	r3, r7, r5
 800b508:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b50a:	4bbf      	ldr	r3, [pc, #764]	@ (800b808 <ProcessMacCommands+0x428>)
 800b50c:	4ac0      	ldr	r2, [pc, #768]	@ (800b810 <ProcessMacCommands+0x430>)
 800b50e:	589b      	ldr	r3, [r3, r2]
 800b510:	22f9      	movs	r2, #249	@ 0xf9
 800b512:	569a      	ldrsb	r2, [r3, r2]
 800b514:	197b      	adds	r3, r7, r5
 800b516:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800b518:	4bbb      	ldr	r3, [pc, #748]	@ (800b808 <ProcessMacCommands+0x428>)
 800b51a:	4abd      	ldr	r2, [pc, #756]	@ (800b810 <ProcessMacCommands+0x430>)
 800b51c:	589b      	ldr	r3, [r3, r2]
 800b51e:	22f8      	movs	r2, #248	@ 0xf8
 800b520:	569a      	ldrsb	r2, [r3, r2]
 800b522:	197b      	adds	r3, r7, r5
 800b524:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800b526:	4bb8      	ldr	r3, [pc, #736]	@ (800b808 <ProcessMacCommands+0x428>)
 800b528:	4ab9      	ldr	r2, [pc, #740]	@ (800b810 <ProcessMacCommands+0x430>)
 800b52a:	589a      	ldr	r2, [r3, r2]
 800b52c:	238c      	movs	r3, #140	@ 0x8c
 800b52e:	005b      	lsls	r3, r3, #1
 800b530:	5cd2      	ldrb	r2, [r2, r3]
 800b532:	197b      	adds	r3, r7, r5
 800b534:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 800b536:	4bb4      	ldr	r3, [pc, #720]	@ (800b808 <ProcessMacCommands+0x428>)
 800b538:	4ab5      	ldr	r2, [pc, #724]	@ (800b810 <ProcessMacCommands+0x430>)
 800b53a:	5899      	ldr	r1, [r3, r2]
 800b53c:	197b      	adds	r3, r7, r5
 800b53e:	22e8      	movs	r2, #232	@ 0xe8
 800b540:	0052      	lsls	r2, r2, #1
 800b542:	588a      	ldr	r2, [r1, r2]
 800b544:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 800b546:	4bb0      	ldr	r3, [pc, #704]	@ (800b808 <ProcessMacCommands+0x428>)
 800b548:	4ab1      	ldr	r2, [pc, #708]	@ (800b810 <ProcessMacCommands+0x430>)
 800b54a:	589b      	ldr	r3, [r3, r2]
 800b54c:	7818      	ldrb	r0, [r3, #0]
 800b54e:	193c      	adds	r4, r7, r4
 800b550:	19ba      	adds	r2, r7, r6
 800b552:	1979      	adds	r1, r7, r5
 800b554:	2354      	movs	r3, #84	@ 0x54
 800b556:	18fb      	adds	r3, r7, r3
 800b558:	9301      	str	r3, [sp, #4]
 800b55a:	2555      	movs	r5, #85	@ 0x55
 800b55c:	197b      	adds	r3, r7, r5
 800b55e:	9300      	str	r3, [sp, #0]
 800b560:	0023      	movs	r3, r4
 800b562:	f006 f94d 	bl	8011800 <RegionLinkAdrReq>
 800b566:	0003      	movs	r3, r0
 800b568:	001a      	movs	r2, r3
 800b56a:	216b      	movs	r1, #107	@ 0x6b
 800b56c:	187b      	adds	r3, r7, r1
 800b56e:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800b570:	187b      	adds	r3, r7, r1
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	001a      	movs	r2, r3
 800b576:	2307      	movs	r3, #7
 800b578:	4013      	ands	r3, r2
 800b57a:	2b07      	cmp	r3, #7
 800b57c:	d118      	bne.n	800b5b0 <ProcessMacCommands+0x1d0>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 800b57e:	4ba2      	ldr	r3, [pc, #648]	@ (800b808 <ProcessMacCommands+0x428>)
 800b580:	4aa3      	ldr	r2, [pc, #652]	@ (800b810 <ProcessMacCommands+0x430>)
 800b582:	589b      	ldr	r3, [r3, r2]
 800b584:	19ba      	adds	r2, r7, r6
 800b586:	2100      	movs	r1, #0
 800b588:	5651      	ldrsb	r1, [r2, r1]
 800b58a:	22f9      	movs	r2, #249	@ 0xf9
 800b58c:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 800b58e:	4b9e      	ldr	r3, [pc, #632]	@ (800b808 <ProcessMacCommands+0x428>)
 800b590:	4a9f      	ldr	r2, [pc, #636]	@ (800b810 <ProcessMacCommands+0x430>)
 800b592:	589b      	ldr	r3, [r3, r2]
 800b594:	2456      	movs	r4, #86	@ 0x56
 800b596:	193a      	adds	r2, r7, r4
 800b598:	2100      	movs	r1, #0
 800b59a:	5651      	ldrsb	r1, [r2, r1]
 800b59c:	22f8      	movs	r2, #248	@ 0xf8
 800b59e:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 800b5a0:	4b99      	ldr	r3, [pc, #612]	@ (800b808 <ProcessMacCommands+0x428>)
 800b5a2:	4a9b      	ldr	r2, [pc, #620]	@ (800b810 <ProcessMacCommands+0x430>)
 800b5a4:	589a      	ldr	r2, [r3, r2]
 800b5a6:	197b      	adds	r3, r7, r5
 800b5a8:	7819      	ldrb	r1, [r3, #0]
 800b5aa:	238c      	movs	r3, #140	@ 0x8c
 800b5ac:	005b      	lsls	r3, r3, #1
 800b5ae:	54d1      	strb	r1, [r2, r3]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800b5b0:	2386      	movs	r3, #134	@ 0x86
 800b5b2:	18fb      	adds	r3, r7, r3
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	701a      	strb	r2, [r3, #0]
 800b5b8:	e00c      	b.n	800b5d4 <ProcessMacCommands+0x1f4>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800b5ba:	236b      	movs	r3, #107	@ 0x6b
 800b5bc:	18fb      	adds	r3, r7, r3
 800b5be:	2201      	movs	r2, #1
 800b5c0:	0019      	movs	r1, r3
 800b5c2:	2003      	movs	r0, #3
 800b5c4:	f003 ffd2 	bl	800f56c <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800b5c8:	2186      	movs	r1, #134	@ 0x86
 800b5ca:	187b      	adds	r3, r7, r1
 800b5cc:	781a      	ldrb	r2, [r3, #0]
 800b5ce:	187b      	adds	r3, r7, r1
 800b5d0:	3201      	adds	r2, #1
 800b5d2:	701a      	strb	r2, [r3, #0]
 800b5d4:	2454      	movs	r4, #84	@ 0x54
 800b5d6:	193b      	adds	r3, r7, r4
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	2105      	movs	r1, #5
 800b5dc:	0018      	movs	r0, r3
 800b5de:	f7f4 fd9d 	bl	800011c <__udivsi3>
 800b5e2:	0003      	movs	r3, r0
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	2286      	movs	r2, #134	@ 0x86
 800b5e8:	18ba      	adds	r2, r7, r2
 800b5ea:	7812      	ldrb	r2, [r2, #0]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d3e4      	bcc.n	800b5ba <ProcessMacCommands+0x1da>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800b5f0:	193b      	adds	r3, r7, r4
 800b5f2:	781a      	ldrb	r2, [r3, #0]
 800b5f4:	1cfb      	adds	r3, r7, #3
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	18d3      	adds	r3, r2, r3
 800b5fa:	b2da      	uxtb	r2, r3
 800b5fc:	1cfb      	adds	r3, r7, #3
 800b5fe:	3a01      	subs	r2, #1
 800b600:	701a      	strb	r2, [r3, #0]
                }
                break;
 800b602:	f000 fc3d 	bl	800be80 <ProcessMacCommands+0xaa0>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 800b606:	1cfb      	adds	r3, r7, #3
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	1cfa      	adds	r2, r7, #3
 800b60c:	1c59      	adds	r1, r3, #1
 800b60e:	7011      	strb	r1, [r2, #0]
 800b610:	001a      	movs	r2, r3
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	189b      	adds	r3, r3, r2
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	4a7b      	ldr	r2, [pc, #492]	@ (800b808 <ProcessMacCommands+0x428>)
 800b61a:	497d      	ldr	r1, [pc, #500]	@ (800b810 <ProcessMacCommands+0x430>)
 800b61c:	5852      	ldr	r2, [r2, r1]
 800b61e:	210f      	movs	r1, #15
 800b620:	400b      	ands	r3, r1
 800b622:	b2d9      	uxtb	r1, r3
 800b624:	239e      	movs	r3, #158	@ 0x9e
 800b626:	005b      	lsls	r3, r3, #1
 800b628:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 800b62a:	4b77      	ldr	r3, [pc, #476]	@ (800b808 <ProcessMacCommands+0x428>)
 800b62c:	4a78      	ldr	r2, [pc, #480]	@ (800b810 <ProcessMacCommands+0x430>)
 800b62e:	589a      	ldr	r2, [r3, r2]
 800b630:	239e      	movs	r3, #158	@ 0x9e
 800b632:	005b      	lsls	r3, r3, #1
 800b634:	5cd3      	ldrb	r3, [r2, r3]
 800b636:	001a      	movs	r2, r3
 800b638:	2301      	movs	r3, #1
 800b63a:	4093      	lsls	r3, r2
 800b63c:	0019      	movs	r1, r3
 800b63e:	4b72      	ldr	r3, [pc, #456]	@ (800b808 <ProcessMacCommands+0x428>)
 800b640:	4a73      	ldr	r2, [pc, #460]	@ (800b810 <ProcessMacCommands+0x430>)
 800b642:	589a      	ldr	r2, [r3, r2]
 800b644:	b289      	uxth	r1, r1
 800b646:	23e1      	movs	r3, #225	@ 0xe1
 800b648:	005b      	lsls	r3, r3, #1
 800b64a:	52d1      	strh	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800b64c:	2368      	movs	r3, #104	@ 0x68
 800b64e:	18fb      	adds	r3, r7, r3
 800b650:	2200      	movs	r2, #0
 800b652:	0019      	movs	r1, r3
 800b654:	2004      	movs	r0, #4
 800b656:	f003 ff89 	bl	800f56c <LoRaMacCommandsAddCmd>
                break;
 800b65a:	f000 fc16 	bl	800be8a <ProcessMacCommands+0xaaa>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800b65e:	256b      	movs	r5, #107	@ 0x6b
 800b660:	197b      	adds	r3, r7, r5
 800b662:	2207      	movs	r2, #7
 800b664:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800b666:	1cfb      	adds	r3, r7, #3
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	687a      	ldr	r2, [r7, #4]
 800b66c:	18d3      	adds	r3, r2, r3
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	091b      	lsrs	r3, r3, #4
 800b672:	b2db      	uxtb	r3, r3
 800b674:	b25b      	sxtb	r3, r3
 800b676:	2207      	movs	r2, #7
 800b678:	4013      	ands	r3, r2
 800b67a:	b25a      	sxtb	r2, r3
 800b67c:	204c      	movs	r0, #76	@ 0x4c
 800b67e:	183b      	adds	r3, r7, r0
 800b680:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800b682:	1cfb      	adds	r3, r7, #3
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	18d3      	adds	r3, r2, r3
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	b25b      	sxtb	r3, r3
 800b68e:	220f      	movs	r2, #15
 800b690:	4013      	ands	r3, r2
 800b692:	b25a      	sxtb	r2, r3
 800b694:	183b      	adds	r3, r7, r0
 800b696:	701a      	strb	r2, [r3, #0]
                macIndex++;
 800b698:	1cfb      	adds	r3, r7, #3
 800b69a:	781a      	ldrb	r2, [r3, #0]
 800b69c:	1cfb      	adds	r3, r7, #3
 800b69e:	3201      	adds	r2, #1
 800b6a0:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800b6a2:	1cfb      	adds	r3, r7, #3
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	1cfa      	adds	r2, r7, #3
 800b6a8:	1c59      	adds	r1, r3, #1
 800b6aa:	7011      	strb	r1, [r2, #0]
 800b6ac:	001a      	movs	r2, r3
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	189b      	adds	r3, r3, r2
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	001a      	movs	r2, r3
 800b6b6:	183b      	adds	r3, r7, r0
 800b6b8:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800b6ba:	1cfb      	adds	r3, r7, #3
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	1cfa      	adds	r2, r7, #3
 800b6c0:	1c59      	adds	r1, r3, #1
 800b6c2:	7011      	strb	r1, [r2, #0]
 800b6c4:	001a      	movs	r2, r3
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	189b      	adds	r3, r3, r2
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	021a      	lsls	r2, r3, #8
 800b6ce:	183b      	adds	r3, r7, r0
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	431a      	orrs	r2, r3
 800b6d4:	183b      	adds	r3, r7, r0
 800b6d6:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800b6d8:	1cfb      	adds	r3, r7, #3
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	1cfa      	adds	r2, r7, #3
 800b6de:	1c59      	adds	r1, r3, #1
 800b6e0:	7011      	strb	r1, [r2, #0]
 800b6e2:	001a      	movs	r2, r3
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	189b      	adds	r3, r3, r2
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	041a      	lsls	r2, r3, #16
 800b6ec:	183b      	adds	r3, r7, r0
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	431a      	orrs	r2, r3
 800b6f2:	0004      	movs	r4, r0
 800b6f4:	193b      	adds	r3, r7, r4
 800b6f6:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
 800b6f8:	193b      	adds	r3, r7, r4
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	2264      	movs	r2, #100	@ 0x64
 800b6fe:	435a      	muls	r2, r3
 800b700:	193b      	adds	r3, r7, r4
 800b702:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 800b704:	4b40      	ldr	r3, [pc, #256]	@ (800b808 <ProcessMacCommands+0x428>)
 800b706:	4a42      	ldr	r2, [pc, #264]	@ (800b810 <ProcessMacCommands+0x430>)
 800b708:	589b      	ldr	r3, [r3, r2]
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	193a      	adds	r2, r7, r4
 800b70e:	0011      	movs	r1, r2
 800b710:	0018      	movs	r0, r3
 800b712:	f006 f893 	bl	801183c <RegionRxParamSetupReq>
 800b716:	0003      	movs	r3, r0
 800b718:	001a      	movs	r2, r3
 800b71a:	197b      	adds	r3, r7, r5
 800b71c:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
 800b71e:	197b      	adds	r3, r7, r5
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	001a      	movs	r2, r3
 800b724:	2307      	movs	r3, #7
 800b726:	4013      	ands	r3, r2
 800b728:	2b07      	cmp	r3, #7
 800b72a:	d12d      	bne.n	800b788 <ProcessMacCommands+0x3a8>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800b72c:	193b      	adds	r3, r7, r4
 800b72e:	2100      	movs	r1, #0
 800b730:	5659      	ldrsb	r1, [r3, r1]
 800b732:	4b35      	ldr	r3, [pc, #212]	@ (800b808 <ProcessMacCommands+0x428>)
 800b734:	4a36      	ldr	r2, [pc, #216]	@ (800b810 <ProcessMacCommands+0x430>)
 800b736:	589a      	ldr	r2, [r3, r2]
 800b738:	b2c9      	uxtb	r1, r1
 800b73a:	2390      	movs	r3, #144	@ 0x90
 800b73c:	005b      	lsls	r3, r3, #1
 800b73e:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800b740:	193b      	adds	r3, r7, r4
 800b742:	2100      	movs	r1, #0
 800b744:	5659      	ldrsb	r1, [r3, r1]
 800b746:	4b30      	ldr	r3, [pc, #192]	@ (800b808 <ProcessMacCommands+0x428>)
 800b748:	4a31      	ldr	r2, [pc, #196]	@ (800b810 <ProcessMacCommands+0x430>)
 800b74a:	589a      	ldr	r2, [r3, r2]
 800b74c:	b2c9      	uxtb	r1, r1
 800b74e:	2394      	movs	r3, #148	@ 0x94
 800b750:	005b      	lsls	r3, r3, #1
 800b752:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800b754:	4b2c      	ldr	r3, [pc, #176]	@ (800b808 <ProcessMacCommands+0x428>)
 800b756:	4a2e      	ldr	r2, [pc, #184]	@ (800b810 <ProcessMacCommands+0x430>)
 800b758:	589a      	ldr	r2, [r3, r2]
 800b75a:	193b      	adds	r3, r7, r4
 800b75c:	6859      	ldr	r1, [r3, #4]
 800b75e:	238e      	movs	r3, #142	@ 0x8e
 800b760:	005b      	lsls	r3, r3, #1
 800b762:	50d1      	str	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800b764:	4b28      	ldr	r3, [pc, #160]	@ (800b808 <ProcessMacCommands+0x428>)
 800b766:	4a2a      	ldr	r2, [pc, #168]	@ (800b810 <ProcessMacCommands+0x430>)
 800b768:	589a      	ldr	r2, [r3, r2]
 800b76a:	193b      	adds	r3, r7, r4
 800b76c:	6859      	ldr	r1, [r3, #4]
 800b76e:	2392      	movs	r3, #146	@ 0x92
 800b770:	005b      	lsls	r3, r3, #1
 800b772:	50d1      	str	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800b774:	193b      	adds	r3, r7, r4
 800b776:	2101      	movs	r1, #1
 800b778:	5659      	ldrsb	r1, [r3, r1]
 800b77a:	4b23      	ldr	r3, [pc, #140]	@ (800b808 <ProcessMacCommands+0x428>)
 800b77c:	4a24      	ldr	r2, [pc, #144]	@ (800b810 <ProcessMacCommands+0x430>)
 800b77e:	589a      	ldr	r2, [r3, r2]
 800b780:	b2c9      	uxtb	r1, r1
 800b782:	231a      	movs	r3, #26
 800b784:	33ff      	adds	r3, #255	@ 0xff
 800b786:	54d1      	strb	r1, [r2, r3]
                }
                macCmdPayload[0] = status;
 800b788:	236b      	movs	r3, #107	@ 0x6b
 800b78a:	18fb      	adds	r3, r7, r3
 800b78c:	781a      	ldrb	r2, [r3, #0]
 800b78e:	2168      	movs	r1, #104	@ 0x68
 800b790:	187b      	adds	r3, r7, r1
 800b792:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800b794:	187b      	adds	r3, r7, r1
 800b796:	2201      	movs	r2, #1
 800b798:	0019      	movs	r1, r3
 800b79a:	2005      	movs	r0, #5
 800b79c:	f003 fee6 	bl	800f56c <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800b7a0:	f7ff fe0e 	bl	800b3c0 <SetMlmeScheduleUplinkIndication>
                break;
 800b7a4:	e371      	b.n	800be8a <ProcessMacCommands+0xaaa>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800b7a6:	2185      	movs	r1, #133	@ 0x85
 800b7a8:	187b      	adds	r3, r7, r1
 800b7aa:	22ff      	movs	r2, #255	@ 0xff
 800b7ac:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800b7ae:	4a16      	ldr	r2, [pc, #88]	@ (800b808 <ProcessMacCommands+0x428>)
 800b7b0:	23d2      	movs	r3, #210	@ 0xd2
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	58d3      	ldr	r3, [r2, r3]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d00f      	beq.n	800b7da <ProcessMacCommands+0x3fa>
 800b7ba:	4a13      	ldr	r2, [pc, #76]	@ (800b808 <ProcessMacCommands+0x428>)
 800b7bc:	23d2      	movs	r3, #210	@ 0xd2
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	58d3      	ldr	r3, [r2, r3]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d008      	beq.n	800b7da <ProcessMacCommands+0x3fa>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800b7c8:	4a0f      	ldr	r2, [pc, #60]	@ (800b808 <ProcessMacCommands+0x428>)
 800b7ca:	23d2      	movs	r3, #210	@ 0xd2
 800b7cc:	009b      	lsls	r3, r3, #2
 800b7ce:	58d3      	ldr	r3, [r2, r3]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	187c      	adds	r4, r7, r1
 800b7d4:	4798      	blx	r3
 800b7d6:	0003      	movs	r3, r0
 800b7d8:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
 800b7da:	2168      	movs	r1, #104	@ 0x68
 800b7dc:	187b      	adds	r3, r7, r1
 800b7de:	2285      	movs	r2, #133	@ 0x85
 800b7e0:	18ba      	adds	r2, r7, r2
 800b7e2:	7812      	ldrb	r2, [r2, #0]
 800b7e4:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800b7e6:	1c7b      	adds	r3, r7, #1
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	223f      	movs	r2, #63	@ 0x3f
 800b7ec:	4013      	ands	r3, r2
 800b7ee:	b2da      	uxtb	r2, r3
 800b7f0:	187b      	adds	r3, r7, r1
 800b7f2:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800b7f4:	187b      	adds	r3, r7, r1
 800b7f6:	2202      	movs	r2, #2
 800b7f8:	0019      	movs	r1, r3
 800b7fa:	2006      	movs	r0, #6
 800b7fc:	f003 feb6 	bl	800f56c <LoRaMacCommandsAddCmd>
                break;
 800b800:	e343      	b.n	800be8a <ProcessMacCommands+0xaaa>
 800b802:	46c0      	nop			@ (mov r8, r8)
 800b804:	0801b148 	.word	0x0801b148
 800b808:	20000940 	.word	0x20000940
 800b80c:	00000459 	.word	0x00000459
 800b810:	00000484 	.word	0x00000484
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800b814:	246b      	movs	r4, #107	@ 0x6b
 800b816:	193b      	adds	r3, r7, r4
 800b818:	2203      	movs	r2, #3
 800b81a:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
 800b81c:	1cfb      	adds	r3, r7, #3
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	1cfa      	adds	r2, r7, #3
 800b822:	1c59      	adds	r1, r3, #1
 800b824:	7011      	strb	r1, [r2, #0]
 800b826:	001a      	movs	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	189b      	adds	r3, r3, r2
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	b25a      	sxtb	r2, r3
 800b830:	2544      	movs	r5, #68	@ 0x44
 800b832:	197b      	adds	r3, r7, r5
 800b834:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
 800b836:	197b      	adds	r3, r7, r5
 800b838:	2038      	movs	r0, #56	@ 0x38
 800b83a:	183a      	adds	r2, r7, r0
 800b83c:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800b83e:	1cfb      	adds	r3, r7, #3
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	1cfa      	adds	r2, r7, #3
 800b844:	1c59      	adds	r1, r3, #1
 800b846:	7011      	strb	r1, [r2, #0]
 800b848:	001a      	movs	r2, r3
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	189b      	adds	r3, r3, r2
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	001a      	movs	r2, r3
 800b852:	183b      	adds	r3, r7, r0
 800b854:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800b856:	1cfb      	adds	r3, r7, #3
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	1cfa      	adds	r2, r7, #3
 800b85c:	1c59      	adds	r1, r3, #1
 800b85e:	7011      	strb	r1, [r2, #0]
 800b860:	001a      	movs	r2, r3
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	189b      	adds	r3, r3, r2
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	021a      	lsls	r2, r3, #8
 800b86a:	183b      	adds	r3, r7, r0
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	431a      	orrs	r2, r3
 800b870:	183b      	adds	r3, r7, r0
 800b872:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800b874:	1cfb      	adds	r3, r7, #3
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	1cfa      	adds	r2, r7, #3
 800b87a:	1c59      	adds	r1, r3, #1
 800b87c:	7011      	strb	r1, [r2, #0]
 800b87e:	001a      	movs	r2, r3
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	189b      	adds	r3, r3, r2
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	041a      	lsls	r2, r3, #16
 800b888:	183b      	adds	r3, r7, r0
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	431a      	orrs	r2, r3
 800b88e:	183b      	adds	r3, r7, r0
 800b890:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
 800b892:	183b      	adds	r3, r7, r0
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2264      	movs	r2, #100	@ 0x64
 800b898:	435a      	muls	r2, r3
 800b89a:	183b      	adds	r3, r7, r0
 800b89c:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
 800b89e:	183b      	adds	r3, r7, r0
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
 800b8a4:	1cfb      	adds	r3, r7, #3
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	1cfa      	adds	r2, r7, #3
 800b8aa:	1c59      	adds	r1, r3, #1
 800b8ac:	7011      	strb	r1, [r2, #0]
 800b8ae:	001a      	movs	r2, r3
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	189b      	adds	r3, r3, r2
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	b25a      	sxtb	r2, r3
 800b8b8:	183b      	adds	r3, r7, r0
 800b8ba:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 800b8bc:	4ba2      	ldr	r3, [pc, #648]	@ (800bb48 <ProcessMacCommands+0x768>)
 800b8be:	4aa3      	ldr	r2, [pc, #652]	@ (800bb4c <ProcessMacCommands+0x76c>)
 800b8c0:	589b      	ldr	r3, [r3, r2]
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	197a      	adds	r2, r7, r5
 800b8c6:	0011      	movs	r1, r2
 800b8c8:	0018      	movs	r0, r3
 800b8ca:	f005 ffcd 	bl	8011868 <RegionNewChannelReq>
 800b8ce:	0003      	movs	r3, r0
 800b8d0:	001a      	movs	r2, r3
 800b8d2:	193b      	adds	r3, r7, r4
 800b8d4:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
 800b8d6:	193b      	adds	r3, r7, r4
 800b8d8:	781a      	ldrb	r2, [r3, #0]
 800b8da:	2168      	movs	r1, #104	@ 0x68
 800b8dc:	187b      	adds	r3, r7, r1
 800b8de:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800b8e0:	187b      	adds	r3, r7, r1
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	0019      	movs	r1, r3
 800b8e6:	2007      	movs	r0, #7
 800b8e8:	f003 fe40 	bl	800f56c <LoRaMacCommandsAddCmd>
                break;
 800b8ec:	e2cd      	b.n	800be8a <ProcessMacCommands+0xaaa>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800b8ee:	1cfb      	adds	r3, r7, #3
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	1cfa      	adds	r2, r7, #3
 800b8f4:	1c59      	adds	r1, r3, #1
 800b8f6:	7011      	strb	r1, [r2, #0]
 800b8f8:	001a      	movs	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	189b      	adds	r3, r3, r2
 800b8fe:	781a      	ldrb	r2, [r3, #0]
 800b900:	2084      	movs	r0, #132	@ 0x84
 800b902:	183b      	adds	r3, r7, r0
 800b904:	210f      	movs	r1, #15
 800b906:	400a      	ands	r2, r1
 800b908:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
 800b90a:	183b      	adds	r3, r7, r0
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d104      	bne.n	800b91c <ProcessMacCommands+0x53c>
                {
                    delay++;
 800b912:	183b      	adds	r3, r7, r0
 800b914:	781a      	ldrb	r2, [r3, #0]
 800b916:	183b      	adds	r3, r7, r0
 800b918:	3201      	adds	r2, #1
 800b91a:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 800b91c:	2384      	movs	r3, #132	@ 0x84
 800b91e:	18fb      	adds	r3, r7, r3
 800b920:	781a      	ldrb	r2, [r3, #0]
 800b922:	0013      	movs	r3, r2
 800b924:	015b      	lsls	r3, r3, #5
 800b926:	1a9b      	subs	r3, r3, r2
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	189b      	adds	r3, r3, r2
 800b92c:	00db      	lsls	r3, r3, #3
 800b92e:	0019      	movs	r1, r3
 800b930:	4b85      	ldr	r3, [pc, #532]	@ (800bb48 <ProcessMacCommands+0x768>)
 800b932:	4a86      	ldr	r2, [pc, #536]	@ (800bb4c <ProcessMacCommands+0x76c>)
 800b934:	589a      	ldr	r2, [r3, r2]
 800b936:	2384      	movs	r3, #132	@ 0x84
 800b938:	005b      	lsls	r3, r3, #1
 800b93a:	50d1      	str	r1, [r2, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800b93c:	4b82      	ldr	r3, [pc, #520]	@ (800bb48 <ProcessMacCommands+0x768>)
 800b93e:	4a83      	ldr	r2, [pc, #524]	@ (800bb4c <ProcessMacCommands+0x76c>)
 800b940:	589a      	ldr	r2, [r3, r2]
 800b942:	2384      	movs	r3, #132	@ 0x84
 800b944:	005b      	lsls	r3, r3, #1
 800b946:	58d3      	ldr	r3, [r2, r3]
 800b948:	4a7f      	ldr	r2, [pc, #508]	@ (800bb48 <ProcessMacCommands+0x768>)
 800b94a:	4980      	ldr	r1, [pc, #512]	@ (800bb4c <ProcessMacCommands+0x76c>)
 800b94c:	5852      	ldr	r2, [r2, r1]
 800b94e:	21fa      	movs	r1, #250	@ 0xfa
 800b950:	0089      	lsls	r1, r1, #2
 800b952:	1859      	adds	r1, r3, r1
 800b954:	2386      	movs	r3, #134	@ 0x86
 800b956:	005b      	lsls	r3, r3, #1
 800b958:	50d1      	str	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800b95a:	2368      	movs	r3, #104	@ 0x68
 800b95c:	18fb      	adds	r3, r7, r3
 800b95e:	2200      	movs	r2, #0
 800b960:	0019      	movs	r1, r3
 800b962:	2008      	movs	r0, #8
 800b964:	f003 fe02 	bl	800f56c <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800b968:	f7ff fd2a 	bl	800b3c0 <SetMlmeScheduleUplinkIndication>
                break;
 800b96c:	e28d      	b.n	800be8a <ProcessMacCommands+0xaaa>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800b96e:	1cfb      	adds	r3, r7, #3
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	1cfa      	adds	r2, r7, #3
 800b974:	1c59      	adds	r1, r3, #1
 800b976:	7011      	strb	r1, [r2, #0]
 800b978:	001a      	movs	r2, r3
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	189a      	adds	r2, r3, r2
 800b97e:	2076      	movs	r0, #118	@ 0x76
 800b980:	183b      	adds	r3, r7, r0
 800b982:	7812      	ldrb	r2, [r2, #0]
 800b984:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
 800b986:	2134      	movs	r1, #52	@ 0x34
 800b988:	187b      	adds	r3, r7, r1
 800b98a:	2200      	movs	r2, #0
 800b98c:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
 800b98e:	187b      	adds	r3, r7, r1
 800b990:	2200      	movs	r2, #0
 800b992:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800b994:	183b      	adds	r3, r7, r0
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	2220      	movs	r2, #32
 800b99a:	4013      	ands	r3, r2
 800b99c:	d002      	beq.n	800b9a4 <ProcessMacCommands+0x5c4>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800b99e:	187b      	adds	r3, r7, r1
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800b9a4:	2376      	movs	r3, #118	@ 0x76
 800b9a6:	18fb      	adds	r3, r7, r3
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	2210      	movs	r2, #16
 800b9ac:	4013      	ands	r3, r2
 800b9ae:	d003      	beq.n	800b9b8 <ProcessMacCommands+0x5d8>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800b9b0:	2334      	movs	r3, #52	@ 0x34
 800b9b2:	18fb      	adds	r3, r7, r3
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800b9b8:	2376      	movs	r3, #118	@ 0x76
 800b9ba:	18fb      	adds	r3, r7, r3
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	220f      	movs	r2, #15
 800b9c0:	4013      	ands	r3, r2
 800b9c2:	b2da      	uxtb	r2, r3
 800b9c4:	2434      	movs	r4, #52	@ 0x34
 800b9c6:	193b      	adds	r3, r7, r4
 800b9c8:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 800b9ca:	4b5f      	ldr	r3, [pc, #380]	@ (800bb48 <ProcessMacCommands+0x768>)
 800b9cc:	4a5f      	ldr	r2, [pc, #380]	@ (800bb4c <ProcessMacCommands+0x76c>)
 800b9ce:	589b      	ldr	r3, [r3, r2]
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	193a      	adds	r2, r7, r4
 800b9d4:	0011      	movs	r1, r2
 800b9d6:	0018      	movs	r0, r3
 800b9d8:	f005 ff5c 	bl	8011894 <RegionTxParamSetupReq>
 800b9dc:	0003      	movs	r3, r0
 800b9de:	3301      	adds	r3, #1
 800b9e0:	d100      	bne.n	800b9e4 <ProcessMacCommands+0x604>
 800b9e2:	e24f      	b.n	800be84 <ProcessMacCommands+0xaa4>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800b9e4:	4b58      	ldr	r3, [pc, #352]	@ (800bb48 <ProcessMacCommands+0x768>)
 800b9e6:	4a59      	ldr	r2, [pc, #356]	@ (800bb4c <ProcessMacCommands+0x76c>)
 800b9e8:	589a      	ldr	r2, [r3, r2]
 800b9ea:	193b      	adds	r3, r7, r4
 800b9ec:	7819      	ldrb	r1, [r3, #0]
 800b9ee:	2396      	movs	r3, #150	@ 0x96
 800b9f0:	005b      	lsls	r3, r3, #1
 800b9f2:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800b9f4:	4b54      	ldr	r3, [pc, #336]	@ (800bb48 <ProcessMacCommands+0x768>)
 800b9f6:	4a55      	ldr	r2, [pc, #340]	@ (800bb4c <ProcessMacCommands+0x76c>)
 800b9f8:	589a      	ldr	r2, [r3, r2]
 800b9fa:	193b      	adds	r3, r7, r4
 800b9fc:	7859      	ldrb	r1, [r3, #1]
 800b9fe:	232e      	movs	r3, #46	@ 0x2e
 800ba00:	33ff      	adds	r3, #255	@ 0xff
 800ba02:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800ba04:	193b      	adds	r3, r7, r4
 800ba06:	789b      	ldrb	r3, [r3, #2]
 800ba08:	001a      	movs	r2, r3
 800ba0a:	4b51      	ldr	r3, [pc, #324]	@ (800bb50 <ProcessMacCommands+0x770>)
 800ba0c:	5c9a      	ldrb	r2, [r3, r2]
 800ba0e:	4b4e      	ldr	r3, [pc, #312]	@ (800bb48 <ProcessMacCommands+0x768>)
 800ba10:	494e      	ldr	r1, [pc, #312]	@ (800bb4c <ProcessMacCommands+0x76c>)
 800ba12:	585c      	ldr	r4, [r3, r1]
 800ba14:	0010      	movs	r0, r2
 800ba16:	f7f5 fb79 	bl	800110c <__aeabi_ui2f>
 800ba1a:	1c02      	adds	r2, r0, #0
 800ba1c:	2398      	movs	r3, #152	@ 0x98
 800ba1e:	005b      	lsls	r3, r3, #1
 800ba20:	50e2      	str	r2, [r4, r3]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800ba22:	2130      	movs	r1, #48	@ 0x30
 800ba24:	187b      	adds	r3, r7, r1
 800ba26:	2202      	movs	r2, #2
 800ba28:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ba2a:	4b47      	ldr	r3, [pc, #284]	@ (800bb48 <ProcessMacCommands+0x768>)
 800ba2c:	4a47      	ldr	r2, [pc, #284]	@ (800bb4c <ProcessMacCommands+0x76c>)
 800ba2e:	589a      	ldr	r2, [r3, r2]
 800ba30:	2396      	movs	r3, #150	@ 0x96
 800ba32:	005b      	lsls	r3, r3, #1
 800ba34:	5cd2      	ldrb	r2, [r2, r3]
 800ba36:	187b      	adds	r3, r7, r1
 800ba38:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ba3a:	4b43      	ldr	r3, [pc, #268]	@ (800bb48 <ProcessMacCommands+0x768>)
 800ba3c:	4a43      	ldr	r2, [pc, #268]	@ (800bb4c <ProcessMacCommands+0x76c>)
 800ba3e:	589b      	ldr	r3, [r3, r2]
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	187a      	adds	r2, r7, r1
 800ba44:	0011      	movs	r1, r2
 800ba46:	0018      	movs	r0, r3
 800ba48:	f005 fdd3 	bl	80115f2 <RegionGetPhyParam>
 800ba4c:	0003      	movs	r3, r0
 800ba4e:	001a      	movs	r2, r3
 800ba50:	212c      	movs	r1, #44	@ 0x2c
 800ba52:	187b      	adds	r3, r7, r1
 800ba54:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 800ba56:	187b      	adds	r3, r7, r1
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	b259      	sxtb	r1, r3
 800ba5c:	4b3a      	ldr	r3, [pc, #232]	@ (800bb48 <ProcessMacCommands+0x768>)
 800ba5e:	4a3b      	ldr	r2, [pc, #236]	@ (800bb4c <ProcessMacCommands+0x76c>)
 800ba60:	589b      	ldr	r3, [r3, r2]
 800ba62:	22f9      	movs	r2, #249	@ 0xf9
 800ba64:	5698      	ldrsb	r0, [r3, r2]
 800ba66:	4b38      	ldr	r3, [pc, #224]	@ (800bb48 <ProcessMacCommands+0x768>)
 800ba68:	4a38      	ldr	r2, [pc, #224]	@ (800bb4c <ProcessMacCommands+0x76c>)
 800ba6a:	589b      	ldr	r3, [r3, r2]
 800ba6c:	1c04      	adds	r4, r0, #0
 800ba6e:	1c08      	adds	r0, r1, #0
 800ba70:	b241      	sxtb	r1, r0
 800ba72:	b262      	sxtb	r2, r4
 800ba74:	4291      	cmp	r1, r2
 800ba76:	da00      	bge.n	800ba7a <ProcessMacCommands+0x69a>
 800ba78:	1c20      	adds	r0, r4, #0
 800ba7a:	b241      	sxtb	r1, r0
 800ba7c:	22f9      	movs	r2, #249	@ 0xf9
 800ba7e:	5499      	strb	r1, [r3, r2]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800ba80:	2368      	movs	r3, #104	@ 0x68
 800ba82:	18fb      	adds	r3, r7, r3
 800ba84:	2200      	movs	r2, #0
 800ba86:	0019      	movs	r1, r3
 800ba88:	2009      	movs	r0, #9
 800ba8a:	f003 fd6f 	bl	800f56c <LoRaMacCommandsAddCmd>
                }
                break;
 800ba8e:	e1f9      	b.n	800be84 <ProcessMacCommands+0xaa4>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800ba90:	246b      	movs	r4, #107	@ 0x6b
 800ba92:	193b      	adds	r3, r7, r4
 800ba94:	2203      	movs	r2, #3
 800ba96:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
 800ba98:	1cfb      	adds	r3, r7, #3
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	1cfa      	adds	r2, r7, #3
 800ba9e:	1c59      	adds	r1, r3, #1
 800baa0:	7011      	strb	r1, [r2, #0]
 800baa2:	001a      	movs	r2, r3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	189b      	adds	r3, r3, r2
 800baa8:	781a      	ldrb	r2, [r3, #0]
 800baaa:	2024      	movs	r0, #36	@ 0x24
 800baac:	183b      	adds	r3, r7, r0
 800baae:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800bab0:	1cfb      	adds	r3, r7, #3
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	1cfa      	adds	r2, r7, #3
 800bab6:	1c59      	adds	r1, r3, #1
 800bab8:	7011      	strb	r1, [r2, #0]
 800baba:	001a      	movs	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	189b      	adds	r3, r3, r2
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	001a      	movs	r2, r3
 800bac4:	183b      	adds	r3, r7, r0
 800bac6:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800bac8:	1cfb      	adds	r3, r7, #3
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	1cfa      	adds	r2, r7, #3
 800bace:	1c59      	adds	r1, r3, #1
 800bad0:	7011      	strb	r1, [r2, #0]
 800bad2:	001a      	movs	r2, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	189b      	adds	r3, r3, r2
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	021a      	lsls	r2, r3, #8
 800badc:	183b      	adds	r3, r7, r0
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	431a      	orrs	r2, r3
 800bae2:	183b      	adds	r3, r7, r0
 800bae4:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800bae6:	1cfb      	adds	r3, r7, #3
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	1cfa      	adds	r2, r7, #3
 800baec:	1c59      	adds	r1, r3, #1
 800baee:	7011      	strb	r1, [r2, #0]
 800baf0:	001a      	movs	r2, r3
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	189b      	adds	r3, r3, r2
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	041a      	lsls	r2, r3, #16
 800bafa:	183b      	adds	r3, r7, r0
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	431a      	orrs	r2, r3
 800bb00:	0001      	movs	r1, r0
 800bb02:	187b      	adds	r3, r7, r1
 800bb04:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
 800bb06:	187b      	adds	r3, r7, r1
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	2264      	movs	r2, #100	@ 0x64
 800bb0c:	435a      	muls	r2, r3
 800bb0e:	187b      	adds	r3, r7, r1
 800bb10:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 800bb12:	4b0d      	ldr	r3, [pc, #52]	@ (800bb48 <ProcessMacCommands+0x768>)
 800bb14:	4a0d      	ldr	r2, [pc, #52]	@ (800bb4c <ProcessMacCommands+0x76c>)
 800bb16:	589b      	ldr	r3, [r3, r2]
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	187a      	adds	r2, r7, r1
 800bb1c:	0011      	movs	r1, r2
 800bb1e:	0018      	movs	r0, r3
 800bb20:	f005 fece 	bl	80118c0 <RegionDlChannelReq>
 800bb24:	0003      	movs	r3, r0
 800bb26:	001a      	movs	r2, r3
 800bb28:	193b      	adds	r3, r7, r4
 800bb2a:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 800bb2c:	193b      	adds	r3, r7, r4
 800bb2e:	781a      	ldrb	r2, [r3, #0]
 800bb30:	2168      	movs	r1, #104	@ 0x68
 800bb32:	187b      	adds	r3, r7, r1
 800bb34:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800bb36:	187b      	adds	r3, r7, r1
 800bb38:	2201      	movs	r2, #1
 800bb3a:	0019      	movs	r1, r3
 800bb3c:	200a      	movs	r0, #10
 800bb3e:	f003 fd15 	bl	800f56c <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800bb42:	f7ff fc3d 	bl	800b3c0 <SetMlmeScheduleUplinkIndication>
                break;
 800bb46:	e1a0      	b.n	800be8a <ProcessMacCommands+0xaaa>
 800bb48:	20000940 	.word	0x20000940
 800bb4c:	00000484 	.word	0x00000484
 800bb50:	0801b124 	.word	0x0801b124
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                SysTime_t gpsEpochTime = { 0 };
 800bb54:	241c      	movs	r4, #28
 800bb56:	193b      	adds	r3, r7, r4
 800bb58:	0018      	movs	r0, r3
 800bb5a:	2308      	movs	r3, #8
 800bb5c:	001a      	movs	r2, r3
 800bb5e:	2100      	movs	r1, #0
 800bb60:	f00d ff24 	bl	80199ac <memset>
                SysTime_t sysTime = { 0 };
 800bb64:	2514      	movs	r5, #20
 800bb66:	197b      	adds	r3, r7, r5
 800bb68:	0018      	movs	r0, r3
 800bb6a:	2308      	movs	r3, #8
 800bb6c:	001a      	movs	r2, r3
 800bb6e:	2100      	movs	r1, #0
 800bb70:	f00d ff1c 	bl	80199ac <memset>
                SysTime_t sysTimeCurrent = { 0 };
 800bb74:	260c      	movs	r6, #12
 800bb76:	19bb      	adds	r3, r7, r6
 800bb78:	0018      	movs	r0, r3
 800bb7a:	2308      	movs	r3, #8
 800bb7c:	001a      	movs	r2, r3
 800bb7e:	2100      	movs	r1, #0
 800bb80:	f00d ff14 	bl	80199ac <memset>

                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800bb84:	1cfb      	adds	r3, r7, #3
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	1cfa      	adds	r2, r7, #3
 800bb8a:	1c59      	adds	r1, r3, #1
 800bb8c:	7011      	strb	r1, [r2, #0]
 800bb8e:	001a      	movs	r2, r3
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	189b      	adds	r3, r3, r2
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	001a      	movs	r2, r3
 800bb98:	193b      	adds	r3, r7, r4
 800bb9a:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800bb9c:	1cfb      	adds	r3, r7, #3
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	1cfa      	adds	r2, r7, #3
 800bba2:	1c59      	adds	r1, r3, #1
 800bba4:	7011      	strb	r1, [r2, #0]
 800bba6:	001a      	movs	r2, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	189b      	adds	r3, r3, r2
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	021a      	lsls	r2, r3, #8
 800bbb0:	193b      	adds	r3, r7, r4
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	431a      	orrs	r2, r3
 800bbb6:	0020      	movs	r0, r4
 800bbb8:	193b      	adds	r3, r7, r4
 800bbba:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800bbbc:	1cfb      	adds	r3, r7, #3
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	1cfa      	adds	r2, r7, #3
 800bbc2:	1c59      	adds	r1, r3, #1
 800bbc4:	7011      	strb	r1, [r2, #0]
 800bbc6:	001a      	movs	r2, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	189b      	adds	r3, r3, r2
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	041a      	lsls	r2, r3, #16
 800bbd0:	183b      	adds	r3, r7, r0
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	431a      	orrs	r2, r3
 800bbd6:	183b      	adds	r3, r7, r0
 800bbd8:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800bbda:	1cfb      	adds	r3, r7, #3
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	1cfa      	adds	r2, r7, #3
 800bbe0:	1c59      	adds	r1, r3, #1
 800bbe2:	7011      	strb	r1, [r2, #0]
 800bbe4:	001a      	movs	r2, r3
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	189b      	adds	r3, r3, r2
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	061a      	lsls	r2, r3, #24
 800bbee:	183b      	adds	r3, r7, r0
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	431a      	orrs	r2, r3
 800bbf4:	183b      	adds	r3, r7, r0
 800bbf6:	601a      	str	r2, [r3, #0]
                gpsEpochTime.SubSeconds = payload[macIndex++];
 800bbf8:	1cfb      	adds	r3, r7, #3
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	1cfa      	adds	r2, r7, #3
 800bbfe:	1c59      	adds	r1, r3, #1
 800bc00:	7011      	strb	r1, [r2, #0]
 800bc02:	001a      	movs	r2, r3
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	189b      	adds	r3, r3, r2
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	b21a      	sxth	r2, r3
 800bc0c:	183b      	adds	r3, r7, r0
 800bc0e:	809a      	strh	r2, [r3, #4]

                // Convert the fractional second received in ms
                // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800bc10:	0001      	movs	r1, r0
 800bc12:	183b      	adds	r3, r7, r0
 800bc14:	2204      	movs	r2, #4
 800bc16:	5e9b      	ldrsh	r3, [r3, r2]
 800bc18:	001a      	movs	r2, r3
 800bc1a:	0013      	movs	r3, r2
 800bc1c:	015b      	lsls	r3, r3, #5
 800bc1e:	1a9b      	subs	r3, r3, r2
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	189b      	adds	r3, r3, r2
 800bc24:	00db      	lsls	r3, r3, #3
 800bc26:	121b      	asrs	r3, r3, #8
 800bc28:	b21a      	sxth	r2, r3
 800bc2a:	187b      	adds	r3, r7, r1
 800bc2c:	809a      	strh	r2, [r3, #4]

                // Copy received GPS Epoch time into system time
                sysTime = gpsEpochTime;
 800bc2e:	197b      	adds	r3, r7, r5
 800bc30:	187a      	adds	r2, r7, r1
 800bc32:	ca03      	ldmia	r2!, {r0, r1}
 800bc34:	c303      	stmia	r3!, {r0, r1}
                // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800bc36:	197b      	adds	r3, r7, r5
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a9a      	ldr	r2, [pc, #616]	@ (800bea4 <ProcessMacCommands+0xac4>)
 800bc3c:	189a      	adds	r2, r3, r2
 800bc3e:	002c      	movs	r4, r5
 800bc40:	197b      	adds	r3, r7, r5
 800bc42:	601a      	str	r2, [r3, #0]

                // Compensate time difference between Tx Done time and now
                sysTimeCurrent = SysTimeGet( );
 800bc44:	19bb      	adds	r3, r7, r6
 800bc46:	0018      	movs	r0, r3
 800bc48:	f009 f8c8 	bl	8014ddc <SysTimeGet>
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800bc4c:	236c      	movs	r3, #108	@ 0x6c
 800bc4e:	18fd      	adds	r5, r7, r3
 800bc50:	4895      	ldr	r0, [pc, #596]	@ (800bea8 <ProcessMacCommands+0xac8>)
 800bc52:	23ce      	movs	r3, #206	@ 0xce
 800bc54:	0099      	lsls	r1, r3, #2
 800bc56:	0026      	movs	r6, r4
 800bc58:	193a      	adds	r2, r7, r4
 800bc5a:	2404      	movs	r4, #4
 800bc5c:	1843      	adds	r3, r0, r1
 800bc5e:	191c      	adds	r4, r3, r4
 800bc60:	466b      	mov	r3, sp
 800bc62:	6824      	ldr	r4, [r4, #0]
 800bc64:	601c      	str	r4, [r3, #0]
 800bc66:	5843      	ldr	r3, [r0, r1]
 800bc68:	6811      	ldr	r1, [r2, #0]
 800bc6a:	6852      	ldr	r2, [r2, #4]
 800bc6c:	0028      	movs	r0, r5
 800bc6e:	f009 f837 	bl	8014ce0 <SysTimeSub>
 800bc72:	0035      	movs	r5, r6
 800bc74:	197c      	adds	r4, r7, r5
 800bc76:	236c      	movs	r3, #108	@ 0x6c
 800bc78:	18fb      	adds	r3, r7, r3
 800bc7a:	260c      	movs	r6, #12
 800bc7c:	19ba      	adds	r2, r7, r6
 800bc7e:	4669      	mov	r1, sp
 800bc80:	6858      	ldr	r0, [r3, #4]
 800bc82:	6008      	str	r0, [r1, #0]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	6811      	ldr	r1, [r2, #0]
 800bc88:	6852      	ldr	r2, [r2, #4]
 800bc8a:	0020      	movs	r0, r4
 800bc8c:	f008 ffd6 	bl	8014c3c <SysTimeAdd>

                // Apply the new system time.
                SysTimeSet( sysTime );
 800bc90:	197b      	adds	r3, r7, r5
 800bc92:	6818      	ldr	r0, [r3, #0]
 800bc94:	6859      	ldr	r1, [r3, #4]
 800bc96:	f009 f871 	bl	8014d7c <SysTimeSet>
                LoRaMacClassBDeviceTimeAns( );
 800bc9a:	f003 fad7 	bl	800f24c <LoRaMacClassBDeviceTimeAns>
                MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800bc9e:	4a82      	ldr	r2, [pc, #520]	@ (800bea8 <ProcessMacCommands+0xac8>)
 800bca0:	2387      	movs	r3, #135	@ 0x87
 800bca2:	00db      	lsls	r3, r3, #3
 800bca4:	2101      	movs	r1, #1
 800bca6:	54d1      	strb	r1, [r2, r3]
                break;
 800bca8:	e0ef      	b.n	800be8a <ProcessMacCommands+0xaaa>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                // According to the specification, it is not allowed to process this answer in
                // a ping or multicast slot
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800bcaa:	4a7f      	ldr	r2, [pc, #508]	@ (800bea8 <ProcessMacCommands+0xac8>)
 800bcac:	2390      	movs	r3, #144	@ 0x90
 800bcae:	00db      	lsls	r3, r3, #3
 800bcb0:	5cd3      	ldrb	r3, [r2, r3]
 800bcb2:	2b04      	cmp	r3, #4
 800bcb4:	d100      	bne.n	800bcb8 <ProcessMacCommands+0x8d8>
 800bcb6:	e0e7      	b.n	800be88 <ProcessMacCommands+0xaa8>
 800bcb8:	4a7b      	ldr	r2, [pc, #492]	@ (800bea8 <ProcessMacCommands+0xac8>)
 800bcba:	2390      	movs	r3, #144	@ 0x90
 800bcbc:	00db      	lsls	r3, r3, #3
 800bcbe:	5cd3      	ldrb	r3, [r2, r3]
 800bcc0:	2b05      	cmp	r3, #5
 800bcc2:	d100      	bne.n	800bcc6 <ProcessMacCommands+0x8e6>
 800bcc4:	e0e0      	b.n	800be88 <ProcessMacCommands+0xaa8>
                {
                    LoRaMacClassBPingSlotInfoAns( );
 800bcc6:	f003 faa2 	bl	800f20e <LoRaMacClassBPingSlotInfoAns>
                }
                break;
 800bcca:	e0dd      	b.n	800be88 <ProcessMacCommands+0xaa8>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800bccc:	207c      	movs	r0, #124	@ 0x7c
 800bcce:	183b      	adds	r3, r7, r0
 800bcd0:	2203      	movs	r2, #3
 800bcd2:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800bcd8:	1cfb      	adds	r3, r7, #3
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	1cfa      	adds	r2, r7, #3
 800bcde:	1c59      	adds	r1, r3, #1
 800bce0:	7011      	strb	r1, [r2, #0]
 800bce2:	001a      	movs	r2, r3
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	189b      	adds	r3, r3, r2
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800bcec:	1cfb      	adds	r3, r7, #3
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	1cfa      	adds	r2, r7, #3
 800bcf2:	1c59      	adds	r1, r3, #1
 800bcf4:	7011      	strb	r1, [r2, #0]
 800bcf6:	001a      	movs	r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	189b      	adds	r3, r3, r2
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	021b      	lsls	r3, r3, #8
 800bd00:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800bd02:	4313      	orrs	r3, r2
 800bd04:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800bd06:	1cfb      	adds	r3, r7, #3
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	1cfa      	adds	r2, r7, #3
 800bd0c:	1c59      	adds	r1, r3, #1
 800bd0e:	7011      	strb	r1, [r2, #0]
 800bd10:	001a      	movs	r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	189b      	adds	r3, r3, r2
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	041b      	lsls	r3, r3, #16
 800bd1a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 800bd20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bd22:	2264      	movs	r2, #100	@ 0x64
 800bd24:	4353      	muls	r3, r2
 800bd26:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 800bd28:	1cfb      	adds	r3, r7, #3
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	1cfa      	adds	r2, r7, #3
 800bd2e:	1c59      	adds	r1, r3, #1
 800bd30:	7011      	strb	r1, [r2, #0]
 800bd32:	001a      	movs	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	189b      	adds	r3, r3, r2
 800bd38:	781a      	ldrb	r2, [r3, #0]
 800bd3a:	2677      	movs	r6, #119	@ 0x77
 800bd3c:	19bb      	adds	r3, r7, r6
 800bd3e:	210f      	movs	r1, #15
 800bd40:	400a      	ands	r2, r1
 800bd42:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800bd44:	0005      	movs	r5, r0
 800bd46:	183c      	adds	r4, r7, r0
 800bd48:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800bd4a:	19bb      	adds	r3, r7, r6
 800bd4c:	781b      	ldrb	r3, [r3, #0]
 800bd4e:	0011      	movs	r1, r2
 800bd50:	0018      	movs	r0, r3
 800bd52:	f003 fa61 	bl	800f218 <LoRaMacClassBPingSlotChannelReq>
 800bd56:	0003      	movs	r3, r0
 800bd58:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 800bd5a:	2168      	movs	r1, #104	@ 0x68
 800bd5c:	187b      	adds	r3, r7, r1
 800bd5e:	197a      	adds	r2, r7, r5
 800bd60:	7812      	ldrb	r2, [r2, #0]
 800bd62:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800bd64:	187b      	adds	r3, r7, r1
 800bd66:	2201      	movs	r2, #1
 800bd68:	0019      	movs	r1, r3
 800bd6a:	2011      	movs	r0, #17
 800bd6c:	f003 fbfe 	bl	800f56c <LoRaMacCommandsAddCmd>
                break;
 800bd70:	e08b      	b.n	800be8a <ProcessMacCommands+0xaaa>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                uint16_t beaconTimingDelay = 0;
 800bd72:	207e      	movs	r0, #126	@ 0x7e
 800bd74:	183b      	adds	r3, r7, r0
 800bd76:	2200      	movs	r2, #0
 800bd78:	801a      	strh	r2, [r3, #0]
                uint8_t beaconTimingChannel = 0;
 800bd7a:	247d      	movs	r4, #125	@ 0x7d
 800bd7c:	193b      	adds	r3, r7, r4
 800bd7e:	2200      	movs	r2, #0
 800bd80:	701a      	strb	r2, [r3, #0]

                beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800bd82:	1cfb      	adds	r3, r7, #3
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	1cfa      	adds	r2, r7, #3
 800bd88:	1c59      	adds	r1, r3, #1
 800bd8a:	7011      	strb	r1, [r2, #0]
 800bd8c:	001a      	movs	r2, r3
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	189b      	adds	r3, r3, r2
 800bd92:	781a      	ldrb	r2, [r3, #0]
 800bd94:	183b      	adds	r3, r7, r0
 800bd96:	801a      	strh	r2, [r3, #0]
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800bd98:	1cfb      	adds	r3, r7, #3
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	1cfa      	adds	r2, r7, #3
 800bd9e:	1c59      	adds	r1, r3, #1
 800bda0:	7011      	strb	r1, [r2, #0]
 800bda2:	001a      	movs	r2, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	189b      	adds	r3, r3, r2
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	021b      	lsls	r3, r3, #8
 800bdac:	b21a      	sxth	r2, r3
 800bdae:	183b      	adds	r3, r7, r0
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	5e5b      	ldrsh	r3, [r3, r1]
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	b21a      	sxth	r2, r3
 800bdb8:	183b      	adds	r3, r7, r0
 800bdba:	801a      	strh	r2, [r3, #0]
                beaconTimingChannel = payload[macIndex++];
 800bdbc:	1cfb      	adds	r3, r7, #3
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	1cfa      	adds	r2, r7, #3
 800bdc2:	1c59      	adds	r1, r3, #1
 800bdc4:	7011      	strb	r1, [r2, #0]
 800bdc6:	001a      	movs	r2, r3
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	189a      	adds	r2, r3, r2
 800bdcc:	193b      	adds	r3, r7, r4
 800bdce:	7812      	ldrb	r2, [r2, #0]
 800bdd0:	701a      	strb	r2, [r3, #0]

                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800bdd2:	4b36      	ldr	r3, [pc, #216]	@ (800beac <ProcessMacCommands+0xacc>)
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	193b      	adds	r3, r7, r4
 800bdd8:	7819      	ldrb	r1, [r3, #0]
 800bdda:	183b      	adds	r3, r7, r0
 800bddc:	881b      	ldrh	r3, [r3, #0]
 800bdde:	0018      	movs	r0, r3
 800bde0:	f003 fa26 	bl	800f230 <LoRaMacClassBBeaconTimingAns>
                break;
 800bde4:	e051      	b.n	800be8a <ProcessMacCommands+0xaaa>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800bde6:	2300      	movs	r3, #0
 800bde8:	2080      	movs	r0, #128	@ 0x80
 800bdea:	183a      	adds	r2, r7, r0
 800bdec:	6013      	str	r3, [r2, #0]

                    frequency = ( uint32_t )payload[macIndex++];
 800bdee:	1cfb      	adds	r3, r7, #3
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	1cfa      	adds	r2, r7, #3
 800bdf4:	1c59      	adds	r1, r3, #1
 800bdf6:	7011      	strb	r1, [r2, #0]
 800bdf8:	001a      	movs	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	189b      	adds	r3, r3, r2
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	183a      	adds	r2, r7, r0
 800be02:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800be04:	1cfb      	adds	r3, r7, #3
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	1cfa      	adds	r2, r7, #3
 800be0a:	1c59      	adds	r1, r3, #1
 800be0c:	7011      	strb	r1, [r2, #0]
 800be0e:	001a      	movs	r2, r3
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	189b      	adds	r3, r3, r2
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	021b      	lsls	r3, r3, #8
 800be18:	183a      	adds	r2, r7, r0
 800be1a:	6812      	ldr	r2, [r2, #0]
 800be1c:	4313      	orrs	r3, r2
 800be1e:	183a      	adds	r2, r7, r0
 800be20:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800be22:	1cfb      	adds	r3, r7, #3
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	1cfa      	adds	r2, r7, #3
 800be28:	1c59      	adds	r1, r3, #1
 800be2a:	7011      	strb	r1, [r2, #0]
 800be2c:	001a      	movs	r2, r3
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	189b      	adds	r3, r3, r2
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	041b      	lsls	r3, r3, #16
 800be36:	183a      	adds	r2, r7, r0
 800be38:	6812      	ldr	r2, [r2, #0]
 800be3a:	4313      	orrs	r3, r2
 800be3c:	183a      	adds	r2, r7, r0
 800be3e:	6013      	str	r3, [r2, #0]
                    frequency *= 100;
 800be40:	183b      	adds	r3, r7, r0
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2264      	movs	r2, #100	@ 0x64
 800be46:	4353      	muls	r3, r2
 800be48:	183a      	adds	r2, r7, r0
 800be4a:	6013      	str	r3, [r2, #0]

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800be4c:	183b      	adds	r3, r7, r0
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	0018      	movs	r0, r3
 800be52:	f003 fa00 	bl	800f256 <LoRaMacClassBBeaconFreqReq>
 800be56:	1e03      	subs	r3, r0, #0
 800be58:	d004      	beq.n	800be64 <ProcessMacCommands+0xa84>
                    {
                        macCmdPayload[0] = 1;
 800be5a:	2368      	movs	r3, #104	@ 0x68
 800be5c:	18fb      	adds	r3, r7, r3
 800be5e:	2201      	movs	r2, #1
 800be60:	701a      	strb	r2, [r3, #0]
 800be62:	e003      	b.n	800be6c <ProcessMacCommands+0xa8c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800be64:	2368      	movs	r3, #104	@ 0x68
 800be66:	18fb      	adds	r3, r7, r3
 800be68:	2200      	movs	r2, #0
 800be6a:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800be6c:	2368      	movs	r3, #104	@ 0x68
 800be6e:	18fb      	adds	r3, r7, r3
 800be70:	2201      	movs	r2, #1
 800be72:	0019      	movs	r1, r3
 800be74:	2013      	movs	r0, #19
 800be76:	f003 fb79 	bl	800f56c <LoRaMacCommandsAddCmd>
                }
                break;
 800be7a:	e006      	b.n	800be8a <ProcessMacCommands+0xaaa>
                break;
 800be7c:	46c0      	nop			@ (mov r8, r8)
 800be7e:	e004      	b.n	800be8a <ProcessMacCommands+0xaaa>
                break;
 800be80:	46c0      	nop			@ (mov r8, r8)
 800be82:	e002      	b.n	800be8a <ProcessMacCommands+0xaaa>
                break;
 800be84:	46c0      	nop			@ (mov r8, r8)
 800be86:	e000      	b.n	800be8a <ProcessMacCommands+0xaaa>
                break;
 800be88:	46c0      	nop			@ (mov r8, r8)
    while( macIndex < commandsSize )
 800be8a:	1cfa      	adds	r2, r7, #3
 800be8c:	1cbb      	adds	r3, r7, #2
 800be8e:	7812      	ldrb	r2, [r2, #0]
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	429a      	cmp	r2, r3
 800be94:	d201      	bcs.n	800be9a <ProcessMacCommands+0xaba>
 800be96:	f7ff fac1 	bl	800b41c <ProcessMacCommands+0x3c>
 800be9a:	e000      	b.n	800be9e <ProcessMacCommands+0xabe>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800be9c:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 800be9e:	46bd      	mov	sp, r7
 800bea0:	b023      	add	sp, #140	@ 0x8c
 800bea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bea4:	12d53d80 	.word	0x12d53d80
 800bea8:	20000940 	.word	0x20000940
 800beac:	20000fe4 	.word	0x20000fe4

0800beb0 <Send>:

LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800beb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beb2:	b08f      	sub	sp, #60	@ 0x3c
 800beb4:	af02      	add	r7, sp, #8
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	0008      	movs	r0, r1
 800beba:	607a      	str	r2, [r7, #4]
 800bebc:	0019      	movs	r1, r3
 800bebe:	230b      	movs	r3, #11
 800bec0:	18fb      	adds	r3, r7, r3
 800bec2:	1c02      	adds	r2, r0, #0
 800bec4:	701a      	strb	r2, [r3, #0]
 800bec6:	2308      	movs	r3, #8
 800bec8:	18fb      	adds	r3, r7, r3
 800beca:	1c0a      	adds	r2, r1, #0
 800becc:	801a      	strh	r2, [r3, #0]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bece:	232f      	movs	r3, #47	@ 0x2f
 800bed0:	18fb      	adds	r3, r7, r3
 800bed2:	2203      	movs	r2, #3
 800bed4:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800bed6:	4b8e      	ldr	r3, [pc, #568]	@ (800c110 <Send+0x260>)
 800bed8:	4a8e      	ldr	r2, [pc, #568]	@ (800c114 <Send+0x264>)
 800beda:	589a      	ldr	r2, [r3, r2]
 800bedc:	232e      	movs	r3, #46	@ 0x2e
 800bede:	18fb      	adds	r3, r7, r3
 800bee0:	21f9      	movs	r1, #249	@ 0xf9
 800bee2:	5c52      	ldrb	r2, [r2, r1]
 800bee4:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800bee6:	4b8a      	ldr	r3, [pc, #552]	@ (800c110 <Send+0x260>)
 800bee8:	4a8a      	ldr	r2, [pc, #552]	@ (800c114 <Send+0x264>)
 800beea:	589a      	ldr	r2, [r3, r2]
 800beec:	232d      	movs	r3, #45	@ 0x2d
 800beee:	18fb      	adds	r3, r7, r3
 800bef0:	21f8      	movs	r1, #248	@ 0xf8
 800bef2:	5c52      	ldrb	r2, [r2, r1]
 800bef4:	701a      	strb	r2, [r3, #0]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800bef6:	4b86      	ldr	r3, [pc, #536]	@ (800c110 <Send+0x260>)
 800bef8:	4a86      	ldr	r2, [pc, #536]	@ (800c114 <Send+0x264>)
 800befa:	589b      	ldr	r3, [r3, r2]
 800befc:	22f4      	movs	r2, #244	@ 0xf4
 800befe:	589b      	ldr	r3, [r3, r2]
 800bf00:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800bf02:	4b83      	ldr	r3, [pc, #524]	@ (800c110 <Send+0x260>)
 800bf04:	4a83      	ldr	r2, [pc, #524]	@ (800c114 <Send+0x264>)
 800bf06:	589a      	ldr	r2, [r3, r2]
 800bf08:	23ea      	movs	r3, #234	@ 0xea
 800bf0a:	005b      	lsls	r3, r3, #1
 800bf0c:	5cd3      	ldrb	r3, [r2, r3]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d101      	bne.n	800bf16 <Send+0x66>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800bf12:	2307      	movs	r3, #7
 800bf14:	e0f7      	b.n	800c106 <Send+0x256>
    }
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 800bf16:	4b7e      	ldr	r3, [pc, #504]	@ (800c110 <Send+0x260>)
 800bf18:	4a7e      	ldr	r2, [pc, #504]	@ (800c114 <Send+0x264>)
 800bf1a:	589a      	ldr	r2, [r3, r2]
 800bf1c:	239e      	movs	r3, #158	@ 0x9e
 800bf1e:	005b      	lsls	r3, r3, #1
 800bf20:	5cd3      	ldrb	r3, [r2, r3]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d106      	bne.n	800bf34 <Send+0x84>
    {
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 800bf26:	4b7a      	ldr	r3, [pc, #488]	@ (800c110 <Send+0x260>)
 800bf28:	4a7a      	ldr	r2, [pc, #488]	@ (800c114 <Send+0x264>)
 800bf2a:	589a      	ldr	r2, [r3, r2]
 800bf2c:	23e4      	movs	r3, #228	@ 0xe4
 800bf2e:	005b      	lsls	r3, r3, #1
 800bf30:	2100      	movs	r1, #0
 800bf32:	50d1      	str	r1, [r2, r3]
    }

    fCtrl.Value = 0;
 800bf34:	242c      	movs	r4, #44	@ 0x2c
 800bf36:	193b      	adds	r3, r7, r4
 800bf38:	2200      	movs	r2, #0
 800bf3a:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.FOptsLen      = 0;
 800bf3c:	193b      	adds	r3, r7, r4
 800bf3e:	781a      	ldrb	r2, [r3, #0]
 800bf40:	210f      	movs	r1, #15
 800bf42:	438a      	bics	r2, r1
 800bf44:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 800bf46:	4b72      	ldr	r3, [pc, #456]	@ (800c110 <Send+0x260>)
 800bf48:	4a72      	ldr	r2, [pc, #456]	@ (800c114 <Send+0x264>)
 800bf4a:	589b      	ldr	r3, [r3, r2]
 800bf4c:	22f2      	movs	r2, #242	@ 0xf2
 800bf4e:	5c9a      	ldrb	r2, [r3, r2]
 800bf50:	193b      	adds	r3, r7, r4
 800bf52:	01d0      	lsls	r0, r2, #7
 800bf54:	781a      	ldrb	r2, [r3, #0]
 800bf56:	217f      	movs	r1, #127	@ 0x7f
 800bf58:	400a      	ands	r2, r1
 800bf5a:	1c11      	adds	r1, r2, #0
 800bf5c:	1c02      	adds	r2, r0, #0
 800bf5e:	430a      	orrs	r2, r1
 800bf60:	701a      	strb	r2, [r3, #0]

    // Check class b
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800bf62:	4b6b      	ldr	r3, [pc, #428]	@ (800c110 <Send+0x260>)
 800bf64:	4a6b      	ldr	r2, [pc, #428]	@ (800c114 <Send+0x264>)
 800bf66:	589b      	ldr	r3, [r3, r2]
 800bf68:	22f0      	movs	r2, #240	@ 0xf0
 800bf6a:	5c9b      	ldrb	r3, [r3, r2]
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d105      	bne.n	800bf7c <Send+0xcc>
    {
        fCtrl.Bits.FPending      = 1;
 800bf70:	193b      	adds	r3, r7, r4
 800bf72:	781a      	ldrb	r2, [r3, #0]
 800bf74:	2110      	movs	r1, #16
 800bf76:	430a      	orrs	r2, r1
 800bf78:	701a      	strb	r2, [r3, #0]
 800bf7a:	e005      	b.n	800bf88 <Send+0xd8>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800bf7c:	232c      	movs	r3, #44	@ 0x2c
 800bf7e:	18fb      	adds	r3, r7, r3
 800bf80:	781a      	ldrb	r2, [r3, #0]
 800bf82:	2110      	movs	r1, #16
 800bf84:	438a      	bics	r2, r1
 800bf86:	701a      	strb	r2, [r3, #0]
    }

    // Check server ack
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 800bf88:	4b61      	ldr	r3, [pc, #388]	@ (800c110 <Send+0x260>)
 800bf8a:	4a62      	ldr	r2, [pc, #392]	@ (800c114 <Send+0x264>)
 800bf8c:	589a      	ldr	r2, [r3, r2]
 800bf8e:	23e0      	movs	r3, #224	@ 0xe0
 800bf90:	005b      	lsls	r3, r3, #1
 800bf92:	5cd3      	ldrb	r3, [r2, r3]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d005      	beq.n	800bfa4 <Send+0xf4>
    {
        fCtrl.Bits.Ack = 1;
 800bf98:	232c      	movs	r3, #44	@ 0x2c
 800bf9a:	18fb      	adds	r3, r7, r3
 800bf9c:	781a      	ldrb	r2, [r3, #0]
 800bf9e:	2120      	movs	r1, #32
 800bfa0:	430a      	orrs	r2, r1
 800bfa2:	701a      	strb	r2, [r3, #0]
    }

    // ADR next request
    adrNext.Version = MacCtx.NvmCtx->Version;
 800bfa4:	4b5a      	ldr	r3, [pc, #360]	@ (800c110 <Send+0x260>)
 800bfa6:	4a5b      	ldr	r2, [pc, #364]	@ (800c114 <Send+0x264>)
 800bfa8:	5899      	ldr	r1, [r3, r2]
 800bfaa:	2014      	movs	r0, #20
 800bfac:	183b      	adds	r3, r7, r0
 800bfae:	22e8      	movs	r2, #232	@ 0xe8
 800bfb0:	0052      	lsls	r2, r2, #1
 800bfb2:	588a      	ldr	r2, [r1, r2]
 800bfb4:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = true;
 800bfb6:	0001      	movs	r1, r0
 800bfb8:	187b      	adds	r3, r7, r1
 800bfba:	2201      	movs	r2, #1
 800bfbc:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800bfbe:	242c      	movs	r4, #44	@ 0x2c
 800bfc0:	193b      	adds	r3, r7, r4
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	061b      	lsls	r3, r3, #24
 800bfc6:	0fdb      	lsrs	r3, r3, #31
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	1e5a      	subs	r2, r3, #1
 800bfcc:	4193      	sbcs	r3, r2
 800bfce:	b2da      	uxtb	r2, r3
 800bfd0:	187b      	adds	r3, r7, r1
 800bfd2:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800bfd4:	4b4e      	ldr	r3, [pc, #312]	@ (800c110 <Send+0x260>)
 800bfd6:	4a4f      	ldr	r2, [pc, #316]	@ (800c114 <Send+0x264>)
 800bfd8:	589b      	ldr	r3, [r3, r2]
 800bfda:	22f4      	movs	r2, #244	@ 0xf4
 800bfdc:	589a      	ldr	r2, [r3, r2]
 800bfde:	0008      	movs	r0, r1
 800bfe0:	183b      	adds	r3, r7, r0
 800bfe2:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800bfe4:	4a4a      	ldr	r2, [pc, #296]	@ (800c110 <Send+0x260>)
 800bfe6:	23fd      	movs	r3, #253	@ 0xfd
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	5ad2      	ldrh	r2, [r2, r3]
 800bfec:	183b      	adds	r3, r7, r0
 800bfee:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800bff0:	4b47      	ldr	r3, [pc, #284]	@ (800c110 <Send+0x260>)
 800bff2:	4a49      	ldr	r2, [pc, #292]	@ (800c118 <Send+0x268>)
 800bff4:	5a9a      	ldrh	r2, [r3, r2]
 800bff6:	183b      	adds	r3, r7, r0
 800bff8:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800bffa:	4b45      	ldr	r3, [pc, #276]	@ (800c110 <Send+0x260>)
 800bffc:	4a45      	ldr	r2, [pc, #276]	@ (800c114 <Send+0x264>)
 800bffe:	589b      	ldr	r3, [r3, r2]
 800c000:	22f9      	movs	r2, #249	@ 0xf9
 800c002:	569a      	ldrsb	r2, [r3, r2]
 800c004:	183b      	adds	r3, r7, r0
 800c006:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800c008:	4b41      	ldr	r3, [pc, #260]	@ (800c110 <Send+0x260>)
 800c00a:	4a42      	ldr	r2, [pc, #264]	@ (800c114 <Send+0x264>)
 800c00c:	589b      	ldr	r3, [r3, r2]
 800c00e:	22f8      	movs	r2, #248	@ 0xf8
 800c010:	569a      	ldrsb	r2, [r3, r2]
 800c012:	183b      	adds	r3, r7, r0
 800c014:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800c016:	4b3e      	ldr	r3, [pc, #248]	@ (800c110 <Send+0x260>)
 800c018:	4a3e      	ldr	r2, [pc, #248]	@ (800c114 <Send+0x264>)
 800c01a:	589a      	ldr	r2, [r3, r2]
 800c01c:	2396      	movs	r3, #150	@ 0x96
 800c01e:	005b      	lsls	r3, r3, #1
 800c020:	5cd2      	ldrb	r2, [r2, r3]
 800c022:	183b      	adds	r3, r7, r0
 800c024:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 800c026:	4b3a      	ldr	r3, [pc, #232]	@ (800c110 <Send+0x260>)
 800c028:	4a3a      	ldr	r2, [pc, #232]	@ (800c114 <Send+0x264>)
 800c02a:	589b      	ldr	r3, [r3, r2]
 800c02c:	781a      	ldrb	r2, [r3, #0]
 800c02e:	183b      	adds	r3, r7, r0
 800c030:	74da      	strb	r2, [r3, #19]

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800c032:	4b37      	ldr	r3, [pc, #220]	@ (800c110 <Send+0x260>)
 800c034:	4a37      	ldr	r2, [pc, #220]	@ (800c114 <Send+0x264>)
 800c036:	589b      	ldr	r3, [r3, r2]
 800c038:	33f9      	adds	r3, #249	@ 0xf9
 800c03a:	0019      	movs	r1, r3
                                               &MacCtx.NvmCtx->MacParams.ChannelsTxPower, &adrAckCounter );
 800c03c:	4b34      	ldr	r3, [pc, #208]	@ (800c110 <Send+0x260>)
 800c03e:	4a35      	ldr	r2, [pc, #212]	@ (800c114 <Send+0x264>)
 800c040:	589b      	ldr	r3, [r3, r2]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800c042:	33f8      	adds	r3, #248	@ 0xf8
 800c044:	001a      	movs	r2, r3
 800c046:	2328      	movs	r3, #40	@ 0x28
 800c048:	18fb      	adds	r3, r7, r3
 800c04a:	1838      	adds	r0, r7, r0
 800c04c:	f003 f817 	bl	800f07e <LoRaMacAdrCalcNext>
 800c050:	0003      	movs	r3, r0
 800c052:	0019      	movs	r1, r3
 800c054:	0026      	movs	r6, r4
 800c056:	193b      	adds	r3, r7, r4
 800c058:	2201      	movs	r2, #1
 800c05a:	400a      	ands	r2, r1
 800c05c:	0190      	lsls	r0, r2, #6
 800c05e:	781a      	ldrb	r2, [r3, #0]
 800c060:	2140      	movs	r1, #64	@ 0x40
 800c062:	438a      	bics	r2, r1
 800c064:	1c11      	adds	r1, r2, #0
 800c066:	1c02      	adds	r2, r0, #0
 800c068:	430a      	orrs	r2, r1
 800c06a:	701a      	strb	r2, [r3, #0]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800c06c:	222f      	movs	r2, #47	@ 0x2f
 800c06e:	18bc      	adds	r4, r7, r2
 800c070:	687d      	ldr	r5, [r7, #4]
 800c072:	230b      	movs	r3, #11
 800c074:	18fb      	adds	r3, r7, r3
 800c076:	781a      	ldrb	r2, [r3, #0]
 800c078:	19b9      	adds	r1, r7, r6
 800c07a:	68f8      	ldr	r0, [r7, #12]
 800c07c:	2308      	movs	r3, #8
 800c07e:	18fb      	adds	r3, r7, r3
 800c080:	881b      	ldrh	r3, [r3, #0]
 800c082:	9300      	str	r3, [sp, #0]
 800c084:	002b      	movs	r3, r5
 800c086:	f000 fc7f 	bl	800c988 <PrepareFrame>
 800c08a:	0003      	movs	r3, r0
 800c08c:	7023      	strb	r3, [r4, #0]

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800c08e:	222f      	movs	r2, #47	@ 0x2f
 800c090:	18bb      	adds	r3, r7, r2
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d003      	beq.n	800c0a0 <Send+0x1f0>
 800c098:	18bb      	adds	r3, r7, r2
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	2b0a      	cmp	r3, #10
 800c09e:	d106      	bne.n	800c0ae <Send+0x1fe>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( false );
 800c0a0:	232f      	movs	r3, #47	@ 0x2f
 800c0a2:	18fc      	adds	r4, r7, r3
 800c0a4:	2000      	movs	r0, #0
 800c0a6:	f000 f89d 	bl	800c1e4 <ScheduleTx>
 800c0aa:	0003      	movs	r3, r0
 800c0ac:	7023      	strb	r3, [r4, #0]
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800c0ae:	232f      	movs	r3, #47	@ 0x2f
 800c0b0:	18fb      	adds	r3, r7, r3
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d010      	beq.n	800c0da <Send+0x22a>
    {
        // Bad case - restore
        // Store local variables
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 800c0b8:	4b15      	ldr	r3, [pc, #84]	@ (800c110 <Send+0x260>)
 800c0ba:	4a16      	ldr	r2, [pc, #88]	@ (800c114 <Send+0x264>)
 800c0bc:	589b      	ldr	r3, [r3, r2]
 800c0be:	222e      	movs	r2, #46	@ 0x2e
 800c0c0:	18ba      	adds	r2, r7, r2
 800c0c2:	21f9      	movs	r1, #249	@ 0xf9
 800c0c4:	7812      	ldrb	r2, [r2, #0]
 800c0c6:	545a      	strb	r2, [r3, r1]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 800c0c8:	4b11      	ldr	r3, [pc, #68]	@ (800c110 <Send+0x260>)
 800c0ca:	4a12      	ldr	r2, [pc, #72]	@ (800c114 <Send+0x264>)
 800c0cc:	589b      	ldr	r3, [r3, r2]
 800c0ce:	222d      	movs	r2, #45	@ 0x2d
 800c0d0:	18ba      	adds	r2, r7, r2
 800c0d2:	21f8      	movs	r1, #248	@ 0xf8
 800c0d4:	7812      	ldrb	r2, [r2, #0]
 800c0d6:	545a      	strb	r2, [r3, r1]
 800c0d8:	e012      	b.n	800c100 <Send+0x250>
    }
    else
    {
        // Good case
        MacCtx.NvmCtx->SrvAckRequested = false;
 800c0da:	4b0d      	ldr	r3, [pc, #52]	@ (800c110 <Send+0x260>)
 800c0dc:	4a0d      	ldr	r2, [pc, #52]	@ (800c114 <Send+0x264>)
 800c0de:	589a      	ldr	r2, [r3, r2]
 800c0e0:	23e0      	movs	r3, #224	@ 0xe0
 800c0e2:	005b      	lsls	r3, r3, #1
 800c0e4:	2100      	movs	r1, #0
 800c0e6:	54d1      	strb	r1, [r2, r3]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 800c0e8:	4b09      	ldr	r3, [pc, #36]	@ (800c110 <Send+0x260>)
 800c0ea:	4a0a      	ldr	r2, [pc, #40]	@ (800c114 <Send+0x264>)
 800c0ec:	589b      	ldr	r3, [r3, r2]
 800c0ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0f0:	21f4      	movs	r1, #244	@ 0xf4
 800c0f2:	505a      	str	r2, [r3, r1]
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800c0f4:	f003 fac4 	bl	800f680 <LoRaMacCommandsRemoveNoneStickyCmds>
 800c0f8:	1e03      	subs	r3, r0, #0
 800c0fa:	d001      	beq.n	800c100 <Send+0x250>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c0fc:	2313      	movs	r3, #19
 800c0fe:	e002      	b.n	800c106 <Send+0x256>
        }
    }
    return status;
 800c100:	232f      	movs	r3, #47	@ 0x2f
 800c102:	18fb      	adds	r3, r7, r3
 800c104:	781b      	ldrb	r3, [r3, #0]
}
 800c106:	0018      	movs	r0, r3
 800c108:	46bd      	mov	sp, r7
 800c10a:	b00d      	add	sp, #52	@ 0x34
 800c10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c10e:	46c0      	nop			@ (mov r8, r8)
 800c110:	20000940 	.word	0x20000940
 800c114:	00000484 	.word	0x00000484
 800c118:	000003f6 	.word	0x000003f6

0800c11c <SendReJoinReq>:

LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800c11c:	b5b0      	push	{r4, r5, r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	0002      	movs	r2, r0
 800c124:	1dfb      	adds	r3, r7, #7
 800c126:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c128:	230e      	movs	r3, #14
 800c12a:	18fb      	adds	r3, r7, r3
 800c12c:	2200      	movs	r2, #0
 800c12e:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800c130:	240c      	movs	r4, #12
 800c132:	193b      	adds	r3, r7, r4
 800c134:	2200      	movs	r2, #0
 800c136:	701a      	strb	r2, [r3, #0]
    bool allowDelayedTx = true;
 800c138:	250f      	movs	r5, #15
 800c13a:	197b      	adds	r3, r7, r5
 800c13c:	2201      	movs	r2, #1
 800c13e:	701a      	strb	r2, [r3, #0]

    // Setup join/rejoin message
    switch( joinReqType )
 800c140:	1dfb      	adds	r3, r7, #7
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	2bff      	cmp	r3, #255	@ 0xff
 800c146:	d130      	bne.n	800c1aa <SendReJoinReq+0x8e>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800c148:	2000      	movs	r0, #0
 800c14a:	f7fe ff77 	bl	800b03c <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800c14e:	4a21      	ldr	r2, [pc, #132]	@ (800c1d4 <SendReJoinReq+0xb8>)
 800c150:	2382      	movs	r3, #130	@ 0x82
 800c152:	005b      	lsls	r3, r3, #1
 800c154:	2100      	movs	r1, #0
 800c156:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800c158:	4a1e      	ldr	r2, [pc, #120]	@ (800c1d4 <SendReJoinReq+0xb8>)
 800c15a:	2384      	movs	r3, #132	@ 0x84
 800c15c:	005b      	lsls	r3, r3, #1
 800c15e:	491e      	ldr	r1, [pc, #120]	@ (800c1d8 <SendReJoinReq+0xbc>)
 800c160:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800c162:	4a1c      	ldr	r2, [pc, #112]	@ (800c1d4 <SendReJoinReq+0xb8>)
 800c164:	2386      	movs	r3, #134	@ 0x86
 800c166:	005b      	lsls	r3, r3, #1
 800c168:	21ff      	movs	r1, #255	@ 0xff
 800c16a:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800c16c:	193b      	adds	r3, r7, r4
 800c16e:	781a      	ldrb	r2, [r3, #0]
 800c170:	211f      	movs	r1, #31
 800c172:	400a      	ands	r2, r1
 800c174:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800c176:	193b      	adds	r3, r7, r4
 800c178:	7819      	ldrb	r1, [r3, #0]
 800c17a:	4a16      	ldr	r2, [pc, #88]	@ (800c1d4 <SendReJoinReq+0xb8>)
 800c17c:	230e      	movs	r3, #14
 800c17e:	33ff      	adds	r3, #255	@ 0xff
 800c180:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c182:	f7fd fad3 	bl	800972c <SecureElementGetJoinEui>
 800c186:	0001      	movs	r1, r0
 800c188:	4b14      	ldr	r3, [pc, #80]	@ (800c1dc <SendReJoinReq+0xc0>)
 800c18a:	2208      	movs	r2, #8
 800c18c:	0018      	movs	r0, r3
 800c18e:	f009 f9f3 	bl	8015578 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800c192:	f7fd faa7 	bl	80096e4 <SecureElementGetDevEui>
 800c196:	0001      	movs	r1, r0
 800c198:	4b11      	ldr	r3, [pc, #68]	@ (800c1e0 <SendReJoinReq+0xc4>)
 800c19a:	2208      	movs	r2, #8
 800c19c:	0018      	movs	r0, r3
 800c19e:	f009 f9eb 	bl	8015578 <memcpy1>

            allowDelayedTx = false;
 800c1a2:	197b      	adds	r3, r7, r5
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	701a      	strb	r2, [r3, #0]

            break;
 800c1a8:	e004      	b.n	800c1b4 <SendReJoinReq+0x98>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800c1aa:	230e      	movs	r3, #14
 800c1ac:	18fb      	adds	r3, r7, r3
 800c1ae:	2202      	movs	r2, #2
 800c1b0:	701a      	strb	r2, [r3, #0]
            break;
 800c1b2:	46c0      	nop			@ (mov r8, r8)
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800c1b4:	250e      	movs	r5, #14
 800c1b6:	197c      	adds	r4, r7, r5
 800c1b8:	230f      	movs	r3, #15
 800c1ba:	18fb      	adds	r3, r7, r3
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	0018      	movs	r0, r3
 800c1c0:	f000 f810 	bl	800c1e4 <ScheduleTx>
 800c1c4:	0003      	movs	r3, r0
 800c1c6:	7023      	strb	r3, [r4, #0]
    return status;
 800c1c8:	197b      	adds	r3, r7, r5
 800c1ca:	781b      	ldrb	r3, [r3, #0]
}
 800c1cc:	0018      	movs	r0, r3
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	b004      	add	sp, #16
 800c1d2:	bdb0      	pop	{r4, r5, r7, pc}
 800c1d4:	20000940 	.word	0x20000940
 800c1d8:	20000942 	.word	0x20000942
 800c1dc:	20000a4e 	.word	0x20000a4e
 800c1e0:	20000a56 	.word	0x20000a56

0800c1e4 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800c1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1e6:	b08b      	sub	sp, #44	@ 0x2c
 800c1e8:	af02      	add	r7, sp, #8
 800c1ea:	0002      	movs	r2, r0
 800c1ec:	1dfb      	adds	r3, r7, #7
 800c1ee:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c1f0:	231f      	movs	r3, #31
 800c1f2:	18fb      	adds	r3, r7, r3
 800c1f4:	2203      	movs	r2, #3
 800c1f6:	701a      	strb	r2, [r3, #0]
    TimerTime_t dutyCycleTimeOff = 0;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	61bb      	str	r3, [r7, #24]
    NextChanParams_t nextChan;
    size_t macCmdsSize = 0;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	60bb      	str	r3, [r7, #8]

    // Update back-off
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 800c200:	4ba5      	ldr	r3, [pc, #660]	@ (800c498 <ScheduleTx+0x2b4>)
 800c202:	4aa6      	ldr	r2, [pc, #664]	@ (800c49c <ScheduleTx+0x2b8>)
 800c204:	589a      	ldr	r2, [r3, r2]
 800c206:	239f      	movs	r3, #159	@ 0x9f
 800c208:	005b      	lsls	r3, r3, #1
 800c20a:	5cd3      	ldrb	r3, [r2, r3]
 800c20c:	0018      	movs	r0, r3
 800c20e:	f000 f9c1 	bl	800c594 <CalculateBackOff>

    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 800c212:	4ba1      	ldr	r3, [pc, #644]	@ (800c498 <ScheduleTx+0x2b4>)
 800c214:	4aa1      	ldr	r2, [pc, #644]	@ (800c49c <ScheduleTx+0x2b8>)
 800c216:	589a      	ldr	r2, [r3, r2]
 800c218:	23e4      	movs	r3, #228	@ 0xe4
 800c21a:	005b      	lsls	r3, r3, #1
 800c21c:	58d2      	ldr	r2, [r2, r3]
 800c21e:	210c      	movs	r1, #12
 800c220:	187b      	adds	r3, r7, r1
 800c222:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800c224:	4b9c      	ldr	r3, [pc, #624]	@ (800c498 <ScheduleTx+0x2b4>)
 800c226:	4a9d      	ldr	r2, [pc, #628]	@ (800c49c <ScheduleTx+0x2b8>)
 800c228:	589b      	ldr	r3, [r3, r2]
 800c22a:	22f9      	movs	r2, #249	@ 0xf9
 800c22c:	569a      	ldrsb	r2, [r3, r2]
 800c22e:	187b      	adds	r3, r7, r1
 800c230:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800c232:	4b99      	ldr	r3, [pc, #612]	@ (800c498 <ScheduleTx+0x2b4>)
 800c234:	4a99      	ldr	r2, [pc, #612]	@ (800c49c <ScheduleTx+0x2b8>)
 800c236:	589a      	ldr	r2, [r3, r2]
 800c238:	233e      	movs	r3, #62	@ 0x3e
 800c23a:	33ff      	adds	r3, #255	@ 0xff
 800c23c:	5cd2      	ldrb	r2, [r2, r3]
 800c23e:	187b      	adds	r3, r7, r1
 800c240:	729a      	strb	r2, [r3, #10]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800c242:	4b95      	ldr	r3, [pc, #596]	@ (800c498 <ScheduleTx+0x2b4>)
 800c244:	4a95      	ldr	r2, [pc, #596]	@ (800c49c <ScheduleTx+0x2b8>)
 800c246:	589a      	ldr	r2, [r3, r2]
 800c248:	23ea      	movs	r3, #234	@ 0xea
 800c24a:	005b      	lsls	r3, r3, #1
 800c24c:	5cd3      	ldrb	r3, [r2, r3]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d103      	bne.n	800c25a <ScheduleTx+0x76>
    {
        nextChan.Joined = false;
 800c252:	187b      	adds	r3, r7, r1
 800c254:	2200      	movs	r2, #0
 800c256:	725a      	strb	r2, [r3, #9]
 800c258:	e003      	b.n	800c262 <ScheduleTx+0x7e>
    }
    else
    {
        nextChan.Joined = true;
 800c25a:	230c      	movs	r3, #12
 800c25c:	18fb      	adds	r3, r7, r3
 800c25e:	2201      	movs	r2, #1
 800c260:	725a      	strb	r2, [r3, #9]
    }
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 800c262:	4b8d      	ldr	r3, [pc, #564]	@ (800c498 <ScheduleTx+0x2b4>)
 800c264:	4a8d      	ldr	r2, [pc, #564]	@ (800c49c <ScheduleTx+0x2b8>)
 800c266:	589a      	ldr	r2, [r3, r2]
 800c268:	23e2      	movs	r3, #226	@ 0xe2
 800c26a:	005b      	lsls	r3, r3, #1
 800c26c:	58d2      	ldr	r2, [r2, r3]
 800c26e:	210c      	movs	r1, #12
 800c270:	187b      	adds	r3, r7, r1
 800c272:	605a      	str	r2, [r3, #4]

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 800c274:	4b88      	ldr	r3, [pc, #544]	@ (800c498 <ScheduleTx+0x2b4>)
 800c276:	4a89      	ldr	r2, [pc, #548]	@ (800c49c <ScheduleTx+0x2b8>)
 800c278:	589b      	ldr	r3, [r3, r2]
 800c27a:	7818      	ldrb	r0, [r3, #0]
 800c27c:	4b86      	ldr	r3, [pc, #536]	@ (800c498 <ScheduleTx+0x2b4>)
 800c27e:	4a87      	ldr	r2, [pc, #540]	@ (800c49c <ScheduleTx+0x2b8>)
 800c280:	589b      	ldr	r3, [r3, r2]
 800c282:	33c9      	adds	r3, #201	@ 0xc9
 800c284:	33ff      	adds	r3, #255	@ 0xff
 800c286:	261f      	movs	r6, #31
 800c288:	19bc      	adds	r4, r7, r6
 800c28a:	2218      	movs	r2, #24
 800c28c:	18bd      	adds	r5, r7, r2
 800c28e:	4a84      	ldr	r2, [pc, #528]	@ (800c4a0 <ScheduleTx+0x2bc>)
 800c290:	1879      	adds	r1, r7, r1
 800c292:	9300      	str	r3, [sp, #0]
 800c294:	002b      	movs	r3, r5
 800c296:	f005 fb61 	bl	801195c <RegionNextChannel>
 800c29a:	0003      	movs	r3, r0
 800c29c:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
 800c29e:	19bb      	adds	r3, r7, r6
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d025      	beq.n	800c2f2 <ScheduleTx+0x10e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800c2a6:	19bb      	adds	r3, r7, r6
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	2b0b      	cmp	r3, #11
 800c2ac:	d11d      	bne.n	800c2ea <ScheduleTx+0x106>
 800c2ae:	1dfb      	adds	r3, r7, #7
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d019      	beq.n	800c2ea <ScheduleTx+0x106>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( dutyCycleTimeOff != 0 )
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d014      	beq.n	800c2e6 <ScheduleTx+0x102>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800c2bc:	4a76      	ldr	r2, [pc, #472]	@ (800c498 <ScheduleTx+0x2b4>)
 800c2be:	23d0      	movs	r3, #208	@ 0xd0
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	58d3      	ldr	r3, [r2, r3]
 800c2c4:	2220      	movs	r2, #32
 800c2c6:	431a      	orrs	r2, r3
 800c2c8:	0011      	movs	r1, r2
 800c2ca:	4a73      	ldr	r2, [pc, #460]	@ (800c498 <ScheduleTx+0x2b4>)
 800c2cc:	23d0      	movs	r3, #208	@ 0xd0
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 800c2d2:	69ba      	ldr	r2, [r7, #24]
 800c2d4:	4b73      	ldr	r3, [pc, #460]	@ (800c4a4 <ScheduleTx+0x2c0>)
 800c2d6:	0011      	movs	r1, r2
 800c2d8:	0018      	movs	r0, r3
 800c2da:	f008 ff4d 	bl	8015178 <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 800c2de:	4b71      	ldr	r3, [pc, #452]	@ (800c4a4 <ScheduleTx+0x2c0>)
 800c2e0:	0018      	movs	r0, r3
 800c2e2:	f008 fded 	bl	8014ec0 <TimerStart>
            }
            return LORAMAC_STATUS_OK;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	e0d1      	b.n	800c48e <ScheduleTx+0x2aa>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800c2ea:	231f      	movs	r3, #31
 800c2ec:	18fb      	adds	r3, r7, r3
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	e0cd      	b.n	800c48e <ScheduleTx+0x2aa>
        }
    }

    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800c2f2:	4b69      	ldr	r3, [pc, #420]	@ (800c498 <ScheduleTx+0x2b4>)
 800c2f4:	4a69      	ldr	r2, [pc, #420]	@ (800c49c <ScheduleTx+0x2b8>)
 800c2f6:	589b      	ldr	r3, [r3, r2]
 800c2f8:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 800c2fa:	4b67      	ldr	r3, [pc, #412]	@ (800c498 <ScheduleTx+0x2b4>)
 800c2fc:	4a67      	ldr	r2, [pc, #412]	@ (800c49c <ScheduleTx+0x2b8>)
 800c2fe:	589b      	ldr	r3, [r3, r2]
 800c300:	7818      	ldrb	r0, [r3, #0]
 800c302:	4b65      	ldr	r3, [pc, #404]	@ (800c498 <ScheduleTx+0x2b4>)
 800c304:	4a65      	ldr	r2, [pc, #404]	@ (800c49c <ScheduleTx+0x2b8>)
 800c306:	589a      	ldr	r2, [r3, r2]
 800c308:	232e      	movs	r3, #46	@ 0x2e
 800c30a:	33ff      	adds	r3, #255	@ 0xff
 800c30c:	5cd1      	ldrb	r1, [r2, r3]
 800c30e:	4b62      	ldr	r3, [pc, #392]	@ (800c498 <ScheduleTx+0x2b4>)
 800c310:	4a62      	ldr	r2, [pc, #392]	@ (800c49c <ScheduleTx+0x2b8>)
 800c312:	589b      	ldr	r3, [r3, r2]
 800c314:	22f9      	movs	r2, #249	@ 0xf9
 800c316:	569d      	ldrsb	r5, [r3, r2]
 800c318:	4b5f      	ldr	r3, [pc, #380]	@ (800c498 <ScheduleTx+0x2b4>)
 800c31a:	4a60      	ldr	r2, [pc, #384]	@ (800c49c <ScheduleTx+0x2b8>)
 800c31c:	589a      	ldr	r2, [r3, r2]
 800c31e:	231a      	movs	r3, #26
 800c320:	33ff      	adds	r3, #255	@ 0xff
 800c322:	5cd3      	ldrb	r3, [r2, r3]
 800c324:	b25b      	sxtb	r3, r3
 800c326:	002a      	movs	r2, r5
 800c328:	f005 fb48 	bl	80119bc <RegionApplyDrOffset>
 800c32c:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800c32e:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800c330:	4b59      	ldr	r3, [pc, #356]	@ (800c498 <ScheduleTx+0x2b4>)
 800c332:	4a5a      	ldr	r2, [pc, #360]	@ (800c49c <ScheduleTx+0x2b8>)
 800c334:	589a      	ldr	r2, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800c336:	2380      	movs	r3, #128	@ 0x80
 800c338:	005b      	lsls	r3, r3, #1
 800c33a:	5cd2      	ldrb	r2, [r2, r3]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800c33c:	4b56      	ldr	r3, [pc, #344]	@ (800c498 <ScheduleTx+0x2b4>)
 800c33e:	4857      	ldr	r0, [pc, #348]	@ (800c49c <ScheduleTx+0x2b8>)
 800c340:	581b      	ldr	r3, [r3, r0]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800c342:	20fc      	movs	r0, #252	@ 0xfc
 800c344:	5818      	ldr	r0, [r3, r0]
 800c346:	4b58      	ldr	r3, [pc, #352]	@ (800c4a8 <ScheduleTx+0x2c4>)
 800c348:	9300      	str	r3, [sp, #0]
 800c34a:	0003      	movs	r3, r0
 800c34c:	0020      	movs	r0, r4
 800c34e:	f005 f9fe 	bl	801174e <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800c352:	4b51      	ldr	r3, [pc, #324]	@ (800c498 <ScheduleTx+0x2b4>)
 800c354:	4a51      	ldr	r2, [pc, #324]	@ (800c49c <ScheduleTx+0x2b8>)
 800c356:	589b      	ldr	r3, [r3, r2]
 800c358:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 800c35a:	4b4f      	ldr	r3, [pc, #316]	@ (800c498 <ScheduleTx+0x2b4>)
 800c35c:	4a4f      	ldr	r2, [pc, #316]	@ (800c49c <ScheduleTx+0x2b8>)
 800c35e:	589a      	ldr	r2, [r3, r2]
 800c360:	2390      	movs	r3, #144	@ 0x90
 800c362:	005b      	lsls	r3, r3, #1
 800c364:	5cd3      	ldrb	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800c366:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800c368:	4b4b      	ldr	r3, [pc, #300]	@ (800c498 <ScheduleTx+0x2b4>)
 800c36a:	4a4c      	ldr	r2, [pc, #304]	@ (800c49c <ScheduleTx+0x2b8>)
 800c36c:	589a      	ldr	r2, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800c36e:	2380      	movs	r3, #128	@ 0x80
 800c370:	005b      	lsls	r3, r3, #1
 800c372:	5cd2      	ldrb	r2, [r2, r3]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800c374:	4b48      	ldr	r3, [pc, #288]	@ (800c498 <ScheduleTx+0x2b4>)
 800c376:	4c49      	ldr	r4, [pc, #292]	@ (800c49c <ScheduleTx+0x2b8>)
 800c378:	591b      	ldr	r3, [r3, r4]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800c37a:	24fc      	movs	r4, #252	@ 0xfc
 800c37c:	591c      	ldr	r4, [r3, r4]
 800c37e:	4b4b      	ldr	r3, [pc, #300]	@ (800c4ac <ScheduleTx+0x2c8>)
 800c380:	9300      	str	r3, [sp, #0]
 800c382:	0023      	movs	r3, r4
 800c384:	f005 f9e3 	bl	801174e <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow2Config );

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800c388:	4b43      	ldr	r3, [pc, #268]	@ (800c498 <ScheduleTx+0x2b4>)
 800c38a:	4a44      	ldr	r2, [pc, #272]	@ (800c49c <ScheduleTx+0x2b8>)
 800c38c:	589a      	ldr	r2, [r3, r2]
 800c38e:	23ea      	movs	r3, #234	@ 0xea
 800c390:	005b      	lsls	r3, r3, #1
 800c392:	5cd3      	ldrb	r3, [r2, r3]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d11e      	bne.n	800c3d6 <ScheduleTx+0x1f2>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800c398:	4b3f      	ldr	r3, [pc, #252]	@ (800c498 <ScheduleTx+0x2b4>)
 800c39a:	4a40      	ldr	r2, [pc, #256]	@ (800c49c <ScheduleTx+0x2b8>)
 800c39c:	589a      	ldr	r2, [r3, r2]
 800c39e:	2388      	movs	r3, #136	@ 0x88
 800c3a0:	005b      	lsls	r3, r3, #1
 800c3a2:	58d3      	ldr	r3, [r2, r3]
 800c3a4:	493c      	ldr	r1, [pc, #240]	@ (800c498 <ScheduleTx+0x2b4>)
 800c3a6:	22f1      	movs	r2, #241	@ 0xf1
 800c3a8:	0092      	lsls	r2, r2, #2
 800c3aa:	588a      	ldr	r2, [r1, r2]
 800c3ac:	1899      	adds	r1, r3, r2
 800c3ae:	4a3a      	ldr	r2, [pc, #232]	@ (800c498 <ScheduleTx+0x2b4>)
 800c3b0:	23ec      	movs	r3, #236	@ 0xec
 800c3b2:	009b      	lsls	r3, r3, #2
 800c3b4:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800c3b6:	4b38      	ldr	r3, [pc, #224]	@ (800c498 <ScheduleTx+0x2b4>)
 800c3b8:	4a38      	ldr	r2, [pc, #224]	@ (800c49c <ScheduleTx+0x2b8>)
 800c3ba:	589a      	ldr	r2, [r3, r2]
 800c3bc:	238a      	movs	r3, #138	@ 0x8a
 800c3be:	005b      	lsls	r3, r3, #1
 800c3c0:	58d3      	ldr	r3, [r2, r3]
 800c3c2:	4935      	ldr	r1, [pc, #212]	@ (800c498 <ScheduleTx+0x2b4>)
 800c3c4:	22f6      	movs	r2, #246	@ 0xf6
 800c3c6:	0092      	lsls	r2, r2, #2
 800c3c8:	588a      	ldr	r2, [r1, r2]
 800c3ca:	1899      	adds	r1, r3, r2
 800c3cc:	4a32      	ldr	r2, [pc, #200]	@ (800c498 <ScheduleTx+0x2b4>)
 800c3ce:	23ed      	movs	r3, #237	@ 0xed
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	50d1      	str	r1, [r2, r3]
 800c3d4:	e03c      	b.n	800c450 <ScheduleTx+0x26c>
    }
    else
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800c3d6:	2308      	movs	r3, #8
 800c3d8:	18fb      	adds	r3, r7, r3
 800c3da:	0018      	movs	r0, r3
 800c3dc:	f003 f99c 	bl	800f718 <LoRaMacCommandsGetSizeSerializedCmds>
 800c3e0:	1e03      	subs	r3, r0, #0
 800c3e2:	d001      	beq.n	800c3e8 <ScheduleTx+0x204>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c3e4:	2313      	movs	r3, #19
 800c3e6:	e052      	b.n	800c48e <ScheduleTx+0x2aa>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 800c3e8:	4b2b      	ldr	r3, [pc, #172]	@ (800c498 <ScheduleTx+0x2b4>)
 800c3ea:	4a31      	ldr	r2, [pc, #196]	@ (800c4b0 <ScheduleTx+0x2cc>)
 800c3ec:	5c98      	ldrb	r0, [r3, r2]
 800c3ee:	4b2a      	ldr	r3, [pc, #168]	@ (800c498 <ScheduleTx+0x2b4>)
 800c3f0:	4a2a      	ldr	r2, [pc, #168]	@ (800c49c <ScheduleTx+0x2b8>)
 800c3f2:	589b      	ldr	r3, [r3, r2]
 800c3f4:	22f9      	movs	r2, #249	@ 0xf9
 800c3f6:	569b      	ldrsb	r3, [r3, r2]
 800c3f8:	68ba      	ldr	r2, [r7, #8]
 800c3fa:	b2d2      	uxtb	r2, r2
 800c3fc:	0019      	movs	r1, r3
 800c3fe:	f7fe ffa3 	bl	800b348 <ValidatePayloadLength>
 800c402:	0003      	movs	r3, r0
 800c404:	001a      	movs	r2, r3
 800c406:	2301      	movs	r3, #1
 800c408:	4053      	eors	r3, r2
 800c40a:	b2db      	uxtb	r3, r3
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d001      	beq.n	800c414 <ScheduleTx+0x230>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800c410:	2308      	movs	r3, #8
 800c412:	e03c      	b.n	800c48e <ScheduleTx+0x2aa>
        }
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800c414:	4b20      	ldr	r3, [pc, #128]	@ (800c498 <ScheduleTx+0x2b4>)
 800c416:	4a21      	ldr	r2, [pc, #132]	@ (800c49c <ScheduleTx+0x2b8>)
 800c418:	589a      	ldr	r2, [r3, r2]
 800c41a:	2384      	movs	r3, #132	@ 0x84
 800c41c:	005b      	lsls	r3, r3, #1
 800c41e:	58d3      	ldr	r3, [r2, r3]
 800c420:	491d      	ldr	r1, [pc, #116]	@ (800c498 <ScheduleTx+0x2b4>)
 800c422:	22f1      	movs	r2, #241	@ 0xf1
 800c424:	0092      	lsls	r2, r2, #2
 800c426:	588a      	ldr	r2, [r1, r2]
 800c428:	1899      	adds	r1, r3, r2
 800c42a:	4a1b      	ldr	r2, [pc, #108]	@ (800c498 <ScheduleTx+0x2b4>)
 800c42c:	23ec      	movs	r3, #236	@ 0xec
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800c432:	4b19      	ldr	r3, [pc, #100]	@ (800c498 <ScheduleTx+0x2b4>)
 800c434:	4a19      	ldr	r2, [pc, #100]	@ (800c49c <ScheduleTx+0x2b8>)
 800c436:	589a      	ldr	r2, [r3, r2]
 800c438:	2386      	movs	r3, #134	@ 0x86
 800c43a:	005b      	lsls	r3, r3, #1
 800c43c:	58d3      	ldr	r3, [r2, r3]
 800c43e:	4916      	ldr	r1, [pc, #88]	@ (800c498 <ScheduleTx+0x2b4>)
 800c440:	22f6      	movs	r2, #246	@ 0xf6
 800c442:	0092      	lsls	r2, r2, #2
 800c444:	588a      	ldr	r2, [r1, r2]
 800c446:	1899      	adds	r1, r3, r2
 800c448:	4a13      	ldr	r2, [pc, #76]	@ (800c498 <ScheduleTx+0x2b4>)
 800c44a:	23ed      	movs	r3, #237	@ 0xed
 800c44c:	009b      	lsls	r3, r3, #2
 800c44e:	50d1      	str	r1, [r2, r3]
    }

    // Secure frame
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 800c450:	4b11      	ldr	r3, [pc, #68]	@ (800c498 <ScheduleTx+0x2b4>)
 800c452:	4a12      	ldr	r2, [pc, #72]	@ (800c49c <ScheduleTx+0x2b8>)
 800c454:	589b      	ldr	r3, [r3, r2]
 800c456:	22f9      	movs	r2, #249	@ 0xf9
 800c458:	569b      	ldrsb	r3, [r3, r2]
 800c45a:	b2da      	uxtb	r2, r3
 800c45c:	4b0e      	ldr	r3, [pc, #56]	@ (800c498 <ScheduleTx+0x2b4>)
 800c45e:	4915      	ldr	r1, [pc, #84]	@ (800c4b4 <ScheduleTx+0x2d0>)
 800c460:	5c5b      	ldrb	r3, [r3, r1]
 800c462:	251e      	movs	r5, #30
 800c464:	197c      	adds	r4, r7, r5
 800c466:	0019      	movs	r1, r3
 800c468:	0010      	movs	r0, r2
 800c46a:	f000 f825 	bl	800c4b8 <SecureFrame>
 800c46e:	0003      	movs	r3, r0
 800c470:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_STATUS_OK )
 800c472:	197b      	adds	r3, r7, r5
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d002      	beq.n	800c480 <ScheduleTx+0x29c>
    {
        return retval;
 800c47a:	197b      	adds	r3, r7, r5
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	e006      	b.n	800c48e <ScheduleTx+0x2aa>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800c480:	4b05      	ldr	r3, [pc, #20]	@ (800c498 <ScheduleTx+0x2b4>)
 800c482:	4a0c      	ldr	r2, [pc, #48]	@ (800c4b4 <ScheduleTx+0x2d0>)
 800c484:	5c9b      	ldrb	r3, [r3, r2]
 800c486:	0018      	movs	r0, r3
 800c488:	f000 fbd0 	bl	800cc2c <SendFrameOnChannel>
 800c48c:	0003      	movs	r3, r0
}
 800c48e:	0018      	movs	r0, r3
 800c490:	46bd      	mov	sp, r7
 800c492:	b009      	add	sp, #36	@ 0x24
 800c494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c496:	46c0      	nop			@ (mov r8, r8)
 800c498:	20000940 	.word	0x20000940
 800c49c:	00000484 	.word	0x00000484
 800c4a0:	20000d55 	.word	0x20000d55
 800c4a4:	20000ca8 	.word	0x20000ca8
 800c4a8:	20000cf8 	.word	0x20000cf8
 800c4ac:	20000d0c 	.word	0x20000d0c
 800c4b0:	00000237 	.word	0x00000237
 800c4b4:	00000415 	.word	0x00000415

0800c4b8 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800c4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4ba:	b085      	sub	sp, #20
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	0002      	movs	r2, r0
 800c4c0:	1dfb      	adds	r3, r7, #7
 800c4c2:	701a      	strb	r2, [r3, #0]
 800c4c4:	1dbb      	adds	r3, r7, #6
 800c4c6:	1c0a      	adds	r2, r1, #0
 800c4c8:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800c4ca:	230f      	movs	r3, #15
 800c4cc:	18fb      	adds	r3, r7, r3
 800c4ce:	2213      	movs	r2, #19
 800c4d0:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800c4d6:	4a2c      	ldr	r2, [pc, #176]	@ (800c588 <SecureFrame+0xd0>)
 800c4d8:	2382      	movs	r3, #130	@ 0x82
 800c4da:	005b      	lsls	r3, r3, #1
 800c4dc:	5cd3      	ldrb	r3, [r2, r3]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d002      	beq.n	800c4e8 <SecureFrame+0x30>
 800c4e2:	2b04      	cmp	r3, #4
 800c4e4:	d016      	beq.n	800c514 <SecureFrame+0x5c>
 800c4e6:	e047      	b.n	800c578 <SecureFrame+0xc0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800c4e8:	250f      	movs	r5, #15
 800c4ea:	197c      	adds	r4, r7, r5
 800c4ec:	4b27      	ldr	r3, [pc, #156]	@ (800c58c <SecureFrame+0xd4>)
 800c4ee:	0018      	movs	r0, r3
 800c4f0:	f004 f8c8 	bl	8010684 <LoRaMacCryptoPrepareJoinRequest>
 800c4f4:	0003      	movs	r3, r0
 800c4f6:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800c4f8:	197b      	adds	r3, r7, r5
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d001      	beq.n	800c504 <SecureFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800c500:	2311      	movs	r3, #17
 800c502:	e03c      	b.n	800c57e <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800c504:	4a20      	ldr	r2, [pc, #128]	@ (800c588 <SecureFrame+0xd0>)
 800c506:	2386      	movs	r3, #134	@ 0x86
 800c508:	005b      	lsls	r3, r3, #1
 800c50a:	5cd3      	ldrb	r3, [r2, r3]
 800c50c:	001a      	movs	r2, r3
 800c50e:	4b1e      	ldr	r3, [pc, #120]	@ (800c588 <SecureFrame+0xd0>)
 800c510:	801a      	strh	r2, [r3, #0]
            break;
 800c512:	e033      	b.n	800c57c <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800c514:	2308      	movs	r3, #8
 800c516:	18fb      	adds	r3, r7, r3
 800c518:	0018      	movs	r0, r3
 800c51a:	f003 ffb7 	bl	801048c <LoRaMacCryptoGetFCntUp>
 800c51e:	1e03      	subs	r3, r0, #0
 800c520:	d001      	beq.n	800c526 <SecureFrame+0x6e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800c522:	2312      	movs	r3, #18
 800c524:	e02b      	b.n	800c57e <SecureFrame+0xc6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800c526:	4a18      	ldr	r2, [pc, #96]	@ (800c588 <SecureFrame+0xd0>)
 800c528:	2382      	movs	r3, #130	@ 0x82
 800c52a:	00db      	lsls	r3, r3, #3
 800c52c:	5cd3      	ldrb	r3, [r2, r3]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d104      	bne.n	800c53c <SecureFrame+0x84>
 800c532:	4b15      	ldr	r3, [pc, #84]	@ (800c588 <SecureFrame+0xd0>)
 800c534:	4a16      	ldr	r2, [pc, #88]	@ (800c590 <SecureFrame+0xd8>)
 800c536:	5c9b      	ldrb	r3, [r3, r2]
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d902      	bls.n	800c542 <SecureFrame+0x8a>
            {
                fCntUp -= 1;
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	3b01      	subs	r3, #1
 800c540:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800c542:	68b8      	ldr	r0, [r7, #8]
 800c544:	260f      	movs	r6, #15
 800c546:	19bc      	adds	r4, r7, r6
 800c548:	4d10      	ldr	r5, [pc, #64]	@ (800c58c <SecureFrame+0xd4>)
 800c54a:	1dbb      	adds	r3, r7, #6
 800c54c:	781a      	ldrb	r2, [r3, #0]
 800c54e:	1dfb      	adds	r3, r7, #7
 800c550:	7819      	ldrb	r1, [r3, #0]
 800c552:	002b      	movs	r3, r5
 800c554:	f004 fab8 	bl	8010ac8 <LoRaMacCryptoSecureMessage>
 800c558:	0003      	movs	r3, r0
 800c55a:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800c55c:	19bb      	adds	r3, r7, r6
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d001      	beq.n	800c568 <SecureFrame+0xb0>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800c564:	2311      	movs	r3, #17
 800c566:	e00a      	b.n	800c57e <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800c568:	4a07      	ldr	r2, [pc, #28]	@ (800c588 <SecureFrame+0xd0>)
 800c56a:	2386      	movs	r3, #134	@ 0x86
 800c56c:	005b      	lsls	r3, r3, #1
 800c56e:	5cd3      	ldrb	r3, [r2, r3]
 800c570:	001a      	movs	r2, r3
 800c572:	4b05      	ldr	r3, [pc, #20]	@ (800c588 <SecureFrame+0xd0>)
 800c574:	801a      	strh	r2, [r3, #0]
            break;
 800c576:	e001      	b.n	800c57c <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800c578:	2303      	movs	r3, #3
 800c57a:	e000      	b.n	800c57e <SecureFrame+0xc6>
    }
    return LORAMAC_STATUS_OK;
 800c57c:	2300      	movs	r3, #0
}
 800c57e:	0018      	movs	r0, r3
 800c580:	46bd      	mov	sp, r7
 800c582:	b005      	add	sp, #20
 800c584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c586:	46c0      	nop			@ (mov r8, r8)
 800c588:	20000940 	.word	0x20000940
 800c58c:	20000a48 	.word	0x20000a48
 800c590:	00000412 	.word	0x00000412

0800c594 <CalculateBackOff>:

static void CalculateBackOff( uint8_t channel )
{
 800c594:	b590      	push	{r4, r7, lr}
 800c596:	b087      	sub	sp, #28
 800c598:	af00      	add	r7, sp, #0
 800c59a:	0002      	movs	r2, r0
 800c59c:	1dfb      	adds	r3, r7, #7
 800c59e:	701a      	strb	r2, [r3, #0]
    CalcBackOffParams_t calcBackOff;

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800c5a0:	4b31      	ldr	r3, [pc, #196]	@ (800c668 <CalculateBackOff+0xd4>)
 800c5a2:	4a32      	ldr	r2, [pc, #200]	@ (800c66c <CalculateBackOff+0xd8>)
 800c5a4:	589a      	ldr	r2, [r3, r2]
 800c5a6:	23ea      	movs	r3, #234	@ 0xea
 800c5a8:	005b      	lsls	r3, r3, #1
 800c5aa:	5cd3      	ldrb	r3, [r2, r3]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d104      	bne.n	800c5ba <CalculateBackOff+0x26>
    {
        calcBackOff.Joined = false;
 800c5b0:	230c      	movs	r3, #12
 800c5b2:	18fb      	adds	r3, r7, r3
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	701a      	strb	r2, [r3, #0]
 800c5b8:	e003      	b.n	800c5c2 <CalculateBackOff+0x2e>
    }
    else
    {
        calcBackOff.Joined = true;
 800c5ba:	230c      	movs	r3, #12
 800c5bc:	18fb      	adds	r3, r7, r3
 800c5be:	2201      	movs	r2, #1
 800c5c0:	701a      	strb	r2, [r3, #0]
    }
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800c5c2:	4b29      	ldr	r3, [pc, #164]	@ (800c668 <CalculateBackOff+0xd4>)
 800c5c4:	4a29      	ldr	r2, [pc, #164]	@ (800c66c <CalculateBackOff+0xd8>)
 800c5c6:	589a      	ldr	r2, [r3, r2]
 800c5c8:	233e      	movs	r3, #62	@ 0x3e
 800c5ca:	33ff      	adds	r3, #255	@ 0xff
 800c5cc:	5cd2      	ldrb	r2, [r2, r3]
 800c5ce:	240c      	movs	r4, #12
 800c5d0:	193b      	adds	r3, r7, r4
 800c5d2:	709a      	strb	r2, [r3, #2]
    calcBackOff.Channel = channel;
 800c5d4:	193b      	adds	r3, r7, r4
 800c5d6:	1dfa      	adds	r2, r7, #7
 800c5d8:	7812      	ldrb	r2, [r2, #0]
 800c5da:	70da      	strb	r2, [r3, #3]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 800c5dc:	4b22      	ldr	r3, [pc, #136]	@ (800c668 <CalculateBackOff+0xd4>)
 800c5de:	4a23      	ldr	r2, [pc, #140]	@ (800c66c <CalculateBackOff+0xd8>)
 800c5e0:	589a      	ldr	r2, [r3, r2]
 800c5e2:	23e6      	movs	r3, #230	@ 0xe6
 800c5e4:	005b      	lsls	r3, r3, #1
 800c5e6:	58d3      	ldr	r3, [r2, r3]
 800c5e8:	0018      	movs	r0, r3
 800c5ea:	f008 fdfa 	bl	80151e2 <TimerGetElapsedTime>
 800c5ee:	0002      	movs	r2, r0
 800c5f0:	193b      	adds	r3, r7, r4
 800c5f2:	605a      	str	r2, [r3, #4]
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800c5f4:	4a1c      	ldr	r2, [pc, #112]	@ (800c668 <CalculateBackOff+0xd4>)
 800c5f6:	2383      	movs	r3, #131	@ 0x83
 800c5f8:	00db      	lsls	r3, r3, #3
 800c5fa:	58d2      	ldr	r2, [r2, r3]
 800c5fc:	193b      	adds	r3, r7, r4
 800c5fe:	609a      	str	r2, [r3, #8]
    calcBackOff.LastTxIsJoinRequest = false;
 800c600:	193b      	adds	r3, r7, r4
 800c602:	2200      	movs	r2, #0
 800c604:	705a      	strb	r2, [r3, #1]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 800c606:	4b18      	ldr	r3, [pc, #96]	@ (800c668 <CalculateBackOff+0xd4>)
 800c608:	4a19      	ldr	r2, [pc, #100]	@ (800c670 <CalculateBackOff+0xdc>)
 800c60a:	5c9b      	ldrb	r3, [r3, r2]
 800c60c:	2204      	movs	r2, #4
 800c60e:	4013      	ands	r3, r2
 800c610:	b2db      	uxtb	r3, r3
 800c612:	2b00      	cmp	r3, #0
 800c614:	d007      	beq.n	800c626 <CalculateBackOff+0x92>
 800c616:	2000      	movs	r0, #0
 800c618:	f003 fa6e 	bl	800faf8 <LoRaMacConfirmQueueIsCmdActive>
 800c61c:	1e03      	subs	r3, r0, #0
 800c61e:	d002      	beq.n	800c626 <CalculateBackOff+0x92>
    {
        calcBackOff.LastTxIsJoinRequest = true;
 800c620:	193b      	adds	r3, r7, r4
 800c622:	2201      	movs	r2, #1
 800c624:	705a      	strb	r2, [r3, #1]
    }

    // Update regional back-off
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 800c626:	4b10      	ldr	r3, [pc, #64]	@ (800c668 <CalculateBackOff+0xd4>)
 800c628:	4a10      	ldr	r2, [pc, #64]	@ (800c66c <CalculateBackOff+0xd8>)
 800c62a:	589b      	ldr	r3, [r3, r2]
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	220c      	movs	r2, #12
 800c630:	18ba      	adds	r2, r7, r2
 800c632:	0011      	movs	r1, r2
 800c634:	0018      	movs	r0, r3
 800c636:	f005 f97c 	bl	8011932 <RegionCalcBackOff>

    // Update aggregated time-off. This must be an assignment and no incremental
    // update as we do only calculate the time-off based on the last transmission
    MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 800c63a:	4b0b      	ldr	r3, [pc, #44]	@ (800c668 <CalculateBackOff+0xd4>)
 800c63c:	4a0b      	ldr	r2, [pc, #44]	@ (800c66c <CalculateBackOff+0xd8>)
 800c63e:	589a      	ldr	r2, [r3, r2]
 800c640:	23e1      	movs	r3, #225	@ 0xe1
 800c642:	005b      	lsls	r3, r3, #1
 800c644:	5ad3      	ldrh	r3, [r2, r3]
 800c646:	3b01      	subs	r3, #1
 800c648:	4907      	ldr	r1, [pc, #28]	@ (800c668 <CalculateBackOff+0xd4>)
 800c64a:	2283      	movs	r2, #131	@ 0x83
 800c64c:	00d2      	lsls	r2, r2, #3
 800c64e:	5889      	ldr	r1, [r1, r2]
 800c650:	4a05      	ldr	r2, [pc, #20]	@ (800c668 <CalculateBackOff+0xd4>)
 800c652:	4806      	ldr	r0, [pc, #24]	@ (800c66c <CalculateBackOff+0xd8>)
 800c654:	5812      	ldr	r2, [r2, r0]
 800c656:	4359      	muls	r1, r3
 800c658:	23e4      	movs	r3, #228	@ 0xe4
 800c65a:	005b      	lsls	r3, r3, #1
 800c65c:	50d1      	str	r1, [r2, r3]
}
 800c65e:	46c0      	nop			@ (mov r8, r8)
 800c660:	46bd      	mov	sp, r7
 800c662:	b007      	add	sp, #28
 800c664:	bd90      	pop	{r4, r7, pc}
 800c666:	46c0      	nop			@ (mov r8, r8)
 800c668:	20000940 	.word	0x20000940
 800c66c:	00000484 	.word	0x00000484
 800c670:	00000481 	.word	0x00000481

0800c674 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	1d3b      	adds	r3, r7, #4
 800c67c:	7019      	strb	r1, [r3, #0]
 800c67e:	0011      	movs	r1, r2
 800c680:	1dfb      	adds	r3, r7, #7
 800c682:	1c02      	adds	r2, r0, #0
 800c684:	701a      	strb	r2, [r3, #0]
 800c686:	1dbb      	adds	r3, r7, #6
 800c688:	1c0a      	adds	r2, r1, #0
 800c68a:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800c68c:	1dfb      	adds	r3, r7, #7
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d003      	beq.n	800c69c <RemoveMacCommands+0x28>
 800c694:	1dfb      	adds	r3, r7, #7
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d10f      	bne.n	800c6bc <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800c69c:	1dbb      	adds	r3, r7, #6
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d109      	bne.n	800c6b8 <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
 800c6a4:	1d3b      	adds	r3, r7, #4
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	2220      	movs	r2, #32
 800c6aa:	4013      	ands	r3, r2
 800c6ac:	b2db      	uxtb	r3, r3
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d004      	beq.n	800c6bc <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800c6b2:	f003 f80d 	bl	800f6d0 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800c6b6:	e001      	b.n	800c6bc <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800c6b8:	f003 f80a 	bl	800f6d0 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800c6bc:	46c0      	nop			@ (mov r8, r8)
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	b002      	add	sp, #8
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <ResetMacParameters>:


static void ResetMacParameters( void )
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b082      	sub	sp, #8
 800c6c8:	af00      	add	r7, sp, #0
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 800c6ca:	4b72      	ldr	r3, [pc, #456]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c6cc:	4a72      	ldr	r2, [pc, #456]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c6ce:	589a      	ldr	r2, [r3, r2]
 800c6d0:	23ea      	movs	r3, #234	@ 0xea
 800c6d2:	005b      	lsls	r3, r3, #1
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	54d1      	strb	r1, [r2, r3]

    // ADR counter
    MacCtx.NvmCtx->AdrAckCounter = 0;
 800c6d8:	4b6e      	ldr	r3, [pc, #440]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c6da:	4a6f      	ldr	r2, [pc, #444]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c6dc:	589b      	ldr	r3, [r3, r2]
 800c6de:	22f4      	movs	r2, #244	@ 0xf4
 800c6e0:	2100      	movs	r1, #0
 800c6e2:	5099      	str	r1, [r3, r2]

    MacCtx.ChannelsNbTransCounter = 0;
 800c6e4:	4a6b      	ldr	r2, [pc, #428]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c6e6:	2382      	movs	r3, #130	@ 0x82
 800c6e8:	00db      	lsls	r3, r3, #3
 800c6ea:	2100      	movs	r1, #0
 800c6ec:	54d1      	strb	r1, [r2, r3]
    MacCtx.AckTimeoutRetries = 1;
 800c6ee:	4b69      	ldr	r3, [pc, #420]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c6f0:	4a6a      	ldr	r2, [pc, #424]	@ (800c89c <ResetMacParameters+0x1d8>)
 800c6f2:	2101      	movs	r1, #1
 800c6f4:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetriesCounter = 1;
 800c6f6:	4b67      	ldr	r3, [pc, #412]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c6f8:	4a69      	ldr	r2, [pc, #420]	@ (800c8a0 <ResetMacParameters+0x1dc>)
 800c6fa:	2101      	movs	r1, #1
 800c6fc:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 800c6fe:	4b65      	ldr	r3, [pc, #404]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c700:	4a68      	ldr	r2, [pc, #416]	@ (800c8a4 <ResetMacParameters+0x1e0>)
 800c702:	2100      	movs	r1, #0
 800c704:	5499      	strb	r1, [r3, r2]

    MacCtx.NvmCtx->MaxDCycle = 0;
 800c706:	4b63      	ldr	r3, [pc, #396]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c708:	4a63      	ldr	r2, [pc, #396]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c70a:	589a      	ldr	r2, [r3, r2]
 800c70c:	239e      	movs	r3, #158	@ 0x9e
 800c70e:	005b      	lsls	r3, r3, #1
 800c710:	2100      	movs	r1, #0
 800c712:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 800c714:	4b5f      	ldr	r3, [pc, #380]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c716:	4a60      	ldr	r2, [pc, #384]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c718:	589a      	ldr	r2, [r3, r2]
 800c71a:	23e1      	movs	r3, #225	@ 0xe1
 800c71c:	005b      	lsls	r3, r3, #1
 800c71e:	2101      	movs	r1, #1
 800c720:	52d1      	strh	r1, [r2, r3]

    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800c722:	4b5c      	ldr	r3, [pc, #368]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c724:	4a5c      	ldr	r2, [pc, #368]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c726:	589a      	ldr	r2, [r3, r2]
 800c728:	4b5a      	ldr	r3, [pc, #360]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c72a:	495b      	ldr	r1, [pc, #364]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c72c:	585b      	ldr	r3, [r3, r1]
 800c72e:	2104      	movs	r1, #4
 800c730:	5651      	ldrsb	r1, [r2, r1]
 800c732:	22f8      	movs	r2, #248	@ 0xf8
 800c734:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800c736:	4b57      	ldr	r3, [pc, #348]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c738:	4a57      	ldr	r2, [pc, #348]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c73a:	589a      	ldr	r2, [r3, r2]
 800c73c:	4b55      	ldr	r3, [pc, #340]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c73e:	4956      	ldr	r1, [pc, #344]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c740:	585b      	ldr	r3, [r3, r1]
 800c742:	2105      	movs	r1, #5
 800c744:	5651      	ldrsb	r1, [r2, r1]
 800c746:	22f9      	movs	r2, #249	@ 0xf9
 800c748:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 800c74a:	4b52      	ldr	r3, [pc, #328]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c74c:	4a52      	ldr	r2, [pc, #328]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c74e:	589b      	ldr	r3, [r3, r2]
 800c750:	4a50      	ldr	r2, [pc, #320]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c752:	4951      	ldr	r1, [pc, #324]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c754:	5852      	ldr	r2, [r2, r1]
 800c756:	2125      	movs	r1, #37	@ 0x25
 800c758:	5c59      	ldrb	r1, [r3, r1]
 800c75a:	231a      	movs	r3, #26
 800c75c:	33ff      	adds	r3, #255	@ 0xff
 800c75e:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 800c760:	4b4c      	ldr	r3, [pc, #304]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c762:	4a4d      	ldr	r2, [pc, #308]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c764:	589a      	ldr	r2, [r3, r2]
 800c766:	4b4b      	ldr	r3, [pc, #300]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c768:	494b      	ldr	r1, [pc, #300]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c76a:	5859      	ldr	r1, [r3, r1]
 800c76c:	238e      	movs	r3, #142	@ 0x8e
 800c76e:	005b      	lsls	r3, r3, #1
 800c770:	18cb      	adds	r3, r1, r3
 800c772:	3228      	adds	r2, #40	@ 0x28
 800c774:	ca03      	ldmia	r2!, {r0, r1}
 800c776:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 800c778:	4b46      	ldr	r3, [pc, #280]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c77a:	4a47      	ldr	r2, [pc, #284]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c77c:	589a      	ldr	r2, [r3, r2]
 800c77e:	4b45      	ldr	r3, [pc, #276]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c780:	4945      	ldr	r1, [pc, #276]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c782:	5859      	ldr	r1, [r3, r1]
 800c784:	2392      	movs	r3, #146	@ 0x92
 800c786:	005b      	lsls	r3, r3, #1
 800c788:	18cb      	adds	r3, r1, r3
 800c78a:	3230      	adds	r2, #48	@ 0x30
 800c78c:	ca03      	ldmia	r2!, {r0, r1}
 800c78e:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 800c790:	4b40      	ldr	r3, [pc, #256]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c792:	4a41      	ldr	r2, [pc, #260]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c794:	589b      	ldr	r3, [r3, r2]
 800c796:	4a3f      	ldr	r2, [pc, #252]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c798:	493f      	ldr	r1, [pc, #252]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c79a:	5852      	ldr	r2, [r2, r1]
 800c79c:	2138      	movs	r1, #56	@ 0x38
 800c79e:	5c59      	ldrb	r1, [r3, r1]
 800c7a0:	2396      	movs	r3, #150	@ 0x96
 800c7a2:	005b      	lsls	r3, r3, #1
 800c7a4:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 800c7a6:	4b3b      	ldr	r3, [pc, #236]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c7a8:	4a3b      	ldr	r2, [pc, #236]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c7aa:	589b      	ldr	r3, [r3, r2]
 800c7ac:	4a39      	ldr	r2, [pc, #228]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c7ae:	493a      	ldr	r1, [pc, #232]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c7b0:	5852      	ldr	r2, [r2, r1]
 800c7b2:	2139      	movs	r1, #57	@ 0x39
 800c7b4:	5c59      	ldrb	r1, [r3, r1]
 800c7b6:	232e      	movs	r3, #46	@ 0x2e
 800c7b8:	33ff      	adds	r3, #255	@ 0xff
 800c7ba:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 800c7bc:	4b35      	ldr	r3, [pc, #212]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c7be:	4a36      	ldr	r2, [pc, #216]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c7c0:	589b      	ldr	r3, [r3, r2]
 800c7c2:	4a34      	ldr	r2, [pc, #208]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c7c4:	4934      	ldr	r1, [pc, #208]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c7c6:	5852      	ldr	r2, [r2, r1]
 800c7c8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c7ca:	2398      	movs	r3, #152	@ 0x98
 800c7cc:	005b      	lsls	r3, r3, #1
 800c7ce:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800c7d0:	4b30      	ldr	r3, [pc, #192]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c7d2:	4a31      	ldr	r2, [pc, #196]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c7d4:	589b      	ldr	r3, [r3, r2]
 800c7d6:	4a2f      	ldr	r2, [pc, #188]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c7d8:	492f      	ldr	r1, [pc, #188]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c7da:	5852      	ldr	r2, [r2, r1]
 800c7dc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800c7de:	239a      	movs	r3, #154	@ 0x9a
 800c7e0:	005b      	lsls	r3, r3, #1
 800c7e2:	50d1      	str	r1, [r2, r3]

    MacCtx.NodeAckRequested = false;
 800c7e4:	4b2b      	ldr	r3, [pc, #172]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c7e6:	4a30      	ldr	r2, [pc, #192]	@ (800c8a8 <ResetMacParameters+0x1e4>)
 800c7e8:	2100      	movs	r1, #0
 800c7ea:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 800c7ec:	4b29      	ldr	r3, [pc, #164]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c7ee:	4a2a      	ldr	r2, [pc, #168]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c7f0:	589a      	ldr	r2, [r3, r2]
 800c7f2:	23e0      	movs	r3, #224	@ 0xe0
 800c7f4:	005b      	lsls	r3, r3, #1
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	54d1      	strb	r1, [r2, r3]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800c7fa:	003b      	movs	r3, r7
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 800c800:	003b      	movs	r3, r7
 800c802:	2200      	movs	r2, #0
 800c804:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800c806:	4b23      	ldr	r3, [pc, #140]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c808:	4a23      	ldr	r2, [pc, #140]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c80a:	589b      	ldr	r3, [r3, r2]
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	003a      	movs	r2, r7
 800c810:	0011      	movs	r1, r2
 800c812:	0018      	movs	r0, r3
 800c814:	f004 ff28 	bl	8011668 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800c818:	4b1e      	ldr	r3, [pc, #120]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c81a:	4a24      	ldr	r2, [pc, #144]	@ (800c8ac <ResetMacParameters+0x1e8>)
 800c81c:	2100      	movs	r1, #0
 800c81e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 800c820:	4b1c      	ldr	r3, [pc, #112]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c822:	4a1d      	ldr	r2, [pc, #116]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c824:	589a      	ldr	r2, [r3, r2]
 800c826:	4b1b      	ldr	r3, [pc, #108]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c828:	4920      	ldr	r1, [pc, #128]	@ (800c8ac <ResetMacParameters+0x1e8>)
 800c82a:	5c59      	ldrb	r1, [r3, r1]
 800c82c:	239f      	movs	r3, #159	@ 0x9f
 800c82e:	005b      	lsls	r3, r3, #1
 800c830:	54d1      	strb	r1, [r2, r3]

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800c832:	4b18      	ldr	r3, [pc, #96]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c834:	4a1d      	ldr	r2, [pc, #116]	@ (800c8ac <ResetMacParameters+0x1e8>)
 800c836:	5c99      	ldrb	r1, [r3, r2]
 800c838:	4a16      	ldr	r2, [pc, #88]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c83a:	23f3      	movs	r3, #243	@ 0xf3
 800c83c:	009b      	lsls	r3, r3, #2
 800c83e:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800c840:	4b14      	ldr	r3, [pc, #80]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c842:	4a15      	ldr	r2, [pc, #84]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c844:	589a      	ldr	r2, [r3, r2]
 800c846:	238e      	movs	r3, #142	@ 0x8e
 800c848:	005b      	lsls	r3, r3, #1
 800c84a:	58d1      	ldr	r1, [r2, r3]
 800c84c:	4a11      	ldr	r2, [pc, #68]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c84e:	23f4      	movs	r3, #244	@ 0xf4
 800c850:	009b      	lsls	r3, r3, #2
 800c852:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800c854:	4b0f      	ldr	r3, [pc, #60]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c856:	4a10      	ldr	r2, [pc, #64]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c858:	589a      	ldr	r2, [r3, r2]
 800c85a:	232e      	movs	r3, #46	@ 0x2e
 800c85c:	33ff      	adds	r3, #255	@ 0xff
 800c85e:	5cd1      	ldrb	r1, [r2, r3]
 800c860:	4a0c      	ldr	r2, [pc, #48]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c862:	23f7      	movs	r3, #247	@ 0xf7
 800c864:	009b      	lsls	r3, r3, #2
 800c866:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800c868:	4b0a      	ldr	r3, [pc, #40]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c86a:	4a0b      	ldr	r2, [pc, #44]	@ (800c898 <ResetMacParameters+0x1d4>)
 800c86c:	589a      	ldr	r2, [r3, r2]
 800c86e:	2340      	movs	r3, #64	@ 0x40
 800c870:	33ff      	adds	r3, #255	@ 0xff
 800c872:	5cd1      	ldrb	r1, [r2, r3]
 800c874:	4b07      	ldr	r3, [pc, #28]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c876:	4a0e      	ldr	r2, [pc, #56]	@ (800c8b0 <ResetMacParameters+0x1ec>)
 800c878:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 800c87a:	4b06      	ldr	r3, [pc, #24]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c87c:	4a0d      	ldr	r2, [pc, #52]	@ (800c8b4 <ResetMacParameters+0x1f0>)
 800c87e:	2100      	movs	r1, #0
 800c880:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800c882:	4b04      	ldr	r3, [pc, #16]	@ (800c894 <ResetMacParameters+0x1d0>)
 800c884:	4a0c      	ldr	r2, [pc, #48]	@ (800c8b8 <ResetMacParameters+0x1f4>)
 800c886:	2101      	movs	r1, #1
 800c888:	5499      	strb	r1, [r3, r2]
}
 800c88a:	46c0      	nop			@ (mov r8, r8)
 800c88c:	46bd      	mov	sp, r7
 800c88e:	b002      	add	sp, #8
 800c890:	bd80      	pop	{r7, pc}
 800c892:	46c0      	nop			@ (mov r8, r8)
 800c894:	20000940 	.word	0x20000940
 800c898:	00000484 	.word	0x00000484
 800c89c:	00000411 	.word	0x00000411
 800c8a0:	00000412 	.word	0x00000412
 800c8a4:	00000413 	.word	0x00000413
 800c8a8:	00000414 	.word	0x00000414
 800c8ac:	00000415 	.word	0x00000415
 800c8b0:	000003dd 	.word	0x000003dd
 800c8b4:	000003de 	.word	0x000003de
 800c8b8:	000003df 	.word	0x000003df

0800c8bc <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	0018      	movs	r0, r3
 800c8ca:	f008 fbd7 	bl	801507c <TimerStop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800c8ce:	4b11      	ldr	r3, [pc, #68]	@ (800c914 <RxWindowSetup+0x58>)
 800c8d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8d2:	4798      	blx	r3

    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800c8d4:	4b10      	ldr	r3, [pc, #64]	@ (800c918 <RxWindowSetup+0x5c>)
 800c8d6:	4a11      	ldr	r2, [pc, #68]	@ (800c91c <RxWindowSetup+0x60>)
 800c8d8:	589b      	ldr	r3, [r3, r2]
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	4a10      	ldr	r2, [pc, #64]	@ (800c920 <RxWindowSetup+0x64>)
 800c8de:	6839      	ldr	r1, [r7, #0]
 800c8e0:	0018      	movs	r0, r3
 800c8e2:	f004 ff58 	bl	8011796 <RegionRxConfig>
 800c8e6:	1e03      	subs	r3, r0, #0
 800c8e8:	d00f      	beq.n	800c90a <RxWindowSetup+0x4e>
    {
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 800c8ea:	4b0a      	ldr	r3, [pc, #40]	@ (800c914 <RxWindowSetup+0x58>)
 800c8ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8ee:	4a0a      	ldr	r2, [pc, #40]	@ (800c918 <RxWindowSetup+0x5c>)
 800c8f0:	490a      	ldr	r1, [pc, #40]	@ (800c91c <RxWindowSetup+0x60>)
 800c8f2:	5851      	ldr	r1, [r2, r1]
 800c8f4:	2282      	movs	r2, #130	@ 0x82
 800c8f6:	0052      	lsls	r2, r2, #1
 800c8f8:	588a      	ldr	r2, [r1, r2]
 800c8fa:	0010      	movs	r0, r2
 800c8fc:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	7cd9      	ldrb	r1, [r3, #19]
 800c902:	4a05      	ldr	r2, [pc, #20]	@ (800c918 <RxWindowSetup+0x5c>)
 800c904:	2390      	movs	r3, #144	@ 0x90
 800c906:	00db      	lsls	r3, r3, #3
 800c908:	54d1      	strb	r1, [r2, r3]
    }
}
 800c90a:	46c0      	nop			@ (mov r8, r8)
 800c90c:	46bd      	mov	sp, r7
 800c90e:	b002      	add	sp, #8
 800c910:	bd80      	pop	{r7, pc}
 800c912:	46c0      	nop			@ (mov r8, r8)
 800c914:	0801ac88 	.word	0x0801ac88
 800c918:	20000940 	.word	0x20000940
 800c91c:	00000484 	.word	0x00000484
 800c920:	20000d60 	.word	0x20000d60

0800c924 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800c924:	b580      	push	{r7, lr}
 800c926:	af00      	add	r7, sp, #0
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800c928:	4b10      	ldr	r3, [pc, #64]	@ (800c96c <OpenContinuousRxCWindow+0x48>)
 800c92a:	4a11      	ldr	r2, [pc, #68]	@ (800c970 <OpenContinuousRxCWindow+0x4c>)
 800c92c:	2102      	movs	r1, #2
 800c92e:	5499      	strb	r1, [r3, r2]
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800c930:	4b0e      	ldr	r3, [pc, #56]	@ (800c96c <OpenContinuousRxCWindow+0x48>)
 800c932:	4a10      	ldr	r2, [pc, #64]	@ (800c974 <OpenContinuousRxCWindow+0x50>)
 800c934:	2101      	movs	r1, #1
 800c936:	5499      	strb	r1, [r3, r2]

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800c938:	4b0c      	ldr	r3, [pc, #48]	@ (800c96c <OpenContinuousRxCWindow+0x48>)
 800c93a:	4a0f      	ldr	r2, [pc, #60]	@ (800c978 <OpenContinuousRxCWindow+0x54>)
 800c93c:	589b      	ldr	r3, [r3, r2]
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	4a0e      	ldr	r2, [pc, #56]	@ (800c97c <OpenContinuousRxCWindow+0x58>)
 800c942:	490f      	ldr	r1, [pc, #60]	@ (800c980 <OpenContinuousRxCWindow+0x5c>)
 800c944:	0018      	movs	r0, r3
 800c946:	f004 ff26 	bl	8011796 <RegionRxConfig>
 800c94a:	1e03      	subs	r3, r0, #0
 800c94c:	d00a      	beq.n	800c964 <OpenContinuousRxCWindow+0x40>
    {
        Radio.Rx( 0 ); // Continuous mode
 800c94e:	4b0d      	ldr	r3, [pc, #52]	@ (800c984 <OpenContinuousRxCWindow+0x60>)
 800c950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c952:	2000      	movs	r0, #0
 800c954:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800c956:	4b05      	ldr	r3, [pc, #20]	@ (800c96c <OpenContinuousRxCWindow+0x48>)
 800c958:	4a05      	ldr	r2, [pc, #20]	@ (800c970 <OpenContinuousRxCWindow+0x4c>)
 800c95a:	5c99      	ldrb	r1, [r3, r2]
 800c95c:	4a03      	ldr	r2, [pc, #12]	@ (800c96c <OpenContinuousRxCWindow+0x48>)
 800c95e:	2390      	movs	r3, #144	@ 0x90
 800c960:	00db      	lsls	r3, r3, #3
 800c962:	54d1      	strb	r1, [r2, r3]
    }
}
 800c964:	46c0      	nop			@ (mov r8, r8)
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	46c0      	nop			@ (mov r8, r8)
 800c96c:	20000940 	.word	0x20000940
 800c970:	000003f3 	.word	0x000003f3
 800c974:	000003f2 	.word	0x000003f2
 800c978:	00000484 	.word	0x00000484
 800c97c:	20000d60 	.word	0x20000d60
 800c980:	20000d20 	.word	0x20000d20
 800c984:	0801ac88 	.word	0x0801ac88

0800c988 <PrepareFrame>:

LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800c988:	b590      	push	{r4, r7, lr}
 800c98a:	b089      	sub	sp, #36	@ 0x24
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	60b9      	str	r1, [r7, #8]
 800c992:	603b      	str	r3, [r7, #0]
 800c994:	1dfb      	adds	r3, r7, #7
 800c996:	701a      	strb	r2, [r3, #0]
    MacCtx.PktBufferLen = 0;
 800c998:	4b9b      	ldr	r3, [pc, #620]	@ (800cc08 <PrepareFrame+0x280>)
 800c99a:	2200      	movs	r2, #0
 800c99c:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800c99e:	4b9a      	ldr	r3, [pc, #616]	@ (800cc08 <PrepareFrame+0x280>)
 800c9a0:	4a9a      	ldr	r2, [pc, #616]	@ (800cc0c <PrepareFrame+0x284>)
 800c9a2:	2100      	movs	r1, #0
 800c9a4:	5499      	strb	r1, [r3, r2]
    uint32_t fCntUp = 0;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800c9ae:	231f      	movs	r3, #31
 800c9b0:	18fb      	adds	r3, r7, r3
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	701a      	strb	r2, [r3, #0]

    if( fBuffer == NULL )
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d103      	bne.n	800c9c4 <PrepareFrame+0x3c>
    {
        fBufferSize = 0;
 800c9bc:	2330      	movs	r3, #48	@ 0x30
 800c9be:	18fb      	adds	r3, r7, r3
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	801a      	strh	r2, [r3, #0]
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800c9c4:	2430      	movs	r4, #48	@ 0x30
 800c9c6:	193b      	adds	r3, r7, r4
 800c9c8:	881a      	ldrh	r2, [r3, #0]
 800c9ca:	6839      	ldr	r1, [r7, #0]
 800c9cc:	4b90      	ldr	r3, [pc, #576]	@ (800cc10 <PrepareFrame+0x288>)
 800c9ce:	0018      	movs	r0, r3
 800c9d0:	f008 fdd2 	bl	8015578 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800c9d4:	193b      	adds	r3, r7, r4
 800c9d6:	881b      	ldrh	r3, [r3, #0]
 800c9d8:	b2d9      	uxtb	r1, r3
 800c9da:	4b8b      	ldr	r3, [pc, #556]	@ (800cc08 <PrepareFrame+0x280>)
 800c9dc:	4a8d      	ldr	r2, [pc, #564]	@ (800cc14 <PrepareFrame+0x28c>)
 800c9de:	5499      	strb	r1, [r3, r2]
    MacCtx.PktBuffer[0] = macHdr->Value;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	781a      	ldrb	r2, [r3, #0]
 800c9e4:	4b88      	ldr	r3, [pc, #544]	@ (800cc08 <PrepareFrame+0x280>)
 800c9e6:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	061b      	lsls	r3, r3, #24
 800c9ee:	0f5b      	lsrs	r3, r3, #29
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	2b07      	cmp	r3, #7
 800c9f4:	d100      	bne.n	800c9f8 <PrepareFrame+0x70>
 800c9f6:	e0e3      	b.n	800cbc0 <PrepareFrame+0x238>
 800c9f8:	dd00      	ble.n	800c9fc <PrepareFrame+0x74>
 800c9fa:	e0fa      	b.n	800cbf2 <PrepareFrame+0x26a>
 800c9fc:	2b02      	cmp	r3, #2
 800c9fe:	d006      	beq.n	800ca0e <PrepareFrame+0x86>
 800ca00:	2b04      	cmp	r3, #4
 800ca02:	d000      	beq.n	800ca06 <PrepareFrame+0x7e>
 800ca04:	e0f5      	b.n	800cbf2 <PrepareFrame+0x26a>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 800ca06:	4b80      	ldr	r3, [pc, #512]	@ (800cc08 <PrepareFrame+0x280>)
 800ca08:	4a80      	ldr	r2, [pc, #512]	@ (800cc0c <PrepareFrame+0x284>)
 800ca0a:	2101      	movs	r1, #1
 800ca0c:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800ca0e:	4a7e      	ldr	r2, [pc, #504]	@ (800cc08 <PrepareFrame+0x280>)
 800ca10:	2382      	movs	r3, #130	@ 0x82
 800ca12:	005b      	lsls	r3, r3, #1
 800ca14:	2104      	movs	r1, #4
 800ca16:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800ca18:	4a7b      	ldr	r2, [pc, #492]	@ (800cc08 <PrepareFrame+0x280>)
 800ca1a:	2384      	movs	r3, #132	@ 0x84
 800ca1c:	005b      	lsls	r3, r3, #1
 800ca1e:	497e      	ldr	r1, [pc, #504]	@ (800cc18 <PrepareFrame+0x290>)
 800ca20:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800ca22:	4a79      	ldr	r2, [pc, #484]	@ (800cc08 <PrepareFrame+0x280>)
 800ca24:	2386      	movs	r3, #134	@ 0x86
 800ca26:	005b      	lsls	r3, r3, #1
 800ca28:	21ff      	movs	r1, #255	@ 0xff
 800ca2a:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	7819      	ldrb	r1, [r3, #0]
 800ca30:	4a75      	ldr	r2, [pc, #468]	@ (800cc08 <PrepareFrame+0x280>)
 800ca32:	230e      	movs	r3, #14
 800ca34:	33ff      	adds	r3, #255	@ 0xff
 800ca36:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800ca38:	4a73      	ldr	r2, [pc, #460]	@ (800cc08 <PrepareFrame+0x280>)
 800ca3a:	1df9      	adds	r1, r7, #7
 800ca3c:	2394      	movs	r3, #148	@ 0x94
 800ca3e:	005b      	lsls	r3, r3, #1
 800ca40:	7809      	ldrb	r1, [r1, #0]
 800ca42:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800ca44:	4b70      	ldr	r3, [pc, #448]	@ (800cc08 <PrepareFrame+0x280>)
 800ca46:	4a75      	ldr	r2, [pc, #468]	@ (800cc1c <PrepareFrame+0x294>)
 800ca48:	589b      	ldr	r3, [r3, r2]
 800ca4a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800ca4c:	4a6e      	ldr	r2, [pc, #440]	@ (800cc08 <PrepareFrame+0x280>)
 800ca4e:	2388      	movs	r3, #136	@ 0x88
 800ca50:	005b      	lsls	r3, r3, #1
 800ca52:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	7819      	ldrb	r1, [r3, #0]
 800ca58:	4a6b      	ldr	r2, [pc, #428]	@ (800cc08 <PrepareFrame+0x280>)
 800ca5a:	238a      	movs	r3, #138	@ 0x8a
 800ca5c:	005b      	lsls	r3, r3, #1
 800ca5e:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800ca60:	4b69      	ldr	r3, [pc, #420]	@ (800cc08 <PrepareFrame+0x280>)
 800ca62:	4a6c      	ldr	r2, [pc, #432]	@ (800cc14 <PrepareFrame+0x28c>)
 800ca64:	5c99      	ldrb	r1, [r3, r2]
 800ca66:	4a68      	ldr	r2, [pc, #416]	@ (800cc08 <PrepareFrame+0x280>)
 800ca68:	2398      	movs	r3, #152	@ 0x98
 800ca6a:	005b      	lsls	r3, r3, #1
 800ca6c:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800ca6e:	4a66      	ldr	r2, [pc, #408]	@ (800cc08 <PrepareFrame+0x280>)
 800ca70:	2396      	movs	r3, #150	@ 0x96
 800ca72:	005b      	lsls	r3, r3, #1
 800ca74:	4966      	ldr	r1, [pc, #408]	@ (800cc10 <PrepareFrame+0x288>)
 800ca76:	50d1      	str	r1, [r2, r3]

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800ca78:	2318      	movs	r3, #24
 800ca7a:	18fb      	adds	r3, r7, r3
 800ca7c:	0018      	movs	r0, r3
 800ca7e:	f003 fd05 	bl	801048c <LoRaMacCryptoGetFCntUp>
 800ca82:	1e03      	subs	r3, r0, #0
 800ca84:	d001      	beq.n	800ca8a <PrepareFrame+0x102>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800ca86:	2312      	movs	r3, #18
 800ca88:	e0b9      	b.n	800cbfe <PrepareFrame+0x276>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800ca8a:	69bb      	ldr	r3, [r7, #24]
 800ca8c:	b299      	uxth	r1, r3
 800ca8e:	4a5e      	ldr	r2, [pc, #376]	@ (800cc08 <PrepareFrame+0x280>)
 800ca90:	238b      	movs	r3, #139	@ 0x8b
 800ca92:	005b      	lsls	r3, r3, #1
 800ca94:	52d1      	strh	r1, [r2, r3]

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 800ca96:	4b5c      	ldr	r3, [pc, #368]	@ (800cc08 <PrepareFrame+0x280>)
 800ca98:	4a61      	ldr	r2, [pc, #388]	@ (800cc20 <PrepareFrame+0x298>)
 800ca9a:	2100      	movs	r1, #0
 800ca9c:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = false;
 800ca9e:	4a5a      	ldr	r2, [pc, #360]	@ (800cc08 <PrepareFrame+0x280>)
 800caa0:	2388      	movs	r3, #136	@ 0x88
 800caa2:	00db      	lsls	r3, r3, #3
 800caa4:	2100      	movs	r1, #0
 800caa6:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800caa8:	69b9      	ldr	r1, [r7, #24]
 800caaa:	4a57      	ldr	r2, [pc, #348]	@ (800cc08 <PrepareFrame+0x280>)
 800caac:	2389      	movs	r3, #137	@ 0x89
 800caae:	00db      	lsls	r3, r3, #3
 800cab0:	50d1      	str	r1, [r2, r3]

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800cab2:	2314      	movs	r3, #20
 800cab4:	18fb      	adds	r3, r7, r3
 800cab6:	0018      	movs	r0, r3
 800cab8:	f002 fe2e 	bl	800f718 <LoRaMacCommandsGetSizeSerializedCmds>
 800cabc:	1e03      	subs	r3, r0, #0
 800cabe:	d001      	beq.n	800cac4 <PrepareFrame+0x13c>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cac0:	2313      	movs	r3, #19
 800cac2:	e09c      	b.n	800cbfe <PrepareFrame+0x276>
            }

            if( macCmdsSize > 0 )
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d100      	bne.n	800cacc <PrepareFrame+0x144>
 800caca:	e094      	b.n	800cbf6 <PrepareFrame+0x26e>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 800cacc:	4b4e      	ldr	r3, [pc, #312]	@ (800cc08 <PrepareFrame+0x280>)
 800cace:	4a53      	ldr	r2, [pc, #332]	@ (800cc1c <PrepareFrame+0x294>)
 800cad0:	589b      	ldr	r3, [r3, r2]
 800cad2:	22f9      	movs	r2, #249	@ 0xf9
 800cad4:	569b      	ldrsb	r3, [r3, r2]
 800cad6:	221f      	movs	r2, #31
 800cad8:	18bc      	adds	r4, r7, r2
 800cada:	0018      	movs	r0, r3
 800cadc:	f7fe fbf8 	bl	800b2d0 <GetMaxAppPayloadWithoutFOptsLength>
 800cae0:	0003      	movs	r3, r0
 800cae2:	7023      	strb	r3, [r4, #0]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800cae4:	4b48      	ldr	r3, [pc, #288]	@ (800cc08 <PrepareFrame+0x280>)
 800cae6:	4a4b      	ldr	r2, [pc, #300]	@ (800cc14 <PrepareFrame+0x28c>)
 800cae8:	5c9b      	ldrb	r3, [r3, r2]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d024      	beq.n	800cb38 <PrepareFrame+0x1b0>
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	2b0f      	cmp	r3, #15
 800caf2:	d821      	bhi.n	800cb38 <PrepareFrame+0x1b0>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800caf4:	4a4b      	ldr	r2, [pc, #300]	@ (800cc24 <PrepareFrame+0x29c>)
 800caf6:	2314      	movs	r3, #20
 800caf8:	18fb      	adds	r3, r7, r3
 800cafa:	0019      	movs	r1, r3
 800cafc:	200f      	movs	r0, #15
 800cafe:	f002 fe21 	bl	800f744 <LoRaMacCommandsSerializeCmds>
 800cb02:	1e03      	subs	r3, r0, #0
 800cb04:	d001      	beq.n	800cb0a <PrepareFrame+0x182>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cb06:	2313      	movs	r3, #19
 800cb08:	e079      	b.n	800cbfe <PrepareFrame+0x276>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	1c1a      	adds	r2, r3, #0
 800cb0e:	230f      	movs	r3, #15
 800cb10:	4013      	ands	r3, r2
 800cb12:	b2da      	uxtb	r2, r3
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	210f      	movs	r1, #15
 800cb18:	400a      	ands	r2, r1
 800cb1a:	0010      	movs	r0, r2
 800cb1c:	781a      	ldrb	r2, [r3, #0]
 800cb1e:	210f      	movs	r1, #15
 800cb20:	438a      	bics	r2, r1
 800cb22:	1c11      	adds	r1, r2, #0
 800cb24:	1c02      	adds	r2, r0, #0
 800cb26:	430a      	orrs	r2, r1
 800cb28:	701a      	strb	r2, [r3, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	7819      	ldrb	r1, [r3, #0]
 800cb2e:	4a36      	ldr	r2, [pc, #216]	@ (800cc08 <PrepareFrame+0x280>)
 800cb30:	238a      	movs	r3, #138	@ 0x8a
 800cb32:	005b      	lsls	r3, r3, #1
 800cb34:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800cb36:	e05e      	b.n	800cbf6 <PrepareFrame+0x26e>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800cb38:	4b33      	ldr	r3, [pc, #204]	@ (800cc08 <PrepareFrame+0x280>)
 800cb3a:	4a36      	ldr	r2, [pc, #216]	@ (800cc14 <PrepareFrame+0x28c>)
 800cb3c:	5c9b      	ldrb	r3, [r3, r2]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d016      	beq.n	800cb70 <PrepareFrame+0x1e8>
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	2b0f      	cmp	r3, #15
 800cb46:	d913      	bls.n	800cb70 <PrepareFrame+0x1e8>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800cb48:	231f      	movs	r3, #31
 800cb4a:	18fb      	adds	r3, r7, r3
 800cb4c:	7818      	ldrb	r0, [r3, #0]
 800cb4e:	4b2e      	ldr	r3, [pc, #184]	@ (800cc08 <PrepareFrame+0x280>)
 800cb50:	4a32      	ldr	r2, [pc, #200]	@ (800cc1c <PrepareFrame+0x294>)
 800cb52:	589b      	ldr	r3, [r3, r2]
 800cb54:	3341      	adds	r3, #65	@ 0x41
 800cb56:	33ff      	adds	r3, #255	@ 0xff
 800cb58:	001a      	movs	r2, r3
 800cb5a:	2314      	movs	r3, #20
 800cb5c:	18fb      	adds	r3, r7, r3
 800cb5e:	0019      	movs	r1, r3
 800cb60:	f002 fdf0 	bl	800f744 <LoRaMacCommandsSerializeCmds>
 800cb64:	1e03      	subs	r3, r0, #0
 800cb66:	d001      	beq.n	800cb6c <PrepareFrame+0x1e4>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cb68:	2313      	movs	r3, #19
 800cb6a:	e048      	b.n	800cbfe <PrepareFrame+0x276>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800cb6c:	230a      	movs	r3, #10
 800cb6e:	e046      	b.n	800cbfe <PrepareFrame+0x276>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800cb70:	231f      	movs	r3, #31
 800cb72:	18fb      	adds	r3, r7, r3
 800cb74:	7818      	ldrb	r0, [r3, #0]
 800cb76:	4b24      	ldr	r3, [pc, #144]	@ (800cc08 <PrepareFrame+0x280>)
 800cb78:	4a28      	ldr	r2, [pc, #160]	@ (800cc1c <PrepareFrame+0x294>)
 800cb7a:	589b      	ldr	r3, [r3, r2]
 800cb7c:	3341      	adds	r3, #65	@ 0x41
 800cb7e:	33ff      	adds	r3, #255	@ 0xff
 800cb80:	001a      	movs	r2, r3
 800cb82:	2314      	movs	r3, #20
 800cb84:	18fb      	adds	r3, r7, r3
 800cb86:	0019      	movs	r1, r3
 800cb88:	f002 fddc 	bl	800f744 <LoRaMacCommandsSerializeCmds>
 800cb8c:	1e03      	subs	r3, r0, #0
 800cb8e:	d001      	beq.n	800cb94 <PrepareFrame+0x20c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cb90:	2313      	movs	r3, #19
 800cb92:	e034      	b.n	800cbfe <PrepareFrame+0x276>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800cb94:	4a1c      	ldr	r2, [pc, #112]	@ (800cc08 <PrepareFrame+0x280>)
 800cb96:	2394      	movs	r3, #148	@ 0x94
 800cb98:	005b      	lsls	r3, r3, #1
 800cb9a:	2100      	movs	r1, #0
 800cb9c:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 800cb9e:	4b1a      	ldr	r3, [pc, #104]	@ (800cc08 <PrepareFrame+0x280>)
 800cba0:	4a1e      	ldr	r2, [pc, #120]	@ (800cc1c <PrepareFrame+0x294>)
 800cba2:	589b      	ldr	r3, [r3, r2]
 800cba4:	3341      	adds	r3, #65	@ 0x41
 800cba6:	33ff      	adds	r3, #255	@ 0xff
 800cba8:	0019      	movs	r1, r3
 800cbaa:	4a17      	ldr	r2, [pc, #92]	@ (800cc08 <PrepareFrame+0x280>)
 800cbac:	2396      	movs	r3, #150	@ 0x96
 800cbae:	005b      	lsls	r3, r3, #1
 800cbb0:	50d1      	str	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	b2d9      	uxtb	r1, r3
 800cbb6:	4a14      	ldr	r2, [pc, #80]	@ (800cc08 <PrepareFrame+0x280>)
 800cbb8:	2398      	movs	r3, #152	@ 0x98
 800cbba:	005b      	lsls	r3, r3, #1
 800cbbc:	54d1      	strb	r1, [r2, r3]
            break;
 800cbbe:	e01a      	b.n	800cbf6 <PrepareFrame+0x26e>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d019      	beq.n	800cbfa <PrepareFrame+0x272>
 800cbc6:	4b10      	ldr	r3, [pc, #64]	@ (800cc08 <PrepareFrame+0x280>)
 800cbc8:	4a12      	ldr	r2, [pc, #72]	@ (800cc14 <PrepareFrame+0x28c>)
 800cbca:	5c9b      	ldrb	r3, [r3, r2]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d014      	beq.n	800cbfa <PrepareFrame+0x272>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800cbd0:	4815      	ldr	r0, [pc, #84]	@ (800cc28 <PrepareFrame+0x2a0>)
 800cbd2:	4b0d      	ldr	r3, [pc, #52]	@ (800cc08 <PrepareFrame+0x280>)
 800cbd4:	4a0f      	ldr	r2, [pc, #60]	@ (800cc14 <PrepareFrame+0x28c>)
 800cbd6:	5c9b      	ldrb	r3, [r3, r2]
 800cbd8:	001a      	movs	r2, r3
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	0019      	movs	r1, r3
 800cbde:	f008 fccb 	bl	8015578 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800cbe2:	4b09      	ldr	r3, [pc, #36]	@ (800cc08 <PrepareFrame+0x280>)
 800cbe4:	4a0b      	ldr	r2, [pc, #44]	@ (800cc14 <PrepareFrame+0x28c>)
 800cbe6:	5c9b      	ldrb	r3, [r3, r2]
 800cbe8:	3301      	adds	r3, #1
 800cbea:	b29a      	uxth	r2, r3
 800cbec:	4b06      	ldr	r3, [pc, #24]	@ (800cc08 <PrepareFrame+0x280>)
 800cbee:	801a      	strh	r2, [r3, #0]
            }
            break;
 800cbf0:	e003      	b.n	800cbfa <PrepareFrame+0x272>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800cbf2:	2302      	movs	r3, #2
 800cbf4:	e003      	b.n	800cbfe <PrepareFrame+0x276>
            break;
 800cbf6:	46c0      	nop			@ (mov r8, r8)
 800cbf8:	e000      	b.n	800cbfc <PrepareFrame+0x274>
            break;
 800cbfa:	46c0      	nop			@ (mov r8, r8)
    }

    return LORAMAC_STATUS_OK;
 800cbfc:	2300      	movs	r3, #0
}
 800cbfe:	0018      	movs	r0, r3
 800cc00:	46bd      	mov	sp, r7
 800cc02:	b009      	add	sp, #36	@ 0x24
 800cc04:	bd90      	pop	{r4, r7, pc}
 800cc06:	46c0      	nop			@ (mov r8, r8)
 800cc08:	20000940 	.word	0x20000940
 800cc0c:	00000414 	.word	0x00000414
 800cc10:	20000a78 	.word	0x20000a78
 800cc14:	00000237 	.word	0x00000237
 800cc18:	20000942 	.word	0x20000942
 800cc1c:	00000484 	.word	0x00000484
 800cc20:	00000441 	.word	0x00000441
 800cc24:	20000a58 	.word	0x20000a58
 800cc28:	20000943 	.word	0x20000943

0800cc2c <SendFrameOnChannel>:

LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800cc2c:	b590      	push	{r4, r7, lr}
 800cc2e:	b089      	sub	sp, #36	@ 0x24
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	0002      	movs	r2, r0
 800cc34:	1dfb      	adds	r3, r7, #7
 800cc36:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800cc38:	230b      	movs	r3, #11
 800cc3a:	18fb      	adds	r3, r7, r3
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
 800cc40:	210c      	movs	r1, #12
 800cc42:	187b      	adds	r3, r7, r1
 800cc44:	1dfa      	adds	r2, r7, #7
 800cc46:	7812      	ldrb	r2, [r2, #0]
 800cc48:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800cc4a:	4b56      	ldr	r3, [pc, #344]	@ (800cda4 <SendFrameOnChannel+0x178>)
 800cc4c:	4a56      	ldr	r2, [pc, #344]	@ (800cda8 <SendFrameOnChannel+0x17c>)
 800cc4e:	589b      	ldr	r3, [r3, r2]
 800cc50:	22f9      	movs	r2, #249	@ 0xf9
 800cc52:	569a      	ldrsb	r2, [r3, r2]
 800cc54:	187b      	adds	r3, r7, r1
 800cc56:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800cc58:	4b52      	ldr	r3, [pc, #328]	@ (800cda4 <SendFrameOnChannel+0x178>)
 800cc5a:	4a53      	ldr	r2, [pc, #332]	@ (800cda8 <SendFrameOnChannel+0x17c>)
 800cc5c:	589b      	ldr	r3, [r3, r2]
 800cc5e:	22f8      	movs	r2, #248	@ 0xf8
 800cc60:	569a      	ldrsb	r2, [r3, r2]
 800cc62:	187b      	adds	r3, r7, r1
 800cc64:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800cc66:	4b4f      	ldr	r3, [pc, #316]	@ (800cda4 <SendFrameOnChannel+0x178>)
 800cc68:	4a4f      	ldr	r2, [pc, #316]	@ (800cda8 <SendFrameOnChannel+0x17c>)
 800cc6a:	589a      	ldr	r2, [r3, r2]
 800cc6c:	2398      	movs	r3, #152	@ 0x98
 800cc6e:	005b      	lsls	r3, r3, #1
 800cc70:	58d2      	ldr	r2, [r2, r3]
 800cc72:	187b      	adds	r3, r7, r1
 800cc74:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800cc76:	4b4b      	ldr	r3, [pc, #300]	@ (800cda4 <SendFrameOnChannel+0x178>)
 800cc78:	4a4b      	ldr	r2, [pc, #300]	@ (800cda8 <SendFrameOnChannel+0x17c>)
 800cc7a:	589a      	ldr	r2, [r3, r2]
 800cc7c:	239a      	movs	r3, #154	@ 0x9a
 800cc7e:	005b      	lsls	r3, r3, #1
 800cc80:	58d2      	ldr	r2, [r2, r3]
 800cc82:	187b      	adds	r3, r7, r1
 800cc84:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800cc86:	4b47      	ldr	r3, [pc, #284]	@ (800cda4 <SendFrameOnChannel+0x178>)
 800cc88:	881a      	ldrh	r2, [r3, #0]
 800cc8a:	187b      	adds	r3, r7, r1
 800cc8c:	819a      	strh	r2, [r3, #12]


    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800cc8e:	f002 fa75 	bl	800f17c <LoRaMacClassBIsBeaconExpected>
 800cc92:	1e03      	subs	r3, r0, #0
 800cc94:	d001      	beq.n	800cc9a <SendFrameOnChannel+0x6e>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800cc96:	230e      	movs	r3, #14
 800cc98:	e07f      	b.n	800cd9a <SendFrameOnChannel+0x16e>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800cc9a:	4b42      	ldr	r3, [pc, #264]	@ (800cda4 <SendFrameOnChannel+0x178>)
 800cc9c:	4a42      	ldr	r2, [pc, #264]	@ (800cda8 <SendFrameOnChannel+0x17c>)
 800cc9e:	589b      	ldr	r3, [r3, r2]
 800cca0:	22f0      	movs	r2, #240	@ 0xf0
 800cca2:	5c9b      	ldrb	r3, [r3, r2]
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	d10d      	bne.n	800ccc4 <SendFrameOnChannel+0x98>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800cca8:	f002 fa6e 	bl	800f188 <LoRaMacClassBIsPingExpected>
 800ccac:	1e03      	subs	r3, r0, #0
 800ccae:	d001      	beq.n	800ccb4 <SendFrameOnChannel+0x88>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800ccb0:	230f      	movs	r3, #15
 800ccb2:	e072      	b.n	800cd9a <SendFrameOnChannel+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ccb4:	f002 fa6e 	bl	800f194 <LoRaMacClassBIsMulticastExpected>
 800ccb8:	1e03      	subs	r3, r0, #0
 800ccba:	d001      	beq.n	800ccc0 <SendFrameOnChannel+0x94>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800ccbc:	230f      	movs	r3, #15
 800ccbe:	e06c      	b.n	800cd9a <SendFrameOnChannel+0x16e>
        }
        else
        {
            LoRaMacClassBStopRxSlots( );
 800ccc0:	f002 fadb 	bl	800f27a <LoRaMacClassBStopRxSlots>
        }
    }
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800ccc4:	4b37      	ldr	r3, [pc, #220]	@ (800cda4 <SendFrameOnChannel+0x178>)
 800ccc6:	4a38      	ldr	r2, [pc, #224]	@ (800cda8 <SendFrameOnChannel+0x17c>)
 800ccc8:	589b      	ldr	r3, [r3, r2]
 800ccca:	7818      	ldrb	r0, [r3, #0]
 800cccc:	4b37      	ldr	r3, [pc, #220]	@ (800cdac <SendFrameOnChannel+0x180>)
 800ccce:	240b      	movs	r4, #11
 800ccd0:	193a      	adds	r2, r7, r4
 800ccd2:	210c      	movs	r1, #12
 800ccd4:	1879      	adds	r1, r7, r1
 800ccd6:	f004 fd78 	bl	80117ca <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ccda:	4b32      	ldr	r3, [pc, #200]	@ (800cda4 <SendFrameOnChannel+0x178>)
 800ccdc:	4a34      	ldr	r2, [pc, #208]	@ (800cdb0 <SendFrameOnChannel+0x184>)
 800ccde:	2101      	movs	r1, #1
 800cce0:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800cce2:	4b30      	ldr	r3, [pc, #192]	@ (800cda4 <SendFrameOnChannel+0x178>)
 800cce4:	4a30      	ldr	r2, [pc, #192]	@ (800cda8 <SendFrameOnChannel+0x17c>)
 800cce6:	589b      	ldr	r3, [r3, r2]
 800cce8:	22f9      	movs	r2, #249	@ 0xf9
 800ccea:	569b      	ldrsb	r3, [r3, r2]
 800ccec:	b2d9      	uxtb	r1, r3
 800ccee:	4b2d      	ldr	r3, [pc, #180]	@ (800cda4 <SendFrameOnChannel+0x178>)
 800ccf0:	4a30      	ldr	r2, [pc, #192]	@ (800cdb4 <SendFrameOnChannel+0x188>)
 800ccf2:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
 800ccf4:	193b      	adds	r3, r7, r4
 800ccf6:	2100      	movs	r1, #0
 800ccf8:	5659      	ldrsb	r1, [r3, r1]
 800ccfa:	4b2a      	ldr	r3, [pc, #168]	@ (800cda4 <SendFrameOnChannel+0x178>)
 800ccfc:	4a2e      	ldr	r2, [pc, #184]	@ (800cdb8 <SendFrameOnChannel+0x18c>)
 800ccfe:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
 800cd00:	1dfb      	adds	r3, r7, #7
 800cd02:	781a      	ldrb	r2, [r3, #0]
 800cd04:	4b27      	ldr	r3, [pc, #156]	@ (800cda4 <SendFrameOnChannel+0x178>)
 800cd06:	492d      	ldr	r1, [pc, #180]	@ (800cdbc <SendFrameOnChannel+0x190>)
 800cd08:	505a      	str	r2, [r3, r1]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800cd0a:	4a26      	ldr	r2, [pc, #152]	@ (800cda4 <SendFrameOnChannel+0x178>)
 800cd0c:	2383      	movs	r3, #131	@ 0x83
 800cd0e:	00db      	lsls	r3, r3, #3
 800cd10:	58d2      	ldr	r2, [r2, r3]
 800cd12:	4b24      	ldr	r3, [pc, #144]	@ (800cda4 <SendFrameOnChannel+0x178>)
 800cd14:	492a      	ldr	r1, [pc, #168]	@ (800cdc0 <SendFrameOnChannel+0x194>)
 800cd16:	505a      	str	r2, [r3, r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800cd18:	4a22      	ldr	r2, [pc, #136]	@ (800cda4 <SendFrameOnChannel+0x178>)
 800cd1a:	2383      	movs	r3, #131	@ 0x83
 800cd1c:	00db      	lsls	r3, r3, #3
 800cd1e:	58d2      	ldr	r2, [r2, r3]
 800cd20:	4b20      	ldr	r3, [pc, #128]	@ (800cda4 <SendFrameOnChannel+0x178>)
 800cd22:	4928      	ldr	r1, [pc, #160]	@ (800cdc4 <SendFrameOnChannel+0x198>)
 800cd24:	505a      	str	r2, [r3, r1]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800cd26:	f002 fa3b 	bl	800f1a0 <LoRaMacClassBIsBeaconModeActive>
 800cd2a:	1e03      	subs	r3, r0, #0
 800cd2c:	d00d      	beq.n	800cd4a <SendFrameOnChannel+0x11e>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800cd2e:	4a1d      	ldr	r2, [pc, #116]	@ (800cda4 <SendFrameOnChannel+0x178>)
 800cd30:	2383      	movs	r3, #131	@ 0x83
 800cd32:	00db      	lsls	r3, r3, #3
 800cd34:	58d3      	ldr	r3, [r2, r3]
 800cd36:	0018      	movs	r0, r3
 800cd38:	f002 fa96 	bl	800f268 <LoRaMacClassBIsUplinkCollision>
 800cd3c:	0003      	movs	r3, r0
 800cd3e:	61fb      	str	r3, [r7, #28]

        if( collisionTime > 0 )
 800cd40:	69fb      	ldr	r3, [r7, #28]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d001      	beq.n	800cd4a <SendFrameOnChannel+0x11e>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800cd46:	2310      	movs	r3, #16
 800cd48:	e027      	b.n	800cd9a <SendFrameOnChannel+0x16e>
        }
    }

    LoRaMacClassBHaltBeaconing( );
 800cd4a:	f002 fa39 	bl	800f1c0 <LoRaMacClassBHaltBeaconing>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800cd4e:	4a15      	ldr	r2, [pc, #84]	@ (800cda4 <SendFrameOnChannel+0x178>)
 800cd50:	23d0      	movs	r3, #208	@ 0xd0
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	58d3      	ldr	r3, [r2, r3]
 800cd56:	2202      	movs	r2, #2
 800cd58:	431a      	orrs	r2, r3
 800cd5a:	0011      	movs	r1, r2
 800cd5c:	4a11      	ldr	r2, [pc, #68]	@ (800cda4 <SendFrameOnChannel+0x178>)
 800cd5e:	23d0      	movs	r3, #208	@ 0xd0
 800cd60:	009b      	lsls	r3, r3, #2
 800cd62:	50d1      	str	r1, [r2, r3]
    if( MacCtx.NodeAckRequested == false )
 800cd64:	4b0f      	ldr	r3, [pc, #60]	@ (800cda4 <SendFrameOnChannel+0x178>)
 800cd66:	4a18      	ldr	r2, [pc, #96]	@ (800cdc8 <SendFrameOnChannel+0x19c>)
 800cd68:	5c9b      	ldrb	r3, [r3, r2]
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	4053      	eors	r3, r2
 800cd6e:	b2db      	uxtb	r3, r3
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d009      	beq.n	800cd88 <SendFrameOnChannel+0x15c>
    {
        MacCtx.ChannelsNbTransCounter++;
 800cd74:	4a0b      	ldr	r2, [pc, #44]	@ (800cda4 <SendFrameOnChannel+0x178>)
 800cd76:	2382      	movs	r3, #130	@ 0x82
 800cd78:	00db      	lsls	r3, r3, #3
 800cd7a:	5cd3      	ldrb	r3, [r2, r3]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	b2d9      	uxtb	r1, r3
 800cd80:	4a08      	ldr	r2, [pc, #32]	@ (800cda4 <SendFrameOnChannel+0x178>)
 800cd82:	2382      	movs	r3, #130	@ 0x82
 800cd84:	00db      	lsls	r3, r3, #3
 800cd86:	54d1      	strb	r1, [r2, r3]
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800cd88:	4b10      	ldr	r3, [pc, #64]	@ (800cdcc <SendFrameOnChannel+0x1a0>)
 800cd8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd8c:	4a05      	ldr	r2, [pc, #20]	@ (800cda4 <SendFrameOnChannel+0x178>)
 800cd8e:	8812      	ldrh	r2, [r2, #0]
 800cd90:	b2d1      	uxtb	r1, r2
 800cd92:	4a0f      	ldr	r2, [pc, #60]	@ (800cdd0 <SendFrameOnChannel+0x1a4>)
 800cd94:	0010      	movs	r0, r2
 800cd96:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800cd98:	2300      	movs	r3, #0
}
 800cd9a:	0018      	movs	r0, r3
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	b009      	add	sp, #36	@ 0x24
 800cda0:	bd90      	pop	{r4, r7, pc}
 800cda2:	46c0      	nop			@ (mov r8, r8)
 800cda4:	20000940 	.word	0x20000940
 800cda8:	00000484 	.word	0x00000484
 800cdac:	20000d58 	.word	0x20000d58
 800cdb0:	0000043d 	.word	0x0000043d
 800cdb4:	0000043e 	.word	0x0000043e
 800cdb8:	0000043f 	.word	0x0000043f
 800cdbc:	0000044c 	.word	0x0000044c
 800cdc0:	00000444 	.word	0x00000444
 800cdc4:	00000454 	.word	0x00000454
 800cdc8:	00000414 	.word	0x00000414
 800cdcc:	0801ac88 	.word	0x0801ac88
 800cdd0:	20000942 	.word	0x20000942

0800cdd4 <SetTxContinuousWave>:

LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b086      	sub	sp, #24
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	0002      	movs	r2, r0
 800cddc:	1dbb      	adds	r3, r7, #6
 800cdde:	801a      	strh	r2, [r3, #0]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 800cde0:	4b20      	ldr	r3, [pc, #128]	@ (800ce64 <SetTxContinuousWave+0x90>)
 800cde2:	4a21      	ldr	r2, [pc, #132]	@ (800ce68 <SetTxContinuousWave+0x94>)
 800cde4:	5c9a      	ldrb	r2, [r3, r2]
 800cde6:	2108      	movs	r1, #8
 800cde8:	187b      	adds	r3, r7, r1
 800cdea:	701a      	strb	r2, [r3, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800cdec:	4b1d      	ldr	r3, [pc, #116]	@ (800ce64 <SetTxContinuousWave+0x90>)
 800cdee:	4a1f      	ldr	r2, [pc, #124]	@ (800ce6c <SetTxContinuousWave+0x98>)
 800cdf0:	589b      	ldr	r3, [r3, r2]
 800cdf2:	22f9      	movs	r2, #249	@ 0xf9
 800cdf4:	569a      	ldrsb	r2, [r3, r2]
 800cdf6:	187b      	adds	r3, r7, r1
 800cdf8:	705a      	strb	r2, [r3, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800cdfa:	4b1a      	ldr	r3, [pc, #104]	@ (800ce64 <SetTxContinuousWave+0x90>)
 800cdfc:	4a1b      	ldr	r2, [pc, #108]	@ (800ce6c <SetTxContinuousWave+0x98>)
 800cdfe:	589b      	ldr	r3, [r3, r2]
 800ce00:	22f8      	movs	r2, #248	@ 0xf8
 800ce02:	569a      	ldrsb	r2, [r3, r2]
 800ce04:	187b      	adds	r3, r7, r1
 800ce06:	709a      	strb	r2, [r3, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800ce08:	4b16      	ldr	r3, [pc, #88]	@ (800ce64 <SetTxContinuousWave+0x90>)
 800ce0a:	4a18      	ldr	r2, [pc, #96]	@ (800ce6c <SetTxContinuousWave+0x98>)
 800ce0c:	589a      	ldr	r2, [r3, r2]
 800ce0e:	2398      	movs	r3, #152	@ 0x98
 800ce10:	005b      	lsls	r3, r3, #1
 800ce12:	58d2      	ldr	r2, [r2, r3]
 800ce14:	187b      	adds	r3, r7, r1
 800ce16:	605a      	str	r2, [r3, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800ce18:	4b12      	ldr	r3, [pc, #72]	@ (800ce64 <SetTxContinuousWave+0x90>)
 800ce1a:	4a14      	ldr	r2, [pc, #80]	@ (800ce6c <SetTxContinuousWave+0x98>)
 800ce1c:	589a      	ldr	r2, [r3, r2]
 800ce1e:	239a      	movs	r3, #154	@ 0x9a
 800ce20:	005b      	lsls	r3, r3, #1
 800ce22:	58d2      	ldr	r2, [r2, r3]
 800ce24:	187b      	adds	r3, r7, r1
 800ce26:	609a      	str	r2, [r3, #8]
    continuousWave.Timeout = timeout;
 800ce28:	187b      	adds	r3, r7, r1
 800ce2a:	1dba      	adds	r2, r7, #6
 800ce2c:	8812      	ldrh	r2, [r2, #0]
 800ce2e:	819a      	strh	r2, [r3, #12]

    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 800ce30:	4b0c      	ldr	r3, [pc, #48]	@ (800ce64 <SetTxContinuousWave+0x90>)
 800ce32:	4a0e      	ldr	r2, [pc, #56]	@ (800ce6c <SetTxContinuousWave+0x98>)
 800ce34:	589b      	ldr	r3, [r3, r2]
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	187a      	adds	r2, r7, r1
 800ce3a:	0011      	movs	r1, r2
 800ce3c:	0018      	movs	r0, r3
 800ce3e:	f004 fda8 	bl	8011992 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800ce42:	4a08      	ldr	r2, [pc, #32]	@ (800ce64 <SetTxContinuousWave+0x90>)
 800ce44:	23d0      	movs	r3, #208	@ 0xd0
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	58d3      	ldr	r3, [r2, r3]
 800ce4a:	2202      	movs	r2, #2
 800ce4c:	431a      	orrs	r2, r3
 800ce4e:	0011      	movs	r1, r2
 800ce50:	4a04      	ldr	r2, [pc, #16]	@ (800ce64 <SetTxContinuousWave+0x90>)
 800ce52:	23d0      	movs	r3, #208	@ 0xd0
 800ce54:	009b      	lsls	r3, r3, #2
 800ce56:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 800ce58:	2300      	movs	r3, #0
}
 800ce5a:	0018      	movs	r0, r3
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	b006      	add	sp, #24
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	46c0      	nop			@ (mov r8, r8)
 800ce64:	20000940 	.word	0x20000940
 800ce68:	00000415 	.word	0x00000415
 800ce6c:	00000484 	.word	0x00000484

0800ce70 <SetTxContinuousWave1>:

LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6039      	str	r1, [r7, #0]
 800ce78:	0011      	movs	r1, r2
 800ce7a:	1dbb      	adds	r3, r7, #6
 800ce7c:	1c02      	adds	r2, r0, #0
 800ce7e:	801a      	strh	r2, [r3, #0]
 800ce80:	1d7b      	adds	r3, r7, #5
 800ce82:	1c0a      	adds	r2, r1, #0
 800ce84:	701a      	strb	r2, [r3, #0]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800ce86:	4b0c      	ldr	r3, [pc, #48]	@ (800ceb8 <SetTxContinuousWave1+0x48>)
 800ce88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce8a:	1d7a      	adds	r2, r7, #5
 800ce8c:	2100      	movs	r1, #0
 800ce8e:	5651      	ldrsb	r1, [r2, r1]
 800ce90:	1dba      	adds	r2, r7, #6
 800ce92:	8812      	ldrh	r2, [r2, #0]
 800ce94:	6838      	ldr	r0, [r7, #0]
 800ce96:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800ce98:	4a08      	ldr	r2, [pc, #32]	@ (800cebc <SetTxContinuousWave1+0x4c>)
 800ce9a:	23d0      	movs	r3, #208	@ 0xd0
 800ce9c:	009b      	lsls	r3, r3, #2
 800ce9e:	58d3      	ldr	r3, [r2, r3]
 800cea0:	2202      	movs	r2, #2
 800cea2:	431a      	orrs	r2, r3
 800cea4:	0011      	movs	r1, r2
 800cea6:	4a05      	ldr	r2, [pc, #20]	@ (800cebc <SetTxContinuousWave1+0x4c>)
 800cea8:	23d0      	movs	r3, #208	@ 0xd0
 800ceaa:	009b      	lsls	r3, r3, #2
 800ceac:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 800ceae:	2300      	movs	r3, #0
}
 800ceb0:	0018      	movs	r0, r3
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	b002      	add	sp, #8
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	0801ac88 	.word	0x0801ac88
 800cebc:	20000940 	.word	0x20000940

0800cec0 <GetCtxs>:

LoRaMacCtxs_t* GetCtxs( void )
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
    Contexts.MacNvmCtx = &NvmMacCtx;
 800cec6:	4b20      	ldr	r3, [pc, #128]	@ (800cf48 <GetCtxs+0x88>)
 800cec8:	4a20      	ldr	r2, [pc, #128]	@ (800cf4c <GetCtxs+0x8c>)
 800ceca:	601a      	str	r2, [r3, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 800cecc:	4b1e      	ldr	r3, [pc, #120]	@ (800cf48 <GetCtxs+0x88>)
 800cece:	22ee      	movs	r2, #238	@ 0xee
 800ced0:	0052      	lsls	r2, r2, #1
 800ced2:	605a      	str	r2, [r3, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800ced4:	4b1e      	ldr	r3, [pc, #120]	@ (800cf50 <GetCtxs+0x90>)
 800ced6:	0018      	movs	r0, r3
 800ced8:	f003 faca 	bl	8010470 <LoRaMacCryptoGetNvmCtx>
 800cedc:	0002      	movs	r2, r0
 800cede:	4b1a      	ldr	r3, [pc, #104]	@ (800cf48 <GetCtxs+0x88>)
 800cee0:	611a      	str	r2, [r3, #16]
    GetNvmCtxParams_t params ={ 0 };
 800cee2:	2300      	movs	r3, #0
 800cee4:	607b      	str	r3, [r7, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800cee6:	4b1b      	ldr	r3, [pc, #108]	@ (800cf54 <GetCtxs+0x94>)
 800cee8:	4a1b      	ldr	r2, [pc, #108]	@ (800cf58 <GetCtxs+0x98>)
 800ceea:	589b      	ldr	r3, [r3, r2]
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	1d3a      	adds	r2, r7, #4
 800cef0:	0011      	movs	r1, r2
 800cef2:	0018      	movs	r0, r3
 800cef4:	f004 fbcd 	bl	8011692 <RegionGetNvmCtx>
 800cef8:	0002      	movs	r2, r0
 800cefa:	4b13      	ldr	r3, [pc, #76]	@ (800cf48 <GetCtxs+0x88>)
 800cefc:	609a      	str	r2, [r3, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	4b11      	ldr	r3, [pc, #68]	@ (800cf48 <GetCtxs+0x88>)
 800cf02:	60da      	str	r2, [r3, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800cf04:	4b15      	ldr	r3, [pc, #84]	@ (800cf5c <GetCtxs+0x9c>)
 800cf06:	0018      	movs	r0, r3
 800cf08:	f7fc f9f6 	bl	80092f8 <SecureElementGetNvmCtx>
 800cf0c:	0002      	movs	r2, r0
 800cf0e:	4b0e      	ldr	r3, [pc, #56]	@ (800cf48 <GetCtxs+0x88>)
 800cf10:	619a      	str	r2, [r3, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 800cf12:	4b13      	ldr	r3, [pc, #76]	@ (800cf60 <GetCtxs+0xa0>)
 800cf14:	0018      	movs	r0, r3
 800cf16:	f002 fb1b 	bl	800f550 <LoRaMacCommandsGetNvmCtx>
 800cf1a:	0002      	movs	r2, r0
 800cf1c:	4b0a      	ldr	r3, [pc, #40]	@ (800cf48 <GetCtxs+0x88>)
 800cf1e:	621a      	str	r2, [r3, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 800cf20:	4b10      	ldr	r3, [pc, #64]	@ (800cf64 <GetCtxs+0xa4>)
 800cf22:	0018      	movs	r0, r3
 800cf24:	f002 f8d6 	bl	800f0d4 <LoRaMacClassBGetNvmCtx>
 800cf28:	0002      	movs	r2, r0
 800cf2a:	4b07      	ldr	r3, [pc, #28]	@ (800cf48 <GetCtxs+0x88>)
 800cf2c:	629a      	str	r2, [r3, #40]	@ 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 800cf2e:	4b0e      	ldr	r3, [pc, #56]	@ (800cf68 <GetCtxs+0xa8>)
 800cf30:	0018      	movs	r0, r3
 800cf32:	f002 fcfd 	bl	800f930 <LoRaMacConfirmQueueGetNvmCtx>
 800cf36:	0002      	movs	r2, r0
 800cf38:	4b03      	ldr	r3, [pc, #12]	@ (800cf48 <GetCtxs+0x88>)
 800cf3a:	631a      	str	r2, [r3, #48]	@ 0x30
    return &Contexts;
 800cf3c:	4b02      	ldr	r3, [pc, #8]	@ (800cf48 <GetCtxs+0x88>)
}
 800cf3e:	0018      	movs	r0, r3
 800cf40:	46bd      	mov	sp, r7
 800cf42:	b002      	add	sp, #8
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	46c0      	nop			@ (mov r8, r8)
 800cf48:	20000fa4 	.word	0x20000fa4
 800cf4c:	20000dc8 	.word	0x20000dc8
 800cf50:	20000fb8 	.word	0x20000fb8
 800cf54:	20000940 	.word	0x20000940
 800cf58:	00000484 	.word	0x00000484
 800cf5c:	20000fc0 	.word	0x20000fc0
 800cf60:	20000fc8 	.word	0x20000fc8
 800cf64:	20000fd0 	.word	0x20000fd0
 800cf68:	20000fd8 	.word	0x20000fd8

0800cf6c <RestoreCtxs>:

LoRaMacStatus_t RestoreCtxs( LoRaMacCtxs_t* contexts )
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
    if( contexts == NULL )
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d101      	bne.n	800cf7e <RestoreCtxs+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800cf7a:	2303      	movs	r3, #3
 800cf7c:	e05d      	b.n	800d03a <RestoreCtxs+0xce>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800cf7e:	4a31      	ldr	r2, [pc, #196]	@ (800d044 <RestoreCtxs+0xd8>)
 800cf80:	23d0      	movs	r3, #208	@ 0xd0
 800cf82:	009b      	lsls	r3, r3, #2
 800cf84:	58d3      	ldr	r3, [r2, r3]
 800cf86:	2b01      	cmp	r3, #1
 800cf88:	d001      	beq.n	800cf8e <RestoreCtxs+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	e055      	b.n	800d03a <RestoreCtxs+0xce>
    }

    if( contexts->MacNvmCtx != NULL )
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d008      	beq.n	800cfa8 <RestoreCtxs+0x3c>
    {
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6819      	ldr	r1, [r3, #0]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	b29a      	uxth	r2, r3
 800cfa0:	4b29      	ldr	r3, [pc, #164]	@ (800d048 <RestoreCtxs+0xdc>)
 800cfa2:	0018      	movs	r0, r3
 800cfa4:	f008 fae8 	bl	8015578 <memcpy1>
    }

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_CTX;
 800cfa8:	2108      	movs	r1, #8
 800cfaa:	187b      	adds	r3, r7, r1
 800cfac:	2202      	movs	r2, #2
 800cfae:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	689a      	ldr	r2, [r3, #8]
 800cfb4:	187b      	adds	r3, r7, r1
 800cfb6:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800cfb8:	4b22      	ldr	r3, [pc, #136]	@ (800d044 <RestoreCtxs+0xd8>)
 800cfba:	4a24      	ldr	r2, [pc, #144]	@ (800d04c <RestoreCtxs+0xe0>)
 800cfbc:	589b      	ldr	r3, [r3, r2]
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	187a      	adds	r2, r7, r1
 800cfc2:	0011      	movs	r1, r2
 800cfc4:	0018      	movs	r0, r3
 800cfc6:	f004 fb4f 	bl	8011668 <RegionInitDefaults>

    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	699b      	ldr	r3, [r3, #24]
 800cfce:	0018      	movs	r0, r3
 800cfd0:	f7fc f97a 	bl	80092c8 <SecureElementRestoreNvmCtx>
 800cfd4:	1e03      	subs	r3, r0, #0
 800cfd6:	d001      	beq.n	800cfdc <RestoreCtxs+0x70>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800cfd8:	2311      	movs	r3, #17
 800cfda:	e02e      	b.n	800d03a <RestoreCtxs+0xce>
    }

    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	691b      	ldr	r3, [r3, #16]
 800cfe0:	0018      	movs	r0, r3
 800cfe2:	f003 fa2f 	bl	8010444 <LoRaMacCryptoRestoreNvmCtx>
 800cfe6:	1e03      	subs	r3, r0, #0
 800cfe8:	d001      	beq.n	800cfee <RestoreCtxs+0x82>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800cfea:	2311      	movs	r3, #17
 800cfec:	e025      	b.n	800d03a <RestoreCtxs+0xce>
    }

    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6a1b      	ldr	r3, [r3, #32]
 800cff2:	0018      	movs	r0, r3
 800cff4:	f002 fa96 	bl	800f524 <LoRaMacCommandsRestoreNvmCtx>
 800cff8:	1e03      	subs	r3, r0, #0
 800cffa:	d001      	beq.n	800d000 <RestoreCtxs+0x94>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cffc:	2313      	movs	r3, #19
 800cffe:	e01c      	b.n	800d03a <RestoreCtxs+0xce>
    }

    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d004:	0018      	movs	r0, r3
 800d006:	f002 f85c 	bl	800f0c2 <LoRaMacClassBRestoreNvmCtx>
 800d00a:	0003      	movs	r3, r0
 800d00c:	001a      	movs	r2, r3
 800d00e:	2301      	movs	r3, #1
 800d010:	4053      	eors	r3, r2
 800d012:	b2db      	uxtb	r3, r3
 800d014:	2b00      	cmp	r3, #0
 800d016:	d001      	beq.n	800d01c <RestoreCtxs+0xb0>
    {
        return LORAMAC_STATUS_CLASS_B_ERROR;
 800d018:	2314      	movs	r3, #20
 800d01a:	e00e      	b.n	800d03a <RestoreCtxs+0xce>
    }

    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d020:	0018      	movs	r0, r3
 800d022:	f002 fc6f 	bl	800f904 <LoRaMacConfirmQueueRestoreNvmCtx>
 800d026:	0003      	movs	r3, r0
 800d028:	001a      	movs	r2, r3
 800d02a:	2301      	movs	r3, #1
 800d02c:	4053      	eors	r3, r2
 800d02e:	b2db      	uxtb	r3, r3
 800d030:	2b00      	cmp	r3, #0
 800d032:	d001      	beq.n	800d038 <RestoreCtxs+0xcc>
    {
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 800d034:	2315      	movs	r3, #21
 800d036:	e000      	b.n	800d03a <RestoreCtxs+0xce>
    }

    return LORAMAC_STATUS_OK;
 800d038:	2300      	movs	r3, #0
}
 800d03a:	0018      	movs	r0, r3
 800d03c:	46bd      	mov	sp, r7
 800d03e:	b004      	add	sp, #16
 800d040:	bd80      	pop	{r7, pc}
 800d042:	46c0      	nop			@ (mov r8, r8)
 800d044:	20000940 	.word	0x20000940
 800d048:	20000dc8 	.word	0x20000dc8
 800d04c:	00000484 	.word	0x00000484

0800d050 <DetermineFrameType>:

LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
 800d058:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d002      	beq.n	800d066 <DetermineFrameType+0x16>
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d101      	bne.n	800d06a <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d066:	2303      	movs	r3, #3
 800d068:	e03b      	b.n	800d0e2 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	7b1b      	ldrb	r3, [r3, #12]
 800d06e:	220f      	movs	r2, #15
 800d070:	4013      	ands	r3, r2
 800d072:	b2db      	uxtb	r3, r3
 800d074:	2b00      	cmp	r3, #0
 800d076:	d008      	beq.n	800d08a <DetermineFrameType+0x3a>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2220      	movs	r2, #32
 800d07c:	5c9b      	ldrb	r3, [r3, r2]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d003      	beq.n	800d08a <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	2200      	movs	r2, #0
 800d086:	701a      	strb	r2, [r3, #0]
 800d088:	e02a      	b.n	800d0e0 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2228      	movs	r2, #40	@ 0x28
 800d08e:	5c9b      	ldrb	r3, [r3, r2]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d103      	bne.n	800d09c <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	2201      	movs	r2, #1
 800d098:	701a      	strb	r2, [r3, #0]
 800d09a:	e021      	b.n	800d0e0 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	7b1b      	ldrb	r3, [r3, #12]
 800d0a0:	220f      	movs	r2, #15
 800d0a2:	4013      	ands	r3, r2
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d108      	bne.n	800d0bc <DetermineFrameType+0x6c>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2220      	movs	r2, #32
 800d0ae:	5c9b      	ldrb	r3, [r3, r2]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d103      	bne.n	800d0bc <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	2202      	movs	r2, #2
 800d0b8:	701a      	strb	r2, [r3, #0]
 800d0ba:	e011      	b.n	800d0e0 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	7b1b      	ldrb	r3, [r3, #12]
 800d0c0:	220f      	movs	r2, #15
 800d0c2:	4013      	ands	r3, r2
 800d0c4:	b2db      	uxtb	r3, r3
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d108      	bne.n	800d0dc <DetermineFrameType+0x8c>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2220      	movs	r2, #32
 800d0ce:	5c9b      	ldrb	r3, [r3, r2]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d003      	beq.n	800d0dc <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	2203      	movs	r2, #3
 800d0d8:	701a      	strb	r2, [r3, #0]
 800d0da:	e001      	b.n	800d0e0 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800d0dc:	2317      	movs	r3, #23
 800d0de:	e000      	b.n	800d0e2 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800d0e0:	2300      	movs	r3, #0
}
 800d0e2:	0018      	movs	r0, r3
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	b002      	add	sp, #8
 800d0e8:	bd80      	pop	{r7, pc}
	...

0800d0ec <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 800d0f0:	4a14      	ldr	r2, [pc, #80]	@ (800d144 <CheckRetransUnconfirmedUplink+0x58>)
 800d0f2:	2382      	movs	r3, #130	@ 0x82
 800d0f4:	00db      	lsls	r3, r3, #3
 800d0f6:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800d0f8:	4b12      	ldr	r3, [pc, #72]	@ (800d144 <CheckRetransUnconfirmedUplink+0x58>)
 800d0fa:	4913      	ldr	r1, [pc, #76]	@ (800d148 <CheckRetransUnconfirmedUplink+0x5c>)
 800d0fc:	5859      	ldr	r1, [r3, r1]
 800d0fe:	238c      	movs	r3, #140	@ 0x8c
 800d100:	005b      	lsls	r3, r3, #1
 800d102:	5ccb      	ldrb	r3, [r1, r3]
    if( MacCtx.ChannelsNbTransCounter >=
 800d104:	429a      	cmp	r2, r3
 800d106:	d301      	bcc.n	800d10c <CheckRetransUnconfirmedUplink+0x20>
    {
        return true;
 800d108:	2301      	movs	r3, #1
 800d10a:	e018      	b.n	800d13e <CheckRetransUnconfirmedUplink+0x52>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800d10c:	4b0d      	ldr	r3, [pc, #52]	@ (800d144 <CheckRetransUnconfirmedUplink+0x58>)
 800d10e:	4a0f      	ldr	r2, [pc, #60]	@ (800d14c <CheckRetransUnconfirmedUplink+0x60>)
 800d110:	5c9b      	ldrb	r3, [r3, r2]
 800d112:	2202      	movs	r2, #2
 800d114:	4013      	ands	r3, r2
 800d116:	b2db      	uxtb	r3, r3
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d00f      	beq.n	800d13c <CheckRetransUnconfirmedUplink+0x50>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800d11c:	4b09      	ldr	r3, [pc, #36]	@ (800d144 <CheckRetransUnconfirmedUplink+0x58>)
 800d11e:	4a0a      	ldr	r2, [pc, #40]	@ (800d148 <CheckRetransUnconfirmedUplink+0x5c>)
 800d120:	589b      	ldr	r3, [r3, r2]
 800d122:	22f0      	movs	r2, #240	@ 0xf0
 800d124:	5c9b      	ldrb	r3, [r3, r2]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d101      	bne.n	800d12e <CheckRetransUnconfirmedUplink+0x42>
        {
            return true;
 800d12a:	2301      	movs	r3, #1
 800d12c:	e007      	b.n	800d13e <CheckRetransUnconfirmedUplink+0x52>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 800d12e:	4b05      	ldr	r3, [pc, #20]	@ (800d144 <CheckRetransUnconfirmedUplink+0x58>)
 800d130:	4a07      	ldr	r2, [pc, #28]	@ (800d150 <CheckRetransUnconfirmedUplink+0x64>)
 800d132:	5c9b      	ldrb	r3, [r3, r2]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d101      	bne.n	800d13c <CheckRetransUnconfirmedUplink+0x50>
            {
                return true;
 800d138:	2301      	movs	r3, #1
 800d13a:	e000      	b.n	800d13e <CheckRetransUnconfirmedUplink+0x52>
            }
        }
    }
    return false;
 800d13c:	2300      	movs	r3, #0
}
 800d13e:	0018      	movs	r0, r3
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}
 800d144:	20000940 	.word	0x20000940
 800d148:	00000484 	.word	0x00000484
 800d14c:	00000481 	.word	0x00000481
 800d150:	0000042d 	.word	0x0000042d

0800d154 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800d154:	b580      	push	{r7, lr}
 800d156:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 800d158:	4b0e      	ldr	r3, [pc, #56]	@ (800d194 <CheckRetransConfirmedUplink+0x40>)
 800d15a:	4a0f      	ldr	r2, [pc, #60]	@ (800d198 <CheckRetransConfirmedUplink+0x44>)
 800d15c:	5c9a      	ldrb	r2, [r3, r2]
        MacCtx.AckTimeoutRetries )
 800d15e:	4b0d      	ldr	r3, [pc, #52]	@ (800d194 <CheckRetransConfirmedUplink+0x40>)
 800d160:	490e      	ldr	r1, [pc, #56]	@ (800d19c <CheckRetransConfirmedUplink+0x48>)
 800d162:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.AckTimeoutRetriesCounter >=
 800d164:	429a      	cmp	r2, r3
 800d166:	d301      	bcc.n	800d16c <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 800d168:	2301      	movs	r3, #1
 800d16a:	e010      	b.n	800d18e <CheckRetransConfirmedUplink+0x3a>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800d16c:	4b09      	ldr	r3, [pc, #36]	@ (800d194 <CheckRetransConfirmedUplink+0x40>)
 800d16e:	4a0c      	ldr	r2, [pc, #48]	@ (800d1a0 <CheckRetransConfirmedUplink+0x4c>)
 800d170:	5c9b      	ldrb	r3, [r3, r2]
 800d172:	2202      	movs	r2, #2
 800d174:	4013      	ands	r3, r2
 800d176:	b2db      	uxtb	r3, r3
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d007      	beq.n	800d18c <CheckRetransConfirmedUplink+0x38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800d17c:	4a05      	ldr	r2, [pc, #20]	@ (800d194 <CheckRetransConfirmedUplink+0x40>)
 800d17e:	2388      	movs	r3, #136	@ 0x88
 800d180:	00db      	lsls	r3, r3, #3
 800d182:	5cd3      	ldrb	r3, [r2, r3]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d001      	beq.n	800d18c <CheckRetransConfirmedUplink+0x38>
        {
            return true;
 800d188:	2301      	movs	r3, #1
 800d18a:	e000      	b.n	800d18e <CheckRetransConfirmedUplink+0x3a>
        }
    }
    return false;
 800d18c:	2300      	movs	r3, #0
}
 800d18e:	0018      	movs	r0, r3
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}
 800d194:	20000940 	.word	0x20000940
 800d198:	00000412 	.word	0x00000412
 800d19c:	00000411 	.word	0x00000411
 800d1a0:	00000481 	.word	0x00000481

0800d1a4 <StopRetransmission>:

static bool StopRetransmission( void )
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800d1a8:	4b1e      	ldr	r3, [pc, #120]	@ (800d224 <StopRetransmission+0x80>)
 800d1aa:	4a1f      	ldr	r2, [pc, #124]	@ (800d228 <StopRetransmission+0x84>)
 800d1ac:	5c9b      	ldrb	r3, [r3, r2]
 800d1ae:	2202      	movs	r2, #2
 800d1b0:	4013      	ands	r3, r2
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d009      	beq.n	800d1cc <StopRetransmission+0x28>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 800d1b8:	4b1a      	ldr	r3, [pc, #104]	@ (800d224 <StopRetransmission+0x80>)
 800d1ba:	4a1c      	ldr	r2, [pc, #112]	@ (800d22c <StopRetransmission+0x88>)
 800d1bc:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d013      	beq.n	800d1ea <StopRetransmission+0x46>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
 800d1c2:	4b18      	ldr	r3, [pc, #96]	@ (800d224 <StopRetransmission+0x80>)
 800d1c4:	4a19      	ldr	r2, [pc, #100]	@ (800d22c <StopRetransmission+0x88>)
 800d1c6:	5c9b      	ldrb	r3, [r3, r2]
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d00e      	beq.n	800d1ea <StopRetransmission+0x46>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 800d1cc:	4b15      	ldr	r3, [pc, #84]	@ (800d224 <StopRetransmission+0x80>)
 800d1ce:	4a18      	ldr	r2, [pc, #96]	@ (800d230 <StopRetransmission+0x8c>)
 800d1d0:	589b      	ldr	r3, [r3, r2]
 800d1d2:	22f2      	movs	r2, #242	@ 0xf2
 800d1d4:	5c9b      	ldrb	r3, [r3, r2]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d007      	beq.n	800d1ea <StopRetransmission+0x46>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 800d1da:	4b12      	ldr	r3, [pc, #72]	@ (800d224 <StopRetransmission+0x80>)
 800d1dc:	4a14      	ldr	r2, [pc, #80]	@ (800d230 <StopRetransmission+0x8c>)
 800d1de:	589b      	ldr	r3, [r3, r2]
 800d1e0:	22f4      	movs	r2, #244	@ 0xf4
 800d1e2:	589a      	ldr	r2, [r3, r2]
 800d1e4:	3201      	adds	r2, #1
 800d1e6:	21f4      	movs	r1, #244	@ 0xf4
 800d1e8:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800d1ea:	4a0e      	ldr	r2, [pc, #56]	@ (800d224 <StopRetransmission+0x80>)
 800d1ec:	2382      	movs	r3, #130	@ 0x82
 800d1ee:	00db      	lsls	r3, r3, #3
 800d1f0:	2100      	movs	r1, #0
 800d1f2:	54d1      	strb	r1, [r2, r3]
    MacCtx.NodeAckRequested = false;
 800d1f4:	4b0b      	ldr	r3, [pc, #44]	@ (800d224 <StopRetransmission+0x80>)
 800d1f6:	4a0f      	ldr	r2, [pc, #60]	@ (800d234 <StopRetransmission+0x90>)
 800d1f8:	2100      	movs	r1, #0
 800d1fa:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 800d1fc:	4b09      	ldr	r3, [pc, #36]	@ (800d224 <StopRetransmission+0x80>)
 800d1fe:	4a0e      	ldr	r2, [pc, #56]	@ (800d238 <StopRetransmission+0x94>)
 800d200:	2100      	movs	r1, #0
 800d202:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800d204:	4a07      	ldr	r2, [pc, #28]	@ (800d224 <StopRetransmission+0x80>)
 800d206:	23d0      	movs	r3, #208	@ 0xd0
 800d208:	009b      	lsls	r3, r3, #2
 800d20a:	58d3      	ldr	r3, [r2, r3]
 800d20c:	2202      	movs	r2, #2
 800d20e:	4393      	bics	r3, r2
 800d210:	0019      	movs	r1, r3
 800d212:	4a04      	ldr	r2, [pc, #16]	@ (800d224 <StopRetransmission+0x80>)
 800d214:	23d0      	movs	r3, #208	@ 0xd0
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	50d1      	str	r1, [r2, r3]

    return true;
 800d21a:	2301      	movs	r3, #1
}
 800d21c:	0018      	movs	r0, r3
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	46c0      	nop			@ (mov r8, r8)
 800d224:	20000940 	.word	0x20000940
 800d228:	00000481 	.word	0x00000481
 800d22c:	0000042d 	.word	0x0000042d
 800d230:	00000484 	.word	0x00000484
 800d234:	00000414 	.word	0x00000414
 800d238:	00000413 	.word	0x00000413

0800d23c <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 800d242:	4b21      	ldr	r3, [pc, #132]	@ (800d2c8 <AckTimeoutRetriesProcess+0x8c>)
 800d244:	4a21      	ldr	r2, [pc, #132]	@ (800d2cc <AckTimeoutRetriesProcess+0x90>)
 800d246:	5c9a      	ldrb	r2, [r3, r2]
 800d248:	4b1f      	ldr	r3, [pc, #124]	@ (800d2c8 <AckTimeoutRetriesProcess+0x8c>)
 800d24a:	4921      	ldr	r1, [pc, #132]	@ (800d2d0 <AckTimeoutRetriesProcess+0x94>)
 800d24c:	5c5b      	ldrb	r3, [r3, r1]
 800d24e:	429a      	cmp	r2, r3
 800d250:	d236      	bcs.n	800d2c0 <AckTimeoutRetriesProcess+0x84>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 800d252:	4b1d      	ldr	r3, [pc, #116]	@ (800d2c8 <AckTimeoutRetriesProcess+0x8c>)
 800d254:	4a1d      	ldr	r2, [pc, #116]	@ (800d2cc <AckTimeoutRetriesProcess+0x90>)
 800d256:	5c9b      	ldrb	r3, [r3, r2]
 800d258:	3301      	adds	r3, #1
 800d25a:	b2d9      	uxtb	r1, r3
 800d25c:	4b1a      	ldr	r3, [pc, #104]	@ (800d2c8 <AckTimeoutRetriesProcess+0x8c>)
 800d25e:	4a1b      	ldr	r2, [pc, #108]	@ (800d2cc <AckTimeoutRetriesProcess+0x90>)
 800d260:	5499      	strb	r1, [r3, r2]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 800d262:	4b19      	ldr	r3, [pc, #100]	@ (800d2c8 <AckTimeoutRetriesProcess+0x8c>)
 800d264:	4a19      	ldr	r2, [pc, #100]	@ (800d2cc <AckTimeoutRetriesProcess+0x90>)
 800d266:	5c9b      	ldrb	r3, [r3, r2]
 800d268:	2201      	movs	r2, #1
 800d26a:	4013      	ands	r3, r2
 800d26c:	b2db      	uxtb	r3, r3
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d026      	beq.n	800d2c0 <AckTimeoutRetriesProcess+0x84>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800d272:	1d3b      	adds	r3, r7, #4
 800d274:	2222      	movs	r2, #34	@ 0x22
 800d276:	701a      	strb	r2, [r3, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800d278:	4b13      	ldr	r3, [pc, #76]	@ (800d2c8 <AckTimeoutRetriesProcess+0x8c>)
 800d27a:	4a16      	ldr	r2, [pc, #88]	@ (800d2d4 <AckTimeoutRetriesProcess+0x98>)
 800d27c:	589a      	ldr	r2, [r3, r2]
 800d27e:	2396      	movs	r3, #150	@ 0x96
 800d280:	005b      	lsls	r3, r3, #1
 800d282:	5cd2      	ldrb	r2, [r2, r3]
 800d284:	1d3b      	adds	r3, r7, #4
 800d286:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800d288:	4b0f      	ldr	r3, [pc, #60]	@ (800d2c8 <AckTimeoutRetriesProcess+0x8c>)
 800d28a:	4a12      	ldr	r2, [pc, #72]	@ (800d2d4 <AckTimeoutRetriesProcess+0x98>)
 800d28c:	589b      	ldr	r3, [r3, r2]
 800d28e:	22f9      	movs	r2, #249	@ 0xf9
 800d290:	569a      	ldrsb	r2, [r3, r2]
 800d292:	1d3b      	adds	r3, r7, #4
 800d294:	705a      	strb	r2, [r3, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d296:	4b0c      	ldr	r3, [pc, #48]	@ (800d2c8 <AckTimeoutRetriesProcess+0x8c>)
 800d298:	4a0e      	ldr	r2, [pc, #56]	@ (800d2d4 <AckTimeoutRetriesProcess+0x98>)
 800d29a:	589b      	ldr	r3, [r3, r2]
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	1d3a      	adds	r2, r7, #4
 800d2a0:	0011      	movs	r1, r2
 800d2a2:	0018      	movs	r0, r3
 800d2a4:	f004 f9a5 	bl	80115f2 <RegionGetPhyParam>
 800d2a8:	0003      	movs	r3, r0
 800d2aa:	001a      	movs	r2, r3
 800d2ac:	003b      	movs	r3, r7
 800d2ae:	601a      	str	r2, [r3, #0]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 800d2b0:	003b      	movs	r3, r7
 800d2b2:	6819      	ldr	r1, [r3, #0]
 800d2b4:	4b04      	ldr	r3, [pc, #16]	@ (800d2c8 <AckTimeoutRetriesProcess+0x8c>)
 800d2b6:	4a07      	ldr	r2, [pc, #28]	@ (800d2d4 <AckTimeoutRetriesProcess+0x98>)
 800d2b8:	589b      	ldr	r3, [r3, r2]
 800d2ba:	b249      	sxtb	r1, r1
 800d2bc:	22f9      	movs	r2, #249	@ 0xf9
 800d2be:	5499      	strb	r1, [r3, r2]
        }
    }
}
 800d2c0:	46c0      	nop			@ (mov r8, r8)
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	b002      	add	sp, #8
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	20000940 	.word	0x20000940
 800d2cc:	00000412 	.word	0x00000412
 800d2d0:	00000411 	.word	0x00000411
 800d2d4:	00000484 	.word	0x00000484

0800d2d8 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b082      	sub	sp, #8
 800d2dc:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 800d2de:	4a16      	ldr	r2, [pc, #88]	@ (800d338 <AckTimeoutRetriesFinalize+0x60>)
 800d2e0:	2388      	movs	r3, #136	@ 0x88
 800d2e2:	00db      	lsls	r3, r3, #3
 800d2e4:	5cd3      	ldrb	r3, [r2, r3]
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	4053      	eors	r3, r2
 800d2ea:	b2db      	uxtb	r3, r3
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d018      	beq.n	800d322 <AckTimeoutRetriesFinalize+0x4a>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800d2f0:	003b      	movs	r3, r7
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	711a      	strb	r2, [r3, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 800d2f6:	4b11      	ldr	r3, [pc, #68]	@ (800d33c <AckTimeoutRetriesFinalize+0x64>)
 800d2f8:	689a      	ldr	r2, [r3, #8]
 800d2fa:	003b      	movs	r3, r7
 800d2fc:	601a      	str	r2, [r3, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800d2fe:	4b0e      	ldr	r3, [pc, #56]	@ (800d338 <AckTimeoutRetriesFinalize+0x60>)
 800d300:	4a0f      	ldr	r2, [pc, #60]	@ (800d340 <AckTimeoutRetriesFinalize+0x68>)
 800d302:	589b      	ldr	r3, [r3, r2]
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	003a      	movs	r2, r7
 800d308:	0011      	movs	r1, r2
 800d30a:	0018      	movs	r0, r3
 800d30c:	f004 f9ac 	bl	8011668 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 800d310:	4b09      	ldr	r3, [pc, #36]	@ (800d338 <AckTimeoutRetriesFinalize+0x60>)
 800d312:	4a0c      	ldr	r2, [pc, #48]	@ (800d344 <AckTimeoutRetriesFinalize+0x6c>)
 800d314:	2100      	movs	r1, #0
 800d316:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 800d318:	4a07      	ldr	r2, [pc, #28]	@ (800d338 <AckTimeoutRetriesFinalize+0x60>)
 800d31a:	2388      	movs	r3, #136	@ 0x88
 800d31c:	00db      	lsls	r3, r3, #3
 800d31e:	2100      	movs	r1, #0
 800d320:	54d1      	strb	r1, [r2, r3]
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800d322:	4b05      	ldr	r3, [pc, #20]	@ (800d338 <AckTimeoutRetriesFinalize+0x60>)
 800d324:	4a08      	ldr	r2, [pc, #32]	@ (800d348 <AckTimeoutRetriesFinalize+0x70>)
 800d326:	5c99      	ldrb	r1, [r3, r2]
 800d328:	4b03      	ldr	r3, [pc, #12]	@ (800d338 <AckTimeoutRetriesFinalize+0x60>)
 800d32a:	4a08      	ldr	r2, [pc, #32]	@ (800d34c <AckTimeoutRetriesFinalize+0x74>)
 800d32c:	5499      	strb	r1, [r3, r2]
}
 800d32e:	46c0      	nop			@ (mov r8, r8)
 800d330:	46bd      	mov	sp, r7
 800d332:	b002      	add	sp, #8
 800d334:	bd80      	pop	{r7, pc}
 800d336:	46c0      	nop			@ (mov r8, r8)
 800d338:	20000940 	.word	0x20000940
 800d33c:	20000fa4 	.word	0x20000fa4
 800d340:	00000484 	.word	0x00000484
 800d344:	00000414 	.word	0x00000414
 800d348:	00000412 	.word	0x00000412
 800d34c:	00000441 	.word	0x00000441

0800d350 <CallNvmCtxCallback>:

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	0002      	movs	r2, r0
 800d358:	1dfb      	adds	r3, r7, #7
 800d35a:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 800d35c:	4a0c      	ldr	r2, [pc, #48]	@ (800d390 <CallNvmCtxCallback+0x40>)
 800d35e:	23d2      	movs	r3, #210	@ 0xd2
 800d360:	009b      	lsls	r3, r3, #2
 800d362:	58d3      	ldr	r3, [r2, r3]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d00f      	beq.n	800d388 <CallNvmCtxCallback+0x38>
 800d368:	4a09      	ldr	r2, [pc, #36]	@ (800d390 <CallNvmCtxCallback+0x40>)
 800d36a:	23d2      	movs	r3, #210	@ 0xd2
 800d36c:	009b      	lsls	r3, r3, #2
 800d36e:	58d3      	ldr	r3, [r2, r3]
 800d370:	689b      	ldr	r3, [r3, #8]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d008      	beq.n	800d388 <CallNvmCtxCallback+0x38>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 800d376:	4a06      	ldr	r2, [pc, #24]	@ (800d390 <CallNvmCtxCallback+0x40>)
 800d378:	23d2      	movs	r3, #210	@ 0xd2
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	58d3      	ldr	r3, [r2, r3]
 800d37e:	689b      	ldr	r3, [r3, #8]
 800d380:	1dfa      	adds	r2, r7, #7
 800d382:	7812      	ldrb	r2, [r2, #0]
 800d384:	0010      	movs	r0, r2
 800d386:	4798      	blx	r3
    }
}
 800d388:	46c0      	nop			@ (mov r8, r8)
 800d38a:	46bd      	mov	sp, r7
 800d38c:	b002      	add	sp, #8
 800d38e:	bd80      	pop	{r7, pc}
 800d390:	20000940 	.word	0x20000940

0800d394 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 800d394:	b580      	push	{r7, lr}
 800d396:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 800d398:	2000      	movs	r0, #0
 800d39a:	f7ff ffd9 	bl	800d350 <CallNvmCtxCallback>
}
 800d39e:	46c0      	nop			@ (mov r8, r8)
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 800d3a8:	2001      	movs	r0, #1
 800d3aa:	f7ff ffd1 	bl	800d350 <CallNvmCtxCallback>
}
 800d3ae:	46c0      	nop			@ (mov r8, r8)
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 800d3b8:	2002      	movs	r0, #2
 800d3ba:	f7ff ffc9 	bl	800d350 <CallNvmCtxCallback>
}
 800d3be:	46c0      	nop			@ (mov r8, r8)
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 800d3c8:	2003      	movs	r0, #3
 800d3ca:	f7ff ffc1 	bl	800d350 <CallNvmCtxCallback>
}
 800d3ce:	46c0      	nop			@ (mov r8, r8)
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 800d3d8:	2004      	movs	r0, #4
 800d3da:	f7ff ffb9 	bl	800d350 <CallNvmCtxCallback>
}
 800d3de:	46c0      	nop			@ (mov r8, r8)
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}

0800d3e4 <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 800d3e8:	2005      	movs	r0, #5
 800d3ea:	f7ff ffb1 	bl	800d350 <CallNvmCtxCallback>
}
 800d3ee:	46c0      	nop			@ (mov r8, r8)
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 800d3f8:	2006      	movs	r0, #6
 800d3fa:	f7ff ffa9 	bl	800d350 <CallNvmCtxCallback>
}
 800d3fe:	46c0      	nop			@ (mov r8, r8)
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}

0800d404 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 800d404:	b580      	push	{r7, lr}
 800d406:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800d408:	4b0a      	ldr	r3, [pc, #40]	@ (800d434 <IsRequestPending+0x30>)
 800d40a:	4a0b      	ldr	r2, [pc, #44]	@ (800d438 <IsRequestPending+0x34>)
 800d40c:	5c9b      	ldrb	r3, [r3, r2]
 800d40e:	2204      	movs	r2, #4
 800d410:	4013      	ands	r3, r2
 800d412:	b2db      	uxtb	r3, r3
 800d414:	2b00      	cmp	r3, #0
 800d416:	d107      	bne.n	800d428 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 800d418:	4b06      	ldr	r3, [pc, #24]	@ (800d434 <IsRequestPending+0x30>)
 800d41a:	4a07      	ldr	r2, [pc, #28]	@ (800d438 <IsRequestPending+0x34>)
 800d41c:	5c9b      	ldrb	r3, [r3, r2]
 800d41e:	2201      	movs	r2, #1
 800d420:	4013      	ands	r3, r2
 800d422:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800d424:	2b00      	cmp	r3, #0
 800d426:	d001      	beq.n	800d42c <IsRequestPending+0x28>
    {
        return 1;
 800d428:	2301      	movs	r3, #1
 800d42a:	e000      	b.n	800d42e <IsRequestPending+0x2a>
    }
    return 0;
 800d42c:	2300      	movs	r3, #0
}
 800d42e:	0018      	movs	r0, r3
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	20000940 	.word	0x20000940
 800d438:	00000481 	.word	0x00000481

0800d43c <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800d43c:	b5b0      	push	{r4, r5, r7, lr}
 800d43e:	b094      	sub	sp, #80	@ 0x50
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	1dfb      	adds	r3, r7, #7
 800d448:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d002      	beq.n	800d456 <LoRaMacInitialization+0x1a>
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d101      	bne.n	800d45a <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d456:	2303      	movs	r3, #3
 800d458:	e35f      	b.n	800db1a <LoRaMacInitialization+0x6de>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d00b      	beq.n	800d47a <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800d466:	2b00      	cmp	r3, #0
 800d468:	d007      	beq.n	800d47a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d003      	beq.n	800d47a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800d476:	2b00      	cmp	r3, #0
 800d478:	d101      	bne.n	800d47e <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d47a:	2303      	movs	r3, #3
 800d47c:	e34d      	b.n	800db1a <LoRaMacInitialization+0x6de>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800d47e:	1dfb      	adds	r3, r7, #7
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	0018      	movs	r0, r3
 800d484:	f004 f8a4 	bl	80115d0 <RegionIsActive>
 800d488:	0003      	movs	r3, r0
 800d48a:	001a      	movs	r2, r3
 800d48c:	2301      	movs	r3, #1
 800d48e:	4053      	eors	r3, r2
 800d490:	b2db      	uxtb	r3, r3
 800d492:	2b00      	cmp	r3, #0
 800d494:	d001      	beq.n	800d49a <LoRaMacInitialization+0x5e>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800d496:	2309      	movs	r3, #9
 800d498:	e33f      	b.n	800db1a <LoRaMacInitialization+0x6de>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 800d49a:	4afd      	ldr	r2, [pc, #1012]	@ (800d890 <LoRaMacInitialization+0x454>)
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	0011      	movs	r1, r2
 800d4a0:	0018      	movs	r0, r3
 800d4a2:	f002 f9ff 	bl	800f8a4 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 800d4a6:	23ee      	movs	r3, #238	@ 0xee
 800d4a8:	005a      	lsls	r2, r3, #1
 800d4aa:	4bfa      	ldr	r3, [pc, #1000]	@ (800d894 <LoRaMacInitialization+0x458>)
 800d4ac:	2100      	movs	r1, #0
 800d4ae:	0018      	movs	r0, r3
 800d4b0:	f008 f8a0 	bl	80155f4 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800d4b4:	2391      	movs	r3, #145	@ 0x91
 800d4b6:	00da      	lsls	r2, r3, #3
 800d4b8:	4bf7      	ldr	r3, [pc, #988]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	0018      	movs	r0, r3
 800d4be:	f008 f899 	bl	80155f4 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 800d4c2:	4bf5      	ldr	r3, [pc, #980]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d4c4:	49f5      	ldr	r1, [pc, #980]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d4c6:	4af3      	ldr	r2, [pc, #972]	@ (800d894 <LoRaMacInitialization+0x458>)
 800d4c8:	505a      	str	r2, [r3, r1]

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 800d4ca:	4bf3      	ldr	r3, [pc, #972]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d4cc:	4af4      	ldr	r2, [pc, #976]	@ (800d8a0 <LoRaMacInitialization+0x464>)
 800d4ce:	2101      	movs	r1, #1
 800d4d0:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetries = 1;
 800d4d2:	4bf1      	ldr	r3, [pc, #964]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d4d4:	4af3      	ldr	r2, [pc, #972]	@ (800d8a4 <LoRaMacInitialization+0x468>)
 800d4d6:	2101      	movs	r1, #1
 800d4d8:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->Region = region;
 800d4da:	4bef      	ldr	r3, [pc, #956]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d4dc:	4aef      	ldr	r2, [pc, #956]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d4de:	589b      	ldr	r3, [r3, r2]
 800d4e0:	1dfa      	adds	r2, r7, #7
 800d4e2:	7812      	ldrb	r2, [r2, #0]
 800d4e4:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 800d4e6:	4bec      	ldr	r3, [pc, #944]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d4e8:	4aec      	ldr	r2, [pc, #944]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d4ea:	589b      	ldr	r3, [r3, r2]
 800d4ec:	22f0      	movs	r2, #240	@ 0xf0
 800d4ee:	2100      	movs	r1, #0
 800d4f0:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->RepeaterSupport = false;
 800d4f2:	4be9      	ldr	r3, [pc, #932]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d4f4:	4ae9      	ldr	r2, [pc, #932]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d4f6:	589a      	ldr	r2, [r3, r2]
 800d4f8:	2340      	movs	r3, #64	@ 0x40
 800d4fa:	33ff      	adds	r3, #255	@ 0xff
 800d4fc:	2100      	movs	r1, #0
 800d4fe:	54d1      	strb	r1, [r2, r3]

    Version_t lrWanVersion;
    lrWanVersion.Fields.Major    = 1;
 800d500:	211c      	movs	r1, #28
 800d502:	187b      	adds	r3, r7, r1
 800d504:	2201      	movs	r2, #1
 800d506:	70da      	strb	r2, [r3, #3]
    lrWanVersion.Fields.Minor    = 0;
 800d508:	187b      	adds	r3, r7, r1
 800d50a:	2200      	movs	r2, #0
 800d50c:	709a      	strb	r2, [r3, #2]
    lrWanVersion.Fields.Revision = 3;
 800d50e:	187b      	adds	r3, r7, r1
 800d510:	2203      	movs	r2, #3
 800d512:	705a      	strb	r2, [r3, #1]
    lrWanVersion.Fields.Rfu      = 0;
 800d514:	187b      	adds	r3, r7, r1
 800d516:	2200      	movs	r2, #0
 800d518:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->Version = lrWanVersion;
 800d51a:	4bdf      	ldr	r3, [pc, #892]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d51c:	4adf      	ldr	r2, [pc, #892]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d51e:	589a      	ldr	r2, [r3, r2]
 800d520:	23e8      	movs	r3, #232	@ 0xe8
 800d522:	005b      	lsls	r3, r3, #1
 800d524:	69f9      	ldr	r1, [r7, #28]
 800d526:	50d1      	str	r1, [r2, r3]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800d528:	254c      	movs	r5, #76	@ 0x4c
 800d52a:	197b      	adds	r3, r7, r5
 800d52c:	220f      	movs	r2, #15
 800d52e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d530:	4bd9      	ldr	r3, [pc, #868]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d532:	4ada      	ldr	r2, [pc, #872]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d534:	589b      	ldr	r3, [r3, r2]
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	197a      	adds	r2, r7, r5
 800d53a:	0011      	movs	r1, r2
 800d53c:	0018      	movs	r0, r3
 800d53e:	f004 f858 	bl	80115f2 <RegionGetPhyParam>
 800d542:	0003      	movs	r3, r0
 800d544:	001a      	movs	r2, r3
 800d546:	2448      	movs	r4, #72	@ 0x48
 800d548:	193b      	adds	r3, r7, r4
 800d54a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 800d54c:	193b      	adds	r3, r7, r4
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4ad1      	ldr	r2, [pc, #836]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d552:	49d2      	ldr	r1, [pc, #840]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d554:	5852      	ldr	r2, [r2, r1]
 800d556:	1e59      	subs	r1, r3, #1
 800d558:	418b      	sbcs	r3, r1
 800d55a:	b2d9      	uxtb	r1, r3
 800d55c:	233e      	movs	r3, #62	@ 0x3e
 800d55e:	33ff      	adds	r3, #255	@ 0xff
 800d560:	54d1      	strb	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800d562:	197b      	adds	r3, r7, r5
 800d564:	220a      	movs	r2, #10
 800d566:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d568:	4bcb      	ldr	r3, [pc, #812]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d56a:	4acc      	ldr	r2, [pc, #816]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d56c:	589b      	ldr	r3, [r3, r2]
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	197a      	adds	r2, r7, r5
 800d572:	0011      	movs	r1, r2
 800d574:	0018      	movs	r0, r3
 800d576:	f004 f83c 	bl	80115f2 <RegionGetPhyParam>
 800d57a:	0003      	movs	r3, r0
 800d57c:	001a      	movs	r2, r3
 800d57e:	193b      	adds	r3, r7, r4
 800d580:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 800d582:	193b      	adds	r3, r7, r4
 800d584:	6819      	ldr	r1, [r3, #0]
 800d586:	4bc4      	ldr	r3, [pc, #784]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d588:	4ac4      	ldr	r2, [pc, #784]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d58a:	589b      	ldr	r3, [r3, r2]
 800d58c:	b24a      	sxtb	r2, r1
 800d58e:	711a      	strb	r2, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 800d590:	197b      	adds	r3, r7, r5
 800d592:	2206      	movs	r2, #6
 800d594:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d596:	4bc0      	ldr	r3, [pc, #768]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d598:	4ac0      	ldr	r2, [pc, #768]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d59a:	589b      	ldr	r3, [r3, r2]
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	197a      	adds	r2, r7, r5
 800d5a0:	0011      	movs	r1, r2
 800d5a2:	0018      	movs	r0, r3
 800d5a4:	f004 f825 	bl	80115f2 <RegionGetPhyParam>
 800d5a8:	0003      	movs	r3, r0
 800d5aa:	001a      	movs	r2, r3
 800d5ac:	193b      	adds	r3, r7, r4
 800d5ae:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 800d5b0:	193b      	adds	r3, r7, r4
 800d5b2:	6819      	ldr	r1, [r3, #0]
 800d5b4:	4bb8      	ldr	r3, [pc, #736]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d5b6:	4ab9      	ldr	r2, [pc, #740]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d5b8:	589b      	ldr	r3, [r3, r2]
 800d5ba:	b24a      	sxtb	r2, r1
 800d5bc:	715a      	strb	r2, [r3, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800d5be:	197b      	adds	r3, r7, r5
 800d5c0:	2210      	movs	r2, #16
 800d5c2:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d5c4:	4bb4      	ldr	r3, [pc, #720]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d5c6:	4ab5      	ldr	r2, [pc, #724]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d5c8:	589b      	ldr	r3, [r3, r2]
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	197a      	adds	r2, r7, r5
 800d5ce:	0011      	movs	r1, r2
 800d5d0:	0018      	movs	r0, r3
 800d5d2:	f004 f80e 	bl	80115f2 <RegionGetPhyParam>
 800d5d6:	0003      	movs	r3, r0
 800d5d8:	001a      	movs	r2, r3
 800d5da:	193b      	adds	r3, r7, r4
 800d5dc:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800d5de:	4bae      	ldr	r3, [pc, #696]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d5e0:	4aae      	ldr	r2, [pc, #696]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d5e2:	589b      	ldr	r3, [r3, r2]
 800d5e4:	193a      	adds	r2, r7, r4
 800d5e6:	6812      	ldr	r2, [r2, #0]
 800d5e8:	611a      	str	r2, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800d5ea:	197b      	adds	r3, r7, r5
 800d5ec:	2211      	movs	r2, #17
 800d5ee:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d5f0:	4ba9      	ldr	r3, [pc, #676]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d5f2:	4aaa      	ldr	r2, [pc, #680]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d5f4:	589b      	ldr	r3, [r3, r2]
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	197a      	adds	r2, r7, r5
 800d5fa:	0011      	movs	r1, r2
 800d5fc:	0018      	movs	r0, r3
 800d5fe:	f003 fff8 	bl	80115f2 <RegionGetPhyParam>
 800d602:	0003      	movs	r3, r0
 800d604:	001a      	movs	r2, r3
 800d606:	193b      	adds	r3, r7, r4
 800d608:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800d60a:	4ba3      	ldr	r3, [pc, #652]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d60c:	4aa3      	ldr	r2, [pc, #652]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d60e:	589b      	ldr	r3, [r3, r2]
 800d610:	193a      	adds	r2, r7, r4
 800d612:	6812      	ldr	r2, [r2, #0]
 800d614:	615a      	str	r2, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800d616:	197b      	adds	r3, r7, r5
 800d618:	2212      	movs	r2, #18
 800d61a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d61c:	4b9e      	ldr	r3, [pc, #632]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d61e:	4a9f      	ldr	r2, [pc, #636]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d620:	589b      	ldr	r3, [r3, r2]
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	197a      	adds	r2, r7, r5
 800d626:	0011      	movs	r1, r2
 800d628:	0018      	movs	r0, r3
 800d62a:	f003 ffe2 	bl	80115f2 <RegionGetPhyParam>
 800d62e:	0003      	movs	r3, r0
 800d630:	001a      	movs	r2, r3
 800d632:	193b      	adds	r3, r7, r4
 800d634:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800d636:	4b98      	ldr	r3, [pc, #608]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d638:	4a98      	ldr	r2, [pc, #608]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d63a:	589b      	ldr	r3, [r3, r2]
 800d63c:	193a      	adds	r2, r7, r4
 800d63e:	6812      	ldr	r2, [r2, #0]
 800d640:	619a      	str	r2, [r3, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800d642:	197b      	adds	r3, r7, r5
 800d644:	2213      	movs	r2, #19
 800d646:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d648:	4b93      	ldr	r3, [pc, #588]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d64a:	4a94      	ldr	r2, [pc, #592]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d64c:	589b      	ldr	r3, [r3, r2]
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	197a      	adds	r2, r7, r5
 800d652:	0011      	movs	r1, r2
 800d654:	0018      	movs	r0, r3
 800d656:	f003 ffcc 	bl	80115f2 <RegionGetPhyParam>
 800d65a:	0003      	movs	r3, r0
 800d65c:	001a      	movs	r2, r3
 800d65e:	193b      	adds	r3, r7, r4
 800d660:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800d662:	4b8d      	ldr	r3, [pc, #564]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d664:	4a8d      	ldr	r2, [pc, #564]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d666:	589b      	ldr	r3, [r3, r2]
 800d668:	193a      	adds	r2, r7, r4
 800d66a:	6812      	ldr	r2, [r2, #0]
 800d66c:	61da      	str	r2, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800d66e:	197b      	adds	r3, r7, r5
 800d670:	2214      	movs	r2, #20
 800d672:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d674:	4b88      	ldr	r3, [pc, #544]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d676:	4a89      	ldr	r2, [pc, #548]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d678:	589b      	ldr	r3, [r3, r2]
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	197a      	adds	r2, r7, r5
 800d67e:	0011      	movs	r1, r2
 800d680:	0018      	movs	r0, r3
 800d682:	f003 ffb6 	bl	80115f2 <RegionGetPhyParam>
 800d686:	0003      	movs	r3, r0
 800d688:	001a      	movs	r2, r3
 800d68a:	193b      	adds	r3, r7, r4
 800d68c:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800d68e:	4b82      	ldr	r3, [pc, #520]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d690:	4a82      	ldr	r2, [pc, #520]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d692:	589b      	ldr	r3, [r3, r2]
 800d694:	193a      	adds	r2, r7, r4
 800d696:	6812      	ldr	r2, [r2, #0]
 800d698:	621a      	str	r2, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800d69a:	197b      	adds	r3, r7, r5
 800d69c:	2217      	movs	r2, #23
 800d69e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d6a0:	4b7d      	ldr	r3, [pc, #500]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d6a2:	4a7e      	ldr	r2, [pc, #504]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d6a4:	589b      	ldr	r3, [r3, r2]
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	197a      	adds	r2, r7, r5
 800d6aa:	0011      	movs	r1, r2
 800d6ac:	0018      	movs	r0, r3
 800d6ae:	f003 ffa0 	bl	80115f2 <RegionGetPhyParam>
 800d6b2:	0003      	movs	r3, r0
 800d6b4:	001a      	movs	r2, r3
 800d6b6:	193b      	adds	r3, r7, r4
 800d6b8:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800d6ba:	193b      	adds	r3, r7, r4
 800d6bc:	6819      	ldr	r1, [r3, #0]
 800d6be:	4b76      	ldr	r3, [pc, #472]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d6c0:	4a76      	ldr	r2, [pc, #472]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d6c2:	589b      	ldr	r3, [r3, r2]
 800d6c4:	b2c9      	uxtb	r1, r1
 800d6c6:	2225      	movs	r2, #37	@ 0x25
 800d6c8:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800d6ca:	197b      	adds	r3, r7, r5
 800d6cc:	2218      	movs	r2, #24
 800d6ce:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d6d0:	4b71      	ldr	r3, [pc, #452]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d6d2:	4a72      	ldr	r2, [pc, #456]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d6d4:	589b      	ldr	r3, [r3, r2]
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	197a      	adds	r2, r7, r5
 800d6da:	0011      	movs	r1, r2
 800d6dc:	0018      	movs	r0, r3
 800d6de:	f003 ff88 	bl	80115f2 <RegionGetPhyParam>
 800d6e2:	0003      	movs	r3, r0
 800d6e4:	001a      	movs	r2, r3
 800d6e6:	193b      	adds	r3, r7, r4
 800d6e8:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800d6ea:	4b6b      	ldr	r3, [pc, #428]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d6ec:	4a6b      	ldr	r2, [pc, #428]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d6ee:	589b      	ldr	r3, [r3, r2]
 800d6f0:	193a      	adds	r2, r7, r4
 800d6f2:	6812      	ldr	r2, [r2, #0]
 800d6f4:	629a      	str	r2, [r3, #40]	@ 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800d6f6:	4b68      	ldr	r3, [pc, #416]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d6f8:	4a68      	ldr	r2, [pc, #416]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d6fa:	589b      	ldr	r3, [r3, r2]
 800d6fc:	193a      	adds	r2, r7, r4
 800d6fe:	6812      	ldr	r2, [r2, #0]
 800d700:	631a      	str	r2, [r3, #48]	@ 0x30

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800d702:	197b      	adds	r3, r7, r5
 800d704:	2219      	movs	r2, #25
 800d706:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d708:	4b63      	ldr	r3, [pc, #396]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d70a:	4a64      	ldr	r2, [pc, #400]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d70c:	589b      	ldr	r3, [r3, r2]
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	197a      	adds	r2, r7, r5
 800d712:	0011      	movs	r1, r2
 800d714:	0018      	movs	r0, r3
 800d716:	f003 ff6c 	bl	80115f2 <RegionGetPhyParam>
 800d71a:	0003      	movs	r3, r0
 800d71c:	001a      	movs	r2, r3
 800d71e:	193b      	adds	r3, r7, r4
 800d720:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800d722:	193b      	adds	r3, r7, r4
 800d724:	6819      	ldr	r1, [r3, #0]
 800d726:	4b5c      	ldr	r3, [pc, #368]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d728:	4a5c      	ldr	r2, [pc, #368]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d72a:	589b      	ldr	r3, [r3, r2]
 800d72c:	b2c9      	uxtb	r1, r1
 800d72e:	222c      	movs	r2, #44	@ 0x2c
 800d730:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800d732:	193b      	adds	r3, r7, r4
 800d734:	6819      	ldr	r1, [r3, #0]
 800d736:	4b58      	ldr	r3, [pc, #352]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d738:	4a58      	ldr	r2, [pc, #352]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d73a:	589b      	ldr	r3, [r3, r2]
 800d73c:	b2c9      	uxtb	r1, r1
 800d73e:	2234      	movs	r2, #52	@ 0x34
 800d740:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800d742:	197b      	adds	r3, r7, r5
 800d744:	221e      	movs	r2, #30
 800d746:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d748:	4b53      	ldr	r3, [pc, #332]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d74a:	4a54      	ldr	r2, [pc, #336]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d74c:	589b      	ldr	r3, [r3, r2]
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	197a      	adds	r2, r7, r5
 800d752:	0011      	movs	r1, r2
 800d754:	0018      	movs	r0, r3
 800d756:	f003 ff4c 	bl	80115f2 <RegionGetPhyParam>
 800d75a:	0003      	movs	r3, r0
 800d75c:	001a      	movs	r2, r3
 800d75e:	193b      	adds	r3, r7, r4
 800d760:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800d762:	193b      	adds	r3, r7, r4
 800d764:	6819      	ldr	r1, [r3, #0]
 800d766:	4b4c      	ldr	r3, [pc, #304]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d768:	4a4c      	ldr	r2, [pc, #304]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d76a:	589b      	ldr	r3, [r3, r2]
 800d76c:	b2c9      	uxtb	r1, r1
 800d76e:	2238      	movs	r2, #56	@ 0x38
 800d770:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800d772:	197b      	adds	r3, r7, r5
 800d774:	221f      	movs	r2, #31
 800d776:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d778:	4b47      	ldr	r3, [pc, #284]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d77a:	4a48      	ldr	r2, [pc, #288]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d77c:	589b      	ldr	r3, [r3, r2]
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	197a      	adds	r2, r7, r5
 800d782:	0011      	movs	r1, r2
 800d784:	0018      	movs	r0, r3
 800d786:	f003 ff34 	bl	80115f2 <RegionGetPhyParam>
 800d78a:	0003      	movs	r3, r0
 800d78c:	001a      	movs	r2, r3
 800d78e:	193b      	adds	r3, r7, r4
 800d790:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800d792:	193b      	adds	r3, r7, r4
 800d794:	6819      	ldr	r1, [r3, #0]
 800d796:	4b40      	ldr	r3, [pc, #256]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d798:	4a40      	ldr	r2, [pc, #256]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d79a:	589b      	ldr	r3, [r3, r2]
 800d79c:	b2c9      	uxtb	r1, r1
 800d79e:	2239      	movs	r2, #57	@ 0x39
 800d7a0:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800d7a2:	197b      	adds	r3, r7, r5
 800d7a4:	2220      	movs	r2, #32
 800d7a6:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d7a8:	4b3b      	ldr	r3, [pc, #236]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d7aa:	4a3c      	ldr	r2, [pc, #240]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d7ac:	589b      	ldr	r3, [r3, r2]
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	197a      	adds	r2, r7, r5
 800d7b2:	0011      	movs	r1, r2
 800d7b4:	0018      	movs	r0, r3
 800d7b6:	f003 ff1c 	bl	80115f2 <RegionGetPhyParam>
 800d7ba:	0003      	movs	r3, r0
 800d7bc:	001a      	movs	r2, r3
 800d7be:	193b      	adds	r3, r7, r4
 800d7c0:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 800d7c2:	4b35      	ldr	r3, [pc, #212]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d7c4:	4a35      	ldr	r2, [pc, #212]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d7c6:	589b      	ldr	r3, [r3, r2]
 800d7c8:	193a      	adds	r2, r7, r4
 800d7ca:	6812      	ldr	r2, [r2, #0]
 800d7cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800d7ce:	197b      	adds	r3, r7, r5
 800d7d0:	2221      	movs	r2, #33	@ 0x21
 800d7d2:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d7d4:	4b30      	ldr	r3, [pc, #192]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d7d6:	4a31      	ldr	r2, [pc, #196]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d7d8:	589b      	ldr	r3, [r3, r2]
 800d7da:	781b      	ldrb	r3, [r3, #0]
 800d7dc:	197a      	adds	r2, r7, r5
 800d7de:	0011      	movs	r1, r2
 800d7e0:	0018      	movs	r0, r3
 800d7e2:	f003 ff06 	bl	80115f2 <RegionGetPhyParam>
 800d7e6:	0003      	movs	r3, r0
 800d7e8:	001a      	movs	r2, r3
 800d7ea:	193b      	adds	r3, r7, r4
 800d7ec:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 800d7ee:	4b2a      	ldr	r3, [pc, #168]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d7f0:	4a2a      	ldr	r2, [pc, #168]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d7f2:	589b      	ldr	r3, [r3, r2]
 800d7f4:	193a      	adds	r2, r7, r4
 800d7f6:	6812      	ldr	r2, [r2, #0]
 800d7f8:	641a      	str	r2, [r3, #64]	@ 0x40

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800d7fa:	197b      	adds	r3, r7, r5
 800d7fc:	220b      	movs	r2, #11
 800d7fe:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d800:	4b25      	ldr	r3, [pc, #148]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d802:	4a26      	ldr	r2, [pc, #152]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d804:	589b      	ldr	r3, [r3, r2]
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	197a      	adds	r2, r7, r5
 800d80a:	0011      	movs	r1, r2
 800d80c:	0018      	movs	r0, r3
 800d80e:	f003 fef0 	bl	80115f2 <RegionGetPhyParam>
 800d812:	0003      	movs	r3, r0
 800d814:	001a      	movs	r2, r3
 800d816:	193b      	adds	r3, r7, r4
 800d818:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckLimit = phyParam.Value;
 800d81a:	193b      	adds	r3, r7, r4
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	b299      	uxth	r1, r3
 800d820:	4a1d      	ldr	r2, [pc, #116]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d822:	23fd      	movs	r3, #253	@ 0xfd
 800d824:	009b      	lsls	r3, r3, #2
 800d826:	52d1      	strh	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800d828:	197b      	adds	r3, r7, r5
 800d82a:	220c      	movs	r2, #12
 800d82c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d82e:	4b1a      	ldr	r3, [pc, #104]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d830:	4a1a      	ldr	r2, [pc, #104]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d832:	589b      	ldr	r3, [r3, r2]
 800d834:	781b      	ldrb	r3, [r3, #0]
 800d836:	197a      	adds	r2, r7, r5
 800d838:	0011      	movs	r1, r2
 800d83a:	0018      	movs	r0, r3
 800d83c:	f003 fed9 	bl	80115f2 <RegionGetPhyParam>
 800d840:	0003      	movs	r3, r0
 800d842:	001a      	movs	r2, r3
 800d844:	193b      	adds	r3, r7, r4
 800d846:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckDelay = phyParam.Value;
 800d848:	193b      	adds	r3, r7, r4
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	b299      	uxth	r1, r3
 800d84e:	4b12      	ldr	r3, [pc, #72]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d850:	4a15      	ldr	r2, [pc, #84]	@ (800d8a8 <LoRaMacInitialization+0x46c>)
 800d852:	5299      	strh	r1, [r3, r2]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 800d854:	4b10      	ldr	r3, [pc, #64]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d856:	4a11      	ldr	r2, [pc, #68]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d858:	589b      	ldr	r3, [r3, r2]
 800d85a:	2224      	movs	r2, #36	@ 0x24
 800d85c:	2101      	movs	r1, #1
 800d85e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 20;
 800d860:	4b0d      	ldr	r3, [pc, #52]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d862:	4a0e      	ldr	r2, [pc, #56]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d864:	589b      	ldr	r3, [r3, r2]
 800d866:	2214      	movs	r2, #20
 800d868:	609a      	str	r2, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 800d86a:	4b0b      	ldr	r3, [pc, #44]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d86c:	4a0b      	ldr	r2, [pc, #44]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d86e:	589b      	ldr	r3, [r3, r2]
 800d870:	2206      	movs	r2, #6
 800d872:	731a      	strb	r2, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 800d874:	4b08      	ldr	r3, [pc, #32]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d876:	4a09      	ldr	r2, [pc, #36]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d878:	589b      	ldr	r3, [r3, r2]
 800d87a:	4a07      	ldr	r2, [pc, #28]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d87c:	4907      	ldr	r1, [pc, #28]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d87e:	5852      	ldr	r2, [r2, r1]
 800d880:	689b      	ldr	r3, [r3, #8]
 800d882:	21fc      	movs	r1, #252	@ 0xfc
 800d884:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 800d886:	4b04      	ldr	r3, [pc, #16]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d888:	4a04      	ldr	r2, [pc, #16]	@ (800d89c <LoRaMacInitialization+0x460>)
 800d88a:	589b      	ldr	r3, [r3, r2]
 800d88c:	4a02      	ldr	r2, [pc, #8]	@ (800d898 <LoRaMacInitialization+0x45c>)
 800d88e:	e00d      	b.n	800d8ac <LoRaMacInitialization+0x470>
 800d890:	0800d3f5 	.word	0x0800d3f5
 800d894:	20000dc8 	.word	0x20000dc8
 800d898:	20000940 	.word	0x20000940
 800d89c:	00000484 	.word	0x00000484
 800d8a0:	00000412 	.word	0x00000412
 800d8a4:	00000411 	.word	0x00000411
 800d8a8:	000003f6 	.word	0x000003f6
 800d8ac:	499d      	ldr	r1, [pc, #628]	@ (800db24 <LoRaMacInitialization+0x6e8>)
 800d8ae:	5852      	ldr	r2, [r2, r1]
 800d8b0:	7b19      	ldrb	r1, [r3, #12]
 800d8b2:	2380      	movs	r3, #128	@ 0x80
 800d8b4:	005b      	lsls	r3, r3, #1
 800d8b6:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 800d8b8:	4b9b      	ldr	r3, [pc, #620]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d8ba:	4a9a      	ldr	r2, [pc, #616]	@ (800db24 <LoRaMacInitialization+0x6e8>)
 800d8bc:	589b      	ldr	r3, [r3, r2]
 800d8be:	4a9a      	ldr	r2, [pc, #616]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d8c0:	4998      	ldr	r1, [pc, #608]	@ (800db24 <LoRaMacInitialization+0x6e8>)
 800d8c2:	5852      	ldr	r2, [r2, r1]
 800d8c4:	6919      	ldr	r1, [r3, #16]
 800d8c6:	2382      	movs	r3, #130	@ 0x82
 800d8c8:	005b      	lsls	r3, r3, #1
 800d8ca:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 800d8cc:	4b96      	ldr	r3, [pc, #600]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d8ce:	4a95      	ldr	r2, [pc, #596]	@ (800db24 <LoRaMacInitialization+0x6e8>)
 800d8d0:	589b      	ldr	r3, [r3, r2]
 800d8d2:	4a95      	ldr	r2, [pc, #596]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d8d4:	4993      	ldr	r1, [pc, #588]	@ (800db24 <LoRaMacInitialization+0x6e8>)
 800d8d6:	5852      	ldr	r2, [r2, r1]
 800d8d8:	6959      	ldr	r1, [r3, #20]
 800d8da:	2384      	movs	r3, #132	@ 0x84
 800d8dc:	005b      	lsls	r3, r3, #1
 800d8de:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 800d8e0:	4b91      	ldr	r3, [pc, #580]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d8e2:	4a90      	ldr	r2, [pc, #576]	@ (800db24 <LoRaMacInitialization+0x6e8>)
 800d8e4:	589b      	ldr	r3, [r3, r2]
 800d8e6:	4a90      	ldr	r2, [pc, #576]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d8e8:	498e      	ldr	r1, [pc, #568]	@ (800db24 <LoRaMacInitialization+0x6e8>)
 800d8ea:	5852      	ldr	r2, [r2, r1]
 800d8ec:	6999      	ldr	r1, [r3, #24]
 800d8ee:	2386      	movs	r3, #134	@ 0x86
 800d8f0:	005b      	lsls	r3, r3, #1
 800d8f2:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 800d8f4:	4b8c      	ldr	r3, [pc, #560]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d8f6:	4a8b      	ldr	r2, [pc, #556]	@ (800db24 <LoRaMacInitialization+0x6e8>)
 800d8f8:	589b      	ldr	r3, [r3, r2]
 800d8fa:	4a8b      	ldr	r2, [pc, #556]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d8fc:	4989      	ldr	r1, [pc, #548]	@ (800db24 <LoRaMacInitialization+0x6e8>)
 800d8fe:	5852      	ldr	r2, [r2, r1]
 800d900:	69d9      	ldr	r1, [r3, #28]
 800d902:	2388      	movs	r3, #136	@ 0x88
 800d904:	005b      	lsls	r3, r3, #1
 800d906:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 800d908:	4b87      	ldr	r3, [pc, #540]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d90a:	4a86      	ldr	r2, [pc, #536]	@ (800db24 <LoRaMacInitialization+0x6e8>)
 800d90c:	589b      	ldr	r3, [r3, r2]
 800d90e:	4a86      	ldr	r2, [pc, #536]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d910:	4984      	ldr	r1, [pc, #528]	@ (800db24 <LoRaMacInitialization+0x6e8>)
 800d912:	5852      	ldr	r2, [r2, r1]
 800d914:	6a19      	ldr	r1, [r3, #32]
 800d916:	238a      	movs	r3, #138	@ 0x8a
 800d918:	005b      	lsls	r3, r3, #1
 800d91a:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 800d91c:	4b82      	ldr	r3, [pc, #520]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d91e:	4a81      	ldr	r2, [pc, #516]	@ (800db24 <LoRaMacInitialization+0x6e8>)
 800d920:	589b      	ldr	r3, [r3, r2]
 800d922:	4a81      	ldr	r2, [pc, #516]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d924:	497f      	ldr	r1, [pc, #508]	@ (800db24 <LoRaMacInitialization+0x6e8>)
 800d926:	5852      	ldr	r2, [r2, r1]
 800d928:	2124      	movs	r1, #36	@ 0x24
 800d92a:	5c59      	ldrb	r1, [r3, r1]
 800d92c:	238c      	movs	r3, #140	@ 0x8c
 800d92e:	005b      	lsls	r3, r3, #1
 800d930:	54d1      	strb	r1, [r2, r3]

    ResetMacParameters( );
 800d932:	f7fe fec7 	bl	800c6c4 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 800d936:	4b7c      	ldr	r3, [pc, #496]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d938:	4a7a      	ldr	r2, [pc, #488]	@ (800db24 <LoRaMacInitialization+0x6e8>)
 800d93a:	589b      	ldr	r3, [r3, r2]
 800d93c:	22f1      	movs	r2, #241	@ 0xf1
 800d93e:	2101      	movs	r1, #1
 800d940:	5499      	strb	r1, [r3, r2]

    MacCtx.MacPrimitives = primitives;
 800d942:	4a79      	ldr	r2, [pc, #484]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d944:	23d1      	movs	r3, #209	@ 0xd1
 800d946:	009b      	lsls	r3, r3, #2
 800d948:	68f9      	ldr	r1, [r7, #12]
 800d94a:	50d1      	str	r1, [r2, r3]
    MacCtx.MacCallbacks = callbacks;
 800d94c:	4a76      	ldr	r2, [pc, #472]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d94e:	23d2      	movs	r3, #210	@ 0xd2
 800d950:	009b      	lsls	r3, r3, #2
 800d952:	68b9      	ldr	r1, [r7, #8]
 800d954:	50d1      	str	r1, [r2, r3]
    MacCtx.MacFlags.Value = 0;
 800d956:	4b74      	ldr	r3, [pc, #464]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d958:	4a74      	ldr	r2, [pc, #464]	@ (800db2c <LoRaMacInitialization+0x6f0>)
 800d95a:	2100      	movs	r1, #0
 800d95c:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 800d95e:	4a72      	ldr	r2, [pc, #456]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d960:	23d0      	movs	r3, #208	@ 0xd0
 800d962:	009b      	lsls	r3, r3, #2
 800d964:	2101      	movs	r1, #1
 800d966:	50d1      	str	r1, [r2, r3]

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 800d968:	4b6f      	ldr	r3, [pc, #444]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d96a:	4a6e      	ldr	r2, [pc, #440]	@ (800db24 <LoRaMacInitialization+0x6e8>)
 800d96c:	589a      	ldr	r2, [r3, r2]
 800d96e:	23e2      	movs	r3, #226	@ 0xe2
 800d970:	005b      	lsls	r3, r3, #1
 800d972:	2100      	movs	r1, #0
 800d974:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 800d976:	4b6c      	ldr	r3, [pc, #432]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d978:	4a6a      	ldr	r2, [pc, #424]	@ (800db24 <LoRaMacInitialization+0x6e8>)
 800d97a:	589a      	ldr	r2, [r3, r2]
 800d97c:	23e4      	movs	r3, #228	@ 0xe4
 800d97e:	005b      	lsls	r3, r3, #1
 800d980:	2100      	movs	r1, #0
 800d982:	50d1      	str	r1, [r2, r3]

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800d984:	4a6a      	ldr	r2, [pc, #424]	@ (800db30 <LoRaMacInitialization+0x6f4>)
 800d986:	4b6b      	ldr	r3, [pc, #428]	@ (800db34 <LoRaMacInitialization+0x6f8>)
 800d988:	0011      	movs	r1, r2
 800d98a:	0018      	movs	r0, r3
 800d98c:	f007 fa79 	bl	8014e82 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800d990:	4a69      	ldr	r2, [pc, #420]	@ (800db38 <LoRaMacInitialization+0x6fc>)
 800d992:	4b6a      	ldr	r3, [pc, #424]	@ (800db3c <LoRaMacInitialization+0x700>)
 800d994:	0011      	movs	r1, r2
 800d996:	0018      	movs	r0, r3
 800d998:	f007 fa73 	bl	8014e82 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800d99c:	4a68      	ldr	r2, [pc, #416]	@ (800db40 <LoRaMacInitialization+0x704>)
 800d99e:	4b69      	ldr	r3, [pc, #420]	@ (800db44 <LoRaMacInitialization+0x708>)
 800d9a0:	0011      	movs	r1, r2
 800d9a2:	0018      	movs	r0, r3
 800d9a4:	f007 fa6d 	bl	8014e82 <TimerInit>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800d9a8:	4a67      	ldr	r2, [pc, #412]	@ (800db48 <LoRaMacInitialization+0x70c>)
 800d9aa:	4b68      	ldr	r3, [pc, #416]	@ (800db4c <LoRaMacInitialization+0x710>)
 800d9ac:	0011      	movs	r1, r2
 800d9ae:	0018      	movs	r0, r3
 800d9b0:	f007 fa67 	bl	8014e82 <TimerInit>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = TimerGetCurrentTime( );
 800d9b4:	4b5c      	ldr	r3, [pc, #368]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d9b6:	4a5b      	ldr	r2, [pc, #364]	@ (800db24 <LoRaMacInitialization+0x6e8>)
 800d9b8:	589c      	ldr	r4, [r3, r2]
 800d9ba:	f007 fc02 	bl	80151c2 <TimerGetCurrentTime>
 800d9be:	0002      	movs	r2, r0
 800d9c0:	23e6      	movs	r3, #230	@ 0xe6
 800d9c2:	005b      	lsls	r3, r3, #1
 800d9c4:	50e2      	str	r2, [r4, r3]

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800d9c6:	4a58      	ldr	r2, [pc, #352]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d9c8:	23d3      	movs	r3, #211	@ 0xd3
 800d9ca:	009b      	lsls	r3, r3, #2
 800d9cc:	4960      	ldr	r1, [pc, #384]	@ (800db50 <LoRaMacInitialization+0x714>)
 800d9ce:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800d9d0:	4a55      	ldr	r2, [pc, #340]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d9d2:	23d5      	movs	r3, #213	@ 0xd5
 800d9d4:	009b      	lsls	r3, r3, #2
 800d9d6:	495f      	ldr	r1, [pc, #380]	@ (800db54 <LoRaMacInitialization+0x718>)
 800d9d8:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800d9da:	4a53      	ldr	r2, [pc, #332]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d9dc:	23d7      	movs	r3, #215	@ 0xd7
 800d9de:	009b      	lsls	r3, r3, #2
 800d9e0:	495d      	ldr	r1, [pc, #372]	@ (800db58 <LoRaMacInitialization+0x71c>)
 800d9e2:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800d9e4:	4a50      	ldr	r2, [pc, #320]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d9e6:	23d4      	movs	r3, #212	@ 0xd4
 800d9e8:	009b      	lsls	r3, r3, #2
 800d9ea:	495c      	ldr	r1, [pc, #368]	@ (800db5c <LoRaMacInitialization+0x720>)
 800d9ec:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800d9ee:	4a4e      	ldr	r2, [pc, #312]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800d9f0:	23d6      	movs	r3, #214	@ 0xd6
 800d9f2:	009b      	lsls	r3, r3, #2
 800d9f4:	495a      	ldr	r1, [pc, #360]	@ (800db60 <LoRaMacInitialization+0x724>)
 800d9f6:	50d1      	str	r1, [r2, r3]
    Radio.Init( &MacCtx.RadioEvents );
 800d9f8:	4b5a      	ldr	r3, [pc, #360]	@ (800db64 <LoRaMacInitialization+0x728>)
 800d9fa:	689b      	ldr	r3, [r3, #8]
 800d9fc:	4a5a      	ldr	r2, [pc, #360]	@ (800db68 <LoRaMacInitialization+0x72c>)
 800d9fe:	0010      	movs	r0, r2
 800da00:	4798      	blx	r3

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_INIT;
 800da02:	2114      	movs	r1, #20
 800da04:	187b      	adds	r3, r7, r1
 800da06:	2200      	movs	r2, #0
 800da08:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 800da0a:	187b      	adds	r3, r7, r1
 800da0c:	2200      	movs	r2, #0
 800da0e:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800da10:	4b45      	ldr	r3, [pc, #276]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800da12:	4a44      	ldr	r2, [pc, #272]	@ (800db24 <LoRaMacInitialization+0x6e8>)
 800da14:	589b      	ldr	r3, [r3, r2]
 800da16:	781b      	ldrb	r3, [r3, #0]
 800da18:	187a      	adds	r2, r7, r1
 800da1a:	0011      	movs	r1, r2
 800da1c:	0018      	movs	r0, r3
 800da1e:	f003 fe23 	bl	8011668 <RegionInitDefaults>

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 800da22:	4b52      	ldr	r3, [pc, #328]	@ (800db6c <LoRaMacInitialization+0x730>)
 800da24:	0018      	movs	r0, r3
 800da26:	f7fb fa8d 	bl	8008f44 <SecureElementInit>
 800da2a:	1e03      	subs	r3, r0, #0
 800da2c:	d001      	beq.n	800da32 <LoRaMacInitialization+0x5f6>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800da2e:	2311      	movs	r3, #17
 800da30:	e073      	b.n	800db1a <LoRaMacInitialization+0x6de>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 800da32:	4b4f      	ldr	r3, [pc, #316]	@ (800db70 <LoRaMacInitialization+0x734>)
 800da34:	0018      	movs	r0, r3
 800da36:	f002 fcbf 	bl	80103b8 <LoRaMacCryptoInit>
 800da3a:	1e03      	subs	r3, r0, #0
 800da3c:	d001      	beq.n	800da42 <LoRaMacInitialization+0x606>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800da3e:	2311      	movs	r3, #17
 800da40:	e06b      	b.n	800db1a <LoRaMacInitialization+0x6de>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 800da42:	4b4c      	ldr	r3, [pc, #304]	@ (800db74 <LoRaMacInitialization+0x738>)
 800da44:	0018      	movs	r0, r3
 800da46:	f001 fd53 	bl	800f4f0 <LoRaMacCommandsInit>
 800da4a:	1e03      	subs	r3, r0, #0
 800da4c:	d001      	beq.n	800da52 <LoRaMacInitialization+0x616>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800da4e:	2313      	movs	r3, #19
 800da50:	e063      	b.n	800db1a <LoRaMacInitialization+0x6de>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800da52:	4b35      	ldr	r3, [pc, #212]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800da54:	4a33      	ldr	r2, [pc, #204]	@ (800db24 <LoRaMacInitialization+0x6e8>)
 800da56:	589b      	ldr	r3, [r3, r2]
 800da58:	3350      	adds	r3, #80	@ 0x50
 800da5a:	0018      	movs	r0, r3
 800da5c:	f002 fdba 	bl	80105d4 <LoRaMacCryptoSetMulticastReference>
 800da60:	1e03      	subs	r3, r0, #0
 800da62:	d001      	beq.n	800da68 <LoRaMacInitialization+0x62c>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800da64:	2311      	movs	r3, #17
 800da66:	e058      	b.n	800db1a <LoRaMacInitialization+0x6de>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800da68:	4b3e      	ldr	r3, [pc, #248]	@ (800db64 <LoRaMacInitialization+0x728>)
 800da6a:	69db      	ldr	r3, [r3, #28]
 800da6c:	4798      	blx	r3
 800da6e:	0003      	movs	r3, r0
 800da70:	0018      	movs	r0, r3
 800da72:	f007 fd5d 	bl	8015530 <srand1>

    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800da76:	4b3b      	ldr	r3, [pc, #236]	@ (800db64 <LoRaMacInitialization+0x728>)
 800da78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800da7a:	4a2b      	ldr	r2, [pc, #172]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800da7c:	4929      	ldr	r1, [pc, #164]	@ (800db24 <LoRaMacInitialization+0x6e8>)
 800da7e:	5852      	ldr	r2, [r2, r1]
 800da80:	21f1      	movs	r1, #241	@ 0xf1
 800da82:	5c52      	ldrb	r2, [r2, r1]
 800da84:	0010      	movs	r0, r2
 800da86:	4798      	blx	r3
    Radio.Sleep( );
 800da88:	4b36      	ldr	r3, [pc, #216]	@ (800db64 <LoRaMacInitialization+0x728>)
 800da8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da8c:	4798      	blx	r3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800da8e:	2140      	movs	r1, #64	@ 0x40
 800da90:	187b      	adds	r3, r7, r1
 800da92:	2200      	movs	r2, #0
 800da94:	601a      	str	r2, [r3, #0]
    classBCallbacks.MacProcessNotify = NULL;
 800da96:	187b      	adds	r3, r7, r1
 800da98:	2200      	movs	r2, #0
 800da9a:	605a      	str	r2, [r3, #4]
    if( callbacks != NULL )
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d007      	beq.n	800dab2 <LoRaMacInitialization+0x676>
    {
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	685a      	ldr	r2, [r3, #4]
 800daa6:	187b      	adds	r3, r7, r1
 800daa8:	601a      	str	r2, [r3, #0]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	68da      	ldr	r2, [r3, #12]
 800daae:	187b      	adds	r3, r7, r1
 800dab0:	605a      	str	r2, [r3, #4]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800dab2:	2120      	movs	r1, #32
 800dab4:	187b      	adds	r3, r7, r1
 800dab6:	4a30      	ldr	r2, [pc, #192]	@ (800db78 <LoRaMacInitialization+0x73c>)
 800dab8:	601a      	str	r2, [r3, #0]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800daba:	187b      	adds	r3, r7, r1
 800dabc:	4a2f      	ldr	r2, [pc, #188]	@ (800db7c <LoRaMacInitialization+0x740>)
 800dabe:	605a      	str	r2, [r3, #4]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800dac0:	187b      	adds	r3, r7, r1
 800dac2:	4a2f      	ldr	r2, [pc, #188]	@ (800db80 <LoRaMacInitialization+0x744>)
 800dac4:	609a      	str	r2, [r3, #8]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800dac6:	187b      	adds	r3, r7, r1
 800dac8:	4a2e      	ldr	r2, [pc, #184]	@ (800db84 <LoRaMacInitialization+0x748>)
 800daca:	60da      	str	r2, [r3, #12]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 800dacc:	4b16      	ldr	r3, [pc, #88]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800dace:	4a15      	ldr	r2, [pc, #84]	@ (800db24 <LoRaMacInitialization+0x6e8>)
 800dad0:	589b      	ldr	r3, [r3, r2]
 800dad2:	334c      	adds	r3, #76	@ 0x4c
 800dad4:	001a      	movs	r2, r3
 800dad6:	187b      	adds	r3, r7, r1
 800dad8:	611a      	str	r2, [r3, #16]
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 800dada:	4b13      	ldr	r3, [pc, #76]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800dadc:	4a11      	ldr	r2, [pc, #68]	@ (800db24 <LoRaMacInitialization+0x6e8>)
 800dade:	589b      	ldr	r3, [r3, r2]
 800dae0:	001a      	movs	r2, r3
 800dae2:	187b      	adds	r3, r7, r1
 800dae4:	615a      	str	r2, [r3, #20]
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 800dae6:	4b10      	ldr	r3, [pc, #64]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800dae8:	4a0e      	ldr	r2, [pc, #56]	@ (800db24 <LoRaMacInitialization+0x6e8>)
 800daea:	589b      	ldr	r3, [r3, r2]
 800daec:	33f8      	adds	r3, #248	@ 0xf8
 800daee:	001a      	movs	r2, r3
 800daf0:	187b      	adds	r3, r7, r1
 800daf2:	619a      	str	r2, [r3, #24]
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 800daf4:	4b0c      	ldr	r3, [pc, #48]	@ (800db28 <LoRaMacInitialization+0x6ec>)
 800daf6:	4a0b      	ldr	r2, [pc, #44]	@ (800db24 <LoRaMacInitialization+0x6e8>)
 800daf8:	589b      	ldr	r3, [r3, r2]
 800dafa:	3350      	adds	r3, #80	@ 0x50
 800dafc:	001a      	movs	r2, r3
 800dafe:	0008      	movs	r0, r1
 800db00:	187b      	adds	r3, r7, r1
 800db02:	61da      	str	r2, [r3, #28]

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 800db04:	4a20      	ldr	r2, [pc, #128]	@ (800db88 <LoRaMacInitialization+0x74c>)
 800db06:	2340      	movs	r3, #64	@ 0x40
 800db08:	18f9      	adds	r1, r7, r3
 800db0a:	183b      	adds	r3, r7, r0
 800db0c:	0018      	movs	r0, r3
 800db0e:	f001 face 	bl	800f0ae <LoRaMacClassBInit>

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800db12:	2001      	movs	r0, #1
 800db14:	f7fc fec2 	bl	800a89c <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800db18:	2300      	movs	r3, #0
}
 800db1a:	0018      	movs	r0, r3
 800db1c:	46bd      	mov	sp, r7
 800db1e:	b014      	add	sp, #80	@ 0x50
 800db20:	bdb0      	pop	{r4, r5, r7, pc}
 800db22:	46c0      	nop			@ (mov r8, r8)
 800db24:	00000484 	.word	0x00000484
 800db28:	20000940 	.word	0x20000940
 800db2c:	00000481 	.word	0x00000481
 800db30:	0800ad2d 	.word	0x0800ad2d
 800db34:	20000ca8 	.word	0x20000ca8
 800db38:	0800adb9 	.word	0x0800adb9
 800db3c:	20000cc0 	.word	0x20000cc0
 800db40:	0800ae51 	.word	0x0800ae51
 800db44:	20000cd8 	.word	0x20000cd8
 800db48:	0800aef5 	.word	0x0800aef5
 800db4c:	20000d38 	.word	0x20000d38
 800db50:	0800973d 	.word	0x0800973d
 800db54:	080097d9 	.word	0x080097d9
 800db58:	0800990d 	.word	0x0800990d
 800db5c:	08009899 	.word	0x08009899
 800db60:	08009951 	.word	0x08009951
 800db64:	0801ac88 	.word	0x0801ac88
 800db68:	20000c8c 	.word	0x20000c8c
 800db6c:	0800d3c5 	.word	0x0800d3c5
 800db70:	0800d3b5 	.word	0x0800d3b5
 800db74:	0800d3d5 	.word	0x0800d3d5
 800db78:	20000da4 	.word	0x20000da4
 800db7c:	20000d5c 	.word	0x20000d5c
 800db80:	20000d90 	.word	0x20000d90
 800db84:	20000dc1 	.word	0x20000dc1
 800db88:	0800d3e5 	.word	0x0800d3e5

0800db8c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 800db90:	4a04      	ldr	r2, [pc, #16]	@ (800dba4 <LoRaMacStart+0x18>)
 800db92:	23d0      	movs	r3, #208	@ 0xd0
 800db94:	009b      	lsls	r3, r3, #2
 800db96:	2100      	movs	r1, #0
 800db98:	50d1      	str	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 800db9a:	2300      	movs	r3, #0
}
 800db9c:	0018      	movs	r0, r3
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	46c0      	nop			@ (mov r8, r8)
 800dba4:	20000940 	.word	0x20000940

0800dba8 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800dba8:	b590      	push	{r4, r7, lr}
 800dbaa:	b08b      	sub	sp, #44	@ 0x2c
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	0002      	movs	r2, r0
 800dbb0:	6039      	str	r1, [r7, #0]
 800dbb2:	1dfb      	adds	r3, r7, #7
 800dbb4:	701a      	strb	r2, [r3, #0]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800dbb6:	4b50      	ldr	r3, [pc, #320]	@ (800dcf8 <LoRaMacQueryTxPossible+0x150>)
 800dbb8:	4a50      	ldr	r2, [pc, #320]	@ (800dcfc <LoRaMacQueryTxPossible+0x154>)
 800dbba:	589b      	ldr	r3, [r3, r2]
 800dbbc:	22f4      	movs	r2, #244	@ 0xf4
 800dbbe:	589b      	ldr	r3, [r3, r2]
 800dbc0:	613b      	str	r3, [r7, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800dbc2:	4b4d      	ldr	r3, [pc, #308]	@ (800dcf8 <LoRaMacQueryTxPossible+0x150>)
 800dbc4:	4a4d      	ldr	r2, [pc, #308]	@ (800dcfc <LoRaMacQueryTxPossible+0x154>)
 800dbc6:	589b      	ldr	r3, [r3, r2]
 800dbc8:	2205      	movs	r2, #5
 800dbca:	569a      	ldrsb	r2, [r3, r2]
 800dbcc:	230f      	movs	r3, #15
 800dbce:	18fb      	adds	r3, r7, r3
 800dbd0:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800dbd2:	4b49      	ldr	r3, [pc, #292]	@ (800dcf8 <LoRaMacQueryTxPossible+0x150>)
 800dbd4:	4a49      	ldr	r2, [pc, #292]	@ (800dcfc <LoRaMacQueryTxPossible+0x154>)
 800dbd6:	589b      	ldr	r3, [r3, r2]
 800dbd8:	2204      	movs	r2, #4
 800dbda:	569a      	ldrsb	r2, [r3, r2]
 800dbdc:	230e      	movs	r3, #14
 800dbde:	18fb      	adds	r3, r7, r3
 800dbe0:	701a      	strb	r2, [r3, #0]
    size_t macCmdsSize = 0;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d101      	bne.n	800dbf0 <LoRaMacQueryTxPossible+0x48>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dbec:	2303      	movs	r3, #3
 800dbee:	e07e      	b.n	800dcee <LoRaMacQueryTxPossible+0x146>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 800dbf0:	4b41      	ldr	r3, [pc, #260]	@ (800dcf8 <LoRaMacQueryTxPossible+0x150>)
 800dbf2:	4a42      	ldr	r2, [pc, #264]	@ (800dcfc <LoRaMacQueryTxPossible+0x154>)
 800dbf4:	5899      	ldr	r1, [r3, r2]
 800dbf6:	2014      	movs	r0, #20
 800dbf8:	183b      	adds	r3, r7, r0
 800dbfa:	22e8      	movs	r2, #232	@ 0xe8
 800dbfc:	0052      	lsls	r2, r2, #1
 800dbfe:	588a      	ldr	r2, [r1, r2]
 800dc00:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = false;
 800dc02:	183b      	adds	r3, r7, r0
 800dc04:	2200      	movs	r2, #0
 800dc06:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800dc08:	4b3b      	ldr	r3, [pc, #236]	@ (800dcf8 <LoRaMacQueryTxPossible+0x150>)
 800dc0a:	4a3c      	ldr	r2, [pc, #240]	@ (800dcfc <LoRaMacQueryTxPossible+0x154>)
 800dc0c:	589b      	ldr	r3, [r3, r2]
 800dc0e:	22f2      	movs	r2, #242	@ 0xf2
 800dc10:	5c9a      	ldrb	r2, [r3, r2]
 800dc12:	183b      	adds	r3, r7, r0
 800dc14:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800dc16:	4b38      	ldr	r3, [pc, #224]	@ (800dcf8 <LoRaMacQueryTxPossible+0x150>)
 800dc18:	4a38      	ldr	r2, [pc, #224]	@ (800dcfc <LoRaMacQueryTxPossible+0x154>)
 800dc1a:	589b      	ldr	r3, [r3, r2]
 800dc1c:	22f4      	movs	r2, #244	@ 0xf4
 800dc1e:	589a      	ldr	r2, [r3, r2]
 800dc20:	183b      	adds	r3, r7, r0
 800dc22:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800dc24:	4a34      	ldr	r2, [pc, #208]	@ (800dcf8 <LoRaMacQueryTxPossible+0x150>)
 800dc26:	23fd      	movs	r3, #253	@ 0xfd
 800dc28:	009b      	lsls	r3, r3, #2
 800dc2a:	5ad2      	ldrh	r2, [r2, r3]
 800dc2c:	183b      	adds	r3, r7, r0
 800dc2e:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800dc30:	4b31      	ldr	r3, [pc, #196]	@ (800dcf8 <LoRaMacQueryTxPossible+0x150>)
 800dc32:	4a33      	ldr	r2, [pc, #204]	@ (800dd00 <LoRaMacQueryTxPossible+0x158>)
 800dc34:	5a9a      	ldrh	r2, [r3, r2]
 800dc36:	183b      	adds	r3, r7, r0
 800dc38:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800dc3a:	4b2f      	ldr	r3, [pc, #188]	@ (800dcf8 <LoRaMacQueryTxPossible+0x150>)
 800dc3c:	4a2f      	ldr	r2, [pc, #188]	@ (800dcfc <LoRaMacQueryTxPossible+0x154>)
 800dc3e:	589b      	ldr	r3, [r3, r2]
 800dc40:	22f9      	movs	r2, #249	@ 0xf9
 800dc42:	569a      	ldrsb	r2, [r3, r2]
 800dc44:	183b      	adds	r3, r7, r0
 800dc46:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800dc48:	4b2b      	ldr	r3, [pc, #172]	@ (800dcf8 <LoRaMacQueryTxPossible+0x150>)
 800dc4a:	4a2c      	ldr	r2, [pc, #176]	@ (800dcfc <LoRaMacQueryTxPossible+0x154>)
 800dc4c:	589b      	ldr	r3, [r3, r2]
 800dc4e:	22f8      	movs	r2, #248	@ 0xf8
 800dc50:	569a      	ldrsb	r2, [r3, r2]
 800dc52:	183b      	adds	r3, r7, r0
 800dc54:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800dc56:	4b28      	ldr	r3, [pc, #160]	@ (800dcf8 <LoRaMacQueryTxPossible+0x150>)
 800dc58:	4a28      	ldr	r2, [pc, #160]	@ (800dcfc <LoRaMacQueryTxPossible+0x154>)
 800dc5a:	589a      	ldr	r2, [r3, r2]
 800dc5c:	2396      	movs	r3, #150	@ 0x96
 800dc5e:	005b      	lsls	r3, r3, #1
 800dc60:	5cd2      	ldrb	r2, [r2, r3]
 800dc62:	183b      	adds	r3, r7, r0
 800dc64:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 800dc66:	4b24      	ldr	r3, [pc, #144]	@ (800dcf8 <LoRaMacQueryTxPossible+0x150>)
 800dc68:	4a24      	ldr	r2, [pc, #144]	@ (800dcfc <LoRaMacQueryTxPossible+0x154>)
 800dc6a:	589b      	ldr	r3, [r3, r2]
 800dc6c:	781a      	ldrb	r2, [r3, #0]
 800dc6e:	183b      	adds	r3, r7, r0
 800dc70:	74da      	strb	r2, [r3, #19]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800dc72:	2310      	movs	r3, #16
 800dc74:	18fb      	adds	r3, r7, r3
 800dc76:	220e      	movs	r2, #14
 800dc78:	18ba      	adds	r2, r7, r2
 800dc7a:	240f      	movs	r4, #15
 800dc7c:	1939      	adds	r1, r7, r4
 800dc7e:	1838      	adds	r0, r7, r0
 800dc80:	f001 f9fd 	bl	800f07e <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800dc84:	193b      	adds	r3, r7, r4
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	b25b      	sxtb	r3, r3
 800dc8a:	0018      	movs	r0, r3
 800dc8c:	f7fd fb20 	bl	800b2d0 <GetMaxAppPayloadWithoutFOptsLength>
 800dc90:	0003      	movs	r3, r0
 800dc92:	001a      	movs	r2, r3
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800dc98:	2308      	movs	r3, #8
 800dc9a:	18fb      	adds	r3, r7, r3
 800dc9c:	0018      	movs	r0, r3
 800dc9e:	f001 fd3b 	bl	800f718 <LoRaMacCommandsGetSizeSerializedCmds>
 800dca2:	1e03      	subs	r3, r0, #0
 800dca4:	d001      	beq.n	800dcaa <LoRaMacQueryTxPossible+0x102>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800dca6:	2313      	movs	r3, #19
 800dca8:	e021      	b.n	800dcee <LoRaMacQueryTxPossible+0x146>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	2b0f      	cmp	r3, #15
 800dcae:	d81a      	bhi.n	800dce6 <LoRaMacQueryTxPossible+0x13e>
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	785b      	ldrb	r3, [r3, #1]
 800dcb4:	001a      	movs	r2, r3
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d314      	bcc.n	800dce6 <LoRaMacQueryTxPossible+0x13e>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	785a      	ldrb	r2, [r3, #1]
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	b2db      	uxtb	r3, r3
 800dcc4:	1ad3      	subs	r3, r2, r3
 800dcc6:	b2da      	uxtb	r2, r3
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	785b      	ldrb	r3, [r3, #1]
 800dcd0:	0019      	movs	r1, r3
 800dcd2:	1dfb      	adds	r3, r7, #7
 800dcd4:	781a      	ldrb	r2, [r3, #0]
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	18d3      	adds	r3, r2, r3
 800dcda:	4299      	cmp	r1, r3
 800dcdc:	d301      	bcc.n	800dce2 <LoRaMacQueryTxPossible+0x13a>
        {
            return LORAMAC_STATUS_OK;
 800dcde:	2300      	movs	r3, #0
 800dce0:	e005      	b.n	800dcee <LoRaMacQueryTxPossible+0x146>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800dce2:	2308      	movs	r3, #8
 800dce4:	e003      	b.n	800dcee <LoRaMacQueryTxPossible+0x146>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	2200      	movs	r2, #0
 800dcea:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800dcec:	2308      	movs	r3, #8
    }
}
 800dcee:	0018      	movs	r0, r3
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	b00b      	add	sp, #44	@ 0x2c
 800dcf4:	bd90      	pop	{r4, r7, pc}
 800dcf6:	46c0      	nop			@ (mov r8, r8)
 800dcf8:	20000940 	.word	0x20000940
 800dcfc:	00000484 	.word	0x00000484
 800dd00:	000003f6 	.word	0x000003f6

0800dd04 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800dd04:	b590      	push	{r4, r7, lr}
 800dd06:	b087      	sub	sp, #28
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dd0c:	2317      	movs	r3, #23
 800dd0e:	18fb      	adds	r3, r7, r3
 800dd10:	2200      	movs	r2, #0
 800dd12:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d101      	bne.n	800dd1e <LoRaMacMibGetRequestConfirm+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dd1a:	2303      	movs	r3, #3
 800dd1c:	e143      	b.n	800dfa6 <LoRaMacMibGetRequestConfirm+0x2a2>
    }

    switch( mibGet->Type )
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	2b34      	cmp	r3, #52	@ 0x34
 800dd24:	d900      	bls.n	800dd28 <LoRaMacMibGetRequestConfirm+0x24>
 800dd26:	e132      	b.n	800df8e <LoRaMacMibGetRequestConfirm+0x28a>
 800dd28:	009a      	lsls	r2, r3, #2
 800dd2a:	4ba1      	ldr	r3, [pc, #644]	@ (800dfb0 <LoRaMacMibGetRequestConfirm+0x2ac>)
 800dd2c:	18d3      	adds	r3, r2, r3
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 800dd32:	4ba0      	ldr	r3, [pc, #640]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800dd34:	4aa0      	ldr	r2, [pc, #640]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800dd36:	589b      	ldr	r3, [r3, r2]
 800dd38:	22f0      	movs	r2, #240	@ 0xf0
 800dd3a:	5c9a      	ldrb	r2, [r3, r2]
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	711a      	strb	r2, [r3, #4]
            break;
 800dd40:	e12e      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 800dd42:	4b9c      	ldr	r3, [pc, #624]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800dd44:	4a9c      	ldr	r2, [pc, #624]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800dd46:	589a      	ldr	r2, [r3, r2]
 800dd48:	23ea      	movs	r3, #234	@ 0xea
 800dd4a:	005b      	lsls	r3, r3, #1
 800dd4c:	5cd2      	ldrb	r2, [r2, r3]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	711a      	strb	r2, [r3, #4]
            break;
 800dd52:	e125      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800dd54:	f7fb fcc6 	bl	80096e4 <SecureElementGetDevEui>
 800dd58:	0002      	movs	r2, r0
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	605a      	str	r2, [r3, #4]
            break;
 800dd5e:	e11f      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800dd60:	f7fb fce4 	bl	800972c <SecureElementGetJoinEui>
 800dd64:	0002      	movs	r2, r0
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	605a      	str	r2, [r3, #4]
            break;
 800dd6a:	e119      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 800dd6c:	4b91      	ldr	r3, [pc, #580]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800dd6e:	4a92      	ldr	r2, [pc, #584]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800dd70:	589b      	ldr	r3, [r3, r2]
 800dd72:	22f2      	movs	r2, #242	@ 0xf2
 800dd74:	5c9a      	ldrb	r2, [r3, r2]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	711a      	strb	r2, [r3, #4]
            break;
 800dd7a:	e111      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 800dd7c:	4b8d      	ldr	r3, [pc, #564]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800dd7e:	4a8e      	ldr	r2, [pc, #568]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800dd80:	589b      	ldr	r3, [r3, r2]
 800dd82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	605a      	str	r2, [r3, #4]
            break;
 800dd88:	e10a      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 800dd8a:	4b8a      	ldr	r3, [pc, #552]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800dd8c:	4a8a      	ldr	r2, [pc, #552]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800dd8e:	589b      	ldr	r3, [r3, r2]
 800dd90:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	605a      	str	r2, [r3, #4]
            break;
 800dd96:	e103      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 800dd98:	4b86      	ldr	r3, [pc, #536]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800dd9a:	4a87      	ldr	r2, [pc, #540]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800dd9c:	589b      	ldr	r3, [r3, r2]
 800dd9e:	22f1      	movs	r2, #241	@ 0xf1
 800dda0:	5c9a      	ldrb	r2, [r3, r2]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	711a      	strb	r2, [r3, #4]
            break;
 800dda6:	e0fb      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800dda8:	4b82      	ldr	r3, [pc, #520]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800ddaa:	4a83      	ldr	r2, [pc, #524]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800ddac:	589a      	ldr	r2, [r3, r2]
 800ddae:	2340      	movs	r3, #64	@ 0x40
 800ddb0:	33ff      	adds	r3, #255	@ 0xff
 800ddb2:	5cd2      	ldrb	r2, [r2, r3]
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	711a      	strb	r2, [r3, #4]
            break;
 800ddb8:	e0f2      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800ddba:	2110      	movs	r1, #16
 800ddbc:	187b      	adds	r3, r7, r1
 800ddbe:	221d      	movs	r2, #29
 800ddc0:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ddc2:	4b7c      	ldr	r3, [pc, #496]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800ddc4:	4a7c      	ldr	r2, [pc, #496]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800ddc6:	589b      	ldr	r3, [r3, r2]
 800ddc8:	781b      	ldrb	r3, [r3, #0]
 800ddca:	187a      	adds	r2, r7, r1
 800ddcc:	0011      	movs	r1, r2
 800ddce:	0018      	movs	r0, r3
 800ddd0:	f003 fc0f 	bl	80115f2 <RegionGetPhyParam>
 800ddd4:	0003      	movs	r3, r0
 800ddd6:	001a      	movs	r2, r3
 800ddd8:	210c      	movs	r1, #12
 800ddda:	187b      	adds	r3, r7, r1
 800dddc:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelList = phyParam.Channels;
 800ddde:	187b      	adds	r3, r7, r1
 800dde0:	681a      	ldr	r2, [r3, #0]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	605a      	str	r2, [r3, #4]
            break;
 800dde6:	e0db      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 800dde8:	4b72      	ldr	r3, [pc, #456]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800ddea:	4a73      	ldr	r2, [pc, #460]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800ddec:	5899      	ldr	r1, [r3, r2]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	228e      	movs	r2, #142	@ 0x8e
 800ddf2:	0052      	lsls	r2, r2, #1
 800ddf4:	3304      	adds	r3, #4
 800ddf6:	188a      	adds	r2, r1, r2
 800ddf8:	ca03      	ldmia	r2!, {r0, r1}
 800ddfa:	c303      	stmia	r3!, {r0, r1}
            break;
 800ddfc:	e0d0      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 800ddfe:	4b6d      	ldr	r3, [pc, #436]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800de00:	4a6d      	ldr	r2, [pc, #436]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800de02:	589a      	ldr	r2, [r3, r2]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	3304      	adds	r3, #4
 800de08:	3228      	adds	r2, #40	@ 0x28
 800de0a:	ca03      	ldmia	r2!, {r0, r1}
 800de0c:	c303      	stmia	r3!, {r0, r1}
            break;
 800de0e:	e0c7      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 800de10:	4b68      	ldr	r3, [pc, #416]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800de12:	4a69      	ldr	r2, [pc, #420]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800de14:	5899      	ldr	r1, [r3, r2]
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2292      	movs	r2, #146	@ 0x92
 800de1a:	0052      	lsls	r2, r2, #1
 800de1c:	3304      	adds	r3, #4
 800de1e:	188a      	adds	r2, r1, r2
 800de20:	ca03      	ldmia	r2!, {r0, r1}
 800de22:	c303      	stmia	r3!, {r0, r1}
            break;
 800de24:	e0bc      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 800de26:	4b63      	ldr	r3, [pc, #396]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800de28:	4a63      	ldr	r2, [pc, #396]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800de2a:	589a      	ldr	r2, [r3, r2]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	3304      	adds	r3, #4
 800de30:	3230      	adds	r2, #48	@ 0x30
 800de32:	ca03      	ldmia	r2!, {r0, r1}
 800de34:	c303      	stmia	r3!, {r0, r1}
            break;
 800de36:	e0b3      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800de38:	2110      	movs	r1, #16
 800de3a:	187b      	adds	r3, r7, r1
 800de3c:	221b      	movs	r2, #27
 800de3e:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800de40:	4b5c      	ldr	r3, [pc, #368]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800de42:	4a5d      	ldr	r2, [pc, #372]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800de44:	589b      	ldr	r3, [r3, r2]
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	187a      	adds	r2, r7, r1
 800de4a:	0011      	movs	r1, r2
 800de4c:	0018      	movs	r0, r3
 800de4e:	f003 fbd0 	bl	80115f2 <RegionGetPhyParam>
 800de52:	0003      	movs	r3, r0
 800de54:	001a      	movs	r2, r3
 800de56:	210c      	movs	r1, #12
 800de58:	187b      	adds	r3, r7, r1
 800de5a:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800de5c:	187b      	adds	r3, r7, r1
 800de5e:	681a      	ldr	r2, [r3, #0]
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	605a      	str	r2, [r3, #4]
            break;
 800de64:	e09c      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800de66:	2110      	movs	r1, #16
 800de68:	187b      	adds	r3, r7, r1
 800de6a:	221a      	movs	r2, #26
 800de6c:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800de6e:	4b51      	ldr	r3, [pc, #324]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800de70:	4a51      	ldr	r2, [pc, #324]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800de72:	589b      	ldr	r3, [r3, r2]
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	187a      	adds	r2, r7, r1
 800de78:	0011      	movs	r1, r2
 800de7a:	0018      	movs	r0, r3
 800de7c:	f003 fbb9 	bl	80115f2 <RegionGetPhyParam>
 800de80:	0003      	movs	r3, r0
 800de82:	001a      	movs	r2, r3
 800de84:	210c      	movs	r1, #12
 800de86:	187b      	adds	r3, r7, r1
 800de88:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800de8a:	187b      	adds	r3, r7, r1
 800de8c:	681a      	ldr	r2, [r3, #0]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	605a      	str	r2, [r3, #4]
            break;
 800de92:	e085      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800de94:	4b47      	ldr	r3, [pc, #284]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800de96:	4a48      	ldr	r2, [pc, #288]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800de98:	589a      	ldr	r2, [r3, r2]
 800de9a:	238c      	movs	r3, #140	@ 0x8c
 800de9c:	005b      	lsls	r3, r3, #1
 800de9e:	5cd2      	ldrb	r2, [r2, r3]
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	711a      	strb	r2, [r3, #4]
            break;
 800dea4:	e07c      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 800dea6:	4b43      	ldr	r3, [pc, #268]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800dea8:	4a43      	ldr	r2, [pc, #268]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800deaa:	589a      	ldr	r2, [r3, r2]
 800deac:	2382      	movs	r3, #130	@ 0x82
 800deae:	005b      	lsls	r3, r3, #1
 800deb0:	58d2      	ldr	r2, [r2, r3]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	605a      	str	r2, [r3, #4]
            break;
 800deb6:	e073      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 800deb8:	4b3e      	ldr	r3, [pc, #248]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800deba:	4a3f      	ldr	r2, [pc, #252]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800debc:	589a      	ldr	r2, [r3, r2]
 800debe:	2384      	movs	r3, #132	@ 0x84
 800dec0:	005b      	lsls	r3, r3, #1
 800dec2:	58d2      	ldr	r2, [r2, r3]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	605a      	str	r2, [r3, #4]
            break;
 800dec8:	e06a      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 800deca:	4b3a      	ldr	r3, [pc, #232]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800decc:	4a3a      	ldr	r2, [pc, #232]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800dece:	589a      	ldr	r2, [r3, r2]
 800ded0:	2386      	movs	r3, #134	@ 0x86
 800ded2:	005b      	lsls	r3, r3, #1
 800ded4:	58d2      	ldr	r2, [r2, r3]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	605a      	str	r2, [r3, #4]
            break;
 800deda:	e061      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 800dedc:	4b35      	ldr	r3, [pc, #212]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800dede:	4a36      	ldr	r2, [pc, #216]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800dee0:	589a      	ldr	r2, [r3, r2]
 800dee2:	2388      	movs	r3, #136	@ 0x88
 800dee4:	005b      	lsls	r3, r3, #1
 800dee6:	58d2      	ldr	r2, [r2, r3]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	605a      	str	r2, [r3, #4]
            break;
 800deec:	e058      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 800deee:	4b31      	ldr	r3, [pc, #196]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800def0:	4a31      	ldr	r2, [pc, #196]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800def2:	589a      	ldr	r2, [r3, r2]
 800def4:	238a      	movs	r3, #138	@ 0x8a
 800def6:	005b      	lsls	r3, r3, #1
 800def8:	58d2      	ldr	r2, [r2, r3]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	605a      	str	r2, [r3, #4]
            break;
 800defe:	e04f      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800df00:	4b2c      	ldr	r3, [pc, #176]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800df02:	4a2d      	ldr	r2, [pc, #180]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800df04:	589b      	ldr	r3, [r3, r2]
 800df06:	2205      	movs	r2, #5
 800df08:	569a      	ldrsb	r2, [r3, r2]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	711a      	strb	r2, [r3, #4]
            break;
 800df0e:	e047      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800df10:	4b28      	ldr	r3, [pc, #160]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800df12:	4a29      	ldr	r2, [pc, #164]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800df14:	589b      	ldr	r3, [r3, r2]
 800df16:	22f9      	movs	r2, #249	@ 0xf9
 800df18:	569a      	ldrsb	r2, [r3, r2]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	711a      	strb	r2, [r3, #4]
            break;
 800df1e:	e03f      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800df20:	4b24      	ldr	r3, [pc, #144]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800df22:	4a25      	ldr	r2, [pc, #148]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800df24:	589b      	ldr	r3, [r3, r2]
 800df26:	2204      	movs	r2, #4
 800df28:	569a      	ldrsb	r2, [r3, r2]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	711a      	strb	r2, [r3, #4]
            break;
 800df2e:	e037      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800df30:	4b20      	ldr	r3, [pc, #128]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800df32:	4a21      	ldr	r2, [pc, #132]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800df34:	589b      	ldr	r3, [r3, r2]
 800df36:	22f8      	movs	r2, #248	@ 0xf8
 800df38:	569a      	ldrsb	r2, [r3, r2]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	711a      	strb	r2, [r3, #4]
            break;
 800df3e:	e02f      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800df40:	4b1c      	ldr	r3, [pc, #112]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800df42:	4a1d      	ldr	r2, [pc, #116]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800df44:	589b      	ldr	r3, [r3, r2]
 800df46:	22fc      	movs	r2, #252	@ 0xfc
 800df48:	589a      	ldr	r2, [r3, r2]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	605a      	str	r2, [r3, #4]
            break;
 800df4e:	e027      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 800df50:	4b18      	ldr	r3, [pc, #96]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800df52:	4a19      	ldr	r2, [pc, #100]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800df54:	589a      	ldr	r2, [r3, r2]
 800df56:	2380      	movs	r3, #128	@ 0x80
 800df58:	005b      	lsls	r3, r3, #1
 800df5a:	5cd2      	ldrb	r2, [r2, r3]
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	711a      	strb	r2, [r3, #4]
            break;
 800df60:	e01e      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800df62:	4b14      	ldr	r3, [pc, #80]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800df64:	4a14      	ldr	r2, [pc, #80]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800df66:	589a      	ldr	r2, [r3, r2]
 800df68:	239a      	movs	r3, #154	@ 0x9a
 800df6a:	005b      	lsls	r3, r3, #1
 800df6c:	58d2      	ldr	r2, [r2, r3]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	605a      	str	r2, [r3, #4]
            break;
 800df72:	e015      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetCtxs( );
 800df74:	f7fe ffa4 	bl	800cec0 <GetCtxs>
 800df78:	0002      	movs	r2, r0
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	605a      	str	r2, [r3, #4]
            break;
 800df7e:	e00f      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800df80:	4b0c      	ldr	r3, [pc, #48]	@ (800dfb4 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800df82:	4a0d      	ldr	r2, [pc, #52]	@ (800dfb8 <LoRaMacMibGetRequestConfirm+0x2b4>)
 800df84:	589b      	ldr	r3, [r3, r2]
 800df86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	605a      	str	r2, [r3, #4]
            break;
 800df8c:	e008      	b.n	800dfa0 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800df8e:	2317      	movs	r3, #23
 800df90:	18fc      	adds	r4, r7, r3
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	0018      	movs	r0, r3
 800df96:	f001 f928 	bl	800f1ea <LoRaMacClassBMibGetRequestConfirm>
 800df9a:	0003      	movs	r3, r0
 800df9c:	7023      	strb	r3, [r4, #0]
            break;
 800df9e:	46c0      	nop			@ (mov r8, r8)
        }
    }
    return status;
 800dfa0:	2317      	movs	r3, #23
 800dfa2:	18fb      	adds	r3, r7, r3
 800dfa4:	781b      	ldrb	r3, [r3, #0]
}
 800dfa6:	0018      	movs	r0, r3
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	b007      	add	sp, #28
 800dfac:	bd90      	pop	{r4, r7, pc}
 800dfae:	46c0      	nop			@ (mov r8, r8)
 800dfb0:	0801b198 	.word	0x0801b198
 800dfb4:	20000940 	.word	0x20000940
 800dfb8:	00000484 	.word	0x00000484

0800dfbc <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800dfbc:	b590      	push	{r4, r7, lr}
 800dfbe:	b089      	sub	sp, #36	@ 0x24
 800dfc0:	af02      	add	r7, sp, #8
 800dfc2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dfc4:	2317      	movs	r3, #23
 800dfc6:	18fb      	adds	r3, r7, r3
 800dfc8:	2200      	movs	r2, #0
 800dfca:	701a      	strb	r2, [r3, #0]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d102      	bne.n	800dfd8 <LoRaMacMibSetRequestConfirm+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dfd2:	2303      	movs	r3, #3
 800dfd4:	f000 fcde 	bl	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800dfd8:	4adb      	ldr	r2, [pc, #876]	@ (800e348 <LoRaMacMibSetRequestConfirm+0x38c>)
 800dfda:	23d0      	movs	r3, #208	@ 0xd0
 800dfdc:	009b      	lsls	r3, r3, #2
 800dfde:	58d3      	ldr	r3, [r2, r3]
 800dfe0:	2202      	movs	r2, #2
 800dfe2:	4013      	ands	r3, r2
 800dfe4:	d002      	beq.n	800dfec <LoRaMacMibSetRequestConfirm+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	f000 fcd4 	bl	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
    }

    switch( mibSet->Type )
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	2b35      	cmp	r3, #53	@ 0x35
 800dff2:	d901      	bls.n	800dff8 <LoRaMacMibSetRequestConfirm+0x3c>
 800dff4:	f000 fc87 	bl	800e906 <LoRaMacMibSetRequestConfirm+0x94a>
 800dff8:	009a      	lsls	r2, r3, #2
 800dffa:	4bd4      	ldr	r3, [pc, #848]	@ (800e34c <LoRaMacMibSetRequestConfirm+0x390>)
 800dffc:	18d3      	adds	r3, r2, r3
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	791b      	ldrb	r3, [r3, #4]
 800e006:	2217      	movs	r2, #23
 800e008:	18bc      	adds	r4, r7, r2
 800e00a:	0018      	movs	r0, r3
 800e00c:	f7fd f816 	bl	800b03c <SwitchClass>
 800e010:	0003      	movs	r3, r0
 800e012:	7023      	strb	r3, [r4, #0]
            break;
 800e014:	f000 fcb7 	bl	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	791b      	ldrb	r3, [r3, #4]
 800e01c:	2b02      	cmp	r3, #2
 800e01e:	d009      	beq.n	800e034 <LoRaMacMibSetRequestConfirm+0x78>
            {
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 800e020:	4bc9      	ldr	r3, [pc, #804]	@ (800e348 <LoRaMacMibSetRequestConfirm+0x38c>)
 800e022:	4acb      	ldr	r2, [pc, #812]	@ (800e350 <LoRaMacMibSetRequestConfirm+0x394>)
 800e024:	589a      	ldr	r2, [r3, r2]
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	7919      	ldrb	r1, [r3, #4]
 800e02a:	23ea      	movs	r3, #234	@ 0xea
 800e02c:	005b      	lsls	r3, r3, #1
 800e02e:	54d1      	strb	r1, [r2, r3]
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e030:	f000 fca9 	bl	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e034:	2317      	movs	r3, #23
 800e036:	18fb      	adds	r3, r7, r3
 800e038:	2203      	movs	r2, #3
 800e03a:	701a      	strb	r2, [r3, #0]
            break;
 800e03c:	f000 fca3 	bl	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	685b      	ldr	r3, [r3, #4]
 800e044:	0018      	movs	r0, r3
 800e046:	f7fb fb31 	bl	80096ac <SecureElementSetDevEui>
 800e04a:	1e03      	subs	r3, r0, #0
 800e04c:	d101      	bne.n	800e052 <LoRaMacMibSetRequestConfirm+0x96>
 800e04e:	f000 fc63 	bl	800e918 <LoRaMacMibSetRequestConfirm+0x95c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e052:	2317      	movs	r3, #23
 800e054:	18fb      	adds	r3, r7, r3
 800e056:	2203      	movs	r2, #3
 800e058:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e05a:	f000 fc5d 	bl	800e918 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	0018      	movs	r0, r3
 800e064:	f7fb fb46 	bl	80096f4 <SecureElementSetJoinEui>
 800e068:	1e03      	subs	r3, r0, #0
 800e06a:	d101      	bne.n	800e070 <LoRaMacMibSetRequestConfirm+0xb4>
 800e06c:	f000 fc56 	bl	800e91c <LoRaMacMibSetRequestConfirm+0x960>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e070:	2317      	movs	r3, #23
 800e072:	18fb      	adds	r3, r7, r3
 800e074:	2203      	movs	r2, #3
 800e076:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e078:	f000 fc50 	bl	800e91c <LoRaMacMibSetRequestConfirm+0x960>
        }
        case MIB_ADR:
        {
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 800e07c:	4bb2      	ldr	r3, [pc, #712]	@ (800e348 <LoRaMacMibSetRequestConfirm+0x38c>)
 800e07e:	4ab4      	ldr	r2, [pc, #720]	@ (800e350 <LoRaMacMibSetRequestConfirm+0x394>)
 800e080:	589b      	ldr	r3, [r3, r2]
 800e082:	687a      	ldr	r2, [r7, #4]
 800e084:	7911      	ldrb	r1, [r2, #4]
 800e086:	22f2      	movs	r2, #242	@ 0xf2
 800e088:	5499      	strb	r1, [r3, r2]
            break;
 800e08a:	f000 fc7c 	bl	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_NET_ID:
        {
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 800e08e:	4bae      	ldr	r3, [pc, #696]	@ (800e348 <LoRaMacMibSetRequestConfirm+0x38c>)
 800e090:	4aaf      	ldr	r2, [pc, #700]	@ (800e350 <LoRaMacMibSetRequestConfirm+0x394>)
 800e092:	589b      	ldr	r3, [r3, r2]
 800e094:	687a      	ldr	r2, [r7, #4]
 800e096:	6852      	ldr	r2, [r2, #4]
 800e098:	649a      	str	r2, [r3, #72]	@ 0x48
            break;
 800e09a:	f000 fc74 	bl	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_DEV_ADDR:
        {
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 800e09e:	4baa      	ldr	r3, [pc, #680]	@ (800e348 <LoRaMacMibSetRequestConfirm+0x38c>)
 800e0a0:	4aab      	ldr	r2, [pc, #684]	@ (800e350 <LoRaMacMibSetRequestConfirm+0x394>)
 800e0a2:	589b      	ldr	r3, [r3, r2]
 800e0a4:	687a      	ldr	r2, [r7, #4]
 800e0a6:	6852      	ldr	r2, [r2, #4]
 800e0a8:	64da      	str	r2, [r3, #76]	@ 0x4c
            break;
 800e0aa:	f000 fc6c 	bl	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_GEN_APP_KEY:
        {
            if( mibSet->Param.GenAppKey != NULL )
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	685b      	ldr	r3, [r3, #4]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d00c      	beq.n	800e0d0 <LoRaMacMibSetRequestConfirm+0x114>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( GEN_APP_KEY, mibSet->Param.GenAppKey ) )
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	0019      	movs	r1, r3
 800e0bc:	2001      	movs	r0, #1
 800e0be:	f002 fab1 	bl	8010624 <LoRaMacCryptoSetKey>
 800e0c2:	1e03      	subs	r3, r0, #0
 800e0c4:	d101      	bne.n	800e0ca <LoRaMacMibSetRequestConfirm+0x10e>
 800e0c6:	f000 fc2b 	bl	800e920 <LoRaMacMibSetRequestConfirm+0x964>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e0ca:	2311      	movs	r3, #17
 800e0cc:	f000 fc62 	bl	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e0d0:	2317      	movs	r3, #23
 800e0d2:	18fb      	adds	r3, r7, r3
 800e0d4:	2203      	movs	r2, #3
 800e0d6:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e0d8:	f000 fc22 	bl	800e920 <LoRaMacMibSetRequestConfirm+0x964>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d00c      	beq.n	800e0fe <LoRaMacMibSetRequestConfirm+0x142>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	685b      	ldr	r3, [r3, #4]
 800e0e8:	0019      	movs	r1, r3
 800e0ea:	2000      	movs	r0, #0
 800e0ec:	f002 fa9a 	bl	8010624 <LoRaMacCryptoSetKey>
 800e0f0:	1e03      	subs	r3, r0, #0
 800e0f2:	d101      	bne.n	800e0f8 <LoRaMacMibSetRequestConfirm+0x13c>
 800e0f4:	f000 fc16 	bl	800e924 <LoRaMacMibSetRequestConfirm+0x968>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e0f8:	2311      	movs	r3, #17
 800e0fa:	f000 fc4b 	bl	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e0fe:	2317      	movs	r3, #23
 800e100:	18fb      	adds	r3, r7, r3
 800e102:	2203      	movs	r2, #3
 800e104:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e106:	f000 fc0d 	bl	800e924 <LoRaMacMibSetRequestConfirm+0x968>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	685b      	ldr	r3, [r3, #4]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d00c      	beq.n	800e12c <LoRaMacMibSetRequestConfirm+0x170>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	0019      	movs	r1, r3
 800e118:	2002      	movs	r0, #2
 800e11a:	f002 fa83 	bl	8010624 <LoRaMacCryptoSetKey>
 800e11e:	1e03      	subs	r3, r0, #0
 800e120:	d101      	bne.n	800e126 <LoRaMacMibSetRequestConfirm+0x16a>
 800e122:	f000 fc01 	bl	800e928 <LoRaMacMibSetRequestConfirm+0x96c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e126:	2311      	movs	r3, #17
 800e128:	f000 fc34 	bl	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e12c:	2317      	movs	r3, #23
 800e12e:	18fb      	adds	r3, r7, r3
 800e130:	2203      	movs	r2, #3
 800e132:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e134:	f000 fbf8 	bl	800e928 <LoRaMacMibSetRequestConfirm+0x96c>
        }
        case MIB_J_S_INT_KEY:
        {
            if( mibSet->Param.JSIntKey != NULL )
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	685b      	ldr	r3, [r3, #4]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d00c      	beq.n	800e15a <LoRaMacMibSetRequestConfirm+0x19e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	685b      	ldr	r3, [r3, #4]
 800e144:	0019      	movs	r1, r3
 800e146:	2003      	movs	r0, #3
 800e148:	f002 fa6c 	bl	8010624 <LoRaMacCryptoSetKey>
 800e14c:	1e03      	subs	r3, r0, #0
 800e14e:	d101      	bne.n	800e154 <LoRaMacMibSetRequestConfirm+0x198>
 800e150:	f000 fbec 	bl	800e92c <LoRaMacMibSetRequestConfirm+0x970>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e154:	2311      	movs	r3, #17
 800e156:	f000 fc1d 	bl	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e15a:	2317      	movs	r3, #23
 800e15c:	18fb      	adds	r3, r7, r3
 800e15e:	2203      	movs	r2, #3
 800e160:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e162:	f000 fbe3 	bl	800e92c <LoRaMacMibSetRequestConfirm+0x970>
        }
        case MIB_J_S_ENC_KEY:
        {
            if( mibSet->Param.JSEncKey != NULL )
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d00c      	beq.n	800e188 <LoRaMacMibSetRequestConfirm+0x1cc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	685b      	ldr	r3, [r3, #4]
 800e172:	0019      	movs	r1, r3
 800e174:	2004      	movs	r0, #4
 800e176:	f002 fa55 	bl	8010624 <LoRaMacCryptoSetKey>
 800e17a:	1e03      	subs	r3, r0, #0
 800e17c:	d101      	bne.n	800e182 <LoRaMacMibSetRequestConfirm+0x1c6>
 800e17e:	f000 fbd7 	bl	800e930 <LoRaMacMibSetRequestConfirm+0x974>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e182:	2311      	movs	r3, #17
 800e184:	f000 fc06 	bl	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e188:	2317      	movs	r3, #23
 800e18a:	18fb      	adds	r3, r7, r3
 800e18c:	2203      	movs	r2, #3
 800e18e:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e190:	f000 fbce 	bl	800e930 <LoRaMacMibSetRequestConfirm+0x974>
        }
        case MIB_F_NWK_S_INT_KEY:
        {
            if( mibSet->Param.FNwkSIntKey != NULL )
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	685b      	ldr	r3, [r3, #4]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d00c      	beq.n	800e1b6 <LoRaMacMibSetRequestConfirm+0x1fa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	685b      	ldr	r3, [r3, #4]
 800e1a0:	0019      	movs	r1, r3
 800e1a2:	2005      	movs	r0, #5
 800e1a4:	f002 fa3e 	bl	8010624 <LoRaMacCryptoSetKey>
 800e1a8:	1e03      	subs	r3, r0, #0
 800e1aa:	d101      	bne.n	800e1b0 <LoRaMacMibSetRequestConfirm+0x1f4>
 800e1ac:	f000 fbc2 	bl	800e934 <LoRaMacMibSetRequestConfirm+0x978>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e1b0:	2311      	movs	r3, #17
 800e1b2:	f000 fbef 	bl	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e1b6:	2317      	movs	r3, #23
 800e1b8:	18fb      	adds	r3, r7, r3
 800e1ba:	2203      	movs	r2, #3
 800e1bc:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e1be:	f000 fbb9 	bl	800e934 <LoRaMacMibSetRequestConfirm+0x978>
        }
        case MIB_S_NWK_S_INT_KEY:
        {
            if( mibSet->Param.SNwkSIntKey != NULL )
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	685b      	ldr	r3, [r3, #4]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d00c      	beq.n	800e1e4 <LoRaMacMibSetRequestConfirm+0x228>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	0019      	movs	r1, r3
 800e1d0:	2006      	movs	r0, #6
 800e1d2:	f002 fa27 	bl	8010624 <LoRaMacCryptoSetKey>
 800e1d6:	1e03      	subs	r3, r0, #0
 800e1d8:	d101      	bne.n	800e1de <LoRaMacMibSetRequestConfirm+0x222>
 800e1da:	f000 fbad 	bl	800e938 <LoRaMacMibSetRequestConfirm+0x97c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e1de:	2311      	movs	r3, #17
 800e1e0:	f000 fbd8 	bl	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e1e4:	2317      	movs	r3, #23
 800e1e6:	18fb      	adds	r3, r7, r3
 800e1e8:	2203      	movs	r2, #3
 800e1ea:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e1ec:	f000 fba4 	bl	800e938 <LoRaMacMibSetRequestConfirm+0x97c>
        }
        case MIB_NWK_S_ENC_KEY:
        {
            if( mibSet->Param.NwkSEncKey != NULL )
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d00c      	beq.n	800e212 <LoRaMacMibSetRequestConfirm+0x256>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	685b      	ldr	r3, [r3, #4]
 800e1fc:	0019      	movs	r1, r3
 800e1fe:	2007      	movs	r0, #7
 800e200:	f002 fa10 	bl	8010624 <LoRaMacCryptoSetKey>
 800e204:	1e03      	subs	r3, r0, #0
 800e206:	d101      	bne.n	800e20c <LoRaMacMibSetRequestConfirm+0x250>
 800e208:	f000 fb98 	bl	800e93c <LoRaMacMibSetRequestConfirm+0x980>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e20c:	2311      	movs	r3, #17
 800e20e:	f000 fbc1 	bl	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e212:	2317      	movs	r3, #23
 800e214:	18fb      	adds	r3, r7, r3
 800e216:	2203      	movs	r2, #3
 800e218:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e21a:	f000 fb8f 	bl	800e93c <LoRaMacMibSetRequestConfirm+0x980>
        }
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	685b      	ldr	r3, [r3, #4]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d00c      	beq.n	800e240 <LoRaMacMibSetRequestConfirm+0x284>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	685b      	ldr	r3, [r3, #4]
 800e22a:	0019      	movs	r1, r3
 800e22c:	2008      	movs	r0, #8
 800e22e:	f002 f9f9 	bl	8010624 <LoRaMacCryptoSetKey>
 800e232:	1e03      	subs	r3, r0, #0
 800e234:	d101      	bne.n	800e23a <LoRaMacMibSetRequestConfirm+0x27e>
 800e236:	f000 fb83 	bl	800e940 <LoRaMacMibSetRequestConfirm+0x984>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e23a:	2311      	movs	r3, #17
 800e23c:	f000 fbaa 	bl	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e240:	2317      	movs	r3, #23
 800e242:	18fb      	adds	r3, r7, r3
 800e244:	2203      	movs	r2, #3
 800e246:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e248:	f000 fb7a 	bl	800e940 <LoRaMacMibSetRequestConfirm+0x984>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	685b      	ldr	r3, [r3, #4]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d00c      	beq.n	800e26e <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	0019      	movs	r1, r3
 800e25a:	207f      	movs	r0, #127	@ 0x7f
 800e25c:	f002 f9e2 	bl	8010624 <LoRaMacCryptoSetKey>
 800e260:	1e03      	subs	r3, r0, #0
 800e262:	d101      	bne.n	800e268 <LoRaMacMibSetRequestConfirm+0x2ac>
 800e264:	f000 fb6e 	bl	800e944 <LoRaMacMibSetRequestConfirm+0x988>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e268:	2311      	movs	r3, #17
 800e26a:	f000 fb93 	bl	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e26e:	2317      	movs	r3, #23
 800e270:	18fb      	adds	r3, r7, r3
 800e272:	2203      	movs	r2, #3
 800e274:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e276:	f000 fb65 	bl	800e944 <LoRaMacMibSetRequestConfirm+0x988>
        }
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	685b      	ldr	r3, [r3, #4]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d00b      	beq.n	800e29a <LoRaMacMibSetRequestConfirm+0x2de>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	685b      	ldr	r3, [r3, #4]
 800e286:	0019      	movs	r1, r3
 800e288:	2080      	movs	r0, #128	@ 0x80
 800e28a:	f002 f9cb 	bl	8010624 <LoRaMacCryptoSetKey>
 800e28e:	1e03      	subs	r3, r0, #0
 800e290:	d100      	bne.n	800e294 <LoRaMacMibSetRequestConfirm+0x2d8>
 800e292:	e359      	b.n	800e948 <LoRaMacMibSetRequestConfirm+0x98c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e294:	2311      	movs	r3, #17
 800e296:	f000 fb7d 	bl	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e29a:	2317      	movs	r3, #23
 800e29c:	18fb      	adds	r3, r7, r3
 800e29e:	2203      	movs	r2, #3
 800e2a0:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e2a2:	e351      	b.n	800e948 <LoRaMacMibSetRequestConfirm+0x98c>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d00b      	beq.n	800e2c4 <LoRaMacMibSetRequestConfirm+0x308>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	685b      	ldr	r3, [r3, #4]
 800e2b0:	0019      	movs	r1, r3
 800e2b2:	2081      	movs	r0, #129	@ 0x81
 800e2b4:	f002 f9b6 	bl	8010624 <LoRaMacCryptoSetKey>
 800e2b8:	1e03      	subs	r3, r0, #0
 800e2ba:	d100      	bne.n	800e2be <LoRaMacMibSetRequestConfirm+0x302>
 800e2bc:	e346      	b.n	800e94c <LoRaMacMibSetRequestConfirm+0x990>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e2be:	2311      	movs	r3, #17
 800e2c0:	f000 fb68 	bl	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e2c4:	2317      	movs	r3, #23
 800e2c6:	18fb      	adds	r3, r7, r3
 800e2c8:	2203      	movs	r2, #3
 800e2ca:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e2cc:	e33e      	b.n	800e94c <LoRaMacMibSetRequestConfirm+0x990>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	685b      	ldr	r3, [r3, #4]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d00a      	beq.n	800e2ec <LoRaMacMibSetRequestConfirm+0x330>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	0019      	movs	r1, r3
 800e2dc:	2082      	movs	r0, #130	@ 0x82
 800e2de:	f002 f9a1 	bl	8010624 <LoRaMacCryptoSetKey>
 800e2e2:	1e03      	subs	r3, r0, #0
 800e2e4:	d100      	bne.n	800e2e8 <LoRaMacMibSetRequestConfirm+0x32c>
 800e2e6:	e333      	b.n	800e950 <LoRaMacMibSetRequestConfirm+0x994>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e2e8:	2311      	movs	r3, #17
 800e2ea:	e353      	b.n	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e2ec:	2317      	movs	r3, #23
 800e2ee:	18fb      	adds	r3, r7, r3
 800e2f0:	2203      	movs	r2, #3
 800e2f2:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e2f4:	e32c      	b.n	800e950 <LoRaMacMibSetRequestConfirm+0x994>
        }
        case MIB_MC_KEY_1:
        {
            if( mibSet->Param.McKey1 != NULL )
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	685b      	ldr	r3, [r3, #4]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d00a      	beq.n	800e314 <LoRaMacMibSetRequestConfirm+0x358>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	0019      	movs	r1, r3
 800e304:	2083      	movs	r0, #131	@ 0x83
 800e306:	f002 f98d 	bl	8010624 <LoRaMacCryptoSetKey>
 800e30a:	1e03      	subs	r3, r0, #0
 800e30c:	d100      	bne.n	800e310 <LoRaMacMibSetRequestConfirm+0x354>
 800e30e:	e321      	b.n	800e954 <LoRaMacMibSetRequestConfirm+0x998>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e310:	2311      	movs	r3, #17
 800e312:	e33f      	b.n	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e314:	2317      	movs	r3, #23
 800e316:	18fb      	adds	r3, r7, r3
 800e318:	2203      	movs	r2, #3
 800e31a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e31c:	e31a      	b.n	800e954 <LoRaMacMibSetRequestConfirm+0x998>
        }
        case MIB_MC_APP_S_KEY_1:
        {
            if( mibSet->Param.McAppSKey1 != NULL )
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00a      	beq.n	800e33c <LoRaMacMibSetRequestConfirm+0x380>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	685b      	ldr	r3, [r3, #4]
 800e32a:	0019      	movs	r1, r3
 800e32c:	2084      	movs	r0, #132	@ 0x84
 800e32e:	f002 f979 	bl	8010624 <LoRaMacCryptoSetKey>
 800e332:	1e03      	subs	r3, r0, #0
 800e334:	d100      	bne.n	800e338 <LoRaMacMibSetRequestConfirm+0x37c>
 800e336:	e30f      	b.n	800e958 <LoRaMacMibSetRequestConfirm+0x99c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e338:	2311      	movs	r3, #17
 800e33a:	e32b      	b.n	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e33c:	2317      	movs	r3, #23
 800e33e:	18fb      	adds	r3, r7, r3
 800e340:	2203      	movs	r2, #3
 800e342:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e344:	e308      	b.n	800e958 <LoRaMacMibSetRequestConfirm+0x99c>
 800e346:	46c0      	nop			@ (mov r8, r8)
 800e348:	20000940 	.word	0x20000940
 800e34c:	0801b26c 	.word	0x0801b26c
 800e350:	00000484 	.word	0x00000484
        }
        case MIB_MC_NWK_S_KEY_1:
        {
            if( mibSet->Param.McNwkSKey1 != NULL )
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d00a      	beq.n	800e372 <LoRaMacMibSetRequestConfirm+0x3b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	685b      	ldr	r3, [r3, #4]
 800e360:	0019      	movs	r1, r3
 800e362:	2085      	movs	r0, #133	@ 0x85
 800e364:	f002 f95e 	bl	8010624 <LoRaMacCryptoSetKey>
 800e368:	1e03      	subs	r3, r0, #0
 800e36a:	d100      	bne.n	800e36e <LoRaMacMibSetRequestConfirm+0x3b2>
 800e36c:	e2f6      	b.n	800e95c <LoRaMacMibSetRequestConfirm+0x9a0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e36e:	2311      	movs	r3, #17
 800e370:	e310      	b.n	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e372:	2317      	movs	r3, #23
 800e374:	18fb      	adds	r3, r7, r3
 800e376:	2203      	movs	r2, #3
 800e378:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e37a:	e2ef      	b.n	800e95c <LoRaMacMibSetRequestConfirm+0x9a0>
        }
        case MIB_MC_KEY_2:
        {
            if( mibSet->Param.McKey2 != NULL )
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	685b      	ldr	r3, [r3, #4]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d00a      	beq.n	800e39a <LoRaMacMibSetRequestConfirm+0x3de>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	685b      	ldr	r3, [r3, #4]
 800e388:	0019      	movs	r1, r3
 800e38a:	2086      	movs	r0, #134	@ 0x86
 800e38c:	f002 f94a 	bl	8010624 <LoRaMacCryptoSetKey>
 800e390:	1e03      	subs	r3, r0, #0
 800e392:	d100      	bne.n	800e396 <LoRaMacMibSetRequestConfirm+0x3da>
 800e394:	e2e4      	b.n	800e960 <LoRaMacMibSetRequestConfirm+0x9a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e396:	2311      	movs	r3, #17
 800e398:	e2fc      	b.n	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e39a:	2317      	movs	r3, #23
 800e39c:	18fb      	adds	r3, r7, r3
 800e39e:	2203      	movs	r2, #3
 800e3a0:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e3a2:	e2dd      	b.n	800e960 <LoRaMacMibSetRequestConfirm+0x9a4>
        }
        case MIB_MC_APP_S_KEY_2:
        {
            if( mibSet->Param.McAppSKey2 != NULL )
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	685b      	ldr	r3, [r3, #4]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d00a      	beq.n	800e3c2 <LoRaMacMibSetRequestConfirm+0x406>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	685b      	ldr	r3, [r3, #4]
 800e3b0:	0019      	movs	r1, r3
 800e3b2:	2087      	movs	r0, #135	@ 0x87
 800e3b4:	f002 f936 	bl	8010624 <LoRaMacCryptoSetKey>
 800e3b8:	1e03      	subs	r3, r0, #0
 800e3ba:	d100      	bne.n	800e3be <LoRaMacMibSetRequestConfirm+0x402>
 800e3bc:	e2d2      	b.n	800e964 <LoRaMacMibSetRequestConfirm+0x9a8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e3be:	2311      	movs	r3, #17
 800e3c0:	e2e8      	b.n	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e3c2:	2317      	movs	r3, #23
 800e3c4:	18fb      	adds	r3, r7, r3
 800e3c6:	2203      	movs	r2, #3
 800e3c8:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e3ca:	e2cb      	b.n	800e964 <LoRaMacMibSetRequestConfirm+0x9a8>
        }
        case MIB_MC_NWK_S_KEY_2:
        {
            if( mibSet->Param.McNwkSKey2 != NULL )
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	685b      	ldr	r3, [r3, #4]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d00a      	beq.n	800e3ea <LoRaMacMibSetRequestConfirm+0x42e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	685b      	ldr	r3, [r3, #4]
 800e3d8:	0019      	movs	r1, r3
 800e3da:	2088      	movs	r0, #136	@ 0x88
 800e3dc:	f002 f922 	bl	8010624 <LoRaMacCryptoSetKey>
 800e3e0:	1e03      	subs	r3, r0, #0
 800e3e2:	d100      	bne.n	800e3e6 <LoRaMacMibSetRequestConfirm+0x42a>
 800e3e4:	e2c0      	b.n	800e968 <LoRaMacMibSetRequestConfirm+0x9ac>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e3e6:	2311      	movs	r3, #17
 800e3e8:	e2d4      	b.n	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e3ea:	2317      	movs	r3, #23
 800e3ec:	18fb      	adds	r3, r7, r3
 800e3ee:	2203      	movs	r2, #3
 800e3f0:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e3f2:	e2b9      	b.n	800e968 <LoRaMacMibSetRequestConfirm+0x9ac>
        }
        case MIB_MC_KEY_3:
        {
            if( mibSet->Param.McKey3 != NULL )
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	685b      	ldr	r3, [r3, #4]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d00a      	beq.n	800e412 <LoRaMacMibSetRequestConfirm+0x456>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	685b      	ldr	r3, [r3, #4]
 800e400:	0019      	movs	r1, r3
 800e402:	2089      	movs	r0, #137	@ 0x89
 800e404:	f002 f90e 	bl	8010624 <LoRaMacCryptoSetKey>
 800e408:	1e03      	subs	r3, r0, #0
 800e40a:	d100      	bne.n	800e40e <LoRaMacMibSetRequestConfirm+0x452>
 800e40c:	e2ae      	b.n	800e96c <LoRaMacMibSetRequestConfirm+0x9b0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e40e:	2311      	movs	r3, #17
 800e410:	e2c0      	b.n	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e412:	2317      	movs	r3, #23
 800e414:	18fb      	adds	r3, r7, r3
 800e416:	2203      	movs	r2, #3
 800e418:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e41a:	e2a7      	b.n	800e96c <LoRaMacMibSetRequestConfirm+0x9b0>
        }
        case MIB_MC_APP_S_KEY_3:
        {
            if( mibSet->Param.McAppSKey3 != NULL )
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	685b      	ldr	r3, [r3, #4]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d00a      	beq.n	800e43a <LoRaMacMibSetRequestConfirm+0x47e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	685b      	ldr	r3, [r3, #4]
 800e428:	0019      	movs	r1, r3
 800e42a:	208a      	movs	r0, #138	@ 0x8a
 800e42c:	f002 f8fa 	bl	8010624 <LoRaMacCryptoSetKey>
 800e430:	1e03      	subs	r3, r0, #0
 800e432:	d100      	bne.n	800e436 <LoRaMacMibSetRequestConfirm+0x47a>
 800e434:	e29c      	b.n	800e970 <LoRaMacMibSetRequestConfirm+0x9b4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e436:	2311      	movs	r3, #17
 800e438:	e2ac      	b.n	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e43a:	2317      	movs	r3, #23
 800e43c:	18fb      	adds	r3, r7, r3
 800e43e:	2203      	movs	r2, #3
 800e440:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e442:	e295      	b.n	800e970 <LoRaMacMibSetRequestConfirm+0x9b4>
        }
        case MIB_MC_NWK_S_KEY_3:
        {
            if( mibSet->Param.McNwkSKey3 != NULL )
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	685b      	ldr	r3, [r3, #4]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d00a      	beq.n	800e462 <LoRaMacMibSetRequestConfirm+0x4a6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	685b      	ldr	r3, [r3, #4]
 800e450:	0019      	movs	r1, r3
 800e452:	208b      	movs	r0, #139	@ 0x8b
 800e454:	f002 f8e6 	bl	8010624 <LoRaMacCryptoSetKey>
 800e458:	1e03      	subs	r3, r0, #0
 800e45a:	d100      	bne.n	800e45e <LoRaMacMibSetRequestConfirm+0x4a2>
 800e45c:	e28a      	b.n	800e974 <LoRaMacMibSetRequestConfirm+0x9b8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e45e:	2311      	movs	r3, #17
 800e460:	e298      	b.n	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e462:	2317      	movs	r3, #23
 800e464:	18fb      	adds	r3, r7, r3
 800e466:	2203      	movs	r2, #3
 800e468:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e46a:	e283      	b.n	800e974 <LoRaMacMibSetRequestConfirm+0x9b8>
        }
        case MIB_PUBLIC_NETWORK:
        {
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800e46c:	4bd7      	ldr	r3, [pc, #860]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e46e:	4ad8      	ldr	r2, [pc, #864]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e470:	589b      	ldr	r3, [r3, r2]
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	7911      	ldrb	r1, [r2, #4]
 800e476:	22f1      	movs	r2, #241	@ 0xf1
 800e478:	5499      	strb	r1, [r3, r2]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800e47a:	4bd6      	ldr	r3, [pc, #856]	@ (800e7d4 <LoRaMacMibSetRequestConfirm+0x818>)
 800e47c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e47e:	4ad3      	ldr	r2, [pc, #844]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e480:	49d3      	ldr	r1, [pc, #844]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e482:	5852      	ldr	r2, [r2, r1]
 800e484:	21f1      	movs	r1, #241	@ 0xf1
 800e486:	5c52      	ldrb	r2, [r2, r1]
 800e488:	0010      	movs	r0, r2
 800e48a:	4798      	blx	r3
            break;
 800e48c:	e27b      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_REPEATER_SUPPORT:
        {
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800e48e:	4bcf      	ldr	r3, [pc, #828]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e490:	4acf      	ldr	r2, [pc, #828]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e492:	589a      	ldr	r2, [r3, r2]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	7919      	ldrb	r1, [r3, #4]
 800e498:	2340      	movs	r3, #64	@ 0x40
 800e49a:	33ff      	adds	r3, #255	@ 0xff
 800e49c:	54d1      	strb	r1, [r2, r3]
            break;
 800e49e:	e272      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	7a1b      	ldrb	r3, [r3, #8]
 800e4a4:	b25a      	sxtb	r2, r3
 800e4a6:	2108      	movs	r1, #8
 800e4a8:	187b      	adds	r3, r7, r1
 800e4aa:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800e4ac:	4bc7      	ldr	r3, [pc, #796]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e4ae:	4ac8      	ldr	r2, [pc, #800]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e4b0:	589a      	ldr	r2, [r3, r2]
 800e4b2:	232e      	movs	r3, #46	@ 0x2e
 800e4b4:	33ff      	adds	r3, #255	@ 0xff
 800e4b6:	5cd2      	ldrb	r2, [r2, r3]
 800e4b8:	187b      	adds	r3, r7, r1
 800e4ba:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800e4bc:	4bc3      	ldr	r3, [pc, #780]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e4be:	4ac4      	ldr	r2, [pc, #784]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e4c0:	589b      	ldr	r3, [r3, r2]
 800e4c2:	781b      	ldrb	r3, [r3, #0]
 800e4c4:	1879      	adds	r1, r7, r1
 800e4c6:	2207      	movs	r2, #7
 800e4c8:	0018      	movs	r0, r3
 800e4ca:	f003 f8f8 	bl	80116be <RegionVerify>
 800e4ce:	1e03      	subs	r3, r0, #0
 800e4d0:	d00a      	beq.n	800e4e8 <LoRaMacMibSetRequestConfirm+0x52c>
            {
                MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800e4d2:	4bbe      	ldr	r3, [pc, #760]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e4d4:	4abe      	ldr	r2, [pc, #760]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e4d6:	5899      	ldr	r1, [r3, r2]
 800e4d8:	238e      	movs	r3, #142	@ 0x8e
 800e4da:	005b      	lsls	r3, r3, #1
 800e4dc:	687a      	ldr	r2, [r7, #4]
 800e4de:	18cb      	adds	r3, r1, r3
 800e4e0:	3204      	adds	r2, #4
 800e4e2:	ca03      	ldmia	r2!, {r0, r1}
 800e4e4:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e4e6:	e24e      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e4e8:	2317      	movs	r3, #23
 800e4ea:	18fb      	adds	r3, r7, r3
 800e4ec:	2203      	movs	r2, #3
 800e4ee:	701a      	strb	r2, [r3, #0]
            break;
 800e4f0:	e249      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	7a1b      	ldrb	r3, [r3, #8]
 800e4f6:	b25a      	sxtb	r2, r3
 800e4f8:	2108      	movs	r1, #8
 800e4fa:	187b      	adds	r3, r7, r1
 800e4fc:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800e4fe:	4bb3      	ldr	r3, [pc, #716]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e500:	4ab3      	ldr	r2, [pc, #716]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e502:	589a      	ldr	r2, [r3, r2]
 800e504:	232e      	movs	r3, #46	@ 0x2e
 800e506:	33ff      	adds	r3, #255	@ 0xff
 800e508:	5cd2      	ldrb	r2, [r2, r3]
 800e50a:	187b      	adds	r3, r7, r1
 800e50c:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800e50e:	4baf      	ldr	r3, [pc, #700]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e510:	4aaf      	ldr	r2, [pc, #700]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e512:	589b      	ldr	r3, [r3, r2]
 800e514:	781b      	ldrb	r3, [r3, #0]
 800e516:	1879      	adds	r1, r7, r1
 800e518:	2207      	movs	r2, #7
 800e51a:	0018      	movs	r0, r3
 800e51c:	f003 f8cf 	bl	80116be <RegionVerify>
 800e520:	1e03      	subs	r3, r0, #0
 800e522:	d008      	beq.n	800e536 <LoRaMacMibSetRequestConfirm+0x57a>
            {
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800e524:	4ba9      	ldr	r3, [pc, #676]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e526:	4aaa      	ldr	r2, [pc, #680]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e528:	589b      	ldr	r3, [r3, r2]
 800e52a:	687a      	ldr	r2, [r7, #4]
 800e52c:	3328      	adds	r3, #40	@ 0x28
 800e52e:	3204      	adds	r2, #4
 800e530:	ca03      	ldmia	r2!, {r0, r1}
 800e532:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e534:	e227      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e536:	2317      	movs	r3, #23
 800e538:	18fb      	adds	r3, r7, r3
 800e53a:	2203      	movs	r2, #3
 800e53c:	701a      	strb	r2, [r3, #0]
            break;
 800e53e:	e222      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	7a1b      	ldrb	r3, [r3, #8]
 800e544:	b25a      	sxtb	r2, r3
 800e546:	2108      	movs	r1, #8
 800e548:	187b      	adds	r3, r7, r1
 800e54a:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800e54c:	4b9f      	ldr	r3, [pc, #636]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e54e:	4aa0      	ldr	r2, [pc, #640]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e550:	589a      	ldr	r2, [r3, r2]
 800e552:	232e      	movs	r3, #46	@ 0x2e
 800e554:	33ff      	adds	r3, #255	@ 0xff
 800e556:	5cd2      	ldrb	r2, [r2, r3]
 800e558:	187b      	adds	r3, r7, r1
 800e55a:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800e55c:	4b9b      	ldr	r3, [pc, #620]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e55e:	4a9c      	ldr	r2, [pc, #624]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e560:	589b      	ldr	r3, [r3, r2]
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	1879      	adds	r1, r7, r1
 800e566:	2207      	movs	r2, #7
 800e568:	0018      	movs	r0, r3
 800e56a:	f003 f8a8 	bl	80116be <RegionVerify>
 800e56e:	1e03      	subs	r3, r0, #0
 800e570:	d03b      	beq.n	800e5ea <LoRaMacMibSetRequestConfirm+0x62e>
            {
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800e572:	4b96      	ldr	r3, [pc, #600]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e574:	4a96      	ldr	r2, [pc, #600]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e576:	5899      	ldr	r1, [r3, r2]
 800e578:	2392      	movs	r3, #146	@ 0x92
 800e57a:	005b      	lsls	r3, r3, #1
 800e57c:	687a      	ldr	r2, [r7, #4]
 800e57e:	18cb      	adds	r3, r1, r3
 800e580:	3204      	adds	r2, #4
 800e582:	ca03      	ldmia	r2!, {r0, r1}
 800e584:	c303      	stmia	r3!, {r0, r1}

                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800e586:	4b91      	ldr	r3, [pc, #580]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e588:	4a91      	ldr	r2, [pc, #580]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e58a:	589b      	ldr	r3, [r3, r2]
 800e58c:	22f0      	movs	r2, #240	@ 0xf0
 800e58e:	5c9b      	ldrb	r3, [r3, r2]
 800e590:	2b02      	cmp	r3, #2
 800e592:	d000      	beq.n	800e596 <LoRaMacMibSetRequestConfirm+0x5da>
 800e594:	e1f0      	b.n	800e978 <LoRaMacMibSetRequestConfirm+0x9bc>
 800e596:	4b8d      	ldr	r3, [pc, #564]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e598:	4a8d      	ldr	r2, [pc, #564]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e59a:	589a      	ldr	r2, [r3, r2]
 800e59c:	23ea      	movs	r3, #234	@ 0xea
 800e59e:	005b      	lsls	r3, r3, #1
 800e5a0:	5cd3      	ldrb	r3, [r2, r3]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d100      	bne.n	800e5a8 <LoRaMacMibSetRequestConfirm+0x5ec>
 800e5a6:	e1e7      	b.n	800e978 <LoRaMacMibSetRequestConfirm+0x9bc>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800e5a8:	4b8a      	ldr	r3, [pc, #552]	@ (800e7d4 <LoRaMacMibSetRequestConfirm+0x818>)
 800e5aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5ac:	4798      	blx	r3
                    // Compute RxC windows parameters
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800e5ae:	4b87      	ldr	r3, [pc, #540]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e5b0:	4a87      	ldr	r2, [pc, #540]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e5b2:	589b      	ldr	r3, [r3, r2]
 800e5b4:	7818      	ldrb	r0, [r3, #0]
                                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 800e5b6:	4b85      	ldr	r3, [pc, #532]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e5b8:	4a85      	ldr	r2, [pc, #532]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e5ba:	589a      	ldr	r2, [r3, r2]
 800e5bc:	2394      	movs	r3, #148	@ 0x94
 800e5be:	005b      	lsls	r3, r3, #1
 800e5c0:	5cd3      	ldrb	r3, [r2, r3]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800e5c2:	b259      	sxtb	r1, r3
                                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800e5c4:	4b81      	ldr	r3, [pc, #516]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e5c6:	4a82      	ldr	r2, [pc, #520]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e5c8:	589a      	ldr	r2, [r3, r2]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800e5ca:	2380      	movs	r3, #128	@ 0x80
 800e5cc:	005b      	lsls	r3, r3, #1
 800e5ce:	5cd2      	ldrb	r2, [r2, r3]
                                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800e5d0:	4b7e      	ldr	r3, [pc, #504]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e5d2:	4c7f      	ldr	r4, [pc, #508]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e5d4:	591b      	ldr	r3, [r3, r4]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800e5d6:	24fc      	movs	r4, #252	@ 0xfc
 800e5d8:	591c      	ldr	r4, [r3, r4]
 800e5da:	4b7f      	ldr	r3, [pc, #508]	@ (800e7d8 <LoRaMacMibSetRequestConfirm+0x81c>)
 800e5dc:	9300      	str	r3, [sp, #0]
 800e5de:	0023      	movs	r3, r4
 800e5e0:	f003 f8b5 	bl	801174e <RegionComputeRxWindowParameters>
                                                     &MacCtx.RxWindowCConfig );
                    OpenContinuousRxCWindow( );
 800e5e4:	f7fe f99e 	bl	800c924 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e5e8:	e1c6      	b.n	800e978 <LoRaMacMibSetRequestConfirm+0x9bc>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e5ea:	2317      	movs	r3, #23
 800e5ec:	18fb      	adds	r3, r7, r3
 800e5ee:	2203      	movs	r2, #3
 800e5f0:	701a      	strb	r2, [r3, #0]
            break;
 800e5f2:	e1c1      	b.n	800e978 <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	7a1b      	ldrb	r3, [r3, #8]
 800e5f8:	b25a      	sxtb	r2, r3
 800e5fa:	2108      	movs	r1, #8
 800e5fc:	187b      	adds	r3, r7, r1
 800e5fe:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800e600:	4b72      	ldr	r3, [pc, #456]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e602:	4a73      	ldr	r2, [pc, #460]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e604:	589a      	ldr	r2, [r3, r2]
 800e606:	232e      	movs	r3, #46	@ 0x2e
 800e608:	33ff      	adds	r3, #255	@ 0xff
 800e60a:	5cd2      	ldrb	r2, [r2, r3]
 800e60c:	187b      	adds	r3, r7, r1
 800e60e:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800e610:	4b6e      	ldr	r3, [pc, #440]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e612:	4a6f      	ldr	r2, [pc, #444]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e614:	589b      	ldr	r3, [r3, r2]
 800e616:	781b      	ldrb	r3, [r3, #0]
 800e618:	1879      	adds	r1, r7, r1
 800e61a:	2207      	movs	r2, #7
 800e61c:	0018      	movs	r0, r3
 800e61e:	f003 f84e 	bl	80116be <RegionVerify>
 800e622:	1e03      	subs	r3, r0, #0
 800e624:	d008      	beq.n	800e638 <LoRaMacMibSetRequestConfirm+0x67c>
            {
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800e626:	4b69      	ldr	r3, [pc, #420]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e628:	4a69      	ldr	r2, [pc, #420]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e62a:	589b      	ldr	r3, [r3, r2]
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	3330      	adds	r3, #48	@ 0x30
 800e630:	3204      	adds	r2, #4
 800e632:	ca03      	ldmia	r2!, {r0, r1}
 800e634:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e636:	e1a6      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e638:	2317      	movs	r3, #23
 800e63a:	18fb      	adds	r3, r7, r3
 800e63c:	2203      	movs	r2, #3
 800e63e:	701a      	strb	r2, [r3, #0]
            break;
 800e640:	e1a1      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	685a      	ldr	r2, [r3, #4]
 800e646:	210c      	movs	r1, #12
 800e648:	187b      	adds	r3, r7, r1
 800e64a:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800e64c:	187b      	adds	r3, r7, r1
 800e64e:	2201      	movs	r2, #1
 800e650:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 800e652:	4b5e      	ldr	r3, [pc, #376]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e654:	4a5e      	ldr	r2, [pc, #376]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e656:	589b      	ldr	r3, [r3, r2]
 800e658:	781b      	ldrb	r3, [r3, #0]
 800e65a:	187a      	adds	r2, r7, r1
 800e65c:	0011      	movs	r1, r2
 800e65e:	0018      	movs	r0, r3
 800e660:	f003 f85f 	bl	8011722 <RegionChanMaskSet>
 800e664:	0003      	movs	r3, r0
 800e666:	001a      	movs	r2, r3
 800e668:	2301      	movs	r3, #1
 800e66a:	4053      	eors	r3, r2
 800e66c:	b2db      	uxtb	r3, r3
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d100      	bne.n	800e674 <LoRaMacMibSetRequestConfirm+0x6b8>
 800e672:	e183      	b.n	800e97c <LoRaMacMibSetRequestConfirm+0x9c0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e674:	2317      	movs	r3, #23
 800e676:	18fb      	adds	r3, r7, r3
 800e678:	2203      	movs	r2, #3
 800e67a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e67c:	e17e      	b.n	800e97c <LoRaMacMibSetRequestConfirm+0x9c0>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	685a      	ldr	r2, [r3, #4]
 800e682:	210c      	movs	r1, #12
 800e684:	187b      	adds	r3, r7, r1
 800e686:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800e688:	187b      	adds	r3, r7, r1
 800e68a:	2200      	movs	r2, #0
 800e68c:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 800e68e:	4b4f      	ldr	r3, [pc, #316]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e690:	4a4f      	ldr	r2, [pc, #316]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e692:	589b      	ldr	r3, [r3, r2]
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	187a      	adds	r2, r7, r1
 800e698:	0011      	movs	r1, r2
 800e69a:	0018      	movs	r0, r3
 800e69c:	f003 f841 	bl	8011722 <RegionChanMaskSet>
 800e6a0:	0003      	movs	r3, r0
 800e6a2:	001a      	movs	r2, r3
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	4053      	eors	r3, r2
 800e6a8:	b2db      	uxtb	r3, r3
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d100      	bne.n	800e6b0 <LoRaMacMibSetRequestConfirm+0x6f4>
 800e6ae:	e167      	b.n	800e980 <LoRaMacMibSetRequestConfirm+0x9c4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e6b0:	2317      	movs	r3, #23
 800e6b2:	18fb      	adds	r3, r7, r3
 800e6b4:	2203      	movs	r2, #3
 800e6b6:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e6b8:	e162      	b.n	800e980 <LoRaMacMibSetRequestConfirm+0x9c4>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	791b      	ldrb	r3, [r3, #4]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d00c      	beq.n	800e6dc <LoRaMacMibSetRequestConfirm+0x720>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800e6c6:	2b0f      	cmp	r3, #15
 800e6c8:	d808      	bhi.n	800e6dc <LoRaMacMibSetRequestConfirm+0x720>
            {
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800e6ca:	4b40      	ldr	r3, [pc, #256]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e6cc:	4a40      	ldr	r2, [pc, #256]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e6ce:	589a      	ldr	r2, [r3, r2]
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	7919      	ldrb	r1, [r3, #4]
 800e6d4:	238c      	movs	r3, #140	@ 0x8c
 800e6d6:	005b      	lsls	r3, r3, #1
 800e6d8:	54d1      	strb	r1, [r2, r3]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e6da:	e154      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e6dc:	2317      	movs	r3, #23
 800e6de:	18fb      	adds	r3, r7, r3
 800e6e0:	2203      	movs	r2, #3
 800e6e2:	701a      	strb	r2, [r3, #0]
            break;
 800e6e4:	e14f      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800e6e6:	4b39      	ldr	r3, [pc, #228]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e6e8:	4a39      	ldr	r2, [pc, #228]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e6ea:	589a      	ldr	r2, [r3, r2]
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	6859      	ldr	r1, [r3, #4]
 800e6f0:	2382      	movs	r3, #130	@ 0x82
 800e6f2:	005b      	lsls	r3, r3, #1
 800e6f4:	50d1      	str	r1, [r2, r3]
            break;
 800e6f6:	e146      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800e6f8:	4b34      	ldr	r3, [pc, #208]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e6fa:	4a35      	ldr	r2, [pc, #212]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e6fc:	589a      	ldr	r2, [r3, r2]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6859      	ldr	r1, [r3, #4]
 800e702:	2384      	movs	r3, #132	@ 0x84
 800e704:	005b      	lsls	r3, r3, #1
 800e706:	50d1      	str	r1, [r2, r3]
            break;
 800e708:	e13d      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800e70a:	4b30      	ldr	r3, [pc, #192]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e70c:	4a30      	ldr	r2, [pc, #192]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e70e:	589a      	ldr	r2, [r3, r2]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6859      	ldr	r1, [r3, #4]
 800e714:	2386      	movs	r3, #134	@ 0x86
 800e716:	005b      	lsls	r3, r3, #1
 800e718:	50d1      	str	r1, [r2, r3]
            break;
 800e71a:	e134      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800e71c:	4b2b      	ldr	r3, [pc, #172]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e71e:	4a2c      	ldr	r2, [pc, #176]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e720:	589a      	ldr	r2, [r3, r2]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6859      	ldr	r1, [r3, #4]
 800e726:	2388      	movs	r3, #136	@ 0x88
 800e728:	005b      	lsls	r3, r3, #1
 800e72a:	50d1      	str	r1, [r2, r3]
            break;
 800e72c:	e12b      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800e72e:	4b27      	ldr	r3, [pc, #156]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e730:	4a27      	ldr	r2, [pc, #156]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e732:	589a      	ldr	r2, [r3, r2]
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6859      	ldr	r1, [r3, #4]
 800e738:	238a      	movs	r3, #138	@ 0x8a
 800e73a:	005b      	lsls	r3, r3, #1
 800e73c:	50d1      	str	r1, [r2, r3]
            break;
 800e73e:	e122      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2204      	movs	r2, #4
 800e744:	569a      	ldrsb	r2, [r3, r2]
 800e746:	2408      	movs	r4, #8
 800e748:	193b      	adds	r3, r7, r4
 800e74a:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 800e74c:	4b1f      	ldr	r3, [pc, #124]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e74e:	4a20      	ldr	r2, [pc, #128]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e750:	589b      	ldr	r3, [r3, r2]
 800e752:	781b      	ldrb	r3, [r3, #0]
 800e754:	1939      	adds	r1, r7, r4
 800e756:	2206      	movs	r2, #6
 800e758:	0018      	movs	r0, r3
 800e75a:	f002 ffb0 	bl	80116be <RegionVerify>
 800e75e:	1e03      	subs	r3, r0, #0
 800e760:	d007      	beq.n	800e772 <LoRaMacMibSetRequestConfirm+0x7b6>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 800e762:	4b1a      	ldr	r3, [pc, #104]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e764:	4a1a      	ldr	r2, [pc, #104]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e766:	589b      	ldr	r3, [r3, r2]
 800e768:	193a      	adds	r2, r7, r4
 800e76a:	7812      	ldrb	r2, [r2, #0]
 800e76c:	b252      	sxtb	r2, r2
 800e76e:	715a      	strb	r2, [r3, #5]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e770:	e109      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e772:	2317      	movs	r3, #23
 800e774:	18fb      	adds	r3, r7, r3
 800e776:	2203      	movs	r2, #3
 800e778:	701a      	strb	r2, [r3, #0]
            break;
 800e77a:	e104      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2204      	movs	r2, #4
 800e780:	569a      	ldrsb	r2, [r3, r2]
 800e782:	2408      	movs	r4, #8
 800e784:	193b      	adds	r3, r7, r4
 800e786:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800e788:	4b10      	ldr	r3, [pc, #64]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e78a:	4a11      	ldr	r2, [pc, #68]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e78c:	589a      	ldr	r2, [r3, r2]
 800e78e:	2396      	movs	r3, #150	@ 0x96
 800e790:	005b      	lsls	r3, r3, #1
 800e792:	5cd2      	ldrb	r2, [r2, r3]
 800e794:	193b      	adds	r3, r7, r4
 800e796:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800e798:	4b0c      	ldr	r3, [pc, #48]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e79a:	4a0d      	ldr	r2, [pc, #52]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e79c:	589b      	ldr	r3, [r3, r2]
 800e79e:	781b      	ldrb	r3, [r3, #0]
 800e7a0:	1939      	adds	r1, r7, r4
 800e7a2:	2205      	movs	r2, #5
 800e7a4:	0018      	movs	r0, r3
 800e7a6:	f002 ff8a 	bl	80116be <RegionVerify>
 800e7aa:	1e03      	subs	r3, r0, #0
 800e7ac:	d008      	beq.n	800e7c0 <LoRaMacMibSetRequestConfirm+0x804>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800e7ae:	4b07      	ldr	r3, [pc, #28]	@ (800e7cc <LoRaMacMibSetRequestConfirm+0x810>)
 800e7b0:	4a07      	ldr	r2, [pc, #28]	@ (800e7d0 <LoRaMacMibSetRequestConfirm+0x814>)
 800e7b2:	589b      	ldr	r3, [r3, r2]
 800e7b4:	193a      	adds	r2, r7, r4
 800e7b6:	2100      	movs	r1, #0
 800e7b8:	5651      	ldrsb	r1, [r2, r1]
 800e7ba:	22f9      	movs	r2, #249	@ 0xf9
 800e7bc:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e7be:	e0e2      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e7c0:	2317      	movs	r3, #23
 800e7c2:	18fb      	adds	r3, r7, r3
 800e7c4:	2203      	movs	r2, #3
 800e7c6:	701a      	strb	r2, [r3, #0]
            break;
 800e7c8:	e0dd      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
 800e7ca:	46c0      	nop			@ (mov r8, r8)
 800e7cc:	20000940 	.word	0x20000940
 800e7d0:	00000484 	.word	0x00000484
 800e7d4:	0801ac88 	.word	0x0801ac88
 800e7d8:	20000d20 	.word	0x20000d20
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2204      	movs	r2, #4
 800e7e0:	569a      	ldrsb	r2, [r3, r2]
 800e7e2:	2408      	movs	r4, #8
 800e7e4:	193b      	adds	r3, r7, r4
 800e7e6:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 800e7e8:	4b6c      	ldr	r3, [pc, #432]	@ (800e99c <LoRaMacMibSetRequestConfirm+0x9e0>)
 800e7ea:	4a6d      	ldr	r2, [pc, #436]	@ (800e9a0 <LoRaMacMibSetRequestConfirm+0x9e4>)
 800e7ec:	589b      	ldr	r3, [r3, r2]
 800e7ee:	781b      	ldrb	r3, [r3, #0]
 800e7f0:	1939      	adds	r1, r7, r4
 800e7f2:	220a      	movs	r2, #10
 800e7f4:	0018      	movs	r0, r3
 800e7f6:	f002 ff62 	bl	80116be <RegionVerify>
 800e7fa:	1e03      	subs	r3, r0, #0
 800e7fc:	d007      	beq.n	800e80e <LoRaMacMibSetRequestConfirm+0x852>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 800e7fe:	4b67      	ldr	r3, [pc, #412]	@ (800e99c <LoRaMacMibSetRequestConfirm+0x9e0>)
 800e800:	4a67      	ldr	r2, [pc, #412]	@ (800e9a0 <LoRaMacMibSetRequestConfirm+0x9e4>)
 800e802:	589b      	ldr	r3, [r3, r2]
 800e804:	193a      	adds	r2, r7, r4
 800e806:	7812      	ldrb	r2, [r2, #0]
 800e808:	b252      	sxtb	r2, r2
 800e80a:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e80c:	e0bb      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e80e:	2317      	movs	r3, #23
 800e810:	18fb      	adds	r3, r7, r3
 800e812:	2203      	movs	r2, #3
 800e814:	701a      	strb	r2, [r3, #0]
            break;
 800e816:	e0b6      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2204      	movs	r2, #4
 800e81c:	569a      	ldrsb	r2, [r3, r2]
 800e81e:	2408      	movs	r4, #8
 800e820:	193b      	adds	r3, r7, r4
 800e822:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 800e824:	4b5d      	ldr	r3, [pc, #372]	@ (800e99c <LoRaMacMibSetRequestConfirm+0x9e0>)
 800e826:	4a5e      	ldr	r2, [pc, #376]	@ (800e9a0 <LoRaMacMibSetRequestConfirm+0x9e4>)
 800e828:	589b      	ldr	r3, [r3, r2]
 800e82a:	781b      	ldrb	r3, [r3, #0]
 800e82c:	1939      	adds	r1, r7, r4
 800e82e:	2209      	movs	r2, #9
 800e830:	0018      	movs	r0, r3
 800e832:	f002 ff44 	bl	80116be <RegionVerify>
 800e836:	1e03      	subs	r3, r0, #0
 800e838:	d008      	beq.n	800e84c <LoRaMacMibSetRequestConfirm+0x890>
            {
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 800e83a:	4b58      	ldr	r3, [pc, #352]	@ (800e99c <LoRaMacMibSetRequestConfirm+0x9e0>)
 800e83c:	4a58      	ldr	r2, [pc, #352]	@ (800e9a0 <LoRaMacMibSetRequestConfirm+0x9e4>)
 800e83e:	589b      	ldr	r3, [r3, r2]
 800e840:	193a      	adds	r2, r7, r4
 800e842:	2100      	movs	r1, #0
 800e844:	5651      	ldrsb	r1, [r2, r1]
 800e846:	22f8      	movs	r2, #248	@ 0xf8
 800e848:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e84a:	e09c      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e84c:	2317      	movs	r3, #23
 800e84e:	18fb      	adds	r3, r7, r3
 800e850:	2203      	movs	r2, #3
 800e852:	701a      	strb	r2, [r3, #0]
            break;
 800e854:	e097      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800e856:	4b51      	ldr	r3, [pc, #324]	@ (800e99c <LoRaMacMibSetRequestConfirm+0x9e0>)
 800e858:	4a51      	ldr	r2, [pc, #324]	@ (800e9a0 <LoRaMacMibSetRequestConfirm+0x9e4>)
 800e85a:	589b      	ldr	r3, [r3, r2]
 800e85c:	687a      	ldr	r2, [r7, #4]
 800e85e:	6852      	ldr	r2, [r2, #4]
 800e860:	609a      	str	r2, [r3, #8]
 800e862:	4a4e      	ldr	r2, [pc, #312]	@ (800e99c <LoRaMacMibSetRequestConfirm+0x9e0>)
 800e864:	494e      	ldr	r1, [pc, #312]	@ (800e9a0 <LoRaMacMibSetRequestConfirm+0x9e4>)
 800e866:	5852      	ldr	r2, [r2, r1]
 800e868:	689b      	ldr	r3, [r3, #8]
 800e86a:	21fc      	movs	r1, #252	@ 0xfc
 800e86c:	5053      	str	r3, [r2, r1]
            break;
 800e86e:	e08a      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800e870:	4b4a      	ldr	r3, [pc, #296]	@ (800e99c <LoRaMacMibSetRequestConfirm+0x9e0>)
 800e872:	4a4b      	ldr	r2, [pc, #300]	@ (800e9a0 <LoRaMacMibSetRequestConfirm+0x9e4>)
 800e874:	589b      	ldr	r3, [r3, r2]
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	7912      	ldrb	r2, [r2, #4]
 800e87a:	731a      	strb	r2, [r3, #12]
 800e87c:	4a47      	ldr	r2, [pc, #284]	@ (800e99c <LoRaMacMibSetRequestConfirm+0x9e0>)
 800e87e:	4948      	ldr	r1, [pc, #288]	@ (800e9a0 <LoRaMacMibSetRequestConfirm+0x9e4>)
 800e880:	5852      	ldr	r2, [r2, r1]
 800e882:	7b19      	ldrb	r1, [r3, #12]
 800e884:	2380      	movs	r3, #128	@ 0x80
 800e886:	005b      	lsls	r3, r3, #1
 800e888:	54d1      	strb	r1, [r2, r3]
            break;
 800e88a:	e07c      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800e88c:	4b43      	ldr	r3, [pc, #268]	@ (800e99c <LoRaMacMibSetRequestConfirm+0x9e0>)
 800e88e:	4a44      	ldr	r2, [pc, #272]	@ (800e9a0 <LoRaMacMibSetRequestConfirm+0x9e4>)
 800e890:	589a      	ldr	r2, [r3, r2]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6859      	ldr	r1, [r3, #4]
 800e896:	239a      	movs	r3, #154	@ 0x9a
 800e898:	005b      	lsls	r3, r3, #1
 800e89a:	50d1      	str	r1, [r2, r3]
            break;
 800e89c:	e073      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800e89e:	4b3f      	ldr	r3, [pc, #252]	@ (800e99c <LoRaMacMibSetRequestConfirm+0x9e0>)
 800e8a0:	4a3f      	ldr	r2, [pc, #252]	@ (800e9a0 <LoRaMacMibSetRequestConfirm+0x9e4>)
 800e8a2:	589b      	ldr	r3, [r3, r2]
 800e8a4:	687a      	ldr	r2, [r7, #4]
 800e8a6:	6852      	ldr	r2, [r2, #4]
 800e8a8:	641a      	str	r2, [r3, #64]	@ 0x40
            break;
 800e8aa:	e06c      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d009      	beq.n	800e8c8 <LoRaMacMibSetRequestConfirm+0x90c>
            {
                status = RestoreCtxs( mibSet->Param.Contexts );
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	685b      	ldr	r3, [r3, #4]
 800e8b8:	2217      	movs	r2, #23
 800e8ba:	18bc      	adds	r4, r7, r2
 800e8bc:	0018      	movs	r0, r3
 800e8be:	f7fe fb55 	bl	800cf6c <RestoreCtxs>
 800e8c2:	0003      	movs	r3, r0
 800e8c4:	7023      	strb	r3, [r4, #0]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e8c6:	e05e      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e8c8:	2317      	movs	r3, #23
 800e8ca:	18fb      	adds	r3, r7, r3
 800e8cc:	2203      	movs	r2, #3
 800e8ce:	701a      	strb	r2, [r3, #0]
            break;
 800e8d0:	e059      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	799b      	ldrb	r3, [r3, #6]
 800e8d6:	2b01      	cmp	r3, #1
 800e8d8:	d810      	bhi.n	800e8fc <LoRaMacMibSetRequestConfirm+0x940>
            {
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 800e8da:	4b30      	ldr	r3, [pc, #192]	@ (800e99c <LoRaMacMibSetRequestConfirm+0x9e0>)
 800e8dc:	4a30      	ldr	r2, [pc, #192]	@ (800e9a0 <LoRaMacMibSetRequestConfirm+0x9e4>)
 800e8de:	5899      	ldr	r1, [r3, r2]
 800e8e0:	23e8      	movs	r3, #232	@ 0xe8
 800e8e2:	005a      	lsls	r2, r3, #1
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	685b      	ldr	r3, [r3, #4]
 800e8e8:	508b      	str	r3, [r1, r2]

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	0018      	movs	r0, r3
 800e8f0:	f001 fd98 	bl	8010424 <LoRaMacCryptoSetLrWanVersion>
 800e8f4:	1e03      	subs	r3, r0, #0
 800e8f6:	d045      	beq.n	800e984 <LoRaMacMibSetRequestConfirm+0x9c8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e8f8:	2311      	movs	r3, #17
 800e8fa:	e04b      	b.n	800e994 <LoRaMacMibSetRequestConfirm+0x9d8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e8fc:	2317      	movs	r3, #23
 800e8fe:	18fb      	adds	r3, r7, r3
 800e900:	2203      	movs	r2, #3
 800e902:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e904:	e03e      	b.n	800e984 <LoRaMacMibSetRequestConfirm+0x9c8>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800e906:	2317      	movs	r3, #23
 800e908:	18fc      	adds	r4, r7, r3
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	0018      	movs	r0, r3
 800e90e:	f000 fc75 	bl	800f1fc <LoRaMacMibClassBSetRequestConfirm>
 800e912:	0003      	movs	r3, r0
 800e914:	7023      	strb	r3, [r4, #0]
            break;
 800e916:	e036      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e918:	46c0      	nop			@ (mov r8, r8)
 800e91a:	e034      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e91c:	46c0      	nop			@ (mov r8, r8)
 800e91e:	e032      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e920:	46c0      	nop			@ (mov r8, r8)
 800e922:	e030      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e924:	46c0      	nop			@ (mov r8, r8)
 800e926:	e02e      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e928:	46c0      	nop			@ (mov r8, r8)
 800e92a:	e02c      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e92c:	46c0      	nop			@ (mov r8, r8)
 800e92e:	e02a      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e930:	46c0      	nop			@ (mov r8, r8)
 800e932:	e028      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e934:	46c0      	nop			@ (mov r8, r8)
 800e936:	e026      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e938:	46c0      	nop			@ (mov r8, r8)
 800e93a:	e024      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e93c:	46c0      	nop			@ (mov r8, r8)
 800e93e:	e022      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e940:	46c0      	nop			@ (mov r8, r8)
 800e942:	e020      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e944:	46c0      	nop			@ (mov r8, r8)
 800e946:	e01e      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e948:	46c0      	nop			@ (mov r8, r8)
 800e94a:	e01c      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e94c:	46c0      	nop			@ (mov r8, r8)
 800e94e:	e01a      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e950:	46c0      	nop			@ (mov r8, r8)
 800e952:	e018      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e954:	46c0      	nop			@ (mov r8, r8)
 800e956:	e016      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e958:	46c0      	nop			@ (mov r8, r8)
 800e95a:	e014      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e95c:	46c0      	nop			@ (mov r8, r8)
 800e95e:	e012      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e960:	46c0      	nop			@ (mov r8, r8)
 800e962:	e010      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e964:	46c0      	nop			@ (mov r8, r8)
 800e966:	e00e      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e968:	46c0      	nop			@ (mov r8, r8)
 800e96a:	e00c      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e96c:	46c0      	nop			@ (mov r8, r8)
 800e96e:	e00a      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e970:	46c0      	nop			@ (mov r8, r8)
 800e972:	e008      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e974:	46c0      	nop			@ (mov r8, r8)
 800e976:	e006      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e978:	46c0      	nop			@ (mov r8, r8)
 800e97a:	e004      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e97c:	46c0      	nop			@ (mov r8, r8)
 800e97e:	e002      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e980:	46c0      	nop			@ (mov r8, r8)
 800e982:	e000      	b.n	800e986 <LoRaMacMibSetRequestConfirm+0x9ca>
            break;
 800e984:	46c0      	nop			@ (mov r8, r8)
        }
    }
    EventRegionNvmCtxChanged( );
 800e986:	f7fe fd0d 	bl	800d3a4 <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 800e98a:	f7fe fd03 	bl	800d394 <EventMacNvmCtxChanged>
    return status;
 800e98e:	2317      	movs	r3, #23
 800e990:	18fb      	adds	r3, r7, r3
 800e992:	781b      	ldrb	r3, [r3, #0]
}
 800e994:	0018      	movs	r0, r3
 800e996:	46bd      	mov	sp, r7
 800e998:	b007      	add	sp, #28
 800e99a:	bd90      	pop	{r4, r7, pc}
 800e99c:	20000940 	.word	0x20000940
 800e9a0:	00000484 	.word	0x00000484

0800e9a4 <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800e9a4:	b5b0      	push	{r4, r5, r7, lr}
 800e9a6:	b086      	sub	sp, #24
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800e9ac:	2317      	movs	r3, #23
 800e9ae:	18fb      	adds	r3, r7, r3
 800e9b0:	2202      	movs	r2, #2
 800e9b2:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800e9b4:	230c      	movs	r3, #12
 800e9b6:	18fb      	adds	r3, r7, r3
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	801a      	strh	r2, [r3, #0]

    if( mlmeRequest == NULL )
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d101      	bne.n	800e9c6 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e9c2:	2303      	movs	r3, #3
 800e9c4:	e12d      	b.n	800ec22 <LoRaMacMlmeRequest+0x27e>
    }
    if( LoRaMacIsBusy( ) == true )
 800e9c6:	f7fb ff51 	bl	800a86c <LoRaMacIsBusy>
 800e9ca:	1e03      	subs	r3, r0, #0
 800e9cc:	d001      	beq.n	800e9d2 <LoRaMacMlmeRequest+0x2e>
    {
        return LORAMAC_STATUS_BUSY;
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	e127      	b.n	800ec22 <LoRaMacMlmeRequest+0x27e>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800e9d2:	f001 f917 	bl	800fc04 <LoRaMacConfirmQueueIsFull>
 800e9d6:	1e03      	subs	r3, r0, #0
 800e9d8:	d001      	beq.n	800e9de <LoRaMacMlmeRequest+0x3a>
    {
        return LORAMAC_STATUS_BUSY;
 800e9da:	2301      	movs	r3, #1
 800e9dc:	e121      	b.n	800ec22 <LoRaMacMlmeRequest+0x27e>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800e9de:	f001 f907 	bl	800fbf0 <LoRaMacConfirmQueueGetCnt>
 800e9e2:	1e03      	subs	r3, r0, #0
 800e9e4:	d105      	bne.n	800e9f2 <LoRaMacMlmeRequest+0x4e>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800e9e6:	4b91      	ldr	r3, [pc, #580]	@ (800ec2c <LoRaMacMlmeRequest+0x288>)
 800e9e8:	2214      	movs	r2, #20
 800e9ea:	2100      	movs	r1, #0
 800e9ec:	0018      	movs	r0, r3
 800e9ee:	f006 fe01 	bl	80155f4 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e9f2:	4b8f      	ldr	r3, [pc, #572]	@ (800ec30 <LoRaMacMlmeRequest+0x28c>)
 800e9f4:	4a8f      	ldr	r2, [pc, #572]	@ (800ec34 <LoRaMacMlmeRequest+0x290>)
 800e9f6:	2101      	movs	r1, #1
 800e9f8:	5499      	strb	r1, [r3, r2]

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e9fa:	4b8d      	ldr	r3, [pc, #564]	@ (800ec30 <LoRaMacMlmeRequest+0x28c>)
 800e9fc:	4a8e      	ldr	r2, [pc, #568]	@ (800ec38 <LoRaMacMlmeRequest+0x294>)
 800e9fe:	5c99      	ldrb	r1, [r3, r2]
 800ea00:	2004      	movs	r0, #4
 800ea02:	4301      	orrs	r1, r0
 800ea04:	5499      	strb	r1, [r3, r2]
    queueElement.Request = mlmeRequest->Type;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	781a      	ldrb	r2, [r3, #0]
 800ea0a:	2110      	movs	r1, #16
 800ea0c:	187b      	adds	r3, r7, r1
 800ea0e:	701a      	strb	r2, [r3, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ea10:	187b      	adds	r3, r7, r1
 800ea12:	2201      	movs	r2, #1
 800ea14:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 800ea16:	187b      	adds	r3, r7, r1
 800ea18:	2200      	movs	r2, #0
 800ea1a:	70da      	strb	r2, [r3, #3]

    switch( mlmeRequest->Type )
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	781b      	ldrb	r3, [r3, #0]
 800ea20:	2b0d      	cmp	r3, #13
 800ea22:	d900      	bls.n	800ea26 <LoRaMacMlmeRequest+0x82>
 800ea24:	e0d4      	b.n	800ebd0 <LoRaMacMlmeRequest+0x22c>
 800ea26:	009a      	lsls	r2, r3, #2
 800ea28:	4b84      	ldr	r3, [pc, #528]	@ (800ec3c <LoRaMacMlmeRequest+0x298>)
 800ea2a:	18d3      	adds	r3, r2, r3
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	469f      	mov	pc, r3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800ea30:	4a7f      	ldr	r2, [pc, #508]	@ (800ec30 <LoRaMacMlmeRequest+0x28c>)
 800ea32:	23d0      	movs	r3, #208	@ 0xd0
 800ea34:	009b      	lsls	r3, r3, #2
 800ea36:	58d3      	ldr	r3, [r2, r3]
 800ea38:	2220      	movs	r2, #32
 800ea3a:	4013      	ands	r3, r2
 800ea3c:	d001      	beq.n	800ea42 <LoRaMacMlmeRequest+0x9e>
            {
                return LORAMAC_STATUS_BUSY;
 800ea3e:	2301      	movs	r3, #1
 800ea40:	e0ef      	b.n	800ec22 <LoRaMacMlmeRequest+0x27e>
            }

            ResetMacParameters( );
 800ea42:	f7fd fe3f 	bl	800c6c4 <ResetMacParameters>

            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800ea46:	4b7a      	ldr	r3, [pc, #488]	@ (800ec30 <LoRaMacMlmeRequest+0x28c>)
 800ea48:	4a7d      	ldr	r2, [pc, #500]	@ (800ec40 <LoRaMacMlmeRequest+0x29c>)
 800ea4a:	589b      	ldr	r3, [r3, r2]
 800ea4c:	7818      	ldrb	r0, [r3, #0]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	791b      	ldrb	r3, [r3, #4]
 800ea52:	b259      	sxtb	r1, r3
 800ea54:	4b76      	ldr	r3, [pc, #472]	@ (800ec30 <LoRaMacMlmeRequest+0x28c>)
 800ea56:	4a7a      	ldr	r2, [pc, #488]	@ (800ec40 <LoRaMacMlmeRequest+0x29c>)
 800ea58:	589c      	ldr	r4, [r3, r2]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	f002 ff46 	bl	80118ec <RegionAlternateDr>
 800ea60:	0003      	movs	r3, r0
 800ea62:	001a      	movs	r2, r3
 800ea64:	23f9      	movs	r3, #249	@ 0xf9
 800ea66:	54e2      	strb	r2, [r4, r3]

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800ea68:	2310      	movs	r3, #16
 800ea6a:	18fb      	adds	r3, r7, r3
 800ea6c:	2207      	movs	r2, #7
 800ea6e:	705a      	strb	r2, [r3, #1]

            status = SendReJoinReq( JOIN_REQ );
 800ea70:	2517      	movs	r5, #23
 800ea72:	197c      	adds	r4, r7, r5
 800ea74:	20ff      	movs	r0, #255	@ 0xff
 800ea76:	f7fd fb51 	bl	800c11c <SendReJoinReq>
 800ea7a:	0003      	movs	r3, r0
 800ea7c:	7023      	strb	r3, [r4, #0]

            if( status != LORAMAC_STATUS_OK )
 800ea7e:	197b      	adds	r3, r7, r5
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d100      	bne.n	800ea88 <LoRaMacMlmeRequest+0xe4>
 800ea86:	e0a5      	b.n	800ebd4 <LoRaMacMlmeRequest+0x230>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800ea88:	4b69      	ldr	r3, [pc, #420]	@ (800ec30 <LoRaMacMlmeRequest+0x28c>)
 800ea8a:	4a6d      	ldr	r2, [pc, #436]	@ (800ec40 <LoRaMacMlmeRequest+0x29c>)
 800ea8c:	589b      	ldr	r3, [r3, r2]
 800ea8e:	7818      	ldrb	r0, [r3, #0]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	791b      	ldrb	r3, [r3, #4]
 800ea94:	b259      	sxtb	r1, r3
 800ea96:	4b66      	ldr	r3, [pc, #408]	@ (800ec30 <LoRaMacMlmeRequest+0x28c>)
 800ea98:	4a69      	ldr	r2, [pc, #420]	@ (800ec40 <LoRaMacMlmeRequest+0x29c>)
 800ea9a:	589c      	ldr	r4, [r3, r2]
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	f002 ff25 	bl	80118ec <RegionAlternateDr>
 800eaa2:	0003      	movs	r3, r0
 800eaa4:	001a      	movs	r2, r3
 800eaa6:	23f9      	movs	r3, #249	@ 0xf9
 800eaa8:	54e2      	strb	r2, [r4, r3]
            }
            break;
 800eaaa:	e093      	b.n	800ebd4 <LoRaMacMlmeRequest+0x230>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800eaac:	2417      	movs	r4, #23
 800eaae:	193b      	adds	r3, r7, r4
 800eab0:	2200      	movs	r2, #0
 800eab2:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800eab4:	230c      	movs	r3, #12
 800eab6:	18fb      	adds	r3, r7, r3
 800eab8:	2200      	movs	r2, #0
 800eaba:	0019      	movs	r1, r3
 800eabc:	2002      	movs	r0, #2
 800eabe:	f000 fd55 	bl	800f56c <LoRaMacCommandsAddCmd>
 800eac2:	1e03      	subs	r3, r0, #0
 800eac4:	d100      	bne.n	800eac8 <LoRaMacMlmeRequest+0x124>
 800eac6:	e087      	b.n	800ebd8 <LoRaMacMlmeRequest+0x234>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800eac8:	193b      	adds	r3, r7, r4
 800eaca:	2213      	movs	r2, #19
 800eacc:	701a      	strb	r2, [r3, #0]
            }
            break;
 800eace:	e083      	b.n	800ebd8 <LoRaMacMlmeRequest+0x234>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	889b      	ldrh	r3, [r3, #4]
 800ead4:	2217      	movs	r2, #23
 800ead6:	18bc      	adds	r4, r7, r2
 800ead8:	0018      	movs	r0, r3
 800eada:	f7fe f97b 	bl	800cdd4 <SetTxContinuousWave>
 800eade:	0003      	movs	r3, r0
 800eae0:	7023      	strb	r3, [r4, #0]
            break;
 800eae2:	e080      	b.n	800ebe6 <LoRaMacMlmeRequest+0x242>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	8898      	ldrh	r0, [r3, #4]
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	6899      	ldr	r1, [r3, #8]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	7b1b      	ldrb	r3, [r3, #12]
 800eaf0:	2217      	movs	r2, #23
 800eaf2:	18bc      	adds	r4, r7, r2
 800eaf4:	001a      	movs	r2, r3
 800eaf6:	f7fe f9bb 	bl	800ce70 <SetTxContinuousWave1>
 800eafa:	0003      	movs	r3, r0
 800eafc:	7023      	strb	r3, [r4, #0]
            break;
 800eafe:	e072      	b.n	800ebe6 <LoRaMacMlmeRequest+0x242>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800eb00:	2417      	movs	r4, #23
 800eb02:	193b      	adds	r3, r7, r4
 800eb04:	2200      	movs	r2, #0
 800eb06:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800eb08:	230c      	movs	r3, #12
 800eb0a:	18fb      	adds	r3, r7, r3
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	0019      	movs	r1, r3
 800eb10:	200d      	movs	r0, #13
 800eb12:	f000 fd2b 	bl	800f56c <LoRaMacCommandsAddCmd>
 800eb16:	1e03      	subs	r3, r0, #0
 800eb18:	d060      	beq.n	800ebdc <LoRaMacMlmeRequest+0x238>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800eb1a:	193b      	adds	r3, r7, r4
 800eb1c:	2213      	movs	r2, #19
 800eb1e:	701a      	strb	r2, [r3, #0]
            }
            break;
 800eb20:	e05c      	b.n	800ebdc <LoRaMacMlmeRequest+0x238>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800eb22:	4b43      	ldr	r3, [pc, #268]	@ (800ec30 <LoRaMacMlmeRequest+0x28c>)
 800eb24:	4a46      	ldr	r2, [pc, #280]	@ (800ec40 <LoRaMacMlmeRequest+0x29c>)
 800eb26:	589b      	ldr	r3, [r3, r2]
 800eb28:	22f0      	movs	r2, #240	@ 0xf0
 800eb2a:	5c9b      	ldrb	r3, [r3, r2]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d157      	bne.n	800ebe0 <LoRaMacMlmeRequest+0x23c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800eb30:	2416      	movs	r4, #22
 800eb32:	193b      	adds	r3, r7, r4
 800eb34:	687a      	ldr	r2, [r7, #4]
 800eb36:	7912      	ldrb	r2, [r2, #4]
 800eb38:	701a      	strb	r2, [r3, #0]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	791b      	ldrb	r3, [r3, #4]
 800eb3e:	075b      	lsls	r3, r3, #29
 800eb40:	0f5b      	lsrs	r3, r3, #29
 800eb42:	b2db      	uxtb	r3, r3
 800eb44:	0018      	movs	r0, r3
 800eb46:	f000 fb31 	bl	800f1ac <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800eb4a:	210c      	movs	r1, #12
 800eb4c:	187b      	adds	r3, r7, r1
 800eb4e:	193a      	adds	r2, r7, r4
 800eb50:	7812      	ldrb	r2, [r2, #0]
 800eb52:	701a      	strb	r2, [r3, #0]
                status = LORAMAC_STATUS_OK;
 800eb54:	2417      	movs	r4, #23
 800eb56:	193b      	adds	r3, r7, r4
 800eb58:	2200      	movs	r2, #0
 800eb5a:	701a      	strb	r2, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800eb5c:	187b      	adds	r3, r7, r1
 800eb5e:	2201      	movs	r2, #1
 800eb60:	0019      	movs	r1, r3
 800eb62:	2010      	movs	r0, #16
 800eb64:	f000 fd02 	bl	800f56c <LoRaMacCommandsAddCmd>
 800eb68:	1e03      	subs	r3, r0, #0
 800eb6a:	d039      	beq.n	800ebe0 <LoRaMacMlmeRequest+0x23c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800eb6c:	193b      	adds	r3, r7, r4
 800eb6e:	2213      	movs	r2, #19
 800eb70:	701a      	strb	r2, [r3, #0]
                }
            }
            break;
 800eb72:	e035      	b.n	800ebe0 <LoRaMacMlmeRequest+0x23c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800eb74:	2417      	movs	r4, #23
 800eb76:	193b      	adds	r3, r7, r4
 800eb78:	2200      	movs	r2, #0
 800eb7a:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800eb7c:	230c      	movs	r3, #12
 800eb7e:	18fb      	adds	r3, r7, r3
 800eb80:	2200      	movs	r2, #0
 800eb82:	0019      	movs	r1, r3
 800eb84:	2012      	movs	r0, #18
 800eb86:	f000 fcf1 	bl	800f56c <LoRaMacCommandsAddCmd>
 800eb8a:	1e03      	subs	r3, r0, #0
 800eb8c:	d02a      	beq.n	800ebe4 <LoRaMacMlmeRequest+0x240>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800eb8e:	193b      	adds	r3, r7, r4
 800eb90:	2213      	movs	r2, #19
 800eb92:	701a      	strb	r2, [r3, #0]
            }
            break;
 800eb94:	e026      	b.n	800ebe4 <LoRaMacMlmeRequest+0x240>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 800eb96:	2310      	movs	r3, #16
 800eb98:	18fb      	adds	r3, r7, r3
 800eb9a:	2201      	movs	r2, #1
 800eb9c:	70da      	strb	r2, [r3, #3]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800eb9e:	f000 fac3 	bl	800f128 <LoRaMacClassBIsAcquisitionInProgress>
 800eba2:	0003      	movs	r3, r0
 800eba4:	001a      	movs	r2, r3
 800eba6:	2301      	movs	r3, #1
 800eba8:	4053      	eors	r3, r2
 800ebaa:	b2db      	uxtb	r3, r3
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d00a      	beq.n	800ebc6 <LoRaMacMlmeRequest+0x222>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800ebb0:	2000      	movs	r0, #0
 800ebb2:	f000 fa9b 	bl	800f0ec <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800ebb6:	2000      	movs	r0, #0
 800ebb8:	f000 fabc 	bl	800f134 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 800ebbc:	2317      	movs	r3, #23
 800ebbe:	18fb      	adds	r3, r7, r3
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 800ebc4:	e00f      	b.n	800ebe6 <LoRaMacMlmeRequest+0x242>
                status = LORAMAC_STATUS_BUSY;
 800ebc6:	2317      	movs	r3, #23
 800ebc8:	18fb      	adds	r3, r7, r3
 800ebca:	2201      	movs	r2, #1
 800ebcc:	701a      	strb	r2, [r3, #0]
            break;
 800ebce:	e00a      	b.n	800ebe6 <LoRaMacMlmeRequest+0x242>
        }
        default:
            break;
 800ebd0:	46c0      	nop			@ (mov r8, r8)
 800ebd2:	e008      	b.n	800ebe6 <LoRaMacMlmeRequest+0x242>
            break;
 800ebd4:	46c0      	nop			@ (mov r8, r8)
 800ebd6:	e006      	b.n	800ebe6 <LoRaMacMlmeRequest+0x242>
            break;
 800ebd8:	46c0      	nop			@ (mov r8, r8)
 800ebda:	e004      	b.n	800ebe6 <LoRaMacMlmeRequest+0x242>
            break;
 800ebdc:	46c0      	nop			@ (mov r8, r8)
 800ebde:	e002      	b.n	800ebe6 <LoRaMacMlmeRequest+0x242>
            break;
 800ebe0:	46c0      	nop			@ (mov r8, r8)
 800ebe2:	e000      	b.n	800ebe6 <LoRaMacMlmeRequest+0x242>
            break;
 800ebe4:	46c0      	nop			@ (mov r8, r8)
    }

    if( status != LORAMAC_STATUS_OK )
 800ebe6:	2317      	movs	r3, #23
 800ebe8:	18fb      	adds	r3, r7, r3
 800ebea:	781b      	ldrb	r3, [r3, #0]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d00e      	beq.n	800ec0e <LoRaMacMlmeRequest+0x26a>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800ebf0:	f000 fffe 	bl	800fbf0 <LoRaMacConfirmQueueGetCnt>
 800ebf4:	1e03      	subs	r3, r0, #0
 800ebf6:	d111      	bne.n	800ec1c <LoRaMacMlmeRequest+0x278>
        {
            MacCtx.NodeAckRequested = false;
 800ebf8:	4b0d      	ldr	r3, [pc, #52]	@ (800ec30 <LoRaMacMlmeRequest+0x28c>)
 800ebfa:	4a12      	ldr	r2, [pc, #72]	@ (800ec44 <LoRaMacMlmeRequest+0x2a0>)
 800ebfc:	2100      	movs	r1, #0
 800ebfe:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800ec00:	4b0b      	ldr	r3, [pc, #44]	@ (800ec30 <LoRaMacMlmeRequest+0x28c>)
 800ec02:	4a0d      	ldr	r2, [pc, #52]	@ (800ec38 <LoRaMacMlmeRequest+0x294>)
 800ec04:	5c99      	ldrb	r1, [r3, r2]
 800ec06:	2004      	movs	r0, #4
 800ec08:	4381      	bics	r1, r0
 800ec0a:	5499      	strb	r1, [r3, r2]
 800ec0c:	e006      	b.n	800ec1c <LoRaMacMlmeRequest+0x278>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 800ec0e:	2310      	movs	r3, #16
 800ec10:	18fb      	adds	r3, r7, r3
 800ec12:	0018      	movs	r0, r3
 800ec14:	f000 fe9a 	bl	800f94c <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 800ec18:	f7fe fbbc 	bl	800d394 <EventMacNvmCtxChanged>
    }
    return status;
 800ec1c:	2317      	movs	r3, #23
 800ec1e:	18fb      	adds	r3, r7, r3
 800ec20:	781b      	ldrb	r3, [r3, #0]
}
 800ec22:	0018      	movs	r0, r3
 800ec24:	46bd      	mov	sp, r7
 800ec26:	b006      	add	sp, #24
 800ec28:	bdb0      	pop	{r4, r5, r7, pc}
 800ec2a:	46c0      	nop			@ (mov r8, r8)
 800ec2c:	20000d90 	.word	0x20000d90
 800ec30:	20000940 	.word	0x20000940
 800ec34:	00000451 	.word	0x00000451
 800ec38:	00000481 	.word	0x00000481
 800ec3c:	0801b344 	.word	0x0801b344
 800ec40:	00000484 	.word	0x00000484
 800ec44:	00000414 	.word	0x00000414

0800ec48 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
 800ec48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec4a:	b08b      	sub	sp, #44	@ 0x2c
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ec50:	2327      	movs	r3, #39	@ 0x27
 800ec52:	18fb      	adds	r3, r7, r3
 800ec54:	2202      	movs	r2, #2
 800ec56:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 800ec58:	2326      	movs	r3, #38	@ 0x26
 800ec5a:	18fb      	adds	r3, r7, r3
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	701a      	strb	r2, [r3, #0]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 800ec60:	231d      	movs	r3, #29
 800ec62:	18fb      	adds	r3, r7, r3
 800ec64:	2200      	movs	r2, #0
 800ec66:	701a      	strb	r2, [r3, #0]
    bool readyToSend = false;
 800ec68:	231c      	movs	r3, #28
 800ec6a:	18fb      	adds	r3, r7, r3
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	701a      	strb	r2, [r3, #0]

    if( mcpsRequest == NULL )
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d101      	bne.n	800ec7a <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ec76:	2303      	movs	r3, #3
 800ec78:	e115      	b.n	800eea6 <LoRaMacMcpsRequest+0x25e>
    }
    if( LoRaMacIsBusy( ) == true )
 800ec7a:	f7fb fdf7 	bl	800a86c <LoRaMacIsBusy>
 800ec7e:	1e03      	subs	r3, r0, #0
 800ec80:	d001      	beq.n	800ec86 <LoRaMacMcpsRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 800ec82:	2301      	movs	r3, #1
 800ec84:	e10f      	b.n	800eea6 <LoRaMacMcpsRequest+0x25e>
    }

    macHdr.Value = 0;
 800ec86:	2310      	movs	r3, #16
 800ec88:	18fb      	adds	r3, r7, r3
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800ec8e:	4b88      	ldr	r3, [pc, #544]	@ (800eeb0 <LoRaMacMcpsRequest+0x268>)
 800ec90:	2214      	movs	r2, #20
 800ec92:	2100      	movs	r1, #0
 800ec94:	0018      	movs	r0, r3
 800ec96:	f006 fcad 	bl	80155f4 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ec9a:	4b86      	ldr	r3, [pc, #536]	@ (800eeb4 <LoRaMacMcpsRequest+0x26c>)
 800ec9c:	4a86      	ldr	r2, [pc, #536]	@ (800eeb8 <LoRaMacMcpsRequest+0x270>)
 800ec9e:	2101      	movs	r1, #1
 800eca0:	5499      	strb	r1, [r3, r2]

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 800eca2:	4b84      	ldr	r3, [pc, #528]	@ (800eeb4 <LoRaMacMcpsRequest+0x26c>)
 800eca4:	4a85      	ldr	r2, [pc, #532]	@ (800eebc <LoRaMacMcpsRequest+0x274>)
 800eca6:	2101      	movs	r1, #1
 800eca8:	5499      	strb	r1, [r3, r2]

    switch( mcpsRequest->Type )
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	781b      	ldrb	r3, [r3, #0]
 800ecae:	2b03      	cmp	r3, #3
 800ecb0:	d056      	beq.n	800ed60 <LoRaMacMcpsRequest+0x118>
 800ecb2:	dc72      	bgt.n	800ed9a <LoRaMacMcpsRequest+0x152>
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d002      	beq.n	800ecbe <LoRaMacMcpsRequest+0x76>
 800ecb8:	2b01      	cmp	r3, #1
 800ecba:	d024      	beq.n	800ed06 <LoRaMacMcpsRequest+0xbe>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 800ecbc:	e06d      	b.n	800ed9a <LoRaMacMcpsRequest+0x152>
            readyToSend = true;
 800ecbe:	231c      	movs	r3, #28
 800ecc0:	18fb      	adds	r3, r7, r3
 800ecc2:	2201      	movs	r2, #1
 800ecc4:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 800ecc6:	4b7b      	ldr	r3, [pc, #492]	@ (800eeb4 <LoRaMacMcpsRequest+0x26c>)
 800ecc8:	4a7d      	ldr	r2, [pc, #500]	@ (800eec0 <LoRaMacMcpsRequest+0x278>)
 800ecca:	2101      	movs	r1, #1
 800eccc:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800ecce:	2310      	movs	r3, #16
 800ecd0:	18fb      	adds	r3, r7, r3
 800ecd2:	781a      	ldrb	r2, [r3, #0]
 800ecd4:	211f      	movs	r1, #31
 800ecd6:	400a      	ands	r2, r1
 800ecd8:	1c11      	adds	r1, r2, #0
 800ecda:	2240      	movs	r2, #64	@ 0x40
 800ecdc:	430a      	orrs	r2, r1
 800ecde:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800ece0:	2326      	movs	r3, #38	@ 0x26
 800ece2:	18fb      	adds	r3, r7, r3
 800ece4:	687a      	ldr	r2, [r7, #4]
 800ece6:	7912      	ldrb	r2, [r2, #4]
 800ece8:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	689b      	ldr	r3, [r3, #8]
 800ecee:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800ecf0:	231e      	movs	r3, #30
 800ecf2:	18fb      	adds	r3, r7, r3
 800ecf4:	687a      	ldr	r2, [r7, #4]
 800ecf6:	8992      	ldrh	r2, [r2, #12]
 800ecf8:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800ecfa:	231d      	movs	r3, #29
 800ecfc:	18fb      	adds	r3, r7, r3
 800ecfe:	687a      	ldr	r2, [r7, #4]
 800ed00:	7b92      	ldrb	r2, [r2, #14]
 800ed02:	701a      	strb	r2, [r3, #0]
            break;
 800ed04:	e04a      	b.n	800ed9c <LoRaMacMcpsRequest+0x154>
            readyToSend = true;
 800ed06:	231c      	movs	r3, #28
 800ed08:	18fb      	adds	r3, r7, r3
 800ed0a:	2201      	movs	r2, #1
 800ed0c:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	7bdb      	ldrb	r3, [r3, #15]
 800ed12:	1c1a      	adds	r2, r3, #0
 800ed14:	b2d3      	uxtb	r3, r2
 800ed16:	2b08      	cmp	r3, #8
 800ed18:	d901      	bls.n	800ed1e <LoRaMacMcpsRequest+0xd6>
 800ed1a:	2308      	movs	r3, #8
 800ed1c:	1c1a      	adds	r2, r3, #0
 800ed1e:	b2d1      	uxtb	r1, r2
 800ed20:	4b64      	ldr	r3, [pc, #400]	@ (800eeb4 <LoRaMacMcpsRequest+0x26c>)
 800ed22:	4a67      	ldr	r2, [pc, #412]	@ (800eec0 <LoRaMacMcpsRequest+0x278>)
 800ed24:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800ed26:	2310      	movs	r3, #16
 800ed28:	18fb      	adds	r3, r7, r3
 800ed2a:	781a      	ldrb	r2, [r3, #0]
 800ed2c:	211f      	movs	r1, #31
 800ed2e:	400a      	ands	r2, r1
 800ed30:	1c11      	adds	r1, r2, #0
 800ed32:	2280      	movs	r2, #128	@ 0x80
 800ed34:	4252      	negs	r2, r2
 800ed36:	430a      	orrs	r2, r1
 800ed38:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800ed3a:	2326      	movs	r3, #38	@ 0x26
 800ed3c:	18fb      	adds	r3, r7, r3
 800ed3e:	687a      	ldr	r2, [r7, #4]
 800ed40:	7912      	ldrb	r2, [r2, #4]
 800ed42:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	689b      	ldr	r3, [r3, #8]
 800ed48:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800ed4a:	231e      	movs	r3, #30
 800ed4c:	18fb      	adds	r3, r7, r3
 800ed4e:	687a      	ldr	r2, [r7, #4]
 800ed50:	8992      	ldrh	r2, [r2, #12]
 800ed52:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800ed54:	231d      	movs	r3, #29
 800ed56:	18fb      	adds	r3, r7, r3
 800ed58:	687a      	ldr	r2, [r7, #4]
 800ed5a:	7b92      	ldrb	r2, [r2, #14]
 800ed5c:	701a      	strb	r2, [r3, #0]
            break;
 800ed5e:	e01d      	b.n	800ed9c <LoRaMacMcpsRequest+0x154>
            readyToSend = true;
 800ed60:	231c      	movs	r3, #28
 800ed62:	18fb      	adds	r3, r7, r3
 800ed64:	2201      	movs	r2, #1
 800ed66:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 800ed68:	4b52      	ldr	r3, [pc, #328]	@ (800eeb4 <LoRaMacMcpsRequest+0x26c>)
 800ed6a:	4a55      	ldr	r2, [pc, #340]	@ (800eec0 <LoRaMacMcpsRequest+0x278>)
 800ed6c:	2101      	movs	r1, #1
 800ed6e:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800ed70:	2310      	movs	r3, #16
 800ed72:	18fb      	adds	r3, r7, r3
 800ed74:	781a      	ldrb	r2, [r3, #0]
 800ed76:	2120      	movs	r1, #32
 800ed78:	4249      	negs	r1, r1
 800ed7a:	430a      	orrs	r2, r1
 800ed7c:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	685b      	ldr	r3, [r3, #4]
 800ed82:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800ed84:	231e      	movs	r3, #30
 800ed86:	18fb      	adds	r3, r7, r3
 800ed88:	687a      	ldr	r2, [r7, #4]
 800ed8a:	8912      	ldrh	r2, [r2, #8]
 800ed8c:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800ed8e:	231d      	movs	r3, #29
 800ed90:	18fb      	adds	r3, r7, r3
 800ed92:	687a      	ldr	r2, [r7, #4]
 800ed94:	7a92      	ldrb	r2, [r2, #10]
 800ed96:	701a      	strb	r2, [r3, #0]
            break;
 800ed98:	e000      	b.n	800ed9c <LoRaMacMcpsRequest+0x154>
            break;
 800ed9a:	46c0      	nop			@ (mov r8, r8)
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800ed9c:	2118      	movs	r1, #24
 800ed9e:	187b      	adds	r3, r7, r1
 800eda0:	2202      	movs	r2, #2
 800eda2:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800eda4:	4b43      	ldr	r3, [pc, #268]	@ (800eeb4 <LoRaMacMcpsRequest+0x26c>)
 800eda6:	4a47      	ldr	r2, [pc, #284]	@ (800eec4 <LoRaMacMcpsRequest+0x27c>)
 800eda8:	589a      	ldr	r2, [r3, r2]
 800edaa:	2396      	movs	r3, #150	@ 0x96
 800edac:	005b      	lsls	r3, r3, #1
 800edae:	5cd2      	ldrb	r2, [r2, r3]
 800edb0:	187b      	adds	r3, r7, r1
 800edb2:	709a      	strb	r2, [r3, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800edb4:	4b3f      	ldr	r3, [pc, #252]	@ (800eeb4 <LoRaMacMcpsRequest+0x26c>)
 800edb6:	4a43      	ldr	r2, [pc, #268]	@ (800eec4 <LoRaMacMcpsRequest+0x27c>)
 800edb8:	589b      	ldr	r3, [r3, r2]
 800edba:	781b      	ldrb	r3, [r3, #0]
 800edbc:	187a      	adds	r2, r7, r1
 800edbe:	0011      	movs	r1, r2
 800edc0:	0018      	movs	r0, r3
 800edc2:	f002 fc16 	bl	80115f2 <RegionGetPhyParam>
 800edc6:	0003      	movs	r3, r0
 800edc8:	001a      	movs	r2, r3
 800edca:	2114      	movs	r1, #20
 800edcc:	187b      	adds	r3, r7, r1
 800edce:	601a      	str	r2, [r3, #0]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800edd0:	187b      	adds	r3, r7, r1
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	b259      	sxtb	r1, r3
 800edd6:	231d      	movs	r3, #29
 800edd8:	18fa      	adds	r2, r7, r3
 800edda:	18fb      	adds	r3, r7, r3
 800eddc:	1c0c      	adds	r4, r1, #0
 800edde:	781b      	ldrb	r3, [r3, #0]
 800ede0:	b258      	sxtb	r0, r3
 800ede2:	b261      	sxtb	r1, r4
 800ede4:	4288      	cmp	r0, r1
 800ede6:	da00      	bge.n	800edea <LoRaMacMcpsRequest+0x1a2>
 800ede8:	1c23      	adds	r3, r4, #0
 800edea:	7013      	strb	r3, [r2, #0]

    if( readyToSend == true )
 800edec:	231c      	movs	r3, #28
 800edee:	18fb      	adds	r3, r7, r3
 800edf0:	781b      	ldrb	r3, [r3, #0]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d052      	beq.n	800ee9c <LoRaMacMcpsRequest+0x254>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 800edf6:	4b2f      	ldr	r3, [pc, #188]	@ (800eeb4 <LoRaMacMcpsRequest+0x26c>)
 800edf8:	4a32      	ldr	r2, [pc, #200]	@ (800eec4 <LoRaMacMcpsRequest+0x27c>)
 800edfa:	589b      	ldr	r3, [r3, r2]
 800edfc:	22f2      	movs	r2, #242	@ 0xf2
 800edfe:	5c9b      	ldrb	r3, [r3, r2]
 800ee00:	2201      	movs	r2, #1
 800ee02:	4053      	eors	r3, r2
 800ee04:	b2db      	uxtb	r3, r3
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d024      	beq.n	800ee54 <LoRaMacMcpsRequest+0x20c>
        {
            verify.DatarateParams.Datarate = datarate;
 800ee0a:	210c      	movs	r1, #12
 800ee0c:	187b      	adds	r3, r7, r1
 800ee0e:	221d      	movs	r2, #29
 800ee10:	18ba      	adds	r2, r7, r2
 800ee12:	7812      	ldrb	r2, [r2, #0]
 800ee14:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ee16:	4b27      	ldr	r3, [pc, #156]	@ (800eeb4 <LoRaMacMcpsRequest+0x26c>)
 800ee18:	4a2a      	ldr	r2, [pc, #168]	@ (800eec4 <LoRaMacMcpsRequest+0x27c>)
 800ee1a:	589a      	ldr	r2, [r3, r2]
 800ee1c:	2396      	movs	r3, #150	@ 0x96
 800ee1e:	005b      	lsls	r3, r3, #1
 800ee20:	5cd2      	ldrb	r2, [r2, r3]
 800ee22:	187b      	adds	r3, r7, r1
 800ee24:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800ee26:	4b23      	ldr	r3, [pc, #140]	@ (800eeb4 <LoRaMacMcpsRequest+0x26c>)
 800ee28:	4a26      	ldr	r2, [pc, #152]	@ (800eec4 <LoRaMacMcpsRequest+0x27c>)
 800ee2a:	589b      	ldr	r3, [r3, r2]
 800ee2c:	781b      	ldrb	r3, [r3, #0]
 800ee2e:	000c      	movs	r4, r1
 800ee30:	1879      	adds	r1, r7, r1
 800ee32:	2205      	movs	r2, #5
 800ee34:	0018      	movs	r0, r3
 800ee36:	f002 fc42 	bl	80116be <RegionVerify>
 800ee3a:	1e03      	subs	r3, r0, #0
 800ee3c:	d008      	beq.n	800ee50 <LoRaMacMcpsRequest+0x208>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ee3e:	4b1d      	ldr	r3, [pc, #116]	@ (800eeb4 <LoRaMacMcpsRequest+0x26c>)
 800ee40:	4a20      	ldr	r2, [pc, #128]	@ (800eec4 <LoRaMacMcpsRequest+0x27c>)
 800ee42:	589b      	ldr	r3, [r3, r2]
 800ee44:	193a      	adds	r2, r7, r4
 800ee46:	2100      	movs	r1, #0
 800ee48:	5651      	ldrsb	r1, [r2, r1]
 800ee4a:	22f9      	movs	r2, #249	@ 0xf9
 800ee4c:	5499      	strb	r1, [r3, r2]
 800ee4e:	e001      	b.n	800ee54 <LoRaMacMcpsRequest+0x20c>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800ee50:	2303      	movs	r3, #3
 800ee52:	e028      	b.n	800eea6 <LoRaMacMcpsRequest+0x25e>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 800ee54:	2627      	movs	r6, #39	@ 0x27
 800ee56:	19bc      	adds	r4, r7, r6
 800ee58:	231e      	movs	r3, #30
 800ee5a:	18fb      	adds	r3, r7, r3
 800ee5c:	881d      	ldrh	r5, [r3, #0]
 800ee5e:	6a3a      	ldr	r2, [r7, #32]
 800ee60:	2326      	movs	r3, #38	@ 0x26
 800ee62:	18fb      	adds	r3, r7, r3
 800ee64:	7819      	ldrb	r1, [r3, #0]
 800ee66:	2310      	movs	r3, #16
 800ee68:	18f8      	adds	r0, r7, r3
 800ee6a:	002b      	movs	r3, r5
 800ee6c:	f7fd f820 	bl	800beb0 <Send>
 800ee70:	0003      	movs	r3, r0
 800ee72:	7023      	strb	r3, [r4, #0]
        if( status == LORAMAC_STATUS_OK )
 800ee74:	19bb      	adds	r3, r7, r6
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d10b      	bne.n	800ee94 <LoRaMacMcpsRequest+0x24c>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	7819      	ldrb	r1, [r3, #0]
 800ee80:	4b0c      	ldr	r3, [pc, #48]	@ (800eeb4 <LoRaMacMcpsRequest+0x26c>)
 800ee82:	4a11      	ldr	r2, [pc, #68]	@ (800eec8 <LoRaMacMcpsRequest+0x280>)
 800ee84:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800ee86:	4b0b      	ldr	r3, [pc, #44]	@ (800eeb4 <LoRaMacMcpsRequest+0x26c>)
 800ee88:	4a10      	ldr	r2, [pc, #64]	@ (800eecc <LoRaMacMcpsRequest+0x284>)
 800ee8a:	5c99      	ldrb	r1, [r3, r2]
 800ee8c:	2001      	movs	r0, #1
 800ee8e:	4301      	orrs	r1, r0
 800ee90:	5499      	strb	r1, [r3, r2]
 800ee92:	e003      	b.n	800ee9c <LoRaMacMcpsRequest+0x254>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 800ee94:	4b07      	ldr	r3, [pc, #28]	@ (800eeb4 <LoRaMacMcpsRequest+0x26c>)
 800ee96:	4a0e      	ldr	r2, [pc, #56]	@ (800eed0 <LoRaMacMcpsRequest+0x288>)
 800ee98:	2100      	movs	r1, #0
 800ee9a:	5499      	strb	r1, [r3, r2]
        }
    }

    EventMacNvmCtxChanged( );
 800ee9c:	f7fe fa7a 	bl	800d394 <EventMacNvmCtxChanged>
    return status;
 800eea0:	2327      	movs	r3, #39	@ 0x27
 800eea2:	18fb      	adds	r3, r7, r3
 800eea4:	781b      	ldrb	r3, [r3, #0]
}
 800eea6:	0018      	movs	r0, r3
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	b00b      	add	sp, #44	@ 0x2c
 800eeac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eeae:	46c0      	nop			@ (mov r8, r8)
 800eeb0:	20000d7c 	.word	0x20000d7c
 800eeb4:	20000940 	.word	0x20000940
 800eeb8:	0000043d 	.word	0x0000043d
 800eebc:	00000412 	.word	0x00000412
 800eec0:	00000411 	.word	0x00000411
 800eec4:	00000484 	.word	0x00000484
 800eec8:	0000043c 	.word	0x0000043c
 800eecc:	00000481 	.word	0x00000481
 800eed0:	00000414 	.word	0x00000414

0800eed4 <CalcNextV10X>:

#include "region/Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800eed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eed6:	b08b      	sub	sp, #44	@ 0x2c
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	60f8      	str	r0, [r7, #12]
 800eedc:	60b9      	str	r1, [r7, #8]
 800eede:	607a      	str	r2, [r7, #4]
 800eee0:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 800eee2:	2327      	movs	r3, #39	@ 0x27
 800eee4:	18fb      	adds	r3, r7, r3
 800eee6:	2200      	movs	r2, #0
 800eee8:	701a      	strb	r2, [r3, #0]
    int8_t datarate = adrNext->Datarate;
 800eeea:	2426      	movs	r4, #38	@ 0x26
 800eeec:	193b      	adds	r3, r7, r4
 800eeee:	68fa      	ldr	r2, [r7, #12]
 800eef0:	7c12      	ldrb	r2, [r2, #16]
 800eef2:	701a      	strb	r2, [r3, #0]
    int8_t txPower = adrNext->TxPower;
 800eef4:	2325      	movs	r3, #37	@ 0x25
 800eef6:	18fb      	adds	r3, r7, r3
 800eef8:	68fa      	ldr	r2, [r7, #12]
 800eefa:	7c52      	ldrb	r2, [r2, #17]
 800eefc:	701a      	strb	r2, [r3, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	689a      	ldr	r2, [r3, #8]
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	795b      	ldrb	r3, [r3, #5]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d100      	bne.n	800ef10 <CalcNextV10X+0x3c>
 800ef0e:	e0a5      	b.n	800f05c <CalcNextV10X+0x188>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 800ef10:	2120      	movs	r1, #32
 800ef12:	187b      	adds	r3, r7, r1
 800ef14:	2202      	movs	r2, #2
 800ef16:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	7c9a      	ldrb	r2, [r3, #18]
 800ef1c:	187b      	adds	r3, r7, r1
 800ef1e:	709a      	strb	r2, [r3, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	7cdb      	ldrb	r3, [r3, #19]
 800ef24:	187a      	adds	r2, r7, r1
 800ef26:	0011      	movs	r1, r2
 800ef28:	0018      	movs	r0, r3
 800ef2a:	f002 fb62 	bl	80115f2 <RegionGetPhyParam>
 800ef2e:	0003      	movs	r3, r0
 800ef30:	001a      	movs	r2, r3
 800ef32:	211c      	movs	r1, #28
 800ef34:	187b      	adds	r3, r7, r1
 800ef36:	601a      	str	r2, [r3, #0]
        minTxDatarate = phyParam.Value;
 800ef38:	187b      	adds	r3, r7, r1
 800ef3a:	681a      	ldr	r2, [r3, #0]
 800ef3c:	2124      	movs	r1, #36	@ 0x24
 800ef3e:	187b      	adds	r3, r7, r1
 800ef40:	701a      	strb	r2, [r3, #0]
        datarate = MAX( datarate, minTxDatarate );
 800ef42:	193a      	adds	r2, r7, r4
 800ef44:	187b      	adds	r3, r7, r1
 800ef46:	1939      	adds	r1, r7, r4
 800ef48:	780c      	ldrb	r4, [r1, #0]
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	b258      	sxtb	r0, r3
 800ef4e:	b261      	sxtb	r1, r4
 800ef50:	4288      	cmp	r0, r1
 800ef52:	da00      	bge.n	800ef56 <CalcNextV10X+0x82>
 800ef54:	1c23      	adds	r3, r4, #0
 800ef56:	7013      	strb	r3, [r2, #0]

        if( datarate == minTxDatarate )
 800ef58:	2326      	movs	r3, #38	@ 0x26
 800ef5a:	18fa      	adds	r2, r7, r3
 800ef5c:	2324      	movs	r3, #36	@ 0x24
 800ef5e:	18fb      	adds	r3, r7, r3
 800ef60:	7812      	ldrb	r2, [r2, #0]
 800ef62:	b252      	sxtb	r2, r2
 800ef64:	781b      	ldrb	r3, [r3, #0]
 800ef66:	b25b      	sxtb	r3, r3
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	d107      	bne.n	800ef7c <CalcNextV10X+0xa8>
        {
            *adrAckCounter = 0;
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 800ef72:	2327      	movs	r3, #39	@ 0x27
 800ef74:	18fb      	adds	r3, r7, r3
 800ef76:	2200      	movs	r2, #0
 800ef78:	701a      	strb	r2, [r3, #0]
 800ef7a:	e06f      	b.n	800f05c <CalcNextV10X+0x188>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	689b      	ldr	r3, [r3, #8]
 800ef80:	68fa      	ldr	r2, [r7, #12]
 800ef82:	8992      	ldrh	r2, [r2, #12]
 800ef84:	4293      	cmp	r3, r2
 800ef86:	d304      	bcc.n	800ef92 <CalcNextV10X+0xbe>
            {
                adrAckReq = true;
 800ef88:	2327      	movs	r3, #39	@ 0x27
 800ef8a:	18fb      	adds	r3, r7, r3
 800ef8c:	2201      	movs	r2, #1
 800ef8e:	701a      	strb	r2, [r3, #0]
 800ef90:	e003      	b.n	800ef9a <CalcNextV10X+0xc6>
            }
            else
            {
                adrAckReq = false;
 800ef92:	2327      	movs	r3, #39	@ 0x27
 800ef94:	18fb      	adds	r3, r7, r3
 800ef96:	2200      	movs	r2, #0
 800ef98:	701a      	strb	r2, [r3, #0]
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	689b      	ldr	r3, [r3, #8]
 800ef9e:	68fa      	ldr	r2, [r7, #12]
 800efa0:	8992      	ldrh	r2, [r2, #12]
 800efa2:	0011      	movs	r1, r2
 800efa4:	68fa      	ldr	r2, [r7, #12]
 800efa6:	89d2      	ldrh	r2, [r2, #14]
 800efa8:	188a      	adds	r2, r1, r2
 800efaa:	4293      	cmp	r3, r2
 800efac:	d356      	bcc.n	800f05c <CalcNextV10X+0x188>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800efae:	2420      	movs	r4, #32
 800efb0:	193b      	adds	r3, r7, r4
 800efb2:	2208      	movs	r2, #8
 800efb4:	701a      	strb	r2, [r3, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	7cdb      	ldrb	r3, [r3, #19]
 800efba:	193a      	adds	r2, r7, r4
 800efbc:	0011      	movs	r1, r2
 800efbe:	0018      	movs	r0, r3
 800efc0:	f002 fb17 	bl	80115f2 <RegionGetPhyParam>
 800efc4:	0003      	movs	r3, r0
 800efc6:	001a      	movs	r2, r3
 800efc8:	251c      	movs	r5, #28
 800efca:	197b      	adds	r3, r7, r5
 800efcc:	601a      	str	r2, [r3, #0]
                txPower = phyParam.Value;
 800efce:	197b      	adds	r3, r7, r5
 800efd0:	681a      	ldr	r2, [r3, #0]
 800efd2:	2325      	movs	r3, #37	@ 0x25
 800efd4:	18fb      	adds	r3, r7, r3
 800efd6:	701a      	strb	r2, [r3, #0]

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	689a      	ldr	r2, [r3, #8]
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	89db      	ldrh	r3, [r3, #14]
 800efe0:	0019      	movs	r1, r3
 800efe2:	0010      	movs	r0, r2
 800efe4:	f7f1 f920 	bl	8000228 <__aeabi_uidivmod>
 800efe8:	000b      	movs	r3, r1
 800efea:	2b01      	cmp	r3, #1
 800efec:	d136      	bne.n	800f05c <CalcNextV10X+0x188>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800efee:	193b      	adds	r3, r7, r4
 800eff0:	2222      	movs	r2, #34	@ 0x22
 800eff2:	701a      	strb	r2, [r3, #0]
                    getPhy.Datarate = datarate;
 800eff4:	193b      	adds	r3, r7, r4
 800eff6:	2626      	movs	r6, #38	@ 0x26
 800eff8:	19ba      	adds	r2, r7, r6
 800effa:	7812      	ldrb	r2, [r2, #0]
 800effc:	705a      	strb	r2, [r3, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	7c9a      	ldrb	r2, [r3, #18]
 800f002:	193b      	adds	r3, r7, r4
 800f004:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	7cdb      	ldrb	r3, [r3, #19]
 800f00a:	193a      	adds	r2, r7, r4
 800f00c:	0011      	movs	r1, r2
 800f00e:	0018      	movs	r0, r3
 800f010:	f002 faef 	bl	80115f2 <RegionGetPhyParam>
 800f014:	0003      	movs	r3, r0
 800f016:	001a      	movs	r2, r3
 800f018:	197b      	adds	r3, r7, r5
 800f01a:	601a      	str	r2, [r3, #0]
                    datarate = phyParam.Value;
 800f01c:	197b      	adds	r3, r7, r5
 800f01e:	681a      	ldr	r2, [r3, #0]
 800f020:	19bb      	adds	r3, r7, r6
 800f022:	701a      	strb	r2, [r3, #0]

                    if( datarate == minTxDatarate )
 800f024:	19ba      	adds	r2, r7, r6
 800f026:	2324      	movs	r3, #36	@ 0x24
 800f028:	18fb      	adds	r3, r7, r3
 800f02a:	7812      	ldrb	r2, [r2, #0]
 800f02c:	b252      	sxtb	r2, r2
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	b25b      	sxtb	r3, r3
 800f032:	429a      	cmp	r2, r3
 800f034:	d112      	bne.n	800f05c <CalcNextV10X+0x188>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 800f036:	2327      	movs	r3, #39	@ 0x27
 800f038:	18fb      	adds	r3, r7, r3
 800f03a:	2200      	movs	r2, #0
 800f03c:	701a      	strb	r2, [r3, #0]
                        if( adrNext->UpdateChanMask == true )
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	791b      	ldrb	r3, [r3, #4]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d00a      	beq.n	800f05c <CalcNextV10X+0x188>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800f046:	2114      	movs	r1, #20
 800f048:	187b      	adds	r3, r7, r1
 800f04a:	2201      	movs	r2, #1
 800f04c:	711a      	strb	r2, [r3, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	7cdb      	ldrb	r3, [r3, #19]
 800f052:	187a      	adds	r2, r7, r1
 800f054:	0011      	movs	r1, r2
 800f056:	0018      	movs	r0, r3
 800f058:	f002 fb06 	bl	8011668 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	2226      	movs	r2, #38	@ 0x26
 800f060:	18ba      	adds	r2, r7, r2
 800f062:	7812      	ldrb	r2, [r2, #0]
 800f064:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2225      	movs	r2, #37	@ 0x25
 800f06a:	18ba      	adds	r2, r7, r2
 800f06c:	7812      	ldrb	r2, [r2, #0]
 800f06e:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 800f070:	2327      	movs	r3, #39	@ 0x27
 800f072:	18fb      	adds	r3, r7, r3
 800f074:	781b      	ldrb	r3, [r3, #0]
}
 800f076:	0018      	movs	r0, r3
 800f078:	46bd      	mov	sp, r7
 800f07a:	b00b      	add	sp, #44	@ 0x2c
 800f07c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f07e <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800f07e:	b580      	push	{r7, lr}
 800f080:	b084      	sub	sp, #16
 800f082:	af00      	add	r7, sp, #0
 800f084:	60f8      	str	r0, [r7, #12]
 800f086:	60b9      	str	r1, [r7, #8]
 800f088:	607a      	str	r2, [r7, #4]
 800f08a:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	789b      	ldrb	r3, [r3, #2]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d107      	bne.n	800f0a4 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	687a      	ldr	r2, [r7, #4]
 800f098:	68b9      	ldr	r1, [r7, #8]
 800f09a:	68f8      	ldr	r0, [r7, #12]
 800f09c:	f7ff ff1a 	bl	800eed4 <CalcNextV10X>
 800f0a0:	0003      	movs	r3, r0
 800f0a2:	e000      	b.n	800f0a6 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 800f0a4:	2300      	movs	r3, #0
}
 800f0a6:	0018      	movs	r0, r3
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	b004      	add	sp, #16
 800f0ac:	bd80      	pop	{r7, pc}

0800f0ae <LoRaMacClassBInit>:
}

#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmEvent classBNvmCtxChanged )
{
 800f0ae:	b580      	push	{r7, lr}
 800f0b0:	b084      	sub	sp, #16
 800f0b2:	af00      	add	r7, sp, #0
 800f0b4:	60f8      	str	r0, [r7, #12]
 800f0b6:	60b9      	str	r1, [r7, #8]
 800f0b8:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800f0ba:	46c0      	nop			@ (mov r8, r8)
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	b004      	add	sp, #16
 800f0c0:	bd80      	pop	{r7, pc}

0800f0c2 <LoRaMacClassBRestoreNvmCtx>:

bool LoRaMacClassBRestoreNvmCtx( void* classBNvmCtx )
{
 800f0c2:	b580      	push	{r7, lr}
 800f0c4:	b082      	sub	sp, #8
 800f0c6:	af00      	add	r7, sp, #0
 800f0c8:	6078      	str	r0, [r7, #4]
    else
    {
        return false;
    }
#else
    return true;
 800f0ca:	2301      	movs	r3, #1
#endif // LORAMAC_CLASSB_ENABLED
}
 800f0cc:	0018      	movs	r0, r3
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	b002      	add	sp, #8
 800f0d2:	bd80      	pop	{r7, pc}

0800f0d4 <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b082      	sub	sp, #8
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
#ifdef LORAMAC_CLASSB_ENABLED
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	601a      	str	r2, [r3, #0]
    return NULL;
 800f0e2:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f0e4:	0018      	movs	r0, r3
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	b002      	add	sp, #8
 800f0ea:	bd80      	pop	{r7, pc}

0800f0ec <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b082      	sub	sp, #8
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	0002      	movs	r2, r0
 800f0f4:	1dfb      	adds	r3, r7, #7
 800f0f6:	701a      	strb	r2, [r3, #0]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800f0f8:	46c0      	nop			@ (mov r8, r8)
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	b002      	add	sp, #8
 800f0fe:	bd80      	pop	{r7, pc}

0800f100 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b082      	sub	sp, #8
 800f104:	af00      	add	r7, sp, #0
 800f106:	0002      	movs	r2, r0
 800f108:	1dfb      	adds	r3, r7, #7
 800f10a:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.PingSlotState = pingSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 800f10c:	46c0      	nop			@ (mov r8, r8)
 800f10e:	46bd      	mov	sp, r7
 800f110:	b002      	add	sp, #8
 800f112:	bd80      	pop	{r7, pc}

0800f114 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b082      	sub	sp, #8
 800f118:	af00      	add	r7, sp, #0
 800f11a:	0002      	movs	r2, r0
 800f11c:	1dfb      	adds	r3, r7, #7
 800f11e:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.MulticastSlotState = multicastSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 800f120:	46c0      	nop			@ (mov r8, r8)
 800f122:	46bd      	mov	sp, r7
 800f124:	b002      	add	sp, #8
 800f126:	bd80      	pop	{r7, pc}

0800f128 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 800f12c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f12e:	0018      	movs	r0, r3
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}

0800f134 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800f13c:	46c0      	nop			@ (mov r8, r8)
 800f13e:	46bd      	mov	sp, r7
 800f140:	b002      	add	sp, #8
 800f142:	bd80      	pop	{r7, pc}

0800f144 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b082      	sub	sp, #8
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800f14c:	46c0      	nop			@ (mov r8, r8)
 800f14e:	46bd      	mov	sp, r7
 800f150:	b002      	add	sp, #8
 800f152:	bd80      	pop	{r7, pc}

0800f154 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b082      	sub	sp, #8
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800f15c:	46c0      	nop			@ (mov r8, r8)
 800f15e:	46bd      	mov	sp, r7
 800f160:	b002      	add	sp, #8
 800f162:	bd80      	pop	{r7, pc}

0800f164 <LoRaMacClassBRxBeacon>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b082      	sub	sp, #8
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	000a      	movs	r2, r1
 800f16e:	1cbb      	adds	r3, r7, #2
 800f170:	801a      	strh	r2, [r3, #0]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 800f172:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f174:	0018      	movs	r0, r3
 800f176:	46bd      	mov	sp, r7
 800f178:	b002      	add	sp, #8
 800f17a:	bd80      	pop	{r7, pc}

0800f17c <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800f180:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f182:	0018      	movs	r0, r3
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}

0800f188 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800f18c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f18e:	0018      	movs	r0, r3
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 800f194:	b580      	push	{r7, lr}
 800f196:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800f198:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f19a:	0018      	movs	r0, r3
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}

0800f1a0 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800f1a4:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f1a6:	0018      	movs	r0, r3
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b082      	sub	sp, #8
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	0002      	movs	r2, r0
 800f1b4:	1dfb      	adds	r3, r7, #7
 800f1b6:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800f1b8:	46c0      	nop			@ (mov r8, r8)
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	b002      	add	sp, #8
 800f1be:	bd80      	pop	{r7, pc}

0800f1c0 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800f1c4:	46c0      	nop			@ (mov r8, r8)
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}

0800f1ca <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 800f1ca:	b580      	push	{r7, lr}
 800f1cc:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800f1ce:	46c0      	nop			@ (mov r8, r8)
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}

0800f1d4 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b082      	sub	sp, #8
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	0002      	movs	r2, r0
 800f1dc:	1dfb      	adds	r3, r7, #7
 800f1de:	701a      	strb	r2, [r3, #0]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f1e0:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 800f1e2:	0018      	movs	r0, r3
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	b002      	add	sp, #8
 800f1e8:	bd80      	pop	{r7, pc}

0800f1ea <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 800f1ea:	b580      	push	{r7, lr}
 800f1ec:	b082      	sub	sp, #8
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f1f2:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 800f1f4:	0018      	movs	r0, r3
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	b002      	add	sp, #8
 800f1fa:	bd80      	pop	{r7, pc}

0800f1fc <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b082      	sub	sp, #8
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f204:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 800f206:	0018      	movs	r0, r3
 800f208:	46bd      	mov	sp, r7
 800f20a:	b002      	add	sp, #8
 800f20c:	bd80      	pop	{r7, pc}

0800f20e <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 800f20e:	b580      	push	{r7, lr}
 800f210:	af00      	add	r7, sp, #0
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800f212:	46c0      	nop			@ (mov r8, r8)
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}

0800f218 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b082      	sub	sp, #8
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	0002      	movs	r2, r0
 800f220:	6039      	str	r1, [r7, #0]
 800f222:	1dfb      	adds	r3, r7, #7
 800f224:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
 800f226:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f228:	0018      	movs	r0, r3
 800f22a:	46bd      	mov	sp, r7
 800f22c:	b002      	add	sp, #8
 800f22e:	bd80      	pop	{r7, pc}

0800f230 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b082      	sub	sp, #8
 800f234:	af00      	add	r7, sp, #0
 800f236:	603a      	str	r2, [r7, #0]
 800f238:	1dbb      	adds	r3, r7, #6
 800f23a:	1c02      	adds	r2, r0, #0
 800f23c:	801a      	strh	r2, [r3, #0]
 800f23e:	1d7b      	adds	r3, r7, #5
 800f240:	1c0a      	adds	r2, r1, #0
 800f242:	701a      	strb	r2, [r3, #0]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800f244:	46c0      	nop			@ (mov r8, r8)
 800f246:	46bd      	mov	sp, r7
 800f248:	b002      	add	sp, #8
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800f250:	46c0      	nop			@ (mov r8, r8)
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}

0800f256 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 800f256:	b580      	push	{r7, lr}
 800f258:	b082      	sub	sp, #8
 800f25a:	af00      	add	r7, sp, #0
 800f25c:	6078      	str	r0, [r7, #4]
        NvmContextChange( );
        return true;
    }
    return false;
#else
    return false;
 800f25e:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f260:	0018      	movs	r0, r3
 800f262:	46bd      	mov	sp, r7
 800f264:	b002      	add	sp, #8
 800f266:	bd80      	pop	{r7, pc}

0800f268 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b082      	sub	sp, #8
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 800f270:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f272:	0018      	movs	r0, r3
 800f274:	46bd      	mov	sp, r7
 800f276:	b002      	add	sp, #8
 800f278:	bd80      	pop	{r7, pc}

0800f27a <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 800f27a:	b580      	push	{r7, lr}
 800f27c:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800f27e:	46c0      	nop			@ (mov r8, r8)
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}

0800f284 <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 800f284:	b580      	push	{r7, lr}
 800f286:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800f288:	46c0      	nop			@ (mov r8, r8)
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}

0800f28e <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 800f28e:	b580      	push	{r7, lr}
 800f290:	b084      	sub	sp, #16
 800f292:	af00      	add	r7, sp, #0
 800f294:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800f29a:	230e      	movs	r3, #14
 800f29c:	18fb      	adds	r3, r7, r3
 800f29e:	2200      	movs	r2, #0
 800f2a0:	801a      	strh	r2, [r3, #0]
 800f2a2:	e00f      	b.n	800f2c4 <IsSlotFree+0x36>
    {
        if( mem[size] != 0x00 )
 800f2a4:	230e      	movs	r3, #14
 800f2a6:	18fb      	adds	r3, r7, r3
 800f2a8:	881b      	ldrh	r3, [r3, #0]
 800f2aa:	68ba      	ldr	r2, [r7, #8]
 800f2ac:	18d3      	adds	r3, r2, r3
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d001      	beq.n	800f2b8 <IsSlotFree+0x2a>
        {
            return false;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	e00b      	b.n	800f2d0 <IsSlotFree+0x42>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800f2b8:	210e      	movs	r1, #14
 800f2ba:	187b      	adds	r3, r7, r1
 800f2bc:	881a      	ldrh	r2, [r3, #0]
 800f2be:	187b      	adds	r3, r7, r1
 800f2c0:	3201      	adds	r2, #1
 800f2c2:	801a      	strh	r2, [r3, #0]
 800f2c4:	230e      	movs	r3, #14
 800f2c6:	18fb      	adds	r3, r7, r3
 800f2c8:	881b      	ldrh	r3, [r3, #0]
 800f2ca:	2b0f      	cmp	r3, #15
 800f2cc:	d9ea      	bls.n	800f2a4 <IsSlotFree+0x16>
        }
    }
    return true;
 800f2ce:	2301      	movs	r3, #1
}
 800f2d0:	0018      	movs	r0, r3
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	b004      	add	sp, #16
 800f2d6:	bd80      	pop	{r7, pc}

0800f2d8 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 800f2de:	1dfb      	adds	r3, r7, #7
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	701a      	strb	r2, [r3, #0]

    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 800f2e4:	e00a      	b.n	800f2fc <MallocNewMacCommandSlot+0x24>
    {
        itr++;
 800f2e6:	1dfb      	adds	r3, r7, #7
 800f2e8:	781a      	ldrb	r2, [r3, #0]
 800f2ea:	1dfb      	adds	r3, r7, #7
 800f2ec:	3201      	adds	r2, #1
 800f2ee:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
 800f2f0:	1dfb      	adds	r3, r7, #7
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	2b0f      	cmp	r3, #15
 800f2f6:	d101      	bne.n	800f2fc <MallocNewMacCommandSlot+0x24>
        {
            return 0;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	e017      	b.n	800f32c <MallocNewMacCommandSlot+0x54>
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 800f2fc:	1dfb      	adds	r3, r7, #7
 800f2fe:	781b      	ldrb	r3, [r3, #0]
 800f300:	011b      	lsls	r3, r3, #4
 800f302:	3308      	adds	r3, #8
 800f304:	001a      	movs	r2, r3
 800f306:	4b0b      	ldr	r3, [pc, #44]	@ (800f334 <MallocNewMacCommandSlot+0x5c>)
 800f308:	18d3      	adds	r3, r2, r3
 800f30a:	0018      	movs	r0, r3
 800f30c:	f7ff ffbf 	bl	800f28e <IsSlotFree>
 800f310:	0003      	movs	r3, r0
 800f312:	001a      	movs	r2, r3
 800f314:	2301      	movs	r3, #1
 800f316:	4053      	eors	r3, r2
 800f318:	b2db      	uxtb	r3, r3
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d1e3      	bne.n	800f2e6 <MallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
 800f31e:	1dfb      	adds	r3, r7, #7
 800f320:	781b      	ldrb	r3, [r3, #0]
 800f322:	011b      	lsls	r3, r3, #4
 800f324:	3308      	adds	r3, #8
 800f326:	001a      	movs	r2, r3
 800f328:	4b02      	ldr	r3, [pc, #8]	@ (800f334 <MallocNewMacCommandSlot+0x5c>)
 800f32a:	18d3      	adds	r3, r2, r3
}
 800f32c:	0018      	movs	r0, r3
 800f32e:	46bd      	mov	sp, r7
 800f330:	b002      	add	sp, #8
 800f332:	bd80      	pop	{r7, pc}
 800f334:	20000ff8 	.word	0x20000ff8

0800f338 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b082      	sub	sp, #8
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
    if( slot == 0 )
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d101      	bne.n	800f34a <FreeMacCommandSlot+0x12>
    {
        return false;
 800f346:	2300      	movs	r3, #0
 800f348:	e006      	b.n	800f358 <FreeMacCommandSlot+0x20>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2210      	movs	r2, #16
 800f34e:	2100      	movs	r1, #0
 800f350:	0018      	movs	r0, r3
 800f352:	f006 f94f 	bl	80155f4 <memset1>

    return true;
 800f356:	2301      	movs	r3, #1
}
 800f358:	0018      	movs	r0, r3
 800f35a:	46bd      	mov	sp, r7
 800f35c:	b002      	add	sp, #8
 800f35e:	bd80      	pop	{r7, pc}

0800f360 <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b082      	sub	sp, #8
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
    if( list == 0 )
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d101      	bne.n	800f372 <LinkedListInit+0x12>
    {
        return false;
 800f36e:	2300      	movs	r3, #0
 800f370:	e006      	b.n	800f380 <LinkedListInit+0x20>
    }

    list->First = 0;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2200      	movs	r2, #0
 800f376:	601a      	str	r2, [r3, #0]
    list->Last = 0;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2200      	movs	r2, #0
 800f37c:	605a      	str	r2, [r3, #4]

    return true;
 800f37e:	2301      	movs	r3, #1
}
 800f380:	0018      	movs	r0, r3
 800f382:	46bd      	mov	sp, r7
 800f384:	b002      	add	sp, #8
 800f386:	bd80      	pop	{r7, pc}

0800f388 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b082      	sub	sp, #8
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
 800f390:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d104      	bne.n	800f3a2 <LinkedListAdd+0x1a>
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d101      	bne.n	800f3a2 <LinkedListAdd+0x1a>
    {
        return false;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	e015      	b.n	800f3ce <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == 0 )
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d102      	bne.n	800f3b0 <LinkedListAdd+0x28>
    {
        list->First = element;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	683a      	ldr	r2, [r7, #0]
 800f3ae:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	685b      	ldr	r3, [r3, #4]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d003      	beq.n	800f3c0 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	683a      	ldr	r2, [r7, #0]
 800f3be:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = 0;
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	683a      	ldr	r2, [r7, #0]
 800f3ca:	605a      	str	r2, [r3, #4]

    return true;
 800f3cc:	2301      	movs	r3, #1
}
 800f3ce:	0018      	movs	r0, r3
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	b002      	add	sp, #8
 800f3d4:	bd80      	pop	{r7, pc}

0800f3d6 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 800f3d6:	b580      	push	{r7, lr}
 800f3d8:	b084      	sub	sp, #16
 800f3da:	af00      	add	r7, sp, #0
 800f3dc:	6078      	str	r0, [r7, #4]
 800f3de:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d104      	bne.n	800f3f0 <LinkedListGetPrevious+0x1a>
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d101      	bne.n	800f3f0 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	e016      	b.n	800f41e <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800f3f6:	683a      	ldr	r2, [r7, #0]
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d00c      	beq.n	800f418 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800f3fe:	e002      	b.n	800f406 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d007      	beq.n	800f41c <LinkedListGetPrevious+0x46>
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	683a      	ldr	r2, [r7, #0]
 800f412:	429a      	cmp	r2, r3
 800f414:	d1f4      	bne.n	800f400 <LinkedListGetPrevious+0x2a>
 800f416:	e001      	b.n	800f41c <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 800f418:	2300      	movs	r3, #0
 800f41a:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 800f41c:	68fb      	ldr	r3, [r7, #12]
}
 800f41e:	0018      	movs	r0, r3
 800f420:	46bd      	mov	sp, r7
 800f422:	b004      	add	sp, #16
 800f424:	bd80      	pop	{r7, pc}

0800f426 <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 800f426:	b580      	push	{r7, lr}
 800f428:	b084      	sub	sp, #16
 800f42a:	af00      	add	r7, sp, #0
 800f42c:	6078      	str	r0, [r7, #4]
 800f42e:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d104      	bne.n	800f440 <LinkedListRemove+0x1a>
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d101      	bne.n	800f440 <LinkedListRemove+0x1a>
    {
        return false;
 800f43c:	2300      	movs	r3, #0
 800f43e:	e023      	b.n	800f488 <LinkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800f440:	683a      	ldr	r2, [r7, #0]
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	0011      	movs	r1, r2
 800f446:	0018      	movs	r0, r3
 800f448:	f7ff ffc5 	bl	800f3d6 <LinkedListGetPrevious>
 800f44c:	0003      	movs	r3, r0
 800f44e:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	683a      	ldr	r2, [r7, #0]
 800f456:	429a      	cmp	r2, r3
 800f458:	d103      	bne.n	800f462 <LinkedListRemove+0x3c>
    {
        list->First = element->Next;
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	681a      	ldr	r2, [r3, #0]
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	685b      	ldr	r3, [r3, #4]
 800f466:	683a      	ldr	r2, [r7, #0]
 800f468:	429a      	cmp	r2, r3
 800f46a:	d102      	bne.n	800f472 <LinkedListRemove+0x4c>
    {
        list->Last = PrevElement;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	68fa      	ldr	r2, [r7, #12]
 800f470:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d003      	beq.n	800f480 <LinkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	681a      	ldr	r2, [r3, #0]
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	2200      	movs	r2, #0
 800f484:	601a      	str	r2, [r3, #0]

    return true;
 800f486:	2301      	movs	r3, #1
}
 800f488:	0018      	movs	r0, r3
 800f48a:	46bd      	mov	sp, r7
 800f48c:	b004      	add	sp, #16
 800f48e:	bd80      	pop	{r7, pc}

0800f490 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	0002      	movs	r2, r0
 800f498:	1dfb      	adds	r3, r7, #7
 800f49a:	701a      	strb	r2, [r3, #0]
    switch( cid )
 800f49c:	1dfb      	adds	r3, r7, #7
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	220a      	movs	r2, #10
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	4192      	sbcs	r2, r2
 800f4a6:	4252      	negs	r2, r2
 800f4a8:	b2d2      	uxtb	r2, r2
 800f4aa:	2a00      	cmp	r2, #0
 800f4ac:	d10c      	bne.n	800f4c8 <IsSticky+0x38>
 800f4ae:	22a4      	movs	r2, #164	@ 0xa4
 800f4b0:	00d2      	lsls	r2, r2, #3
 800f4b2:	40da      	lsrs	r2, r3
 800f4b4:	0013      	movs	r3, r2
 800f4b6:	2201      	movs	r2, #1
 800f4b8:	4013      	ands	r3, r2
 800f4ba:	1e5a      	subs	r2, r3, #1
 800f4bc:	4193      	sbcs	r3, r2
 800f4be:	b2db      	uxtb	r3, r3
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d001      	beq.n	800f4c8 <IsSticky+0x38>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
            return true;
 800f4c4:	2301      	movs	r3, #1
 800f4c6:	e000      	b.n	800f4ca <IsSticky+0x3a>
        default:
            return false;
 800f4c8:	2300      	movs	r3, #0
    }
}
 800f4ca:	0018      	movs	r0, r3
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	b002      	add	sp, #8
 800f4d0:	bd80      	pop	{r7, pc}
	...

0800f4d4 <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
 800f4d8:	4b04      	ldr	r3, [pc, #16]	@ (800f4ec <NvmCtxCallback+0x18>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d002      	beq.n	800f4e6 <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
 800f4e0:	4b02      	ldr	r3, [pc, #8]	@ (800f4ec <NvmCtxCallback+0x18>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	4798      	blx	r3
    }
}
 800f4e6:	46c0      	nop			@ (mov r8, r8)
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}
 800f4ec:	20000ff4 	.word	0x20000ff4

0800f4f0 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b082      	sub	sp, #8
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 800f4f8:	4b08      	ldr	r3, [pc, #32]	@ (800f51c <LoRaMacCommandsInit+0x2c>)
 800f4fa:	22fc      	movs	r2, #252	@ 0xfc
 800f4fc:	2100      	movs	r1, #0
 800f4fe:	0018      	movs	r0, r3
 800f500:	f006 f878 	bl	80155f4 <memset1>

    LinkedListInit( &NvmCtx.MacCommandList );
 800f504:	4b05      	ldr	r3, [pc, #20]	@ (800f51c <LoRaMacCommandsInit+0x2c>)
 800f506:	0018      	movs	r0, r3
 800f508:	f7ff ff2a 	bl	800f360 <LinkedListInit>

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 800f50c:	4b04      	ldr	r3, [pc, #16]	@ (800f520 <LoRaMacCommandsInit+0x30>)
 800f50e:	687a      	ldr	r2, [r7, #4]
 800f510:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
 800f512:	2300      	movs	r3, #0
}
 800f514:	0018      	movs	r0, r3
 800f516:	46bd      	mov	sp, r7
 800f518:	b002      	add	sp, #8
 800f51a:	bd80      	pop	{r7, pc}
 800f51c:	20000ff8 	.word	0x20000ff8
 800f520:	20000ff4 	.word	0x20000ff4

0800f524 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b082      	sub	sp, #8
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( commandsNvmCtx != NULL )
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d007      	beq.n	800f542 <LoRaMacCommandsRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 800f532:	6879      	ldr	r1, [r7, #4]
 800f534:	4b05      	ldr	r3, [pc, #20]	@ (800f54c <LoRaMacCommandsRestoreNvmCtx+0x28>)
 800f536:	22fc      	movs	r2, #252	@ 0xfc
 800f538:	0018      	movs	r0, r3
 800f53a:	f006 f81d 	bl	8015578 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 800f53e:	2300      	movs	r3, #0
 800f540:	e000      	b.n	800f544 <LoRaMacCommandsRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f542:	2301      	movs	r3, #1
    }
}
 800f544:	0018      	movs	r0, r3
 800f546:	46bd      	mov	sp, r7
 800f548:	b002      	add	sp, #8
 800f54a:	bd80      	pop	{r7, pc}
 800f54c:	20000ff8 	.word	0x20000ff8

0800f550 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b082      	sub	sp, #8
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
    *commandsNvmCtxSize = sizeof( NvmCtx );
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	22fc      	movs	r2, #252	@ 0xfc
 800f55c:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 800f55e:	4b02      	ldr	r3, [pc, #8]	@ (800f568 <LoRaMacCommandsGetNvmCtx+0x18>)
}
 800f560:	0018      	movs	r0, r3
 800f562:	46bd      	mov	sp, r7
 800f564:	b002      	add	sp, #8
 800f566:	bd80      	pop	{r7, pc}
 800f568:	20000ff8 	.word	0x20000ff8

0800f56c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800f56c:	b590      	push	{r4, r7, lr}
 800f56e:	b087      	sub	sp, #28
 800f570:	af00      	add	r7, sp, #0
 800f572:	60b9      	str	r1, [r7, #8]
 800f574:	607a      	str	r2, [r7, #4]
 800f576:	230f      	movs	r3, #15
 800f578:	18fb      	adds	r3, r7, r3
 800f57a:	1c02      	adds	r2, r0, #0
 800f57c:	701a      	strb	r2, [r3, #0]
    if( payload == 0 )
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d101      	bne.n	800f588 <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f584:	2301      	movs	r3, #1
 800f586:	e03c      	b.n	800f602 <LoRaMacCommandsAddCmd+0x96>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800f588:	f7ff fea6 	bl	800f2d8 <MallocNewMacCommandSlot>
 800f58c:	0003      	movs	r3, r0
 800f58e:	617b      	str	r3, [r7, #20]

    if( newCmd == 0 )
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d101      	bne.n	800f59a <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800f596:	2302      	movs	r3, #2
 800f598:	e033      	b.n	800f602 <LoRaMacCommandsAddCmd+0x96>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 800f59a:	697a      	ldr	r2, [r7, #20]
 800f59c:	4b1b      	ldr	r3, [pc, #108]	@ (800f60c <LoRaMacCommandsAddCmd+0xa0>)
 800f59e:	0011      	movs	r1, r2
 800f5a0:	0018      	movs	r0, r3
 800f5a2:	f7ff fef1 	bl	800f388 <LinkedListAdd>
 800f5a6:	0003      	movs	r3, r0
 800f5a8:	001a      	movs	r2, r3
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	4053      	eors	r3, r2
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d001      	beq.n	800f5b8 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
 800f5b4:	2305      	movs	r3, #5
 800f5b6:	e024      	b.n	800f602 <LoRaMacCommandsAddCmd+0x96>
    }

    // Set Values
    newCmd->CID = cid;
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	240f      	movs	r4, #15
 800f5bc:	193a      	adds	r2, r7, r4
 800f5be:	7812      	ldrb	r2, [r2, #0]
 800f5c0:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	687a      	ldr	r2, [r7, #4]
 800f5c6:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	3305      	adds	r3, #5
 800f5cc:	687a      	ldr	r2, [r7, #4]
 800f5ce:	b292      	uxth	r2, r2
 800f5d0:	68b9      	ldr	r1, [r7, #8]
 800f5d2:	0018      	movs	r0, r3
 800f5d4:	f005 ffd0 	bl	8015578 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800f5d8:	193b      	adds	r3, r7, r4
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	0018      	movs	r0, r3
 800f5de:	f7ff ff57 	bl	800f490 <IsSticky>
 800f5e2:	0003      	movs	r3, r0
 800f5e4:	001a      	movs	r2, r3
 800f5e6:	697b      	ldr	r3, [r7, #20]
 800f5e8:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800f5ea:	4b08      	ldr	r3, [pc, #32]	@ (800f60c <LoRaMacCommandsAddCmd+0xa0>)
 800f5ec:	22f8      	movs	r2, #248	@ 0xf8
 800f5ee:	589a      	ldr	r2, [r3, r2]
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	18d3      	adds	r3, r2, r3
 800f5f4:	1c5a      	adds	r2, r3, #1
 800f5f6:	4b05      	ldr	r3, [pc, #20]	@ (800f60c <LoRaMacCommandsAddCmd+0xa0>)
 800f5f8:	21f8      	movs	r1, #248	@ 0xf8
 800f5fa:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
 800f5fc:	f7ff ff6a 	bl	800f4d4 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800f600:	2300      	movs	r3, #0
}
 800f602:	0018      	movs	r0, r3
 800f604:	46bd      	mov	sp, r7
 800f606:	b007      	add	sp, #28
 800f608:	bd90      	pop	{r4, r7, pc}
 800f60a:	46c0      	nop			@ (mov r8, r8)
 800f60c:	20000ff8 	.word	0x20000ff8

0800f610 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b082      	sub	sp, #8
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d101      	bne.n	800f622 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f61e:	2301      	movs	r3, #1
 800f620:	e028      	b.n	800f674 <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 800f622:	687a      	ldr	r2, [r7, #4]
 800f624:	4b15      	ldr	r3, [pc, #84]	@ (800f67c <LoRaMacCommandsRemoveCmd+0x6c>)
 800f626:	0011      	movs	r1, r2
 800f628:	0018      	movs	r0, r3
 800f62a:	f7ff fefc 	bl	800f426 <LinkedListRemove>
 800f62e:	0003      	movs	r3, r0
 800f630:	001a      	movs	r2, r3
 800f632:	2301      	movs	r3, #1
 800f634:	4053      	eors	r3, r2
 800f636:	b2db      	uxtb	r3, r3
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d001      	beq.n	800f640 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800f63c:	2303      	movs	r3, #3
 800f63e:	e019      	b.n	800f674 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800f640:	4b0e      	ldr	r3, [pc, #56]	@ (800f67c <LoRaMacCommandsRemoveCmd+0x6c>)
 800f642:	22f8      	movs	r2, #248	@ 0xf8
 800f644:	589a      	ldr	r2, [r3, r2]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	689b      	ldr	r3, [r3, #8]
 800f64a:	1ad3      	subs	r3, r2, r3
 800f64c:	1e5a      	subs	r2, r3, #1
 800f64e:	4b0b      	ldr	r3, [pc, #44]	@ (800f67c <LoRaMacCommandsRemoveCmd+0x6c>)
 800f650:	21f8      	movs	r1, #248	@ 0xf8
 800f652:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	0018      	movs	r0, r3
 800f658:	f7ff fe6e 	bl	800f338 <FreeMacCommandSlot>
 800f65c:	0003      	movs	r3, r0
 800f65e:	001a      	movs	r2, r3
 800f660:	2301      	movs	r3, #1
 800f662:	4053      	eors	r3, r2
 800f664:	b2db      	uxtb	r3, r3
 800f666:	2b00      	cmp	r3, #0
 800f668:	d001      	beq.n	800f66e <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
 800f66a:	2305      	movs	r3, #5
 800f66c:	e002      	b.n	800f674 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
 800f66e:	f7ff ff31 	bl	800f4d4 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800f672:	2300      	movs	r3, #0
}
 800f674:	0018      	movs	r0, r3
 800f676:	46bd      	mov	sp, r7
 800f678:	b002      	add	sp, #8
 800f67a:	bd80      	pop	{r7, pc}
 800f67c:	20000ff8 	.word	0x20000ff8

0800f680 <LoRaMacCommandsRemoveNoneStickyCmds>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b082      	sub	sp, #8
 800f684:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800f686:	4b11      	ldr	r3, [pc, #68]	@ (800f6cc <LoRaMacCommandsRemoveNoneStickyCmds+0x4c>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 800f68c:	e013      	b.n	800f6b6 <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
    {
        if( curElement->IsSticky == false )
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	7b1b      	ldrb	r3, [r3, #12]
 800f692:	2201      	movs	r2, #1
 800f694:	4053      	eors	r3, r2
 800f696:	b2db      	uxtb	r3, r3
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d009      	beq.n	800f6b0 <LoRaMacCommandsRemoveNoneStickyCmds+0x30>
        {
            nexElement = curElement->Next;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	0018      	movs	r0, r3
 800f6a6:	f7ff ffb3 	bl	800f610 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	607b      	str	r3, [r7, #4]
 800f6ae:	e002      	b.n	800f6b6 <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
        }
        else
        {
            curElement = curElement->Next;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d1e8      	bne.n	800f68e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    NvmCtxCallback( );
 800f6bc:	f7ff ff0a 	bl	800f4d4 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800f6c0:	2300      	movs	r3, #0
}
 800f6c2:	0018      	movs	r0, r3
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	b002      	add	sp, #8
 800f6c8:	bd80      	pop	{r7, pc}
 800f6ca:	46c0      	nop			@ (mov r8, r8)
 800f6cc:	20000ff8 	.word	0x20000ff8

0800f6d0 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b082      	sub	sp, #8
 800f6d4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800f6d6:	4b0f      	ldr	r3, [pc, #60]	@ (800f714 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 800f6dc:	e00f      	b.n	800f6fe <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	791b      	ldrb	r3, [r3, #4]
 800f6e8:	0018      	movs	r0, r3
 800f6ea:	f7ff fed1 	bl	800f490 <IsSticky>
 800f6ee:	1e03      	subs	r3, r0, #0
 800f6f0:	d003      	beq.n	800f6fa <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	0018      	movs	r0, r3
 800f6f6:	f7ff ff8b 	bl	800f610 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d1ec      	bne.n	800f6de <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
 800f704:	f7ff fee6 	bl	800f4d4 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800f708:	2300      	movs	r3, #0
}
 800f70a:	0018      	movs	r0, r3
 800f70c:	46bd      	mov	sp, r7
 800f70e:	b002      	add	sp, #8
 800f710:	bd80      	pop	{r7, pc}
 800f712:	46c0      	nop			@ (mov r8, r8)
 800f714:	20000ff8 	.word	0x20000ff8

0800f718 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b082      	sub	sp, #8
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d101      	bne.n	800f72a <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f726:	2301      	movs	r3, #1
 800f728:	e005      	b.n	800f736 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
 800f72a:	4b05      	ldr	r3, [pc, #20]	@ (800f740 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 800f72c:	22f8      	movs	r2, #248	@ 0xf8
 800f72e:	589a      	ldr	r2, [r3, r2]
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800f734:	2300      	movs	r3, #0
}
 800f736:	0018      	movs	r0, r3
 800f738:	46bd      	mov	sp, r7
 800f73a:	b002      	add	sp, #8
 800f73c:	bd80      	pop	{r7, pc}
 800f73e:	46c0      	nop			@ (mov r8, r8)
 800f740:	20000ff8 	.word	0x20000ff8

0800f744 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800f744:	b590      	push	{r4, r7, lr}
 800f746:	b087      	sub	sp, #28
 800f748:	af00      	add	r7, sp, #0
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	60b9      	str	r1, [r7, #8]
 800f74e:	607a      	str	r2, [r7, #4]
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d002      	beq.n	800f75c <LoRaMacCommandsSerializeCmds+0x18>
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d101      	bne.n	800f760 <LoRaMacCommandsSerializeCmds+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f75c:	2301      	movs	r3, #1
 800f75e:	e039      	b.n	800f7d4 <LoRaMacCommandsSerializeCmds+0x90>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 800f760:	4b1e      	ldr	r3, [pc, #120]	@ (800f7dc <LoRaMacCommandsSerializeCmds+0x98>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	617b      	str	r3, [r7, #20]
    uint8_t itr = 0;
 800f766:	2313      	movs	r3, #19
 800f768:	18fb      	adds	r3, r7, r3
 800f76a:	2200      	movs	r2, #0
 800f76c:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800f76e:	e02b      	b.n	800f7c8 <LoRaMacCommandsSerializeCmds+0x84>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800f770:	2413      	movs	r4, #19
 800f772:	193b      	adds	r3, r7, r4
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	68fa      	ldr	r2, [r7, #12]
 800f778:	1ad2      	subs	r2, r2, r3
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	689b      	ldr	r3, [r3, #8]
 800f77e:	3301      	adds	r3, #1
 800f780:	429a      	cmp	r2, r3
 800f782:	d325      	bcc.n	800f7d0 <LoRaMacCommandsSerializeCmds+0x8c>
        {
            buffer[itr++] = curElement->CID;
 800f784:	193b      	adds	r3, r7, r4
 800f786:	781b      	ldrb	r3, [r3, #0]
 800f788:	193a      	adds	r2, r7, r4
 800f78a:	1c59      	adds	r1, r3, #1
 800f78c:	7011      	strb	r1, [r2, #0]
 800f78e:	001a      	movs	r2, r3
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	189b      	adds	r3, r3, r2
 800f794:	697a      	ldr	r2, [r7, #20]
 800f796:	7912      	ldrb	r2, [r2, #4]
 800f798:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800f79a:	193b      	adds	r3, r7, r4
 800f79c:	781b      	ldrb	r3, [r3, #0]
 800f79e:	687a      	ldr	r2, [r7, #4]
 800f7a0:	18d0      	adds	r0, r2, r3
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	1d59      	adds	r1, r3, #5
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	689b      	ldr	r3, [r3, #8]
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	001a      	movs	r2, r3
 800f7ae:	f005 fee3 	bl	8015578 <memcpy1>
            itr = itr + curElement->PayloadSize;
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	689b      	ldr	r3, [r3, #8]
 800f7b6:	b2d9      	uxtb	r1, r3
 800f7b8:	193b      	adds	r3, r7, r4
 800f7ba:	193a      	adds	r2, r7, r4
 800f7bc:	7812      	ldrb	r2, [r2, #0]
 800f7be:	188a      	adds	r2, r1, r2
 800f7c0:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	617b      	str	r3, [r7, #20]
    while( curElement != NULL )
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d1d0      	bne.n	800f770 <LoRaMacCommandsSerializeCmds+0x2c>
 800f7ce:	e000      	b.n	800f7d2 <LoRaMacCommandsSerializeCmds+0x8e>
            break;
 800f7d0:	46c0      	nop			@ (mov r8, r8)
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800f7d2:	2300      	movs	r3, #0
}
 800f7d4:	0018      	movs	r0, r3
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	b007      	add	sp, #28
 800f7da:	bd90      	pop	{r4, r7, pc}
 800f7dc:	20000ff8 	.word	0x20000ff8

0800f7e0 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b084      	sub	sp, #16
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d101      	bne.n	800f7f2 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	e016      	b.n	800f820 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 800f7f2:	4b0d      	ldr	r3, [pc, #52]	@ (800f828 <LoRaMacCommandsStickyCmdsPending+0x48>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800f7fe:	e00b      	b.n	800f818 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	7b1b      	ldrb	r3, [r3, #12]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d004      	beq.n	800f812 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2201      	movs	r2, #1
 800f80c:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800f80e:	2300      	movs	r3, #0
 800f810:	e006      	b.n	800f820 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d1f0      	bne.n	800f800 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800f81e:	2300      	movs	r3, #0
}
 800f820:	0018      	movs	r0, r3
 800f822:	46bd      	mov	sp, r7
 800f824:	b004      	add	sp, #16
 800f826:	bd80      	pop	{r7, pc}
 800f828:	20000ff8 	.word	0x20000ff8

0800f82c <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b082      	sub	sp, #8
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800f834:	4b08      	ldr	r3, [pc, #32]	@ (800f858 <IncreaseBufferPointer+0x2c>)
 800f836:	691b      	ldr	r3, [r3, #16]
 800f838:	3310      	adds	r3, #16
 800f83a:	687a      	ldr	r2, [r7, #4]
 800f83c:	429a      	cmp	r2, r3
 800f83e:	d103      	bne.n	800f848 <IncreaseBufferPointer+0x1c>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800f840:	4b05      	ldr	r3, [pc, #20]	@ (800f858 <IncreaseBufferPointer+0x2c>)
 800f842:	691b      	ldr	r3, [r3, #16]
 800f844:	607b      	str	r3, [r7, #4]
 800f846:	e002      	b.n	800f84e <IncreaseBufferPointer+0x22>
    }
    else
    {
        // Increase
        bufferPointer++;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	3304      	adds	r3, #4
 800f84c:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 800f84e:	687b      	ldr	r3, [r7, #4]
}
 800f850:	0018      	movs	r0, r3
 800f852:	46bd      	mov	sp, r7
 800f854:	b002      	add	sp, #8
 800f856:	bd80      	pop	{r7, pc}
 800f858:	2000110c 	.word	0x2000110c

0800f85c <GetElement>:
    }
    return bufferPointer;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b086      	sub	sp, #24
 800f860:	af00      	add	r7, sp, #0
 800f862:	60b9      	str	r1, [r7, #8]
 800f864:	607a      	str	r2, [r7, #4]
 800f866:	230f      	movs	r3, #15
 800f868:	18fb      	adds	r3, r7, r3
 800f86a:	1c02      	adds	r2, r0, #0
 800f86c:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
 800f86e:	68bb      	ldr	r3, [r7, #8]
 800f870:	617b      	str	r3, [r7, #20]

    while( element != bufferEnd )
 800f872:	e00e      	b.n	800f892 <GetElement+0x36>
    {
        if( element->Request == request )
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	781b      	ldrb	r3, [r3, #0]
 800f878:	220f      	movs	r2, #15
 800f87a:	18ba      	adds	r2, r7, r2
 800f87c:	7812      	ldrb	r2, [r2, #0]
 800f87e:	429a      	cmp	r2, r3
 800f880:	d101      	bne.n	800f886 <GetElement+0x2a>
        {
            // We have found the element
            return element;
 800f882:	697b      	ldr	r3, [r7, #20]
 800f884:	e00a      	b.n	800f89c <GetElement+0x40>
        }
        else
        {
            element = IncreaseBufferPointer( element );
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	0018      	movs	r0, r3
 800f88a:	f7ff ffcf 	bl	800f82c <IncreaseBufferPointer>
 800f88e:	0003      	movs	r3, r0
 800f890:	617b      	str	r3, [r7, #20]
    while( element != bufferEnd )
 800f892:	697a      	ldr	r2, [r7, #20]
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	429a      	cmp	r2, r3
 800f898:	d1ec      	bne.n	800f874 <GetElement+0x18>
        }
    }
    return NULL;
 800f89a:	2300      	movs	r3, #0
}
 800f89c:	0018      	movs	r0, r3
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	b006      	add	sp, #24
 800f8a2:	bd80      	pop	{r7, pc}

0800f8a4 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b082      	sub	sp, #8
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	6039      	str	r1, [r7, #0]
    ConfirmQueueCtx.Primitives = primitives;
 800f8ae:	4b13      	ldr	r3, [pc, #76]	@ (800f8fc <LoRaMacConfirmQueueInit+0x58>)
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	601a      	str	r2, [r3, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800f8b4:	4b11      	ldr	r3, [pc, #68]	@ (800f8fc <LoRaMacConfirmQueueInit+0x58>)
 800f8b6:	4a12      	ldr	r2, [pc, #72]	@ (800f900 <LoRaMacConfirmQueueInit+0x5c>)
 800f8b8:	611a      	str	r2, [r3, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800f8ba:	4b10      	ldr	r3, [pc, #64]	@ (800f8fc <LoRaMacConfirmQueueInit+0x58>)
 800f8bc:	691b      	ldr	r3, [r3, #16]
 800f8be:	2200      	movs	r2, #0
 800f8c0:	751a      	strb	r2, [r3, #20]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800f8c2:	4b0e      	ldr	r3, [pc, #56]	@ (800f8fc <LoRaMacConfirmQueueInit+0x58>)
 800f8c4:	691b      	ldr	r3, [r3, #16]
 800f8c6:	001a      	movs	r2, r3
 800f8c8:	4b0c      	ldr	r3, [pc, #48]	@ (800f8fc <LoRaMacConfirmQueueInit+0x58>)
 800f8ca:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800f8cc:	4b0b      	ldr	r3, [pc, #44]	@ (800f8fc <LoRaMacConfirmQueueInit+0x58>)
 800f8ce:	691b      	ldr	r3, [r3, #16]
 800f8d0:	001a      	movs	r2, r3
 800f8d2:	4b0a      	ldr	r3, [pc, #40]	@ (800f8fc <LoRaMacConfirmQueueInit+0x58>)
 800f8d4:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 800f8d6:	4b09      	ldr	r3, [pc, #36]	@ (800f8fc <LoRaMacConfirmQueueInit+0x58>)
 800f8d8:	691b      	ldr	r3, [r3, #16]
 800f8da:	2214      	movs	r2, #20
 800f8dc:	21ff      	movs	r1, #255	@ 0xff
 800f8de:	0018      	movs	r0, r3
 800f8e0:	f005 fe88 	bl	80155f4 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f8e4:	4b05      	ldr	r3, [pc, #20]	@ (800f8fc <LoRaMacConfirmQueueInit+0x58>)
 800f8e6:	691b      	ldr	r3, [r3, #16]
 800f8e8:	2201      	movs	r2, #1
 800f8ea:	755a      	strb	r2, [r3, #21]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 800f8ec:	4b03      	ldr	r3, [pc, #12]	@ (800f8fc <LoRaMacConfirmQueueInit+0x58>)
 800f8ee:	683a      	ldr	r2, [r7, #0]
 800f8f0:	60da      	str	r2, [r3, #12]
}
 800f8f2:	46c0      	nop			@ (mov r8, r8)
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	b002      	add	sp, #8
 800f8f8:	bd80      	pop	{r7, pc}
 800f8fa:	46c0      	nop			@ (mov r8, r8)
 800f8fc:	2000110c 	.word	0x2000110c
 800f900:	200010f4 	.word	0x200010f4

0800f904 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b082      	sub	sp, #8
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d007      	beq.n	800f922 <LoRaMacConfirmQueueRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 800f912:	6879      	ldr	r1, [r7, #4]
 800f914:	4b05      	ldr	r3, [pc, #20]	@ (800f92c <LoRaMacConfirmQueueRestoreNvmCtx+0x28>)
 800f916:	2216      	movs	r2, #22
 800f918:	0018      	movs	r0, r3
 800f91a:	f005 fe2d 	bl	8015578 <memcpy1>
        return true;
 800f91e:	2301      	movs	r3, #1
 800f920:	e000      	b.n	800f924 <LoRaMacConfirmQueueRestoreNvmCtx+0x20>
    }
    else
    {
        return false;
 800f922:	2300      	movs	r3, #0
    }
}
 800f924:	0018      	movs	r0, r3
 800f926:	46bd      	mov	sp, r7
 800f928:	b002      	add	sp, #8
 800f92a:	bd80      	pop	{r7, pc}
 800f92c:	200010f4 	.word	0x200010f4

0800f930 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b082      	sub	sp, #8
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2216      	movs	r2, #22
 800f93c:	601a      	str	r2, [r3, #0]
    return &ConfirmQueueNvmCtx;
 800f93e:	4b02      	ldr	r3, [pc, #8]	@ (800f948 <LoRaMacConfirmQueueGetNvmCtx+0x18>)
}
 800f940:	0018      	movs	r0, r3
 800f942:	46bd      	mov	sp, r7
 800f944:	b002      	add	sp, #8
 800f946:	bd80      	pop	{r7, pc}
 800f948:	200010f4 	.word	0x200010f4

0800f94c <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b082      	sub	sp, #8
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800f954:	4b16      	ldr	r3, [pc, #88]	@ (800f9b0 <LoRaMacConfirmQueueAdd+0x64>)
 800f956:	691b      	ldr	r3, [r3, #16]
 800f958:	7d1b      	ldrb	r3, [r3, #20]
 800f95a:	2b04      	cmp	r3, #4
 800f95c:	d901      	bls.n	800f962 <LoRaMacConfirmQueueAdd+0x16>
    {
        // Protect the buffer against overwrites
        return false;
 800f95e:	2300      	movs	r3, #0
 800f960:	e021      	b.n	800f9a6 <LoRaMacConfirmQueueAdd+0x5a>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800f962:	4b13      	ldr	r3, [pc, #76]	@ (800f9b0 <LoRaMacConfirmQueueAdd+0x64>)
 800f964:	689b      	ldr	r3, [r3, #8]
 800f966:	687a      	ldr	r2, [r7, #4]
 800f968:	7812      	ldrb	r2, [r2, #0]
 800f96a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800f96c:	4b10      	ldr	r3, [pc, #64]	@ (800f9b0 <LoRaMacConfirmQueueAdd+0x64>)
 800f96e:	689b      	ldr	r3, [r3, #8]
 800f970:	687a      	ldr	r2, [r7, #4]
 800f972:	7852      	ldrb	r2, [r2, #1]
 800f974:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800f976:	4b0e      	ldr	r3, [pc, #56]	@ (800f9b0 <LoRaMacConfirmQueueAdd+0x64>)
 800f978:	689b      	ldr	r3, [r3, #8]
 800f97a:	687a      	ldr	r2, [r7, #4]
 800f97c:	78d2      	ldrb	r2, [r2, #3]
 800f97e:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800f980:	4b0b      	ldr	r3, [pc, #44]	@ (800f9b0 <LoRaMacConfirmQueueAdd+0x64>)
 800f982:	689b      	ldr	r3, [r3, #8]
 800f984:	2200      	movs	r2, #0
 800f986:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 800f988:	4b09      	ldr	r3, [pc, #36]	@ (800f9b0 <LoRaMacConfirmQueueAdd+0x64>)
 800f98a:	691b      	ldr	r3, [r3, #16]
 800f98c:	7d1a      	ldrb	r2, [r3, #20]
 800f98e:	3201      	adds	r2, #1
 800f990:	b2d2      	uxtb	r2, r2
 800f992:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800f994:	4b06      	ldr	r3, [pc, #24]	@ (800f9b0 <LoRaMacConfirmQueueAdd+0x64>)
 800f996:	689b      	ldr	r3, [r3, #8]
 800f998:	0018      	movs	r0, r3
 800f99a:	f7ff ff47 	bl	800f82c <IncreaseBufferPointer>
 800f99e:	0002      	movs	r2, r0
 800f9a0:	4b03      	ldr	r3, [pc, #12]	@ (800f9b0 <LoRaMacConfirmQueueAdd+0x64>)
 800f9a2:	609a      	str	r2, [r3, #8]

    return true;
 800f9a4:	2301      	movs	r3, #1
}
 800f9a6:	0018      	movs	r0, r3
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	b002      	add	sp, #8
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	46c0      	nop			@ (mov r8, r8)
 800f9b0:	2000110c 	.word	0x2000110c

0800f9b4 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 800f9b8:	4b0c      	ldr	r3, [pc, #48]	@ (800f9ec <LoRaMacConfirmQueueRemoveFirst+0x38>)
 800f9ba:	691b      	ldr	r3, [r3, #16]
 800f9bc:	7d1b      	ldrb	r3, [r3, #20]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d101      	bne.n	800f9c6 <LoRaMacConfirmQueueRemoveFirst+0x12>
    {
        return false;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	e00e      	b.n	800f9e4 <LoRaMacConfirmQueueRemoveFirst+0x30>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 800f9c6:	4b09      	ldr	r3, [pc, #36]	@ (800f9ec <LoRaMacConfirmQueueRemoveFirst+0x38>)
 800f9c8:	691b      	ldr	r3, [r3, #16]
 800f9ca:	7d1a      	ldrb	r2, [r3, #20]
 800f9cc:	3a01      	subs	r2, #1
 800f9ce:	b2d2      	uxtb	r2, r2
 800f9d0:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800f9d2:	4b06      	ldr	r3, [pc, #24]	@ (800f9ec <LoRaMacConfirmQueueRemoveFirst+0x38>)
 800f9d4:	685b      	ldr	r3, [r3, #4]
 800f9d6:	0018      	movs	r0, r3
 800f9d8:	f7ff ff28 	bl	800f82c <IncreaseBufferPointer>
 800f9dc:	0002      	movs	r2, r0
 800f9de:	4b03      	ldr	r3, [pc, #12]	@ (800f9ec <LoRaMacConfirmQueueRemoveFirst+0x38>)
 800f9e0:	605a      	str	r2, [r3, #4]

    return true;
 800f9e2:	2301      	movs	r3, #1
}
 800f9e4:	0018      	movs	r0, r3
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}
 800f9ea:	46c0      	nop			@ (mov r8, r8)
 800f9ec:	2000110c 	.word	0x2000110c

0800f9f0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	0002      	movs	r2, r0
 800f9f8:	1dfb      	adds	r3, r7, #7
 800f9fa:	701a      	strb	r2, [r3, #0]
 800f9fc:	1dbb      	adds	r3, r7, #6
 800f9fe:	1c0a      	adds	r2, r1, #0
 800fa00:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 800fa02:	2300      	movs	r3, #0
 800fa04:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800fa06:	4b0f      	ldr	r3, [pc, #60]	@ (800fa44 <LoRaMacConfirmQueueSetStatus+0x54>)
 800fa08:	691b      	ldr	r3, [r3, #16]
 800fa0a:	7d1b      	ldrb	r3, [r3, #20]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d014      	beq.n	800fa3a <LoRaMacConfirmQueueSetStatus+0x4a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800fa10:	4b0c      	ldr	r3, [pc, #48]	@ (800fa44 <LoRaMacConfirmQueueSetStatus+0x54>)
 800fa12:	6859      	ldr	r1, [r3, #4]
 800fa14:	4b0b      	ldr	r3, [pc, #44]	@ (800fa44 <LoRaMacConfirmQueueSetStatus+0x54>)
 800fa16:	689a      	ldr	r2, [r3, #8]
 800fa18:	1dbb      	adds	r3, r7, #6
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	0018      	movs	r0, r3
 800fa1e:	f7ff ff1d 	bl	800f85c <GetElement>
 800fa22:	0003      	movs	r3, r0
 800fa24:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d006      	beq.n	800fa3a <LoRaMacConfirmQueueSetStatus+0x4a>
        {
            element->Status = status;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	1dfa      	adds	r2, r7, #7
 800fa30:	7812      	ldrb	r2, [r2, #0]
 800fa32:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	2201      	movs	r2, #1
 800fa38:	709a      	strb	r2, [r3, #2]
        }
    }
}
 800fa3a:	46c0      	nop			@ (mov r8, r8)
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	b004      	add	sp, #16
 800fa40:	bd80      	pop	{r7, pc}
 800fa42:	46c0      	nop			@ (mov r8, r8)
 800fa44:	2000110c 	.word	0x2000110c

0800fa48 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b084      	sub	sp, #16
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	0002      	movs	r2, r0
 800fa50:	1dfb      	adds	r3, r7, #7
 800fa52:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 800fa54:	2300      	movs	r3, #0
 800fa56:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800fa58:	4b0d      	ldr	r3, [pc, #52]	@ (800fa90 <LoRaMacConfirmQueueGetStatus+0x48>)
 800fa5a:	691b      	ldr	r3, [r3, #16]
 800fa5c:	7d1b      	ldrb	r3, [r3, #20]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d010      	beq.n	800fa84 <LoRaMacConfirmQueueGetStatus+0x3c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800fa62:	4b0b      	ldr	r3, [pc, #44]	@ (800fa90 <LoRaMacConfirmQueueGetStatus+0x48>)
 800fa64:	6859      	ldr	r1, [r3, #4]
 800fa66:	4b0a      	ldr	r3, [pc, #40]	@ (800fa90 <LoRaMacConfirmQueueGetStatus+0x48>)
 800fa68:	689a      	ldr	r2, [r3, #8]
 800fa6a:	1dfb      	adds	r3, r7, #7
 800fa6c:	781b      	ldrb	r3, [r3, #0]
 800fa6e:	0018      	movs	r0, r3
 800fa70:	f7ff fef4 	bl	800f85c <GetElement>
 800fa74:	0003      	movs	r3, r0
 800fa76:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d002      	beq.n	800fa84 <LoRaMacConfirmQueueGetStatus+0x3c>
        {
            return element->Status;
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	785b      	ldrb	r3, [r3, #1]
 800fa82:	e000      	b.n	800fa86 <LoRaMacConfirmQueueGetStatus+0x3e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fa84:	2301      	movs	r3, #1
}
 800fa86:	0018      	movs	r0, r3
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	b004      	add	sp, #16
 800fa8c:	bd80      	pop	{r7, pc}
 800fa8e:	46c0      	nop			@ (mov r8, r8)
 800fa90:	2000110c 	.word	0x2000110c

0800fa94 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b084      	sub	sp, #16
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	0002      	movs	r2, r0
 800fa9c:	1dfb      	adds	r3, r7, #7
 800fa9e:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800faa0:	4b14      	ldr	r3, [pc, #80]	@ (800faf4 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 800faa2:	685b      	ldr	r3, [r3, #4]
 800faa4:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 800faa6:	4b13      	ldr	r3, [pc, #76]	@ (800faf4 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 800faa8:	691b      	ldr	r3, [r3, #16]
 800faaa:	1dfa      	adds	r2, r7, #7
 800faac:	7812      	ldrb	r2, [r2, #0]
 800faae:	755a      	strb	r2, [r3, #21]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800fab0:	4b10      	ldr	r3, [pc, #64]	@ (800faf4 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 800fab2:	691b      	ldr	r3, [r3, #16]
 800fab4:	7d1b      	ldrb	r3, [r3, #20]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d018      	beq.n	800faec <LoRaMacConfirmQueueSetStatusCmn+0x58>
    {
        do
        {
            element->Status = status;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	1dfa      	adds	r2, r7, #7
 800fabe:	7812      	ldrb	r2, [r2, #0]
 800fac0:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	78db      	ldrb	r3, [r3, #3]
 800fac6:	2201      	movs	r2, #1
 800fac8:	4053      	eors	r3, r2
 800faca:	b2db      	uxtb	r3, r3
 800facc:	2b00      	cmp	r3, #0
 800face:	d002      	beq.n	800fad6 <LoRaMacConfirmQueueSetStatusCmn+0x42>
            {
                element->ReadyToHandle = true;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	2201      	movs	r2, #1
 800fad4:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	0018      	movs	r0, r3
 800fada:	f7ff fea7 	bl	800f82c <IncreaseBufferPointer>
 800fade:	0003      	movs	r3, r0
 800fae0:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 800fae2:	4b04      	ldr	r3, [pc, #16]	@ (800faf4 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 800fae4:	689b      	ldr	r3, [r3, #8]
 800fae6:	68fa      	ldr	r2, [r7, #12]
 800fae8:	429a      	cmp	r2, r3
 800faea:	d1e6      	bne.n	800faba <LoRaMacConfirmQueueSetStatusCmn+0x26>
    }
}
 800faec:	46c0      	nop			@ (mov r8, r8)
 800faee:	46bd      	mov	sp, r7
 800faf0:	b004      	add	sp, #16
 800faf2:	bd80      	pop	{r7, pc}
 800faf4:	2000110c 	.word	0x2000110c

0800faf8 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b082      	sub	sp, #8
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	0002      	movs	r2, r0
 800fb00:	1dfb      	adds	r3, r7, #7
 800fb02:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800fb04:	4b08      	ldr	r3, [pc, #32]	@ (800fb28 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 800fb06:	6859      	ldr	r1, [r3, #4]
 800fb08:	4b07      	ldr	r3, [pc, #28]	@ (800fb28 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 800fb0a:	689a      	ldr	r2, [r3, #8]
 800fb0c:	1dfb      	adds	r3, r7, #7
 800fb0e:	781b      	ldrb	r3, [r3, #0]
 800fb10:	0018      	movs	r0, r3
 800fb12:	f7ff fea3 	bl	800f85c <GetElement>
 800fb16:	1e03      	subs	r3, r0, #0
 800fb18:	d001      	beq.n	800fb1e <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	e000      	b.n	800fb20 <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
 800fb1e:	2300      	movs	r3, #0
}
 800fb20:	0018      	movs	r0, r3
 800fb22:	46bd      	mov	sp, r7
 800fb24:	b002      	add	sp, #8
 800fb26:	bd80      	pop	{r7, pc}
 800fb28:	2000110c 	.word	0x2000110c

0800fb2c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800fb34:	4b2d      	ldr	r3, [pc, #180]	@ (800fbec <LoRaMacConfirmQueueHandleCb+0xc0>)
 800fb36:	691a      	ldr	r2, [r3, #16]
 800fb38:	230e      	movs	r3, #14
 800fb3a:	18fb      	adds	r3, r7, r3
 800fb3c:	7d12      	ldrb	r2, [r2, #20]
 800fb3e:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
 800fb40:	230d      	movs	r3, #13
 800fb42:	18fb      	adds	r3, r7, r3
 800fb44:	2200      	movs	r2, #0
 800fb46:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800fb48:	230f      	movs	r3, #15
 800fb4a:	18fb      	adds	r3, r7, r3
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	701a      	strb	r2, [r3, #0]
 800fb50:	e03f      	b.n	800fbd2 <LoRaMacConfirmQueueHandleCb+0xa6>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800fb52:	4b26      	ldr	r3, [pc, #152]	@ (800fbec <LoRaMacConfirmQueueHandleCb+0xc0>)
 800fb54:	685b      	ldr	r3, [r3, #4]
 800fb56:	781a      	ldrb	r2, [r3, #0]
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800fb5c:	4b23      	ldr	r3, [pc, #140]	@ (800fbec <LoRaMacConfirmQueueHandleCb+0xc0>)
 800fb5e:	685b      	ldr	r3, [r3, #4]
 800fb60:	785a      	ldrb	r2, [r3, #1]
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800fb66:	4b21      	ldr	r3, [pc, #132]	@ (800fbec <LoRaMacConfirmQueueHandleCb+0xc0>)
 800fb68:	685a      	ldr	r2, [r3, #4]
 800fb6a:	210d      	movs	r1, #13
 800fb6c:	187b      	adds	r3, r7, r1
 800fb6e:	7892      	ldrb	r2, [r2, #2]
 800fb70:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
 800fb72:	187b      	adds	r3, r7, r1
 800fb74:	781b      	ldrb	r3, [r3, #0]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d006      	beq.n	800fb88 <LoRaMacConfirmQueueHandleCb+0x5c>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800fb7a:	4b1c      	ldr	r3, [pc, #112]	@ (800fbec <LoRaMacConfirmQueueHandleCb+0xc0>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	689b      	ldr	r3, [r3, #8]
 800fb80:	687a      	ldr	r2, [r7, #4]
 800fb82:	0010      	movs	r0, r2
 800fb84:	4798      	blx	r3
 800fb86:	e00f      	b.n	800fba8 <LoRaMacConfirmQueueHandleCb+0x7c>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800fb88:	4b18      	ldr	r3, [pc, #96]	@ (800fbec <LoRaMacConfirmQueueHandleCb+0xc0>)
 800fb8a:	685b      	ldr	r3, [r3, #4]
 800fb8c:	781a      	ldrb	r2, [r3, #0]
 800fb8e:	2108      	movs	r1, #8
 800fb90:	187b      	adds	r3, r7, r1
 800fb92:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800fb94:	4b15      	ldr	r3, [pc, #84]	@ (800fbec <LoRaMacConfirmQueueHandleCb+0xc0>)
 800fb96:	685b      	ldr	r3, [r3, #4]
 800fb98:	785a      	ldrb	r2, [r3, #1]
 800fb9a:	187b      	adds	r3, r7, r1
 800fb9c:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800fb9e:	4b13      	ldr	r3, [pc, #76]	@ (800fbec <LoRaMacConfirmQueueHandleCb+0xc0>)
 800fba0:	685b      	ldr	r3, [r3, #4]
 800fba2:	78da      	ldrb	r2, [r3, #3]
 800fba4:	187b      	adds	r3, r7, r1
 800fba6:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800fba8:	f7ff ff04 	bl	800f9b4 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800fbac:	230d      	movs	r3, #13
 800fbae:	18fb      	adds	r3, r7, r3
 800fbb0:	781b      	ldrb	r3, [r3, #0]
 800fbb2:	2201      	movs	r2, #1
 800fbb4:	4053      	eors	r3, r2
 800fbb6:	b2db      	uxtb	r3, r3
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d004      	beq.n	800fbc6 <LoRaMacConfirmQueueHandleCb+0x9a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800fbbc:	2308      	movs	r3, #8
 800fbbe:	18fb      	adds	r3, r7, r3
 800fbc0:	0018      	movs	r0, r3
 800fbc2:	f7ff fec3 	bl	800f94c <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800fbc6:	210f      	movs	r1, #15
 800fbc8:	187b      	adds	r3, r7, r1
 800fbca:	781a      	ldrb	r2, [r3, #0]
 800fbcc:	187b      	adds	r3, r7, r1
 800fbce:	3201      	adds	r2, #1
 800fbd0:	701a      	strb	r2, [r3, #0]
 800fbd2:	230f      	movs	r3, #15
 800fbd4:	18fa      	adds	r2, r7, r3
 800fbd6:	230e      	movs	r3, #14
 800fbd8:	18fb      	adds	r3, r7, r3
 800fbda:	7812      	ldrb	r2, [r2, #0]
 800fbdc:	781b      	ldrb	r3, [r3, #0]
 800fbde:	429a      	cmp	r2, r3
 800fbe0:	d3b7      	bcc.n	800fb52 <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
 800fbe2:	46c0      	nop			@ (mov r8, r8)
 800fbe4:	46c0      	nop			@ (mov r8, r8)
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	b004      	add	sp, #16
 800fbea:	bd80      	pop	{r7, pc}
 800fbec:	2000110c 	.word	0x2000110c

0800fbf0 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800fbf4:	4b02      	ldr	r3, [pc, #8]	@ (800fc00 <LoRaMacConfirmQueueGetCnt+0x10>)
 800fbf6:	691b      	ldr	r3, [r3, #16]
 800fbf8:	7d1b      	ldrb	r3, [r3, #20]
}
 800fbfa:	0018      	movs	r0, r3
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}
 800fc00:	2000110c 	.word	0x2000110c

0800fc04 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800fc08:	4b05      	ldr	r3, [pc, #20]	@ (800fc20 <LoRaMacConfirmQueueIsFull+0x1c>)
 800fc0a:	691b      	ldr	r3, [r3, #16]
 800fc0c:	7d1b      	ldrb	r3, [r3, #20]
 800fc0e:	2b04      	cmp	r3, #4
 800fc10:	d901      	bls.n	800fc16 <LoRaMacConfirmQueueIsFull+0x12>
    {
        return true;
 800fc12:	2301      	movs	r3, #1
 800fc14:	e000      	b.n	800fc18 <LoRaMacConfirmQueueIsFull+0x14>
    }
    else
    {
        return false;
 800fc16:	2300      	movs	r3, #0
    }
}
 800fc18:	0018      	movs	r0, r3
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	46c0      	nop			@ (mov r8, r8)
 800fc20:	2000110c 	.word	0x2000110c

0800fc24 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 800fc24:	b590      	push	{r4, r7, lr}
 800fc26:	b08f      	sub	sp, #60	@ 0x3c
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	60f8      	str	r0, [r7, #12]
 800fc2c:	0008      	movs	r0, r1
 800fc2e:	0011      	movs	r1, r2
 800fc30:	607b      	str	r3, [r7, #4]
 800fc32:	230a      	movs	r3, #10
 800fc34:	18fb      	adds	r3, r7, r3
 800fc36:	1c02      	adds	r2, r0, #0
 800fc38:	801a      	strh	r2, [r3, #0]
 800fc3a:	2309      	movs	r3, #9
 800fc3c:	18fb      	adds	r3, r7, r3
 800fc3e:	1c0a      	adds	r2, r1, #0
 800fc40:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d101      	bne.n	800fc4c <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fc48:	230a      	movs	r3, #10
 800fc4a:	e0ad      	b.n	800fda8 <PayloadEncrypt+0x184>
    }

    uint8_t bufferIndex = 0;
 800fc4c:	2337      	movs	r3, #55	@ 0x37
 800fc4e:	18fb      	adds	r3, r7, r3
 800fc50:	2200      	movs	r2, #0
 800fc52:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
 800fc54:	2334      	movs	r3, #52	@ 0x34
 800fc56:	18fb      	adds	r3, r7, r3
 800fc58:	2201      	movs	r2, #1
 800fc5a:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 800fc5c:	2320      	movs	r3, #32
 800fc5e:	18fb      	adds	r3, r7, r3
 800fc60:	2200      	movs	r2, #0
 800fc62:	601a      	str	r2, [r3, #0]
 800fc64:	3304      	adds	r3, #4
 800fc66:	220c      	movs	r2, #12
 800fc68:	2100      	movs	r1, #0
 800fc6a:	0018      	movs	r0, r3
 800fc6c:	f009 fe9e 	bl	80199ac <memset>
    uint8_t aBlock[16] = { 0 };
 800fc70:	2410      	movs	r4, #16
 800fc72:	193b      	adds	r3, r7, r4
 800fc74:	2200      	movs	r2, #0
 800fc76:	601a      	str	r2, [r3, #0]
 800fc78:	3304      	adds	r3, #4
 800fc7a:	220c      	movs	r2, #12
 800fc7c:	2100      	movs	r1, #0
 800fc7e:	0018      	movs	r0, r3
 800fc80:	f009 fe94 	bl	80199ac <memset>

    aBlock[0] = 0x01;
 800fc84:	0021      	movs	r1, r4
 800fc86:	187b      	adds	r3, r7, r1
 800fc88:	2201      	movs	r2, #1
 800fc8a:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
 800fc8c:	187a      	adds	r2, r7, r1
 800fc8e:	2340      	movs	r3, #64	@ 0x40
 800fc90:	2008      	movs	r0, #8
 800fc92:	181b      	adds	r3, r3, r0
 800fc94:	19db      	adds	r3, r3, r7
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	7153      	strb	r3, [r2, #5]

    aBlock[6] = address & 0xFF;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	b2da      	uxtb	r2, r3
 800fc9e:	187b      	adds	r3, r7, r1
 800fca0:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	0a1b      	lsrs	r3, r3, #8
 800fca6:	b2da      	uxtb	r2, r3
 800fca8:	187b      	adds	r3, r7, r1
 800fcaa:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	0c1b      	lsrs	r3, r3, #16
 800fcb0:	b2da      	uxtb	r2, r3
 800fcb2:	187b      	adds	r3, r7, r1
 800fcb4:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	0e1b      	lsrs	r3, r3, #24
 800fcba:	b2da      	uxtb	r2, r3
 800fcbc:	187b      	adds	r3, r7, r1
 800fcbe:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 800fcc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcc2:	b2da      	uxtb	r2, r3
 800fcc4:	187b      	adds	r3, r7, r1
 800fcc6:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800fcc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcca:	0a1b      	lsrs	r3, r3, #8
 800fccc:	b2da      	uxtb	r2, r3
 800fcce:	187b      	adds	r3, r7, r1
 800fcd0:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800fcd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcd4:	0c1b      	lsrs	r3, r3, #16
 800fcd6:	b2da      	uxtb	r2, r3
 800fcd8:	187b      	adds	r3, r7, r1
 800fcda:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800fcdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcde:	0e1b      	lsrs	r3, r3, #24
 800fce0:	b2da      	uxtb	r2, r3
 800fce2:	187b      	adds	r3, r7, r1
 800fce4:	735a      	strb	r2, [r3, #13]

    while( size > 0 )
 800fce6:	e058      	b.n	800fd9a <PayloadEncrypt+0x176>
    {
        aBlock[15] = ctr & 0xFF;
 800fce8:	2134      	movs	r1, #52	@ 0x34
 800fcea:	187b      	adds	r3, r7, r1
 800fcec:	881b      	ldrh	r3, [r3, #0]
 800fcee:	b2da      	uxtb	r2, r3
 800fcf0:	2010      	movs	r0, #16
 800fcf2:	183b      	adds	r3, r7, r0
 800fcf4:	73da      	strb	r2, [r3, #15]
        ctr++;
 800fcf6:	187b      	adds	r3, r7, r1
 800fcf8:	881a      	ldrh	r2, [r3, #0]
 800fcfa:	187b      	adds	r3, r7, r1
 800fcfc:	3201      	adds	r2, #1
 800fcfe:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800fd00:	2320      	movs	r3, #32
 800fd02:	18f9      	adds	r1, r7, r3
 800fd04:	2309      	movs	r3, #9
 800fd06:	18fb      	adds	r3, r7, r3
 800fd08:	781a      	ldrb	r2, [r3, #0]
 800fd0a:	1838      	adds	r0, r7, r0
 800fd0c:	000b      	movs	r3, r1
 800fd0e:	2110      	movs	r1, #16
 800fd10:	f7f9 fbee 	bl	80094f0 <SecureElementAesEncrypt>
 800fd14:	1e03      	subs	r3, r0, #0
 800fd16:	d001      	beq.n	800fd1c <PayloadEncrypt+0xf8>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800fd18:	230f      	movs	r3, #15
 800fd1a:	e045      	b.n	800fda8 <PayloadEncrypt+0x184>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800fd1c:	2333      	movs	r3, #51	@ 0x33
 800fd1e:	18fb      	adds	r3, r7, r3
 800fd20:	2200      	movs	r2, #0
 800fd22:	701a      	strb	r2, [r3, #0]
 800fd24:	e01f      	b.n	800fd66 <PayloadEncrypt+0x142>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800fd26:	2037      	movs	r0, #55	@ 0x37
 800fd28:	183b      	adds	r3, r7, r0
 800fd2a:	781a      	ldrb	r2, [r3, #0]
 800fd2c:	2433      	movs	r4, #51	@ 0x33
 800fd2e:	193b      	adds	r3, r7, r4
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	18d3      	adds	r3, r2, r3
 800fd34:	001a      	movs	r2, r3
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	189b      	adds	r3, r3, r2
 800fd3a:	7819      	ldrb	r1, [r3, #0]
 800fd3c:	193b      	adds	r3, r7, r4
 800fd3e:	781b      	ldrb	r3, [r3, #0]
 800fd40:	2220      	movs	r2, #32
 800fd42:	18ba      	adds	r2, r7, r2
 800fd44:	5cd2      	ldrb	r2, [r2, r3]
 800fd46:	183b      	adds	r3, r7, r0
 800fd48:	7818      	ldrb	r0, [r3, #0]
 800fd4a:	193b      	adds	r3, r7, r4
 800fd4c:	781b      	ldrb	r3, [r3, #0]
 800fd4e:	18c3      	adds	r3, r0, r3
 800fd50:	0018      	movs	r0, r3
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	181b      	adds	r3, r3, r0
 800fd56:	404a      	eors	r2, r1
 800fd58:	b2d2      	uxtb	r2, r2
 800fd5a:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800fd5c:	193b      	adds	r3, r7, r4
 800fd5e:	781a      	ldrb	r2, [r3, #0]
 800fd60:	193b      	adds	r3, r7, r4
 800fd62:	3201      	adds	r2, #1
 800fd64:	701a      	strb	r2, [r3, #0]
 800fd66:	2333      	movs	r3, #51	@ 0x33
 800fd68:	18fb      	adds	r3, r7, r3
 800fd6a:	781a      	ldrb	r2, [r3, #0]
 800fd6c:	230a      	movs	r3, #10
 800fd6e:	18fb      	adds	r3, r7, r3
 800fd70:	881b      	ldrh	r3, [r3, #0]
 800fd72:	b219      	sxth	r1, r3
 800fd74:	2910      	cmp	r1, #16
 800fd76:	dd00      	ble.n	800fd7a <PayloadEncrypt+0x156>
 800fd78:	2310      	movs	r3, #16
 800fd7a:	b21b      	sxth	r3, r3
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	dbd2      	blt.n	800fd26 <PayloadEncrypt+0x102>
        }
        size -= 16;
 800fd80:	210a      	movs	r1, #10
 800fd82:	187b      	adds	r3, r7, r1
 800fd84:	881b      	ldrh	r3, [r3, #0]
 800fd86:	3b10      	subs	r3, #16
 800fd88:	b29a      	uxth	r2, r3
 800fd8a:	187b      	adds	r3, r7, r1
 800fd8c:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
 800fd8e:	2237      	movs	r2, #55	@ 0x37
 800fd90:	18bb      	adds	r3, r7, r2
 800fd92:	18ba      	adds	r2, r7, r2
 800fd94:	7812      	ldrb	r2, [r2, #0]
 800fd96:	3210      	adds	r2, #16
 800fd98:	701a      	strb	r2, [r3, #0]
    while( size > 0 )
 800fd9a:	230a      	movs	r3, #10
 800fd9c:	18fb      	adds	r3, r7, r3
 800fd9e:	2200      	movs	r2, #0
 800fda0:	5e9b      	ldrsh	r3, [r3, r2]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	dca0      	bgt.n	800fce8 <PayloadEncrypt+0xc4>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800fda6:	2300      	movs	r3, #0
}
 800fda8:	0018      	movs	r0, r3
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	b00f      	add	sp, #60	@ 0x3c
 800fdae:	bd90      	pop	{r4, r7, pc}

0800fdb0 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800fdb0:	b5b0      	push	{r4, r5, r7, lr}
 800fdb2:	b084      	sub	sp, #16
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	0005      	movs	r5, r0
 800fdb8:	000c      	movs	r4, r1
 800fdba:	0010      	movs	r0, r2
 800fdbc:	0019      	movs	r1, r3
 800fdbe:	1dbb      	adds	r3, r7, #6
 800fdc0:	1c2a      	adds	r2, r5, #0
 800fdc2:	801a      	strh	r2, [r3, #0]
 800fdc4:	1d7b      	adds	r3, r7, #5
 800fdc6:	1c22      	adds	r2, r4, #0
 800fdc8:	701a      	strb	r2, [r3, #0]
 800fdca:	1d3b      	adds	r3, r7, #4
 800fdcc:	1c02      	adds	r2, r0, #0
 800fdce:	701a      	strb	r2, [r3, #0]
 800fdd0:	1cfb      	adds	r3, r7, #3
 800fdd2:	1c0a      	adds	r2, r1, #0
 800fdd4:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
 800fdd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d101      	bne.n	800fde0 <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fddc:	230a      	movs	r3, #10
 800fdde:	e070      	b.n	800fec2 <PrepareB0+0x112>
    }

    b0[0] = 0x49;
 800fde0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fde2:	2249      	movs	r2, #73	@ 0x49
 800fde4:	701a      	strb	r2, [r3, #0]

    if( ( isAck == true ) && ( dir == DOWNLINK ) )
 800fde6:	1d3b      	adds	r3, r7, #4
 800fde8:	781b      	ldrb	r3, [r3, #0]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d01b      	beq.n	800fe26 <PrepareB0+0x76>
 800fdee:	1cfb      	adds	r3, r7, #3
 800fdf0:	781b      	ldrb	r3, [r3, #0]
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	d117      	bne.n	800fe26 <PrepareB0+0x76>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink or downlink frame that is being acknowledged
        uint16_t confFCnt = 0;
 800fdf6:	210e      	movs	r1, #14
 800fdf8:	187b      	adds	r3, r7, r1
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	801a      	strh	r2, [r3, #0]

        confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntList.FCntUp % 65536 );
 800fdfe:	4b33      	ldr	r3, [pc, #204]	@ (800fecc <PrepareB0+0x11c>)
 800fe00:	685b      	ldr	r3, [r3, #4]
 800fe02:	68da      	ldr	r2, [r3, #12]
 800fe04:	187b      	adds	r3, r7, r1
 800fe06:	801a      	strh	r2, [r3, #0]

        b0[1] = confFCnt & 0xFF;
 800fe08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe0a:	3301      	adds	r3, #1
 800fe0c:	187a      	adds	r2, r7, r1
 800fe0e:	8812      	ldrh	r2, [r2, #0]
 800fe10:	b2d2      	uxtb	r2, r2
 800fe12:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 800fe14:	187b      	adds	r3, r7, r1
 800fe16:	881b      	ldrh	r3, [r3, #0]
 800fe18:	0a1b      	lsrs	r3, r3, #8
 800fe1a:	b29a      	uxth	r2, r3
 800fe1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe1e:	3302      	adds	r3, #2
 800fe20:	b2d2      	uxtb	r2, r2
 800fe22:	701a      	strb	r2, [r3, #0]
    {
 800fe24:	e007      	b.n	800fe36 <PrepareB0+0x86>
    }
    else
    {
        b0[1] = 0x00;
 800fe26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe28:	3301      	adds	r3, #1
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 800fe2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe30:	3302      	adds	r3, #2
 800fe32:	2200      	movs	r2, #0
 800fe34:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 800fe36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe38:	3303      	adds	r3, #3
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 800fe3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe40:	3304      	adds	r3, #4
 800fe42:	2200      	movs	r2, #0
 800fe44:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 800fe46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe48:	3305      	adds	r3, #5
 800fe4a:	1cfa      	adds	r2, r7, #3
 800fe4c:	7812      	ldrb	r2, [r2, #0]
 800fe4e:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 800fe50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe52:	3306      	adds	r3, #6
 800fe54:	6a3a      	ldr	r2, [r7, #32]
 800fe56:	b2d2      	uxtb	r2, r2
 800fe58:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800fe5a:	6a3b      	ldr	r3, [r7, #32]
 800fe5c:	0a1a      	lsrs	r2, r3, #8
 800fe5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe60:	3307      	adds	r3, #7
 800fe62:	b2d2      	uxtb	r2, r2
 800fe64:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800fe66:	6a3b      	ldr	r3, [r7, #32]
 800fe68:	0c1a      	lsrs	r2, r3, #16
 800fe6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe6c:	3308      	adds	r3, #8
 800fe6e:	b2d2      	uxtb	r2, r2
 800fe70:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800fe72:	6a3b      	ldr	r3, [r7, #32]
 800fe74:	0e1a      	lsrs	r2, r3, #24
 800fe76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe78:	3309      	adds	r3, #9
 800fe7a:	b2d2      	uxtb	r2, r2
 800fe7c:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 800fe7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe80:	330a      	adds	r3, #10
 800fe82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe84:	b2d2      	uxtb	r2, r2
 800fe86:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800fe88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe8a:	0a1a      	lsrs	r2, r3, #8
 800fe8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe8e:	330b      	adds	r3, #11
 800fe90:	b2d2      	uxtb	r2, r2
 800fe92:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800fe94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe96:	0c1a      	lsrs	r2, r3, #16
 800fe98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe9a:	330c      	adds	r3, #12
 800fe9c:	b2d2      	uxtb	r2, r2
 800fe9e:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800fea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fea2:	0e1a      	lsrs	r2, r3, #24
 800fea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fea6:	330d      	adds	r3, #13
 800fea8:	b2d2      	uxtb	r2, r2
 800feaa:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 800feac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feae:	330e      	adds	r3, #14
 800feb0:	2200      	movs	r2, #0
 800feb2:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 800feb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feb6:	330f      	adds	r3, #15
 800feb8:	1dba      	adds	r2, r7, #6
 800feba:	8812      	ldrh	r2, [r2, #0]
 800febc:	b2d2      	uxtb	r2, r2
 800febe:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800fec0:	2300      	movs	r3, #0
}
 800fec2:	0018      	movs	r0, r3
 800fec4:	46bd      	mov	sp, r7
 800fec6:	b004      	add	sp, #16
 800fec8:	bdb0      	pop	{r4, r5, r7, pc}
 800feca:	46c0      	nop			@ (mov r8, r8)
 800fecc:	20001120 	.word	0x20001120

0800fed0 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 800fed0:	b5b0      	push	{r4, r5, r7, lr}
 800fed2:	b08a      	sub	sp, #40	@ 0x28
 800fed4:	af04      	add	r7, sp, #16
 800fed6:	6078      	str	r0, [r7, #4]
 800fed8:	000c      	movs	r4, r1
 800feda:	0010      	movs	r0, r2
 800fedc:	0019      	movs	r1, r3
 800fede:	1cbb      	adds	r3, r7, #2
 800fee0:	1c22      	adds	r2, r4, #0
 800fee2:	801a      	strh	r2, [r3, #0]
 800fee4:	1c7b      	adds	r3, r7, #1
 800fee6:	1c02      	adds	r2, r0, #0
 800fee8:	701a      	strb	r2, [r3, #0]
 800feea:	003b      	movs	r3, r7
 800feec:	1c0a      	adds	r2, r1, #0
 800feee:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d002      	beq.n	800fefc <ComputeCmacB0+0x2c>
 800fef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d101      	bne.n	800ff00 <ComputeCmacB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fefc:	230a      	movs	r3, #10
 800fefe:	e02a      	b.n	800ff56 <ComputeCmacB0+0x86>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800ff00:	1cbb      	adds	r3, r7, #2
 800ff02:	881a      	ldrh	r2, [r3, #0]
 800ff04:	2380      	movs	r3, #128	@ 0x80
 800ff06:	005b      	lsls	r3, r3, #1
 800ff08:	429a      	cmp	r2, r3
 800ff0a:	d901      	bls.n	800ff10 <ComputeCmacB0+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800ff0c:	230e      	movs	r3, #14
 800ff0e:	e022      	b.n	800ff56 <ComputeCmacB0+0x86>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800ff10:	2328      	movs	r3, #40	@ 0x28
 800ff12:	18fb      	adds	r3, r7, r3
 800ff14:	781c      	ldrb	r4, [r3, #0]
 800ff16:	003b      	movs	r3, r7
 800ff18:	781a      	ldrb	r2, [r3, #0]
 800ff1a:	1c7b      	adds	r3, r7, #1
 800ff1c:	7819      	ldrb	r1, [r3, #0]
 800ff1e:	1cbb      	adds	r3, r7, #2
 800ff20:	8818      	ldrh	r0, [r3, #0]
 800ff22:	2508      	movs	r5, #8
 800ff24:	197b      	adds	r3, r7, r5
 800ff26:	9302      	str	r3, [sp, #8]
 800ff28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff2a:	9301      	str	r3, [sp, #4]
 800ff2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff2e:	9300      	str	r3, [sp, #0]
 800ff30:	0023      	movs	r3, r4
 800ff32:	f7ff ff3d 	bl	800fdb0 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800ff36:	1c7b      	adds	r3, r7, #1
 800ff38:	781c      	ldrb	r4, [r3, #0]
 800ff3a:	1cbb      	adds	r3, r7, #2
 800ff3c:	881a      	ldrh	r2, [r3, #0]
 800ff3e:	6879      	ldr	r1, [r7, #4]
 800ff40:	1978      	adds	r0, r7, r5
 800ff42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff44:	9300      	str	r3, [sp, #0]
 800ff46:	0023      	movs	r3, r4
 800ff48:	f7f9 fa70 	bl	800942c <SecureElementComputeAesCmac>
 800ff4c:	1e03      	subs	r3, r0, #0
 800ff4e:	d001      	beq.n	800ff54 <ComputeCmacB0+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ff50:	230f      	movs	r3, #15
 800ff52:	e000      	b.n	800ff56 <ComputeCmacB0+0x86>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800ff54:	2300      	movs	r3, #0
}
 800ff56:	0018      	movs	r0, r3
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	b006      	add	sp, #24
 800ff5c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ff60 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 800ff60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff62:	b0cd      	sub	sp, #308	@ 0x134
 800ff64:	af04      	add	r7, sp, #16
 800ff66:	6078      	str	r0, [r7, #4]
 800ff68:	000c      	movs	r4, r1
 800ff6a:	0010      	movs	r0, r2
 800ff6c:	0019      	movs	r1, r3
 800ff6e:	4b46      	ldr	r3, [pc, #280]	@ (8010088 <VerifyCmacB0+0x128>)
 800ff70:	2590      	movs	r5, #144	@ 0x90
 800ff72:	006d      	lsls	r5, r5, #1
 800ff74:	195b      	adds	r3, r3, r5
 800ff76:	19db      	adds	r3, r3, r7
 800ff78:	1c22      	adds	r2, r4, #0
 800ff7a:	801a      	strh	r2, [r3, #0]
 800ff7c:	4b43      	ldr	r3, [pc, #268]	@ (801008c <VerifyCmacB0+0x12c>)
 800ff7e:	002c      	movs	r4, r5
 800ff80:	191b      	adds	r3, r3, r4
 800ff82:	19db      	adds	r3, r3, r7
 800ff84:	1c02      	adds	r2, r0, #0
 800ff86:	701a      	strb	r2, [r3, #0]
 800ff88:	4b41      	ldr	r3, [pc, #260]	@ (8010090 <VerifyCmacB0+0x130>)
 800ff8a:	191b      	adds	r3, r3, r4
 800ff8c:	19db      	adds	r3, r3, r7
 800ff8e:	1c0a      	adds	r2, r1, #0
 800ff90:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d101      	bne.n	800ff9c <VerifyCmacB0+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ff98:	230a      	movs	r3, #10
 800ff9a:	e070      	b.n	801007e <VerifyCmacB0+0x11e>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800ff9c:	4b3a      	ldr	r3, [pc, #232]	@ (8010088 <VerifyCmacB0+0x128>)
 800ff9e:	2290      	movs	r2, #144	@ 0x90
 800ffa0:	0052      	lsls	r2, r2, #1
 800ffa2:	189b      	adds	r3, r3, r2
 800ffa4:	19db      	adds	r3, r3, r7
 800ffa6:	881a      	ldrh	r2, [r3, #0]
 800ffa8:	2380      	movs	r3, #128	@ 0x80
 800ffaa:	005b      	lsls	r3, r3, #1
 800ffac:	429a      	cmp	r2, r3
 800ffae:	d901      	bls.n	800ffb4 <VerifyCmacB0+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800ffb0:	230e      	movs	r3, #14
 800ffb2:	e064      	b.n	801007e <VerifyCmacB0+0x11e>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800ffb4:	2388      	movs	r3, #136	@ 0x88
 800ffb6:	005a      	lsls	r2, r3, #1
 800ffb8:	260c      	movs	r6, #12
 800ffba:	19bb      	adds	r3, r7, r6
 800ffbc:	2100      	movs	r1, #0
 800ffbe:	0018      	movs	r0, r3
 800ffc0:	f005 fb18 	bl	80155f4 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800ffc4:	2398      	movs	r3, #152	@ 0x98
 800ffc6:	005b      	lsls	r3, r3, #1
 800ffc8:	2008      	movs	r0, #8
 800ffca:	181b      	adds	r3, r3, r0
 800ffcc:	19db      	adds	r3, r3, r7
 800ffce:	781c      	ldrb	r4, [r3, #0]
 800ffd0:	4b2f      	ldr	r3, [pc, #188]	@ (8010090 <VerifyCmacB0+0x130>)
 800ffd2:	2590      	movs	r5, #144	@ 0x90
 800ffd4:	006d      	lsls	r5, r5, #1
 800ffd6:	195b      	adds	r3, r3, r5
 800ffd8:	19db      	adds	r3, r3, r7
 800ffda:	781a      	ldrb	r2, [r3, #0]
 800ffdc:	4b2b      	ldr	r3, [pc, #172]	@ (801008c <VerifyCmacB0+0x12c>)
 800ffde:	195b      	adds	r3, r3, r5
 800ffe0:	19db      	adds	r3, r3, r7
 800ffe2:	7819      	ldrb	r1, [r3, #0]
 800ffe4:	4b28      	ldr	r3, [pc, #160]	@ (8010088 <VerifyCmacB0+0x128>)
 800ffe6:	195b      	adds	r3, r3, r5
 800ffe8:	19db      	adds	r3, r3, r7
 800ffea:	881b      	ldrh	r3, [r3, #0]
 800ffec:	469c      	mov	ip, r3
 800ffee:	19bb      	adds	r3, r7, r6
 800fff0:	9302      	str	r3, [sp, #8]
 800fff2:	239c      	movs	r3, #156	@ 0x9c
 800fff4:	005b      	lsls	r3, r3, #1
 800fff6:	181b      	adds	r3, r3, r0
 800fff8:	19db      	adds	r3, r3, r7
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	9301      	str	r3, [sp, #4]
 800fffe:	239a      	movs	r3, #154	@ 0x9a
 8010000:	005b      	lsls	r3, r3, #1
 8010002:	181b      	adds	r3, r3, r0
 8010004:	19db      	adds	r3, r3, r7
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	9300      	str	r3, [sp, #0]
 801000a:	0023      	movs	r3, r4
 801000c:	4660      	mov	r0, ip
 801000e:	f7ff fecf 	bl	800fdb0 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8010012:	19bb      	adds	r3, r7, r6
 8010014:	3310      	adds	r3, #16
 8010016:	4a1c      	ldr	r2, [pc, #112]	@ (8010088 <VerifyCmacB0+0x128>)
 8010018:	1952      	adds	r2, r2, r5
 801001a:	19d2      	adds	r2, r2, r7
 801001c:	8812      	ldrh	r2, [r2, #0]
 801001e:	6879      	ldr	r1, [r7, #4]
 8010020:	0018      	movs	r0, r3
 8010022:	f005 faa9 	bl	8015578 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8010026:	2020      	movs	r0, #32
 8010028:	30ff      	adds	r0, #255	@ 0xff
 801002a:	183b      	adds	r3, r7, r0
 801002c:	2206      	movs	r2, #6
 801002e:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8010030:	4b15      	ldr	r3, [pc, #84]	@ (8010088 <VerifyCmacB0+0x128>)
 8010032:	195b      	adds	r3, r3, r5
 8010034:	19db      	adds	r3, r3, r7
 8010036:	881b      	ldrh	r3, [r3, #0]
 8010038:	3310      	adds	r3, #16
 801003a:	b299      	uxth	r1, r3
 801003c:	183c      	adds	r4, r7, r0
 801003e:	4b13      	ldr	r3, [pc, #76]	@ (801008c <VerifyCmacB0+0x12c>)
 8010040:	195b      	adds	r3, r3, r5
 8010042:	19db      	adds	r3, r3, r7
 8010044:	781b      	ldrb	r3, [r3, #0]
 8010046:	229e      	movs	r2, #158	@ 0x9e
 8010048:	0052      	lsls	r2, r2, #1
 801004a:	2008      	movs	r0, #8
 801004c:	1812      	adds	r2, r2, r0
 801004e:	19d2      	adds	r2, r2, r7
 8010050:	6812      	ldr	r2, [r2, #0]
 8010052:	19b8      	adds	r0, r7, r6
 8010054:	f7f9 fa0b 	bl	800946e <SecureElementVerifyAesCmac>
 8010058:	0003      	movs	r3, r0
 801005a:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 801005c:	2020      	movs	r0, #32
 801005e:	30ff      	adds	r0, #255	@ 0xff
 8010060:	183b      	adds	r3, r7, r0
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d101      	bne.n	801006c <VerifyCmacB0+0x10c>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8010068:	2300      	movs	r3, #0
 801006a:	e008      	b.n	801007e <VerifyCmacB0+0x11e>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 801006c:	2320      	movs	r3, #32
 801006e:	33ff      	adds	r3, #255	@ 0xff
 8010070:	18fb      	adds	r3, r7, r3
 8010072:	781b      	ldrb	r3, [r3, #0]
 8010074:	2b01      	cmp	r3, #1
 8010076:	d101      	bne.n	801007c <VerifyCmacB0+0x11c>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8010078:	2301      	movs	r3, #1
 801007a:	e000      	b.n	801007e <VerifyCmacB0+0x11e>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801007c:	230f      	movs	r3, #15
}
 801007e:	0018      	movs	r0, r3
 8010080:	46bd      	mov	sp, r7
 8010082:	b049      	add	sp, #292	@ 0x124
 8010084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010086:	46c0      	nop			@ (mov r8, r8)
 8010088:	fffffee2 	.word	0xfffffee2
 801008c:	fffffee1 	.word	0xfffffee1
 8010090:	fffffee0 	.word	0xfffffee0

08010094 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b084      	sub	sp, #16
 8010098:	af00      	add	r7, sp, #0
 801009a:	0002      	movs	r2, r0
 801009c:	6039      	str	r1, [r7, #0]
 801009e:	1dfb      	adds	r3, r7, #7
 80100a0:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80100a2:	230f      	movs	r3, #15
 80100a4:	18fb      	adds	r3, r7, r3
 80100a6:	2200      	movs	r2, #0
 80100a8:	701a      	strb	r2, [r3, #0]
 80100aa:	e018      	b.n	80100de <GetKeyAddrItem+0x4a>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80100ac:	210f      	movs	r1, #15
 80100ae:	187b      	adds	r3, r7, r1
 80100b0:	781a      	ldrb	r2, [r3, #0]
 80100b2:	4b10      	ldr	r3, [pc, #64]	@ (80100f4 <GetKeyAddrItem+0x60>)
 80100b4:	0092      	lsls	r2, r2, #2
 80100b6:	5cd3      	ldrb	r3, [r2, r3]
 80100b8:	1dfa      	adds	r2, r7, #7
 80100ba:	7812      	ldrb	r2, [r2, #0]
 80100bc:	429a      	cmp	r2, r3
 80100be:	d108      	bne.n	80100d2 <GetKeyAddrItem+0x3e>
        {
            *item = &( KeyAddrList[i] );
 80100c0:	187b      	adds	r3, r7, r1
 80100c2:	781b      	ldrb	r3, [r3, #0]
 80100c4:	009a      	lsls	r2, r3, #2
 80100c6:	4b0b      	ldr	r3, [pc, #44]	@ (80100f4 <GetKeyAddrItem+0x60>)
 80100c8:	18d2      	adds	r2, r2, r3
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80100ce:	2300      	movs	r3, #0
 80100d0:	e00b      	b.n	80100ea <GetKeyAddrItem+0x56>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80100d2:	210f      	movs	r1, #15
 80100d4:	187b      	adds	r3, r7, r1
 80100d6:	781a      	ldrb	r2, [r3, #0]
 80100d8:	187b      	adds	r3, r7, r1
 80100da:	3201      	adds	r2, #1
 80100dc:	701a      	strb	r2, [r3, #0]
 80100de:	230f      	movs	r3, #15
 80100e0:	18fb      	adds	r3, r7, r3
 80100e2:	781b      	ldrb	r3, [r3, #0]
 80100e4:	2b04      	cmp	r3, #4
 80100e6:	d9e1      	bls.n	80100ac <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80100e8:	230c      	movs	r3, #12
}
 80100ea:	0018      	movs	r0, r3
 80100ec:	46bd      	mov	sp, r7
 80100ee:	b004      	add	sp, #16
 80100f0:	bd80      	pop	{r7, pc}
 80100f2:	46c0      	nop			@ (mov r8, r8)
 80100f4:	20000074 	.word	0x20000074

080100f8 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
 80100f8:	b590      	push	{r4, r7, lr}
 80100fa:	b089      	sub	sp, #36	@ 0x24
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	60b9      	str	r1, [r7, #8]
 8010100:	607a      	str	r2, [r7, #4]
 8010102:	603b      	str	r3, [r7, #0]
 8010104:	230f      	movs	r3, #15
 8010106:	18fb      	adds	r3, r7, r3
 8010108:	1c02      	adds	r2, r0, #0
 801010a:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d005      	beq.n	801011e <DeriveSessionKey10x+0x26>
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d002      	beq.n	801011e <DeriveSessionKey10x+0x26>
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d101      	bne.n	8010122 <DeriveSessionKey10x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801011e:	230a      	movs	r3, #10
 8010120:	e046      	b.n	80101b0 <DeriveSessionKey10x+0xb8>
    }

    uint8_t compBase[16] = { 0 };
 8010122:	2310      	movs	r3, #16
 8010124:	18fb      	adds	r3, r7, r3
 8010126:	2200      	movs	r2, #0
 8010128:	601a      	str	r2, [r3, #0]
 801012a:	3304      	adds	r3, #4
 801012c:	220c      	movs	r2, #12
 801012e:	2100      	movs	r1, #0
 8010130:	0018      	movs	r0, r3
 8010132:	f009 fc3b 	bl	80199ac <memset>

    switch( keyID )
 8010136:	230f      	movs	r3, #15
 8010138:	18fb      	adds	r3, r7, r3
 801013a:	781b      	ldrb	r3, [r3, #0]
 801013c:	2b07      	cmp	r3, #7
 801013e:	dc02      	bgt.n	8010146 <DeriveSessionKey10x+0x4e>
 8010140:	2b05      	cmp	r3, #5
 8010142:	da03      	bge.n	801014c <DeriveSessionKey10x+0x54>
 8010144:	e00c      	b.n	8010160 <DeriveSessionKey10x+0x68>
 8010146:	2b08      	cmp	r3, #8
 8010148:	d005      	beq.n	8010156 <DeriveSessionKey10x+0x5e>
 801014a:	e009      	b.n	8010160 <DeriveSessionKey10x+0x68>
    {
        case F_NWK_S_INT_KEY:
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
            compBase[0] = 0x01;
 801014c:	2310      	movs	r3, #16
 801014e:	18fb      	adds	r3, r7, r3
 8010150:	2201      	movs	r2, #1
 8010152:	701a      	strb	r2, [r3, #0]
            break;
 8010154:	e006      	b.n	8010164 <DeriveSessionKey10x+0x6c>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8010156:	2310      	movs	r3, #16
 8010158:	18fb      	adds	r3, r7, r3
 801015a:	2202      	movs	r2, #2
 801015c:	701a      	strb	r2, [r3, #0]
            break;
 801015e:	e001      	b.n	8010164 <DeriveSessionKey10x+0x6c>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8010160:	230b      	movs	r3, #11
 8010162:	e025      	b.n	80101b0 <DeriveSessionKey10x+0xb8>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 8010164:	2410      	movs	r4, #16
 8010166:	193b      	adds	r3, r7, r4
 8010168:	3301      	adds	r3, #1
 801016a:	68b9      	ldr	r1, [r7, #8]
 801016c:	2203      	movs	r2, #3
 801016e:	0018      	movs	r0, r3
 8010170:	f005 fa02 	bl	8015578 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 8010174:	193b      	adds	r3, r7, r4
 8010176:	3304      	adds	r3, #4
 8010178:	6879      	ldr	r1, [r7, #4]
 801017a:	2203      	movs	r2, #3
 801017c:	0018      	movs	r0, r3
 801017e:	f005 f9fb 	bl	8015578 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 8010182:	193b      	adds	r3, r7, r4
 8010184:	3307      	adds	r3, #7
 8010186:	6839      	ldr	r1, [r7, #0]
 8010188:	2202      	movs	r2, #2
 801018a:	0018      	movs	r0, r3
 801018c:	f005 f9f4 	bl	8015578 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8010190:	4b09      	ldr	r3, [pc, #36]	@ (80101b8 <DeriveSessionKey10x+0xc0>)
 8010192:	685b      	ldr	r3, [r3, #4]
 8010194:	220f      	movs	r2, #15
 8010196:	18ba      	adds	r2, r7, r2
 8010198:	7812      	ldrb	r2, [r2, #0]
 801019a:	1939      	adds	r1, r7, r4
 801019c:	6818      	ldr	r0, [r3, #0]
 801019e:	0013      	movs	r3, r2
 80101a0:	2202      	movs	r2, #2
 80101a2:	f7f9 fa0f 	bl	80095c4 <SecureElementDeriveAndStoreKey>
 80101a6:	1e03      	subs	r3, r0, #0
 80101a8:	d001      	beq.n	80101ae <DeriveSessionKey10x+0xb6>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80101aa:	230f      	movs	r3, #15
 80101ac:	e000      	b.n	80101b0 <DeriveSessionKey10x+0xb8>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80101ae:	2300      	movs	r3, #0
}
 80101b0:	0018      	movs	r0, r3
 80101b2:	46bd      	mov	sp, r7
 80101b4:	b009      	add	sp, #36	@ 0x24
 80101b6:	bd90      	pop	{r4, r7, pc}
 80101b8:	20001120 	.word	0x20001120

080101bc <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b082      	sub	sp, #8
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	0002      	movs	r2, r0
 80101c4:	6039      	str	r1, [r7, #0]
 80101c6:	1dfb      	adds	r3, r7, #7
 80101c8:	701a      	strb	r2, [r3, #0]
    if( lastDown == NULL )
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d101      	bne.n	80101d4 <GetLastFcntDown+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80101d0:	230a      	movs	r3, #10
 80101d2:	e047      	b.n	8010264 <GetLastFcntDown+0xa8>
    }
    switch( fCntID )
 80101d4:	1dfb      	adds	r3, r7, #7
 80101d6:	781b      	ldrb	r3, [r3, #0]
 80101d8:	2b07      	cmp	r3, #7
 80101da:	d840      	bhi.n	801025e <GetLastFcntDown+0xa2>
 80101dc:	009a      	lsls	r2, r3, #2
 80101de:	4b23      	ldr	r3, [pc, #140]	@ (801026c <GetLastFcntDown+0xb0>)
 80101e0:	18d3      	adds	r3, r2, r3
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	469f      	mov	pc, r3
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 80101e6:	4b22      	ldr	r3, [pc, #136]	@ (8010270 <GetLastFcntDown+0xb4>)
 80101e8:	685b      	ldr	r3, [r3, #4]
 80101ea:	691a      	ldr	r2, [r3, #16]
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 80101f0:	4b1f      	ldr	r3, [pc, #124]	@ (8010270 <GetLastFcntDown+0xb4>)
 80101f2:	685a      	ldr	r2, [r3, #4]
 80101f4:	4b1e      	ldr	r3, [pc, #120]	@ (8010270 <GetLastFcntDown+0xb4>)
 80101f6:	685b      	ldr	r3, [r3, #4]
 80101f8:	3210      	adds	r2, #16
 80101fa:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 80101fc:	e031      	b.n	8010262 <GetLastFcntDown+0xa6>
        case A_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 80101fe:	4b1c      	ldr	r3, [pc, #112]	@ (8010270 <GetLastFcntDown+0xb4>)
 8010200:	685b      	ldr	r3, [r3, #4]
 8010202:	695a      	ldr	r2, [r3, #20]
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8010208:	4b19      	ldr	r3, [pc, #100]	@ (8010270 <GetLastFcntDown+0xb4>)
 801020a:	685a      	ldr	r2, [r3, #4]
 801020c:	4b18      	ldr	r3, [pc, #96]	@ (8010270 <GetLastFcntDown+0xb4>)
 801020e:	685b      	ldr	r3, [r3, #4]
 8010210:	3214      	adds	r2, #20
 8010212:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8010214:	e025      	b.n	8010262 <GetLastFcntDown+0xa6>
        case FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 8010216:	4b16      	ldr	r3, [pc, #88]	@ (8010270 <GetLastFcntDown+0xb4>)
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	699a      	ldr	r2, [r3, #24]
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 8010220:	4b13      	ldr	r3, [pc, #76]	@ (8010270 <GetLastFcntDown+0xb4>)
 8010222:	685a      	ldr	r2, [r3, #4]
 8010224:	4b12      	ldr	r3, [pc, #72]	@ (8010270 <GetLastFcntDown+0xb4>)
 8010226:	685b      	ldr	r3, [r3, #4]
 8010228:	3218      	adds	r2, #24
 801022a:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 801022c:	e019      	b.n	8010262 <GetLastFcntDown+0xa6>
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 801022e:	4b10      	ldr	r3, [pc, #64]	@ (8010270 <GetLastFcntDown+0xb4>)
 8010230:	685b      	ldr	r3, [r3, #4]
 8010232:	69da      	ldr	r2, [r3, #28]
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	601a      	str	r2, [r3, #0]
            break;
 8010238:	e013      	b.n	8010262 <GetLastFcntDown+0xa6>
        case MC_FCNT_DOWN_1:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 801023a:	4b0d      	ldr	r3, [pc, #52]	@ (8010270 <GetLastFcntDown+0xb4>)
 801023c:	685b      	ldr	r3, [r3, #4]
 801023e:	6a1a      	ldr	r2, [r3, #32]
 8010240:	683b      	ldr	r3, [r7, #0]
 8010242:	601a      	str	r2, [r3, #0]
            break;
 8010244:	e00d      	b.n	8010262 <GetLastFcntDown+0xa6>
        case MC_FCNT_DOWN_2:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 8010246:	4b0a      	ldr	r3, [pc, #40]	@ (8010270 <GetLastFcntDown+0xb4>)
 8010248:	685b      	ldr	r3, [r3, #4]
 801024a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	601a      	str	r2, [r3, #0]
            break;
 8010250:	e007      	b.n	8010262 <GetLastFcntDown+0xa6>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 8010252:	4b07      	ldr	r3, [pc, #28]	@ (8010270 <GetLastFcntDown+0xb4>)
 8010254:	685b      	ldr	r3, [r3, #4]
 8010256:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	601a      	str	r2, [r3, #0]
            break;
 801025c:	e001      	b.n	8010262 <GetLastFcntDown+0xa6>
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 801025e:	2305      	movs	r3, #5
 8010260:	e000      	b.n	8010264 <GetLastFcntDown+0xa8>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8010262:	2300      	movs	r3, #0
}
 8010264:	0018      	movs	r0, r3
 8010266:	46bd      	mov	sp, r7
 8010268:	b002      	add	sp, #8
 801026a:	bd80      	pop	{r7, pc}
 801026c:	0801b37c 	.word	0x0801b37c
 8010270:	20001120 	.word	0x20001120

08010274 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b084      	sub	sp, #16
 8010278:	af00      	add	r7, sp, #0
 801027a:	0002      	movs	r2, r0
 801027c:	6039      	str	r1, [r7, #0]
 801027e:	1dfb      	adds	r3, r7, #7
 8010280:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
 8010282:	2300      	movs	r3, #0
 8010284:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8010286:	230c      	movs	r3, #12
 8010288:	18fa      	adds	r2, r7, r3
 801028a:	1dfb      	adds	r3, r7, #7
 801028c:	781b      	ldrb	r3, [r3, #0]
 801028e:	0011      	movs	r1, r2
 8010290:	0018      	movs	r0, r3
 8010292:	f7ff ff93 	bl	80101bc <GetLastFcntDown>
 8010296:	1e03      	subs	r3, r0, #0
 8010298:	d001      	beq.n	801029e <CheckFCntDown+0x2a>
    {
        return false;
 801029a:	2300      	movs	r3, #0
 801029c:	e009      	b.n	80102b2 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	683a      	ldr	r2, [r7, #0]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d802      	bhi.n	80102ac <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 80102a6:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80102a8:	3301      	adds	r3, #1
 80102aa:	d101      	bne.n	80102b0 <CheckFCntDown+0x3c>
    {
        return true;
 80102ac:	2301      	movs	r3, #1
 80102ae:	e000      	b.n	80102b2 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80102b0:	2300      	movs	r3, #0
    }
}
 80102b2:	0018      	movs	r0, r3
 80102b4:	46bd      	mov	sp, r7
 80102b6:	b004      	add	sp, #16
 80102b8:	bd80      	pop	{r7, pc}
	...

080102bc <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b082      	sub	sp, #8
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	0002      	movs	r2, r0
 80102c4:	6039      	str	r1, [r7, #0]
 80102c6:	1dfb      	adds	r3, r7, #7
 80102c8:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 80102ca:	1dfb      	adds	r3, r7, #7
 80102cc:	781b      	ldrb	r3, [r3, #0]
 80102ce:	2b07      	cmp	r3, #7
 80102d0:	d827      	bhi.n	8010322 <UpdateFCntDown+0x66>
 80102d2:	009a      	lsls	r2, r3, #2
 80102d4:	4b17      	ldr	r3, [pc, #92]	@ (8010334 <UpdateFCntDown+0x78>)
 80102d6:	18d3      	adds	r3, r2, r3
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	469f      	mov	pc, r3
    {
        case N_FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 80102dc:	4b16      	ldr	r3, [pc, #88]	@ (8010338 <UpdateFCntDown+0x7c>)
 80102de:	685b      	ldr	r3, [r3, #4]
 80102e0:	683a      	ldr	r2, [r7, #0]
 80102e2:	611a      	str	r2, [r3, #16]
            break;
 80102e4:	e01e      	b.n	8010324 <UpdateFCntDown+0x68>
        case A_FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 80102e6:	4b14      	ldr	r3, [pc, #80]	@ (8010338 <UpdateFCntDown+0x7c>)
 80102e8:	685b      	ldr	r3, [r3, #4]
 80102ea:	683a      	ldr	r2, [r7, #0]
 80102ec:	615a      	str	r2, [r3, #20]
            break;
 80102ee:	e019      	b.n	8010324 <UpdateFCntDown+0x68>
        case FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 80102f0:	4b11      	ldr	r3, [pc, #68]	@ (8010338 <UpdateFCntDown+0x7c>)
 80102f2:	685b      	ldr	r3, [r3, #4]
 80102f4:	683a      	ldr	r2, [r7, #0]
 80102f6:	619a      	str	r2, [r3, #24]
            break;
 80102f8:	e014      	b.n	8010324 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_0:
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 80102fa:	4b0f      	ldr	r3, [pc, #60]	@ (8010338 <UpdateFCntDown+0x7c>)
 80102fc:	685b      	ldr	r3, [r3, #4]
 80102fe:	683a      	ldr	r2, [r7, #0]
 8010300:	61da      	str	r2, [r3, #28]
            break;
 8010302:	e00f      	b.n	8010324 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_1:
            CryptoCtx.NvmCtx->FCntList.McFCntDown1 = currentDown;
 8010304:	4b0c      	ldr	r3, [pc, #48]	@ (8010338 <UpdateFCntDown+0x7c>)
 8010306:	685b      	ldr	r3, [r3, #4]
 8010308:	683a      	ldr	r2, [r7, #0]
 801030a:	621a      	str	r2, [r3, #32]
            break;
 801030c:	e00a      	b.n	8010324 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_2:
            CryptoCtx.NvmCtx->FCntList.McFCntDown2 = currentDown;
 801030e:	4b0a      	ldr	r3, [pc, #40]	@ (8010338 <UpdateFCntDown+0x7c>)
 8010310:	685b      	ldr	r3, [r3, #4]
 8010312:	683a      	ldr	r2, [r7, #0]
 8010314:	625a      	str	r2, [r3, #36]	@ 0x24
            break;
 8010316:	e005      	b.n	8010324 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
 8010318:	4b07      	ldr	r3, [pc, #28]	@ (8010338 <UpdateFCntDown+0x7c>)
 801031a:	685b      	ldr	r3, [r3, #4]
 801031c:	683a      	ldr	r2, [r7, #0]
 801031e:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8010320:	e000      	b.n	8010324 <UpdateFCntDown+0x68>
        default:
            break;
 8010322:	46c0      	nop			@ (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8010324:	4b04      	ldr	r3, [pc, #16]	@ (8010338 <UpdateFCntDown+0x7c>)
 8010326:	689b      	ldr	r3, [r3, #8]
 8010328:	4798      	blx	r3
}
 801032a:	46c0      	nop			@ (mov r8, r8)
 801032c:	46bd      	mov	sp, r7
 801032e:	b002      	add	sp, #8
 8010330:	bd80      	pop	{r7, pc}
 8010332:	46c0      	nop			@ (mov r8, r8)
 8010334:	0801b39c 	.word	0x0801b39c
 8010338:	20001120 	.word	0x20001120

0801033c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 801033c:	b580      	push	{r7, lr}
 801033e:	af00      	add	r7, sp, #0

    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8010340:	4b19      	ldr	r3, [pc, #100]	@ (80103a8 <ResetFCnts+0x6c>)
 8010342:	685b      	ldr	r3, [r3, #4]
 8010344:	2200      	movs	r2, #0
 8010346:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8010348:	4b17      	ldr	r3, [pc, #92]	@ (80103a8 <ResetFCnts+0x6c>)
 801034a:	685b      	ldr	r3, [r3, #4]
 801034c:	2201      	movs	r2, #1
 801034e:	4252      	negs	r2, r2
 8010350:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8010352:	4b15      	ldr	r3, [pc, #84]	@ (80103a8 <ResetFCnts+0x6c>)
 8010354:	685b      	ldr	r3, [r3, #4]
 8010356:	2201      	movs	r2, #1
 8010358:	4252      	negs	r2, r2
 801035a:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801035c:	4b12      	ldr	r3, [pc, #72]	@ (80103a8 <ResetFCnts+0x6c>)
 801035e:	685b      	ldr	r3, [r3, #4]
 8010360:	2201      	movs	r2, #1
 8010362:	4252      	negs	r2, r2
 8010364:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 8010366:	4b10      	ldr	r3, [pc, #64]	@ (80103a8 <ResetFCnts+0x6c>)
 8010368:	685a      	ldr	r2, [r3, #4]
 801036a:	4b0f      	ldr	r3, [pc, #60]	@ (80103a8 <ResetFCnts+0x6c>)
 801036c:	685b      	ldr	r3, [r3, #4]
 801036e:	3218      	adds	r2, #24
 8010370:	631a      	str	r2, [r3, #48]	@ 0x30

    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 8010372:	4b0d      	ldr	r3, [pc, #52]	@ (80103a8 <ResetFCnts+0x6c>)
 8010374:	685b      	ldr	r3, [r3, #4]
 8010376:	2201      	movs	r2, #1
 8010378:	4252      	negs	r2, r2
 801037a:	61da      	str	r2, [r3, #28]
    CryptoCtx.NvmCtx->FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 801037c:	4b0a      	ldr	r3, [pc, #40]	@ (80103a8 <ResetFCnts+0x6c>)
 801037e:	685b      	ldr	r3, [r3, #4]
 8010380:	2201      	movs	r2, #1
 8010382:	4252      	negs	r2, r2
 8010384:	621a      	str	r2, [r3, #32]
    CryptoCtx.NvmCtx->FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
 8010386:	4b08      	ldr	r3, [pc, #32]	@ (80103a8 <ResetFCnts+0x6c>)
 8010388:	685b      	ldr	r3, [r3, #4]
 801038a:	2201      	movs	r2, #1
 801038c:	4252      	negs	r2, r2
 801038e:	625a      	str	r2, [r3, #36]	@ 0x24
    CryptoCtx.NvmCtx->FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 8010390:	4b05      	ldr	r3, [pc, #20]	@ (80103a8 <ResetFCnts+0x6c>)
 8010392:	685b      	ldr	r3, [r3, #4]
 8010394:	2201      	movs	r2, #1
 8010396:	4252      	negs	r2, r2
 8010398:	629a      	str	r2, [r3, #40]	@ 0x28

    CryptoCtx.EventCryptoNvmCtxChanged( );
 801039a:	4b03      	ldr	r3, [pc, #12]	@ (80103a8 <ResetFCnts+0x6c>)
 801039c:	689b      	ldr	r3, [r3, #8]
 801039e:	4798      	blx	r3
}
 80103a0:	46c0      	nop			@ (mov r8, r8)
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}
 80103a6:	46c0      	nop			@ (mov r8, r8)
 80103a8:	20001120 	.word	0x20001120

080103ac <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	af00      	add	r7, sp, #0
    return;
 80103b0:	46c0      	nop			@ (mov r8, r8)
}
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}
	...

080103b8 <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmEvent cryptoNvmCtxChanged )
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b082      	sub	sp, #8
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 80103c0:	4b15      	ldr	r3, [pc, #84]	@ (8010418 <LoRaMacCryptoInit+0x60>)
 80103c2:	4a16      	ldr	r2, [pc, #88]	@ (801041c <LoRaMacCryptoInit+0x64>)
 80103c4:	605a      	str	r2, [r3, #4]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d003      	beq.n	80103d4 <LoRaMacCryptoInit+0x1c>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 80103cc:	4b12      	ldr	r3, [pc, #72]	@ (8010418 <LoRaMacCryptoInit+0x60>)
 80103ce:	687a      	ldr	r2, [r7, #4]
 80103d0:	609a      	str	r2, [r3, #8]
 80103d2:	e002      	b.n	80103da <LoRaMacCryptoInit+0x22>
    }
    else
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 80103d4:	4b10      	ldr	r3, [pc, #64]	@ (8010418 <LoRaMacCryptoInit+0x60>)
 80103d6:	4a12      	ldr	r2, [pc, #72]	@ (8010420 <LoRaMacCryptoInit+0x68>)
 80103d8:	609a      	str	r2, [r3, #8]
    }

    // Initialize with default
    memset1( (uint8_t*) CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 80103da:	4b0f      	ldr	r3, [pc, #60]	@ (8010418 <LoRaMacCryptoInit+0x60>)
 80103dc:	685b      	ldr	r3, [r3, #4]
 80103de:	2234      	movs	r2, #52	@ 0x34
 80103e0:	2100      	movs	r1, #0
 80103e2:	0018      	movs	r0, r3
 80103e4:	f005 f906 	bl	80155f4 <memset1>

    // Set default LoRaWAN version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 80103e8:	4b0b      	ldr	r3, [pc, #44]	@ (8010418 <LoRaMacCryptoInit+0x60>)
 80103ea:	685b      	ldr	r3, [r3, #4]
 80103ec:	2201      	movs	r2, #1
 80103ee:	70da      	strb	r2, [r3, #3]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 80103f0:	4b09      	ldr	r3, [pc, #36]	@ (8010418 <LoRaMacCryptoInit+0x60>)
 80103f2:	685b      	ldr	r3, [r3, #4]
 80103f4:	2201      	movs	r2, #1
 80103f6:	709a      	strb	r2, [r3, #2]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 1;
 80103f8:	4b07      	ldr	r3, [pc, #28]	@ (8010418 <LoRaMacCryptoInit+0x60>)
 80103fa:	685b      	ldr	r3, [r3, #4]
 80103fc:	2201      	movs	r2, #1
 80103fe:	705a      	strb	r2, [r3, #1]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Rfu = 0;
 8010400:	4b05      	ldr	r3, [pc, #20]	@ (8010418 <LoRaMacCryptoInit+0x60>)
 8010402:	685b      	ldr	r3, [r3, #4]
 8010404:	2200      	movs	r2, #0
 8010406:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8010408:	f7ff ff98 	bl	801033c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801040c:	2300      	movs	r3, #0
}
 801040e:	0018      	movs	r0, r3
 8010410:	46bd      	mov	sp, r7
 8010412:	b002      	add	sp, #8
 8010414:	bd80      	pop	{r7, pc}
 8010416:	46c0      	nop			@ (mov r8, r8)
 8010418:	20001120 	.word	0x20001120
 801041c:	2000112c 	.word	0x2000112c
 8010420:	080103ad 	.word	0x080103ad

08010424 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
    CryptoCtx.NvmCtx->LrWanVersion = version;
 801042c:	4b04      	ldr	r3, [pc, #16]	@ (8010440 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801042e:	685b      	ldr	r3, [r3, #4]
 8010430:	687a      	ldr	r2, [r7, #4]
 8010432:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8010434:	2300      	movs	r3, #0
}
 8010436:	0018      	movs	r0, r3
 8010438:	46bd      	mov	sp, r7
 801043a:	b002      	add	sp, #8
 801043c:	bd80      	pop	{r7, pc}
 801043e:	46c0      	nop			@ (mov r8, r8)
 8010440:	20001120 	.word	0x20001120

08010444 <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b082      	sub	sp, #8
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( cryptoNvmCtx != 0 )
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d007      	beq.n	8010462 <LoRaMacCryptoRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* ) &NvmCryptoCtx, ( uint8_t* ) cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 8010452:	6879      	ldr	r1, [r7, #4]
 8010454:	4b05      	ldr	r3, [pc, #20]	@ (801046c <LoRaMacCryptoRestoreNvmCtx+0x28>)
 8010456:	2234      	movs	r2, #52	@ 0x34
 8010458:	0018      	movs	r0, r3
 801045a:	f005 f88d 	bl	8015578 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 801045e:	2300      	movs	r3, #0
 8010460:	e000      	b.n	8010464 <LoRaMacCryptoRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010462:	230a      	movs	r3, #10
    }
}
 8010464:	0018      	movs	r0, r3
 8010466:	46bd      	mov	sp, r7
 8010468:	b002      	add	sp, #8
 801046a:	bd80      	pop	{r7, pc}
 801046c:	2000112c 	.word	0x2000112c

08010470 <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b082      	sub	sp, #8
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2234      	movs	r2, #52	@ 0x34
 801047c:	601a      	str	r2, [r3, #0]
    return &NvmCryptoCtx;
 801047e:	4b02      	ldr	r3, [pc, #8]	@ (8010488 <LoRaMacCryptoGetNvmCtx+0x18>)
}
 8010480:	0018      	movs	r0, r3
 8010482:	46bd      	mov	sp, r7
 8010484:	b002      	add	sp, #8
 8010486:	bd80      	pop	{r7, pc}
 8010488:	2000112c 	.word	0x2000112c

0801048c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b082      	sub	sp, #8
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d101      	bne.n	801049e <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801049a:	230a      	movs	r3, #10
 801049c:	e006      	b.n	80104ac <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 801049e:	4b05      	ldr	r3, [pc, #20]	@ (80104b4 <LoRaMacCryptoGetFCntUp+0x28>)
 80104a0:	685b      	ldr	r3, [r3, #4]
 80104a2:	68db      	ldr	r3, [r3, #12]
 80104a4:	1c5a      	adds	r2, r3, #1
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80104aa:	2300      	movs	r3, #0
}
 80104ac:	0018      	movs	r0, r3
 80104ae:	46bd      	mov	sp, r7
 80104b0:	b002      	add	sp, #8
 80104b2:	bd80      	pop	{r7, pc}
 80104b4:	20001120 	.word	0x20001120

080104b8 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 80104b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104ba:	b08d      	sub	sp, #52	@ 0x34
 80104bc:	af00      	add	r7, sp, #0
 80104be:	61ba      	str	r2, [r7, #24]
 80104c0:	617b      	str	r3, [r7, #20]
 80104c2:	230f      	movs	r3, #15
 80104c4:	2610      	movs	r6, #16
 80104c6:	199b      	adds	r3, r3, r6
 80104c8:	19db      	adds	r3, r3, r7
 80104ca:	1c02      	adds	r2, r0, #0
 80104cc:	701a      	strb	r2, [r3, #0]
 80104ce:	230c      	movs	r3, #12
 80104d0:	0030      	movs	r0, r6
 80104d2:	181b      	adds	r3, r3, r0
 80104d4:	19db      	adds	r3, r3, r7
 80104d6:	1c0a      	adds	r2, r1, #0
 80104d8:	801a      	strh	r2, [r3, #0]
    uint32_t lastDown = 0;
 80104da:	2300      	movs	r3, #0
 80104dc:	627b      	str	r3, [r7, #36]	@ 0x24
    int32_t fCntDiff = 0;
 80104de:	2300      	movs	r3, #0
 80104e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80104e2:	231b      	movs	r3, #27
 80104e4:	181b      	adds	r3, r3, r0
 80104e6:	19db      	adds	r3, r3, r7
 80104e8:	2213      	movs	r2, #19
 80104ea:	701a      	strb	r2, [r3, #0]

    if( currentDown == NULL )
 80104ec:	697b      	ldr	r3, [r7, #20]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d101      	bne.n	80104f6 <LoRaMacCryptoGetFCntDown+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80104f2:	230a      	movs	r3, #10
 80104f4:	e068      	b.n	80105c8 <LoRaMacCryptoGetFCntDown+0x110>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80104f6:	221b      	movs	r2, #27
 80104f8:	2110      	movs	r1, #16
 80104fa:	1853      	adds	r3, r2, r1
 80104fc:	19de      	adds	r6, r3, r7
 80104fe:	2314      	movs	r3, #20
 8010500:	185b      	adds	r3, r3, r1
 8010502:	19da      	adds	r2, r3, r7
 8010504:	230f      	movs	r3, #15
 8010506:	185b      	adds	r3, r3, r1
 8010508:	19db      	adds	r3, r3, r7
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	0011      	movs	r1, r2
 801050e:	0018      	movs	r0, r3
 8010510:	f7ff fe54 	bl	80101bc <GetLastFcntDown>
 8010514:	0003      	movs	r3, r0
 8010516:	7033      	strb	r3, [r6, #0]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8010518:	221b      	movs	r2, #27
 801051a:	2110      	movs	r1, #16
 801051c:	1853      	adds	r3, r2, r1
 801051e:	19db      	adds	r3, r3, r7
 8010520:	781b      	ldrb	r3, [r3, #0]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d003      	beq.n	801052e <LoRaMacCryptoGetFCntDown+0x76>
    {
        return cryptoStatus;
 8010526:	1853      	adds	r3, r2, r1
 8010528:	19db      	adds	r3, r3, r7
 801052a:	781b      	ldrb	r3, [r3, #0]
 801052c:	e04c      	b.n	80105c8 <LoRaMacCryptoGetFCntDown+0x110>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 801052e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010530:	3301      	adds	r3, #1
 8010532:	d103      	bne.n	801053c <LoRaMacCryptoGetFCntDown+0x84>
    {
         *currentDown = frameFcnt;
 8010534:	697b      	ldr	r3, [r7, #20]
 8010536:	69ba      	ldr	r2, [r7, #24]
 8010538:	601a      	str	r2, [r3, #0]
 801053a:	e020      	b.n	801057e <LoRaMacCryptoGetFCntDown+0xc6>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 801053c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801053e:	041b      	lsls	r3, r3, #16
 8010540:	0c1b      	lsrs	r3, r3, #16
 8010542:	69ba      	ldr	r2, [r7, #24]
 8010544:	1ad3      	subs	r3, r2, r3
 8010546:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( fCntDiff > 0 )
 8010548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801054a:	2b00      	cmp	r3, #0
 801054c:	dd05      	ble.n	801055a <LoRaMacCryptoGetFCntDown+0xa2>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 801054e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010552:	18d2      	adds	r2, r2, r3
 8010554:	697b      	ldr	r3, [r7, #20]
 8010556:	601a      	str	r2, [r3, #0]
 8010558:	e011      	b.n	801057e <LoRaMacCryptoGetFCntDown+0xc6>
        }
        else if( fCntDiff == 0 )
 801055a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801055c:	2b00      	cmp	r3, #0
 801055e:	d104      	bne.n	801056a <LoRaMacCryptoGetFCntDown+0xb2>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8010560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010562:	697b      	ldr	r3, [r7, #20]
 8010564:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8010566:	2307      	movs	r3, #7
 8010568:	e02e      	b.n	80105c8 <LoRaMacCryptoGetFCntDown+0x110>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 801056a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801056c:	0c1b      	lsrs	r3, r3, #16
 801056e:	041a      	lsls	r2, r3, #16
 8010570:	69bb      	ldr	r3, [r7, #24]
 8010572:	18d3      	adds	r3, r2, r3
 8010574:	2280      	movs	r2, #128	@ 0x80
 8010576:	0252      	lsls	r2, r2, #9
 8010578:	189a      	adds	r2, r3, r2
 801057a:	697b      	ldr	r3, [r7, #20]
 801057c:	601a      	str	r2, [r3, #0]
        }
    }


    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 801057e:	4b14      	ldr	r3, [pc, #80]	@ (80105d0 <LoRaMacCryptoGetFCntDown+0x118>)
 8010580:	685b      	ldr	r3, [r3, #4]
 8010582:	789b      	ldrb	r3, [r3, #2]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d11e      	bne.n	80105c6 <LoRaMacCryptoGetFCntDown+0x10e>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8010588:	697b      	ldr	r3, [r7, #20]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	60bb      	str	r3, [r7, #8]
 801058e:	2300      	movs	r3, #0
 8010590:	60fb      	str	r3, [r7, #12]
 8010592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010594:	603b      	str	r3, [r7, #0]
 8010596:	2300      	movs	r3, #0
 8010598:	607b      	str	r3, [r7, #4]
 801059a:	68ba      	ldr	r2, [r7, #8]
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	6838      	ldr	r0, [r7, #0]
 80105a0:	6879      	ldr	r1, [r7, #4]
 80105a2:	1a12      	subs	r2, r2, r0
 80105a4:	418b      	sbcs	r3, r1
 80105a6:	210c      	movs	r1, #12
 80105a8:	2010      	movs	r0, #16
 80105aa:	1809      	adds	r1, r1, r0
 80105ac:	19c9      	adds	r1, r1, r7
 80105ae:	8809      	ldrh	r1, [r1, #0]
 80105b0:	b289      	uxth	r1, r1
 80105b2:	000c      	movs	r4, r1
 80105b4:	2100      	movs	r1, #0
 80105b6:	000d      	movs	r5, r1
 80105b8:	429d      	cmp	r5, r3
 80105ba:	dc04      	bgt.n	80105c6 <LoRaMacCryptoGetFCntDown+0x10e>
 80105bc:	d101      	bne.n	80105c2 <LoRaMacCryptoGetFCntDown+0x10a>
 80105be:	4294      	cmp	r4, r2
 80105c0:	d801      	bhi.n	80105c6 <LoRaMacCryptoGetFCntDown+0x10e>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 80105c2:	2308      	movs	r3, #8
 80105c4:	e000      	b.n	80105c8 <LoRaMacCryptoGetFCntDown+0x110>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80105c6:	2300      	movs	r3, #0
}
 80105c8:	0018      	movs	r0, r3
 80105ca:	46bd      	mov	sp, r7
 80105cc:	b00d      	add	sp, #52	@ 0x34
 80105ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105d0:	20001120 	.word	0x20001120

080105d4 <LoRaMacCryptoSetMulticastReference>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b082      	sub	sp, #8
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d101      	bne.n	80105e6 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80105e2:	230a      	movs	r3, #10
 80105e4:	e018      	b.n	8010618 <LoRaMacCryptoSetMulticastReference+0x44>
    }

    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 80105e6:	4b0e      	ldr	r3, [pc, #56]	@ (8010620 <LoRaMacCryptoSetMulticastReference+0x4c>)
 80105e8:	685b      	ldr	r3, [r3, #4]
 80105ea:	331c      	adds	r3, #28
 80105ec:	001a      	movs	r2, r3
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	61da      	str	r2, [r3, #28]
    multicastList[1].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 80105f2:	4b0b      	ldr	r3, [pc, #44]	@ (8010620 <LoRaMacCryptoSetMulticastReference+0x4c>)
 80105f4:	685a      	ldr	r2, [r3, #4]
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	3328      	adds	r3, #40	@ 0x28
 80105fa:	3220      	adds	r2, #32
 80105fc:	61da      	str	r2, [r3, #28]
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 80105fe:	4b08      	ldr	r3, [pc, #32]	@ (8010620 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8010600:	685a      	ldr	r2, [r3, #4]
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	3350      	adds	r3, #80	@ 0x50
 8010606:	3224      	adds	r2, #36	@ 0x24
 8010608:	61da      	str	r2, [r3, #28]
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 801060a:	4b05      	ldr	r3, [pc, #20]	@ (8010620 <LoRaMacCryptoSetMulticastReference+0x4c>)
 801060c:	685a      	ldr	r2, [r3, #4]
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	3378      	adds	r3, #120	@ 0x78
 8010612:	3228      	adds	r2, #40	@ 0x28
 8010614:	61da      	str	r2, [r3, #28]

    return LORAMAC_CRYPTO_SUCCESS;
 8010616:	2300      	movs	r3, #0
}
 8010618:	0018      	movs	r0, r3
 801061a:	46bd      	mov	sp, r7
 801061c:	b002      	add	sp, #8
 801061e:	bd80      	pop	{r7, pc}
 8010620:	20001120 	.word	0x20001120

08010624 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b082      	sub	sp, #8
 8010628:	af00      	add	r7, sp, #0
 801062a:	0002      	movs	r2, r0
 801062c:	6039      	str	r1, [r7, #0]
 801062e:	1dfb      	adds	r3, r7, #7
 8010630:	701a      	strb	r2, [r3, #0]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8010632:	683a      	ldr	r2, [r7, #0]
 8010634:	1dfb      	adds	r3, r7, #7
 8010636:	781b      	ldrb	r3, [r3, #0]
 8010638:	0011      	movs	r1, r2
 801063a:	0018      	movs	r0, r3
 801063c:	f7f8 fe6c 	bl	8009318 <SecureElementSetKey>
 8010640:	1e03      	subs	r3, r0, #0
 8010642:	d001      	beq.n	8010648 <LoRaMacCryptoSetKey+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010644:	230f      	movs	r3, #15
 8010646:	e018      	b.n	801067a <LoRaMacCryptoSetKey+0x56>
    }
    if( ( keyID == GEN_APP_KEY ) || ( keyID == APP_KEY ) )
 8010648:	1dfb      	adds	r3, r7, #7
 801064a:	781b      	ldrb	r3, [r3, #0]
 801064c:	2b01      	cmp	r3, #1
 801064e:	d003      	beq.n	8010658 <LoRaMacCryptoSetKey+0x34>
 8010650:	1dfb      	adds	r3, r7, #7
 8010652:	781b      	ldrb	r3, [r3, #0]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d10f      	bne.n	8010678 <LoRaMacCryptoSetKey+0x54>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8010658:	1dfb      	adds	r3, r7, #7
 801065a:	781b      	ldrb	r3, [r3, #0]
 801065c:	0018      	movs	r0, r3
 801065e:	f000 fb89 	bl	8010d74 <LoRaMacCryptoDeriveMcRootKey>
 8010662:	1e03      	subs	r3, r0, #0
 8010664:	d001      	beq.n	801066a <LoRaMacCryptoSetKey+0x46>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010666:	230f      	movs	r3, #15
 8010668:	e007      	b.n	801067a <LoRaMacCryptoSetKey+0x56>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801066a:	2009      	movs	r0, #9
 801066c:	f000 fbc4 	bl	8010df8 <LoRaMacCryptoDeriveMcKEKey>
 8010670:	1e03      	subs	r3, r0, #0
 8010672:	d001      	beq.n	8010678 <LoRaMacCryptoSetKey+0x54>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010674:	230f      	movs	r3, #15
 8010676:	e000      	b.n	801067a <LoRaMacCryptoSetKey+0x56>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8010678:	2300      	movs	r3, #0
}
 801067a:	0018      	movs	r0, r3
 801067c:	46bd      	mov	sp, r7
 801067e:	b002      	add	sp, #8
 8010680:	bd80      	pop	{r7, pc}
	...

08010684 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b086      	sub	sp, #24
 8010688:	af02      	add	r7, sp, #8
 801068a:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d101      	bne.n	8010696 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010692:	230a      	movs	r3, #10
 8010694:	e039      	b.n	801070a <LoRaMacCryptoPrepareJoinRequest+0x86>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8010696:	230f      	movs	r3, #15
 8010698:	18fb      	adds	r3, r7, r3
 801069a:	2202      	movs	r2, #2
 801069c:	701a      	strb	r2, [r3, #0]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 801069e:	2300      	movs	r3, #0
 80106a0:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 80106a2:	2308      	movs	r3, #8
 80106a4:	18fb      	adds	r3, r7, r3
 80106a6:	0018      	movs	r0, r3
 80106a8:	f7f8 ffea 	bl	8009680 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 80106ac:	68ba      	ldr	r2, [r7, #8]
 80106ae:	4b19      	ldr	r3, [pc, #100]	@ (8010714 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 80106b0:	685b      	ldr	r3, [r3, #4]
 80106b2:	b292      	uxth	r2, r2
 80106b4:	809a      	strh	r2, [r3, #4]
#else
    CryptoCtx.NvmCtx->DevNonce++;
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 80106b6:	4b17      	ldr	r3, [pc, #92]	@ (8010714 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 80106b8:	689b      	ldr	r3, [r3, #8]
 80106ba:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 80106bc:	4b15      	ldr	r3, [pc, #84]	@ (8010714 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 80106be:	685b      	ldr	r3, [r3, #4]
 80106c0:	889a      	ldrh	r2, [r3, #4]
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	0018      	movs	r0, r3
 80106ca:	f000 fdbd 	bl	8011248 <LoRaMacSerializerJoinRequest>
 80106ce:	1e03      	subs	r3, r0, #0
 80106d0:	d001      	beq.n	80106d6 <LoRaMacCryptoPrepareJoinRequest+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80106d2:	2311      	movs	r3, #17
 80106d4:	e019      	b.n	801070a <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	6819      	ldr	r1, [r3, #0]
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	3318      	adds	r3, #24
 80106de:	220f      	movs	r2, #15
 80106e0:	18ba      	adds	r2, r7, r2
 80106e2:	7812      	ldrb	r2, [r2, #0]
 80106e4:	9300      	str	r3, [sp, #0]
 80106e6:	0013      	movs	r3, r2
 80106e8:	2213      	movs	r2, #19
 80106ea:	2000      	movs	r0, #0
 80106ec:	f7f8 fe9e 	bl	800942c <SecureElementComputeAesCmac>
 80106f0:	1e03      	subs	r3, r0, #0
 80106f2:	d001      	beq.n	80106f8 <LoRaMacCryptoPrepareJoinRequest+0x74>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80106f4:	230f      	movs	r3, #15
 80106f6:	e008      	b.n	801070a <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	0018      	movs	r0, r3
 80106fc:	f000 fda4 	bl	8011248 <LoRaMacSerializerJoinRequest>
 8010700:	1e03      	subs	r3, r0, #0
 8010702:	d001      	beq.n	8010708 <LoRaMacCryptoPrepareJoinRequest+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8010704:	2311      	movs	r3, #17
 8010706:	e000      	b.n	801070a <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010708:	2300      	movs	r3, #0
}
 801070a:	0018      	movs	r0, r3
 801070c:	46bd      	mov	sp, r7
 801070e:	b004      	add	sp, #16
 8010710:	bd80      	pop	{r7, pc}
 8010712:	46c0      	nop			@ (mov r8, r8)
 8010714:	20001120 	.word	0x20001120

08010718 <LoRaMacCryptoHandleJoinAccept>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8010718:	b5f0      	push	{r4, r5, r6, r7, lr}
 801071a:	b0cb      	sub	sp, #300	@ 0x12c
 801071c:	af00      	add	r7, sp, #0
 801071e:	60b9      	str	r1, [r7, #8]
 8010720:	607a      	str	r2, [r7, #4]
 8010722:	4bd6      	ldr	r3, [pc, #856]	@ (8010a7c <LoRaMacCryptoHandleJoinAccept+0x364>)
 8010724:	2294      	movs	r2, #148	@ 0x94
 8010726:	0052      	lsls	r2, r2, #1
 8010728:	189b      	adds	r3, r3, r2
 801072a:	19db      	adds	r3, r3, r7
 801072c:	1c02      	adds	r2, r0, #0
 801072e:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d002      	beq.n	801073c <LoRaMacCryptoHandleJoinAccept+0x24>
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d101      	bne.n	8010740 <LoRaMacCryptoHandleJoinAccept+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801073c:	230a      	movs	r3, #10
 801073e:	e1bd      	b.n	8010abc <LoRaMacCryptoHandleJoinAccept+0x3a4>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8010740:	2392      	movs	r3, #146	@ 0x92
 8010742:	005b      	lsls	r3, r3, #1
 8010744:	18fb      	adds	r3, r7, r3
 8010746:	2213      	movs	r2, #19
 8010748:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID;
    KeyIdentifier_t encryptionKeyID;
    uint8_t micComputationOffset = 0;
 801074a:	2126      	movs	r1, #38	@ 0x26
 801074c:	31ff      	adds	r1, #255	@ 0xff
 801074e:	187b      	adds	r3, r7, r1
 8010750:	2200      	movs	r2, #0
 8010752:	701a      	strb	r2, [r3, #0]
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    uint8_t* devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce;
#endif

    // Determine decryption key and DevNonce for key derivation
    if( joinReqType == JOIN_REQ )
 8010754:	4bc9      	ldr	r3, [pc, #804]	@ (8010a7c <LoRaMacCryptoHandleJoinAccept+0x364>)
 8010756:	2294      	movs	r2, #148	@ 0x94
 8010758:	0052      	lsls	r2, r2, #1
 801075a:	189b      	adds	r3, r3, r2
 801075c:	19db      	adds	r3, r3, r7
 801075e:	781b      	ldrb	r3, [r3, #0]
 8010760:	2bff      	cmp	r3, #255	@ 0xff
 8010762:	d107      	bne.n	8010774 <LoRaMacCryptoHandleJoinAccept+0x5c>
    {
        encryptionKeyID = NWK_KEY;
 8010764:	2393      	movs	r3, #147	@ 0x93
 8010766:	005b      	lsls	r3, r3, #1
 8010768:	18fb      	adds	r3, r7, r3
 801076a:	2202      	movs	r2, #2
 801076c:	701a      	strb	r2, [r3, #0]
        micComputationOffset = CRYPTO_MIC_COMPUTATION_OFFSET;
 801076e:	187b      	adds	r3, r7, r1
 8010770:	220c      	movs	r2, #12
 8010772:	701a      	strb	r2, [r3, #0]
        }
    }
#endif
    // Decrypt header, skip MHDR
    uint8_t procBuffer[CRYPTO_MAXMESSAGE_SIZE + CRYPTO_MIC_COMPUTATION_OFFSET];
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	791b      	ldrb	r3, [r3, #4]
 8010778:	001a      	movs	r2, r3
 801077a:	2426      	movs	r4, #38	@ 0x26
 801077c:	34ff      	adds	r4, #255	@ 0xff
 801077e:	193b      	adds	r3, r7, r4
 8010780:	781b      	ldrb	r3, [r3, #0]
 8010782:	b29b      	uxth	r3, r3
 8010784:	18d3      	adds	r3, r2, r3
 8010786:	b29a      	uxth	r2, r3
 8010788:	2510      	movs	r5, #16
 801078a:	197b      	adds	r3, r7, r5
 801078c:	2100      	movs	r1, #0
 801078e:	0018      	movs	r0, r3
 8010790:	f004 ff30 	bl	80155f4 <memset1>

    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	1c58      	adds	r0, r3, #1
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	791b      	ldrb	r3, [r3, #4]
 801079e:	3b01      	subs	r3, #1
 80107a0:	b299      	uxth	r1, r3
 80107a2:	193b      	adds	r3, r7, r4
 80107a4:	781b      	ldrb	r3, [r3, #0]
 80107a6:	197a      	adds	r2, r7, r5
 80107a8:	18d4      	adds	r4, r2, r3
 80107aa:	2393      	movs	r3, #147	@ 0x93
 80107ac:	005b      	lsls	r3, r3, #1
 80107ae:	18fb      	adds	r3, r7, r3
 80107b0:	781a      	ldrb	r2, [r3, #0]
 80107b2:	0023      	movs	r3, r4
 80107b4:	f7f8 fe9c 	bl	80094f0 <SecureElementAesEncrypt>
 80107b8:	1e03      	subs	r3, r0, #0
 80107ba:	d001      	beq.n	80107c0 <LoRaMacCryptoHandleJoinAccept+0xa8>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80107bc:	230f      	movs	r3, #15
 80107be:	e17d      	b.n	8010abc <LoRaMacCryptoHandleJoinAccept+0x3a4>
    }
    // Copy the result to an offset location to keep space for additional information which have to be added in case of 1.1 and later
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	1c58      	adds	r0, r3, #1
 80107c6:	2326      	movs	r3, #38	@ 0x26
 80107c8:	33ff      	adds	r3, #255	@ 0xff
 80107ca:	18fb      	adds	r3, r7, r3
 80107cc:	781b      	ldrb	r3, [r3, #0]
 80107ce:	2210      	movs	r2, #16
 80107d0:	18ba      	adds	r2, r7, r2
 80107d2:	18d1      	adds	r1, r2, r3
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	791b      	ldrb	r3, [r3, #4]
 80107d8:	3b01      	subs	r3, #1
 80107da:	b29b      	uxth	r3, r3
 80107dc:	001a      	movs	r2, r3
 80107de:	f004 fecb 	bl	8015578 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	0018      	movs	r0, r3
 80107e6:	f000 fb31 	bl	8010e4c <LoRaMacParserJoinAccept>
 80107ea:	1e03      	subs	r3, r0, #0
 80107ec:	d001      	beq.n	80107f2 <LoRaMacCryptoHandleJoinAccept+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80107ee:	2310      	movs	r3, #16
 80107f0:	e164      	b.n	8010abc <LoRaMacCryptoHandleJoinAccept+0x3a4>
    }

    // Is it a LoRaWAN 1.1.0 or later ?
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	7c1b      	ldrb	r3, [r3, #16]
 80107f6:	227f      	movs	r2, #127	@ 0x7f
 80107f8:	4393      	bics	r3, r2
 80107fa:	b2db      	uxtb	r3, r3
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d009      	beq.n	8010814 <LoRaMacCryptoHandleJoinAccept+0xfc>
    {
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 8010800:	4b9f      	ldr	r3, [pc, #636]	@ (8010a80 <LoRaMacCryptoHandleJoinAccept+0x368>)
 8010802:	685b      	ldr	r3, [r3, #4]
 8010804:	2201      	movs	r2, #1
 8010806:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = J_S_INT_KEY;
 8010808:	2328      	movs	r3, #40	@ 0x28
 801080a:	33ff      	adds	r3, #255	@ 0xff
 801080c:	18fb      	adds	r3, r7, r3
 801080e:	2203      	movs	r2, #3
 8010810:	701a      	strb	r2, [r3, #0]
 8010812:	e008      	b.n	8010826 <LoRaMacCryptoHandleJoinAccept+0x10e>
    }
    else
    {
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 0;
 8010814:	4b9a      	ldr	r3, [pc, #616]	@ (8010a80 <LoRaMacCryptoHandleJoinAccept+0x368>)
 8010816:	685b      	ldr	r3, [r3, #4]
 8010818:	2200      	movs	r2, #0
 801081a:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = NWK_KEY;
 801081c:	2328      	movs	r3, #40	@ 0x28
 801081e:	33ff      	adds	r3, #255	@ 0xff
 8010820:	18fb      	adds	r3, r7, r3
 8010822:	2202      	movs	r2, #2
 8010824:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8010826:	4b96      	ldr	r3, [pc, #600]	@ (8010a80 <LoRaMacCryptoHandleJoinAccept+0x368>)
 8010828:	685b      	ldr	r3, [r3, #4]
 801082a:	789b      	ldrb	r3, [r3, #2]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d112      	bne.n	8010856 <LoRaMacCryptoHandleJoinAccept+0x13e>
    {
        // For legacy mode :
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)
        if( SecureElementVerifyAesCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6818      	ldr	r0, [r3, #0]
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	791b      	ldrb	r3, [r3, #4]
 8010838:	3b04      	subs	r3, #4
 801083a:	b299      	uxth	r1, r3
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010840:	2328      	movs	r3, #40	@ 0x28
 8010842:	33ff      	adds	r3, #255	@ 0xff
 8010844:	18fb      	adds	r3, r7, r3
 8010846:	781b      	ldrb	r3, [r3, #0]
 8010848:	f7f8 fe11 	bl	800946e <SecureElementVerifyAesCmac>
 801084c:	1e03      	subs	r3, r0, #0
 801084e:	d100      	bne.n	8010852 <LoRaMacCryptoHandleJoinAccept+0x13a>
 8010850:	e097      	b.n	8010982 <LoRaMacCryptoHandleJoinAccept+0x26a>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010852:	230f      	movs	r3, #15
 8010854:	e132      	b.n	8010abc <LoRaMacCryptoHandleJoinAccept+0x3a4>
    {
        // For 1.1 and later:
        //   cmac = aes128_cmac(JSIntKey, JoinReqType | JoinEUI | DevNonce | MHDR | JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)

        // Prepare the msg for integrity check (adding JoinReqType, JoinEUI and DevNonce)
        uint16_t bufItr = 0;
 8010856:	2091      	movs	r0, #145	@ 0x91
 8010858:	0040      	lsls	r0, r0, #1
 801085a:	183b      	adds	r3, r7, r0
 801085c:	2200      	movs	r2, #0
 801085e:	801a      	strh	r2, [r3, #0]
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 8010860:	183b      	adds	r3, r7, r0
 8010862:	881b      	ldrh	r3, [r3, #0]
 8010864:	183a      	adds	r2, r7, r0
 8010866:	1c59      	adds	r1, r3, #1
 8010868:	8011      	strh	r1, [r2, #0]
 801086a:	0019      	movs	r1, r3
 801086c:	4b85      	ldr	r3, [pc, #532]	@ (8010a84 <LoRaMacCryptoHandleJoinAccept+0x36c>)
 801086e:	2594      	movs	r5, #148	@ 0x94
 8010870:	006d      	lsls	r5, r5, #1
 8010872:	195b      	adds	r3, r3, r5
 8010874:	19db      	adds	r3, r3, r7
 8010876:	4a81      	ldr	r2, [pc, #516]	@ (8010a7c <LoRaMacCryptoHandleJoinAccept+0x364>)
 8010878:	1952      	adds	r2, r2, r5
 801087a:	19d2      	adds	r2, r2, r7
 801087c:	7812      	ldrb	r2, [r2, #0]
 801087e:	545a      	strb	r2, [r3, r1]

        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8010880:	0004      	movs	r4, r0
 8010882:	193b      	adds	r3, r7, r4
 8010884:	881b      	ldrh	r3, [r3, #0]
 8010886:	2610      	movs	r6, #16
 8010888:	19ba      	adds	r2, r7, r6
 801088a:	18d3      	adds	r3, r2, r3
 801088c:	68b9      	ldr	r1, [r7, #8]
 801088e:	2208      	movs	r2, #8
 8010890:	0018      	movs	r0, r3
 8010892:	f004 fe8d 	bl	80155b0 <memcpyr>
        bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8010896:	193b      	adds	r3, r7, r4
 8010898:	193a      	adds	r2, r7, r4
 801089a:	8812      	ldrh	r2, [r2, #0]
 801089c:	3208      	adds	r2, #8
 801089e:	801a      	strh	r2, [r3, #0]

        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 80108a0:	4b77      	ldr	r3, [pc, #476]	@ (8010a80 <LoRaMacCryptoHandleJoinAccept+0x368>)
 80108a2:	685b      	ldr	r3, [r3, #4]
 80108a4:	8899      	ldrh	r1, [r3, #4]
 80108a6:	193b      	adds	r3, r7, r4
 80108a8:	881b      	ldrh	r3, [r3, #0]
 80108aa:	193a      	adds	r2, r7, r4
 80108ac:	1c58      	adds	r0, r3, #1
 80108ae:	8010      	strh	r0, [r2, #0]
 80108b0:	001a      	movs	r2, r3
 80108b2:	b2c9      	uxtb	r1, r1
 80108b4:	4b73      	ldr	r3, [pc, #460]	@ (8010a84 <LoRaMacCryptoHandleJoinAccept+0x36c>)
 80108b6:	195b      	adds	r3, r3, r5
 80108b8:	19db      	adds	r3, r3, r7
 80108ba:	5499      	strb	r1, [r3, r2]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 80108bc:	4b70      	ldr	r3, [pc, #448]	@ (8010a80 <LoRaMacCryptoHandleJoinAccept+0x368>)
 80108be:	685b      	ldr	r3, [r3, #4]
 80108c0:	889b      	ldrh	r3, [r3, #4]
 80108c2:	0a1b      	lsrs	r3, r3, #8
 80108c4:	b299      	uxth	r1, r3
 80108c6:	193b      	adds	r3, r7, r4
 80108c8:	881b      	ldrh	r3, [r3, #0]
 80108ca:	193a      	adds	r2, r7, r4
 80108cc:	1c58      	adds	r0, r3, #1
 80108ce:	8010      	strh	r0, [r2, #0]
 80108d0:	001a      	movs	r2, r3
 80108d2:	b2c9      	uxtb	r1, r1
 80108d4:	4b6b      	ldr	r3, [pc, #428]	@ (8010a84 <LoRaMacCryptoHandleJoinAccept+0x36c>)
 80108d6:	195b      	adds	r3, r3, r5
 80108d8:	19db      	adds	r3, r3, r7
 80108da:	5499      	strb	r1, [r3, r2]

        procBuffer[bufItr++] = macMsg->MHDR.Value;
 80108dc:	193b      	adds	r3, r7, r4
 80108de:	881b      	ldrh	r3, [r3, #0]
 80108e0:	193a      	adds	r2, r7, r4
 80108e2:	1c59      	adds	r1, r3, #1
 80108e4:	8011      	strh	r1, [r2, #0]
 80108e6:	001a      	movs	r2, r3
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	7959      	ldrb	r1, [r3, #5]
 80108ec:	4b65      	ldr	r3, [pc, #404]	@ (8010a84 <LoRaMacCryptoHandleJoinAccept+0x36c>)
 80108ee:	195b      	adds	r3, r3, r5
 80108f0:	19db      	adds	r3, r3, r7
 80108f2:	5499      	strb	r1, [r3, r2]

        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	791b      	ldrb	r3, [r3, #4]
 80108f8:	001a      	movs	r2, r3
 80108fa:	2326      	movs	r3, #38	@ 0x26
 80108fc:	33ff      	adds	r3, #255	@ 0xff
 80108fe:	18fb      	adds	r3, r7, r3
 8010900:	781b      	ldrb	r3, [r3, #0]
 8010902:	b29b      	uxth	r3, r3
 8010904:	18d3      	adds	r3, r2, r3
 8010906:	b29b      	uxth	r3, r3
 8010908:	3b05      	subs	r3, #5
 801090a:	b299      	uxth	r1, r3
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010910:	2328      	movs	r3, #40	@ 0x28
 8010912:	33ff      	adds	r3, #255	@ 0xff
 8010914:	18fb      	adds	r3, r7, r3
 8010916:	781b      	ldrb	r3, [r3, #0]
 8010918:	19b8      	adds	r0, r7, r6
 801091a:	f7f8 fda8 	bl	800946e <SecureElementVerifyAesCmac>
 801091e:	1e03      	subs	r3, r0, #0
 8010920:	d001      	beq.n	8010926 <LoRaMacCryptoHandleJoinAccept+0x20e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010922:	230f      	movs	r3, #15
 8010924:	e0ca      	b.n	8010abc <LoRaMacCryptoHandleJoinAccept+0x3a4>
        }

        // Check if the JoinNonce is greater as the previous one
        uint32_t currentJoinNonce = 0;
 8010926:	2300      	movs	r3, #0
 8010928:	228e      	movs	r2, #142	@ 0x8e
 801092a:	0052      	lsls	r2, r2, #1
 801092c:	18b9      	adds	r1, r7, r2
 801092e:	600b      	str	r3, [r1, #0]
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	799b      	ldrb	r3, [r3, #6]
 8010934:	18b9      	adds	r1, r7, r2
 8010936:	600b      	str	r3, [r1, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	79db      	ldrb	r3, [r3, #7]
 801093c:	021b      	lsls	r3, r3, #8
 801093e:	0011      	movs	r1, r2
 8010940:	18ba      	adds	r2, r7, r2
 8010942:	6812      	ldr	r2, [r2, #0]
 8010944:	4313      	orrs	r3, r2
 8010946:	000a      	movs	r2, r1
 8010948:	18b9      	adds	r1, r7, r2
 801094a:	600b      	str	r3, [r1, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	7a1b      	ldrb	r3, [r3, #8]
 8010950:	041b      	lsls	r3, r3, #16
 8010952:	0011      	movs	r1, r2
 8010954:	187a      	adds	r2, r7, r1
 8010956:	6812      	ldr	r2, [r2, #0]
 8010958:	4313      	orrs	r3, r2
 801095a:	187a      	adds	r2, r7, r1
 801095c:	6013      	str	r3, [r2, #0]

        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 801095e:	4b48      	ldr	r3, [pc, #288]	@ (8010a80 <LoRaMacCryptoHandleJoinAccept+0x368>)
 8010960:	685b      	ldr	r3, [r3, #4]
 8010962:	689b      	ldr	r3, [r3, #8]
 8010964:	187a      	adds	r2, r7, r1
 8010966:	6812      	ldr	r2, [r2, #0]
 8010968:	429a      	cmp	r2, r3
 801096a:	d908      	bls.n	801097e <LoRaMacCryptoHandleJoinAccept+0x266>
        {
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
 801096c:	4b44      	ldr	r3, [pc, #272]	@ (8010a80 <LoRaMacCryptoHandleJoinAccept+0x368>)
 801096e:	685b      	ldr	r3, [r3, #4]
 8010970:	187a      	adds	r2, r7, r1
 8010972:	6812      	ldr	r2, [r2, #0]
 8010974:	609a      	str	r2, [r3, #8]
            CryptoCtx.EventCryptoNvmCtxChanged( );
 8010976:	4b42      	ldr	r3, [pc, #264]	@ (8010a80 <LoRaMacCryptoHandleJoinAccept+0x368>)
 8010978:	689b      	ldr	r3, [r3, #8]
 801097a:	4798      	blx	r3
 801097c:	e001      	b.n	8010982 <LoRaMacCryptoHandleJoinAccept+0x26a>
        }
        else
        {
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 801097e:	2303      	movs	r3, #3
 8010980:	e09c      	b.n	8010abc <LoRaMacCryptoHandleJoinAccept+0x3a4>
    }
    else
#endif
    {
        // prior LoRaWAN 1.1.0
        retval = LoRaMacCryptoDeriveMcRootKey( GEN_APP_KEY );
 8010982:	2592      	movs	r5, #146	@ 0x92
 8010984:	006d      	lsls	r5, r5, #1
 8010986:	197c      	adds	r4, r7, r5
 8010988:	2001      	movs	r0, #1
 801098a:	f000 f9f3 	bl	8010d74 <LoRaMacCryptoDeriveMcRootKey>
 801098e:	0003      	movs	r3, r0
 8010990:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010992:	002a      	movs	r2, r5
 8010994:	18bb      	adds	r3, r7, r2
 8010996:	781b      	ldrb	r3, [r3, #0]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d002      	beq.n	80109a2 <LoRaMacCryptoHandleJoinAccept+0x28a>
        {
            return retval;
 801099c:	18bb      	adds	r3, r7, r2
 801099e:	781b      	ldrb	r3, [r3, #0]
 80109a0:	e08c      	b.n	8010abc <LoRaMacCryptoHandleJoinAccept+0x3a4>
        }

        retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80109a2:	2592      	movs	r5, #146	@ 0x92
 80109a4:	006d      	lsls	r5, r5, #1
 80109a6:	197c      	adds	r4, r7, r5
 80109a8:	2009      	movs	r0, #9
 80109aa:	f000 fa25 	bl	8010df8 <LoRaMacCryptoDeriveMcKEKey>
 80109ae:	0003      	movs	r3, r0
 80109b0:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80109b2:	002a      	movs	r2, r5
 80109b4:	18bb      	adds	r3, r7, r2
 80109b6:	781b      	ldrb	r3, [r3, #0]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d002      	beq.n	80109c2 <LoRaMacCryptoHandleJoinAccept+0x2aa>
        {
            return retval;
 80109bc:	18bb      	adds	r3, r7, r2
 80109be:	781b      	ldrb	r3, [r3, #0]
 80109c0:	e07c      	b.n	8010abc <LoRaMacCryptoHandleJoinAccept+0x3a4>
        }

        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	1d99      	adds	r1, r3, #6
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	3309      	adds	r3, #9
 80109ca:	001a      	movs	r2, r3
 80109cc:	4b2c      	ldr	r3, [pc, #176]	@ (8010a80 <LoRaMacCryptoHandleJoinAccept+0x368>)
 80109ce:	685b      	ldr	r3, [r3, #4]
 80109d0:	3304      	adds	r3, #4
 80109d2:	2592      	movs	r5, #146	@ 0x92
 80109d4:	006d      	lsls	r5, r5, #1
 80109d6:	197c      	adds	r4, r7, r5
 80109d8:	2008      	movs	r0, #8
 80109da:	f7ff fb8d 	bl	80100f8 <DeriveSessionKey10x>
 80109de:	0003      	movs	r3, r0
 80109e0:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80109e2:	197b      	adds	r3, r7, r5
 80109e4:	781b      	ldrb	r3, [r3, #0]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d002      	beq.n	80109f0 <LoRaMacCryptoHandleJoinAccept+0x2d8>
        {
            return retval;
 80109ea:	197b      	adds	r3, r7, r5
 80109ec:	781b      	ldrb	r3, [r3, #0]
 80109ee:	e065      	b.n	8010abc <LoRaMacCryptoHandleJoinAccept+0x3a4>
        }

        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	1d99      	adds	r1, r3, #6
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	3309      	adds	r3, #9
 80109f8:	001a      	movs	r2, r3
 80109fa:	4b21      	ldr	r3, [pc, #132]	@ (8010a80 <LoRaMacCryptoHandleJoinAccept+0x368>)
 80109fc:	685b      	ldr	r3, [r3, #4]
 80109fe:	3304      	adds	r3, #4
 8010a00:	2592      	movs	r5, #146	@ 0x92
 8010a02:	006d      	lsls	r5, r5, #1
 8010a04:	197c      	adds	r4, r7, r5
 8010a06:	2007      	movs	r0, #7
 8010a08:	f7ff fb76 	bl	80100f8 <DeriveSessionKey10x>
 8010a0c:	0003      	movs	r3, r0
 8010a0e:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010a10:	197b      	adds	r3, r7, r5
 8010a12:	781b      	ldrb	r3, [r3, #0]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d002      	beq.n	8010a1e <LoRaMacCryptoHandleJoinAccept+0x306>
        {
            return retval;
 8010a18:	197b      	adds	r3, r7, r5
 8010a1a:	781b      	ldrb	r3, [r3, #0]
 8010a1c:	e04e      	b.n	8010abc <LoRaMacCryptoHandleJoinAccept+0x3a4>
        }

        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	1d99      	adds	r1, r3, #6
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	3309      	adds	r3, #9
 8010a26:	001a      	movs	r2, r3
 8010a28:	4b15      	ldr	r3, [pc, #84]	@ (8010a80 <LoRaMacCryptoHandleJoinAccept+0x368>)
 8010a2a:	685b      	ldr	r3, [r3, #4]
 8010a2c:	3304      	adds	r3, #4
 8010a2e:	2592      	movs	r5, #146	@ 0x92
 8010a30:	006d      	lsls	r5, r5, #1
 8010a32:	197c      	adds	r4, r7, r5
 8010a34:	2005      	movs	r0, #5
 8010a36:	f7ff fb5f 	bl	80100f8 <DeriveSessionKey10x>
 8010a3a:	0003      	movs	r3, r0
 8010a3c:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010a3e:	197b      	adds	r3, r7, r5
 8010a40:	781b      	ldrb	r3, [r3, #0]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d002      	beq.n	8010a4c <LoRaMacCryptoHandleJoinAccept+0x334>
        {
            return retval;
 8010a46:	197b      	adds	r3, r7, r5
 8010a48:	781b      	ldrb	r3, [r3, #0]
 8010a4a:	e037      	b.n	8010abc <LoRaMacCryptoHandleJoinAccept+0x3a4>
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	1d99      	adds	r1, r3, #6
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	3309      	adds	r3, #9
 8010a54:	001a      	movs	r2, r3
 8010a56:	4b0a      	ldr	r3, [pc, #40]	@ (8010a80 <LoRaMacCryptoHandleJoinAccept+0x368>)
 8010a58:	685b      	ldr	r3, [r3, #4]
 8010a5a:	3304      	adds	r3, #4
 8010a5c:	2592      	movs	r5, #146	@ 0x92
 8010a5e:	006d      	lsls	r5, r5, #1
 8010a60:	197c      	adds	r4, r7, r5
 8010a62:	2006      	movs	r0, #6
 8010a64:	f7ff fb48 	bl	80100f8 <DeriveSessionKey10x>
 8010a68:	0003      	movs	r3, r0
 8010a6a:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010a6c:	197b      	adds	r3, r7, r5
 8010a6e:	781b      	ldrb	r3, [r3, #0]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d009      	beq.n	8010a88 <LoRaMacCryptoHandleJoinAccept+0x370>
        {
            return retval;
 8010a74:	197b      	adds	r3, r7, r5
 8010a76:	781b      	ldrb	r3, [r3, #0]
 8010a78:	e020      	b.n	8010abc <LoRaMacCryptoHandleJoinAccept+0x3a4>
 8010a7a:	46c0      	nop			@ (mov r8, r8)
 8010a7c:	fffffee7 	.word	0xfffffee7
 8010a80:	20001120 	.word	0x20001120
 8010a84:	fffffee8 	.word	0xfffffee8
        }
    }

    // Join-Accept is successfully processed, reset frame counters
    CryptoCtx.RJcount0 = 0;
 8010a88:	4b0e      	ldr	r3, [pc, #56]	@ (8010ac4 <LoRaMacCryptoHandleJoinAccept+0x3ac>)
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	801a      	strh	r2, [r3, #0]
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8010a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8010ac4 <LoRaMacCryptoHandleJoinAccept+0x3ac>)
 8010a90:	685b      	ldr	r3, [r3, #4]
 8010a92:	2200      	movs	r2, #0
 8010a94:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8010a96:	4b0b      	ldr	r3, [pc, #44]	@ (8010ac4 <LoRaMacCryptoHandleJoinAccept+0x3ac>)
 8010a98:	685b      	ldr	r3, [r3, #4]
 8010a9a:	2201      	movs	r2, #1
 8010a9c:	4252      	negs	r2, r2
 8010a9e:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8010aa0:	4b08      	ldr	r3, [pc, #32]	@ (8010ac4 <LoRaMacCryptoHandleJoinAccept+0x3ac>)
 8010aa2:	685b      	ldr	r3, [r3, #4]
 8010aa4:	2201      	movs	r2, #1
 8010aa6:	4252      	negs	r2, r2
 8010aa8:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8010aaa:	4b06      	ldr	r3, [pc, #24]	@ (8010ac4 <LoRaMacCryptoHandleJoinAccept+0x3ac>)
 8010aac:	685b      	ldr	r3, [r3, #4]
 8010aae:	2201      	movs	r2, #1
 8010ab0:	4252      	negs	r2, r2
 8010ab2:	615a      	str	r2, [r3, #20]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8010ab4:	4b03      	ldr	r3, [pc, #12]	@ (8010ac4 <LoRaMacCryptoHandleJoinAccept+0x3ac>)
 8010ab6:	689b      	ldr	r3, [r3, #8]
 8010ab8:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 8010aba:	2300      	movs	r3, #0
}
 8010abc:	0018      	movs	r0, r3
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	b04b      	add	sp, #300	@ 0x12c
 8010ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ac4:	20001120 	.word	0x20001120

08010ac8 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8010ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010aca:	b08b      	sub	sp, #44	@ 0x2c
 8010acc:	af04      	add	r7, sp, #16
 8010ace:	60f8      	str	r0, [r7, #12]
 8010ad0:	0008      	movs	r0, r1
 8010ad2:	0011      	movs	r1, r2
 8010ad4:	607b      	str	r3, [r7, #4]
 8010ad6:	230b      	movs	r3, #11
 8010ad8:	18fb      	adds	r3, r7, r3
 8010ada:	1c02      	adds	r2, r0, #0
 8010adc:	701a      	strb	r2, [r3, #0]
 8010ade:	230a      	movs	r3, #10
 8010ae0:	18fb      	adds	r3, r7, r3
 8010ae2:	1c0a      	adds	r2, r1, #0
 8010ae4:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8010ae6:	2316      	movs	r3, #22
 8010ae8:	18fb      	adds	r3, r7, r3
 8010aea:	2213      	movs	r2, #19
 8010aec:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8010aee:	2317      	movs	r3, #23
 8010af0:	18fb      	adds	r3, r7, r3
 8010af2:	2208      	movs	r2, #8
 8010af4:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d101      	bne.n	8010b00 <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010afc:	230a      	movs	r3, #10
 8010afe:	e06a      	b.n	8010bd6 <LoRaMacCryptoSecureMessage+0x10e>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 8010b00:	4b37      	ldr	r3, [pc, #220]	@ (8010be0 <LoRaMacCryptoSecureMessage+0x118>)
 8010b02:	685b      	ldr	r3, [r3, #4]
 8010b04:	68db      	ldr	r3, [r3, #12]
 8010b06:	68fa      	ldr	r2, [r7, #12]
 8010b08:	429a      	cmp	r2, r3
 8010b0a:	d201      	bcs.n	8010b10 <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8010b0c:	2306      	movs	r3, #6
 8010b0e:	e062      	b.n	8010bd6 <LoRaMacCryptoSecureMessage+0x10e>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	2220      	movs	r2, #32
 8010b14:	5c9b      	ldrb	r3, [r3, r2]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d103      	bne.n	8010b22 <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 8010b1a:	2317      	movs	r3, #23
 8010b1c:	18fb      	adds	r3, r7, r3
 8010b1e:	2207      	movs	r2, #7
 8010b20:	701a      	strb	r2, [r3, #0]
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 8010b22:	4b2f      	ldr	r3, [pc, #188]	@ (8010be0 <LoRaMacCryptoSecureMessage+0x118>)
 8010b24:	685b      	ldr	r3, [r3, #4]
 8010b26:	68db      	ldr	r3, [r3, #12]
 8010b28:	68fa      	ldr	r2, [r7, #12]
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d91c      	bls.n	8010b68 <LoRaMacCryptoSecureMessage+0xa0>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2228      	movs	r2, #40	@ 0x28
 8010b36:	5c9b      	ldrb	r3, [r3, r2]
 8010b38:	b219      	sxth	r1, r3
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	689d      	ldr	r5, [r3, #8]
 8010b3e:	2616      	movs	r6, #22
 8010b40:	19bc      	adds	r4, r7, r6
 8010b42:	2317      	movs	r3, #23
 8010b44:	18fb      	adds	r3, r7, r3
 8010b46:	781a      	ldrb	r2, [r3, #0]
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	9301      	str	r3, [sp, #4]
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	9300      	str	r3, [sp, #0]
 8010b50:	002b      	movs	r3, r5
 8010b52:	f7ff f867 	bl	800fc24 <PayloadEncrypt>
 8010b56:	0003      	movs	r3, r0
 8010b58:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010b5a:	19bb      	adds	r3, r7, r6
 8010b5c:	781b      	ldrb	r3, [r3, #0]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d002      	beq.n	8010b68 <LoRaMacCryptoSecureMessage+0xa0>
        {
            return retval;
 8010b62:	19bb      	adds	r3, r7, r6
 8010b64:	781b      	ldrb	r3, [r3, #0]
 8010b66:	e036      	b.n	8010bd6 <LoRaMacCryptoSecureMessage+0x10e>
                return retval;
            }
        }
#endif
    }
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 8010b68:	4b1d      	ldr	r3, [pc, #116]	@ (8010be0 <LoRaMacCryptoSecureMessage+0x118>)
 8010b6a:	685b      	ldr	r3, [r3, #4]
 8010b6c:	68fa      	ldr	r2, [r7, #12]
 8010b6e:	60da      	str	r2, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8010b70:	4b1b      	ldr	r3, [pc, #108]	@ (8010be0 <LoRaMacCryptoSecureMessage+0x118>)
 8010b72:	689b      	ldr	r3, [r3, #8]
 8010b74:	4798      	blx	r3

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	0018      	movs	r0, r3
 8010b7a:	f000 fc00 	bl	801137e <LoRaMacSerializerData>
 8010b7e:	1e03      	subs	r3, r0, #0
 8010b80:	d001      	beq.n	8010b86 <LoRaMacCryptoSecureMessage+0xbe>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8010b82:	2311      	movs	r3, #17
 8010b84:	e027      	b.n	8010bd6 <LoRaMacCryptoSecureMessage+0x10e>
    else
#endif
    {
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	6818      	ldr	r0, [r3, #0]
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	791b      	ldrb	r3, [r3, #4]
 8010b8e:	3b04      	subs	r3, #4
 8010b90:	b299      	uxth	r1, r3
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	689b      	ldr	r3, [r3, #8]
 8010b96:	687a      	ldr	r2, [r7, #4]
 8010b98:	322c      	adds	r2, #44	@ 0x2c
 8010b9a:	2516      	movs	r5, #22
 8010b9c:	197c      	adds	r4, r7, r5
 8010b9e:	9203      	str	r2, [sp, #12]
 8010ba0:	68fa      	ldr	r2, [r7, #12]
 8010ba2:	9202      	str	r2, [sp, #8]
 8010ba4:	9301      	str	r3, [sp, #4]
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	9300      	str	r3, [sp, #0]
 8010baa:	2300      	movs	r3, #0
 8010bac:	2207      	movs	r2, #7
 8010bae:	f7ff f98f 	bl	800fed0 <ComputeCmacB0>
 8010bb2:	0003      	movs	r3, r0
 8010bb4:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010bb6:	197b      	adds	r3, r7, r5
 8010bb8:	781b      	ldrb	r3, [r3, #0]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d002      	beq.n	8010bc4 <LoRaMacCryptoSecureMessage+0xfc>
        {
            return retval;
 8010bbe:	197b      	adds	r3, r7, r5
 8010bc0:	781b      	ldrb	r3, [r3, #0]
 8010bc2:	e008      	b.n	8010bd6 <LoRaMacCryptoSecureMessage+0x10e>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	0018      	movs	r0, r3
 8010bc8:	f000 fbd9 	bl	801137e <LoRaMacSerializerData>
 8010bcc:	1e03      	subs	r3, r0, #0
 8010bce:	d001      	beq.n	8010bd4 <LoRaMacCryptoSecureMessage+0x10c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8010bd0:	2311      	movs	r3, #17
 8010bd2:	e000      	b.n	8010bd6 <LoRaMacCryptoSecureMessage+0x10e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010bd4:	2300      	movs	r3, #0
}
 8010bd6:	0018      	movs	r0, r3
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	b007      	add	sp, #28
 8010bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bde:	46c0      	nop			@ (mov r8, r8)
 8010be0:	20001120 	.word	0x20001120

08010be4 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8010be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010be6:	b08b      	sub	sp, #44	@ 0x2c
 8010be8:	af04      	add	r7, sp, #16
 8010bea:	60b9      	str	r1, [r7, #8]
 8010bec:	0011      	movs	r1, r2
 8010bee:	607b      	str	r3, [r7, #4]
 8010bf0:	230f      	movs	r3, #15
 8010bf2:	18fb      	adds	r3, r7, r3
 8010bf4:	1c02      	adds	r2, r0, #0
 8010bf6:	701a      	strb	r2, [r3, #0]
 8010bf8:	230e      	movs	r3, #14
 8010bfa:	18fb      	adds	r3, r7, r3
 8010bfc:	1c0a      	adds	r2, r1, #0
 8010bfe:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
 8010c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d101      	bne.n	8010c0a <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010c06:	230a      	movs	r3, #10
 8010c08:	e0ad      	b.n	8010d66 <LoRaMacCryptoUnsecureMessage+0x182>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8010c0a:	687a      	ldr	r2, [r7, #4]
 8010c0c:	230e      	movs	r3, #14
 8010c0e:	18fb      	adds	r3, r7, r3
 8010c10:	781b      	ldrb	r3, [r3, #0]
 8010c12:	0011      	movs	r1, r2
 8010c14:	0018      	movs	r0, r3
 8010c16:	f7ff fb2d 	bl	8010274 <CheckFCntDown>
 8010c1a:	0003      	movs	r3, r0
 8010c1c:	001a      	movs	r2, r3
 8010c1e:	2301      	movs	r3, #1
 8010c20:	4053      	eors	r3, r2
 8010c22:	b2db      	uxtb	r3, r3
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d001      	beq.n	8010c2c <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8010c28:	2306      	movs	r3, #6
 8010c2a:	e09c      	b.n	8010d66 <LoRaMacCryptoUnsecureMessage+0x182>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8010c2c:	2315      	movs	r3, #21
 8010c2e:	18fb      	adds	r3, r7, r3
 8010c30:	2213      	movs	r2, #19
 8010c32:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8010c34:	2317      	movs	r3, #23
 8010c36:	18fb      	adds	r3, r7, r3
 8010c38:	2208      	movs	r2, #8
 8010c3a:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
 8010c3c:	2314      	movs	r3, #20
 8010c3e:	18fb      	adds	r3, r7, r3
 8010c40:	2206      	movs	r2, #6
 8010c42:	701a      	strb	r2, [r3, #0]
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8010c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c46:	0018      	movs	r0, r3
 8010c48:	f000 f9f0 	bl	801102c <LoRaMacParserData>
 8010c4c:	1e03      	subs	r3, r0, #0
 8010c4e:	d001      	beq.n	8010c54 <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8010c50:	2310      	movs	r3, #16
 8010c52:	e088      	b.n	8010d66 <LoRaMacCryptoUnsecureMessage+0x182>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8010c54:	2515      	movs	r5, #21
 8010c56:	197c      	adds	r4, r7, r5
 8010c58:	2310      	movs	r3, #16
 8010c5a:	18fa      	adds	r2, r7, r3
 8010c5c:	230f      	movs	r3, #15
 8010c5e:	18fb      	adds	r3, r7, r3
 8010c60:	781b      	ldrb	r3, [r3, #0]
 8010c62:	0011      	movs	r1, r2
 8010c64:	0018      	movs	r0, r3
 8010c66:	f7ff fa15 	bl	8010094 <GetKeyAddrItem>
 8010c6a:	0003      	movs	r3, r0
 8010c6c:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010c6e:	197b      	adds	r3, r7, r5
 8010c70:	781b      	ldrb	r3, [r3, #0]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d002      	beq.n	8010c7c <LoRaMacCryptoUnsecureMessage+0x98>
    {
        return retval;
 8010c76:	197b      	adds	r3, r7, r5
 8010c78:	781b      	ldrb	r3, [r3, #0]
 8010c7a:	e074      	b.n	8010d66 <LoRaMacCryptoUnsecureMessage+0x182>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8010c7c:	693a      	ldr	r2, [r7, #16]
 8010c7e:	2317      	movs	r3, #23
 8010c80:	18fb      	adds	r3, r7, r3
 8010c82:	7852      	ldrb	r2, [r2, #1]
 8010c84:	701a      	strb	r2, [r3, #0]
    micComputationKeyID = curItem->NwkSkey;
 8010c86:	693a      	ldr	r2, [r7, #16]
 8010c88:	2314      	movs	r3, #20
 8010c8a:	18fb      	adds	r3, r7, r3
 8010c8c:	7892      	ldrb	r2, [r2, #2]
 8010c8e:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8010c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c92:	689b      	ldr	r3, [r3, #8]
 8010c94:	68ba      	ldr	r2, [r7, #8]
 8010c96:	429a      	cmp	r2, r3
 8010c98:	d001      	beq.n	8010c9e <LoRaMacCryptoUnsecureMessage+0xba>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8010c9a:	2302      	movs	r3, #2
 8010c9c:	e063      	b.n	8010d66 <LoRaMacCryptoUnsecureMessage+0x182>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8010c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ca0:	7b1b      	ldrb	r3, [r3, #12]
 8010ca2:	069b      	lsls	r3, r3, #26
 8010ca4:	0fdb      	lsrs	r3, r3, #31
 8010ca6:	b2db      	uxtb	r3, r3
 8010ca8:	001a      	movs	r2, r3
 8010caa:	2016      	movs	r0, #22
 8010cac:	183b      	adds	r3, r7, r0
 8010cae:	1e51      	subs	r1, r2, #1
 8010cb0:	418a      	sbcs	r2, r1
 8010cb2:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8010cb4:	4b2e      	ldr	r3, [pc, #184]	@ (8010d70 <LoRaMacCryptoUnsecureMessage+0x18c>)
 8010cb6:	685b      	ldr	r3, [r3, #4]
 8010cb8:	789b      	ldrb	r3, [r3, #2]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d102      	bne.n	8010cc4 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8010cbe:	183b      	adds	r3, r7, r0
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8010cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cc6:	6818      	ldr	r0, [r3, #0]
 8010cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cca:	791b      	ldrb	r3, [r3, #4]
 8010ccc:	3b04      	subs	r3, #4
 8010cce:	b299      	uxth	r1, r3
 8010cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cd4:	2615      	movs	r6, #21
 8010cd6:	19bc      	adds	r4, r7, r6
 8010cd8:	2216      	movs	r2, #22
 8010cda:	18ba      	adds	r2, r7, r2
 8010cdc:	7815      	ldrb	r5, [r2, #0]
 8010cde:	2214      	movs	r2, #20
 8010ce0:	18ba      	adds	r2, r7, r2
 8010ce2:	7812      	ldrb	r2, [r2, #0]
 8010ce4:	9303      	str	r3, [sp, #12]
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	9302      	str	r3, [sp, #8]
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	9301      	str	r3, [sp, #4]
 8010cee:	2301      	movs	r3, #1
 8010cf0:	9300      	str	r3, [sp, #0]
 8010cf2:	002b      	movs	r3, r5
 8010cf4:	f7ff f934 	bl	800ff60 <VerifyCmacB0>
 8010cf8:	0003      	movs	r3, r0
 8010cfa:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010cfc:	19bb      	adds	r3, r7, r6
 8010cfe:	781b      	ldrb	r3, [r3, #0]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d002      	beq.n	8010d0a <LoRaMacCryptoUnsecureMessage+0x126>
    {
        return retval;
 8010d04:	19bb      	adds	r3, r7, r6
 8010d06:	781b      	ldrb	r3, [r3, #0]
 8010d08:	e02d      	b.n	8010d66 <LoRaMacCryptoUnsecureMessage+0x182>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8010d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d0c:	2220      	movs	r2, #32
 8010d0e:	5c9b      	ldrb	r3, [r3, r2]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d103      	bne.n	8010d1c <LoRaMacCryptoUnsecureMessage+0x138>
    {
        // Use network session encryption key
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 8010d14:	2317      	movs	r3, #23
 8010d16:	18fb      	adds	r3, r7, r3
 8010d18:	2207      	movs	r2, #7
 8010d1a:	701a      	strb	r2, [r3, #0]
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8010d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d1e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8010d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d22:	2228      	movs	r2, #40	@ 0x28
 8010d24:	5c9b      	ldrb	r3, [r3, r2]
 8010d26:	b219      	sxth	r1, r3
 8010d28:	2615      	movs	r6, #21
 8010d2a:	19bc      	adds	r4, r7, r6
 8010d2c:	68bd      	ldr	r5, [r7, #8]
 8010d2e:	2317      	movs	r3, #23
 8010d30:	18fb      	adds	r3, r7, r3
 8010d32:	781a      	ldrb	r2, [r3, #0]
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	9301      	str	r3, [sp, #4]
 8010d38:	2301      	movs	r3, #1
 8010d3a:	9300      	str	r3, [sp, #0]
 8010d3c:	002b      	movs	r3, r5
 8010d3e:	f7fe ff71 	bl	800fc24 <PayloadEncrypt>
 8010d42:	0003      	movs	r3, r0
 8010d44:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010d46:	19bb      	adds	r3, r7, r6
 8010d48:	781b      	ldrb	r3, [r3, #0]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d002      	beq.n	8010d54 <LoRaMacCryptoUnsecureMessage+0x170>
    {
        return retval;
 8010d4e:	19bb      	adds	r3, r7, r6
 8010d50:	781b      	ldrb	r3, [r3, #0]
 8010d52:	e008      	b.n	8010d66 <LoRaMacCryptoUnsecureMessage+0x182>
            return retval;
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8010d54:	687a      	ldr	r2, [r7, #4]
 8010d56:	230e      	movs	r3, #14
 8010d58:	18fb      	adds	r3, r7, r3
 8010d5a:	781b      	ldrb	r3, [r3, #0]
 8010d5c:	0011      	movs	r1, r2
 8010d5e:	0018      	movs	r0, r3
 8010d60:	f7ff faac 	bl	80102bc <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8010d64:	2300      	movs	r3, #0
}
 8010d66:	0018      	movs	r0, r3
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	b007      	add	sp, #28
 8010d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d6e:	46c0      	nop			@ (mov r8, r8)
 8010d70:	20001120 	.word	0x20001120

08010d74 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( KeyIdentifier_t keyID )
{
 8010d74:	b590      	push	{r4, r7, lr}
 8010d76:	b087      	sub	sp, #28
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	0002      	movs	r2, r0
 8010d7c:	1dfb      	adds	r3, r7, #7
 8010d7e:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than GenAppKey for LoRaWAN 1.0.x or AppKey for LoRaWAN 1.1 or later
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 8010d80:	1dfb      	adds	r3, r7, #7
 8010d82:	781b      	ldrb	r3, [r3, #0]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d104      	bne.n	8010d92 <LoRaMacCryptoDeriveMcRootKey+0x1e>
 8010d88:	4b1a      	ldr	r3, [pc, #104]	@ (8010df4 <LoRaMacCryptoDeriveMcRootKey+0x80>)
 8010d8a:	685b      	ldr	r3, [r3, #4]
 8010d8c:	789b      	ldrb	r3, [r3, #2]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d008      	beq.n	8010da4 <LoRaMacCryptoDeriveMcRootKey+0x30>
 8010d92:	1dfb      	adds	r3, r7, #7
 8010d94:	781b      	ldrb	r3, [r3, #0]
 8010d96:	2b01      	cmp	r3, #1
 8010d98:	d106      	bne.n	8010da8 <LoRaMacCryptoDeriveMcRootKey+0x34>
        ( ( keyID == GEN_APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 ) ) )
 8010d9a:	4b16      	ldr	r3, [pc, #88]	@ (8010df4 <LoRaMacCryptoDeriveMcRootKey+0x80>)
 8010d9c:	685b      	ldr	r3, [r3, #4]
 8010d9e:	789b      	ldrb	r3, [r3, #2]
 8010da0:	2b01      	cmp	r3, #1
 8010da2:	d101      	bne.n	8010da8 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8010da4:	230b      	movs	r3, #11
 8010da6:	e020      	b.n	8010dea <LoRaMacCryptoDeriveMcRootKey+0x76>
    }
    uint8_t compBase[16] = { 0 };
 8010da8:	2408      	movs	r4, #8
 8010daa:	193b      	adds	r3, r7, r4
 8010dac:	2200      	movs	r2, #0
 8010dae:	601a      	str	r2, [r3, #0]
 8010db0:	3304      	adds	r3, #4
 8010db2:	220c      	movs	r2, #12
 8010db4:	2100      	movs	r1, #0
 8010db6:	0018      	movs	r0, r3
 8010db8:	f008 fdf8 	bl	80199ac <memset>

    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 8010dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8010df4 <LoRaMacCryptoDeriveMcRootKey+0x80>)
 8010dbe:	685b      	ldr	r3, [r3, #4]
 8010dc0:	789b      	ldrb	r3, [r3, #2]
 8010dc2:	2b01      	cmp	r3, #1
 8010dc4:	d102      	bne.n	8010dcc <LoRaMacCryptoDeriveMcRootKey+0x58>
    {
        compBase[0] = 0x20;
 8010dc6:	193b      	adds	r3, r7, r4
 8010dc8:	2220      	movs	r2, #32
 8010dca:	701a      	strb	r2, [r3, #0]
    }
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8010dcc:	4b09      	ldr	r3, [pc, #36]	@ (8010df4 <LoRaMacCryptoDeriveMcRootKey+0x80>)
 8010dce:	685b      	ldr	r3, [r3, #4]
 8010dd0:	1dfa      	adds	r2, r7, #7
 8010dd2:	7812      	ldrb	r2, [r2, #0]
 8010dd4:	2108      	movs	r1, #8
 8010dd6:	1879      	adds	r1, r7, r1
 8010dd8:	6818      	ldr	r0, [r3, #0]
 8010dda:	2309      	movs	r3, #9
 8010ddc:	f7f8 fbf2 	bl	80095c4 <SecureElementDeriveAndStoreKey>
 8010de0:	1e03      	subs	r3, r0, #0
 8010de2:	d001      	beq.n	8010de8 <LoRaMacCryptoDeriveMcRootKey+0x74>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010de4:	230f      	movs	r3, #15
 8010de6:	e000      	b.n	8010dea <LoRaMacCryptoDeriveMcRootKey+0x76>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010de8:	2300      	movs	r3, #0
}
 8010dea:	0018      	movs	r0, r3
 8010dec:	46bd      	mov	sp, r7
 8010dee:	b007      	add	sp, #28
 8010df0:	bd90      	pop	{r4, r7, pc}
 8010df2:	46c0      	nop			@ (mov r8, r8)
 8010df4:	20001120 	.word	0x20001120

08010df8 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8010df8:	b590      	push	{r4, r7, lr}
 8010dfa:	b087      	sub	sp, #28
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	0002      	movs	r2, r0
 8010e00:	1dfb      	adds	r3, r7, #7
 8010e02:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8010e04:	1dfb      	adds	r3, r7, #7
 8010e06:	781b      	ldrb	r3, [r3, #0]
 8010e08:	2b09      	cmp	r3, #9
 8010e0a:	d001      	beq.n	8010e10 <LoRaMacCryptoDeriveMcKEKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8010e0c:	230b      	movs	r3, #11
 8010e0e:	e017      	b.n	8010e40 <LoRaMacCryptoDeriveMcKEKey+0x48>
    }
    uint8_t compBase[16] = { 0 };
 8010e10:	2408      	movs	r4, #8
 8010e12:	193b      	adds	r3, r7, r4
 8010e14:	2200      	movs	r2, #0
 8010e16:	601a      	str	r2, [r3, #0]
 8010e18:	3304      	adds	r3, #4
 8010e1a:	220c      	movs	r2, #12
 8010e1c:	2100      	movs	r1, #0
 8010e1e:	0018      	movs	r0, r3
 8010e20:	f008 fdc4 	bl	80199ac <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8010e24:	4b08      	ldr	r3, [pc, #32]	@ (8010e48 <LoRaMacCryptoDeriveMcKEKey+0x50>)
 8010e26:	685b      	ldr	r3, [r3, #4]
 8010e28:	1dfa      	adds	r2, r7, #7
 8010e2a:	7812      	ldrb	r2, [r2, #0]
 8010e2c:	1939      	adds	r1, r7, r4
 8010e2e:	6818      	ldr	r0, [r3, #0]
 8010e30:	237f      	movs	r3, #127	@ 0x7f
 8010e32:	f7f8 fbc7 	bl	80095c4 <SecureElementDeriveAndStoreKey>
 8010e36:	1e03      	subs	r3, r0, #0
 8010e38:	d001      	beq.n	8010e3e <LoRaMacCryptoDeriveMcKEKey+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010e3a:	230f      	movs	r3, #15
 8010e3c:	e000      	b.n	8010e40 <LoRaMacCryptoDeriveMcKEKey+0x48>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010e3e:	2300      	movs	r3, #0
}
 8010e40:	0018      	movs	r0, r3
 8010e42:	46bd      	mov	sp, r7
 8010e44:	b007      	add	sp, #28
 8010e46:	bd90      	pop	{r4, r7, pc}
 8010e48:	20001120 	.word	0x20001120

08010e4c <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8010e4c:	b590      	push	{r4, r7, lr}
 8010e4e:	b085      	sub	sp, #20
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d003      	beq.n	8010e62 <LoRaMacParserJoinAccept+0x16>
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d101      	bne.n	8010e66 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8010e62:	2302      	movs	r3, #2
 8010e64:	e0de      	b.n	8011024 <LoRaMacParserJoinAccept+0x1d8>
    }

    uint16_t bufItr = 0;
 8010e66:	240e      	movs	r4, #14
 8010e68:	193b      	adds	r3, r7, r4
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681a      	ldr	r2, [r3, #0]
 8010e72:	193b      	adds	r3, r7, r4
 8010e74:	881b      	ldrh	r3, [r3, #0]
 8010e76:	1939      	adds	r1, r7, r4
 8010e78:	1c58      	adds	r0, r3, #1
 8010e7a:	8008      	strh	r0, [r1, #0]
 8010e7c:	18d3      	adds	r3, r2, r3
 8010e7e:	781a      	ldrb	r2, [r3, #0]
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	1d98      	adds	r0, r3, #6
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681a      	ldr	r2, [r3, #0]
 8010e8c:	193b      	adds	r3, r7, r4
 8010e8e:	881b      	ldrh	r3, [r3, #0]
 8010e90:	18d3      	adds	r3, r2, r3
 8010e92:	2203      	movs	r2, #3
 8010e94:	0019      	movs	r1, r3
 8010e96:	f004 fb6f 	bl	8015578 <memcpy1>
    bufItr = bufItr + 3;
 8010e9a:	193b      	adds	r3, r7, r4
 8010e9c:	193a      	adds	r2, r7, r4
 8010e9e:	8812      	ldrh	r2, [r2, #0]
 8010ea0:	3203      	adds	r2, #3
 8010ea2:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	3309      	adds	r3, #9
 8010ea8:	0018      	movs	r0, r3
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	681a      	ldr	r2, [r3, #0]
 8010eae:	193b      	adds	r3, r7, r4
 8010eb0:	881b      	ldrh	r3, [r3, #0]
 8010eb2:	18d3      	adds	r3, r2, r3
 8010eb4:	2203      	movs	r2, #3
 8010eb6:	0019      	movs	r1, r3
 8010eb8:	f004 fb5e 	bl	8015578 <memcpy1>
    bufItr = bufItr + 3;
 8010ebc:	193b      	adds	r3, r7, r4
 8010ebe:	193a      	adds	r2, r7, r4
 8010ec0:	8812      	ldrh	r2, [r2, #0]
 8010ec2:	3203      	adds	r2, #3
 8010ec4:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681a      	ldr	r2, [r3, #0]
 8010eca:	193b      	adds	r3, r7, r4
 8010ecc:	881b      	ldrh	r3, [r3, #0]
 8010ece:	1939      	adds	r1, r7, r4
 8010ed0:	1c58      	adds	r0, r3, #1
 8010ed2:	8008      	strh	r0, [r1, #0]
 8010ed4:	18d3      	adds	r3, r2, r3
 8010ed6:	781b      	ldrb	r3, [r3, #0]
 8010ed8:	001a      	movs	r2, r3
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681a      	ldr	r2, [r3, #0]
 8010ee2:	193b      	adds	r3, r7, r4
 8010ee4:	881b      	ldrh	r3, [r3, #0]
 8010ee6:	1939      	adds	r1, r7, r4
 8010ee8:	1c58      	adds	r0, r3, #1
 8010eea:	8008      	strh	r0, [r1, #0]
 8010eec:	18d3      	adds	r3, r2, r3
 8010eee:	781b      	ldrb	r3, [r3, #0]
 8010ef0:	021a      	lsls	r2, r3, #8
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	68db      	ldr	r3, [r3, #12]
 8010ef6:	431a      	orrs	r2, r3
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	681a      	ldr	r2, [r3, #0]
 8010f00:	193b      	adds	r3, r7, r4
 8010f02:	881b      	ldrh	r3, [r3, #0]
 8010f04:	1939      	adds	r1, r7, r4
 8010f06:	1c58      	adds	r0, r3, #1
 8010f08:	8008      	strh	r0, [r1, #0]
 8010f0a:	18d3      	adds	r3, r2, r3
 8010f0c:	781b      	ldrb	r3, [r3, #0]
 8010f0e:	041a      	lsls	r2, r3, #16
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	68db      	ldr	r3, [r3, #12]
 8010f14:	431a      	orrs	r2, r3
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681a      	ldr	r2, [r3, #0]
 8010f1e:	193b      	adds	r3, r7, r4
 8010f20:	881b      	ldrh	r3, [r3, #0]
 8010f22:	1939      	adds	r1, r7, r4
 8010f24:	1c58      	adds	r0, r3, #1
 8010f26:	8008      	strh	r0, [r1, #0]
 8010f28:	18d3      	adds	r3, r2, r3
 8010f2a:	781b      	ldrb	r3, [r3, #0]
 8010f2c:	061a      	lsls	r2, r3, #24
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	68db      	ldr	r3, [r3, #12]
 8010f32:	431a      	orrs	r2, r3
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	681a      	ldr	r2, [r3, #0]
 8010f3c:	193b      	adds	r3, r7, r4
 8010f3e:	881b      	ldrh	r3, [r3, #0]
 8010f40:	1939      	adds	r1, r7, r4
 8010f42:	1c58      	adds	r0, r3, #1
 8010f44:	8008      	strh	r0, [r1, #0]
 8010f46:	18d3      	adds	r3, r2, r3
 8010f48:	781a      	ldrb	r2, [r3, #0]
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681a      	ldr	r2, [r3, #0]
 8010f52:	193b      	adds	r3, r7, r4
 8010f54:	881b      	ldrh	r3, [r3, #0]
 8010f56:	1939      	adds	r1, r7, r4
 8010f58:	1c58      	adds	r0, r3, #1
 8010f5a:	8008      	strh	r0, [r1, #0]
 8010f5c:	18d3      	adds	r3, r2, r3
 8010f5e:	781a      	ldrb	r2, [r3, #0]
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	791b      	ldrb	r3, [r3, #4]
 8010f68:	1f1a      	subs	r2, r3, #4
 8010f6a:	193b      	adds	r3, r7, r4
 8010f6c:	881b      	ldrh	r3, [r3, #0]
 8010f6e:	1ad3      	subs	r3, r2, r3
 8010f70:	2b10      	cmp	r3, #16
 8010f72:	d111      	bne.n	8010f98 <LoRaMacParserJoinAccept+0x14c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	3312      	adds	r3, #18
 8010f78:	0018      	movs	r0, r3
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	681a      	ldr	r2, [r3, #0]
 8010f7e:	193b      	adds	r3, r7, r4
 8010f80:	881b      	ldrh	r3, [r3, #0]
 8010f82:	18d3      	adds	r3, r2, r3
 8010f84:	2210      	movs	r2, #16
 8010f86:	0019      	movs	r1, r3
 8010f88:	f004 faf6 	bl	8015578 <memcpy1>
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
 8010f8c:	193b      	adds	r3, r7, r4
 8010f8e:	193a      	adds	r2, r7, r4
 8010f90:	8812      	ldrh	r2, [r2, #0]
 8010f92:	3210      	adds	r2, #16
 8010f94:	801a      	strh	r2, [r3, #0]
 8010f96:	e00a      	b.n	8010fae <LoRaMacParserJoinAccept+0x162>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	791b      	ldrb	r3, [r3, #4]
 8010f9c:	1f1a      	subs	r2, r3, #4
 8010f9e:	230e      	movs	r3, #14
 8010fa0:	18fb      	adds	r3, r7, r3
 8010fa2:	881b      	ldrh	r3, [r3, #0]
 8010fa4:	1ad3      	subs	r3, r2, r3
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	dd01      	ble.n	8010fae <LoRaMacParserJoinAccept+0x162>
    {
        return LORAMAC_PARSER_FAIL;
 8010faa:	2301      	movs	r3, #1
 8010fac:	e03a      	b.n	8011024 <LoRaMacParserJoinAccept+0x1d8>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681a      	ldr	r2, [r3, #0]
 8010fb2:	240e      	movs	r4, #14
 8010fb4:	193b      	adds	r3, r7, r4
 8010fb6:	881b      	ldrh	r3, [r3, #0]
 8010fb8:	1939      	adds	r1, r7, r4
 8010fba:	1c58      	adds	r0, r3, #1
 8010fbc:	8008      	strh	r0, [r1, #0]
 8010fbe:	18d3      	adds	r3, r2, r3
 8010fc0:	781b      	ldrb	r3, [r3, #0]
 8010fc2:	001a      	movs	r2, r3
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681a      	ldr	r2, [r3, #0]
 8010fcc:	193b      	adds	r3, r7, r4
 8010fce:	881b      	ldrh	r3, [r3, #0]
 8010fd0:	1939      	adds	r1, r7, r4
 8010fd2:	1c58      	adds	r0, r3, #1
 8010fd4:	8008      	strh	r0, [r1, #0]
 8010fd6:	18d3      	adds	r3, r2, r3
 8010fd8:	781b      	ldrb	r3, [r3, #0]
 8010fda:	021a      	lsls	r2, r3, #8
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fe0:	431a      	orrs	r2, r3
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681a      	ldr	r2, [r3, #0]
 8010fea:	193b      	adds	r3, r7, r4
 8010fec:	881b      	ldrh	r3, [r3, #0]
 8010fee:	1939      	adds	r1, r7, r4
 8010ff0:	1c58      	adds	r0, r3, #1
 8010ff2:	8008      	strh	r0, [r1, #0]
 8010ff4:	18d3      	adds	r3, r2, r3
 8010ff6:	781b      	ldrb	r3, [r3, #0]
 8010ff8:	041a      	lsls	r2, r3, #16
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ffe:	431a      	orrs	r2, r3
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681a      	ldr	r2, [r3, #0]
 8011008:	193b      	adds	r3, r7, r4
 801100a:	881b      	ldrh	r3, [r3, #0]
 801100c:	1939      	adds	r1, r7, r4
 801100e:	1c58      	adds	r0, r3, #1
 8011010:	8008      	strh	r0, [r1, #0]
 8011012:	18d3      	adds	r3, r2, r3
 8011014:	781b      	ldrb	r3, [r3, #0]
 8011016:	061a      	lsls	r2, r3, #24
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801101c:	431a      	orrs	r2, r3
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8011022:	2300      	movs	r3, #0
}
 8011024:	0018      	movs	r0, r3
 8011026:	46bd      	mov	sp, r7
 8011028:	b005      	add	sp, #20
 801102a:	bd90      	pop	{r4, r7, pc}

0801102c <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 801102c:	b590      	push	{r4, r7, lr}
 801102e:	b085      	sub	sp, #20
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d003      	beq.n	8011042 <LoRaMacParserData+0x16>
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d101      	bne.n	8011046 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8011042:	2302      	movs	r3, #2
 8011044:	e0fc      	b.n	8011240 <LoRaMacParserData+0x214>
    }

    uint16_t bufItr = 0;
 8011046:	240e      	movs	r4, #14
 8011048:	193b      	adds	r3, r7, r4
 801104a:	2200      	movs	r2, #0
 801104c:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	681a      	ldr	r2, [r3, #0]
 8011052:	193b      	adds	r3, r7, r4
 8011054:	881b      	ldrh	r3, [r3, #0]
 8011056:	1939      	adds	r1, r7, r4
 8011058:	1c58      	adds	r0, r3, #1
 801105a:	8008      	strh	r0, [r1, #0]
 801105c:	18d3      	adds	r3, r2, r3
 801105e:	781a      	ldrb	r2, [r3, #0]
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	681a      	ldr	r2, [r3, #0]
 8011068:	193b      	adds	r3, r7, r4
 801106a:	881b      	ldrh	r3, [r3, #0]
 801106c:	1939      	adds	r1, r7, r4
 801106e:	1c58      	adds	r0, r3, #1
 8011070:	8008      	strh	r0, [r1, #0]
 8011072:	18d3      	adds	r3, r2, r3
 8011074:	781b      	ldrb	r3, [r3, #0]
 8011076:	001a      	movs	r2, r3
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	681a      	ldr	r2, [r3, #0]
 8011080:	193b      	adds	r3, r7, r4
 8011082:	881b      	ldrh	r3, [r3, #0]
 8011084:	1939      	adds	r1, r7, r4
 8011086:	1c58      	adds	r0, r3, #1
 8011088:	8008      	strh	r0, [r1, #0]
 801108a:	18d3      	adds	r3, r2, r3
 801108c:	781b      	ldrb	r3, [r3, #0]
 801108e:	021a      	lsls	r2, r3, #8
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	689b      	ldr	r3, [r3, #8]
 8011094:	431a      	orrs	r2, r3
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681a      	ldr	r2, [r3, #0]
 801109e:	193b      	adds	r3, r7, r4
 80110a0:	881b      	ldrh	r3, [r3, #0]
 80110a2:	1939      	adds	r1, r7, r4
 80110a4:	1c58      	adds	r0, r3, #1
 80110a6:	8008      	strh	r0, [r1, #0]
 80110a8:	18d3      	adds	r3, r2, r3
 80110aa:	781b      	ldrb	r3, [r3, #0]
 80110ac:	041a      	lsls	r2, r3, #16
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	689b      	ldr	r3, [r3, #8]
 80110b2:	431a      	orrs	r2, r3
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681a      	ldr	r2, [r3, #0]
 80110bc:	193b      	adds	r3, r7, r4
 80110be:	881b      	ldrh	r3, [r3, #0]
 80110c0:	1939      	adds	r1, r7, r4
 80110c2:	1c58      	adds	r0, r3, #1
 80110c4:	8008      	strh	r0, [r1, #0]
 80110c6:	18d3      	adds	r3, r2, r3
 80110c8:	781b      	ldrb	r3, [r3, #0]
 80110ca:	061a      	lsls	r2, r3, #24
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	689b      	ldr	r3, [r3, #8]
 80110d0:	431a      	orrs	r2, r3
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681a      	ldr	r2, [r3, #0]
 80110da:	193b      	adds	r3, r7, r4
 80110dc:	881b      	ldrh	r3, [r3, #0]
 80110de:	1939      	adds	r1, r7, r4
 80110e0:	1c58      	adds	r0, r3, #1
 80110e2:	8008      	strh	r0, [r1, #0]
 80110e4:	18d3      	adds	r3, r2, r3
 80110e6:	781a      	ldrb	r2, [r3, #0]
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	681a      	ldr	r2, [r3, #0]
 80110f0:	193b      	adds	r3, r7, r4
 80110f2:	881b      	ldrh	r3, [r3, #0]
 80110f4:	1939      	adds	r1, r7, r4
 80110f6:	1c58      	adds	r0, r3, #1
 80110f8:	8008      	strh	r0, [r1, #0]
 80110fa:	18d3      	adds	r3, r2, r3
 80110fc:	781b      	ldrb	r3, [r3, #0]
 80110fe:	001a      	movs	r2, r3
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	681a      	ldr	r2, [r3, #0]
 8011108:	193b      	adds	r3, r7, r4
 801110a:	881b      	ldrh	r3, [r3, #0]
 801110c:	1939      	adds	r1, r7, r4
 801110e:	1c58      	adds	r0, r3, #1
 8011110:	8008      	strh	r0, [r1, #0]
 8011112:	18d3      	adds	r3, r2, r3
 8011114:	781b      	ldrb	r3, [r3, #0]
 8011116:	0219      	lsls	r1, r3, #8
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	89db      	ldrh	r3, [r3, #14]
 801111c:	b21a      	sxth	r2, r3
 801111e:	b20b      	sxth	r3, r1
 8011120:	4313      	orrs	r3, r2
 8011122:	b21b      	sxth	r3, r3
 8011124:	b29a      	uxth	r2, r3
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	3310      	adds	r3, #16
 801112e:	0018      	movs	r0, r3
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681a      	ldr	r2, [r3, #0]
 8011134:	193b      	adds	r3, r7, r4
 8011136:	881b      	ldrh	r3, [r3, #0]
 8011138:	18d1      	adds	r1, r2, r3
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	7b1b      	ldrb	r3, [r3, #12]
 801113e:	071b      	lsls	r3, r3, #28
 8011140:	0f1b      	lsrs	r3, r3, #28
 8011142:	b2db      	uxtb	r3, r3
 8011144:	001a      	movs	r2, r3
 8011146:	f004 fa17 	bl	8015578 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	7b1b      	ldrb	r3, [r3, #12]
 801114e:	071b      	lsls	r3, r3, #28
 8011150:	0f1b      	lsrs	r3, r3, #28
 8011152:	b2db      	uxtb	r3, r3
 8011154:	0019      	movs	r1, r3
 8011156:	193b      	adds	r3, r7, r4
 8011158:	193a      	adds	r2, r7, r4
 801115a:	8812      	ldrh	r2, [r2, #0]
 801115c:	188a      	adds	r2, r1, r2
 801115e:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2220      	movs	r2, #32
 8011164:	2100      	movs	r1, #0
 8011166:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	2228      	movs	r2, #40	@ 0x28
 801116c:	2100      	movs	r1, #0
 801116e:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	791b      	ldrb	r3, [r3, #4]
 8011174:	001a      	movs	r2, r3
 8011176:	193b      	adds	r3, r7, r4
 8011178:	881b      	ldrh	r3, [r3, #0]
 801117a:	1ad3      	subs	r3, r2, r3
 801117c:	2b04      	cmp	r3, #4
 801117e:	dd2d      	ble.n	80111dc <LoRaMacParserData+0x1b0>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	681a      	ldr	r2, [r3, #0]
 8011184:	193b      	adds	r3, r7, r4
 8011186:	881b      	ldrh	r3, [r3, #0]
 8011188:	1939      	adds	r1, r7, r4
 801118a:	1c58      	adds	r0, r3, #1
 801118c:	8008      	strh	r0, [r1, #0]
 801118e:	18d3      	adds	r3, r2, r3
 8011190:	7819      	ldrb	r1, [r3, #0]
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	2220      	movs	r2, #32
 8011196:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	791a      	ldrb	r2, [r3, #4]
 801119c:	193b      	adds	r3, r7, r4
 801119e:	881b      	ldrh	r3, [r3, #0]
 80111a0:	b2db      	uxtb	r3, r3
 80111a2:	1ad3      	subs	r3, r2, r3
 80111a4:	b2db      	uxtb	r3, r3
 80111a6:	3b04      	subs	r3, #4
 80111a8:	b2d9      	uxtb	r1, r3
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	2228      	movs	r2, #40	@ 0x28
 80111ae:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	681a      	ldr	r2, [r3, #0]
 80111b8:	193b      	adds	r3, r7, r4
 80111ba:	881b      	ldrh	r3, [r3, #0]
 80111bc:	18d1      	adds	r1, r2, r3
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	2228      	movs	r2, #40	@ 0x28
 80111c2:	5c9b      	ldrb	r3, [r3, r2]
 80111c4:	001a      	movs	r2, r3
 80111c6:	f004 f9d7 	bl	8015578 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	2228      	movs	r2, #40	@ 0x28
 80111ce:	5c9b      	ldrb	r3, [r3, r2]
 80111d0:	0019      	movs	r1, r3
 80111d2:	193b      	adds	r3, r7, r4
 80111d4:	193a      	adds	r2, r7, r4
 80111d6:	8812      	ldrh	r2, [r2, #0]
 80111d8:	188a      	adds	r2, r1, r2
 80111da:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681a      	ldr	r2, [r3, #0]
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	791b      	ldrb	r3, [r3, #4]
 80111e4:	3b04      	subs	r3, #4
 80111e6:	18d3      	adds	r3, r2, r3
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	001a      	movs	r2, r3
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	6819      	ldr	r1, [r3, #0]
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	791b      	ldrb	r3, [r3, #4]
 80111fc:	3b03      	subs	r3, #3
 80111fe:	18cb      	adds	r3, r1, r3
 8011200:	781b      	ldrb	r3, [r3, #0]
 8011202:	021b      	lsls	r3, r3, #8
 8011204:	431a      	orrs	r2, r3
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	6819      	ldr	r1, [r3, #0]
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	791b      	ldrb	r3, [r3, #4]
 8011216:	3b02      	subs	r3, #2
 8011218:	18cb      	adds	r3, r1, r3
 801121a:	781b      	ldrb	r3, [r3, #0]
 801121c:	041b      	lsls	r3, r3, #16
 801121e:	431a      	orrs	r2, r3
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	6819      	ldr	r1, [r3, #0]
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	791b      	ldrb	r3, [r3, #4]
 8011230:	3b01      	subs	r3, #1
 8011232:	18cb      	adds	r3, r1, r3
 8011234:	781b      	ldrb	r3, [r3, #0]
 8011236:	061b      	lsls	r3, r3, #24
 8011238:	431a      	orrs	r2, r3
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 801123e:	2300      	movs	r3, #0
}
 8011240:	0018      	movs	r0, r3
 8011242:	46bd      	mov	sp, r7
 8011244:	b005      	add	sp, #20
 8011246:	bd90      	pop	{r4, r7, pc}

08011248 <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8011248:	b5b0      	push	{r4, r5, r7, lr}
 801124a:	b084      	sub	sp, #16
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d003      	beq.n	801125e <LoRaMacSerializerJoinRequest+0x16>
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d101      	bne.n	8011262 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801125e:	2301      	movs	r3, #1
 8011260:	e089      	b.n	8011376 <LoRaMacSerializerJoinRequest+0x12e>
    }

    uint16_t bufItr = 0;
 8011262:	230e      	movs	r3, #14
 8011264:	18fb      	adds	r3, r7, r3
 8011266:	2200      	movs	r2, #0
 8011268:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	791b      	ldrb	r3, [r3, #4]
 801126e:	2b16      	cmp	r3, #22
 8011270:	d801      	bhi.n	8011276 <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8011272:	2302      	movs	r3, #2
 8011274:	e07f      	b.n	8011376 <LoRaMacSerializerJoinRequest+0x12e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681a      	ldr	r2, [r3, #0]
 801127a:	240e      	movs	r4, #14
 801127c:	193b      	adds	r3, r7, r4
 801127e:	881b      	ldrh	r3, [r3, #0]
 8011280:	1939      	adds	r1, r7, r4
 8011282:	1c58      	adds	r0, r3, #1
 8011284:	8008      	strh	r0, [r1, #0]
 8011286:	18d3      	adds	r3, r2, r3
 8011288:	687a      	ldr	r2, [r7, #4]
 801128a:	7952      	ldrb	r2, [r2, #5]
 801128c:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	681a      	ldr	r2, [r3, #0]
 8011292:	193b      	adds	r3, r7, r4
 8011294:	881b      	ldrh	r3, [r3, #0]
 8011296:	18d0      	adds	r0, r2, r3
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	3306      	adds	r3, #6
 801129c:	2208      	movs	r2, #8
 801129e:	0019      	movs	r1, r3
 80112a0:	f004 f986 	bl	80155b0 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80112a4:	193b      	adds	r3, r7, r4
 80112a6:	193a      	adds	r2, r7, r4
 80112a8:	8812      	ldrh	r2, [r2, #0]
 80112aa:	3208      	adds	r2, #8
 80112ac:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681a      	ldr	r2, [r3, #0]
 80112b2:	193b      	adds	r3, r7, r4
 80112b4:	881b      	ldrh	r3, [r3, #0]
 80112b6:	18d0      	adds	r0, r2, r3
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	330e      	adds	r3, #14
 80112bc:	2208      	movs	r2, #8
 80112be:	0019      	movs	r1, r3
 80112c0:	f004 f976 	bl	80155b0 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80112c4:	193b      	adds	r3, r7, r4
 80112c6:	0025      	movs	r5, r4
 80112c8:	193a      	adds	r2, r7, r4
 80112ca:	8812      	ldrh	r2, [r2, #0]
 80112cc:	3208      	adds	r2, #8
 80112ce:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	8ad8      	ldrh	r0, [r3, #22]
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681a      	ldr	r2, [r3, #0]
 80112d8:	197b      	adds	r3, r7, r5
 80112da:	881b      	ldrh	r3, [r3, #0]
 80112dc:	1979      	adds	r1, r7, r5
 80112de:	1c5c      	adds	r4, r3, #1
 80112e0:	800c      	strh	r4, [r1, #0]
 80112e2:	18d3      	adds	r3, r2, r3
 80112e4:	b2c2      	uxtb	r2, r0
 80112e6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	8adb      	ldrh	r3, [r3, #22]
 80112ec:	0a1b      	lsrs	r3, r3, #8
 80112ee:	b298      	uxth	r0, r3
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681a      	ldr	r2, [r3, #0]
 80112f4:	197b      	adds	r3, r7, r5
 80112f6:	881b      	ldrh	r3, [r3, #0]
 80112f8:	1979      	adds	r1, r7, r5
 80112fa:	1c5c      	adds	r4, r3, #1
 80112fc:	800c      	strh	r4, [r1, #0]
 80112fe:	18d3      	adds	r3, r2, r3
 8011300:	b2c2      	uxtb	r2, r0
 8011302:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6998      	ldr	r0, [r3, #24]
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681a      	ldr	r2, [r3, #0]
 801130c:	197b      	adds	r3, r7, r5
 801130e:	881b      	ldrh	r3, [r3, #0]
 8011310:	1979      	adds	r1, r7, r5
 8011312:	1c5c      	adds	r4, r3, #1
 8011314:	800c      	strh	r4, [r1, #0]
 8011316:	18d3      	adds	r3, r2, r3
 8011318:	b2c2      	uxtb	r2, r0
 801131a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	699b      	ldr	r3, [r3, #24]
 8011320:	0a18      	lsrs	r0, r3, #8
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	681a      	ldr	r2, [r3, #0]
 8011326:	197b      	adds	r3, r7, r5
 8011328:	881b      	ldrh	r3, [r3, #0]
 801132a:	1979      	adds	r1, r7, r5
 801132c:	1c5c      	adds	r4, r3, #1
 801132e:	800c      	strh	r4, [r1, #0]
 8011330:	18d3      	adds	r3, r2, r3
 8011332:	b2c2      	uxtb	r2, r0
 8011334:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	699b      	ldr	r3, [r3, #24]
 801133a:	0c18      	lsrs	r0, r3, #16
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681a      	ldr	r2, [r3, #0]
 8011340:	197b      	adds	r3, r7, r5
 8011342:	881b      	ldrh	r3, [r3, #0]
 8011344:	1979      	adds	r1, r7, r5
 8011346:	1c5c      	adds	r4, r3, #1
 8011348:	800c      	strh	r4, [r1, #0]
 801134a:	18d3      	adds	r3, r2, r3
 801134c:	b2c2      	uxtb	r2, r0
 801134e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	699b      	ldr	r3, [r3, #24]
 8011354:	0e18      	lsrs	r0, r3, #24
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	681a      	ldr	r2, [r3, #0]
 801135a:	197b      	adds	r3, r7, r5
 801135c:	881b      	ldrh	r3, [r3, #0]
 801135e:	1979      	adds	r1, r7, r5
 8011360:	1c5c      	adds	r4, r3, #1
 8011362:	800c      	strh	r4, [r1, #0]
 8011364:	18d3      	adds	r3, r2, r3
 8011366:	b2c2      	uxtb	r2, r0
 8011368:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801136a:	197b      	adds	r3, r7, r5
 801136c:	881b      	ldrh	r3, [r3, #0]
 801136e:	b2da      	uxtb	r2, r3
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8011374:	2300      	movs	r3, #0
}
 8011376:	0018      	movs	r0, r3
 8011378:	46bd      	mov	sp, r7
 801137a:	b004      	add	sp, #16
 801137c:	bdb0      	pop	{r4, r5, r7, pc}

0801137e <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 801137e:	b5b0      	push	{r4, r5, r7, lr}
 8011380:	b084      	sub	sp, #16
 8011382:	af00      	add	r7, sp, #0
 8011384:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d003      	beq.n	8011394 <LoRaMacSerializerData+0x16>
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d101      	bne.n	8011398 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8011394:	2301      	movs	r3, #1
 8011396:	e117      	b.n	80115c8 <LoRaMacSerializerData+0x24a>
    }

    uint16_t bufItr = 0;
 8011398:	230e      	movs	r3, #14
 801139a:	18fb      	adds	r3, r7, r3
 801139c:	2200      	movs	r2, #0
 801139e:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80113a0:	200c      	movs	r0, #12
 80113a2:	183b      	adds	r3, r7, r0
 80113a4:	2208      	movs	r2, #8
 80113a6:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADD_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	7b1b      	ldrb	r3, [r3, #12]
 80113ac:	071b      	lsls	r3, r3, #28
 80113ae:	0f1b      	lsrs	r3, r3, #28
 80113b0:	b2db      	uxtb	r3, r3
 80113b2:	0019      	movs	r1, r3
 80113b4:	183b      	adds	r3, r7, r0
 80113b6:	183a      	adds	r2, r7, r0
 80113b8:	8812      	ldrh	r2, [r2, #0]
 80113ba:	188a      	adds	r2, r1, r2
 80113bc:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	2228      	movs	r2, #40	@ 0x28
 80113c2:	5c9b      	ldrb	r3, [r3, r2]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d004      	beq.n	80113d2 <LoRaMacSerializerData+0x54>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80113c8:	183b      	adds	r3, r7, r0
 80113ca:	183a      	adds	r2, r7, r0
 80113cc:	8812      	ldrh	r2, [r2, #0]
 80113ce:	3201      	adds	r2, #1
 80113d0:	801a      	strh	r2, [r3, #0]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	2228      	movs	r2, #40	@ 0x28
 80113d6:	5c9b      	ldrb	r3, [r3, r2]
 80113d8:	0019      	movs	r1, r3
 80113da:	200c      	movs	r0, #12
 80113dc:	183b      	adds	r3, r7, r0
 80113de:	183a      	adds	r2, r7, r0
 80113e0:	8812      	ldrh	r2, [r2, #0]
 80113e2:	188a      	adds	r2, r1, r2
 80113e4:	801a      	strh	r2, [r3, #0]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80113e6:	0001      	movs	r1, r0
 80113e8:	187b      	adds	r3, r7, r1
 80113ea:	187a      	adds	r2, r7, r1
 80113ec:	8812      	ldrh	r2, [r2, #0]
 80113ee:	3204      	adds	r2, #4
 80113f0:	801a      	strh	r2, [r3, #0]

    if( macMsg->BufSize < computedBufSize )
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	791b      	ldrb	r3, [r3, #4]
 80113f6:	001a      	movs	r2, r3
 80113f8:	187b      	adds	r3, r7, r1
 80113fa:	881b      	ldrh	r3, [r3, #0]
 80113fc:	4293      	cmp	r3, r2
 80113fe:	d901      	bls.n	8011404 <LoRaMacSerializerData+0x86>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8011400:	2302      	movs	r3, #2
 8011402:	e0e1      	b.n	80115c8 <LoRaMacSerializerData+0x24a>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	681a      	ldr	r2, [r3, #0]
 8011408:	250e      	movs	r5, #14
 801140a:	197b      	adds	r3, r7, r5
 801140c:	881b      	ldrh	r3, [r3, #0]
 801140e:	1979      	adds	r1, r7, r5
 8011410:	1c58      	adds	r0, r3, #1
 8011412:	8008      	strh	r0, [r1, #0]
 8011414:	18d3      	adds	r3, r2, r3
 8011416:	687a      	ldr	r2, [r7, #4]
 8011418:	7952      	ldrb	r2, [r2, #5]
 801141a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	6898      	ldr	r0, [r3, #8]
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681a      	ldr	r2, [r3, #0]
 8011424:	197b      	adds	r3, r7, r5
 8011426:	881b      	ldrh	r3, [r3, #0]
 8011428:	1979      	adds	r1, r7, r5
 801142a:	1c5c      	adds	r4, r3, #1
 801142c:	800c      	strh	r4, [r1, #0]
 801142e:	18d3      	adds	r3, r2, r3
 8011430:	b2c2      	uxtb	r2, r0
 8011432:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	689b      	ldr	r3, [r3, #8]
 8011438:	0a18      	lsrs	r0, r3, #8
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681a      	ldr	r2, [r3, #0]
 801143e:	197b      	adds	r3, r7, r5
 8011440:	881b      	ldrh	r3, [r3, #0]
 8011442:	1979      	adds	r1, r7, r5
 8011444:	1c5c      	adds	r4, r3, #1
 8011446:	800c      	strh	r4, [r1, #0]
 8011448:	18d3      	adds	r3, r2, r3
 801144a:	b2c2      	uxtb	r2, r0
 801144c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	689b      	ldr	r3, [r3, #8]
 8011452:	0c18      	lsrs	r0, r3, #16
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	681a      	ldr	r2, [r3, #0]
 8011458:	197b      	adds	r3, r7, r5
 801145a:	881b      	ldrh	r3, [r3, #0]
 801145c:	1979      	adds	r1, r7, r5
 801145e:	1c5c      	adds	r4, r3, #1
 8011460:	800c      	strh	r4, [r1, #0]
 8011462:	18d3      	adds	r3, r2, r3
 8011464:	b2c2      	uxtb	r2, r0
 8011466:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	689b      	ldr	r3, [r3, #8]
 801146c:	0e18      	lsrs	r0, r3, #24
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	681a      	ldr	r2, [r3, #0]
 8011472:	197b      	adds	r3, r7, r5
 8011474:	881b      	ldrh	r3, [r3, #0]
 8011476:	1979      	adds	r1, r7, r5
 8011478:	1c5c      	adds	r4, r3, #1
 801147a:	800c      	strh	r4, [r1, #0]
 801147c:	18d3      	adds	r3, r2, r3
 801147e:	b2c2      	uxtb	r2, r0
 8011480:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	681a      	ldr	r2, [r3, #0]
 8011486:	197b      	adds	r3, r7, r5
 8011488:	881b      	ldrh	r3, [r3, #0]
 801148a:	1979      	adds	r1, r7, r5
 801148c:	1c58      	adds	r0, r3, #1
 801148e:	8008      	strh	r0, [r1, #0]
 8011490:	18d3      	adds	r3, r2, r3
 8011492:	687a      	ldr	r2, [r7, #4]
 8011494:	7b12      	ldrb	r2, [r2, #12]
 8011496:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	89d8      	ldrh	r0, [r3, #14]
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681a      	ldr	r2, [r3, #0]
 80114a0:	197b      	adds	r3, r7, r5
 80114a2:	881b      	ldrh	r3, [r3, #0]
 80114a4:	1979      	adds	r1, r7, r5
 80114a6:	1c5c      	adds	r4, r3, #1
 80114a8:	800c      	strh	r4, [r1, #0]
 80114aa:	18d3      	adds	r3, r2, r3
 80114ac:	b2c2      	uxtb	r2, r0
 80114ae:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	89db      	ldrh	r3, [r3, #14]
 80114b4:	0a1b      	lsrs	r3, r3, #8
 80114b6:	b298      	uxth	r0, r3
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681a      	ldr	r2, [r3, #0]
 80114bc:	197b      	adds	r3, r7, r5
 80114be:	881b      	ldrh	r3, [r3, #0]
 80114c0:	1979      	adds	r1, r7, r5
 80114c2:	1c5c      	adds	r4, r3, #1
 80114c4:	800c      	strh	r4, [r1, #0]
 80114c6:	18d3      	adds	r3, r2, r3
 80114c8:	b2c2      	uxtb	r2, r0
 80114ca:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	681a      	ldr	r2, [r3, #0]
 80114d0:	002c      	movs	r4, r5
 80114d2:	197b      	adds	r3, r7, r5
 80114d4:	881b      	ldrh	r3, [r3, #0]
 80114d6:	18d0      	adds	r0, r2, r3
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	3310      	adds	r3, #16
 80114dc:	0019      	movs	r1, r3
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	7b1b      	ldrb	r3, [r3, #12]
 80114e2:	071b      	lsls	r3, r3, #28
 80114e4:	0f1b      	lsrs	r3, r3, #28
 80114e6:	b2db      	uxtb	r3, r3
 80114e8:	001a      	movs	r2, r3
 80114ea:	f004 f845 	bl	8015578 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	7b1b      	ldrb	r3, [r3, #12]
 80114f2:	071b      	lsls	r3, r3, #28
 80114f4:	0f1b      	lsrs	r3, r3, #28
 80114f6:	b2db      	uxtb	r3, r3
 80114f8:	0019      	movs	r1, r3
 80114fa:	193b      	adds	r3, r7, r4
 80114fc:	193a      	adds	r2, r7, r4
 80114fe:	8812      	ldrh	r2, [r2, #0]
 8011500:	188a      	adds	r2, r1, r2
 8011502:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	2228      	movs	r2, #40	@ 0x28
 8011508:	5c9b      	ldrb	r3, [r3, r2]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d00b      	beq.n	8011526 <LoRaMacSerializerData+0x1a8>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	681a      	ldr	r2, [r3, #0]
 8011512:	193b      	adds	r3, r7, r4
 8011514:	881b      	ldrh	r3, [r3, #0]
 8011516:	1939      	adds	r1, r7, r4
 8011518:	1c58      	adds	r0, r3, #1
 801151a:	8008      	strh	r0, [r1, #0]
 801151c:	18d3      	adds	r3, r2, r3
 801151e:	687a      	ldr	r2, [r7, #4]
 8011520:	2120      	movs	r1, #32
 8011522:	5c52      	ldrb	r2, [r2, r1]
 8011524:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	681a      	ldr	r2, [r3, #0]
 801152a:	240e      	movs	r4, #14
 801152c:	193b      	adds	r3, r7, r4
 801152e:	881b      	ldrh	r3, [r3, #0]
 8011530:	18d0      	adds	r0, r2, r3
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	2228      	movs	r2, #40	@ 0x28
 801153a:	5c9b      	ldrb	r3, [r3, r2]
 801153c:	001a      	movs	r2, r3
 801153e:	f004 f81b 	bl	8015578 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	2228      	movs	r2, #40	@ 0x28
 8011546:	5c9b      	ldrb	r3, [r3, r2]
 8011548:	0019      	movs	r1, r3
 801154a:	193b      	adds	r3, r7, r4
 801154c:	193a      	adds	r2, r7, r4
 801154e:	8812      	ldrh	r2, [r2, #0]
 8011550:	188a      	adds	r2, r1, r2
 8011552:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681a      	ldr	r2, [r3, #0]
 801155c:	193b      	adds	r3, r7, r4
 801155e:	881b      	ldrh	r3, [r3, #0]
 8011560:	0025      	movs	r5, r4
 8011562:	1939      	adds	r1, r7, r4
 8011564:	1c5c      	adds	r4, r3, #1
 8011566:	800c      	strh	r4, [r1, #0]
 8011568:	18d3      	adds	r3, r2, r3
 801156a:	b2c2      	uxtb	r2, r0
 801156c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011572:	0a18      	lsrs	r0, r3, #8
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	681a      	ldr	r2, [r3, #0]
 8011578:	197b      	adds	r3, r7, r5
 801157a:	881b      	ldrh	r3, [r3, #0]
 801157c:	1979      	adds	r1, r7, r5
 801157e:	1c5c      	adds	r4, r3, #1
 8011580:	800c      	strh	r4, [r1, #0]
 8011582:	18d3      	adds	r3, r2, r3
 8011584:	b2c2      	uxtb	r2, r0
 8011586:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801158c:	0c18      	lsrs	r0, r3, #16
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681a      	ldr	r2, [r3, #0]
 8011592:	197b      	adds	r3, r7, r5
 8011594:	881b      	ldrh	r3, [r3, #0]
 8011596:	1979      	adds	r1, r7, r5
 8011598:	1c5c      	adds	r4, r3, #1
 801159a:	800c      	strh	r4, [r1, #0]
 801159c:	18d3      	adds	r3, r2, r3
 801159e:	b2c2      	uxtb	r2, r0
 80115a0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115a6:	0e18      	lsrs	r0, r3, #24
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681a      	ldr	r2, [r3, #0]
 80115ac:	197b      	adds	r3, r7, r5
 80115ae:	881b      	ldrh	r3, [r3, #0]
 80115b0:	1979      	adds	r1, r7, r5
 80115b2:	1c5c      	adds	r4, r3, #1
 80115b4:	800c      	strh	r4, [r1, #0]
 80115b6:	18d3      	adds	r3, r2, r3
 80115b8:	b2c2      	uxtb	r2, r0
 80115ba:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80115bc:	197b      	adds	r3, r7, r5
 80115be:	881b      	ldrh	r3, [r3, #0]
 80115c0:	b2da      	uxtb	r2, r3
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80115c6:	2300      	movs	r3, #0
}
 80115c8:	0018      	movs	r0, r3
 80115ca:	46bd      	mov	sp, r7
 80115cc:	b004      	add	sp, #16
 80115ce:	bdb0      	pop	{r4, r5, r7, pc}

080115d0 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b082      	sub	sp, #8
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	0002      	movs	r2, r0
 80115d8:	1dfb      	adds	r3, r7, #7
 80115da:	701a      	strb	r2, [r3, #0]
    switch( region )
 80115dc:	1dfb      	adds	r3, r7, #7
 80115de:	781b      	ldrb	r3, [r3, #0]
 80115e0:	2b07      	cmp	r3, #7
 80115e2:	d101      	bne.n	80115e8 <RegionIsActive+0x18>
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
 80115e4:	2301      	movs	r3, #1
 80115e6:	e000      	b.n	80115ea <RegionIsActive+0x1a>
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80115e8:	2300      	movs	r3, #0
        }
    }
}
 80115ea:	0018      	movs	r0, r3
 80115ec:	46bd      	mov	sp, r7
 80115ee:	b002      	add	sp, #8
 80115f0:	bd80      	pop	{r7, pc}

080115f2 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80115f2:	b580      	push	{r7, lr}
 80115f4:	b084      	sub	sp, #16
 80115f6:	af00      	add	r7, sp, #0
 80115f8:	0002      	movs	r2, r0
 80115fa:	6039      	str	r1, [r7, #0]
 80115fc:	1dfb      	adds	r3, r7, #7
 80115fe:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
 8011600:	2308      	movs	r3, #8
 8011602:	18fb      	adds	r3, r7, r3
 8011604:	2200      	movs	r2, #0
 8011606:	601a      	str	r2, [r3, #0]
    switch( region )
 8011608:	1dfb      	adds	r3, r7, #7
 801160a:	781b      	ldrb	r3, [r3, #0]
 801160c:	2b07      	cmp	r3, #7
 801160e:	d109      	bne.n	8011624 <RegionGetPhyParam+0x32>
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	0018      	movs	r0, r3
 8011614:	f001 f8b8 	bl	8012788 <RegionIN865GetPhyParam>
 8011618:	0003      	movs	r3, r0
 801161a:	001a      	movs	r2, r3
 801161c:	230c      	movs	r3, #12
 801161e:	18fb      	adds	r3, r7, r3
 8011620:	601a      	str	r2, [r3, #0]
 8011622:	e005      	b.n	8011630 <RegionGetPhyParam+0x3e>
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8011624:	230c      	movs	r3, #12
 8011626:	18fb      	adds	r3, r7, r3
 8011628:	2208      	movs	r2, #8
 801162a:	18ba      	adds	r2, r7, r2
 801162c:	6812      	ldr	r2, [r2, #0]
 801162e:	601a      	str	r2, [r3, #0]
        }
    }
}
 8011630:	230c      	movs	r3, #12
 8011632:	18fb      	adds	r3, r7, r3
 8011634:	681a      	ldr	r2, [r3, #0]
 8011636:	0013      	movs	r3, r2
 8011638:	0018      	movs	r0, r3
 801163a:	46bd      	mov	sp, r7
 801163c:	b004      	add	sp, #16
 801163e:	bd80      	pop	{r7, pc}

08011640 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8011640:	b580      	push	{r7, lr}
 8011642:	b082      	sub	sp, #8
 8011644:	af00      	add	r7, sp, #0
 8011646:	0002      	movs	r2, r0
 8011648:	6039      	str	r1, [r7, #0]
 801164a:	1dfb      	adds	r3, r7, #7
 801164c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801164e:	1dfb      	adds	r3, r7, #7
 8011650:	781b      	ldrb	r3, [r3, #0]
 8011652:	2b07      	cmp	r3, #7
 8011654:	d104      	bne.n	8011660 <RegionSetBandTxDone+0x20>
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
        KR920_SET_BAND_TX_DONE( );
        IN865_SET_BAND_TX_DONE( );
 8011656:	683b      	ldr	r3, [r7, #0]
 8011658:	0018      	movs	r0, r3
 801165a:	f001 f999 	bl	8012990 <RegionIN865SetBandTxDone>
 801165e:	e000      	b.n	8011662 <RegionSetBandTxDone+0x22>
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8011660:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 8011662:	46bd      	mov	sp, r7
 8011664:	b002      	add	sp, #8
 8011666:	bd80      	pop	{r7, pc}

08011668 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b082      	sub	sp, #8
 801166c:	af00      	add	r7, sp, #0
 801166e:	0002      	movs	r2, r0
 8011670:	6039      	str	r1, [r7, #0]
 8011672:	1dfb      	adds	r3, r7, #7
 8011674:	701a      	strb	r2, [r3, #0]
    switch( region )
 8011676:	1dfb      	adds	r3, r7, #7
 8011678:	781b      	ldrb	r3, [r3, #0]
 801167a:	2b07      	cmp	r3, #7
 801167c:	d104      	bne.n	8011688 <RegionInitDefaults+0x20>
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
        KR920_INIT_DEFAULTS( );
        IN865_INIT_DEFAULTS( );
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	0018      	movs	r0, r3
 8011682:	f001 f9a5 	bl	80129d0 <RegionIN865InitDefaults>
 8011686:	e000      	b.n	801168a <RegionInitDefaults+0x22>
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8011688:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 801168a:	46c0      	nop			@ (mov r8, r8)
 801168c:	46bd      	mov	sp, r7
 801168e:	b002      	add	sp, #8
 8011690:	bd80      	pop	{r7, pc}

08011692 <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 8011692:	b580      	push	{r7, lr}
 8011694:	b082      	sub	sp, #8
 8011696:	af00      	add	r7, sp, #0
 8011698:	0002      	movs	r2, r0
 801169a:	6039      	str	r1, [r7, #0]
 801169c:	1dfb      	adds	r3, r7, #7
 801169e:	701a      	strb	r2, [r3, #0]
    switch( region )
 80116a0:	1dfb      	adds	r3, r7, #7
 80116a2:	781b      	ldrb	r3, [r3, #0]
 80116a4:	2b07      	cmp	r3, #7
 80116a6:	d105      	bne.n	80116b4 <RegionGetNvmCtx+0x22>
        CN470_GET_NVM_CTX( );
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
        KR920_GET_NVM_CTX( );
        IN865_GET_NVM_CTX( );
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	0018      	movs	r0, r3
 80116ac:	f001 fa0a 	bl	8012ac4 <RegionIN865GetNvmCtx>
 80116b0:	0003      	movs	r3, r0
 80116b2:	e000      	b.n	80116b6 <RegionGetNvmCtx+0x24>
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 80116b4:	2300      	movs	r3, #0
        }
    }
}
 80116b6:	0018      	movs	r0, r3
 80116b8:	46bd      	mov	sp, r7
 80116ba:	b002      	add	sp, #8
 80116bc:	bd80      	pop	{r7, pc}

080116be <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80116be:	b580      	push	{r7, lr}
 80116c0:	b082      	sub	sp, #8
 80116c2:	af00      	add	r7, sp, #0
 80116c4:	6039      	str	r1, [r7, #0]
 80116c6:	0011      	movs	r1, r2
 80116c8:	1dfb      	adds	r3, r7, #7
 80116ca:	1c02      	adds	r2, r0, #0
 80116cc:	701a      	strb	r2, [r3, #0]
 80116ce:	1dbb      	adds	r3, r7, #6
 80116d0:	1c0a      	adds	r2, r1, #0
 80116d2:	701a      	strb	r2, [r3, #0]
    switch( region )
 80116d4:	1dfb      	adds	r3, r7, #7
 80116d6:	781b      	ldrb	r3, [r3, #0]
 80116d8:	2b07      	cmp	r3, #7
 80116da:	d108      	bne.n	80116ee <RegionVerify+0x30>
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
        KR920_VERIFY( );
        IN865_VERIFY( );
 80116dc:	1dbb      	adds	r3, r7, #6
 80116de:	781a      	ldrb	r2, [r3, #0]
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	0011      	movs	r1, r2
 80116e4:	0018      	movs	r0, r3
 80116e6:	f001 f9fb 	bl	8012ae0 <RegionIN865Verify>
 80116ea:	0003      	movs	r3, r0
 80116ec:	e000      	b.n	80116f0 <RegionVerify+0x32>
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 80116ee:	2300      	movs	r3, #0
        }
    }
}
 80116f0:	0018      	movs	r0, r3
 80116f2:	46bd      	mov	sp, r7
 80116f4:	b002      	add	sp, #8
 80116f6:	bd80      	pop	{r7, pc}

080116f8 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b082      	sub	sp, #8
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	0002      	movs	r2, r0
 8011700:	6039      	str	r1, [r7, #0]
 8011702:	1dfb      	adds	r3, r7, #7
 8011704:	701a      	strb	r2, [r3, #0]
    switch( region )
 8011706:	1dfb      	adds	r3, r7, #7
 8011708:	781b      	ldrb	r3, [r3, #0]
 801170a:	2b07      	cmp	r3, #7
 801170c:	d104      	bne.n	8011718 <RegionApplyCFList+0x20>
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
        KR920_APPLY_CF_LIST( );
        IN865_APPLY_CF_LIST( );
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	0018      	movs	r0, r3
 8011712:	f001 fa47 	bl	8012ba4 <RegionIN865ApplyCFList>
 8011716:	e000      	b.n	801171a <RegionApplyCFList+0x22>
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8011718:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 801171a:	46c0      	nop			@ (mov r8, r8)
 801171c:	46bd      	mov	sp, r7
 801171e:	b002      	add	sp, #8
 8011720:	bd80      	pop	{r7, pc}

08011722 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8011722:	b580      	push	{r7, lr}
 8011724:	b082      	sub	sp, #8
 8011726:	af00      	add	r7, sp, #0
 8011728:	0002      	movs	r2, r0
 801172a:	6039      	str	r1, [r7, #0]
 801172c:	1dfb      	adds	r3, r7, #7
 801172e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8011730:	1dfb      	adds	r3, r7, #7
 8011732:	781b      	ldrb	r3, [r3, #0]
 8011734:	2b07      	cmp	r3, #7
 8011736:	d105      	bne.n	8011744 <RegionChanMaskSet+0x22>
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	0018      	movs	r0, r3
 801173c:	f001 fac2 	bl	8012cc4 <RegionIN865ChanMaskSet>
 8011740:	0003      	movs	r3, r0
 8011742:	e000      	b.n	8011746 <RegionChanMaskSet+0x24>
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8011744:	2300      	movs	r3, #0
        }
    }
}
 8011746:	0018      	movs	r0, r3
 8011748:	46bd      	mov	sp, r7
 801174a:	b002      	add	sp, #8
 801174c:	bd80      	pop	{r7, pc}

0801174e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801174e:	b590      	push	{r4, r7, lr}
 8011750:	b083      	sub	sp, #12
 8011752:	af00      	add	r7, sp, #0
 8011754:	0004      	movs	r4, r0
 8011756:	0008      	movs	r0, r1
 8011758:	0011      	movs	r1, r2
 801175a:	603b      	str	r3, [r7, #0]
 801175c:	1dfb      	adds	r3, r7, #7
 801175e:	1c22      	adds	r2, r4, #0
 8011760:	701a      	strb	r2, [r3, #0]
 8011762:	1dbb      	adds	r3, r7, #6
 8011764:	1c02      	adds	r2, r0, #0
 8011766:	701a      	strb	r2, [r3, #0]
 8011768:	1d7b      	adds	r3, r7, #5
 801176a:	1c0a      	adds	r2, r1, #0
 801176c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801176e:	1dfb      	adds	r3, r7, #7
 8011770:	781b      	ldrb	r3, [r3, #0]
 8011772:	2b07      	cmp	r3, #7
 8011774:	d10a      	bne.n	801178c <RegionComputeRxWindowParameters+0x3e>
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
        KR920_COMPUTE_RX_WINDOW_PARAMETERS( );
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
 8011776:	69bc      	ldr	r4, [r7, #24]
 8011778:	683a      	ldr	r2, [r7, #0]
 801177a:	1d7b      	adds	r3, r7, #5
 801177c:	7819      	ldrb	r1, [r3, #0]
 801177e:	1dbb      	adds	r3, r7, #6
 8011780:	2000      	movs	r0, #0
 8011782:	5618      	ldrsb	r0, [r3, r0]
 8011784:	0023      	movs	r3, r4
 8011786:	f001 fac3 	bl	8012d10 <RegionIN865ComputeRxWindowParameters>
 801178a:	e000      	b.n	801178e <RegionComputeRxWindowParameters+0x40>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 801178c:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 801178e:	46c0      	nop			@ (mov r8, r8)
 8011790:	46bd      	mov	sp, r7
 8011792:	b003      	add	sp, #12
 8011794:	bd90      	pop	{r4, r7, pc}

08011796 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8011796:	b580      	push	{r7, lr}
 8011798:	b084      	sub	sp, #16
 801179a:	af00      	add	r7, sp, #0
 801179c:	60b9      	str	r1, [r7, #8]
 801179e:	607a      	str	r2, [r7, #4]
 80117a0:	210f      	movs	r1, #15
 80117a2:	187b      	adds	r3, r7, r1
 80117a4:	1c02      	adds	r2, r0, #0
 80117a6:	701a      	strb	r2, [r3, #0]
    switch( region )
 80117a8:	187b      	adds	r3, r7, r1
 80117aa:	781b      	ldrb	r3, [r3, #0]
 80117ac:	2b07      	cmp	r3, #7
 80117ae:	d107      	bne.n	80117c0 <RegionRxConfig+0x2a>
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
 80117b0:	687a      	ldr	r2, [r7, #4]
 80117b2:	68bb      	ldr	r3, [r7, #8]
 80117b4:	0011      	movs	r1, r2
 80117b6:	0018      	movs	r0, r3
 80117b8:	f001 fb14 	bl	8012de4 <RegionIN865RxConfig>
 80117bc:	0003      	movs	r3, r0
 80117be:	e000      	b.n	80117c2 <RegionRxConfig+0x2c>
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80117c0:	2300      	movs	r3, #0
        }
    }
}
 80117c2:	0018      	movs	r0, r3
 80117c4:	46bd      	mov	sp, r7
 80117c6:	b004      	add	sp, #16
 80117c8:	bd80      	pop	{r7, pc}

080117ca <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80117ca:	b580      	push	{r7, lr}
 80117cc:	b084      	sub	sp, #16
 80117ce:	af00      	add	r7, sp, #0
 80117d0:	60b9      	str	r1, [r7, #8]
 80117d2:	607a      	str	r2, [r7, #4]
 80117d4:	603b      	str	r3, [r7, #0]
 80117d6:	210f      	movs	r1, #15
 80117d8:	187b      	adds	r3, r7, r1
 80117da:	1c02      	adds	r2, r0, #0
 80117dc:	701a      	strb	r2, [r3, #0]
    switch( region )
 80117de:	187b      	adds	r3, r7, r1
 80117e0:	781b      	ldrb	r3, [r3, #0]
 80117e2:	2b07      	cmp	r3, #7
 80117e4:	d107      	bne.n	80117f6 <RegionTxConfig+0x2c>
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
 80117e6:	683a      	ldr	r2, [r7, #0]
 80117e8:	6879      	ldr	r1, [r7, #4]
 80117ea:	68bb      	ldr	r3, [r7, #8]
 80117ec:	0018      	movs	r0, r3
 80117ee:	f001 fbe3 	bl	8012fb8 <RegionIN865TxConfig>
 80117f2:	0003      	movs	r3, r0
 80117f4:	e000      	b.n	80117f8 <RegionTxConfig+0x2e>
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 80117f6:	2300      	movs	r3, #0
        }
    }
}
 80117f8:	0018      	movs	r0, r3
 80117fa:	46bd      	mov	sp, r7
 80117fc:	b004      	add	sp, #16
 80117fe:	bd80      	pop	{r7, pc}

08011800 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8011800:	b590      	push	{r4, r7, lr}
 8011802:	b087      	sub	sp, #28
 8011804:	af02      	add	r7, sp, #8
 8011806:	60b9      	str	r1, [r7, #8]
 8011808:	607a      	str	r2, [r7, #4]
 801180a:	603b      	str	r3, [r7, #0]
 801180c:	210f      	movs	r1, #15
 801180e:	187b      	adds	r3, r7, r1
 8011810:	1c02      	adds	r2, r0, #0
 8011812:	701a      	strb	r2, [r3, #0]
    switch( region )
 8011814:	187b      	adds	r3, r7, r1
 8011816:	781b      	ldrb	r3, [r3, #0]
 8011818:	2b07      	cmp	r3, #7
 801181a:	d10a      	bne.n	8011832 <RegionLinkAdrReq+0x32>
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
 801181c:	6a3c      	ldr	r4, [r7, #32]
 801181e:	683a      	ldr	r2, [r7, #0]
 8011820:	6879      	ldr	r1, [r7, #4]
 8011822:	68b8      	ldr	r0, [r7, #8]
 8011824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011826:	9300      	str	r3, [sp, #0]
 8011828:	0023      	movs	r3, r4
 801182a:	f001 fc9d 	bl	8013168 <RegionIN865LinkAdrReq>
 801182e:	0003      	movs	r3, r0
 8011830:	e000      	b.n	8011834 <RegionLinkAdrReq+0x34>
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8011832:	2300      	movs	r3, #0
        }
    }
}
 8011834:	0018      	movs	r0, r3
 8011836:	46bd      	mov	sp, r7
 8011838:	b005      	add	sp, #20
 801183a:	bd90      	pop	{r4, r7, pc}

0801183c <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b082      	sub	sp, #8
 8011840:	af00      	add	r7, sp, #0
 8011842:	0002      	movs	r2, r0
 8011844:	6039      	str	r1, [r7, #0]
 8011846:	1dfb      	adds	r3, r7, #7
 8011848:	701a      	strb	r2, [r3, #0]
    switch( region )
 801184a:	1dfb      	adds	r3, r7, #7
 801184c:	781b      	ldrb	r3, [r3, #0]
 801184e:	2b07      	cmp	r3, #7
 8011850:	d105      	bne.n	801185e <RegionRxParamSetupReq+0x22>
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	0018      	movs	r0, r3
 8011856:	f001 fde3 	bl	8013420 <RegionIN865RxParamSetupReq>
 801185a:	0003      	movs	r3, r0
 801185c:	e000      	b.n	8011860 <RegionRxParamSetupReq+0x24>
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801185e:	2300      	movs	r3, #0
        }
    }
}
 8011860:	0018      	movs	r0, r3
 8011862:	46bd      	mov	sp, r7
 8011864:	b002      	add	sp, #8
 8011866:	bd80      	pop	{r7, pc}

08011868 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b082      	sub	sp, #8
 801186c:	af00      	add	r7, sp, #0
 801186e:	0002      	movs	r2, r0
 8011870:	6039      	str	r1, [r7, #0]
 8011872:	1dfb      	adds	r3, r7, #7
 8011874:	701a      	strb	r2, [r3, #0]
    switch( region )
 8011876:	1dfb      	adds	r3, r7, #7
 8011878:	781b      	ldrb	r3, [r3, #0]
 801187a:	2b07      	cmp	r3, #7
 801187c:	d105      	bne.n	801188a <RegionNewChannelReq+0x22>
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	0018      	movs	r0, r3
 8011882:	f001 fe10 	bl	80134a6 <RegionIN865NewChannelReq>
 8011886:	0003      	movs	r3, r0
 8011888:	e000      	b.n	801188c <RegionNewChannelReq+0x24>
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 801188a:	2300      	movs	r3, #0
        }
    }
}
 801188c:	0018      	movs	r0, r3
 801188e:	46bd      	mov	sp, r7
 8011890:	b002      	add	sp, #8
 8011892:	bd80      	pop	{r7, pc}

08011894 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b082      	sub	sp, #8
 8011898:	af00      	add	r7, sp, #0
 801189a:	0002      	movs	r2, r0
 801189c:	6039      	str	r1, [r7, #0]
 801189e:	1dfb      	adds	r3, r7, #7
 80118a0:	701a      	strb	r2, [r3, #0]
    switch( region )
 80118a2:	1dfb      	adds	r3, r7, #7
 80118a4:	781b      	ldrb	r3, [r3, #0]
 80118a6:	2b07      	cmp	r3, #7
 80118a8:	d105      	bne.n	80118b6 <RegionTxParamSetupReq+0x22>
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	0018      	movs	r0, r3
 80118ae:	f001 fe62 	bl	8013576 <RegionIN865TxParamSetupReq>
 80118b2:	0003      	movs	r3, r0
 80118b4:	e000      	b.n	80118b8 <RegionTxParamSetupReq+0x24>
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80118b6:	2300      	movs	r3, #0
        }
    }
}
 80118b8:	0018      	movs	r0, r3
 80118ba:	46bd      	mov	sp, r7
 80118bc:	b002      	add	sp, #8
 80118be:	bd80      	pop	{r7, pc}

080118c0 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b082      	sub	sp, #8
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	0002      	movs	r2, r0
 80118c8:	6039      	str	r1, [r7, #0]
 80118ca:	1dfb      	adds	r3, r7, #7
 80118cc:	701a      	strb	r2, [r3, #0]
    switch( region )
 80118ce:	1dfb      	adds	r3, r7, #7
 80118d0:	781b      	ldrb	r3, [r3, #0]
 80118d2:	2b07      	cmp	r3, #7
 80118d4:	d105      	bne.n	80118e2 <RegionDlChannelReq+0x22>
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
 80118d6:	683b      	ldr	r3, [r7, #0]
 80118d8:	0018      	movs	r0, r3
 80118da:	f001 fe57 	bl	801358c <RegionIN865DlChannelReq>
 80118de:	0003      	movs	r3, r0
 80118e0:	e000      	b.n	80118e4 <RegionDlChannelReq+0x24>
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80118e2:	2300      	movs	r3, #0
        }
    }
}
 80118e4:	0018      	movs	r0, r3
 80118e6:	46bd      	mov	sp, r7
 80118e8:	b002      	add	sp, #8
 80118ea:	bd80      	pop	{r7, pc}

080118ec <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80118ec:	b590      	push	{r4, r7, lr}
 80118ee:	b083      	sub	sp, #12
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	0004      	movs	r4, r0
 80118f4:	0008      	movs	r0, r1
 80118f6:	0011      	movs	r1, r2
 80118f8:	1dfb      	adds	r3, r7, #7
 80118fa:	1c22      	adds	r2, r4, #0
 80118fc:	701a      	strb	r2, [r3, #0]
 80118fe:	1dbb      	adds	r3, r7, #6
 8011900:	1c02      	adds	r2, r0, #0
 8011902:	701a      	strb	r2, [r3, #0]
 8011904:	1d7b      	adds	r3, r7, #5
 8011906:	1c0a      	adds	r2, r1, #0
 8011908:	701a      	strb	r2, [r3, #0]
    switch( region )
 801190a:	1dfb      	adds	r3, r7, #7
 801190c:	781b      	ldrb	r3, [r3, #0]
 801190e:	2b07      	cmp	r3, #7
 8011910:	d10a      	bne.n	8011928 <RegionAlternateDr+0x3c>
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
 8011912:	1d7b      	adds	r3, r7, #5
 8011914:	781a      	ldrb	r2, [r3, #0]
 8011916:	1dbb      	adds	r3, r7, #6
 8011918:	781b      	ldrb	r3, [r3, #0]
 801191a:	b25b      	sxtb	r3, r3
 801191c:	0011      	movs	r1, r2
 801191e:	0018      	movs	r0, r3
 8011920:	f001 fe7c 	bl	801361c <RegionIN865AlternateDr>
 8011924:	0003      	movs	r3, r0
 8011926:	e000      	b.n	801192a <RegionAlternateDr+0x3e>
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8011928:	2300      	movs	r3, #0
        }
    }
}
 801192a:	0018      	movs	r0, r3
 801192c:	46bd      	mov	sp, r7
 801192e:	b003      	add	sp, #12
 8011930:	bd90      	pop	{r4, r7, pc}

08011932 <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
 8011932:	b580      	push	{r7, lr}
 8011934:	b082      	sub	sp, #8
 8011936:	af00      	add	r7, sp, #0
 8011938:	0002      	movs	r2, r0
 801193a:	6039      	str	r1, [r7, #0]
 801193c:	1dfb      	adds	r3, r7, #7
 801193e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8011940:	1dfb      	adds	r3, r7, #7
 8011942:	781b      	ldrb	r3, [r3, #0]
 8011944:	2b07      	cmp	r3, #7
 8011946:	d104      	bne.n	8011952 <RegionCalcBackOff+0x20>
        CN470_CALC_BACKOFF( );
        CN779_CALC_BACKOFF( );
        EU433_CALC_BACKOFF( );
        EU868_CALC_BACKOFF( );
        KR920_CALC_BACKOFF( );
        IN865_CALC_BACKOFF( );
 8011948:	683b      	ldr	r3, [r7, #0]
 801194a:	0018      	movs	r0, r3
 801194c:	f001 fe76 	bl	801363c <RegionIN865CalcBackOff>
 8011950:	e000      	b.n	8011954 <RegionCalcBackOff+0x22>
        US915_CALC_BACKOFF( );
        RU864_CALC_BACKOFF( );
        default:
        {
            break;
 8011952:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 8011954:	46c0      	nop			@ (mov r8, r8)
 8011956:	46bd      	mov	sp, r7
 8011958:	b002      	add	sp, #8
 801195a:	bd80      	pop	{r7, pc}

0801195c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b084      	sub	sp, #16
 8011960:	af00      	add	r7, sp, #0
 8011962:	60b9      	str	r1, [r7, #8]
 8011964:	607a      	str	r2, [r7, #4]
 8011966:	603b      	str	r3, [r7, #0]
 8011968:	210f      	movs	r1, #15
 801196a:	187b      	adds	r3, r7, r1
 801196c:	1c02      	adds	r2, r0, #0
 801196e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8011970:	187b      	adds	r3, r7, r1
 8011972:	781b      	ldrb	r3, [r3, #0]
 8011974:	2b07      	cmp	r3, #7
 8011976:	d107      	bne.n	8011988 <RegionNextChannel+0x2c>
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
 8011978:	69bb      	ldr	r3, [r7, #24]
 801197a:	683a      	ldr	r2, [r7, #0]
 801197c:	6879      	ldr	r1, [r7, #4]
 801197e:	68b8      	ldr	r0, [r7, #8]
 8011980:	f001 fe8c 	bl	801369c <RegionIN865NextChannel>
 8011984:	0003      	movs	r3, r0
 8011986:	e000      	b.n	801198a <RegionNextChannel+0x2e>
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8011988:	2309      	movs	r3, #9
        }
    }
}
 801198a:	0018      	movs	r0, r3
 801198c:	46bd      	mov	sp, r7
 801198e:	b004      	add	sp, #16
 8011990:	bd80      	pop	{r7, pc}

08011992 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8011992:	b580      	push	{r7, lr}
 8011994:	b082      	sub	sp, #8
 8011996:	af00      	add	r7, sp, #0
 8011998:	0002      	movs	r2, r0
 801199a:	6039      	str	r1, [r7, #0]
 801199c:	1dfb      	adds	r3, r7, #7
 801199e:	701a      	strb	r2, [r3, #0]
    switch( region )
 80119a0:	1dfb      	adds	r3, r7, #7
 80119a2:	781b      	ldrb	r3, [r3, #0]
 80119a4:	2b07      	cmp	r3, #7
 80119a6:	d104      	bne.n	80119b2 <RegionSetContinuousWave+0x20>
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
        KR920_SET_CONTINUOUS_WAVE( );
        IN865_SET_CONTINUOUS_WAVE( );
 80119a8:	683b      	ldr	r3, [r7, #0]
 80119aa:	0018      	movs	r0, r3
 80119ac:	f002 f802 	bl	80139b4 <RegionIN865SetContinuousWave>
 80119b0:	e000      	b.n	80119b4 <RegionSetContinuousWave+0x22>
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 80119b2:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 80119b4:	46c0      	nop			@ (mov r8, r8)
 80119b6:	46bd      	mov	sp, r7
 80119b8:	b002      	add	sp, #8
 80119ba:	bd80      	pop	{r7, pc}

080119bc <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80119bc:	b5b0      	push	{r4, r5, r7, lr}
 80119be:	b082      	sub	sp, #8
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	0005      	movs	r5, r0
 80119c4:	000c      	movs	r4, r1
 80119c6:	0010      	movs	r0, r2
 80119c8:	0019      	movs	r1, r3
 80119ca:	1dfb      	adds	r3, r7, #7
 80119cc:	1c2a      	adds	r2, r5, #0
 80119ce:	701a      	strb	r2, [r3, #0]
 80119d0:	1dbb      	adds	r3, r7, #6
 80119d2:	1c22      	adds	r2, r4, #0
 80119d4:	701a      	strb	r2, [r3, #0]
 80119d6:	1d7b      	adds	r3, r7, #5
 80119d8:	1c02      	adds	r2, r0, #0
 80119da:	701a      	strb	r2, [r3, #0]
 80119dc:	1d3b      	adds	r3, r7, #4
 80119de:	1c0a      	adds	r2, r1, #0
 80119e0:	701a      	strb	r2, [r3, #0]
    switch( region )
 80119e2:	1dfb      	adds	r3, r7, #7
 80119e4:	781b      	ldrb	r3, [r3, #0]
 80119e6:	2b07      	cmp	r3, #7
 80119e8:	d10c      	bne.n	8011a04 <RegionApplyDrOffset+0x48>
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
 80119ea:	1d3b      	adds	r3, r7, #4
 80119ec:	2200      	movs	r2, #0
 80119ee:	569a      	ldrsb	r2, [r3, r2]
 80119f0:	1d7b      	adds	r3, r7, #5
 80119f2:	2100      	movs	r1, #0
 80119f4:	5659      	ldrsb	r1, [r3, r1]
 80119f6:	1dbb      	adds	r3, r7, #6
 80119f8:	781b      	ldrb	r3, [r3, #0]
 80119fa:	0018      	movs	r0, r3
 80119fc:	f002 f82e 	bl	8013a5c <RegionIN865ApplyDrOffset>
 8011a00:	0003      	movs	r3, r0
 8011a02:	e001      	b.n	8011a08 <RegionApplyDrOffset+0x4c>
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8011a04:	1d7b      	adds	r3, r7, #5
 8011a06:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
 8011a08:	0018      	movs	r0, r3
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	b002      	add	sp, #8
 8011a0e:	bdb0      	pop	{r4, r5, r7, pc}

08011a10 <CountChannels>:
#define BACKOFF_DC_1_HOUR       100
#define BACKOFF_DC_10_HOURS     1000
#define BACKOFF_DC_24_HOURS     10000

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b084      	sub	sp, #16
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	0002      	movs	r2, r0
 8011a18:	1dbb      	adds	r3, r7, #6
 8011a1a:	801a      	strh	r2, [r3, #0]
 8011a1c:	1d7b      	adds	r3, r7, #5
 8011a1e:	1c0a      	adds	r2, r1, #0
 8011a20:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
 8011a22:	230f      	movs	r3, #15
 8011a24:	18fb      	adds	r3, r7, r3
 8011a26:	2200      	movs	r2, #0
 8011a28:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
 8011a2a:	230e      	movs	r3, #14
 8011a2c:	18fb      	adds	r3, r7, r3
 8011a2e:	2200      	movs	r2, #0
 8011a30:	701a      	strb	r2, [r3, #0]
 8011a32:	e01b      	b.n	8011a6c <CountChannels+0x5c>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8011a34:	1dbb      	adds	r3, r7, #6
 8011a36:	881b      	ldrh	r3, [r3, #0]
 8011a38:	200e      	movs	r0, #14
 8011a3a:	183a      	adds	r2, r7, r0
 8011a3c:	7812      	ldrb	r2, [r2, #0]
 8011a3e:	2101      	movs	r1, #1
 8011a40:	4091      	lsls	r1, r2
 8011a42:	000a      	movs	r2, r1
 8011a44:	401a      	ands	r2, r3
 8011a46:	183b      	adds	r3, r7, r0
 8011a48:	781b      	ldrb	r3, [r3, #0]
 8011a4a:	2101      	movs	r1, #1
 8011a4c:	4099      	lsls	r1, r3
 8011a4e:	000b      	movs	r3, r1
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d105      	bne.n	8011a60 <CountChannels+0x50>
        {
            nbActiveBits++;
 8011a54:	210f      	movs	r1, #15
 8011a56:	187b      	adds	r3, r7, r1
 8011a58:	781a      	ldrb	r2, [r3, #0]
 8011a5a:	187b      	adds	r3, r7, r1
 8011a5c:	3201      	adds	r2, #1
 8011a5e:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
 8011a60:	210e      	movs	r1, #14
 8011a62:	187b      	adds	r3, r7, r1
 8011a64:	781a      	ldrb	r2, [r3, #0]
 8011a66:	187b      	adds	r3, r7, r1
 8011a68:	3201      	adds	r2, #1
 8011a6a:	701a      	strb	r2, [r3, #0]
 8011a6c:	230e      	movs	r3, #14
 8011a6e:	18fa      	adds	r2, r7, r3
 8011a70:	1d7b      	adds	r3, r7, #5
 8011a72:	7812      	ldrb	r2, [r2, #0]
 8011a74:	781b      	ldrb	r3, [r3, #0]
 8011a76:	429a      	cmp	r2, r3
 8011a78:	d3dc      	bcc.n	8011a34 <CountChannels+0x24>
        }
    }
    return nbActiveBits;
 8011a7a:	230f      	movs	r3, #15
 8011a7c:	18fb      	adds	r3, r7, r3
 8011a7e:	781b      	ldrb	r3, [r3, #0]
}
 8011a80:	0018      	movs	r0, r3
 8011a82:	46bd      	mov	sp, r7
 8011a84:	b004      	add	sp, #16
 8011a86:	bd80      	pop	{r7, pc}

08011a88 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b084      	sub	sp, #16
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
    uint16_t dutyCycle = 0;
 8011a90:	210e      	movs	r1, #14
 8011a92:	187b      	adds	r3, r7, r1
 8011a94:	2200      	movs	r2, #0
 8011a96:	801a      	strh	r2, [r3, #0]

    if( elapsedTime < 3600000 )
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	4a0e      	ldr	r2, [pc, #56]	@ (8011ad4 <RegionCommonGetJoinDc+0x4c>)
 8011a9c:	4293      	cmp	r3, r2
 8011a9e:	d803      	bhi.n	8011aa8 <RegionCommonGetJoinDc+0x20>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 8011aa0:	187b      	adds	r3, r7, r1
 8011aa2:	2264      	movs	r2, #100	@ 0x64
 8011aa4:	801a      	strh	r2, [r3, #0]
 8011aa6:	e00d      	b.n	8011ac4 <RegionCommonGetJoinDc+0x3c>
    }
    else if( elapsedTime < ( 3600000 + 36000000 ) )
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	4a0b      	ldr	r2, [pc, #44]	@ (8011ad8 <RegionCommonGetJoinDc+0x50>)
 8011aac:	4293      	cmp	r3, r2
 8011aae:	d805      	bhi.n	8011abc <RegionCommonGetJoinDc+0x34>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 8011ab0:	230e      	movs	r3, #14
 8011ab2:	18fb      	adds	r3, r7, r3
 8011ab4:	22fa      	movs	r2, #250	@ 0xfa
 8011ab6:	0092      	lsls	r2, r2, #2
 8011ab8:	801a      	strh	r2, [r3, #0]
 8011aba:	e003      	b.n	8011ac4 <RegionCommonGetJoinDc+0x3c>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 8011abc:	230e      	movs	r3, #14
 8011abe:	18fb      	adds	r3, r7, r3
 8011ac0:	4a06      	ldr	r2, [pc, #24]	@ (8011adc <RegionCommonGetJoinDc+0x54>)
 8011ac2:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
 8011ac4:	230e      	movs	r3, #14
 8011ac6:	18fb      	adds	r3, r7, r3
 8011ac8:	881b      	ldrh	r3, [r3, #0]
}
 8011aca:	0018      	movs	r0, r3
 8011acc:	46bd      	mov	sp, r7
 8011ace:	b004      	add	sp, #16
 8011ad0:	bd80      	pop	{r7, pc}
 8011ad2:	46c0      	nop			@ (mov r8, r8)
 8011ad4:	0036ee7f 	.word	0x0036ee7f
 8011ad8:	025c3f7f 	.word	0x025c3f7f
 8011adc:	00002710 	.word	0x00002710

08011ae0 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8011ae0:	b590      	push	{r4, r7, lr}
 8011ae2:	b085      	sub	sp, #20
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	0004      	movs	r4, r0
 8011ae8:	6039      	str	r1, [r7, #0]
 8011aea:	0010      	movs	r0, r2
 8011aec:	0019      	movs	r1, r3
 8011aee:	1dfb      	adds	r3, r7, #7
 8011af0:	1c22      	adds	r2, r4, #0
 8011af2:	701a      	strb	r2, [r3, #0]
 8011af4:	1dbb      	adds	r3, r7, #6
 8011af6:	1c02      	adds	r2, r0, #0
 8011af8:	701a      	strb	r2, [r3, #0]
 8011afa:	1d7b      	adds	r3, r7, #5
 8011afc:	1c0a      	adds	r2, r1, #0
 8011afe:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8011b00:	2320      	movs	r3, #32
 8011b02:	18fb      	adds	r3, r7, r3
 8011b04:	2200      	movs	r2, #0
 8011b06:	569a      	ldrsb	r2, [r3, r2]
 8011b08:	1d7b      	adds	r3, r7, #5
 8011b0a:	2100      	movs	r1, #0
 8011b0c:	5659      	ldrsb	r1, [r3, r1]
 8011b0e:	1dbb      	adds	r3, r7, #6
 8011b10:	781b      	ldrb	r3, [r3, #0]
 8011b12:	b25b      	sxtb	r3, r3
 8011b14:	0018      	movs	r0, r3
 8011b16:	f000 f87c 	bl	8011c12 <RegionCommonValueInRange>
 8011b1a:	1e03      	subs	r3, r0, #0
 8011b1c:	d101      	bne.n	8011b22 <RegionCommonChanVerifyDr+0x42>
    {
        return false;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	e073      	b.n	8011c0a <RegionCommonChanVerifyDr+0x12a>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8011b22:	230f      	movs	r3, #15
 8011b24:	18fb      	adds	r3, r7, r3
 8011b26:	2200      	movs	r2, #0
 8011b28:	701a      	strb	r2, [r3, #0]
 8011b2a:	230e      	movs	r3, #14
 8011b2c:	18fb      	adds	r3, r7, r3
 8011b2e:	2200      	movs	r2, #0
 8011b30:	701a      	strb	r2, [r3, #0]
 8011b32:	e062      	b.n	8011bfa <RegionCommonChanVerifyDr+0x11a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8011b34:	230d      	movs	r3, #13
 8011b36:	18fb      	adds	r3, r7, r3
 8011b38:	2200      	movs	r2, #0
 8011b3a:	701a      	strb	r2, [r3, #0]
 8011b3c:	e04c      	b.n	8011bd8 <RegionCommonChanVerifyDr+0xf8>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8011b3e:	230e      	movs	r3, #14
 8011b40:	18fb      	adds	r3, r7, r3
 8011b42:	781b      	ldrb	r3, [r3, #0]
 8011b44:	005b      	lsls	r3, r3, #1
 8011b46:	683a      	ldr	r2, [r7, #0]
 8011b48:	18d3      	adds	r3, r2, r3
 8011b4a:	881b      	ldrh	r3, [r3, #0]
 8011b4c:	001a      	movs	r2, r3
 8011b4e:	200d      	movs	r0, #13
 8011b50:	183b      	adds	r3, r7, r0
 8011b52:	781b      	ldrb	r3, [r3, #0]
 8011b54:	411a      	asrs	r2, r3
 8011b56:	0013      	movs	r3, r2
 8011b58:	2201      	movs	r2, #1
 8011b5a:	4013      	ands	r3, r2
 8011b5c:	d036      	beq.n	8011bcc <RegionCommonChanVerifyDr+0xec>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8011b5e:	240f      	movs	r4, #15
 8011b60:	193b      	adds	r3, r7, r4
 8011b62:	781a      	ldrb	r2, [r3, #0]
 8011b64:	183b      	adds	r3, r7, r0
 8011b66:	781b      	ldrb	r3, [r3, #0]
 8011b68:	18d3      	adds	r3, r2, r3
 8011b6a:	001a      	movs	r2, r3
 8011b6c:	0013      	movs	r3, r2
 8011b6e:	005b      	lsls	r3, r3, #1
 8011b70:	189b      	adds	r3, r3, r2
 8011b72:	009b      	lsls	r3, r3, #2
 8011b74:	001a      	movs	r2, r3
 8011b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b78:	189b      	adds	r3, r3, r2
 8011b7a:	7a1b      	ldrb	r3, [r3, #8]
 8011b7c:	011b      	lsls	r3, r3, #4
 8011b7e:	b25b      	sxtb	r3, r3
 8011b80:	111b      	asrs	r3, r3, #4
 8011b82:	b25b      	sxtb	r3, r3
 8011b84:	001a      	movs	r2, r3
 8011b86:	230f      	movs	r3, #15
 8011b88:	4013      	ands	r3, r2
 8011b8a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8011b8c:	193b      	adds	r3, r7, r4
 8011b8e:	781a      	ldrb	r2, [r3, #0]
 8011b90:	183b      	adds	r3, r7, r0
 8011b92:	781b      	ldrb	r3, [r3, #0]
 8011b94:	18d3      	adds	r3, r2, r3
 8011b96:	001a      	movs	r2, r3
 8011b98:	0013      	movs	r3, r2
 8011b9a:	005b      	lsls	r3, r3, #1
 8011b9c:	189b      	adds	r3, r3, r2
 8011b9e:	009b      	lsls	r3, r3, #2
 8011ba0:	001a      	movs	r2, r3
 8011ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ba4:	189b      	adds	r3, r3, r2
 8011ba6:	7a1b      	ldrb	r3, [r3, #8]
 8011ba8:	b25b      	sxtb	r3, r3
 8011baa:	111b      	asrs	r3, r3, #4
 8011bac:	b25b      	sxtb	r3, r3
 8011bae:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8011bb0:	230f      	movs	r3, #15
 8011bb2:	4013      	ands	r3, r2
 8011bb4:	b25a      	sxtb	r2, r3
 8011bb6:	1dbb      	adds	r3, r7, #6
 8011bb8:	781b      	ldrb	r3, [r3, #0]
 8011bba:	b25b      	sxtb	r3, r3
 8011bbc:	0018      	movs	r0, r3
 8011bbe:	f000 f828 	bl	8011c12 <RegionCommonValueInRange>
 8011bc2:	0003      	movs	r3, r0
 8011bc4:	2b01      	cmp	r3, #1
 8011bc6:	d101      	bne.n	8011bcc <RegionCommonChanVerifyDr+0xec>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8011bc8:	2301      	movs	r3, #1
 8011bca:	e01e      	b.n	8011c0a <RegionCommonChanVerifyDr+0x12a>
        for( uint8_t j = 0; j < 16; j++ )
 8011bcc:	210d      	movs	r1, #13
 8011bce:	187b      	adds	r3, r7, r1
 8011bd0:	781a      	ldrb	r2, [r3, #0]
 8011bd2:	187b      	adds	r3, r7, r1
 8011bd4:	3201      	adds	r2, #1
 8011bd6:	701a      	strb	r2, [r3, #0]
 8011bd8:	230d      	movs	r3, #13
 8011bda:	18fb      	adds	r3, r7, r3
 8011bdc:	781b      	ldrb	r3, [r3, #0]
 8011bde:	2b0f      	cmp	r3, #15
 8011be0:	d9ad      	bls.n	8011b3e <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8011be2:	220f      	movs	r2, #15
 8011be4:	18bb      	adds	r3, r7, r2
 8011be6:	18ba      	adds	r2, r7, r2
 8011be8:	7812      	ldrb	r2, [r2, #0]
 8011bea:	3210      	adds	r2, #16
 8011bec:	701a      	strb	r2, [r3, #0]
 8011bee:	210e      	movs	r1, #14
 8011bf0:	187b      	adds	r3, r7, r1
 8011bf2:	781a      	ldrb	r2, [r3, #0]
 8011bf4:	187b      	adds	r3, r7, r1
 8011bf6:	3201      	adds	r2, #1
 8011bf8:	701a      	strb	r2, [r3, #0]
 8011bfa:	230f      	movs	r3, #15
 8011bfc:	18fa      	adds	r2, r7, r3
 8011bfe:	1dfb      	adds	r3, r7, #7
 8011c00:	7812      	ldrb	r2, [r2, #0]
 8011c02:	781b      	ldrb	r3, [r3, #0]
 8011c04:	429a      	cmp	r2, r3
 8011c06:	d395      	bcc.n	8011b34 <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
 8011c08:	2300      	movs	r3, #0
}
 8011c0a:	0018      	movs	r0, r3
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	b005      	add	sp, #20
 8011c10:	bd90      	pop	{r4, r7, pc}

08011c12 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8011c12:	b590      	push	{r4, r7, lr}
 8011c14:	b083      	sub	sp, #12
 8011c16:	af00      	add	r7, sp, #0
 8011c18:	0004      	movs	r4, r0
 8011c1a:	0008      	movs	r0, r1
 8011c1c:	0011      	movs	r1, r2
 8011c1e:	1dfb      	adds	r3, r7, #7
 8011c20:	1c22      	adds	r2, r4, #0
 8011c22:	701a      	strb	r2, [r3, #0]
 8011c24:	1dbb      	adds	r3, r7, #6
 8011c26:	1c02      	adds	r2, r0, #0
 8011c28:	701a      	strb	r2, [r3, #0]
 8011c2a:	1d7b      	adds	r3, r7, #5
 8011c2c:	1c0a      	adds	r2, r1, #0
 8011c2e:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
 8011c30:	1dfa      	adds	r2, r7, #7
 8011c32:	1dbb      	adds	r3, r7, #6
 8011c34:	7812      	ldrb	r2, [r2, #0]
 8011c36:	b252      	sxtb	r2, r2
 8011c38:	781b      	ldrb	r3, [r3, #0]
 8011c3a:	b25b      	sxtb	r3, r3
 8011c3c:	429a      	cmp	r2, r3
 8011c3e:	db09      	blt.n	8011c54 <RegionCommonValueInRange+0x42>
 8011c40:	1dfa      	adds	r2, r7, #7
 8011c42:	1d7b      	adds	r3, r7, #5
 8011c44:	7812      	ldrb	r2, [r2, #0]
 8011c46:	b252      	sxtb	r2, r2
 8011c48:	781b      	ldrb	r3, [r3, #0]
 8011c4a:	b25b      	sxtb	r3, r3
 8011c4c:	429a      	cmp	r2, r3
 8011c4e:	dc01      	bgt.n	8011c54 <RegionCommonValueInRange+0x42>
    {
        return 1;
 8011c50:	2301      	movs	r3, #1
 8011c52:	e000      	b.n	8011c56 <RegionCommonValueInRange+0x44>
    }
    return 0;
 8011c54:	2300      	movs	r3, #0
}
 8011c56:	0018      	movs	r0, r3
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	b003      	add	sp, #12
 8011c5c:	bd90      	pop	{r4, r7, pc}

08011c5e <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8011c5e:	b580      	push	{r7, lr}
 8011c60:	b084      	sub	sp, #16
 8011c62:	af00      	add	r7, sp, #0
 8011c64:	6078      	str	r0, [r7, #4]
 8011c66:	0008      	movs	r0, r1
 8011c68:	0011      	movs	r1, r2
 8011c6a:	1cfb      	adds	r3, r7, #3
 8011c6c:	1c02      	adds	r2, r0, #0
 8011c6e:	701a      	strb	r2, [r3, #0]
 8011c70:	1cbb      	adds	r3, r7, #2
 8011c72:	1c0a      	adds	r2, r1, #0
 8011c74:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
 8011c76:	210f      	movs	r1, #15
 8011c78:	187b      	adds	r3, r7, r1
 8011c7a:	1cfa      	adds	r2, r7, #3
 8011c7c:	7812      	ldrb	r2, [r2, #0]
 8011c7e:	0912      	lsrs	r2, r2, #4
 8011c80:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8011c82:	1cbb      	adds	r3, r7, #2
 8011c84:	781b      	ldrb	r3, [r3, #0]
 8011c86:	091b      	lsrs	r3, r3, #4
 8011c88:	b2db      	uxtb	r3, r3
 8011c8a:	187a      	adds	r2, r7, r1
 8011c8c:	7812      	ldrb	r2, [r2, #0]
 8011c8e:	429a      	cmp	r2, r3
 8011c90:	d805      	bhi.n	8011c9e <RegionCommonChanDisable+0x40>
 8011c92:	1cfa      	adds	r2, r7, #3
 8011c94:	1cbb      	adds	r3, r7, #2
 8011c96:	7812      	ldrb	r2, [r2, #0]
 8011c98:	781b      	ldrb	r3, [r3, #0]
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	d301      	bcc.n	8011ca2 <RegionCommonChanDisable+0x44>
    {
        return false;
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	e01b      	b.n	8011cda <RegionCommonChanDisable+0x7c>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8011ca2:	200f      	movs	r0, #15
 8011ca4:	183b      	adds	r3, r7, r0
 8011ca6:	781b      	ldrb	r3, [r3, #0]
 8011ca8:	005b      	lsls	r3, r3, #1
 8011caa:	687a      	ldr	r2, [r7, #4]
 8011cac:	18d3      	adds	r3, r2, r3
 8011cae:	881b      	ldrh	r3, [r3, #0]
 8011cb0:	b21b      	sxth	r3, r3
 8011cb2:	1cfa      	adds	r2, r7, #3
 8011cb4:	7812      	ldrb	r2, [r2, #0]
 8011cb6:	210f      	movs	r1, #15
 8011cb8:	400a      	ands	r2, r1
 8011cba:	2101      	movs	r1, #1
 8011cbc:	4091      	lsls	r1, r2
 8011cbe:	000a      	movs	r2, r1
 8011cc0:	b212      	sxth	r2, r2
 8011cc2:	43d2      	mvns	r2, r2
 8011cc4:	b212      	sxth	r2, r2
 8011cc6:	4013      	ands	r3, r2
 8011cc8:	b219      	sxth	r1, r3
 8011cca:	183b      	adds	r3, r7, r0
 8011ccc:	781b      	ldrb	r3, [r3, #0]
 8011cce:	005b      	lsls	r3, r3, #1
 8011cd0:	687a      	ldr	r2, [r7, #4]
 8011cd2:	18d3      	adds	r3, r2, r3
 8011cd4:	b28a      	uxth	r2, r1
 8011cd6:	801a      	strh	r2, [r3, #0]

    return true;
 8011cd8:	2301      	movs	r3, #1
}
 8011cda:	0018      	movs	r0, r3
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	b004      	add	sp, #16
 8011ce0:	bd80      	pop	{r7, pc}

08011ce2 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8011ce2:	b590      	push	{r4, r7, lr}
 8011ce4:	b085      	sub	sp, #20
 8011ce6:	af00      	add	r7, sp, #0
 8011ce8:	6078      	str	r0, [r7, #4]
 8011cea:	0008      	movs	r0, r1
 8011cec:	0011      	movs	r1, r2
 8011cee:	1cfb      	adds	r3, r7, #3
 8011cf0:	1c02      	adds	r2, r0, #0
 8011cf2:	701a      	strb	r2, [r3, #0]
 8011cf4:	1cbb      	adds	r3, r7, #2
 8011cf6:	1c0a      	adds	r2, r1, #0
 8011cf8:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
 8011cfa:	230f      	movs	r3, #15
 8011cfc:	18fb      	adds	r3, r7, r3
 8011cfe:	2200      	movs	r2, #0
 8011d00:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d101      	bne.n	8011d0c <RegionCommonCountChannels+0x2a>
    {
        return 0;
 8011d08:	2300      	movs	r3, #0
 8011d0a:	e027      	b.n	8011d5c <RegionCommonCountChannels+0x7a>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8011d0c:	230e      	movs	r3, #14
 8011d0e:	18fb      	adds	r3, r7, r3
 8011d10:	1cfa      	adds	r2, r7, #3
 8011d12:	7812      	ldrb	r2, [r2, #0]
 8011d14:	701a      	strb	r2, [r3, #0]
 8011d16:	e017      	b.n	8011d48 <RegionCommonCountChannels+0x66>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8011d18:	240e      	movs	r4, #14
 8011d1a:	193b      	adds	r3, r7, r4
 8011d1c:	781b      	ldrb	r3, [r3, #0]
 8011d1e:	005b      	lsls	r3, r3, #1
 8011d20:	687a      	ldr	r2, [r7, #4]
 8011d22:	18d3      	adds	r3, r2, r3
 8011d24:	881b      	ldrh	r3, [r3, #0]
 8011d26:	2110      	movs	r1, #16
 8011d28:	0018      	movs	r0, r3
 8011d2a:	f7ff fe71 	bl	8011a10 <CountChannels>
 8011d2e:	0003      	movs	r3, r0
 8011d30:	0019      	movs	r1, r3
 8011d32:	220f      	movs	r2, #15
 8011d34:	18bb      	adds	r3, r7, r2
 8011d36:	18ba      	adds	r2, r7, r2
 8011d38:	7812      	ldrb	r2, [r2, #0]
 8011d3a:	188a      	adds	r2, r1, r2
 8011d3c:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8011d3e:	193b      	adds	r3, r7, r4
 8011d40:	781a      	ldrb	r2, [r3, #0]
 8011d42:	193b      	adds	r3, r7, r4
 8011d44:	3201      	adds	r2, #1
 8011d46:	701a      	strb	r2, [r3, #0]
 8011d48:	230e      	movs	r3, #14
 8011d4a:	18fa      	adds	r2, r7, r3
 8011d4c:	1cbb      	adds	r3, r7, #2
 8011d4e:	7812      	ldrb	r2, [r2, #0]
 8011d50:	781b      	ldrb	r3, [r3, #0]
 8011d52:	429a      	cmp	r2, r3
 8011d54:	d3e0      	bcc.n	8011d18 <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
 8011d56:	230f      	movs	r3, #15
 8011d58:	18fb      	adds	r3, r7, r3
 8011d5a:	781b      	ldrb	r3, [r3, #0]
}
 8011d5c:	0018      	movs	r0, r3
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	b005      	add	sp, #20
 8011d62:	bd90      	pop	{r4, r7, pc}

08011d64 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b086      	sub	sp, #24
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	60f8      	str	r0, [r7, #12]
 8011d6c:	60b9      	str	r1, [r7, #8]
 8011d6e:	1dfb      	adds	r3, r7, #7
 8011d70:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d020      	beq.n	8011dba <RegionCommonChanMaskCopy+0x56>
 8011d78:	68bb      	ldr	r3, [r7, #8]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d01d      	beq.n	8011dba <RegionCommonChanMaskCopy+0x56>
    {
        for( uint8_t i = 0; i < len; i++ )
 8011d7e:	2317      	movs	r3, #23
 8011d80:	18fb      	adds	r3, r7, r3
 8011d82:	2200      	movs	r2, #0
 8011d84:	701a      	strb	r2, [r3, #0]
 8011d86:	e011      	b.n	8011dac <RegionCommonChanMaskCopy+0x48>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8011d88:	2017      	movs	r0, #23
 8011d8a:	183b      	adds	r3, r7, r0
 8011d8c:	781b      	ldrb	r3, [r3, #0]
 8011d8e:	005b      	lsls	r3, r3, #1
 8011d90:	68ba      	ldr	r2, [r7, #8]
 8011d92:	18d2      	adds	r2, r2, r3
 8011d94:	183b      	adds	r3, r7, r0
 8011d96:	781b      	ldrb	r3, [r3, #0]
 8011d98:	005b      	lsls	r3, r3, #1
 8011d9a:	68f9      	ldr	r1, [r7, #12]
 8011d9c:	18cb      	adds	r3, r1, r3
 8011d9e:	8812      	ldrh	r2, [r2, #0]
 8011da0:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8011da2:	183b      	adds	r3, r7, r0
 8011da4:	781a      	ldrb	r2, [r3, #0]
 8011da6:	183b      	adds	r3, r7, r0
 8011da8:	3201      	adds	r2, #1
 8011daa:	701a      	strb	r2, [r3, #0]
 8011dac:	2317      	movs	r3, #23
 8011dae:	18fa      	adds	r2, r7, r3
 8011db0:	1dfb      	adds	r3, r7, #7
 8011db2:	7812      	ldrb	r2, [r2, #0]
 8011db4:	781b      	ldrb	r3, [r3, #0]
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d3e6      	bcc.n	8011d88 <RegionCommonChanMaskCopy+0x24>
        }
    }
}
 8011dba:	46c0      	nop			@ (mov r8, r8)
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	b006      	add	sp, #24
 8011dc0:	bd80      	pop	{r7, pc}

08011dc2 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
 8011dc2:	b580      	push	{r7, lr}
 8011dc4:	b084      	sub	sp, #16
 8011dc6:	af00      	add	r7, sp, #0
 8011dc8:	60b9      	str	r1, [r7, #8]
 8011dca:	607a      	str	r2, [r7, #4]
 8011dcc:	210f      	movs	r1, #15
 8011dce:	187b      	adds	r3, r7, r1
 8011dd0:	1c02      	adds	r2, r0, #0
 8011dd2:	701a      	strb	r2, [r3, #0]
    if( joined == true )
 8011dd4:	187b      	adds	r3, r7, r1
 8011dd6:	781b      	ldrb	r3, [r3, #0]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d003      	beq.n	8011de4 <RegionCommonSetBandTxDone+0x22>
    {
        band->LastTxDoneTime = lastTxDone;
 8011ddc:	68bb      	ldr	r3, [r7, #8]
 8011dde:	687a      	ldr	r2, [r7, #4]
 8011de0:	609a      	str	r2, [r3, #8]
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
    }
}
 8011de2:	e005      	b.n	8011df0 <RegionCommonSetBandTxDone+0x2e>
        band->LastTxDoneTime = lastTxDone;
 8011de4:	68bb      	ldr	r3, [r7, #8]
 8011de6:	687a      	ldr	r2, [r7, #4]
 8011de8:	609a      	str	r2, [r3, #8]
        band->LastJoinTxDoneTime = lastTxDone;
 8011dea:	68bb      	ldr	r3, [r7, #8]
 8011dec:	687a      	ldr	r2, [r7, #4]
 8011dee:	605a      	str	r2, [r3, #4]
}
 8011df0:	46c0      	nop			@ (mov r8, r8)
 8011df2:	46bd      	mov	sp, r7
 8011df4:	b004      	add	sp, #16
 8011df6:	bd80      	pop	{r7, pc}

08011df8 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 8011df8:	b590      	push	{r4, r7, lr}
 8011dfa:	b089      	sub	sp, #36	@ 0x24
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	0004      	movs	r4, r0
 8011e00:	0008      	movs	r0, r1
 8011e02:	603a      	str	r2, [r7, #0]
 8011e04:	0019      	movs	r1, r3
 8011e06:	1dfb      	adds	r3, r7, #7
 8011e08:	1c22      	adds	r2, r4, #0
 8011e0a:	701a      	strb	r2, [r3, #0]
 8011e0c:	1dbb      	adds	r3, r7, #6
 8011e0e:	1c02      	adds	r2, r0, #0
 8011e10:	701a      	strb	r2, [r3, #0]
 8011e12:	1d7b      	adds	r3, r7, #5
 8011e14:	1c0a      	adds	r2, r1, #0
 8011e16:	701a      	strb	r2, [r3, #0]
    TimerTime_t nextTxDelay = TIMERTIME_T_MAX;
 8011e18:	2301      	movs	r3, #1
 8011e1a:	425b      	negs	r3, r3
 8011e1c:	61fb      	str	r3, [r7, #28]

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
 8011e1e:	231b      	movs	r3, #27
 8011e20:	18fb      	adds	r3, r7, r3
 8011e22:	2200      	movs	r2, #0
 8011e24:	701a      	strb	r2, [r3, #0]
 8011e26:	e098      	b.n	8011f5a <RegionCommonUpdateBandTimeOff+0x162>
    {
        if( joined == false )
 8011e28:	1dfb      	adds	r3, r7, #7
 8011e2a:	781b      	ldrb	r3, [r3, #0]
 8011e2c:	2201      	movs	r2, #1
 8011e2e:	4053      	eors	r3, r2
 8011e30:	b2db      	uxtb	r3, r3
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d04a      	beq.n	8011ecc <RegionCommonUpdateBandTimeOff+0xd4>
        {
            TimerTime_t elapsedJoin = TimerGetElapsedTime( bands[i].LastJoinTxDoneTime );
 8011e36:	241b      	movs	r4, #27
 8011e38:	193b      	adds	r3, r7, r4
 8011e3a:	781b      	ldrb	r3, [r3, #0]
 8011e3c:	011b      	lsls	r3, r3, #4
 8011e3e:	683a      	ldr	r2, [r7, #0]
 8011e40:	18d3      	adds	r3, r2, r3
 8011e42:	685b      	ldr	r3, [r3, #4]
 8011e44:	0018      	movs	r0, r3
 8011e46:	f003 f9cc 	bl	80151e2 <TimerGetElapsedTime>
 8011e4a:	0003      	movs	r3, r0
 8011e4c:	613b      	str	r3, [r7, #16]
            TimerTime_t elapsedTx = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 8011e4e:	193b      	adds	r3, r7, r4
 8011e50:	781b      	ldrb	r3, [r3, #0]
 8011e52:	011b      	lsls	r3, r3, #4
 8011e54:	683a      	ldr	r2, [r7, #0]
 8011e56:	18d3      	adds	r3, r2, r3
 8011e58:	689b      	ldr	r3, [r3, #8]
 8011e5a:	0018      	movs	r0, r3
 8011e5c:	f003 f9c1 	bl	80151e2 <TimerGetElapsedTime>
 8011e60:	0003      	movs	r3, r0
 8011e62:	60fb      	str	r3, [r7, #12]
            TimerTime_t txDoneTime =  MAX( elapsedJoin,
 8011e64:	1dbb      	adds	r3, r7, #6
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d001      	beq.n	8011e70 <RegionCommonUpdateBandTimeOff+0x78>
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	e000      	b.n	8011e72 <RegionCommonUpdateBandTimeOff+0x7a>
 8011e70:	2300      	movs	r3, #0
 8011e72:	693a      	ldr	r2, [r7, #16]
 8011e74:	4293      	cmp	r3, r2
 8011e76:	d200      	bcs.n	8011e7a <RegionCommonUpdateBandTimeOff+0x82>
 8011e78:	0013      	movs	r3, r2
 8011e7a:	60bb      	str	r3, [r7, #8]
                                        ( dutyCycle == true ) ? elapsedTx : 0 );

            if( bands[i].TimeOff <= txDoneTime )
 8011e7c:	211b      	movs	r1, #27
 8011e7e:	187b      	adds	r3, r7, r1
 8011e80:	781b      	ldrb	r3, [r3, #0]
 8011e82:	011b      	lsls	r3, r3, #4
 8011e84:	683a      	ldr	r2, [r7, #0]
 8011e86:	18d3      	adds	r3, r2, r3
 8011e88:	68db      	ldr	r3, [r3, #12]
 8011e8a:	68ba      	ldr	r2, [r7, #8]
 8011e8c:	429a      	cmp	r2, r3
 8011e8e:	d306      	bcc.n	8011e9e <RegionCommonUpdateBandTimeOff+0xa6>
            {
                bands[i].TimeOff = 0;
 8011e90:	187b      	adds	r3, r7, r1
 8011e92:	781b      	ldrb	r3, [r3, #0]
 8011e94:	011b      	lsls	r3, r3, #4
 8011e96:	683a      	ldr	r2, [r7, #0]
 8011e98:	18d3      	adds	r3, r2, r3
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	60da      	str	r2, [r3, #12]
            }
            if( bands[i].TimeOff != 0 )
 8011e9e:	211b      	movs	r1, #27
 8011ea0:	187b      	adds	r3, r7, r1
 8011ea2:	781b      	ldrb	r3, [r3, #0]
 8011ea4:	011b      	lsls	r3, r3, #4
 8011ea6:	683a      	ldr	r2, [r7, #0]
 8011ea8:	18d3      	adds	r3, r2, r3
 8011eaa:	68db      	ldr	r3, [r3, #12]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d04e      	beq.n	8011f4e <RegionCommonUpdateBandTimeOff+0x156>
            {
                nextTxDelay = MIN( bands[i].TimeOff - txDoneTime, nextTxDelay );
 8011eb0:	187b      	adds	r3, r7, r1
 8011eb2:	781b      	ldrb	r3, [r3, #0]
 8011eb4:	011b      	lsls	r3, r3, #4
 8011eb6:	683a      	ldr	r2, [r7, #0]
 8011eb8:	18d3      	adds	r3, r2, r3
 8011eba:	68da      	ldr	r2, [r3, #12]
 8011ebc:	68bb      	ldr	r3, [r7, #8]
 8011ebe:	1ad2      	subs	r2, r2, r3
 8011ec0:	69fb      	ldr	r3, [r7, #28]
 8011ec2:	4293      	cmp	r3, r2
 8011ec4:	d900      	bls.n	8011ec8 <RegionCommonUpdateBandTimeOff+0xd0>
 8011ec6:	0013      	movs	r3, r2
 8011ec8:	61fb      	str	r3, [r7, #28]
 8011eca:	e040      	b.n	8011f4e <RegionCommonUpdateBandTimeOff+0x156>
            }
        }
        else
        {
            if( dutyCycle == true )
 8011ecc:	1dbb      	adds	r3, r7, #6
 8011ece:	781b      	ldrb	r3, [r3, #0]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d032      	beq.n	8011f3a <RegionCommonUpdateBandTimeOff+0x142>
            {
                TimerTime_t elapsed = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 8011ed4:	241b      	movs	r4, #27
 8011ed6:	193b      	adds	r3, r7, r4
 8011ed8:	781b      	ldrb	r3, [r3, #0]
 8011eda:	011b      	lsls	r3, r3, #4
 8011edc:	683a      	ldr	r2, [r7, #0]
 8011ede:	18d3      	adds	r3, r2, r3
 8011ee0:	689b      	ldr	r3, [r3, #8]
 8011ee2:	0018      	movs	r0, r3
 8011ee4:	f003 f97d 	bl	80151e2 <TimerGetElapsedTime>
 8011ee8:	0003      	movs	r3, r0
 8011eea:	617b      	str	r3, [r7, #20]
                if( bands[i].TimeOff <= elapsed )
 8011eec:	193b      	adds	r3, r7, r4
 8011eee:	781b      	ldrb	r3, [r3, #0]
 8011ef0:	011b      	lsls	r3, r3, #4
 8011ef2:	683a      	ldr	r2, [r7, #0]
 8011ef4:	18d3      	adds	r3, r2, r3
 8011ef6:	68db      	ldr	r3, [r3, #12]
 8011ef8:	697a      	ldr	r2, [r7, #20]
 8011efa:	429a      	cmp	r2, r3
 8011efc:	d306      	bcc.n	8011f0c <RegionCommonUpdateBandTimeOff+0x114>
                {
                    bands[i].TimeOff = 0;
 8011efe:	193b      	adds	r3, r7, r4
 8011f00:	781b      	ldrb	r3, [r3, #0]
 8011f02:	011b      	lsls	r3, r3, #4
 8011f04:	683a      	ldr	r2, [r7, #0]
 8011f06:	18d3      	adds	r3, r2, r3
 8011f08:	2200      	movs	r2, #0
 8011f0a:	60da      	str	r2, [r3, #12]
                }
                if( bands[i].TimeOff != 0 )
 8011f0c:	211b      	movs	r1, #27
 8011f0e:	187b      	adds	r3, r7, r1
 8011f10:	781b      	ldrb	r3, [r3, #0]
 8011f12:	011b      	lsls	r3, r3, #4
 8011f14:	683a      	ldr	r2, [r7, #0]
 8011f16:	18d3      	adds	r3, r2, r3
 8011f18:	68db      	ldr	r3, [r3, #12]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d017      	beq.n	8011f4e <RegionCommonUpdateBandTimeOff+0x156>
                {
                    nextTxDelay = MIN( bands[i].TimeOff - elapsed, nextTxDelay );
 8011f1e:	187b      	adds	r3, r7, r1
 8011f20:	781b      	ldrb	r3, [r3, #0]
 8011f22:	011b      	lsls	r3, r3, #4
 8011f24:	683a      	ldr	r2, [r7, #0]
 8011f26:	18d3      	adds	r3, r2, r3
 8011f28:	68da      	ldr	r2, [r3, #12]
 8011f2a:	697b      	ldr	r3, [r7, #20]
 8011f2c:	1ad2      	subs	r2, r2, r3
 8011f2e:	69fb      	ldr	r3, [r7, #28]
 8011f30:	4293      	cmp	r3, r2
 8011f32:	d900      	bls.n	8011f36 <RegionCommonUpdateBandTimeOff+0x13e>
 8011f34:	0013      	movs	r3, r2
 8011f36:	61fb      	str	r3, [r7, #28]
 8011f38:	e009      	b.n	8011f4e <RegionCommonUpdateBandTimeOff+0x156>
                }
            }
            else
            {
                nextTxDelay = 0;
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	61fb      	str	r3, [r7, #28]
                bands[i].TimeOff = 0;
 8011f3e:	231b      	movs	r3, #27
 8011f40:	18fb      	adds	r3, r7, r3
 8011f42:	781b      	ldrb	r3, [r3, #0]
 8011f44:	011b      	lsls	r3, r3, #4
 8011f46:	683a      	ldr	r2, [r7, #0]
 8011f48:	18d3      	adds	r3, r2, r3
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	60da      	str	r2, [r3, #12]
    for( uint8_t i = 0; i < nbBands; i++ )
 8011f4e:	211b      	movs	r1, #27
 8011f50:	187b      	adds	r3, r7, r1
 8011f52:	781a      	ldrb	r2, [r3, #0]
 8011f54:	187b      	adds	r3, r7, r1
 8011f56:	3201      	adds	r2, #1
 8011f58:	701a      	strb	r2, [r3, #0]
 8011f5a:	231b      	movs	r3, #27
 8011f5c:	18fa      	adds	r2, r7, r3
 8011f5e:	1d7b      	adds	r3, r7, #5
 8011f60:	7812      	ldrb	r2, [r2, #0]
 8011f62:	781b      	ldrb	r3, [r3, #0]
 8011f64:	429a      	cmp	r2, r3
 8011f66:	d200      	bcs.n	8011f6a <RegionCommonUpdateBandTimeOff+0x172>
 8011f68:	e75e      	b.n	8011e28 <RegionCommonUpdateBandTimeOff+0x30>
            }
        }
    }

    return ( nextTxDelay == TIMERTIME_T_MAX ) ? 0 : nextTxDelay;
 8011f6a:	69fb      	ldr	r3, [r7, #28]
 8011f6c:	3301      	adds	r3, #1
 8011f6e:	d001      	beq.n	8011f74 <RegionCommonUpdateBandTimeOff+0x17c>
 8011f70:	69fb      	ldr	r3, [r7, #28]
 8011f72:	e000      	b.n	8011f76 <RegionCommonUpdateBandTimeOff+0x17e>
 8011f74:	2300      	movs	r3, #0
}
 8011f76:	0018      	movs	r0, r3
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	b009      	add	sp, #36	@ 0x24
 8011f7c:	bd90      	pop	{r4, r7, pc}

08011f7e <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8011f7e:	b580      	push	{r7, lr}
 8011f80:	b084      	sub	sp, #16
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	6078      	str	r0, [r7, #4]
 8011f86:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8011f88:	210f      	movs	r1, #15
 8011f8a:	187b      	adds	r3, r7, r1
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	781b      	ldrb	r3, [r3, #0]
 8011f94:	2b03      	cmp	r3, #3
 8011f96:	d140      	bne.n	801201a <RegionCommonParseLinkAdrReq+0x9c>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	3301      	adds	r3, #1
 8011f9c:	781b      	ldrb	r3, [r3, #0]
 8011f9e:	b25a      	sxtb	r2, r3
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8011fa4:	683b      	ldr	r3, [r7, #0]
 8011fa6:	785b      	ldrb	r3, [r3, #1]
 8011fa8:	b25b      	sxtb	r3, r3
 8011faa:	220f      	movs	r2, #15
 8011fac:	4013      	ands	r3, r2
 8011fae:	b25a      	sxtb	r2, r3
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	785b      	ldrb	r3, [r3, #1]
 8011fb8:	b25b      	sxtb	r3, r3
 8011fba:	b2db      	uxtb	r3, r3
 8011fbc:	091b      	lsrs	r3, r3, #4
 8011fbe:	b2db      	uxtb	r3, r3
 8011fc0:	b25a      	sxtb	r2, r3
 8011fc2:	683b      	ldr	r3, [r7, #0]
 8011fc4:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	3302      	adds	r3, #2
 8011fca:	781b      	ldrb	r3, [r3, #0]
 8011fcc:	001a      	movs	r2, r3
 8011fce:	683b      	ldr	r3, [r7, #0]
 8011fd0:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8011fd2:	683b      	ldr	r3, [r7, #0]
 8011fd4:	889b      	ldrh	r3, [r3, #4]
 8011fd6:	b21a      	sxth	r2, r3
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	3303      	adds	r3, #3
 8011fdc:	781b      	ldrb	r3, [r3, #0]
 8011fde:	021b      	lsls	r3, r3, #8
 8011fe0:	b21b      	sxth	r3, r3
 8011fe2:	4313      	orrs	r3, r2
 8011fe4:	b21b      	sxth	r3, r3
 8011fe6:	b29a      	uxth	r2, r3
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	791a      	ldrb	r2, [r3, #4]
 8011ff0:	683b      	ldr	r3, [r7, #0]
 8011ff2:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	781b      	ldrb	r3, [r3, #0]
 8011ff8:	091b      	lsrs	r3, r3, #4
 8011ffa:	b2db      	uxtb	r3, r3
 8011ffc:	2207      	movs	r2, #7
 8011ffe:	4013      	ands	r3, r2
 8012000:	b2da      	uxtb	r2, r3
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8012006:	683b      	ldr	r3, [r7, #0]
 8012008:	781b      	ldrb	r3, [r3, #0]
 801200a:	220f      	movs	r2, #15
 801200c:	4013      	ands	r3, r2
 801200e:	b2da      	uxtb	r2, r3
 8012010:	683b      	ldr	r3, [r7, #0]
 8012012:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8012014:	187b      	adds	r3, r7, r1
 8012016:	2205      	movs	r2, #5
 8012018:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
 801201a:	230f      	movs	r3, #15
 801201c:	18fb      	adds	r3, r7, r3
 801201e:	781b      	ldrb	r3, [r3, #0]
}
 8012020:	0018      	movs	r0, r3
 8012022:	46bd      	mov	sp, r7
 8012024:	b004      	add	sp, #16
 8012026:	bd80      	pop	{r7, pc}

08012028 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8012028:	b5f0      	push	{r4, r5, r6, r7, lr}
 801202a:	b089      	sub	sp, #36	@ 0x24
 801202c:	af02      	add	r7, sp, #8
 801202e:	60f8      	str	r0, [r7, #12]
 8012030:	60b9      	str	r1, [r7, #8]
 8012032:	607a      	str	r2, [r7, #4]
 8012034:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8012036:	2317      	movs	r3, #23
 8012038:	18fb      	adds	r3, r7, r3
 801203a:	68fa      	ldr	r2, [r7, #12]
 801203c:	7912      	ldrb	r2, [r2, #4]
 801203e:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
 8012040:	2116      	movs	r1, #22
 8012042:	187b      	adds	r3, r7, r1
 8012044:	68fa      	ldr	r2, [r7, #12]
 8012046:	7992      	ldrb	r2, [r2, #6]
 8012048:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
 801204a:	2015      	movs	r0, #21
 801204c:	183b      	adds	r3, r7, r0
 801204e:	68fa      	ldr	r2, [r7, #12]
 8012050:	79d2      	ldrb	r2, [r2, #7]
 8012052:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	7a1a      	ldrb	r2, [r3, #8]
 8012058:	2414      	movs	r4, #20
 801205a:	193b      	adds	r3, r7, r4
 801205c:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	795b      	ldrb	r3, [r3, #5]
 8012062:	2201      	movs	r2, #1
 8012064:	4053      	eors	r3, r2
 8012066:	b2db      	uxtb	r3, r3
 8012068:	2b00      	cmp	r3, #0
 801206a:	d00b      	beq.n	8012084 <RegionCommonLinkAdrReqVerifyParams+0x5c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801206c:	193b      	adds	r3, r7, r4
 801206e:	68fa      	ldr	r2, [r7, #12]
 8012070:	7ad2      	ldrb	r2, [r2, #11]
 8012072:	701a      	strb	r2, [r3, #0]
        datarate =  verifyParams->CurrentDatarate;
 8012074:	187b      	adds	r3, r7, r1
 8012076:	68fa      	ldr	r2, [r7, #12]
 8012078:	7a52      	ldrb	r2, [r2, #9]
 801207a:	701a      	strb	r2, [r3, #0]
        txPower =  verifyParams->CurrentTxPower;
 801207c:	183b      	adds	r3, r7, r0
 801207e:	68fa      	ldr	r2, [r7, #12]
 8012080:	7a92      	ldrb	r2, [r2, #10]
 8012082:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
 8012084:	2617      	movs	r6, #23
 8012086:	19bb      	adds	r3, r7, r6
 8012088:	781b      	ldrb	r3, [r3, #0]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d046      	beq.n	801211c <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	7b18      	ldrb	r0, [r3, #12]
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	691c      	ldr	r4, [r3, #16]
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	2514      	movs	r5, #20
 801209a:	575d      	ldrsb	r5, [r3, r5]
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	2215      	movs	r2, #21
 80120a0:	569a      	ldrsb	r2, [r3, r2]
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	699b      	ldr	r3, [r3, #24]
 80120a6:	2116      	movs	r1, #22
 80120a8:	1879      	adds	r1, r7, r1
 80120aa:	7809      	ldrb	r1, [r1, #0]
 80120ac:	b249      	sxtb	r1, r1
 80120ae:	9301      	str	r3, [sp, #4]
 80120b0:	9200      	str	r2, [sp, #0]
 80120b2:	002b      	movs	r3, r5
 80120b4:	000a      	movs	r2, r1
 80120b6:	0021      	movs	r1, r4
 80120b8:	f7ff fd12 	bl	8011ae0 <RegionCommonChanVerifyDr>
 80120bc:	0003      	movs	r3, r0
 80120be:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80120c0:	2301      	movs	r3, #1
 80120c2:	4053      	eors	r3, r2
 80120c4:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d005      	beq.n	80120d6 <RegionCommonLinkAdrReqVerifyParams+0xae>
        {
            status &= 0xFD; // Datarate KO
 80120ca:	19bb      	adds	r3, r7, r6
 80120cc:	19ba      	adds	r2, r7, r6
 80120ce:	7812      	ldrb	r2, [r2, #0]
 80120d0:	2102      	movs	r1, #2
 80120d2:	438a      	bics	r2, r1
 80120d4:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	211d      	movs	r1, #29
 80120da:	5659      	ldrsb	r1, [r3, r1]
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	221c      	movs	r2, #28
 80120e0:	569a      	ldrsb	r2, [r3, r2]
 80120e2:	2415      	movs	r4, #21
 80120e4:	193b      	adds	r3, r7, r4
 80120e6:	781b      	ldrb	r3, [r3, #0]
 80120e8:	b25b      	sxtb	r3, r3
 80120ea:	0018      	movs	r0, r3
 80120ec:	f7ff fd91 	bl	8011c12 <RegionCommonValueInRange>
 80120f0:	1e03      	subs	r3, r0, #0
 80120f2:	d113      	bne.n	801211c <RegionCommonLinkAdrReqVerifyParams+0xf4>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	7f5b      	ldrb	r3, [r3, #29]
 80120f8:	b25b      	sxtb	r3, r3
 80120fa:	193a      	adds	r2, r7, r4
 80120fc:	7812      	ldrb	r2, [r2, #0]
 80120fe:	b252      	sxtb	r2, r2
 8012100:	429a      	cmp	r2, r3
 8012102:	da04      	bge.n	801210e <RegionCommonLinkAdrReqVerifyParams+0xe6>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8012104:	193b      	adds	r3, r7, r4
 8012106:	68fa      	ldr	r2, [r7, #12]
 8012108:	7f52      	ldrb	r2, [r2, #29]
 801210a:	701a      	strb	r2, [r3, #0]
 801210c:	e006      	b.n	801211c <RegionCommonLinkAdrReqVerifyParams+0xf4>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 801210e:	2217      	movs	r2, #23
 8012110:	18bb      	adds	r3, r7, r2
 8012112:	18ba      	adds	r2, r7, r2
 8012114:	7812      	ldrb	r2, [r2, #0]
 8012116:	2104      	movs	r1, #4
 8012118:	438a      	bics	r2, r1
 801211a:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801211c:	2317      	movs	r3, #23
 801211e:	18fb      	adds	r3, r7, r3
 8012120:	781b      	ldrb	r3, [r3, #0]
 8012122:	2b07      	cmp	r3, #7
 8012124:	d108      	bne.n	8012138 <RegionCommonLinkAdrReqVerifyParams+0x110>
    {
        if( nbRepetitions == 0 )
 8012126:	2214      	movs	r2, #20
 8012128:	18bb      	adds	r3, r7, r2
 801212a:	781b      	ldrb	r3, [r3, #0]
 801212c:	b25b      	sxtb	r3, r3
 801212e:	2b00      	cmp	r3, #0
 8012130:	d102      	bne.n	8012138 <RegionCommonLinkAdrReqVerifyParams+0x110>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8012132:	18bb      	adds	r3, r7, r2
 8012134:	2201      	movs	r2, #1
 8012136:	701a      	strb	r2, [r3, #0]
        }
    }

    // Apply changes
    *dr = datarate;
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	2216      	movs	r2, #22
 801213c:	18ba      	adds	r2, r7, r2
 801213e:	7812      	ldrb	r2, [r2, #0]
 8012140:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	2215      	movs	r2, #21
 8012146:	18ba      	adds	r2, r7, r2
 8012148:	7812      	ldrb	r2, [r2, #0]
 801214a:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801214c:	2314      	movs	r3, #20
 801214e:	18fb      	adds	r3, r7, r3
 8012150:	781a      	ldrb	r2, [r3, #0]
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	701a      	strb	r2, [r3, #0]

    return status;
 8012156:	2317      	movs	r3, #23
 8012158:	18fb      	adds	r3, r7, r3
 801215a:	781b      	ldrb	r3, [r3, #0]
}
 801215c:	0018      	movs	r0, r3
 801215e:	46bd      	mov	sp, r7
 8012160:	b007      	add	sp, #28
 8012162:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012164 <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 8012164:	b5b0      	push	{r4, r5, r7, lr}
 8012166:	b082      	sub	sp, #8
 8012168:	af00      	add	r7, sp, #0
 801216a:	0002      	movs	r2, r0
 801216c:	6039      	str	r1, [r7, #0]
 801216e:	1dfb      	adds	r3, r7, #7
 8012170:	701a      	strb	r2, [r3, #0]
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 8012172:	1dfb      	adds	r3, r7, #7
 8012174:	781b      	ldrb	r3, [r3, #0]
 8012176:	2201      	movs	r2, #1
 8012178:	409a      	lsls	r2, r3
 801217a:	0013      	movs	r3, r2
 801217c:	0018      	movs	r0, r3
 801217e:	f7f0 fe4f 	bl	8002e20 <__aeabi_i2d>
 8012182:	0004      	movs	r4, r0
 8012184:	000d      	movs	r5, r1
 8012186:	6838      	ldr	r0, [r7, #0]
 8012188:	f7f0 fe78 	bl	8002e7c <__aeabi_ui2d>
 801218c:	0002      	movs	r2, r0
 801218e:	000b      	movs	r3, r1
 8012190:	0020      	movs	r0, r4
 8012192:	0029      	movs	r1, r5
 8012194:	f7ef fb60 	bl	8001858 <__aeabi_ddiv>
 8012198:	0002      	movs	r2, r0
 801219a:	000b      	movs	r3, r1
 801219c:	0010      	movs	r0, r2
 801219e:	0019      	movs	r1, r3
 80121a0:	2200      	movs	r2, #0
 80121a2:	4b05      	ldr	r3, [pc, #20]	@ (80121b8 <RegionCommonComputeSymbolTimeLoRa+0x54>)
 80121a4:	f7ef ff9c 	bl	80020e0 <__aeabi_dmul>
 80121a8:	0002      	movs	r2, r0
 80121aa:	000b      	movs	r3, r1
}
 80121ac:	0010      	movs	r0, r2
 80121ae:	0019      	movs	r1, r3
 80121b0:	46bd      	mov	sp, r7
 80121b2:	b002      	add	sp, #8
 80121b4:	bdb0      	pop	{r4, r5, r7, pc}
 80121b6:	46c0      	nop			@ (mov r8, r8)
 80121b8:	408f4000 	.word	0x408f4000

080121bc <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b082      	sub	sp, #8
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	0002      	movs	r2, r0
 80121c4:	1dfb      	adds	r3, r7, #7
 80121c6:	701a      	strb	r2, [r3, #0]
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
 80121c8:	1dfb      	adds	r3, r7, #7
 80121ca:	781b      	ldrb	r3, [r3, #0]
 80121cc:	0018      	movs	r0, r3
 80121ce:	f7f0 fe55 	bl	8002e7c <__aeabi_ui2d>
 80121d2:	0002      	movs	r2, r0
 80121d4:	000b      	movs	r3, r1
 80121d6:	2000      	movs	r0, #0
 80121d8:	4904      	ldr	r1, [pc, #16]	@ (80121ec <RegionCommonComputeSymbolTimeFsk+0x30>)
 80121da:	f7ef fb3d 	bl	8001858 <__aeabi_ddiv>
 80121de:	0002      	movs	r2, r0
 80121e0:	000b      	movs	r3, r1
}
 80121e2:	0010      	movs	r0, r2
 80121e4:	0019      	movs	r1, r3
 80121e6:	46bd      	mov	sp, r7
 80121e8:	b002      	add	sp, #8
 80121ea:	bd80      	pop	{r7, pc}
 80121ec:	40200000 	.word	0x40200000

080121f0 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 80121f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121f2:	b085      	sub	sp, #20
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	60b8      	str	r0, [r7, #8]
 80121f8:	60f9      	str	r1, [r7, #12]
 80121fa:	603b      	str	r3, [r7, #0]
 80121fc:	1dfb      	adds	r3, r7, #7
 80121fe:	701a      	strb	r2, [r3, #0]
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 8012200:	1dfb      	adds	r3, r7, #7
 8012202:	781e      	ldrb	r6, [r3, #0]
 8012204:	1dfb      	adds	r3, r7, #7
 8012206:	781b      	ldrb	r3, [r3, #0]
 8012208:	3b04      	subs	r3, #4
 801220a:	005b      	lsls	r3, r3, #1
 801220c:	0018      	movs	r0, r3
 801220e:	f7f0 fe07 	bl	8002e20 <__aeabi_i2d>
 8012212:	68ba      	ldr	r2, [r7, #8]
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	f7ef ff63 	bl	80020e0 <__aeabi_dmul>
 801221a:	0002      	movs	r2, r0
 801221c:	000b      	movs	r3, r1
 801221e:	0014      	movs	r4, r2
 8012220:	001d      	movs	r5, r3
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	005b      	lsls	r3, r3, #1
 8012226:	0018      	movs	r0, r3
 8012228:	f7f0 fe28 	bl	8002e7c <__aeabi_ui2d>
 801222c:	0002      	movs	r2, r0
 801222e:	000b      	movs	r3, r1
 8012230:	0020      	movs	r0, r4
 8012232:	0029      	movs	r1, r5
 8012234:	f7ee ffac 	bl	8001190 <__aeabi_dadd>
 8012238:	0002      	movs	r2, r0
 801223a:	000b      	movs	r3, r1
 801223c:	0010      	movs	r0, r2
 801223e:	0019      	movs	r1, r3
 8012240:	68ba      	ldr	r2, [r7, #8]
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	f7ef fb08 	bl	8001858 <__aeabi_ddiv>
 8012248:	0002      	movs	r2, r0
 801224a:	000b      	movs	r3, r1
 801224c:	0010      	movs	r0, r2
 801224e:	0019      	movs	r1, r3
 8012250:	f008 f824 	bl	801a29c <ceil>
 8012254:	0002      	movs	r2, r0
 8012256:	000b      	movs	r3, r1
 8012258:	0010      	movs	r0, r2
 801225a:	0019      	movs	r1, r3
 801225c:	f7ee f984 	bl	8000568 <__aeabi_d2uiz>
 8012260:	0002      	movs	r2, r0
 8012262:	0033      	movs	r3, r6
 8012264:	4293      	cmp	r3, r2
 8012266:	d200      	bcs.n	801226a <RegionCommonComputeRxWindowParameters+0x7a>
 8012268:	0013      	movs	r3, r2
 801226a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801226c:	6013      	str	r3, [r2, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 801226e:	2200      	movs	r2, #0
 8012270:	4b20      	ldr	r3, [pc, #128]	@ (80122f4 <RegionCommonComputeRxWindowParameters+0x104>)
 8012272:	68b8      	ldr	r0, [r7, #8]
 8012274:	68f9      	ldr	r1, [r7, #12]
 8012276:	f7ef ff33 	bl	80020e0 <__aeabi_dmul>
 801227a:	0002      	movs	r2, r0
 801227c:	000b      	movs	r3, r1
 801227e:	0014      	movs	r4, r2
 8012280:	001d      	movs	r5, r3
 8012282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	0018      	movs	r0, r3
 8012288:	f7f0 fdf8 	bl	8002e7c <__aeabi_ui2d>
 801228c:	68ba      	ldr	r2, [r7, #8]
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	f7ef ff26 	bl	80020e0 <__aeabi_dmul>
 8012294:	0002      	movs	r2, r0
 8012296:	000b      	movs	r3, r1
 8012298:	0010      	movs	r0, r2
 801229a:	0019      	movs	r1, r3
 801229c:	2200      	movs	r2, #0
 801229e:	2380      	movs	r3, #128	@ 0x80
 80122a0:	05db      	lsls	r3, r3, #23
 80122a2:	f7ef fad9 	bl	8001858 <__aeabi_ddiv>
 80122a6:	0002      	movs	r2, r0
 80122a8:	000b      	movs	r3, r1
 80122aa:	0020      	movs	r0, r4
 80122ac:	0029      	movs	r1, r5
 80122ae:	f7f0 f9df 	bl	8002670 <__aeabi_dsub>
 80122b2:	0002      	movs	r2, r0
 80122b4:	000b      	movs	r3, r1
 80122b6:	0014      	movs	r4, r2
 80122b8:	001d      	movs	r5, r3
 80122ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80122bc:	f7f0 fdde 	bl	8002e7c <__aeabi_ui2d>
 80122c0:	0002      	movs	r2, r0
 80122c2:	000b      	movs	r3, r1
 80122c4:	0020      	movs	r0, r4
 80122c6:	0029      	movs	r1, r5
 80122c8:	f7f0 f9d2 	bl	8002670 <__aeabi_dsub>
 80122cc:	0002      	movs	r2, r0
 80122ce:	000b      	movs	r3, r1
 80122d0:	0010      	movs	r0, r2
 80122d2:	0019      	movs	r1, r3
 80122d4:	f007 ffe2 	bl	801a29c <ceil>
 80122d8:	0002      	movs	r2, r0
 80122da:	000b      	movs	r3, r1
 80122dc:	0010      	movs	r0, r2
 80122de:	0019      	movs	r1, r3
 80122e0:	f7f0 fd62 	bl	8002da8 <__aeabi_d2iz>
 80122e4:	0002      	movs	r2, r0
 80122e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122e8:	601a      	str	r2, [r3, #0]
}
 80122ea:	46c0      	nop			@ (mov r8, r8)
 80122ec:	46bd      	mov	sp, r7
 80122ee:	b005      	add	sp, #20
 80122f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122f2:	46c0      	nop			@ (mov r8, r8)
 80122f4:	40100000 	.word	0x40100000

080122f8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80122f8:	b5b0      	push	{r4, r5, r7, lr}
 80122fa:	b086      	sub	sp, #24
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	60b9      	str	r1, [r7, #8]
 8012300:	607a      	str	r2, [r7, #4]
 8012302:	210f      	movs	r1, #15
 8012304:	187b      	adds	r3, r7, r1
 8012306:	1c02      	adds	r2, r0, #0
 8012308:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 0;
 801230a:	2417      	movs	r4, #23
 801230c:	193b      	adds	r3, r7, r4
 801230e:	2200      	movs	r2, #0
 8012310:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8012312:	187b      	adds	r3, r7, r1
 8012314:	781b      	ldrb	r3, [r3, #0]
 8012316:	b25b      	sxtb	r3, r3
 8012318:	005b      	lsls	r3, r3, #1
 801231a:	0018      	movs	r0, r3
 801231c:	f7ee fef6 	bl	800110c <__aeabi_ui2f>
 8012320:	1c03      	adds	r3, r0, #0
 8012322:	1c19      	adds	r1, r3, #0
 8012324:	68b8      	ldr	r0, [r7, #8]
 8012326:	f7ee fd2d 	bl	8000d84 <__aeabi_fsub>
 801232a:	1c03      	adds	r3, r0, #0
 801232c:	6879      	ldr	r1, [r7, #4]
 801232e:	1c18      	adds	r0, r3, #0
 8012330:	f7ee fd28 	bl	8000d84 <__aeabi_fsub>
 8012334:	1c03      	adds	r3, r0, #0
 8012336:	1c18      	adds	r0, r3, #0
 8012338:	f7f0 fdc4 	bl	8002ec4 <__aeabi_f2d>
 801233c:	0002      	movs	r2, r0
 801233e:	000b      	movs	r3, r1
 8012340:	0010      	movs	r0, r2
 8012342:	0019      	movs	r1, r3
 8012344:	f008 f822 	bl	801a38c <floor>
 8012348:	0002      	movs	r2, r0
 801234a:	000b      	movs	r3, r1
 801234c:	0025      	movs	r5, r4
 801234e:	193c      	adds	r4, r7, r4
 8012350:	0010      	movs	r0, r2
 8012352:	0019      	movs	r1, r3
 8012354:	f7f0 fd28 	bl	8002da8 <__aeabi_d2iz>
 8012358:	0003      	movs	r3, r0
 801235a:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
 801235c:	197b      	adds	r3, r7, r5
 801235e:	781b      	ldrb	r3, [r3, #0]
 8012360:	b25b      	sxtb	r3, r3
}
 8012362:	0018      	movs	r0, r3
 8012364:	46bd      	mov	sp, r7
 8012366:	b006      	add	sp, #24
 8012368:	bdb0      	pop	{r4, r5, r7, pc}

0801236a <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
 801236a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801236c:	b085      	sub	sp, #20
 801236e:	af00      	add	r7, sp, #0
 8012370:	6078      	str	r0, [r7, #4]
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681a      	ldr	r2, [r3, #0]
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	7adb      	ldrb	r3, [r3, #11]
 801237a:	0019      	movs	r1, r3
 801237c:	000b      	movs	r3, r1
 801237e:	005b      	lsls	r3, r3, #1
 8012380:	185b      	adds	r3, r3, r1
 8012382:	009b      	lsls	r3, r3, #2
 8012384:	18d2      	adds	r2, r2, r3
 8012386:	210f      	movs	r1, #15
 8012388:	187b      	adds	r3, r7, r1
 801238a:	7a52      	ldrb	r2, [r2, #9]
 801238c:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	685a      	ldr	r2, [r3, #4]
 8012392:	187b      	adds	r3, r7, r1
 8012394:	781b      	ldrb	r3, [r3, #0]
 8012396:	011b      	lsls	r3, r3, #4
 8012398:	18d2      	adds	r2, r2, r3
 801239a:	250c      	movs	r5, #12
 801239c:	197b      	adds	r3, r7, r5
 801239e:	8812      	ldrh	r2, [r2, #0]
 80123a0:	801a      	strh	r2, [r3, #0]
    uint16_t joinDutyCycle = 0;
 80123a2:	200a      	movs	r0, #10
 80123a4:	183b      	adds	r3, r7, r0
 80123a6:	2200      	movs	r2, #0
 80123a8:	801a      	strh	r2, [r3, #0]

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	685a      	ldr	r2, [r3, #4]
 80123ae:	187b      	adds	r3, r7, r1
 80123b0:	781b      	ldrb	r3, [r3, #0]
 80123b2:	011b      	lsls	r3, r3, #4
 80123b4:	18d3      	adds	r3, r2, r3
 80123b6:	2200      	movs	r2, #0
 80123b8:	60da      	str	r2, [r3, #12]

    if( calcBackOffParams->Joined == false )
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	7a5b      	ldrb	r3, [r3, #9]
 80123be:	2201      	movs	r2, #1
 80123c0:	4053      	eors	r3, r2
 80123c2:	b2db      	uxtb	r3, r3
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d03b      	beq.n	8012440 <RegionCommonCalcBackOff+0xd6>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	68db      	ldr	r3, [r3, #12]
 80123cc:	0006      	movs	r6, r0
 80123ce:	183c      	adds	r4, r7, r0
 80123d0:	0018      	movs	r0, r3
 80123d2:	f7ff fb59 	bl	8011a88 <RegionCommonGetJoinDc>
 80123d6:	0003      	movs	r3, r0
 80123d8:	8023      	strh	r3, [r4, #0]
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80123da:	197a      	adds	r2, r7, r5
 80123dc:	19bb      	adds	r3, r7, r6
 80123de:	1979      	adds	r1, r7, r5
 80123e0:	880c      	ldrh	r4, [r1, #0]
 80123e2:	881b      	ldrh	r3, [r3, #0]
 80123e4:	b298      	uxth	r0, r3
 80123e6:	b2a1      	uxth	r1, r4
 80123e8:	4288      	cmp	r0, r1
 80123ea:	d200      	bcs.n	80123ee <RegionCommonCalcBackOff+0x84>
 80123ec:	1c23      	adds	r3, r4, #0
 80123ee:	8013      	strh	r3, [r2, #0]
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	7a9b      	ldrb	r3, [r3, #10]
 80123f4:	2201      	movs	r2, #1
 80123f6:	4053      	eors	r3, r2
 80123f8:	b2db      	uxtb	r3, r3
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d010      	beq.n	8012420 <RegionCommonCalcBackOff+0xb6>
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	7a1b      	ldrb	r3, [r3, #8]
 8012402:	2201      	movs	r2, #1
 8012404:	4053      	eors	r3, r2
 8012406:	b2db      	uxtb	r3, r3
 8012408:	2b00      	cmp	r3, #0
 801240a:	d009      	beq.n	8012420 <RegionCommonCalcBackOff+0xb6>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	685a      	ldr	r2, [r3, #4]
 8012410:	230f      	movs	r3, #15
 8012412:	18fb      	adds	r3, r7, r3
 8012414:	781b      	ldrb	r3, [r3, #0]
 8012416:	011b      	lsls	r3, r3, #4
 8012418:	18d3      	adds	r3, r2, r3
 801241a:	2200      	movs	r2, #0
 801241c:	60da      	str	r2, [r3, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
 801241e:	e02c      	b.n	801247a <RegionCommonCalcBackOff+0x110>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 8012420:	230c      	movs	r3, #12
 8012422:	18fb      	adds	r3, r7, r3
 8012424:	881b      	ldrh	r3, [r3, #0]
 8012426:	1e5a      	subs	r2, r3, #1
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	6919      	ldr	r1, [r3, #16]
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	6858      	ldr	r0, [r3, #4]
 8012430:	230f      	movs	r3, #15
 8012432:	18fb      	adds	r3, r7, r3
 8012434:	781b      	ldrb	r3, [r3, #0]
 8012436:	011b      	lsls	r3, r3, #4
 8012438:	18c3      	adds	r3, r0, r3
 801243a:	434a      	muls	r2, r1
 801243c:	60da      	str	r2, [r3, #12]
}
 801243e:	e01c      	b.n	801247a <RegionCommonCalcBackOff+0x110>
        if( calcBackOffParams->DutyCycleEnabled == true )
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	7a9b      	ldrb	r3, [r3, #10]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d00f      	beq.n	8012468 <RegionCommonCalcBackOff+0xfe>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 8012448:	230c      	movs	r3, #12
 801244a:	18fb      	adds	r3, r7, r3
 801244c:	881b      	ldrh	r3, [r3, #0]
 801244e:	1e5a      	subs	r2, r3, #1
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	6919      	ldr	r1, [r3, #16]
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	6858      	ldr	r0, [r3, #4]
 8012458:	230f      	movs	r3, #15
 801245a:	18fb      	adds	r3, r7, r3
 801245c:	781b      	ldrb	r3, [r3, #0]
 801245e:	011b      	lsls	r3, r3, #4
 8012460:	18c3      	adds	r3, r0, r3
 8012462:	434a      	muls	r2, r1
 8012464:	60da      	str	r2, [r3, #12]
}
 8012466:	e008      	b.n	801247a <RegionCommonCalcBackOff+0x110>
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	685a      	ldr	r2, [r3, #4]
 801246c:	230f      	movs	r3, #15
 801246e:	18fb      	adds	r3, r7, r3
 8012470:	781b      	ldrb	r3, [r3, #0]
 8012472:	011b      	lsls	r3, r3, #4
 8012474:	18d3      	adds	r3, r2, r3
 8012476:	2200      	movs	r2, #0
 8012478:	60da      	str	r2, [r3, #12]
}
 801247a:	46c0      	nop			@ (mov r8, r8)
 801247c:	46bd      	mov	sp, r7
 801247e:	b005      	add	sp, #20
 8012480:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012482 <GetNextLowerTxDr>:
 */
static RegionIN865NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8012482:	b580      	push	{r7, lr}
 8012484:	b084      	sub	sp, #16
 8012486:	af00      	add	r7, sp, #0
 8012488:	0002      	movs	r2, r0
 801248a:	1dfb      	adds	r3, r7, #7
 801248c:	701a      	strb	r2, [r3, #0]
 801248e:	1dbb      	adds	r3, r7, #6
 8012490:	1c0a      	adds	r2, r1, #0
 8012492:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8012494:	210f      	movs	r1, #15
 8012496:	187b      	adds	r3, r7, r1
 8012498:	2200      	movs	r2, #0
 801249a:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 801249c:	1dfa      	adds	r2, r7, #7
 801249e:	1dbb      	adds	r3, r7, #6
 80124a0:	7812      	ldrb	r2, [r2, #0]
 80124a2:	b252      	sxtb	r2, r2
 80124a4:	781b      	ldrb	r3, [r3, #0]
 80124a6:	b25b      	sxtb	r3, r3
 80124a8:	429a      	cmp	r2, r3
 80124aa:	d104      	bne.n	80124b6 <GetNextLowerTxDr+0x34>
    {
        nextLowerDr = minDr;
 80124ac:	187b      	adds	r3, r7, r1
 80124ae:	1dba      	adds	r2, r7, #6
 80124b0:	7812      	ldrb	r2, [r2, #0]
 80124b2:	701a      	strb	r2, [r3, #0]
 80124b4:	e00f      	b.n	80124d6 <GetNextLowerTxDr+0x54>
    }
    else if( dr == DR_7 )
 80124b6:	1dfb      	adds	r3, r7, #7
 80124b8:	781b      	ldrb	r3, [r3, #0]
 80124ba:	b25b      	sxtb	r3, r3
 80124bc:	2b07      	cmp	r3, #7
 80124be:	d104      	bne.n	80124ca <GetNextLowerTxDr+0x48>
    {
        nextLowerDr = DR_5;
 80124c0:	230f      	movs	r3, #15
 80124c2:	18fb      	adds	r3, r7, r3
 80124c4:	2205      	movs	r2, #5
 80124c6:	701a      	strb	r2, [r3, #0]
 80124c8:	e005      	b.n	80124d6 <GetNextLowerTxDr+0x54>
    }
    else
    {
        nextLowerDr = dr - 1;
 80124ca:	1dfb      	adds	r3, r7, #7
 80124cc:	781a      	ldrb	r2, [r3, #0]
 80124ce:	230f      	movs	r3, #15
 80124d0:	18fb      	adds	r3, r7, r3
 80124d2:	3a01      	subs	r2, #1
 80124d4:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 80124d6:	230f      	movs	r3, #15
 80124d8:	18fb      	adds	r3, r7, r3
 80124da:	781b      	ldrb	r3, [r3, #0]
 80124dc:	b25b      	sxtb	r3, r3
}
 80124de:	0018      	movs	r0, r3
 80124e0:	46bd      	mov	sp, r7
 80124e2:	b004      	add	sp, #16
 80124e4:	bd80      	pop	{r7, pc}
	...

080124e8 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b082      	sub	sp, #8
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
    switch( BandwidthsIN865[drIndex] )
 80124f0:	4b09      	ldr	r3, [pc, #36]	@ (8012518 <GetBandwidth+0x30>)
 80124f2:	687a      	ldr	r2, [r7, #4]
 80124f4:	0092      	lsls	r2, r2, #2
 80124f6:	58d3      	ldr	r3, [r2, r3]
 80124f8:	4a08      	ldr	r2, [pc, #32]	@ (801251c <GetBandwidth+0x34>)
 80124fa:	4293      	cmp	r3, r2
 80124fc:	d004      	beq.n	8012508 <GetBandwidth+0x20>
 80124fe:	4a08      	ldr	r2, [pc, #32]	@ (8012520 <GetBandwidth+0x38>)
 8012500:	4293      	cmp	r3, r2
 8012502:	d003      	beq.n	801250c <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8012504:	2300      	movs	r3, #0
 8012506:	e002      	b.n	801250e <GetBandwidth+0x26>
        case 250000:
            return 1;
 8012508:	2301      	movs	r3, #1
 801250a:	e000      	b.n	801250e <GetBandwidth+0x26>
        case 500000:
            return 2;
 801250c:	2302      	movs	r3, #2
    }
}
 801250e:	0018      	movs	r0, r3
 8012510:	46bd      	mov	sp, r7
 8012512:	b002      	add	sp, #8
 8012514:	bd80      	pop	{r7, pc}
 8012516:	46c0      	nop			@ (mov r8, r8)
 8012518:	0801b3c4 	.word	0x0801b3c4
 801251c:	0003d090 	.word	0x0003d090
 8012520:	0007a120 	.word	0x0007a120

08012524 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8012524:	b590      	push	{r4, r7, lr}
 8012526:	b085      	sub	sp, #20
 8012528:	af00      	add	r7, sp, #0
 801252a:	0004      	movs	r4, r0
 801252c:	0008      	movs	r0, r1
 801252e:	0011      	movs	r1, r2
 8012530:	603b      	str	r3, [r7, #0]
 8012532:	1dfb      	adds	r3, r7, #7
 8012534:	1c22      	adds	r2, r4, #0
 8012536:	701a      	strb	r2, [r3, #0]
 8012538:	1dbb      	adds	r3, r7, #6
 801253a:	1c02      	adds	r2, r0, #0
 801253c:	701a      	strb	r2, [r3, #0]
 801253e:	1d7b      	adds	r3, r7, #5
 8012540:	1c0a      	adds	r2, r1, #0
 8012542:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8012544:	210f      	movs	r1, #15
 8012546:	187b      	adds	r3, r7, r1
 8012548:	1dfa      	adds	r2, r7, #7
 801254a:	7812      	ldrb	r2, [r2, #0]
 801254c:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 801254e:	187a      	adds	r2, r7, r1
 8012550:	1dbb      	adds	r3, r7, #6
 8012552:	1df9      	adds	r1, r7, #7
 8012554:	780c      	ldrb	r4, [r1, #0]
 8012556:	781b      	ldrb	r3, [r3, #0]
 8012558:	b258      	sxtb	r0, r3
 801255a:	b261      	sxtb	r1, r4
 801255c:	4288      	cmp	r0, r1
 801255e:	da00      	bge.n	8012562 <LimitTxPower+0x3e>
 8012560:	1c23      	adds	r3, r4, #0
 8012562:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8012564:	230f      	movs	r3, #15
 8012566:	18fb      	adds	r3, r7, r3
 8012568:	781b      	ldrb	r3, [r3, #0]
 801256a:	b25b      	sxtb	r3, r3
}
 801256c:	0018      	movs	r0, r3
 801256e:	46bd      	mov	sp, r7
 8012570:	b005      	add	sp, #20
 8012572:	bd90      	pop	{r4, r7, pc}

08012574 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b082      	sub	sp, #8
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801257c:	4b0e      	ldr	r3, [pc, #56]	@ (80125b8 <VerifyRfFreq+0x44>)
 801257e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012580:	687a      	ldr	r2, [r7, #4]
 8012582:	0010      	movs	r0, r2
 8012584:	4798      	blx	r3
 8012586:	0003      	movs	r3, r0
 8012588:	001a      	movs	r2, r3
 801258a:	2301      	movs	r3, #1
 801258c:	4053      	eors	r3, r2
 801258e:	b2db      	uxtb	r3, r3
 8012590:	2b00      	cmp	r3, #0
 8012592:	d001      	beq.n	8012598 <VerifyRfFreq+0x24>
    {
        return false;
 8012594:	2300      	movs	r3, #0
 8012596:	e00a      	b.n	80125ae <VerifyRfFreq+0x3a>
    }

    if( ( freq < 865000000 ) || ( freq > 867000000 ) )
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	4a08      	ldr	r2, [pc, #32]	@ (80125bc <VerifyRfFreq+0x48>)
 801259c:	4293      	cmp	r3, r2
 801259e:	d903      	bls.n	80125a8 <VerifyRfFreq+0x34>
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	4a07      	ldr	r2, [pc, #28]	@ (80125c0 <VerifyRfFreq+0x4c>)
 80125a4:	4293      	cmp	r3, r2
 80125a6:	d901      	bls.n	80125ac <VerifyRfFreq+0x38>
    {
        return false;
 80125a8:	2300      	movs	r3, #0
 80125aa:	e000      	b.n	80125ae <VerifyRfFreq+0x3a>
    }
    return true;
 80125ac:	2301      	movs	r3, #1
}
 80125ae:	0018      	movs	r0, r3
 80125b0:	46bd      	mov	sp, r7
 80125b2:	b002      	add	sp, #8
 80125b4:	bd80      	pop	{r7, pc}
 80125b6:	46c0      	nop			@ (mov r8, r8)
 80125b8:	0801ac88 	.word	0x0801ac88
 80125bc:	338eda3f 	.word	0x338eda3f
 80125c0:	33ad5ec0 	.word	0x33ad5ec0

080125c4 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 80125c4:	b5b0      	push	{r4, r5, r7, lr}
 80125c6:	b086      	sub	sp, #24
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	60ba      	str	r2, [r7, #8]
 80125cc:	607b      	str	r3, [r7, #4]
 80125ce:	230f      	movs	r3, #15
 80125d0:	18fb      	adds	r3, r7, r3
 80125d2:	1c02      	adds	r2, r0, #0
 80125d4:	701a      	strb	r2, [r3, #0]
 80125d6:	230e      	movs	r3, #14
 80125d8:	18fb      	adds	r3, r7, r3
 80125da:	1c0a      	adds	r2, r1, #0
 80125dc:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 80125de:	2317      	movs	r3, #23
 80125e0:	18fb      	adds	r3, r7, r3
 80125e2:	2200      	movs	r2, #0
 80125e4:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 80125e6:	2316      	movs	r3, #22
 80125e8:	18fb      	adds	r3, r7, r3
 80125ea:	2200      	movs	r2, #0
 80125ec:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < IN865_MAX_NB_CHANNELS; i += 16, k++ )
 80125ee:	2315      	movs	r3, #21
 80125f0:	18fb      	adds	r3, r7, r3
 80125f2:	2200      	movs	r2, #0
 80125f4:	701a      	strb	r2, [r3, #0]
 80125f6:	2314      	movs	r3, #20
 80125f8:	18fb      	adds	r3, r7, r3
 80125fa:	2200      	movs	r2, #0
 80125fc:	701a      	strb	r2, [r3, #0]
 80125fe:	e0b0      	b.n	8012762 <CountNbOfEnabledChannels+0x19e>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8012600:	2313      	movs	r3, #19
 8012602:	18fb      	adds	r3, r7, r3
 8012604:	2200      	movs	r2, #0
 8012606:	701a      	strb	r2, [r3, #0]
 8012608:	e099      	b.n	801273e <CountNbOfEnabledChannels+0x17a>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 801260a:	2314      	movs	r3, #20
 801260c:	18fb      	adds	r3, r7, r3
 801260e:	781b      	ldrb	r3, [r3, #0]
 8012610:	005b      	lsls	r3, r3, #1
 8012612:	68ba      	ldr	r2, [r7, #8]
 8012614:	18d3      	adds	r3, r2, r3
 8012616:	881b      	ldrh	r3, [r3, #0]
 8012618:	001a      	movs	r2, r3
 801261a:	2113      	movs	r1, #19
 801261c:	187b      	adds	r3, r7, r1
 801261e:	781b      	ldrb	r3, [r3, #0]
 8012620:	411a      	asrs	r2, r3
 8012622:	0013      	movs	r3, r2
 8012624:	2201      	movs	r2, #1
 8012626:	4013      	ands	r3, r2
 8012628:	d100      	bne.n	801262c <CountNbOfEnabledChannels+0x68>
 801262a:	e082      	b.n	8012732 <CountNbOfEnabledChannels+0x16e>
            {
                if( channels[i + j].Frequency == 0 )
 801262c:	2315      	movs	r3, #21
 801262e:	18fb      	adds	r3, r7, r3
 8012630:	781a      	ldrb	r2, [r3, #0]
 8012632:	187b      	adds	r3, r7, r1
 8012634:	781b      	ldrb	r3, [r3, #0]
 8012636:	18d3      	adds	r3, r2, r3
 8012638:	001a      	movs	r2, r3
 801263a:	0013      	movs	r3, r2
 801263c:	005b      	lsls	r3, r3, #1
 801263e:	189b      	adds	r3, r3, r2
 8012640:	009b      	lsls	r3, r3, #2
 8012642:	001a      	movs	r2, r3
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	189b      	adds	r3, r3, r2
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d06c      	beq.n	8012728 <CountNbOfEnabledChannels+0x164>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 801264e:	230f      	movs	r3, #15
 8012650:	18fb      	adds	r3, r7, r3
 8012652:	781b      	ldrb	r3, [r3, #0]
 8012654:	2201      	movs	r2, #1
 8012656:	4053      	eors	r3, r2
 8012658:	b2db      	uxtb	r3, r3
 801265a:	2b00      	cmp	r3, #0
 801265c:	d007      	beq.n	801266e <CountNbOfEnabledChannels+0xaa>
                {
                    if( ( IN865_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 801265e:	187b      	adds	r3, r7, r1
 8012660:	781b      	ldrb	r3, [r3, #0]
 8012662:	2207      	movs	r2, #7
 8012664:	411a      	asrs	r2, r3
 8012666:	0013      	movs	r3, r2
 8012668:	2201      	movs	r2, #1
 801266a:	4013      	ands	r3, r2
 801266c:	d05e      	beq.n	801272c <CountNbOfEnabledChannels+0x168>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 801266e:	230e      	movs	r3, #14
 8012670:	18fb      	adds	r3, r7, r3
 8012672:	2000      	movs	r0, #0
 8012674:	5618      	ldrsb	r0, [r3, r0]
 8012676:	2415      	movs	r4, #21
 8012678:	193b      	adds	r3, r7, r4
 801267a:	781a      	ldrb	r2, [r3, #0]
 801267c:	2513      	movs	r5, #19
 801267e:	197b      	adds	r3, r7, r5
 8012680:	781b      	ldrb	r3, [r3, #0]
 8012682:	18d3      	adds	r3, r2, r3
 8012684:	001a      	movs	r2, r3
 8012686:	0013      	movs	r3, r2
 8012688:	005b      	lsls	r3, r3, #1
 801268a:	189b      	adds	r3, r3, r2
 801268c:	009b      	lsls	r3, r3, #2
 801268e:	001a      	movs	r2, r3
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	189b      	adds	r3, r3, r2
 8012694:	7a1b      	ldrb	r3, [r3, #8]
 8012696:	011b      	lsls	r3, r3, #4
 8012698:	b25b      	sxtb	r3, r3
 801269a:	111b      	asrs	r3, r3, #4
 801269c:	b25b      	sxtb	r3, r3
 801269e:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 80126a0:	193b      	adds	r3, r7, r4
 80126a2:	781a      	ldrb	r2, [r3, #0]
 80126a4:	197b      	adds	r3, r7, r5
 80126a6:	781b      	ldrb	r3, [r3, #0]
 80126a8:	18d3      	adds	r3, r2, r3
 80126aa:	001a      	movs	r2, r3
 80126ac:	0013      	movs	r3, r2
 80126ae:	005b      	lsls	r3, r3, #1
 80126b0:	189b      	adds	r3, r3, r2
 80126b2:	009b      	lsls	r3, r3, #2
 80126b4:	001a      	movs	r2, r3
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	189b      	adds	r3, r3, r2
 80126ba:	7a1b      	ldrb	r3, [r3, #8]
 80126bc:	b25b      	sxtb	r3, r3
 80126be:	111b      	asrs	r3, r3, #4
 80126c0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 80126c2:	001a      	movs	r2, r3
 80126c4:	f7ff faa5 	bl	8011c12 <RegionCommonValueInRange>
 80126c8:	1e03      	subs	r3, r0, #0
 80126ca:	d031      	beq.n	8012730 <CountNbOfEnabledChannels+0x16c>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 80126cc:	193b      	adds	r3, r7, r4
 80126ce:	781a      	ldrb	r2, [r3, #0]
 80126d0:	197b      	adds	r3, r7, r5
 80126d2:	781b      	ldrb	r3, [r3, #0]
 80126d4:	18d3      	adds	r3, r2, r3
 80126d6:	001a      	movs	r2, r3
 80126d8:	0013      	movs	r3, r2
 80126da:	005b      	lsls	r3, r3, #1
 80126dc:	189b      	adds	r3, r3, r2
 80126de:	009b      	lsls	r3, r3, #2
 80126e0:	001a      	movs	r2, r3
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	189b      	adds	r3, r3, r2
 80126e6:	7a5b      	ldrb	r3, [r3, #9]
 80126e8:	011b      	lsls	r3, r3, #4
 80126ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80126ec:	18d3      	adds	r3, r2, r3
 80126ee:	68db      	ldr	r3, [r3, #12]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d006      	beq.n	8012702 <CountNbOfEnabledChannels+0x13e>
                { // Check if the band is available for transmission
                    delayTransmission++;
 80126f4:	2116      	movs	r1, #22
 80126f6:	187b      	adds	r3, r7, r1
 80126f8:	781a      	ldrb	r2, [r3, #0]
 80126fa:	187b      	adds	r3, r7, r1
 80126fc:	3201      	adds	r2, #1
 80126fe:	701a      	strb	r2, [r3, #0]
                    continue;
 8012700:	e017      	b.n	8012732 <CountNbOfEnabledChannels+0x16e>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 8012702:	2217      	movs	r2, #23
 8012704:	18bb      	adds	r3, r7, r2
 8012706:	781b      	ldrb	r3, [r3, #0]
 8012708:	18ba      	adds	r2, r7, r2
 801270a:	1c59      	adds	r1, r3, #1
 801270c:	7011      	strb	r1, [r2, #0]
 801270e:	001a      	movs	r2, r3
 8012710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012712:	189b      	adds	r3, r3, r2
 8012714:	2215      	movs	r2, #21
 8012716:	18b9      	adds	r1, r7, r2
 8012718:	2213      	movs	r2, #19
 801271a:	18ba      	adds	r2, r7, r2
 801271c:	7809      	ldrb	r1, [r1, #0]
 801271e:	7812      	ldrb	r2, [r2, #0]
 8012720:	188a      	adds	r2, r1, r2
 8012722:	b2d2      	uxtb	r2, r2
 8012724:	701a      	strb	r2, [r3, #0]
 8012726:	e004      	b.n	8012732 <CountNbOfEnabledChannels+0x16e>
                    continue;
 8012728:	46c0      	nop			@ (mov r8, r8)
 801272a:	e002      	b.n	8012732 <CountNbOfEnabledChannels+0x16e>
                        continue;
 801272c:	46c0      	nop			@ (mov r8, r8)
 801272e:	e000      	b.n	8012732 <CountNbOfEnabledChannels+0x16e>
                    continue;
 8012730:	46c0      	nop			@ (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 8012732:	2113      	movs	r1, #19
 8012734:	187b      	adds	r3, r7, r1
 8012736:	781a      	ldrb	r2, [r3, #0]
 8012738:	187b      	adds	r3, r7, r1
 801273a:	3201      	adds	r2, #1
 801273c:	701a      	strb	r2, [r3, #0]
 801273e:	2313      	movs	r3, #19
 8012740:	18fb      	adds	r3, r7, r3
 8012742:	781b      	ldrb	r3, [r3, #0]
 8012744:	2b0f      	cmp	r3, #15
 8012746:	d800      	bhi.n	801274a <CountNbOfEnabledChannels+0x186>
 8012748:	e75f      	b.n	801260a <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < IN865_MAX_NB_CHANNELS; i += 16, k++ )
 801274a:	2215      	movs	r2, #21
 801274c:	18bb      	adds	r3, r7, r2
 801274e:	18ba      	adds	r2, r7, r2
 8012750:	7812      	ldrb	r2, [r2, #0]
 8012752:	3210      	adds	r2, #16
 8012754:	701a      	strb	r2, [r3, #0]
 8012756:	2114      	movs	r1, #20
 8012758:	187b      	adds	r3, r7, r1
 801275a:	781a      	ldrb	r2, [r3, #0]
 801275c:	187b      	adds	r3, r7, r1
 801275e:	3201      	adds	r2, #1
 8012760:	701a      	strb	r2, [r3, #0]
 8012762:	2315      	movs	r3, #21
 8012764:	18fb      	adds	r3, r7, r3
 8012766:	781b      	ldrb	r3, [r3, #0]
 8012768:	2b0f      	cmp	r3, #15
 801276a:	d800      	bhi.n	801276e <CountNbOfEnabledChannels+0x1aa>
 801276c:	e748      	b.n	8012600 <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
 801276e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012770:	2216      	movs	r2, #22
 8012772:	18ba      	adds	r2, r7, r2
 8012774:	7812      	ldrb	r2, [r2, #0]
 8012776:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 8012778:	2317      	movs	r3, #23
 801277a:	18fb      	adds	r3, r7, r3
 801277c:	781b      	ldrb	r3, [r3, #0]
}
 801277e:	0018      	movs	r0, r3
 8012780:	46bd      	mov	sp, r7
 8012782:	b006      	add	sp, #24
 8012784:	bdb0      	pop	{r4, r5, r7, pc}
	...

08012788 <RegionIN865GetPhyParam>:

PhyParam_t RegionIN865GetPhyParam( GetPhyParams_t* getPhy )
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b084      	sub	sp, #16
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8012790:	2308      	movs	r3, #8
 8012792:	18fb      	adds	r3, r7, r3
 8012794:	2200      	movs	r2, #0
 8012796:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	781b      	ldrb	r3, [r3, #0]
 801279c:	2b35      	cmp	r3, #53	@ 0x35
 801279e:	d900      	bls.n	80127a2 <RegionIN865GetPhyParam+0x1a>
 80127a0:	e0cd      	b.n	801293e <RegionIN865GetPhyParam+0x1b6>
 80127a2:	009a      	lsls	r2, r3, #2
 80127a4:	4b6d      	ldr	r3, [pc, #436]	@ (801295c <RegionIN865GetPhyParam+0x1d4>)
 80127a6:	18d3      	adds	r3, r2, r3
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = IN865_RX_MIN_DATARATE;
 80127ac:	2308      	movs	r3, #8
 80127ae:	18fb      	adds	r3, r7, r3
 80127b0:	2200      	movs	r2, #0
 80127b2:	601a      	str	r2, [r3, #0]
            break;
 80127b4:	e0c4      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = IN865_TX_MIN_DATARATE;
 80127b6:	2308      	movs	r3, #8
 80127b8:	18fb      	adds	r3, r7, r3
 80127ba:	2200      	movs	r2, #0
 80127bc:	601a      	str	r2, [r3, #0]
            break;
 80127be:	e0bf      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = IN865_DEFAULT_DATARATE;
 80127c0:	2308      	movs	r3, #8
 80127c2:	18fb      	adds	r3, r7, r3
 80127c4:	2200      	movs	r2, #0
 80127c6:	601a      	str	r2, [r3, #0]
            break;
 80127c8:	e0ba      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, IN865_TX_MIN_DATARATE );
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	785b      	ldrb	r3, [r3, #1]
 80127ce:	b25b      	sxtb	r3, r3
 80127d0:	2100      	movs	r1, #0
 80127d2:	0018      	movs	r0, r3
 80127d4:	f7ff fe55 	bl	8012482 <GetNextLowerTxDr>
 80127d8:	0003      	movs	r3, r0
 80127da:	001a      	movs	r2, r3
 80127dc:	2308      	movs	r3, #8
 80127de:	18fb      	adds	r3, r7, r3
 80127e0:	601a      	str	r2, [r3, #0]
            break;
 80127e2:	e0ad      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = IN865_MAX_TX_POWER;
 80127e4:	2308      	movs	r3, #8
 80127e6:	18fb      	adds	r3, r7, r3
 80127e8:	2200      	movs	r2, #0
 80127ea:	601a      	str	r2, [r3, #0]
            break;
 80127ec:	e0a8      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = IN865_DEFAULT_TX_POWER;
 80127ee:	2308      	movs	r3, #8
 80127f0:	18fb      	adds	r3, r7, r3
 80127f2:	2200      	movs	r2, #0
 80127f4:	601a      	str	r2, [r3, #0]
            break;
 80127f6:	e0a3      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = IN865_ADR_ACK_LIMIT;
 80127f8:	2308      	movs	r3, #8
 80127fa:	18fb      	adds	r3, r7, r3
 80127fc:	2240      	movs	r2, #64	@ 0x40
 80127fe:	601a      	str	r2, [r3, #0]
            break;
 8012800:	e09e      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = IN865_ADR_ACK_DELAY;
 8012802:	2308      	movs	r3, #8
 8012804:	18fb      	adds	r3, r7, r3
 8012806:	2220      	movs	r2, #32
 8012808:	601a      	str	r2, [r3, #0]
            break;
 801280a:	e099      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateIN865[getPhy->Datarate];
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	785b      	ldrb	r3, [r3, #1]
 8012810:	b25b      	sxtb	r3, r3
 8012812:	001a      	movs	r2, r3
 8012814:	4b52      	ldr	r3, [pc, #328]	@ (8012960 <RegionIN865GetPhyParam+0x1d8>)
 8012816:	5c9b      	ldrb	r3, [r3, r2]
 8012818:	001a      	movs	r2, r3
 801281a:	2308      	movs	r3, #8
 801281c:	18fb      	adds	r3, r7, r3
 801281e:	601a      	str	r2, [r3, #0]
            break;
 8012820:	e08e      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterIN865[getPhy->Datarate];
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	785b      	ldrb	r3, [r3, #1]
 8012826:	b25b      	sxtb	r3, r3
 8012828:	001a      	movs	r2, r3
 801282a:	4b4e      	ldr	r3, [pc, #312]	@ (8012964 <RegionIN865GetPhyParam+0x1dc>)
 801282c:	5c9b      	ldrb	r3, [r3, r2]
 801282e:	001a      	movs	r2, r3
 8012830:	2308      	movs	r3, #8
 8012832:	18fb      	adds	r3, r7, r3
 8012834:	601a      	str	r2, [r3, #0]
            break;
 8012836:	e083      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = IN865_DUTY_CYCLE_ENABLED;
 8012838:	2308      	movs	r3, #8
 801283a:	18fb      	adds	r3, r7, r3
 801283c:	2201      	movs	r2, #1
 801283e:	601a      	str	r2, [r3, #0]
            break;
 8012840:	e07e      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = IN865_MAX_RX_WINDOW;
 8012842:	2308      	movs	r3, #8
 8012844:	18fb      	adds	r3, r7, r3
 8012846:	4a48      	ldr	r2, [pc, #288]	@ (8012968 <RegionIN865GetPhyParam+0x1e0>)
 8012848:	601a      	str	r2, [r3, #0]
            break;
 801284a:	e079      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = IN865_RECEIVE_DELAY1;
 801284c:	2308      	movs	r3, #8
 801284e:	18fb      	adds	r3, r7, r3
 8012850:	22fa      	movs	r2, #250	@ 0xfa
 8012852:	0092      	lsls	r2, r2, #2
 8012854:	601a      	str	r2, [r3, #0]
            break;
 8012856:	e073      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = IN865_RECEIVE_DELAY2;
 8012858:	2308      	movs	r3, #8
 801285a:	18fb      	adds	r3, r7, r3
 801285c:	22fa      	movs	r2, #250	@ 0xfa
 801285e:	00d2      	lsls	r2, r2, #3
 8012860:	601a      	str	r2, [r3, #0]
            break;
 8012862:	e06d      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = IN865_JOIN_ACCEPT_DELAY1;
 8012864:	2308      	movs	r3, #8
 8012866:	18fb      	adds	r3, r7, r3
 8012868:	4a40      	ldr	r2, [pc, #256]	@ (801296c <RegionIN865GetPhyParam+0x1e4>)
 801286a:	601a      	str	r2, [r3, #0]
            break;
 801286c:	e068      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = IN865_JOIN_ACCEPT_DELAY2;
 801286e:	2308      	movs	r3, #8
 8012870:	18fb      	adds	r3, r7, r3
 8012872:	4a3f      	ldr	r2, [pc, #252]	@ (8012970 <RegionIN865GetPhyParam+0x1e8>)
 8012874:	601a      	str	r2, [r3, #0]
            break;
 8012876:	e063      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = IN865_MAX_FCNT_GAP;
 8012878:	2308      	movs	r3, #8
 801287a:	18fb      	adds	r3, r7, r3
 801287c:	2280      	movs	r2, #128	@ 0x80
 801287e:	01d2      	lsls	r2, r2, #7
 8012880:	601a      	str	r2, [r3, #0]
            break;
 8012882:	e05d      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( IN865_ACKTIMEOUT + randr( -IN865_ACK_TIMEOUT_RND, IN865_ACK_TIMEOUT_RND ) );
 8012884:	23fa      	movs	r3, #250	@ 0xfa
 8012886:	009b      	lsls	r3, r3, #2
 8012888:	4a3a      	ldr	r2, [pc, #232]	@ (8012974 <RegionIN865GetPhyParam+0x1ec>)
 801288a:	0019      	movs	r1, r3
 801288c:	0010      	movs	r0, r2
 801288e:	f002 fe5d 	bl	801554c <randr>
 8012892:	0003      	movs	r3, r0
 8012894:	22fa      	movs	r2, #250	@ 0xfa
 8012896:	00d2      	lsls	r2, r2, #3
 8012898:	4694      	mov	ip, r2
 801289a:	4463      	add	r3, ip
 801289c:	001a      	movs	r2, r3
 801289e:	2308      	movs	r3, #8
 80128a0:	18fb      	adds	r3, r7, r3
 80128a2:	601a      	str	r2, [r3, #0]
            break;
 80128a4:	e04c      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = IN865_DEFAULT_RX1_DR_OFFSET;
 80128a6:	2308      	movs	r3, #8
 80128a8:	18fb      	adds	r3, r7, r3
 80128aa:	2200      	movs	r2, #0
 80128ac:	601a      	str	r2, [r3, #0]
            break;
 80128ae:	e047      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = IN865_RX_WND_2_FREQ;
 80128b0:	2308      	movs	r3, #8
 80128b2:	18fb      	adds	r3, r7, r3
 80128b4:	4a30      	ldr	r2, [pc, #192]	@ (8012978 <RegionIN865GetPhyParam+0x1f0>)
 80128b6:	601a      	str	r2, [r3, #0]
            break;
 80128b8:	e042      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = IN865_RX_WND_2_DR;
 80128ba:	2308      	movs	r3, #8
 80128bc:	18fb      	adds	r3, r7, r3
 80128be:	2202      	movs	r2, #2
 80128c0:	601a      	str	r2, [r3, #0]
            break;
 80128c2:	e03d      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 80128c4:	2308      	movs	r3, #8
 80128c6:	18fb      	adds	r3, r7, r3
 80128c8:	4a2c      	ldr	r2, [pc, #176]	@ (801297c <RegionIN865GetPhyParam+0x1f4>)
 80128ca:	601a      	str	r2, [r3, #0]
            break;
 80128cc:	e038      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 80128ce:	2308      	movs	r3, #8
 80128d0:	18fb      	adds	r3, r7, r3
 80128d2:	4a2b      	ldr	r2, [pc, #172]	@ (8012980 <RegionIN865GetPhyParam+0x1f8>)
 80128d4:	601a      	str	r2, [r3, #0]
            break;
 80128d6:	e033      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = IN865_MAX_NB_CHANNELS;
 80128d8:	2308      	movs	r3, #8
 80128da:	18fb      	adds	r3, r7, r3
 80128dc:	2210      	movs	r2, #16
 80128de:	601a      	str	r2, [r3, #0]
            break;
 80128e0:	e02e      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 80128e2:	2308      	movs	r3, #8
 80128e4:	18fb      	adds	r3, r7, r3
 80128e6:	4a27      	ldr	r2, [pc, #156]	@ (8012984 <RegionIN865GetPhyParam+0x1fc>)
 80128e8:	601a      	str	r2, [r3, #0]
            break;
 80128ea:	e029      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 80128ec:	2308      	movs	r3, #8
 80128ee:	18fb      	adds	r3, r7, r3
 80128f0:	2200      	movs	r2, #0
 80128f2:	601a      	str	r2, [r3, #0]
            break;
 80128f4:	e024      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = IN865_DEFAULT_MAX_EIRP;
 80128f6:	2308      	movs	r3, #8
 80128f8:	18fb      	adds	r3, r7, r3
 80128fa:	4a23      	ldr	r2, [pc, #140]	@ (8012988 <RegionIN865GetPhyParam+0x200>)
 80128fc:	601a      	str	r2, [r3, #0]
            break;
 80128fe:	e01f      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = IN865_DEFAULT_ANTENNA_GAIN;
 8012900:	2308      	movs	r3, #8
 8012902:	18fb      	adds	r3, r7, r3
 8012904:	4a21      	ldr	r2, [pc, #132]	@ (801298c <RegionIN865GetPhyParam+0x204>)
 8012906:	601a      	str	r2, [r3, #0]
            break;
 8012908:	e01a      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = IN865_BEACON_CHANNEL_FREQ;
 801290a:	2308      	movs	r3, #8
 801290c:	18fb      	adds	r3, r7, r3
 801290e:	4a1a      	ldr	r2, [pc, #104]	@ (8012978 <RegionIN865GetPhyParam+0x1f0>)
 8012910:	601a      	str	r2, [r3, #0]
            break;
 8012912:	e015      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = IN865_BEACON_SIZE;
 8012914:	2108      	movs	r1, #8
 8012916:	187b      	adds	r3, r7, r1
 8012918:	2213      	movs	r2, #19
 801291a:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = IN865_RFU1_SIZE;
 801291c:	187b      	adds	r3, r7, r1
 801291e:	2201      	movs	r2, #1
 8012920:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = IN865_RFU2_SIZE;
 8012922:	187b      	adds	r3, r7, r1
 8012924:	2203      	movs	r2, #3
 8012926:	709a      	strb	r2, [r3, #2]
            break;
 8012928:	e00a      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = IN865_BEACON_CHANNEL_DR;
 801292a:	2308      	movs	r3, #8
 801292c:	18fb      	adds	r3, r7, r3
 801292e:	2204      	movs	r2, #4
 8012930:	601a      	str	r2, [r3, #0]
            break;
 8012932:	e005      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = IN865_PING_SLOT_CHANNEL_DR;
 8012934:	2308      	movs	r3, #8
 8012936:	18fb      	adds	r3, r7, r3
 8012938:	2204      	movs	r2, #4
 801293a:	601a      	str	r2, [r3, #0]
            break;
 801293c:	e000      	b.n	8012940 <RegionIN865GetPhyParam+0x1b8>
        }
        default:
        {
            break;
 801293e:	46c0      	nop			@ (mov r8, r8)
        }
    }

    return phyParam;
 8012940:	210c      	movs	r1, #12
 8012942:	187b      	adds	r3, r7, r1
 8012944:	2208      	movs	r2, #8
 8012946:	18ba      	adds	r2, r7, r2
 8012948:	6812      	ldr	r2, [r2, #0]
 801294a:	601a      	str	r2, [r3, #0]
 801294c:	187b      	adds	r3, r7, r1
 801294e:	681a      	ldr	r2, [r3, #0]
 8012950:	0013      	movs	r3, r2
}
 8012952:	0018      	movs	r0, r3
 8012954:	46bd      	mov	sp, r7
 8012956:	b004      	add	sp, #16
 8012958:	bd80      	pop	{r7, pc}
 801295a:	46c0      	nop			@ (mov r8, r8)
 801295c:	0801b3fc 	.word	0x0801b3fc
 8012960:	0801b3e4 	.word	0x0801b3e4
 8012964:	0801b3ec 	.word	0x0801b3ec
 8012968:	00000bb8 	.word	0x00000bb8
 801296c:	00001388 	.word	0x00001388
 8012970:	00001770 	.word	0x00001770
 8012974:	fffffc18 	.word	0xfffffc18
 8012978:	33a680f0 	.word	0x33a680f0
 801297c:	20001230 	.word	0x20001230
 8012980:	20001232 	.word	0x20001232
 8012984:	20001160 	.word	0x20001160
 8012988:	41f00000 	.word	0x41f00000
 801298c:	4009999a 	.word	0x4009999a

08012990 <RegionIN865SetBandTxDone>:

void RegionIN865SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b082      	sub	sp, #8
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	7858      	ldrb	r0, [r3, #1]
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	781b      	ldrb	r3, [r3, #0]
 80129a0:	0019      	movs	r1, r3
 80129a2:	4a0a      	ldr	r2, [pc, #40]	@ (80129cc <RegionIN865SetBandTxDone+0x3c>)
 80129a4:	000b      	movs	r3, r1
 80129a6:	005b      	lsls	r3, r3, #1
 80129a8:	185b      	adds	r3, r3, r1
 80129aa:	009b      	lsls	r3, r3, #2
 80129ac:	18d3      	adds	r3, r2, r3
 80129ae:	3309      	adds	r3, #9
 80129b0:	781b      	ldrb	r3, [r3, #0]
 80129b2:	330c      	adds	r3, #12
 80129b4:	011a      	lsls	r2, r3, #4
 80129b6:	4b05      	ldr	r3, [pc, #20]	@ (80129cc <RegionIN865SetBandTxDone+0x3c>)
 80129b8:	18d1      	adds	r1, r2, r3
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	685b      	ldr	r3, [r3, #4]
 80129be:	001a      	movs	r2, r3
 80129c0:	f7ff f9ff 	bl	8011dc2 <RegionCommonSetBandTxDone>
}
 80129c4:	46c0      	nop			@ (mov r8, r8)
 80129c6:	46bd      	mov	sp, r7
 80129c8:	b002      	add	sp, #8
 80129ca:	bd80      	pop	{r7, pc}
 80129cc:	20001160 	.word	0x20001160

080129d0 <RegionIN865InitDefaults>:

void RegionIN865InitDefaults( InitDefaultsParams_t* params )
{
 80129d0:	b590      	push	{r4, r7, lr}
 80129d2:	b099      	sub	sp, #100	@ 0x64
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
    Band_t bands[IN865_MAX_NB_BANDS] =
 80129d8:	2150      	movs	r1, #80	@ 0x50
 80129da:	187b      	adds	r3, r7, r1
 80129dc:	2201      	movs	r2, #1
 80129de:	801a      	strh	r2, [r3, #0]
 80129e0:	187b      	adds	r3, r7, r1
 80129e2:	2200      	movs	r2, #0
 80129e4:	709a      	strb	r2, [r3, #2]
 80129e6:	187b      	adds	r3, r7, r1
 80129e8:	2200      	movs	r2, #0
 80129ea:	605a      	str	r2, [r3, #4]
 80129ec:	187b      	adds	r3, r7, r1
 80129ee:	2200      	movs	r2, #0
 80129f0:	609a      	str	r2, [r3, #8]
 80129f2:	187b      	adds	r3, r7, r1
 80129f4:	2200      	movs	r2, #0
 80129f6:	60da      	str	r2, [r3, #12]
    {
        IN865_BAND0
    };

    switch( params->Type )
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	791b      	ldrb	r3, [r3, #4]
 80129fc:	2b02      	cmp	r3, #2
 80129fe:	d025      	beq.n	8012a4c <RegionIN865InitDefaults+0x7c>
 8012a00:	dc4a      	bgt.n	8012a98 <RegionIN865InitDefaults+0xc8>
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d002      	beq.n	8012a0c <RegionIN865InitDefaults+0x3c>
 8012a06:	2b01      	cmp	r3, #1
 8012a08:	d02c      	beq.n	8012a64 <RegionIN865InitDefaults+0x94>
            NvmCtx.Channels[2] = ( ChannelParams_t ) IN865_LC3;
            break;
        }
        default:
        {
            break;
 8012a0a:	e045      	b.n	8012a98 <RegionIN865InitDefaults+0xc8>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * IN865_MAX_NB_BANDS );
 8012a0c:	2350      	movs	r3, #80	@ 0x50
 8012a0e:	18f9      	adds	r1, r7, r3
 8012a10:	4b25      	ldr	r3, [pc, #148]	@ (8012aa8 <RegionIN865InitDefaults+0xd8>)
 8012a12:	2210      	movs	r2, #16
 8012a14:	0018      	movs	r0, r3
 8012a16:	f002 fdaf 	bl	8015578 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) IN865_LC1;
 8012a1a:	4b24      	ldr	r3, [pc, #144]	@ (8012aac <RegionIN865InitDefaults+0xdc>)
 8012a1c:	4a24      	ldr	r2, [pc, #144]	@ (8012ab0 <RegionIN865InitDefaults+0xe0>)
 8012a1e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8012a20:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) IN865_LC2;
 8012a22:	4b22      	ldr	r3, [pc, #136]	@ (8012aac <RegionIN865InitDefaults+0xdc>)
 8012a24:	4a23      	ldr	r2, [pc, #140]	@ (8012ab4 <RegionIN865InitDefaults+0xe4>)
 8012a26:	330c      	adds	r3, #12
 8012a28:	ca13      	ldmia	r2!, {r0, r1, r4}
 8012a2a:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) IN865_LC3;
 8012a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8012aac <RegionIN865InitDefaults+0xdc>)
 8012a2e:	4a22      	ldr	r2, [pc, #136]	@ (8012ab8 <RegionIN865InitDefaults+0xe8>)
 8012a30:	3318      	adds	r3, #24
 8012a32:	ca13      	ldmia	r2!, {r0, r1, r4}
 8012a34:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8012a36:	4b1d      	ldr	r3, [pc, #116]	@ (8012aac <RegionIN865InitDefaults+0xdc>)
 8012a38:	22d2      	movs	r2, #210	@ 0xd2
 8012a3a:	2107      	movs	r1, #7
 8012a3c:	5299      	strh	r1, [r3, r2]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 8012a3e:	491f      	ldr	r1, [pc, #124]	@ (8012abc <RegionIN865InitDefaults+0xec>)
 8012a40:	4b1f      	ldr	r3, [pc, #124]	@ (8012ac0 <RegionIN865InitDefaults+0xf0>)
 8012a42:	2201      	movs	r2, #1
 8012a44:	0018      	movs	r0, r3
 8012a46:	f7ff f98d 	bl	8011d64 <RegionCommonChanMaskCopy>
            break;
 8012a4a:	e028      	b.n	8012a9e <RegionIN865InitDefaults+0xce>
            if( params->NvmCtx != 0 )
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d023      	beq.n	8012a9c <RegionIN865InitDefaults+0xcc>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	6819      	ldr	r1, [r3, #0]
 8012a58:	4b14      	ldr	r3, [pc, #80]	@ (8012aac <RegionIN865InitDefaults+0xdc>)
 8012a5a:	22d4      	movs	r2, #212	@ 0xd4
 8012a5c:	0018      	movs	r0, r3
 8012a5e:	f002 fd8b 	bl	8015578 <memcpy1>
            break;
 8012a62:	e01b      	b.n	8012a9c <RegionIN865InitDefaults+0xcc>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 8012a64:	4b11      	ldr	r3, [pc, #68]	@ (8012aac <RegionIN865InitDefaults+0xdc>)
 8012a66:	22d0      	movs	r2, #208	@ 0xd0
 8012a68:	5a9a      	ldrh	r2, [r3, r2]
 8012a6a:	4b10      	ldr	r3, [pc, #64]	@ (8012aac <RegionIN865InitDefaults+0xdc>)
 8012a6c:	21d2      	movs	r1, #210	@ 0xd2
 8012a6e:	5a5b      	ldrh	r3, [r3, r1]
 8012a70:	4313      	orrs	r3, r2
 8012a72:	b299      	uxth	r1, r3
 8012a74:	4b0d      	ldr	r3, [pc, #52]	@ (8012aac <RegionIN865InitDefaults+0xdc>)
 8012a76:	22d0      	movs	r2, #208	@ 0xd0
 8012a78:	5299      	strh	r1, [r3, r2]
            NvmCtx.Channels[0] = ( ChannelParams_t ) IN865_LC1;
 8012a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8012aac <RegionIN865InitDefaults+0xdc>)
 8012a7c:	4a0c      	ldr	r2, [pc, #48]	@ (8012ab0 <RegionIN865InitDefaults+0xe0>)
 8012a7e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8012a80:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) IN865_LC2;
 8012a82:	4b0a      	ldr	r3, [pc, #40]	@ (8012aac <RegionIN865InitDefaults+0xdc>)
 8012a84:	4a0b      	ldr	r2, [pc, #44]	@ (8012ab4 <RegionIN865InitDefaults+0xe4>)
 8012a86:	330c      	adds	r3, #12
 8012a88:	ca13      	ldmia	r2!, {r0, r1, r4}
 8012a8a:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) IN865_LC3;
 8012a8c:	4b07      	ldr	r3, [pc, #28]	@ (8012aac <RegionIN865InitDefaults+0xdc>)
 8012a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8012ab8 <RegionIN865InitDefaults+0xe8>)
 8012a90:	3318      	adds	r3, #24
 8012a92:	ca13      	ldmia	r2!, {r0, r1, r4}
 8012a94:	c313      	stmia	r3!, {r0, r1, r4}
            break;
 8012a96:	e002      	b.n	8012a9e <RegionIN865InitDefaults+0xce>
            break;
 8012a98:	46c0      	nop			@ (mov r8, r8)
 8012a9a:	e000      	b.n	8012a9e <RegionIN865InitDefaults+0xce>
            break;
 8012a9c:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 8012a9e:	46c0      	nop			@ (mov r8, r8)
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	b019      	add	sp, #100	@ 0x64
 8012aa4:	bd90      	pop	{r4, r7, pc}
 8012aa6:	46c0      	nop			@ (mov r8, r8)
 8012aa8:	20001220 	.word	0x20001220
 8012aac:	20001160 	.word	0x20001160
 8012ab0:	0801a658 	.word	0x0801a658
 8012ab4:	0801a664 	.word	0x0801a664
 8012ab8:	0801a670 	.word	0x0801a670
 8012abc:	20001232 	.word	0x20001232
 8012ac0:	20001230 	.word	0x20001230

08012ac4 <RegionIN865GetNvmCtx>:

void* RegionIN865GetNvmCtx( GetNvmCtxParams_t* params )
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b082      	sub	sp, #8
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
    params->nvmCtxSize = sizeof( RegionIN865NvmCtx_t );
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	22d4      	movs	r2, #212	@ 0xd4
 8012ad0:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 8012ad2:	4b02      	ldr	r3, [pc, #8]	@ (8012adc <RegionIN865GetNvmCtx+0x18>)
}
 8012ad4:	0018      	movs	r0, r3
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	b002      	add	sp, #8
 8012ada:	bd80      	pop	{r7, pc}
 8012adc:	20001160 	.word	0x20001160

08012ae0 <RegionIN865Verify>:

bool RegionIN865Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b082      	sub	sp, #8
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
 8012ae8:	000a      	movs	r2, r1
 8012aea:	1cfb      	adds	r3, r7, #3
 8012aec:	701a      	strb	r2, [r3, #0]
    switch( phyAttribute )
 8012aee:	1cfb      	adds	r3, r7, #3
 8012af0:	781b      	ldrb	r3, [r3, #0]
 8012af2:	2b0f      	cmp	r3, #15
 8012af4:	d84f      	bhi.n	8012b96 <RegionIN865Verify+0xb6>
 8012af6:	009a      	lsls	r2, r3, #2
 8012af8:	4b29      	ldr	r3, [pc, #164]	@ (8012ba0 <RegionIN865Verify+0xc0>)
 8012afa:	18d3      	adds	r3, r2, r3
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	469f      	mov	pc, r3
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	0018      	movs	r0, r3
 8012b06:	f7ff fd35 	bl	8012574 <VerifyRfFreq>
 8012b0a:	0003      	movs	r3, r0
 8012b0c:	e044      	b.n	8012b98 <RegionIN865Verify+0xb8>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.Datarate == DR_6 )
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	781b      	ldrb	r3, [r3, #0]
 8012b12:	b25b      	sxtb	r3, r3
 8012b14:	2b06      	cmp	r3, #6
 8012b16:	d101      	bne.n	8012b1c <RegionIN865Verify+0x3c>
            {// DR_6 is not supported by this region
                return false;
 8012b18:	2300      	movs	r3, #0
 8012b1a:	e03d      	b.n	8012b98 <RegionIN865Verify+0xb8>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE );
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	781b      	ldrb	r3, [r3, #0]
 8012b20:	b25b      	sxtb	r3, r3
 8012b22:	2207      	movs	r2, #7
 8012b24:	2100      	movs	r1, #0
 8012b26:	0018      	movs	r0, r3
 8012b28:	f7ff f873 	bl	8011c12 <RegionCommonValueInRange>
 8012b2c:	0003      	movs	r3, r0
 8012b2e:	1e5a      	subs	r2, r3, #1
 8012b30:	4193      	sbcs	r3, r2
 8012b32:	b2db      	uxtb	r3, r3
 8012b34:	e030      	b.n	8012b98 <RegionIN865Verify+0xb8>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	781b      	ldrb	r3, [r3, #0]
 8012b3a:	b25b      	sxtb	r3, r3
 8012b3c:	2205      	movs	r2, #5
 8012b3e:	2100      	movs	r1, #0
 8012b40:	0018      	movs	r0, r3
 8012b42:	f7ff f866 	bl	8011c12 <RegionCommonValueInRange>
 8012b46:	0003      	movs	r3, r0
 8012b48:	1e5a      	subs	r2, r3, #1
 8012b4a:	4193      	sbcs	r3, r2
 8012b4c:	b2db      	uxtb	r3, r3
 8012b4e:	e023      	b.n	8012b98 <RegionIN865Verify+0xb8>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.Datarate == DR_6 )
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	781b      	ldrb	r3, [r3, #0]
 8012b54:	b25b      	sxtb	r3, r3
 8012b56:	2b06      	cmp	r3, #6
 8012b58:	d101      	bne.n	8012b5e <RegionIN865Verify+0x7e>
            {// DR_6 is not supported by this region
                return false;
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	e01c      	b.n	8012b98 <RegionIN865Verify+0xb8>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE );
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	781b      	ldrb	r3, [r3, #0]
 8012b62:	b25b      	sxtb	r3, r3
 8012b64:	2207      	movs	r2, #7
 8012b66:	2100      	movs	r1, #0
 8012b68:	0018      	movs	r0, r3
 8012b6a:	f7ff f852 	bl	8011c12 <RegionCommonValueInRange>
 8012b6e:	0003      	movs	r3, r0
 8012b70:	1e5a      	subs	r2, r3, #1
 8012b72:	4193      	sbcs	r3, r2
 8012b74:	b2db      	uxtb	r3, r3
 8012b76:	e00f      	b.n	8012b98 <RegionIN865Verify+0xb8>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, IN865_MAX_TX_POWER, IN865_MIN_TX_POWER );
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	781b      	ldrb	r3, [r3, #0]
 8012b7c:	b25b      	sxtb	r3, r3
 8012b7e:	220a      	movs	r2, #10
 8012b80:	2100      	movs	r1, #0
 8012b82:	0018      	movs	r0, r3
 8012b84:	f7ff f845 	bl	8011c12 <RegionCommonValueInRange>
 8012b88:	0003      	movs	r3, r0
 8012b8a:	1e5a      	subs	r2, r3, #1
 8012b8c:	4193      	sbcs	r3, r2
 8012b8e:	b2db      	uxtb	r3, r3
 8012b90:	e002      	b.n	8012b98 <RegionIN865Verify+0xb8>
        }
        case PHY_DUTY_CYCLE:
        {
            return IN865_DUTY_CYCLE_ENABLED;
 8012b92:	2301      	movs	r3, #1
 8012b94:	e000      	b.n	8012b98 <RegionIN865Verify+0xb8>
        }
        default:
            return false;
 8012b96:	2300      	movs	r3, #0
    }
}
 8012b98:	0018      	movs	r0, r3
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	b002      	add	sp, #8
 8012b9e:	bd80      	pop	{r7, pc}
 8012ba0:	0801b4d4 	.word	0x0801b4d4

08012ba4 <RegionIN865ApplyCFList>:

void RegionIN865ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8012ba4:	b590      	push	{r4, r7, lr}
 8012ba6:	b08b      	sub	sp, #44	@ 0x2c
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8012bac:	2318      	movs	r3, #24
 8012bae:	18fb      	adds	r3, r7, r3
 8012bb0:	2250      	movs	r2, #80	@ 0x50
 8012bb2:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	791b      	ldrb	r3, [r3, #4]
 8012bb8:	2b10      	cmp	r3, #16
 8012bba:	d000      	beq.n	8012bbe <RegionIN865ApplyCFList+0x1a>
 8012bbc:	e07c      	b.n	8012cb8 <RegionIN865ApplyCFList+0x114>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	330f      	adds	r3, #15
 8012bc4:	781b      	ldrb	r3, [r3, #0]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d000      	beq.n	8012bcc <RegionIN865ApplyCFList+0x28>
 8012bca:	e077      	b.n	8012cbc <RegionIN865ApplyCFList+0x118>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8012bcc:	2327      	movs	r3, #39	@ 0x27
 8012bce:	18fb      	adds	r3, r7, r3
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	701a      	strb	r2, [r3, #0]
 8012bd4:	2326      	movs	r3, #38	@ 0x26
 8012bd6:	18fb      	adds	r3, r7, r3
 8012bd8:	2203      	movs	r2, #3
 8012bda:	701a      	strb	r2, [r3, #0]
 8012bdc:	e066      	b.n	8012cac <RegionIN865ApplyCFList+0x108>
    {
        if( chanIdx < ( IN865_NUMB_CHANNELS_CF_LIST + IN865_NUMB_DEFAULT_CHANNELS ) )
 8012bde:	2326      	movs	r3, #38	@ 0x26
 8012be0:	18fb      	adds	r3, r7, r3
 8012be2:	781b      	ldrb	r3, [r3, #0]
 8012be4:	2b07      	cmp	r3, #7
 8012be6:	d82e      	bhi.n	8012c46 <RegionIN865ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	681a      	ldr	r2, [r3, #0]
 8012bec:	2427      	movs	r4, #39	@ 0x27
 8012bee:	193b      	adds	r3, r7, r4
 8012bf0:	781b      	ldrb	r3, [r3, #0]
 8012bf2:	18d3      	adds	r3, r2, r3
 8012bf4:	781b      	ldrb	r3, [r3, #0]
 8012bf6:	001a      	movs	r2, r3
 8012bf8:	2018      	movs	r0, #24
 8012bfa:	183b      	adds	r3, r7, r0
 8012bfc:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8012bfe:	183b      	adds	r3, r7, r0
 8012c00:	681a      	ldr	r2, [r3, #0]
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	6819      	ldr	r1, [r3, #0]
 8012c06:	193b      	adds	r3, r7, r4
 8012c08:	781b      	ldrb	r3, [r3, #0]
 8012c0a:	3301      	adds	r3, #1
 8012c0c:	18cb      	adds	r3, r1, r3
 8012c0e:	781b      	ldrb	r3, [r3, #0]
 8012c10:	021b      	lsls	r3, r3, #8
 8012c12:	431a      	orrs	r2, r3
 8012c14:	183b      	adds	r3, r7, r0
 8012c16:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8012c18:	183b      	adds	r3, r7, r0
 8012c1a:	681a      	ldr	r2, [r3, #0]
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	6819      	ldr	r1, [r3, #0]
 8012c20:	193b      	adds	r3, r7, r4
 8012c22:	781b      	ldrb	r3, [r3, #0]
 8012c24:	3302      	adds	r3, #2
 8012c26:	18cb      	adds	r3, r1, r3
 8012c28:	781b      	ldrb	r3, [r3, #0]
 8012c2a:	041b      	lsls	r3, r3, #16
 8012c2c:	431a      	orrs	r2, r3
 8012c2e:	183b      	adds	r3, r7, r0
 8012c30:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 8012c32:	183b      	adds	r3, r7, r0
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	2264      	movs	r2, #100	@ 0x64
 8012c38:	435a      	muls	r2, r3
 8012c3a:	183b      	adds	r3, r7, r0
 8012c3c:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8012c3e:	183b      	adds	r3, r7, r0
 8012c40:	2200      	movs	r2, #0
 8012c42:	605a      	str	r2, [r3, #4]
 8012c44:	e009      	b.n	8012c5a <RegionIN865ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 8012c46:	2118      	movs	r1, #24
 8012c48:	187b      	adds	r3, r7, r1
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 8012c4e:	187b      	adds	r3, r7, r1
 8012c50:	2200      	movs	r2, #0
 8012c52:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 8012c54:	187b      	adds	r3, r7, r1
 8012c56:	2200      	movs	r2, #0
 8012c58:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 8012c5a:	2218      	movs	r2, #24
 8012c5c:	18bb      	adds	r3, r7, r2
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d00d      	beq.n	8012c80 <RegionIN865ApplyCFList+0xdc>
        {
            channelAdd.NewChannel = &newChannel;
 8012c64:	2110      	movs	r1, #16
 8012c66:	187b      	adds	r3, r7, r1
 8012c68:	18ba      	adds	r2, r7, r2
 8012c6a:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 8012c6c:	187b      	adds	r3, r7, r1
 8012c6e:	2226      	movs	r2, #38	@ 0x26
 8012c70:	18ba      	adds	r2, r7, r2
 8012c72:	7812      	ldrb	r2, [r2, #0]
 8012c74:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionIN865ChannelAdd( &channelAdd );
 8012c76:	187b      	adds	r3, r7, r1
 8012c78:	0018      	movs	r0, r3
 8012c7a:	f000 fdb5 	bl	80137e8 <RegionIN865ChannelAdd>
 8012c7e:	e009      	b.n	8012c94 <RegionIN865ApplyCFList+0xf0>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8012c80:	210c      	movs	r1, #12
 8012c82:	187b      	adds	r3, r7, r1
 8012c84:	2226      	movs	r2, #38	@ 0x26
 8012c86:	18ba      	adds	r2, r7, r2
 8012c88:	7812      	ldrb	r2, [r2, #0]
 8012c8a:	701a      	strb	r2, [r3, #0]

            RegionIN865ChannelsRemove( &channelRemove );
 8012c8c:	187b      	adds	r3, r7, r1
 8012c8e:	0018      	movs	r0, r3
 8012c90:	f000 fe62 	bl	8013958 <RegionIN865ChannelsRemove>
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8012c94:	2227      	movs	r2, #39	@ 0x27
 8012c96:	18bb      	adds	r3, r7, r2
 8012c98:	18ba      	adds	r2, r7, r2
 8012c9a:	7812      	ldrb	r2, [r2, #0]
 8012c9c:	3203      	adds	r2, #3
 8012c9e:	701a      	strb	r2, [r3, #0]
 8012ca0:	2126      	movs	r1, #38	@ 0x26
 8012ca2:	187b      	adds	r3, r7, r1
 8012ca4:	781a      	ldrb	r2, [r3, #0]
 8012ca6:	187b      	adds	r3, r7, r1
 8012ca8:	3201      	adds	r2, #1
 8012caa:	701a      	strb	r2, [r3, #0]
 8012cac:	2326      	movs	r3, #38	@ 0x26
 8012cae:	18fb      	adds	r3, r7, r3
 8012cb0:	781b      	ldrb	r3, [r3, #0]
 8012cb2:	2b0f      	cmp	r3, #15
 8012cb4:	d993      	bls.n	8012bde <RegionIN865ApplyCFList+0x3a>
 8012cb6:	e002      	b.n	8012cbe <RegionIN865ApplyCFList+0x11a>
        return;
 8012cb8:	46c0      	nop			@ (mov r8, r8)
 8012cba:	e000      	b.n	8012cbe <RegionIN865ApplyCFList+0x11a>
        return;
 8012cbc:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	b00b      	add	sp, #44	@ 0x2c
 8012cc2:	bd90      	pop	{r4, r7, pc}

08012cc4 <RegionIN865ChanMaskSet>:

bool RegionIN865ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b082      	sub	sp, #8
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	791b      	ldrb	r3, [r3, #4]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d002      	beq.n	8012cda <RegionIN865ChanMaskSet+0x16>
 8012cd4:	2b01      	cmp	r3, #1
 8012cd6:	d008      	beq.n	8012cea <RegionIN865ChanMaskSet+0x26>
 8012cd8:	e00f      	b.n	8012cfa <RegionIN865ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	6819      	ldr	r1, [r3, #0]
 8012cde:	4b0a      	ldr	r3, [pc, #40]	@ (8012d08 <RegionIN865ChanMaskSet+0x44>)
 8012ce0:	2201      	movs	r2, #1
 8012ce2:	0018      	movs	r0, r3
 8012ce4:	f7ff f83e 	bl	8011d64 <RegionCommonChanMaskCopy>
            break;
 8012ce8:	e009      	b.n	8012cfe <RegionIN865ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	6819      	ldr	r1, [r3, #0]
 8012cee:	4b07      	ldr	r3, [pc, #28]	@ (8012d0c <RegionIN865ChanMaskSet+0x48>)
 8012cf0:	2201      	movs	r2, #1
 8012cf2:	0018      	movs	r0, r3
 8012cf4:	f7ff f836 	bl	8011d64 <RegionCommonChanMaskCopy>
            break;
 8012cf8:	e001      	b.n	8012cfe <RegionIN865ChanMaskSet+0x3a>
        }
        default:
            return false;
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	e000      	b.n	8012d00 <RegionIN865ChanMaskSet+0x3c>
    }
    return true;
 8012cfe:	2301      	movs	r3, #1
}
 8012d00:	0018      	movs	r0, r3
 8012d02:	46bd      	mov	sp, r7
 8012d04:	b002      	add	sp, #8
 8012d06:	bd80      	pop	{r7, pc}
 8012d08:	20001230 	.word	0x20001230
 8012d0c:	20001232 	.word	0x20001232

08012d10 <RegionIN865ComputeRxWindowParameters>:

void RegionIN865ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8012d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d12:	b08b      	sub	sp, #44	@ 0x2c
 8012d14:	af04      	add	r7, sp, #16
 8012d16:	60ba      	str	r2, [r7, #8]
 8012d18:	607b      	str	r3, [r7, #4]
 8012d1a:	240f      	movs	r4, #15
 8012d1c:	193b      	adds	r3, r7, r4
 8012d1e:	1c02      	adds	r2, r0, #0
 8012d20:	701a      	strb	r2, [r3, #0]
 8012d22:	230e      	movs	r3, #14
 8012d24:	18fb      	adds	r3, r7, r3
 8012d26:	1c0a      	adds	r2, r1, #0
 8012d28:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	613a      	str	r2, [r7, #16]
 8012d30:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, IN865_RX_MAX_DATARATE );
 8012d32:	193b      	adds	r3, r7, r4
 8012d34:	781b      	ldrb	r3, [r3, #0]
 8012d36:	b25a      	sxtb	r2, r3
 8012d38:	2a07      	cmp	r2, #7
 8012d3a:	dd00      	ble.n	8012d3e <RegionIN865ComputeRxWindowParameters+0x2e>
 8012d3c:	2307      	movs	r3, #7
 8012d3e:	b25a      	sxtb	r2, r3
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	785b      	ldrb	r3, [r3, #1]
 8012d48:	b25b      	sxtb	r3, r3
 8012d4a:	0018      	movs	r0, r3
 8012d4c:	f7ff fbcc 	bl	80124e8 <GetBandwidth>
 8012d50:	0003      	movs	r3, r0
 8012d52:	b2da      	uxtb	r2, r3
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	785b      	ldrb	r3, [r3, #1]
 8012d5c:	b25b      	sxtb	r3, r3
 8012d5e:	2b07      	cmp	r3, #7
 8012d60:	d10d      	bne.n	8012d7e <RegionIN865ComputeRxWindowParameters+0x6e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesIN865[rxConfigParams->Datarate] );
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	785b      	ldrb	r3, [r3, #1]
 8012d66:	b25b      	sxtb	r3, r3
 8012d68:	001a      	movs	r2, r3
 8012d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8012dd8 <RegionIN865ComputeRxWindowParameters+0xc8>)
 8012d6c:	5c9b      	ldrb	r3, [r3, r2]
 8012d6e:	0018      	movs	r0, r3
 8012d70:	f7ff fa24 	bl	80121bc <RegionCommonComputeSymbolTimeFsk>
 8012d74:	0002      	movs	r2, r0
 8012d76:	000b      	movs	r3, r1
 8012d78:	613a      	str	r2, [r7, #16]
 8012d7a:	617b      	str	r3, [r7, #20]
 8012d7c:	e013      	b.n	8012da6 <RegionIN865ComputeRxWindowParameters+0x96>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesIN865[rxConfigParams->Datarate], BandwidthsIN865[rxConfigParams->Datarate] );
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	785b      	ldrb	r3, [r3, #1]
 8012d82:	b25b      	sxtb	r3, r3
 8012d84:	001a      	movs	r2, r3
 8012d86:	4b14      	ldr	r3, [pc, #80]	@ (8012dd8 <RegionIN865ComputeRxWindowParameters+0xc8>)
 8012d88:	5c98      	ldrb	r0, [r3, r2]
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	785b      	ldrb	r3, [r3, #1]
 8012d8e:	b25b      	sxtb	r3, r3
 8012d90:	001a      	movs	r2, r3
 8012d92:	4b12      	ldr	r3, [pc, #72]	@ (8012ddc <RegionIN865ComputeRxWindowParameters+0xcc>)
 8012d94:	0092      	lsls	r2, r2, #2
 8012d96:	58d3      	ldr	r3, [r2, r3]
 8012d98:	0019      	movs	r1, r3
 8012d9a:	f7ff f9e3 	bl	8012164 <RegionCommonComputeSymbolTimeLoRa>
 8012d9e:	0002      	movs	r2, r0
 8012da0:	000b      	movs	r3, r1
 8012da2:	613a      	str	r2, [r7, #16]
 8012da4:	617b      	str	r3, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8012da6:	4b0e      	ldr	r3, [pc, #56]	@ (8012de0 <RegionIN865ComputeRxWindowParameters+0xd0>)
 8012da8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012daa:	4798      	blx	r3
 8012dac:	0006      	movs	r6, r0
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	3308      	adds	r3, #8
 8012db2:	687a      	ldr	r2, [r7, #4]
 8012db4:	320c      	adds	r2, #12
 8012db6:	68bd      	ldr	r5, [r7, #8]
 8012db8:	210e      	movs	r1, #14
 8012dba:	1879      	adds	r1, r7, r1
 8012dbc:	780c      	ldrb	r4, [r1, #0]
 8012dbe:	6938      	ldr	r0, [r7, #16]
 8012dc0:	6979      	ldr	r1, [r7, #20]
 8012dc2:	9202      	str	r2, [sp, #8]
 8012dc4:	9301      	str	r3, [sp, #4]
 8012dc6:	9600      	str	r6, [sp, #0]
 8012dc8:	002b      	movs	r3, r5
 8012dca:	0022      	movs	r2, r4
 8012dcc:	f7ff fa10 	bl	80121f0 <RegionCommonComputeRxWindowParameters>
}
 8012dd0:	46c0      	nop			@ (mov r8, r8)
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	b007      	add	sp, #28
 8012dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dd8:	0801b3bc 	.word	0x0801b3bc
 8012ddc:	0801b3c4 	.word	0x0801b3c4
 8012de0:	0801ac88 	.word	0x0801ac88

08012de4 <RegionIN865RxConfig>:

bool RegionIN865RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8012de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012de6:	b091      	sub	sp, #68	@ 0x44
 8012de8:	af0a      	add	r7, sp, #40	@ 0x28
 8012dea:	6078      	str	r0, [r7, #4]
 8012dec:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8012dee:	230f      	movs	r3, #15
 8012df0:	18fb      	adds	r3, r7, r3
 8012df2:	687a      	ldr	r2, [r7, #4]
 8012df4:	7852      	ldrb	r2, [r2, #1]
 8012df6:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 8012df8:	2316      	movs	r3, #22
 8012dfa:	18fb      	adds	r3, r7, r3
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 8012e00:	230e      	movs	r3, #14
 8012e02:	18fb      	adds	r3, r7, r3
 8012e04:	2200      	movs	r2, #0
 8012e06:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	685b      	ldr	r3, [r3, #4]
 8012e0c:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8012e0e:	4b63      	ldr	r3, [pc, #396]	@ (8012f9c <RegionIN865RxConfig+0x1b8>)
 8012e10:	68db      	ldr	r3, [r3, #12]
 8012e12:	4798      	blx	r3
 8012e14:	1e03      	subs	r3, r0, #0
 8012e16:	d001      	beq.n	8012e1c <RegionIN865RxConfig+0x38>
    {
        return false;
 8012e18:	2300      	movs	r3, #0
 8012e1a:	e0bb      	b.n	8012f94 <RegionIN865RxConfig+0x1b0>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	7cdb      	ldrb	r3, [r3, #19]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d122      	bne.n	8012e6a <RegionIN865RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	781b      	ldrb	r3, [r3, #0]
 8012e28:	0019      	movs	r1, r3
 8012e2a:	4a5d      	ldr	r2, [pc, #372]	@ (8012fa0 <RegionIN865RxConfig+0x1bc>)
 8012e2c:	000b      	movs	r3, r1
 8012e2e:	005b      	lsls	r3, r3, #1
 8012e30:	185b      	adds	r3, r3, r1
 8012e32:	009b      	lsls	r3, r3, #2
 8012e34:	589b      	ldr	r3, [r3, r2]
 8012e36:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	781b      	ldrb	r3, [r3, #0]
 8012e3c:	0019      	movs	r1, r3
 8012e3e:	4a58      	ldr	r2, [pc, #352]	@ (8012fa0 <RegionIN865RxConfig+0x1bc>)
 8012e40:	000b      	movs	r3, r1
 8012e42:	005b      	lsls	r3, r3, #1
 8012e44:	185b      	adds	r3, r3, r1
 8012e46:	009b      	lsls	r3, r3, #2
 8012e48:	18d3      	adds	r3, r2, r3
 8012e4a:	3304      	adds	r3, #4
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d00b      	beq.n	8012e6a <RegionIN865RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	781b      	ldrb	r3, [r3, #0]
 8012e56:	0019      	movs	r1, r3
 8012e58:	4a51      	ldr	r2, [pc, #324]	@ (8012fa0 <RegionIN865RxConfig+0x1bc>)
 8012e5a:	000b      	movs	r3, r1
 8012e5c:	005b      	lsls	r3, r3, #1
 8012e5e:	185b      	adds	r3, r3, r1
 8012e60:	009b      	lsls	r3, r3, #2
 8012e62:	18d3      	adds	r3, r2, r3
 8012e64:	3304      	adds	r3, #4
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesIN865[dr];
 8012e6a:	240f      	movs	r4, #15
 8012e6c:	193b      	adds	r3, r7, r4
 8012e6e:	781b      	ldrb	r3, [r3, #0]
 8012e70:	b25b      	sxtb	r3, r3
 8012e72:	4a4c      	ldr	r2, [pc, #304]	@ (8012fa4 <RegionIN865RxConfig+0x1c0>)
 8012e74:	5cd2      	ldrb	r2, [r2, r3]
 8012e76:	250e      	movs	r5, #14
 8012e78:	197b      	adds	r3, r7, r5
 8012e7a:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 8012e7c:	4b47      	ldr	r3, [pc, #284]	@ (8012f9c <RegionIN865RxConfig+0x1b8>)
 8012e7e:	695b      	ldr	r3, [r3, #20]
 8012e80:	693a      	ldr	r2, [r7, #16]
 8012e82:	0010      	movs	r0, r2
 8012e84:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8012e86:	193b      	adds	r3, r7, r4
 8012e88:	781b      	ldrb	r3, [r3, #0]
 8012e8a:	b25b      	sxtb	r3, r3
 8012e8c:	2b07      	cmp	r3, #7
 8012e8e:	d12e      	bne.n	8012eee <RegionIN865RxConfig+0x10a>
    {
        modem = MODEM_FSK;
 8012e90:	2117      	movs	r1, #23
 8012e92:	187b      	adds	r3, r7, r1
 8012e94:	2200      	movs	r2, #0
 8012e96:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8012e98:	4b40      	ldr	r3, [pc, #256]	@ (8012f9c <RegionIN865RxConfig+0x1b8>)
 8012e9a:	6a1c      	ldr	r4, [r3, #32]
 8012e9c:	197b      	adds	r3, r7, r5
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	569a      	ldrsb	r2, [r3, r2]
 8012ea2:	0013      	movs	r3, r2
 8012ea4:	015b      	lsls	r3, r3, #5
 8012ea6:	1a9b      	subs	r3, r3, r2
 8012ea8:	009b      	lsls	r3, r3, #2
 8012eaa:	189b      	adds	r3, r3, r2
 8012eac:	00db      	lsls	r3, r3, #3
 8012eae:	001e      	movs	r6, r3
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	689b      	ldr	r3, [r3, #8]
 8012eb4:	b29b      	uxth	r3, r3
 8012eb6:	687a      	ldr	r2, [r7, #4]
 8012eb8:	7c92      	ldrb	r2, [r2, #18]
 8012eba:	4d3b      	ldr	r5, [pc, #236]	@ (8012fa8 <RegionIN865RxConfig+0x1c4>)
 8012ebc:	1879      	adds	r1, r7, r1
 8012ebe:	7808      	ldrb	r0, [r1, #0]
 8012ec0:	9209      	str	r2, [sp, #36]	@ 0x24
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	9208      	str	r2, [sp, #32]
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	9207      	str	r2, [sp, #28]
 8012eca:	2200      	movs	r2, #0
 8012ecc:	9206      	str	r2, [sp, #24]
 8012ece:	2201      	movs	r2, #1
 8012ed0:	9205      	str	r2, [sp, #20]
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	9204      	str	r2, [sp, #16]
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	9203      	str	r2, [sp, #12]
 8012eda:	9302      	str	r3, [sp, #8]
 8012edc:	2305      	movs	r3, #5
 8012ede:	9301      	str	r3, [sp, #4]
 8012ee0:	4b32      	ldr	r3, [pc, #200]	@ (8012fac <RegionIN865RxConfig+0x1c8>)
 8012ee2:	9300      	str	r3, [sp, #0]
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	0032      	movs	r2, r6
 8012ee8:	0029      	movs	r1, r5
 8012eea:	47a0      	blx	r4
 8012eec:	e029      	b.n	8012f42 <RegionIN865RxConfig+0x15e>
    }
    else
    {
        modem = MODEM_LORA;
 8012eee:	2117      	movs	r1, #23
 8012ef0:	187b      	adds	r3, r7, r1
 8012ef2:	2201      	movs	r2, #1
 8012ef4:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8012ef6:	4b29      	ldr	r3, [pc, #164]	@ (8012f9c <RegionIN865RxConfig+0x1b8>)
 8012ef8:	6a1c      	ldr	r4, [r3, #32]
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	789b      	ldrb	r3, [r3, #2]
 8012efe:	001e      	movs	r6, r3
 8012f00:	230e      	movs	r3, #14
 8012f02:	18fb      	adds	r3, r7, r3
 8012f04:	2500      	movs	r5, #0
 8012f06:	575d      	ldrsb	r5, [r3, r5]
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	689b      	ldr	r3, [r3, #8]
 8012f0c:	b29b      	uxth	r3, r3
 8012f0e:	687a      	ldr	r2, [r7, #4]
 8012f10:	7c92      	ldrb	r2, [r2, #18]
 8012f12:	1879      	adds	r1, r7, r1
 8012f14:	7808      	ldrb	r0, [r1, #0]
 8012f16:	9209      	str	r2, [sp, #36]	@ 0x24
 8012f18:	2201      	movs	r2, #1
 8012f1a:	9208      	str	r2, [sp, #32]
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	9207      	str	r2, [sp, #28]
 8012f20:	2200      	movs	r2, #0
 8012f22:	9206      	str	r2, [sp, #24]
 8012f24:	2200      	movs	r2, #0
 8012f26:	9205      	str	r2, [sp, #20]
 8012f28:	2200      	movs	r2, #0
 8012f2a:	9204      	str	r2, [sp, #16]
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	9203      	str	r2, [sp, #12]
 8012f30:	9302      	str	r3, [sp, #8]
 8012f32:	2308      	movs	r3, #8
 8012f34:	9301      	str	r3, [sp, #4]
 8012f36:	2300      	movs	r3, #0
 8012f38:	9300      	str	r3, [sp, #0]
 8012f3a:	2301      	movs	r3, #1
 8012f3c:	002a      	movs	r2, r5
 8012f3e:	0031      	movs	r1, r6
 8012f40:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	7c5b      	ldrb	r3, [r3, #17]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d009      	beq.n	8012f5e <RegionIN865RxConfig+0x17a>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterIN865[dr];
 8012f4a:	230f      	movs	r3, #15
 8012f4c:	18fb      	adds	r3, r7, r3
 8012f4e:	2200      	movs	r2, #0
 8012f50:	569a      	ldrsb	r2, [r3, r2]
 8012f52:	2316      	movs	r3, #22
 8012f54:	18fb      	adds	r3, r7, r3
 8012f56:	4916      	ldr	r1, [pc, #88]	@ (8012fb0 <RegionIN865RxConfig+0x1cc>)
 8012f58:	5c8a      	ldrb	r2, [r1, r2]
 8012f5a:	701a      	strb	r2, [r3, #0]
 8012f5c:	e008      	b.n	8012f70 <RegionIN865RxConfig+0x18c>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateIN865[dr];
 8012f5e:	230f      	movs	r3, #15
 8012f60:	18fb      	adds	r3, r7, r3
 8012f62:	2200      	movs	r2, #0
 8012f64:	569a      	ldrsb	r2, [r3, r2]
 8012f66:	2316      	movs	r3, #22
 8012f68:	18fb      	adds	r3, r7, r3
 8012f6a:	4912      	ldr	r1, [pc, #72]	@ (8012fb4 <RegionIN865RxConfig+0x1d0>)
 8012f6c:	5c8a      	ldrb	r2, [r1, r2]
 8012f6e:	701a      	strb	r2, [r3, #0]
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 8012f70:	4b0a      	ldr	r3, [pc, #40]	@ (8012f9c <RegionIN865RxConfig+0x1b8>)
 8012f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012f74:	2216      	movs	r2, #22
 8012f76:	18ba      	adds	r2, r7, r2
 8012f78:	7812      	ldrb	r2, [r2, #0]
 8012f7a:	320d      	adds	r2, #13
 8012f7c:	b2d1      	uxtb	r1, r2
 8012f7e:	2217      	movs	r2, #23
 8012f80:	18ba      	adds	r2, r7, r2
 8012f82:	7812      	ldrb	r2, [r2, #0]
 8012f84:	0010      	movs	r0, r2
 8012f86:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 8012f88:	683b      	ldr	r3, [r7, #0]
 8012f8a:	220f      	movs	r2, #15
 8012f8c:	18ba      	adds	r2, r7, r2
 8012f8e:	7812      	ldrb	r2, [r2, #0]
 8012f90:	701a      	strb	r2, [r3, #0]
    return true;
 8012f92:	2301      	movs	r3, #1
}
 8012f94:	0018      	movs	r0, r3
 8012f96:	46bd      	mov	sp, r7
 8012f98:	b007      	add	sp, #28
 8012f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f9c:	0801ac88 	.word	0x0801ac88
 8012fa0:	20001160 	.word	0x20001160
 8012fa4:	0801b3bc 	.word	0x0801b3bc
 8012fa8:	0000c350 	.word	0x0000c350
 8012fac:	00014585 	.word	0x00014585
 8012fb0:	0801b3ec 	.word	0x0801b3ec
 8012fb4:	0801b3e4 	.word	0x0801b3e4

08012fb8 <RegionIN865TxConfig>:

bool RegionIN865TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8012fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fba:	b093      	sub	sp, #76	@ 0x4c
 8012fbc:	af0a      	add	r7, sp, #40	@ 0x28
 8012fbe:	60f8      	str	r0, [r7, #12]
 8012fc0:	60b9      	str	r1, [r7, #8]
 8012fc2:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesIN865[txConfig->Datarate];
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	785b      	ldrb	r3, [r3, #1]
 8012fc8:	b25b      	sxtb	r3, r3
 8012fca:	001a      	movs	r2, r3
 8012fcc:	4b61      	ldr	r3, [pc, #388]	@ (8013154 <RegionIN865TxConfig+0x19c>)
 8012fce:	5c9a      	ldrb	r2, [r3, r2]
 8012fd0:	251e      	movs	r5, #30
 8012fd2:	197b      	adds	r3, r7, r5
 8012fd4:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	2002      	movs	r0, #2
 8012fda:	5618      	ldrsb	r0, [r3, r0]
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	781b      	ldrb	r3, [r3, #0]
 8012fe0:	0019      	movs	r1, r3
 8012fe2:	4a5d      	ldr	r2, [pc, #372]	@ (8013158 <RegionIN865TxConfig+0x1a0>)
 8012fe4:	000b      	movs	r3, r1
 8012fe6:	005b      	lsls	r3, r3, #1
 8012fe8:	185b      	adds	r3, r3, r1
 8012fea:	009b      	lsls	r3, r3, #2
 8012fec:	18d3      	adds	r3, r2, r3
 8012fee:	3309      	adds	r3, #9
 8012ff0:	781b      	ldrb	r3, [r3, #0]
 8012ff2:	4a59      	ldr	r2, [pc, #356]	@ (8013158 <RegionIN865TxConfig+0x1a0>)
 8012ff4:	330c      	adds	r3, #12
 8012ff6:	011b      	lsls	r3, r3, #4
 8012ff8:	18d3      	adds	r3, r2, r3
 8012ffa:	3302      	adds	r3, #2
 8012ffc:	2100      	movs	r1, #0
 8012ffe:	5659      	ldrsb	r1, [r3, r1]
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	2201      	movs	r2, #1
 8013004:	569a      	ldrsb	r2, [r3, r2]
 8013006:	261d      	movs	r6, #29
 8013008:	19bc      	adds	r4, r7, r6
 801300a:	4b54      	ldr	r3, [pc, #336]	@ (801315c <RegionIN865TxConfig+0x1a4>)
 801300c:	f7ff fa8a 	bl	8012524 <LimitTxPower>
 8013010:	0003      	movs	r3, r0
 8013012:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	785b      	ldrb	r3, [r3, #1]
 8013018:	b25b      	sxtb	r3, r3
 801301a:	0018      	movs	r0, r3
 801301c:	f7ff fa64 	bl	80124e8 <GetBandwidth>
 8013020:	0003      	movs	r3, r0
 8013022:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 8013024:	2017      	movs	r0, #23
 8013026:	183b      	adds	r3, r7, r0
 8013028:	2200      	movs	r2, #0
 801302a:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	6859      	ldr	r1, [r3, #4]
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	689a      	ldr	r2, [r3, #8]
 8013034:	183c      	adds	r4, r7, r0
 8013036:	19bb      	adds	r3, r7, r6
 8013038:	781b      	ldrb	r3, [r3, #0]
 801303a:	b25b      	sxtb	r3, r3
 801303c:	0018      	movs	r0, r3
 801303e:	f7ff f95b 	bl	80122f8 <RegionCommonComputeTxPower>
 8013042:	0003      	movs	r3, r0
 8013044:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 8013046:	4b46      	ldr	r3, [pc, #280]	@ (8013160 <RegionIN865TxConfig+0x1a8>)
 8013048:	695a      	ldr	r2, [r3, #20]
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	781b      	ldrb	r3, [r3, #0]
 801304e:	0018      	movs	r0, r3
 8013050:	4941      	ldr	r1, [pc, #260]	@ (8013158 <RegionIN865TxConfig+0x1a0>)
 8013052:	0003      	movs	r3, r0
 8013054:	005b      	lsls	r3, r3, #1
 8013056:	181b      	adds	r3, r3, r0
 8013058:	009b      	lsls	r3, r3, #2
 801305a:	585b      	ldr	r3, [r3, r1]
 801305c:	0018      	movs	r0, r3
 801305e:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	785b      	ldrb	r3, [r3, #1]
 8013064:	b25b      	sxtb	r3, r3
 8013066:	2b07      	cmp	r3, #7
 8013068:	d12e      	bne.n	80130c8 <RegionIN865TxConfig+0x110>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801306a:	231f      	movs	r3, #31
 801306c:	18fb      	adds	r3, r7, r3
 801306e:	2200      	movs	r2, #0
 8013070:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8013072:	4b3b      	ldr	r3, [pc, #236]	@ (8013160 <RegionIN865TxConfig+0x1a8>)
 8013074:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013076:	197b      	adds	r3, r7, r5
 8013078:	2200      	movs	r2, #0
 801307a:	569a      	ldrsb	r2, [r3, r2]
 801307c:	0013      	movs	r3, r2
 801307e:	015b      	lsls	r3, r3, #5
 8013080:	1a9b      	subs	r3, r3, r2
 8013082:	009b      	lsls	r3, r3, #2
 8013084:	189b      	adds	r3, r3, r2
 8013086:	00db      	lsls	r3, r3, #3
 8013088:	001e      	movs	r6, r3
 801308a:	69ba      	ldr	r2, [r7, #24]
 801308c:	4d35      	ldr	r5, [pc, #212]	@ (8013164 <RegionIN865TxConfig+0x1ac>)
 801308e:	2017      	movs	r0, #23
 8013090:	183b      	adds	r3, r7, r0
 8013092:	2100      	movs	r1, #0
 8013094:	5659      	ldrsb	r1, [r3, r1]
 8013096:	231f      	movs	r3, #31
 8013098:	18fb      	adds	r3, r7, r3
 801309a:	7818      	ldrb	r0, [r3, #0]
 801309c:	23fa      	movs	r3, #250	@ 0xfa
 801309e:	011b      	lsls	r3, r3, #4
 80130a0:	9308      	str	r3, [sp, #32]
 80130a2:	2300      	movs	r3, #0
 80130a4:	9307      	str	r3, [sp, #28]
 80130a6:	2300      	movs	r3, #0
 80130a8:	9306      	str	r3, [sp, #24]
 80130aa:	2300      	movs	r3, #0
 80130ac:	9305      	str	r3, [sp, #20]
 80130ae:	2301      	movs	r3, #1
 80130b0:	9304      	str	r3, [sp, #16]
 80130b2:	2300      	movs	r3, #0
 80130b4:	9303      	str	r3, [sp, #12]
 80130b6:	2305      	movs	r3, #5
 80130b8:	9302      	str	r3, [sp, #8]
 80130ba:	2300      	movs	r3, #0
 80130bc:	9301      	str	r3, [sp, #4]
 80130be:	9600      	str	r6, [sp, #0]
 80130c0:	0013      	movs	r3, r2
 80130c2:	002a      	movs	r2, r5
 80130c4:	47a0      	blx	r4
 80130c6:	e025      	b.n	8013114 <RegionIN865TxConfig+0x15c>
    }
    else
    {
        modem = MODEM_LORA;
 80130c8:	201f      	movs	r0, #31
 80130ca:	183b      	adds	r3, r7, r0
 80130cc:	2201      	movs	r2, #1
 80130ce:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80130d0:	4b23      	ldr	r3, [pc, #140]	@ (8013160 <RegionIN865TxConfig+0x1a8>)
 80130d2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80130d4:	231e      	movs	r3, #30
 80130d6:	18fb      	adds	r3, r7, r3
 80130d8:	781b      	ldrb	r3, [r3, #0]
 80130da:	b25b      	sxtb	r3, r3
 80130dc:	69bd      	ldr	r5, [r7, #24]
 80130de:	2217      	movs	r2, #23
 80130e0:	18ba      	adds	r2, r7, r2
 80130e2:	2100      	movs	r1, #0
 80130e4:	5651      	ldrsb	r1, [r2, r1]
 80130e6:	183a      	adds	r2, r7, r0
 80130e8:	7810      	ldrb	r0, [r2, #0]
 80130ea:	22fa      	movs	r2, #250	@ 0xfa
 80130ec:	0112      	lsls	r2, r2, #4
 80130ee:	9208      	str	r2, [sp, #32]
 80130f0:	2200      	movs	r2, #0
 80130f2:	9207      	str	r2, [sp, #28]
 80130f4:	2200      	movs	r2, #0
 80130f6:	9206      	str	r2, [sp, #24]
 80130f8:	2200      	movs	r2, #0
 80130fa:	9205      	str	r2, [sp, #20]
 80130fc:	2201      	movs	r2, #1
 80130fe:	9204      	str	r2, [sp, #16]
 8013100:	2200      	movs	r2, #0
 8013102:	9203      	str	r2, [sp, #12]
 8013104:	2208      	movs	r2, #8
 8013106:	9202      	str	r2, [sp, #8]
 8013108:	2201      	movs	r2, #1
 801310a:	9201      	str	r2, [sp, #4]
 801310c:	9300      	str	r3, [sp, #0]
 801310e:	002b      	movs	r3, r5
 8013110:	2200      	movs	r2, #0
 8013112:	47a0      	blx	r4
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8013114:	4b12      	ldr	r3, [pc, #72]	@ (8013160 <RegionIN865TxConfig+0x1a8>)
 8013116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013118:	68fa      	ldr	r2, [r7, #12]
 801311a:	8992      	ldrh	r2, [r2, #12]
 801311c:	b2d1      	uxtb	r1, r2
 801311e:	241f      	movs	r4, #31
 8013120:	193a      	adds	r2, r7, r4
 8013122:	7812      	ldrb	r2, [r2, #0]
 8013124:	0010      	movs	r0, r2
 8013126:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 8013128:	4b0d      	ldr	r3, [pc, #52]	@ (8013160 <RegionIN865TxConfig+0x1a8>)
 801312a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801312c:	68fa      	ldr	r2, [r7, #12]
 801312e:	8992      	ldrh	r2, [r2, #12]
 8013130:	b2d1      	uxtb	r1, r2
 8013132:	193a      	adds	r2, r7, r4
 8013134:	7812      	ldrb	r2, [r2, #0]
 8013136:	0010      	movs	r0, r2
 8013138:	4798      	blx	r3
 801313a:	0002      	movs	r2, r0
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8013140:	68bb      	ldr	r3, [r7, #8]
 8013142:	221d      	movs	r2, #29
 8013144:	18ba      	adds	r2, r7, r2
 8013146:	7812      	ldrb	r2, [r2, #0]
 8013148:	701a      	strb	r2, [r3, #0]
    return true;
 801314a:	2301      	movs	r3, #1
}
 801314c:	0018      	movs	r0, r3
 801314e:	46bd      	mov	sp, r7
 8013150:	b009      	add	sp, #36	@ 0x24
 8013152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013154:	0801b3bc 	.word	0x0801b3bc
 8013158:	20001160 	.word	0x20001160
 801315c:	20001230 	.word	0x20001230
 8013160:	0801ac88 	.word	0x0801ac88
 8013164:	000061a8 	.word	0x000061a8

08013168 <RegionIN865LinkAdrReq>:

uint8_t RegionIN865LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8013168:	b5f0      	push	{r4, r5, r6, r7, lr}
 801316a:	b093      	sub	sp, #76	@ 0x4c
 801316c:	af00      	add	r7, sp, #0
 801316e:	60f8      	str	r0, [r7, #12]
 8013170:	60b9      	str	r1, [r7, #8]
 8013172:	607a      	str	r2, [r7, #4]
 8013174:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8013176:	2347      	movs	r3, #71	@ 0x47
 8013178:	18fb      	adds	r3, r7, r3
 801317a:	2207      	movs	r2, #7
 801317c:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 801317e:	2344      	movs	r3, #68	@ 0x44
 8013180:	18fb      	adds	r3, r7, r3
 8013182:	2200      	movs	r2, #0
 8013184:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 8013186:	2346      	movs	r3, #70	@ 0x46
 8013188:	18fb      	adds	r3, r7, r3
 801318a:	2200      	movs	r2, #0
 801318c:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 801318e:	233a      	movs	r3, #58	@ 0x3a
 8013190:	18fb      	adds	r3, r7, r3
 8013192:	2200      	movs	r2, #0
 8013194:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8013196:	e098      	b.n	80132ca <RegionIN865LinkAdrReq+0x162>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	685a      	ldr	r2, [r3, #4]
 801319c:	2546      	movs	r5, #70	@ 0x46
 801319e:	197b      	adds	r3, r7, r5
 80131a0:	781b      	ldrb	r3, [r3, #0]
 80131a2:	18d3      	adds	r3, r2, r3
 80131a4:	2644      	movs	r6, #68	@ 0x44
 80131a6:	19bc      	adds	r4, r7, r6
 80131a8:	203c      	movs	r0, #60	@ 0x3c
 80131aa:	183a      	adds	r2, r7, r0
 80131ac:	0011      	movs	r1, r2
 80131ae:	0018      	movs	r0, r3
 80131b0:	f7fe fee5 	bl	8011f7e <RegionCommonParseLinkAdrReq>
 80131b4:	0003      	movs	r3, r0
 80131b6:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 80131b8:	0032      	movs	r2, r6
 80131ba:	18bb      	adds	r3, r7, r2
 80131bc:	781b      	ldrb	r3, [r3, #0]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d100      	bne.n	80131c4 <RegionIN865LinkAdrReq+0x5c>
 80131c2:	e08b      	b.n	80132dc <RegionIN865LinkAdrReq+0x174>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80131c4:	197b      	adds	r3, r7, r5
 80131c6:	1979      	adds	r1, r7, r5
 80131c8:	18ba      	adds	r2, r7, r2
 80131ca:	7809      	ldrb	r1, [r1, #0]
 80131cc:	7812      	ldrb	r2, [r2, #0]
 80131ce:	188a      	adds	r2, r1, r2
 80131d0:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80131d2:	2147      	movs	r1, #71	@ 0x47
 80131d4:	187b      	adds	r3, r7, r1
 80131d6:	2207      	movs	r2, #7
 80131d8:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80131da:	203c      	movs	r0, #60	@ 0x3c
 80131dc:	183b      	adds	r3, r7, r0
 80131de:	889a      	ldrh	r2, [r3, #4]
 80131e0:	243a      	movs	r4, #58	@ 0x3a
 80131e2:	193b      	adds	r3, r7, r4
 80131e4:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80131e6:	183b      	adds	r3, r7, r0
 80131e8:	78db      	ldrb	r3, [r3, #3]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d10a      	bne.n	8013204 <RegionIN865LinkAdrReq+0x9c>
 80131ee:	193b      	adds	r3, r7, r4
 80131f0:	881b      	ldrh	r3, [r3, #0]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d106      	bne.n	8013204 <RegionIN865LinkAdrReq+0x9c>
        {
            status &= 0xFE; // Channel mask KO
 80131f6:	187b      	adds	r3, r7, r1
 80131f8:	187a      	adds	r2, r7, r1
 80131fa:	7812      	ldrb	r2, [r2, #0]
 80131fc:	2101      	movs	r1, #1
 80131fe:	438a      	bics	r2, r1
 8013200:	701a      	strb	r2, [r3, #0]
 8013202:	e062      	b.n	80132ca <RegionIN865LinkAdrReq+0x162>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8013204:	223c      	movs	r2, #60	@ 0x3c
 8013206:	18bb      	adds	r3, r7, r2
 8013208:	78db      	ldrb	r3, [r3, #3]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d003      	beq.n	8013216 <RegionIN865LinkAdrReq+0xae>
 801320e:	18bb      	adds	r3, r7, r2
 8013210:	78db      	ldrb	r3, [r3, #3]
 8013212:	2b05      	cmp	r3, #5
 8013214:	d904      	bls.n	8013220 <RegionIN865LinkAdrReq+0xb8>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8013216:	233c      	movs	r3, #60	@ 0x3c
 8013218:	18fb      	adds	r3, r7, r3
 801321a:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801321c:	2b06      	cmp	r3, #6
 801321e:	d907      	bls.n	8013230 <RegionIN865LinkAdrReq+0xc8>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8013220:	2247      	movs	r2, #71	@ 0x47
 8013222:	18bb      	adds	r3, r7, r2
 8013224:	18ba      	adds	r2, r7, r2
 8013226:	7812      	ldrb	r2, [r2, #0]
 8013228:	2101      	movs	r1, #1
 801322a:	438a      	bics	r2, r1
 801322c:	701a      	strb	r2, [r3, #0]
 801322e:	e04c      	b.n	80132ca <RegionIN865LinkAdrReq+0x162>
        }
        else
        {
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 8013230:	2345      	movs	r3, #69	@ 0x45
 8013232:	18fb      	adds	r3, r7, r3
 8013234:	2200      	movs	r2, #0
 8013236:	701a      	strb	r2, [r3, #0]
 8013238:	e042      	b.n	80132c0 <RegionIN865LinkAdrReq+0x158>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 801323a:	233c      	movs	r3, #60	@ 0x3c
 801323c:	18fb      	adds	r3, r7, r3
 801323e:	78db      	ldrb	r3, [r3, #3]
 8013240:	2b06      	cmp	r3, #6
 8013242:	d11a      	bne.n	801327a <RegionIN865LinkAdrReq+0x112>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 8013244:	2045      	movs	r0, #69	@ 0x45
 8013246:	183b      	adds	r3, r7, r0
 8013248:	781a      	ldrb	r2, [r3, #0]
 801324a:	4973      	ldr	r1, [pc, #460]	@ (8013418 <RegionIN865LinkAdrReq+0x2b0>)
 801324c:	0013      	movs	r3, r2
 801324e:	005b      	lsls	r3, r3, #1
 8013250:	189b      	adds	r3, r3, r2
 8013252:	009b      	lsls	r3, r3, #2
 8013254:	585b      	ldr	r3, [r3, r1]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d02c      	beq.n	80132b4 <RegionIN865LinkAdrReq+0x14c>
                    {
                        chMask |= 1 << i;
 801325a:	183b      	adds	r3, r7, r0
 801325c:	781b      	ldrb	r3, [r3, #0]
 801325e:	2201      	movs	r2, #1
 8013260:	409a      	lsls	r2, r3
 8013262:	0013      	movs	r3, r2
 8013264:	b21a      	sxth	r2, r3
 8013266:	213a      	movs	r1, #58	@ 0x3a
 8013268:	187b      	adds	r3, r7, r1
 801326a:	881b      	ldrh	r3, [r3, #0]
 801326c:	b21b      	sxth	r3, r3
 801326e:	4313      	orrs	r3, r2
 8013270:	b21b      	sxth	r3, r3
 8013272:	b29a      	uxth	r2, r3
 8013274:	187b      	adds	r3, r7, r1
 8013276:	801a      	strh	r2, [r3, #0]
 8013278:	e01c      	b.n	80132b4 <RegionIN865LinkAdrReq+0x14c>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801327a:	233a      	movs	r3, #58	@ 0x3a
 801327c:	18fb      	adds	r3, r7, r3
 801327e:	881b      	ldrh	r3, [r3, #0]
 8013280:	001a      	movs	r2, r3
 8013282:	2145      	movs	r1, #69	@ 0x45
 8013284:	187b      	adds	r3, r7, r1
 8013286:	781b      	ldrb	r3, [r3, #0]
 8013288:	411a      	asrs	r2, r3
 801328a:	0013      	movs	r3, r2
 801328c:	2201      	movs	r2, #1
 801328e:	4013      	ands	r3, r2
 8013290:	d010      	beq.n	80132b4 <RegionIN865LinkAdrReq+0x14c>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8013292:	187b      	adds	r3, r7, r1
 8013294:	781a      	ldrb	r2, [r3, #0]
 8013296:	4960      	ldr	r1, [pc, #384]	@ (8013418 <RegionIN865LinkAdrReq+0x2b0>)
 8013298:	0013      	movs	r3, r2
 801329a:	005b      	lsls	r3, r3, #1
 801329c:	189b      	adds	r3, r3, r2
 801329e:	009b      	lsls	r3, r3, #2
 80132a0:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d106      	bne.n	80132b4 <RegionIN865LinkAdrReq+0x14c>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80132a6:	2247      	movs	r2, #71	@ 0x47
 80132a8:	18bb      	adds	r3, r7, r2
 80132aa:	18ba      	adds	r2, r7, r2
 80132ac:	7812      	ldrb	r2, [r2, #0]
 80132ae:	2101      	movs	r1, #1
 80132b0:	438a      	bics	r2, r1
 80132b2:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 80132b4:	2145      	movs	r1, #69	@ 0x45
 80132b6:	187b      	adds	r3, r7, r1
 80132b8:	781a      	ldrb	r2, [r3, #0]
 80132ba:	187b      	adds	r3, r7, r1
 80132bc:	3201      	adds	r2, #1
 80132be:	701a      	strb	r2, [r3, #0]
 80132c0:	2345      	movs	r3, #69	@ 0x45
 80132c2:	18fb      	adds	r3, r7, r3
 80132c4:	781b      	ldrb	r3, [r3, #0]
 80132c6:	2b0f      	cmp	r3, #15
 80132c8:	d9b7      	bls.n	801323a <RegionIN865LinkAdrReq+0xd2>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	7a1b      	ldrb	r3, [r3, #8]
 80132ce:	2246      	movs	r2, #70	@ 0x46
 80132d0:	18ba      	adds	r2, r7, r2
 80132d2:	7812      	ldrb	r2, [r2, #0]
 80132d4:	429a      	cmp	r2, r3
 80132d6:	d200      	bcs.n	80132da <RegionIN865LinkAdrReq+0x172>
 80132d8:	e75e      	b.n	8013198 <RegionIN865LinkAdrReq+0x30>
 80132da:	e000      	b.n	80132de <RegionIN865LinkAdrReq+0x176>
            break; // break loop, since no more request has been found
 80132dc:	46c0      	nop			@ (mov r8, r8)
                }
            }
        }
    }

    if( linkAdrParams.Datarate != DR_6 )
 80132de:	253c      	movs	r5, #60	@ 0x3c
 80132e0:	197b      	adds	r3, r7, r5
 80132e2:	785b      	ldrb	r3, [r3, #1]
 80132e4:	b25b      	sxtb	r3, r3
 80132e6:	2b06      	cmp	r3, #6
 80132e8:	d062      	beq.n	80133b0 <RegionIN865LinkAdrReq+0x248>
    {
        // Get the minimum possible datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80132ea:	2134      	movs	r1, #52	@ 0x34
 80132ec:	187b      	adds	r3, r7, r1
 80132ee:	2202      	movs	r2, #2
 80132f0:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	7a5a      	ldrb	r2, [r3, #9]
 80132f6:	187b      	adds	r3, r7, r1
 80132f8:	709a      	strb	r2, [r3, #2]
        phyParam = RegionIN865GetPhyParam( &getPhy );
 80132fa:	187b      	adds	r3, r7, r1
 80132fc:	0018      	movs	r0, r3
 80132fe:	f7ff fa43 	bl	8012788 <RegionIN865GetPhyParam>
 8013302:	0003      	movs	r3, r0
 8013304:	001a      	movs	r2, r3
 8013306:	2030      	movs	r0, #48	@ 0x30
 8013308:	183b      	adds	r3, r7, r0
 801330a:	601a      	str	r2, [r3, #0]

        linkAdrVerifyParams.Status = status;
 801330c:	2110      	movs	r1, #16
 801330e:	187b      	adds	r3, r7, r1
 8013310:	2447      	movs	r4, #71	@ 0x47
 8013312:	193a      	adds	r2, r7, r4
 8013314:	7812      	ldrb	r2, [r2, #0]
 8013316:	711a      	strb	r2, [r3, #4]
        linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	7a9a      	ldrb	r2, [r3, #10]
 801331c:	187b      	adds	r3, r7, r1
 801331e:	715a      	strb	r2, [r3, #5]
        linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8013320:	197b      	adds	r3, r7, r5
 8013322:	2201      	movs	r2, #1
 8013324:	569a      	ldrsb	r2, [r3, r2]
 8013326:	187b      	adds	r3, r7, r1
 8013328:	719a      	strb	r2, [r3, #6]
        linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801332a:	197b      	adds	r3, r7, r5
 801332c:	2202      	movs	r2, #2
 801332e:	569a      	ldrsb	r2, [r3, r2]
 8013330:	187b      	adds	r3, r7, r1
 8013332:	71da      	strb	r2, [r3, #7]
        linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8013334:	197b      	adds	r3, r7, r5
 8013336:	781a      	ldrb	r2, [r3, #0]
 8013338:	187b      	adds	r3, r7, r1
 801333a:	721a      	strb	r2, [r3, #8]
        linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	220b      	movs	r2, #11
 8013340:	569a      	ldrsb	r2, [r3, r2]
 8013342:	187b      	adds	r3, r7, r1
 8013344:	725a      	strb	r2, [r3, #9]
        linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	220c      	movs	r2, #12
 801334a:	569a      	ldrsb	r2, [r3, r2]
 801334c:	187b      	adds	r3, r7, r1
 801334e:	729a      	strb	r2, [r3, #10]
        linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	7b5b      	ldrb	r3, [r3, #13]
 8013354:	b25a      	sxtb	r2, r3
 8013356:	187b      	adds	r3, r7, r1
 8013358:	72da      	strb	r2, [r3, #11]
        linkAdrVerifyParams.NbChannels = IN865_MAX_NB_CHANNELS;
 801335a:	187b      	adds	r3, r7, r1
 801335c:	2210      	movs	r2, #16
 801335e:	731a      	strb	r2, [r3, #12]
        linkAdrVerifyParams.ChannelsMask = &chMask;
 8013360:	187b      	adds	r3, r7, r1
 8013362:	223a      	movs	r2, #58	@ 0x3a
 8013364:	18ba      	adds	r2, r7, r2
 8013366:	611a      	str	r2, [r3, #16]
        linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8013368:	183b      	adds	r3, r7, r0
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	b25a      	sxtb	r2, r3
 801336e:	0008      	movs	r0, r1
 8013370:	183b      	adds	r3, r7, r0
 8013372:	751a      	strb	r2, [r3, #20]
        linkAdrVerifyParams.MaxDatarate = IN865_TX_MAX_DATARATE;
 8013374:	183b      	adds	r3, r7, r0
 8013376:	2207      	movs	r2, #7
 8013378:	755a      	strb	r2, [r3, #21]
        linkAdrVerifyParams.Channels = NvmCtx.Channels;
 801337a:	183b      	adds	r3, r7, r0
 801337c:	4a26      	ldr	r2, [pc, #152]	@ (8013418 <RegionIN865LinkAdrReq+0x2b0>)
 801337e:	619a      	str	r2, [r3, #24]
        linkAdrVerifyParams.MinTxPower = IN865_MIN_TX_POWER;
 8013380:	183b      	adds	r3, r7, r0
 8013382:	220a      	movs	r2, #10
 8013384:	771a      	strb	r2, [r3, #28]
        linkAdrVerifyParams.MaxTxPower = IN865_MAX_TX_POWER;
 8013386:	183b      	adds	r3, r7, r0
 8013388:	2200      	movs	r2, #0
 801338a:	775a      	strb	r2, [r3, #29]
        linkAdrVerifyParams.Version = linkAdrReq->Version;
 801338c:	183b      	adds	r3, r7, r0
 801338e:	68fa      	ldr	r2, [r7, #12]
 8013390:	6812      	ldr	r2, [r2, #0]
 8013392:	601a      	str	r2, [r3, #0]

        // Verify the parameters and update, if necessary
        status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8013394:	193c      	adds	r4, r7, r4
 8013396:	0029      	movs	r1, r5
 8013398:	187d      	adds	r5, r7, r1
 801339a:	187b      	adds	r3, r7, r1
 801339c:	1c9a      	adds	r2, r3, #2
 801339e:	187b      	adds	r3, r7, r1
 80133a0:	1c59      	adds	r1, r3, #1
 80133a2:	1838      	adds	r0, r7, r0
 80133a4:	002b      	movs	r3, r5
 80133a6:	f7fe fe3f 	bl	8012028 <RegionCommonLinkAdrReqVerifyParams>
 80133aa:	0003      	movs	r3, r0
 80133ac:	7023      	strb	r3, [r4, #0]
 80133ae:	e006      	b.n	80133be <RegionIN865LinkAdrReq+0x256>
    }
    else
    {// DR_6 is not supported by this region
        status &= 0xFD; // Datarate KO
 80133b0:	2247      	movs	r2, #71	@ 0x47
 80133b2:	18bb      	adds	r3, r7, r2
 80133b4:	18ba      	adds	r2, r7, r2
 80133b6:	7812      	ldrb	r2, [r2, #0]
 80133b8:	2102      	movs	r1, #2
 80133ba:	438a      	bics	r2, r1
 80133bc:	701a      	strb	r2, [r3, #0]
    }

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80133be:	2347      	movs	r3, #71	@ 0x47
 80133c0:	18fb      	adds	r3, r7, r3
 80133c2:	781b      	ldrb	r3, [r3, #0]
 80133c4:	2b07      	cmp	r3, #7
 80133c6:	d10b      	bne.n	80133e0 <RegionIN865LinkAdrReq+0x278>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 80133c8:	4b14      	ldr	r3, [pc, #80]	@ (801341c <RegionIN865LinkAdrReq+0x2b4>)
 80133ca:	2202      	movs	r2, #2
 80133cc:	2100      	movs	r1, #0
 80133ce:	0018      	movs	r0, r3
 80133d0:	f002 f910 	bl	80155f4 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 80133d4:	233a      	movs	r3, #58	@ 0x3a
 80133d6:	18fb      	adds	r3, r7, r3
 80133d8:	8819      	ldrh	r1, [r3, #0]
 80133da:	4b0f      	ldr	r3, [pc, #60]	@ (8013418 <RegionIN865LinkAdrReq+0x2b0>)
 80133dc:	22d0      	movs	r2, #208	@ 0xd0
 80133de:	5299      	strh	r1, [r3, r2]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80133e0:	213c      	movs	r1, #60	@ 0x3c
 80133e2:	187b      	adds	r3, r7, r1
 80133e4:	2201      	movs	r2, #1
 80133e6:	569a      	ldrsb	r2, [r3, r2]
 80133e8:	68bb      	ldr	r3, [r7, #8]
 80133ea:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80133ec:	187b      	adds	r3, r7, r1
 80133ee:	2202      	movs	r2, #2
 80133f0:	569a      	ldrsb	r2, [r3, r2]
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80133f6:	187b      	adds	r3, r7, r1
 80133f8:	781a      	ldrb	r2, [r3, #0]
 80133fa:	683b      	ldr	r3, [r7, #0]
 80133fc:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80133fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013400:	2246      	movs	r2, #70	@ 0x46
 8013402:	18ba      	adds	r2, r7, r2
 8013404:	7812      	ldrb	r2, [r2, #0]
 8013406:	701a      	strb	r2, [r3, #0]

    return status;
 8013408:	2347      	movs	r3, #71	@ 0x47
 801340a:	18fb      	adds	r3, r7, r3
 801340c:	781b      	ldrb	r3, [r3, #0]
}
 801340e:	0018      	movs	r0, r3
 8013410:	46bd      	mov	sp, r7
 8013412:	b013      	add	sp, #76	@ 0x4c
 8013414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013416:	46c0      	nop			@ (mov r8, r8)
 8013418:	20001160 	.word	0x20001160
 801341c:	20001230 	.word	0x20001230

08013420 <RegionIN865RxParamSetupReq>:

uint8_t RegionIN865RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8013420:	b590      	push	{r4, r7, lr}
 8013422:	b085      	sub	sp, #20
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8013428:	240f      	movs	r4, #15
 801342a:	193b      	adds	r3, r7, r4
 801342c:	2207      	movs	r2, #7
 801342e:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	685b      	ldr	r3, [r3, #4]
 8013434:	0018      	movs	r0, r3
 8013436:	f7ff f89d 	bl	8012574 <VerifyRfFreq>
 801343a:	0003      	movs	r3, r0
 801343c:	001a      	movs	r2, r3
 801343e:	2301      	movs	r3, #1
 8013440:	4053      	eors	r3, r2
 8013442:	b2db      	uxtb	r3, r3
 8013444:	2b00      	cmp	r3, #0
 8013446:	d005      	beq.n	8013454 <RegionIN865RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8013448:	193b      	adds	r3, r7, r4
 801344a:	193a      	adds	r2, r7, r4
 801344c:	7812      	ldrb	r2, [r2, #0]
 801344e:	2101      	movs	r1, #1
 8013450:	438a      	bics	r2, r1
 8013452:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE ) == false )
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	781b      	ldrb	r3, [r3, #0]
 8013458:	b25b      	sxtb	r3, r3
 801345a:	2207      	movs	r2, #7
 801345c:	2100      	movs	r1, #0
 801345e:	0018      	movs	r0, r3
 8013460:	f7fe fbd7 	bl	8011c12 <RegionCommonValueInRange>
 8013464:	1e03      	subs	r3, r0, #0
 8013466:	d106      	bne.n	8013476 <RegionIN865RxParamSetupReq+0x56>
    {
        status &= 0xFD; // Datarate KO
 8013468:	220f      	movs	r2, #15
 801346a:	18bb      	adds	r3, r7, r2
 801346c:	18ba      	adds	r2, r7, r2
 801346e:	7812      	ldrb	r2, [r2, #0]
 8013470:	2102      	movs	r1, #2
 8013472:	438a      	bics	r2, r1
 8013474:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, IN865_MIN_RX1_DR_OFFSET, IN865_MAX_RX1_DR_OFFSET ) == false )
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	785b      	ldrb	r3, [r3, #1]
 801347a:	b25b      	sxtb	r3, r3
 801347c:	2207      	movs	r2, #7
 801347e:	2100      	movs	r1, #0
 8013480:	0018      	movs	r0, r3
 8013482:	f7fe fbc6 	bl	8011c12 <RegionCommonValueInRange>
 8013486:	1e03      	subs	r3, r0, #0
 8013488:	d106      	bne.n	8013498 <RegionIN865RxParamSetupReq+0x78>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801348a:	220f      	movs	r2, #15
 801348c:	18bb      	adds	r3, r7, r2
 801348e:	18ba      	adds	r2, r7, r2
 8013490:	7812      	ldrb	r2, [r2, #0]
 8013492:	2104      	movs	r1, #4
 8013494:	438a      	bics	r2, r1
 8013496:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8013498:	230f      	movs	r3, #15
 801349a:	18fb      	adds	r3, r7, r3
 801349c:	781b      	ldrb	r3, [r3, #0]
}
 801349e:	0018      	movs	r0, r3
 80134a0:	46bd      	mov	sp, r7
 80134a2:	b005      	add	sp, #20
 80134a4:	bd90      	pop	{r4, r7, pc}

080134a6 <RegionIN865NewChannelReq>:

uint8_t RegionIN865NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80134a6:	b590      	push	{r4, r7, lr}
 80134a8:	b087      	sub	sp, #28
 80134aa:	af00      	add	r7, sp, #0
 80134ac:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80134ae:	2417      	movs	r4, #23
 80134b0:	193b      	adds	r3, r7, r4
 80134b2:	2203      	movs	r2, #3
 80134b4:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d118      	bne.n	80134f2 <RegionIN865NewChannelReq+0x4c>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	791b      	ldrb	r3, [r3, #4]
 80134c4:	b25b      	sxtb	r3, r3
 80134c6:	b2da      	uxtb	r2, r3
 80134c8:	2108      	movs	r1, #8
 80134ca:	187b      	adds	r3, r7, r1
 80134cc:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionIN865ChannelsRemove( &channelRemove ) == false )
 80134ce:	187b      	adds	r3, r7, r1
 80134d0:	0018      	movs	r0, r3
 80134d2:	f000 fa41 	bl	8013958 <RegionIN865ChannelsRemove>
 80134d6:	0003      	movs	r3, r0
 80134d8:	001a      	movs	r2, r3
 80134da:	2301      	movs	r3, #1
 80134dc:	4053      	eors	r3, r2
 80134de:	b2db      	uxtb	r3, r3
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d041      	beq.n	8013568 <RegionIN865NewChannelReq+0xc2>
        {
            status &= 0xFC;
 80134e4:	193b      	adds	r3, r7, r4
 80134e6:	193a      	adds	r2, r7, r4
 80134e8:	7812      	ldrb	r2, [r2, #0]
 80134ea:	2103      	movs	r1, #3
 80134ec:	438a      	bics	r2, r1
 80134ee:	701a      	strb	r2, [r3, #0]
 80134f0:	e03a      	b.n	8013568 <RegionIN865NewChannelReq+0xc2>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	681a      	ldr	r2, [r3, #0]
 80134f6:	210c      	movs	r1, #12
 80134f8:	187b      	adds	r3, r7, r1
 80134fa:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	791b      	ldrb	r3, [r3, #4]
 8013500:	b25b      	sxtb	r3, r3
 8013502:	b2da      	uxtb	r2, r3
 8013504:	187b      	adds	r3, r7, r1
 8013506:	711a      	strb	r2, [r3, #4]

        switch( RegionIN865ChannelAdd( &channelAdd ) )
 8013508:	187b      	adds	r3, r7, r1
 801350a:	0018      	movs	r0, r3
 801350c:	f000 f96c 	bl	80137e8 <RegionIN865ChannelAdd>
 8013510:	0003      	movs	r3, r0
 8013512:	2b06      	cmp	r3, #6
 8013514:	d017      	beq.n	8013546 <RegionIN865NewChannelReq+0xa0>
 8013516:	dc1e      	bgt.n	8013556 <RegionIN865NewChannelReq+0xb0>
 8013518:	2b05      	cmp	r3, #5
 801351a:	d00c      	beq.n	8013536 <RegionIN865NewChannelReq+0x90>
 801351c:	dc1b      	bgt.n	8013556 <RegionIN865NewChannelReq+0xb0>
 801351e:	2b00      	cmp	r3, #0
 8013520:	d021      	beq.n	8013566 <RegionIN865NewChannelReq+0xc0>
 8013522:	2b04      	cmp	r3, #4
 8013524:	d117      	bne.n	8013556 <RegionIN865NewChannelReq+0xb0>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8013526:	2217      	movs	r2, #23
 8013528:	18bb      	adds	r3, r7, r2
 801352a:	18ba      	adds	r2, r7, r2
 801352c:	7812      	ldrb	r2, [r2, #0]
 801352e:	2101      	movs	r1, #1
 8013530:	438a      	bics	r2, r1
 8013532:	701a      	strb	r2, [r3, #0]
                break;
 8013534:	e018      	b.n	8013568 <RegionIN865NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8013536:	2217      	movs	r2, #23
 8013538:	18bb      	adds	r3, r7, r2
 801353a:	18ba      	adds	r2, r7, r2
 801353c:	7812      	ldrb	r2, [r2, #0]
 801353e:	2102      	movs	r1, #2
 8013540:	438a      	bics	r2, r1
 8013542:	701a      	strb	r2, [r3, #0]
                break;
 8013544:	e010      	b.n	8013568 <RegionIN865NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8013546:	2217      	movs	r2, #23
 8013548:	18bb      	adds	r3, r7, r2
 801354a:	18ba      	adds	r2, r7, r2
 801354c:	7812      	ldrb	r2, [r2, #0]
 801354e:	2103      	movs	r1, #3
 8013550:	438a      	bics	r2, r1
 8013552:	701a      	strb	r2, [r3, #0]
                break;
 8013554:	e008      	b.n	8013568 <RegionIN865NewChannelReq+0xc2>
            }
            default:
            {
                status &= 0xFC;
 8013556:	2217      	movs	r2, #23
 8013558:	18bb      	adds	r3, r7, r2
 801355a:	18ba      	adds	r2, r7, r2
 801355c:	7812      	ldrb	r2, [r2, #0]
 801355e:	2103      	movs	r1, #3
 8013560:	438a      	bics	r2, r1
 8013562:	701a      	strb	r2, [r3, #0]
                break;
 8013564:	e000      	b.n	8013568 <RegionIN865NewChannelReq+0xc2>
                break;
 8013566:	46c0      	nop			@ (mov r8, r8)
            }
        }
    }

    return status;
 8013568:	2317      	movs	r3, #23
 801356a:	18fb      	adds	r3, r7, r3
 801356c:	781b      	ldrb	r3, [r3, #0]
}
 801356e:	0018      	movs	r0, r3
 8013570:	46bd      	mov	sp, r7
 8013572:	b007      	add	sp, #28
 8013574:	bd90      	pop	{r4, r7, pc}

08013576 <RegionIN865TxParamSetupReq>:

int8_t RegionIN865TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8013576:	b580      	push	{r7, lr}
 8013578:	b082      	sub	sp, #8
 801357a:	af00      	add	r7, sp, #0
 801357c:	6078      	str	r0, [r7, #4]
    return -1;
 801357e:	2301      	movs	r3, #1
 8013580:	425b      	negs	r3, r3
}
 8013582:	0018      	movs	r0, r3
 8013584:	46bd      	mov	sp, r7
 8013586:	b002      	add	sp, #8
 8013588:	bd80      	pop	{r7, pc}
	...

0801358c <RegionIN865DlChannelReq>:

uint8_t RegionIN865DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801358c:	b590      	push	{r4, r7, lr}
 801358e:	b085      	sub	sp, #20
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8013594:	240f      	movs	r4, #15
 8013596:	193b      	adds	r3, r7, r4
 8013598:	2203      	movs	r2, #3
 801359a:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	685b      	ldr	r3, [r3, #4]
 80135a0:	0018      	movs	r0, r3
 80135a2:	f7fe ffe7 	bl	8012574 <VerifyRfFreq>
 80135a6:	0003      	movs	r3, r0
 80135a8:	001a      	movs	r2, r3
 80135aa:	2301      	movs	r3, #1
 80135ac:	4053      	eors	r3, r2
 80135ae:	b2db      	uxtb	r3, r3
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d005      	beq.n	80135c0 <RegionIN865DlChannelReq+0x34>
    {
        status &= 0xFE;
 80135b4:	193b      	adds	r3, r7, r4
 80135b6:	193a      	adds	r2, r7, r4
 80135b8:	7812      	ldrb	r2, [r2, #0]
 80135ba:	2101      	movs	r1, #1
 80135bc:	438a      	bics	r2, r1
 80135be:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	781b      	ldrb	r3, [r3, #0]
 80135c4:	0019      	movs	r1, r3
 80135c6:	4a14      	ldr	r2, [pc, #80]	@ (8013618 <RegionIN865DlChannelReq+0x8c>)
 80135c8:	000b      	movs	r3, r1
 80135ca:	005b      	lsls	r3, r3, #1
 80135cc:	185b      	adds	r3, r3, r1
 80135ce:	009b      	lsls	r3, r3, #2
 80135d0:	589b      	ldr	r3, [r3, r2]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d106      	bne.n	80135e4 <RegionIN865DlChannelReq+0x58>
    {
        status &= 0xFD;
 80135d6:	220f      	movs	r2, #15
 80135d8:	18bb      	adds	r3, r7, r2
 80135da:	18ba      	adds	r2, r7, r2
 80135dc:	7812      	ldrb	r2, [r2, #0]
 80135de:	2102      	movs	r1, #2
 80135e0:	438a      	bics	r2, r1
 80135e2:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80135e4:	230f      	movs	r3, #15
 80135e6:	18fb      	adds	r3, r7, r3
 80135e8:	781b      	ldrb	r3, [r3, #0]
 80135ea:	2b03      	cmp	r3, #3
 80135ec:	d10c      	bne.n	8013608 <RegionIN865DlChannelReq+0x7c>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	781b      	ldrb	r3, [r3, #0]
 80135f2:	0018      	movs	r0, r3
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	685a      	ldr	r2, [r3, #4]
 80135f8:	4907      	ldr	r1, [pc, #28]	@ (8013618 <RegionIN865DlChannelReq+0x8c>)
 80135fa:	0003      	movs	r3, r0
 80135fc:	005b      	lsls	r3, r3, #1
 80135fe:	181b      	adds	r3, r3, r0
 8013600:	009b      	lsls	r3, r3, #2
 8013602:	18cb      	adds	r3, r1, r3
 8013604:	3304      	adds	r3, #4
 8013606:	601a      	str	r2, [r3, #0]
    }

    return status;
 8013608:	230f      	movs	r3, #15
 801360a:	18fb      	adds	r3, r7, r3
 801360c:	781b      	ldrb	r3, [r3, #0]
}
 801360e:	0018      	movs	r0, r3
 8013610:	46bd      	mov	sp, r7
 8013612:	b005      	add	sp, #20
 8013614:	bd90      	pop	{r4, r7, pc}
 8013616:	46c0      	nop			@ (mov r8, r8)
 8013618:	20001160 	.word	0x20001160

0801361c <RegionIN865AlternateDr>:

int8_t RegionIN865AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b082      	sub	sp, #8
 8013620:	af00      	add	r7, sp, #0
 8013622:	0002      	movs	r2, r0
 8013624:	1dfb      	adds	r3, r7, #7
 8013626:	701a      	strb	r2, [r3, #0]
 8013628:	1dbb      	adds	r3, r7, #6
 801362a:	1c0a      	adds	r2, r1, #0
 801362c:	701a      	strb	r2, [r3, #0]
    return currentDr;
 801362e:	1dfb      	adds	r3, r7, #7
 8013630:	781b      	ldrb	r3, [r3, #0]
 8013632:	b25b      	sxtb	r3, r3
}
 8013634:	0018      	movs	r0, r3
 8013636:	46bd      	mov	sp, r7
 8013638:	b002      	add	sp, #8
 801363a:	bd80      	pop	{r7, pc}

0801363c <RegionIN865CalcBackOff>:

void RegionIN865CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b088      	sub	sp, #32
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 8013644:	210c      	movs	r1, #12
 8013646:	187b      	adds	r3, r7, r1
 8013648:	4a12      	ldr	r2, [pc, #72]	@ (8013694 <RegionIN865CalcBackOff+0x58>)
 801364a:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 801364c:	187b      	adds	r3, r7, r1
 801364e:	4a12      	ldr	r2, [pc, #72]	@ (8013698 <RegionIN865CalcBackOff+0x5c>)
 8013650:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	785a      	ldrb	r2, [r3, #1]
 8013656:	187b      	adds	r3, r7, r1
 8013658:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	781a      	ldrb	r2, [r3, #0]
 801365e:	187b      	adds	r3, r7, r1
 8013660:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	789a      	ldrb	r2, [r3, #2]
 8013666:	187b      	adds	r3, r7, r1
 8013668:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	78da      	ldrb	r2, [r3, #3]
 801366e:	187b      	adds	r3, r7, r1
 8013670:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	685a      	ldr	r2, [r3, #4]
 8013676:	187b      	adds	r3, r7, r1
 8013678:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	689a      	ldr	r2, [r3, #8]
 801367e:	187b      	adds	r3, r7, r1
 8013680:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 8013682:	187b      	adds	r3, r7, r1
 8013684:	0018      	movs	r0, r3
 8013686:	f7fe fe70 	bl	801236a <RegionCommonCalcBackOff>
}
 801368a:	46c0      	nop			@ (mov r8, r8)
 801368c:	46bd      	mov	sp, r7
 801368e:	b008      	add	sp, #32
 8013690:	bd80      	pop	{r7, pc}
 8013692:	46c0      	nop			@ (mov r8, r8)
 8013694:	20001160 	.word	0x20001160
 8013698:	20001220 	.word	0x20001220

0801369c <RegionIN865NextChannel>:

LoRaMacStatus_t RegionIN865NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801369c:	b5b0      	push	{r4, r5, r7, lr}
 801369e:	b090      	sub	sp, #64	@ 0x40
 80136a0:	af04      	add	r7, sp, #16
 80136a2:	60f8      	str	r0, [r7, #12]
 80136a4:	60b9      	str	r1, [r7, #8]
 80136a6:	607a      	str	r2, [r7, #4]
 80136a8:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 80136aa:	232f      	movs	r3, #47	@ 0x2f
 80136ac:	18fb      	adds	r3, r7, r3
 80136ae:	2200      	movs	r2, #0
 80136b0:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 80136b2:	2323      	movs	r3, #35	@ 0x23
 80136b4:	18fb      	adds	r3, r7, r3
 80136b6:	2200      	movs	r2, #0
 80136b8:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[IN865_MAX_NB_CHANNELS] = { 0 };
 80136ba:	2310      	movs	r3, #16
 80136bc:	18fb      	adds	r3, r7, r3
 80136be:	2200      	movs	r2, #0
 80136c0:	601a      	str	r2, [r3, #0]
 80136c2:	3304      	adds	r3, #4
 80136c4:	220c      	movs	r2, #12
 80136c6:	2100      	movs	r1, #0
 80136c8:	0018      	movs	r0, r3
 80136ca:	f006 f96f 	bl	80199ac <memset>
    TimerTime_t nextTxDelay = 0;
 80136ce:	2300      	movs	r3, #0
 80136d0:	62bb      	str	r3, [r7, #40]	@ 0x28

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 80136d2:	4b42      	ldr	r3, [pc, #264]	@ (80137dc <RegionIN865NextChannel+0x140>)
 80136d4:	2201      	movs	r2, #1
 80136d6:	2100      	movs	r1, #0
 80136d8:	0018      	movs	r0, r3
 80136da:	f7fe fb02 	bl	8011ce2 <RegionCommonCountChannels>
 80136de:	1e03      	subs	r3, r0, #0
 80136e0:	d108      	bne.n	80136f4 <RegionIN865NextChannel+0x58>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80136e2:	4b3f      	ldr	r3, [pc, #252]	@ (80137e0 <RegionIN865NextChannel+0x144>)
 80136e4:	22d0      	movs	r2, #208	@ 0xd0
 80136e6:	5a9b      	ldrh	r3, [r3, r2]
 80136e8:	2207      	movs	r2, #7
 80136ea:	4313      	orrs	r3, r2
 80136ec:	b299      	uxth	r1, r3
 80136ee:	4b3c      	ldr	r3, [pc, #240]	@ (80137e0 <RegionIN865NextChannel+0x144>)
 80136f0:	22d0      	movs	r2, #208	@ 0xd0
 80136f2:	5299      	strh	r1, [r3, r2]
    }

    TimerTime_t elapsed = TimerGetElapsedTime( nextChanParams->LastAggrTx );
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	685b      	ldr	r3, [r3, #4]
 80136f8:	0018      	movs	r0, r3
 80136fa:	f001 fd72 	bl	80151e2 <TimerGetElapsedTime>
 80136fe:	0003      	movs	r3, r0
 8013700:	627b      	str	r3, [r7, #36]	@ 0x24
    if( ( nextChanParams->LastAggrTx == 0 ) || ( nextChanParams->AggrTimeOff <= elapsed ) )
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	685b      	ldr	r3, [r3, #4]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d004      	beq.n	8013714 <RegionIN865NextChannel+0x78>
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013710:	429a      	cmp	r2, r3
 8013712:	d324      	bcc.n	801375e <RegionIN865NextChannel+0xc2>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8013714:	683b      	ldr	r3, [r7, #0]
 8013716:	2200      	movs	r2, #0
 8013718:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, IN865_MAX_NB_BANDS );
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	7a58      	ldrb	r0, [r3, #9]
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	7a99      	ldrb	r1, [r3, #10]
 8013722:	4a30      	ldr	r2, [pc, #192]	@ (80137e4 <RegionIN865NextChannel+0x148>)
 8013724:	2301      	movs	r3, #1
 8013726:	f7fe fb67 	bl	8011df8 <RegionCommonUpdateBandTimeOff>
 801372a:	0003      	movs	r3, r0
 801372c:	62bb      	str	r3, [r7, #40]	@ 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	7a58      	ldrb	r0, [r3, #9]
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	7a1b      	ldrb	r3, [r3, #8]
 8013736:	b25b      	sxtb	r3, r3
 8013738:	b2d9      	uxtb	r1, r3
 801373a:	232f      	movs	r3, #47	@ 0x2f
 801373c:	18fc      	adds	r4, r7, r3
 801373e:	4d28      	ldr	r5, [pc, #160]	@ (80137e0 <RegionIN865NextChannel+0x144>)
 8013740:	4a26      	ldr	r2, [pc, #152]	@ (80137dc <RegionIN865NextChannel+0x140>)
 8013742:	2323      	movs	r3, #35	@ 0x23
 8013744:	18fb      	adds	r3, r7, r3
 8013746:	9302      	str	r3, [sp, #8]
 8013748:	2310      	movs	r3, #16
 801374a:	18fb      	adds	r3, r7, r3
 801374c:	9301      	str	r3, [sp, #4]
 801374e:	4b25      	ldr	r3, [pc, #148]	@ (80137e4 <RegionIN865NextChannel+0x148>)
 8013750:	9300      	str	r3, [sp, #0]
 8013752:	002b      	movs	r3, r5
 8013754:	f7fe ff36 	bl	80125c4 <CountNbOfEnabledChannels>
 8013758:	0003      	movs	r3, r0
 801375a:	7023      	strb	r3, [r4, #0]
 801375c:	e00b      	b.n	8013776 <RegionIN865NextChannel+0xda>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 801375e:	2123      	movs	r1, #35	@ 0x23
 8013760:	187b      	adds	r3, r7, r1
 8013762:	781b      	ldrb	r3, [r3, #0]
 8013764:	3301      	adds	r3, #1
 8013766:	b2da      	uxtb	r2, r3
 8013768:	187b      	adds	r3, r7, r1
 801376a:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - elapsed;
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	681a      	ldr	r2, [r3, #0]
 8013770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013772:	1ad3      	subs	r3, r2, r3
 8013774:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if( nbEnabledChannels > 0 )
 8013776:	222f      	movs	r2, #47	@ 0x2f
 8013778:	18bb      	adds	r3, r7, r2
 801377a:	781b      	ldrb	r3, [r3, #0]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d011      	beq.n	80137a4 <RegionIN865NextChannel+0x108>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8013780:	18bb      	adds	r3, r7, r2
 8013782:	781b      	ldrb	r3, [r3, #0]
 8013784:	3b01      	subs	r3, #1
 8013786:	0019      	movs	r1, r3
 8013788:	2000      	movs	r0, #0
 801378a:	f001 fedf 	bl	801554c <randr>
 801378e:	0002      	movs	r2, r0
 8013790:	2310      	movs	r3, #16
 8013792:	18fb      	adds	r3, r7, r3
 8013794:	5c9a      	ldrb	r2, [r3, r2]
 8013796:	68bb      	ldr	r3, [r7, #8]
 8013798:	701a      	strb	r2, [r3, #0]

        *time = 0;
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	2200      	movs	r2, #0
 801379e:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80137a0:	2300      	movs	r3, #0
 80137a2:	e016      	b.n	80137d2 <RegionIN865NextChannel+0x136>
    }
    else
    {
        if( delayTx > 0 )
 80137a4:	2323      	movs	r3, #35	@ 0x23
 80137a6:	18fb      	adds	r3, r7, r3
 80137a8:	781b      	ldrb	r3, [r3, #0]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d004      	beq.n	80137b8 <RegionIN865NextChannel+0x11c>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80137b2:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80137b4:	230b      	movs	r3, #11
 80137b6:	e00c      	b.n	80137d2 <RegionIN865NextChannel+0x136>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80137b8:	4b09      	ldr	r3, [pc, #36]	@ (80137e0 <RegionIN865NextChannel+0x144>)
 80137ba:	22d0      	movs	r2, #208	@ 0xd0
 80137bc:	5a9b      	ldrh	r3, [r3, r2]
 80137be:	2207      	movs	r2, #7
 80137c0:	4313      	orrs	r3, r2
 80137c2:	b299      	uxth	r1, r3
 80137c4:	4b06      	ldr	r3, [pc, #24]	@ (80137e0 <RegionIN865NextChannel+0x144>)
 80137c6:	22d0      	movs	r2, #208	@ 0xd0
 80137c8:	5299      	strh	r1, [r3, r2]
        *time = 0;
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	2200      	movs	r2, #0
 80137ce:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80137d0:	230c      	movs	r3, #12
    }
}
 80137d2:	0018      	movs	r0, r3
 80137d4:	46bd      	mov	sp, r7
 80137d6:	b00c      	add	sp, #48	@ 0x30
 80137d8:	bdb0      	pop	{r4, r5, r7, pc}
 80137da:	46c0      	nop			@ (mov r8, r8)
 80137dc:	20001230 	.word	0x20001230
 80137e0:	20001160 	.word	0x20001160
 80137e4:	20001220 	.word	0x20001220

080137e8 <RegionIN865ChannelAdd>:

LoRaMacStatus_t RegionIN865ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80137e8:	b590      	push	{r4, r7, lr}
 80137ea:	b085      	sub	sp, #20
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
    bool drInvalid = false;
 80137f0:	230f      	movs	r3, #15
 80137f2:	18fb      	adds	r3, r7, r3
 80137f4:	2200      	movs	r2, #0
 80137f6:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 80137f8:	230e      	movs	r3, #14
 80137fa:	18fb      	adds	r3, r7, r3
 80137fc:	2200      	movs	r2, #0
 80137fe:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 8013800:	210d      	movs	r1, #13
 8013802:	187b      	adds	r3, r7, r1
 8013804:	687a      	ldr	r2, [r7, #4]
 8013806:	7912      	ldrb	r2, [r2, #4]
 8013808:	701a      	strb	r2, [r3, #0]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 801380a:	187b      	adds	r3, r7, r1
 801380c:	781b      	ldrb	r3, [r3, #0]
 801380e:	2b02      	cmp	r3, #2
 8013810:	d801      	bhi.n	8013816 <RegionIN865ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8013812:	2306      	movs	r3, #6
 8013814:	e09a      	b.n	801394c <RegionIN865ChannelAdd+0x164>
    }

    if( id >= IN865_MAX_NB_CHANNELS )
 8013816:	230d      	movs	r3, #13
 8013818:	18fb      	adds	r3, r7, r3
 801381a:	781b      	ldrb	r3, [r3, #0]
 801381c:	2b0f      	cmp	r3, #15
 801381e:	d901      	bls.n	8013824 <RegionIN865ChannelAdd+0x3c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013820:	2303      	movs	r3, #3
 8013822:	e093      	b.n	801394c <RegionIN865ChannelAdd+0x164>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	7a1b      	ldrb	r3, [r3, #8]
 801382a:	011b      	lsls	r3, r3, #4
 801382c:	b25b      	sxtb	r3, r3
 801382e:	111b      	asrs	r3, r3, #4
 8013830:	b25b      	sxtb	r3, r3
 8013832:	2207      	movs	r2, #7
 8013834:	2100      	movs	r1, #0
 8013836:	0018      	movs	r0, r3
 8013838:	f7fe f9eb 	bl	8011c12 <RegionCommonValueInRange>
 801383c:	1e03      	subs	r3, r0, #0
 801383e:	d103      	bne.n	8013848 <RegionIN865ChannelAdd+0x60>
    {
        drInvalid = true;
 8013840:	230f      	movs	r3, #15
 8013842:	18fb      	adds	r3, r7, r3
 8013844:	2201      	movs	r2, #1
 8013846:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	7a1b      	ldrb	r3, [r3, #8]
 801384e:	b25b      	sxtb	r3, r3
 8013850:	111b      	asrs	r3, r3, #4
 8013852:	b25b      	sxtb	r3, r3
 8013854:	2207      	movs	r2, #7
 8013856:	2100      	movs	r1, #0
 8013858:	0018      	movs	r0, r3
 801385a:	f7fe f9da 	bl	8011c12 <RegionCommonValueInRange>
 801385e:	1e03      	subs	r3, r0, #0
 8013860:	d103      	bne.n	801386a <RegionIN865ChannelAdd+0x82>
    {
        drInvalid = true;
 8013862:	230f      	movs	r3, #15
 8013864:	18fb      	adds	r3, r7, r3
 8013866:	2201      	movs	r2, #1
 8013868:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	7a1b      	ldrb	r3, [r3, #8]
 8013870:	011b      	lsls	r3, r3, #4
 8013872:	b25b      	sxtb	r3, r3
 8013874:	111b      	asrs	r3, r3, #4
 8013876:	b25a      	sxtb	r2, r3
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	7a1b      	ldrb	r3, [r3, #8]
 801387e:	b25b      	sxtb	r3, r3
 8013880:	111b      	asrs	r3, r3, #4
 8013882:	b25b      	sxtb	r3, r3
 8013884:	429a      	cmp	r2, r3
 8013886:	dd03      	ble.n	8013890 <RegionIN865ChannelAdd+0xa8>
    {
        drInvalid = true;
 8013888:	230f      	movs	r3, #15
 801388a:	18fb      	adds	r3, r7, r3
 801388c:	2201      	movs	r2, #1
 801388e:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 8013890:	240e      	movs	r4, #14
 8013892:	193b      	adds	r3, r7, r4
 8013894:	781b      	ldrb	r3, [r3, #0]
 8013896:	2201      	movs	r2, #1
 8013898:	4053      	eors	r3, r2
 801389a:	b2db      	uxtb	r3, r3
 801389c:	2b00      	cmp	r3, #0
 801389e:	d00f      	beq.n	80138c0 <RegionIN865ChannelAdd+0xd8>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	0018      	movs	r0, r3
 80138a8:	f7fe fe64 	bl	8012574 <VerifyRfFreq>
 80138ac:	0003      	movs	r3, r0
 80138ae:	001a      	movs	r2, r3
 80138b0:	2301      	movs	r3, #1
 80138b2:	4053      	eors	r3, r2
 80138b4:	b2db      	uxtb	r3, r3
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d002      	beq.n	80138c0 <RegionIN865ChannelAdd+0xd8>
        {
            freqInvalid = true;
 80138ba:	193b      	adds	r3, r7, r4
 80138bc:	2201      	movs	r2, #1
 80138be:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80138c0:	230f      	movs	r3, #15
 80138c2:	18fb      	adds	r3, r7, r3
 80138c4:	781b      	ldrb	r3, [r3, #0]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d006      	beq.n	80138d8 <RegionIN865ChannelAdd+0xf0>
 80138ca:	230e      	movs	r3, #14
 80138cc:	18fb      	adds	r3, r7, r3
 80138ce:	781b      	ldrb	r3, [r3, #0]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d001      	beq.n	80138d8 <RegionIN865ChannelAdd+0xf0>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80138d4:	2306      	movs	r3, #6
 80138d6:	e039      	b.n	801394c <RegionIN865ChannelAdd+0x164>
    }
    if( drInvalid == true )
 80138d8:	230f      	movs	r3, #15
 80138da:	18fb      	adds	r3, r7, r3
 80138dc:	781b      	ldrb	r3, [r3, #0]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d001      	beq.n	80138e6 <RegionIN865ChannelAdd+0xfe>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80138e2:	2305      	movs	r3, #5
 80138e4:	e032      	b.n	801394c <RegionIN865ChannelAdd+0x164>
    }
    if( freqInvalid == true )
 80138e6:	230e      	movs	r3, #14
 80138e8:	18fb      	adds	r3, r7, r3
 80138ea:	781b      	ldrb	r3, [r3, #0]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d001      	beq.n	80138f4 <RegionIN865ChannelAdd+0x10c>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80138f0:	2304      	movs	r3, #4
 80138f2:	e02b      	b.n	801394c <RegionIN865ChannelAdd+0x164>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 80138f4:	240d      	movs	r4, #13
 80138f6:	193b      	adds	r3, r7, r4
 80138f8:	781a      	ldrb	r2, [r3, #0]
 80138fa:	0013      	movs	r3, r2
 80138fc:	005b      	lsls	r3, r3, #1
 80138fe:	189b      	adds	r3, r3, r2
 8013900:	009b      	lsls	r3, r3, #2
 8013902:	4a14      	ldr	r2, [pc, #80]	@ (8013954 <RegionIN865ChannelAdd+0x16c>)
 8013904:	1898      	adds	r0, r3, r2
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	220c      	movs	r2, #12
 801390c:	0019      	movs	r1, r3
 801390e:	f001 fe33 	bl	8015578 <memcpy1>
    NvmCtx.Channels[id].Band = 0;
 8013912:	0020      	movs	r0, r4
 8013914:	183b      	adds	r3, r7, r0
 8013916:	781a      	ldrb	r2, [r3, #0]
 8013918:	490e      	ldr	r1, [pc, #56]	@ (8013954 <RegionIN865ChannelAdd+0x16c>)
 801391a:	0013      	movs	r3, r2
 801391c:	005b      	lsls	r3, r3, #1
 801391e:	189b      	adds	r3, r3, r2
 8013920:	009b      	lsls	r3, r3, #2
 8013922:	18cb      	adds	r3, r1, r3
 8013924:	3309      	adds	r3, #9
 8013926:	2200      	movs	r2, #0
 8013928:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 801392a:	4b0a      	ldr	r3, [pc, #40]	@ (8013954 <RegionIN865ChannelAdd+0x16c>)
 801392c:	22d0      	movs	r2, #208	@ 0xd0
 801392e:	5a9b      	ldrh	r3, [r3, r2]
 8013930:	b21a      	sxth	r2, r3
 8013932:	183b      	adds	r3, r7, r0
 8013934:	781b      	ldrb	r3, [r3, #0]
 8013936:	2101      	movs	r1, #1
 8013938:	4099      	lsls	r1, r3
 801393a:	000b      	movs	r3, r1
 801393c:	b21b      	sxth	r3, r3
 801393e:	4313      	orrs	r3, r2
 8013940:	b21b      	sxth	r3, r3
 8013942:	b299      	uxth	r1, r3
 8013944:	4b03      	ldr	r3, [pc, #12]	@ (8013954 <RegionIN865ChannelAdd+0x16c>)
 8013946:	22d0      	movs	r2, #208	@ 0xd0
 8013948:	5299      	strh	r1, [r3, r2]
    return LORAMAC_STATUS_OK;
 801394a:	2300      	movs	r3, #0
}
 801394c:	0018      	movs	r0, r3
 801394e:	46bd      	mov	sp, r7
 8013950:	b005      	add	sp, #20
 8013952:	bd90      	pop	{r4, r7, pc}
 8013954:	20001160 	.word	0x20001160

08013958 <RegionIN865ChannelsRemove>:

bool RegionIN865ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8013958:	b590      	push	{r4, r7, lr}
 801395a:	b087      	sub	sp, #28
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8013960:	2117      	movs	r1, #23
 8013962:	187b      	adds	r3, r7, r1
 8013964:	687a      	ldr	r2, [r7, #4]
 8013966:	7812      	ldrb	r2, [r2, #0]
 8013968:	701a      	strb	r2, [r3, #0]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 801396a:	187b      	adds	r3, r7, r1
 801396c:	781b      	ldrb	r3, [r3, #0]
 801396e:	2b02      	cmp	r3, #2
 8013970:	d801      	bhi.n	8013976 <RegionIN865ChannelsRemove+0x1e>
    {
        return false;
 8013972:	2300      	movs	r3, #0
 8013974:	e015      	b.n	80139a2 <RegionIN865ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8013976:	2417      	movs	r4, #23
 8013978:	193b      	adds	r3, r7, r4
 801397a:	781a      	ldrb	r2, [r3, #0]
 801397c:	490b      	ldr	r1, [pc, #44]	@ (80139ac <RegionIN865ChannelsRemove+0x54>)
 801397e:	0013      	movs	r3, r2
 8013980:	005b      	lsls	r3, r3, #1
 8013982:	189b      	adds	r3, r3, r2
 8013984:	009b      	lsls	r3, r3, #2
 8013986:	18cb      	adds	r3, r1, r3
 8013988:	220c      	movs	r2, #12
 801398a:	2100      	movs	r1, #0
 801398c:	0018      	movs	r0, r3
 801398e:	f006 f80d 	bl	80199ac <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, IN865_MAX_NB_CHANNELS );
 8013992:	193b      	adds	r3, r7, r4
 8013994:	7819      	ldrb	r1, [r3, #0]
 8013996:	4b06      	ldr	r3, [pc, #24]	@ (80139b0 <RegionIN865ChannelsRemove+0x58>)
 8013998:	2210      	movs	r2, #16
 801399a:	0018      	movs	r0, r3
 801399c:	f7fe f95f 	bl	8011c5e <RegionCommonChanDisable>
 80139a0:	0003      	movs	r3, r0
}
 80139a2:	0018      	movs	r0, r3
 80139a4:	46bd      	mov	sp, r7
 80139a6:	b007      	add	sp, #28
 80139a8:	bd90      	pop	{r4, r7, pc}
 80139aa:	46c0      	nop			@ (mov r8, r8)
 80139ac:	20001160 	.word	0x20001160
 80139b0:	20001230 	.word	0x20001230

080139b4 <RegionIN865SetContinuousWave>:

void RegionIN865SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 80139b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139b6:	b085      	sub	sp, #20
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2002      	movs	r0, #2
 80139c0:	5618      	ldrsb	r0, [r3, r0]
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	781b      	ldrb	r3, [r3, #0]
 80139c6:	0019      	movs	r1, r3
 80139c8:	4a21      	ldr	r2, [pc, #132]	@ (8013a50 <RegionIN865SetContinuousWave+0x9c>)
 80139ca:	000b      	movs	r3, r1
 80139cc:	005b      	lsls	r3, r3, #1
 80139ce:	185b      	adds	r3, r3, r1
 80139d0:	009b      	lsls	r3, r3, #2
 80139d2:	18d3      	adds	r3, r2, r3
 80139d4:	3309      	adds	r3, #9
 80139d6:	781b      	ldrb	r3, [r3, #0]
 80139d8:	4a1d      	ldr	r2, [pc, #116]	@ (8013a50 <RegionIN865SetContinuousWave+0x9c>)
 80139da:	330c      	adds	r3, #12
 80139dc:	011b      	lsls	r3, r3, #4
 80139de:	18d3      	adds	r3, r2, r3
 80139e0:	3302      	adds	r3, #2
 80139e2:	2100      	movs	r1, #0
 80139e4:	5659      	ldrsb	r1, [r3, r1]
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	2201      	movs	r2, #1
 80139ea:	569a      	ldrsb	r2, [r3, r2]
 80139ec:	260f      	movs	r6, #15
 80139ee:	19bc      	adds	r4, r7, r6
 80139f0:	4b18      	ldr	r3, [pc, #96]	@ (8013a54 <RegionIN865SetContinuousWave+0xa0>)
 80139f2:	f7fe fd97 	bl	8012524 <LimitTxPower>
 80139f6:	0003      	movs	r3, r0
 80139f8:	7023      	strb	r3, [r4, #0]
    int8_t phyTxPower = 0;
 80139fa:	200e      	movs	r0, #14
 80139fc:	183b      	adds	r3, r7, r0
 80139fe:	2200      	movs	r2, #0
 8013a00:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	781b      	ldrb	r3, [r3, #0]
 8013a06:	0019      	movs	r1, r3
 8013a08:	4a11      	ldr	r2, [pc, #68]	@ (8013a50 <RegionIN865SetContinuousWave+0x9c>)
 8013a0a:	000b      	movs	r3, r1
 8013a0c:	005b      	lsls	r3, r3, #1
 8013a0e:	185b      	adds	r3, r3, r1
 8013a10:	009b      	lsls	r3, r3, #2
 8013a12:	589b      	ldr	r3, [r3, r2]
 8013a14:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	6859      	ldr	r1, [r3, #4]
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	689a      	ldr	r2, [r3, #8]
 8013a1e:	0005      	movs	r5, r0
 8013a20:	183c      	adds	r4, r7, r0
 8013a22:	19bb      	adds	r3, r7, r6
 8013a24:	781b      	ldrb	r3, [r3, #0]
 8013a26:	b25b      	sxtb	r3, r3
 8013a28:	0018      	movs	r0, r3
 8013a2a:	f7fe fc65 	bl	80122f8 <RegionCommonComputeTxPower>
 8013a2e:	0003      	movs	r3, r0
 8013a30:	7023      	strb	r3, [r4, #0]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8013a32:	4b09      	ldr	r3, [pc, #36]	@ (8013a58 <RegionIN865SetContinuousWave+0xa4>)
 8013a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a36:	687a      	ldr	r2, [r7, #4]
 8013a38:	8994      	ldrh	r4, [r2, #12]
 8013a3a:	197a      	adds	r2, r7, r5
 8013a3c:	2100      	movs	r1, #0
 8013a3e:	5651      	ldrsb	r1, [r2, r1]
 8013a40:	68b8      	ldr	r0, [r7, #8]
 8013a42:	0022      	movs	r2, r4
 8013a44:	4798      	blx	r3
}
 8013a46:	46c0      	nop			@ (mov r8, r8)
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	b005      	add	sp, #20
 8013a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a4e:	46c0      	nop			@ (mov r8, r8)
 8013a50:	20001160 	.word	0x20001160
 8013a54:	20001230 	.word	0x20001230
 8013a58:	0801ac88 	.word	0x0801ac88

08013a5c <RegionIN865ApplyDrOffset>:

uint8_t RegionIN865ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8013a5c:	b590      	push	{r4, r7, lr}
 8013a5e:	b083      	sub	sp, #12
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	0004      	movs	r4, r0
 8013a64:	0008      	movs	r0, r1
 8013a66:	0011      	movs	r1, r2
 8013a68:	1dfb      	adds	r3, r7, #7
 8013a6a:	1c22      	adds	r2, r4, #0
 8013a6c:	701a      	strb	r2, [r3, #0]
 8013a6e:	1dbb      	adds	r3, r7, #6
 8013a70:	1c02      	adds	r2, r0, #0
 8013a72:	701a      	strb	r2, [r3, #0]
 8013a74:	1d7b      	adds	r3, r7, #5
 8013a76:	1c0a      	adds	r2, r1, #0
 8013a78:	701a      	strb	r2, [r3, #0]
    // Apply offset formula
    return MIN( DR_5, MAX( DR_0, dr - EffectiveRx1DrOffsetIN865[drOffset] ) );
 8013a7a:	1dbb      	adds	r3, r7, #6
 8013a7c:	781b      	ldrb	r3, [r3, #0]
 8013a7e:	b25b      	sxtb	r3, r3
 8013a80:	1d7a      	adds	r2, r7, #5
 8013a82:	7812      	ldrb	r2, [r2, #0]
 8013a84:	b252      	sxtb	r2, r2
 8013a86:	490b      	ldr	r1, [pc, #44]	@ (8013ab4 <RegionIN865ApplyDrOffset+0x58>)
 8013a88:	568a      	ldrsb	r2, [r1, r2]
 8013a8a:	1a9b      	subs	r3, r3, r2
 8013a8c:	2b05      	cmp	r3, #5
 8013a8e:	dc0c      	bgt.n	8013aaa <RegionIN865ApplyDrOffset+0x4e>
 8013a90:	1dbb      	adds	r3, r7, #6
 8013a92:	781b      	ldrb	r3, [r3, #0]
 8013a94:	b25b      	sxtb	r3, r3
 8013a96:	1d7a      	adds	r2, r7, #5
 8013a98:	7812      	ldrb	r2, [r2, #0]
 8013a9a:	b252      	sxtb	r2, r2
 8013a9c:	4905      	ldr	r1, [pc, #20]	@ (8013ab4 <RegionIN865ApplyDrOffset+0x58>)
 8013a9e:	568a      	ldrsb	r2, [r1, r2]
 8013aa0:	1a9b      	subs	r3, r3, r2
 8013aa2:	d500      	bpl.n	8013aa6 <RegionIN865ApplyDrOffset+0x4a>
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	b2db      	uxtb	r3, r3
 8013aa8:	e000      	b.n	8013aac <RegionIN865ApplyDrOffset+0x50>
 8013aaa:	2305      	movs	r3, #5
}
 8013aac:	0018      	movs	r0, r3
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	b003      	add	sp, #12
 8013ab2:	bd90      	pop	{r4, r7, pc}
 8013ab4:	0801b3f4 	.word	0x0801b3f4

08013ab8 <certif_running>:
static void OnCertifTxNextPacketTimerEvent( void* context );
static bool certif_tx( void );

/* Exported functions definition---------------------------------------------------------*/
bool certif_running(void)
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	af00      	add	r7, sp, #0
    return certifParam.Running;
 8013abc:	4b02      	ldr	r3, [pc, #8]	@ (8013ac8 <certif_running+0x10>)
 8013abe:	781b      	ldrb	r3, [r3, #0]
}
 8013ac0:	0018      	movs	r0, r3
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	bd80      	pop	{r7, pc}
 8013ac6:	46c0      	nop			@ (mov r8, r8)
 8013ac8:	2000124c 	.word	0x2000124c

08013acc <certif_DownLinkIncrement>:

void certif_DownLinkIncrement( void )
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	af00      	add	r7, sp, #0
    certifParam.DownLinkCounter++;
 8013ad0:	4b05      	ldr	r3, [pc, #20]	@ (8013ae8 <certif_DownLinkIncrement+0x1c>)
 8013ad2:	22f6      	movs	r2, #246	@ 0xf6
 8013ad4:	5a9b      	ldrh	r3, [r3, r2]
 8013ad6:	3301      	adds	r3, #1
 8013ad8:	b299      	uxth	r1, r3
 8013ada:	4b03      	ldr	r3, [pc, #12]	@ (8013ae8 <certif_DownLinkIncrement+0x1c>)
 8013adc:	22f6      	movs	r2, #246	@ 0xf6
 8013ade:	5299      	strh	r1, [r3, r2]
}
 8013ae0:	46c0      	nop			@ (mov r8, r8)
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	bd80      	pop	{r7, pc}
 8013ae6:	46c0      	nop			@ (mov r8, r8)
 8013ae8:	2000124c 	.word	0x2000124c

08013aec <certif_linkCheck>:

void certif_linkCheck(MlmeConfirm_t *mlmeConfirm)
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b082      	sub	sp, #8
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
  certifParam.LinkCheck = true;
 8013af4:	4b08      	ldr	r3, [pc, #32]	@ (8013b18 <certif_linkCheck+0x2c>)
 8013af6:	22f8      	movs	r2, #248	@ 0xf8
 8013af8:	2101      	movs	r1, #1
 8013afa:	5499      	strb	r1, [r3, r2]
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	7a19      	ldrb	r1, [r3, #8]
 8013b00:	4b05      	ldr	r3, [pc, #20]	@ (8013b18 <certif_linkCheck+0x2c>)
 8013b02:	22f9      	movs	r2, #249	@ 0xf9
 8013b04:	5499      	strb	r1, [r3, r2]
  certifParam.NbGateways = mlmeConfirm->NbGateways;
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	7a59      	ldrb	r1, [r3, #9]
 8013b0a:	4b03      	ldr	r3, [pc, #12]	@ (8013b18 <certif_linkCheck+0x2c>)
 8013b0c:	22fa      	movs	r2, #250	@ 0xfa
 8013b0e:	5499      	strb	r1, [r3, r2]
}
 8013b10:	46c0      	nop			@ (mov r8, r8)
 8013b12:	46bd      	mov	sp, r7
 8013b14:	b002      	add	sp, #8
 8013b16:	bd80      	pop	{r7, pc}
 8013b18:	2000124c 	.word	0x2000124c

08013b1c <certif_tx>:

static bool certif_tx( void )
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b086      	sub	sp, #24
 8013b20:	af00      	add	r7, sp, #0
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;
  
  if( certifParam.LinkCheck == true )
 8013b22:	4b47      	ldr	r3, [pc, #284]	@ (8013c40 <certif_tx+0x124>)
 8013b24:	22f8      	movs	r2, #248	@ 0xf8
 8013b26:	5c9b      	ldrb	r3, [r3, r2]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d017      	beq.n	8013b5c <certif_tx+0x40>
  {
    certifParam.LinkCheck = false;
 8013b2c:	4b44      	ldr	r3, [pc, #272]	@ (8013c40 <certif_tx+0x124>)
 8013b2e:	22f8      	movs	r2, #248	@ 0xf8
 8013b30:	2100      	movs	r1, #0
 8013b32:	5499      	strb	r1, [r3, r2]
    certifParam.DataBufferSize = 3;
 8013b34:	4b42      	ldr	r3, [pc, #264]	@ (8013c40 <certif_tx+0x124>)
 8013b36:	2203      	movs	r2, #3
 8013b38:	70da      	strb	r2, [r3, #3]
    certifParam.DataBuffer[0] = 5;
 8013b3a:	4b41      	ldr	r3, [pc, #260]	@ (8013c40 <certif_tx+0x124>)
 8013b3c:	2205      	movs	r2, #5
 8013b3e:	711a      	strb	r2, [r3, #4]
    certifParam.DataBuffer[1] = certifParam.DemodMargin;
 8013b40:	4b3f      	ldr	r3, [pc, #252]	@ (8013c40 <certif_tx+0x124>)
 8013b42:	22f9      	movs	r2, #249	@ 0xf9
 8013b44:	5c9a      	ldrb	r2, [r3, r2]
 8013b46:	4b3e      	ldr	r3, [pc, #248]	@ (8013c40 <certif_tx+0x124>)
 8013b48:	715a      	strb	r2, [r3, #5]
    certifParam.DataBuffer[2] = certifParam.NbGateways;
 8013b4a:	4b3d      	ldr	r3, [pc, #244]	@ (8013c40 <certif_tx+0x124>)
 8013b4c:	22fa      	movs	r2, #250	@ 0xfa
 8013b4e:	5c9a      	ldrb	r2, [r3, r2]
 8013b50:	4b3b      	ldr	r3, [pc, #236]	@ (8013c40 <certif_tx+0x124>)
 8013b52:	719a      	strb	r2, [r3, #6]
    certifParam.State = 1;
 8013b54:	4b3a      	ldr	r3, [pc, #232]	@ (8013c40 <certif_tx+0x124>)
 8013b56:	2201      	movs	r2, #1
 8013b58:	705a      	strb	r2, [r3, #1]
 8013b5a:	e01b      	b.n	8013b94 <certif_tx+0x78>
  }
  else
  {
    switch( certifParam.State )
 8013b5c:	4b38      	ldr	r3, [pc, #224]	@ (8013c40 <certif_tx+0x124>)
 8013b5e:	785b      	ldrb	r3, [r3, #1]
 8013b60:	2b01      	cmp	r3, #1
 8013b62:	d005      	beq.n	8013b70 <certif_tx+0x54>
 8013b64:	2b04      	cmp	r3, #4
 8013b66:	d115      	bne.n	8013b94 <certif_tx+0x78>
    {
    case 4:
      certifParam.State = 1;
 8013b68:	4b35      	ldr	r3, [pc, #212]	@ (8013c40 <certif_tx+0x124>)
 8013b6a:	2201      	movs	r2, #1
 8013b6c:	705a      	strb	r2, [r3, #1]
      break;
 8013b6e:	e011      	b.n	8013b94 <certif_tx+0x78>
    case 1:
      certifParam.DataBufferSize = 2;
 8013b70:	4b33      	ldr	r3, [pc, #204]	@ (8013c40 <certif_tx+0x124>)
 8013b72:	2202      	movs	r2, #2
 8013b74:	70da      	strb	r2, [r3, #3]
      certifParam.DataBuffer[0] = certifParam.DownLinkCounter >> 8;
 8013b76:	4b32      	ldr	r3, [pc, #200]	@ (8013c40 <certif_tx+0x124>)
 8013b78:	22f6      	movs	r2, #246	@ 0xf6
 8013b7a:	5a9b      	ldrh	r3, [r3, r2]
 8013b7c:	0a1b      	lsrs	r3, r3, #8
 8013b7e:	b29b      	uxth	r3, r3
 8013b80:	b2da      	uxtb	r2, r3
 8013b82:	4b2f      	ldr	r3, [pc, #188]	@ (8013c40 <certif_tx+0x124>)
 8013b84:	711a      	strb	r2, [r3, #4]
      certifParam.DataBuffer[1] = certifParam.DownLinkCounter;
 8013b86:	4b2e      	ldr	r3, [pc, #184]	@ (8013c40 <certif_tx+0x124>)
 8013b88:	22f6      	movs	r2, #246	@ 0xf6
 8013b8a:	5a9b      	ldrh	r3, [r3, r2]
 8013b8c:	b2da      	uxtb	r2, r3
 8013b8e:	4b2c      	ldr	r3, [pc, #176]	@ (8013c40 <certif_tx+0x124>)
 8013b90:	715a      	strb	r2, [r3, #5]
      break;
 8013b92:	46c0      	nop			@ (mov r8, r8)
    }
  }
    
  if( LoRaMacQueryTxPossible( certifParam.DataBufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8013b94:	4b2a      	ldr	r3, [pc, #168]	@ (8013c40 <certif_tx+0x124>)
 8013b96:	78db      	ldrb	r3, [r3, #3]
 8013b98:	1d3a      	adds	r2, r7, #4
 8013b9a:	0011      	movs	r1, r2
 8013b9c:	0018      	movs	r0, r3
 8013b9e:	f7fa f803 	bl	800dba8 <LoRaMacQueryTxPossible>
 8013ba2:	1e03      	subs	r3, r0, #0
 8013ba4:	d00d      	beq.n	8013bc2 <certif_tx+0xa6>
  {
      // Send empty frame in order to flush MAC commands
      mcpsReq.Type = MCPS_UNCONFIRMED;
 8013ba6:	2108      	movs	r1, #8
 8013ba8:	187b      	adds	r3, r7, r1
 8013baa:	2200      	movs	r2, #0
 8013bac:	701a      	strb	r2, [r3, #0]
      mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8013bae:	187b      	adds	r3, r7, r1
 8013bb0:	2200      	movs	r2, #0
 8013bb2:	609a      	str	r2, [r3, #8]
      mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8013bb4:	187b      	adds	r3, r7, r1
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	819a      	strh	r2, [r3, #12]
      mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 8013bba:	187b      	adds	r3, r7, r1
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	739a      	strb	r2, [r3, #14]
 8013bc0:	e02b      	b.n	8013c1a <certif_tx+0xfe>
  }
  else
  {
      if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 8013bc2:	4b20      	ldr	r3, [pc, #128]	@ (8013c44 <certif_tx+0x128>)
 8013bc4:	781b      	ldrb	r3, [r3, #0]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d112      	bne.n	8013bf0 <certif_tx+0xd4>
      {
          mcpsReq.Type = MCPS_UNCONFIRMED;
 8013bca:	2108      	movs	r1, #8
 8013bcc:	187b      	adds	r3, r7, r1
 8013bce:	2200      	movs	r2, #0
 8013bd0:	701a      	strb	r2, [r3, #0]
          mcpsReq.Req.Unconfirmed.fPort = CERTIF_PORT;
 8013bd2:	187b      	adds	r3, r7, r1
 8013bd4:	22e0      	movs	r2, #224	@ 0xe0
 8013bd6:	711a      	strb	r2, [r3, #4]
          mcpsReq.Req.Unconfirmed.fBufferSize = certifParam.DataBufferSize;
 8013bd8:	4b19      	ldr	r3, [pc, #100]	@ (8013c40 <certif_tx+0x124>)
 8013bda:	78db      	ldrb	r3, [r3, #3]
 8013bdc:	001a      	movs	r2, r3
 8013bde:	187b      	adds	r3, r7, r1
 8013be0:	819a      	strh	r2, [r3, #12]
          mcpsReq.Req.Unconfirmed.fBuffer = &(certifParam.DataBuffer);
 8013be2:	187b      	adds	r3, r7, r1
 8013be4:	4a18      	ldr	r2, [pc, #96]	@ (8013c48 <certif_tx+0x12c>)
 8013be6:	609a      	str	r2, [r3, #8]
          mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 8013be8:	187b      	adds	r3, r7, r1
 8013bea:	2200      	movs	r2, #0
 8013bec:	739a      	strb	r2, [r3, #14]
 8013bee:	e014      	b.n	8013c1a <certif_tx+0xfe>
      }
      else
      {
          mcpsReq.Type = MCPS_CONFIRMED;
 8013bf0:	2108      	movs	r1, #8
 8013bf2:	187b      	adds	r3, r7, r1
 8013bf4:	2201      	movs	r2, #1
 8013bf6:	701a      	strb	r2, [r3, #0]
          mcpsReq.Req.Confirmed.fPort = CERTIF_PORT;
 8013bf8:	187b      	adds	r3, r7, r1
 8013bfa:	22e0      	movs	r2, #224	@ 0xe0
 8013bfc:	711a      	strb	r2, [r3, #4]
          mcpsReq.Req.Confirmed.fBufferSize = certifParam.DataBufferSize;
 8013bfe:	4b10      	ldr	r3, [pc, #64]	@ (8013c40 <certif_tx+0x124>)
 8013c00:	78db      	ldrb	r3, [r3, #3]
 8013c02:	001a      	movs	r2, r3
 8013c04:	187b      	adds	r3, r7, r1
 8013c06:	819a      	strh	r2, [r3, #12]
          mcpsReq.Req.Confirmed.fBuffer = &(certifParam.DataBuffer);
 8013c08:	187b      	adds	r3, r7, r1
 8013c0a:	4a0f      	ldr	r2, [pc, #60]	@ (8013c48 <certif_tx+0x12c>)
 8013c0c:	609a      	str	r2, [r3, #8]
          mcpsReq.Req.Confirmed.NbTrials = 8;
 8013c0e:	187b      	adds	r3, r7, r1
 8013c10:	2208      	movs	r2, #8
 8013c12:	73da      	strb	r2, [r3, #15]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
 8013c14:	187b      	adds	r3, r7, r1
 8013c16:	2200      	movs	r2, #0
 8013c18:	739a      	strb	r2, [r3, #14]
      }
  }

  /*cerification test on-going*/
  TimerStart( &CertifTxNextPacketTimer );
 8013c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8013c4c <certif_tx+0x130>)
 8013c1c:	0018      	movs	r0, r3
 8013c1e:	f001 f94f 	bl	8014ec0 <TimerStart>
	
  if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 8013c22:	2308      	movs	r3, #8
 8013c24:	18fb      	adds	r3, r7, r3
 8013c26:	0018      	movs	r0, r3
 8013c28:	f7fb f80e 	bl	800ec48 <LoRaMacMcpsRequest>
 8013c2c:	1e03      	subs	r3, r0, #0
 8013c2e:	d101      	bne.n	8013c34 <certif_tx+0x118>
  {
      return false;
 8013c30:	2300      	movs	r3, #0
 8013c32:	e000      	b.n	8013c36 <certif_tx+0x11a>
  }
    return true;
 8013c34:	2301      	movs	r3, #1
}
 8013c36:	0018      	movs	r0, r3
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	b006      	add	sp, #24
 8013c3c:	bd80      	pop	{r7, pc}
 8013c3e:	46c0      	nop			@ (mov r8, r8)
 8013c40:	2000124c 	.word	0x2000124c
 8013c44:	20001348 	.word	0x20001348
 8013c48:	20001250 	.word	0x20001250
 8013c4c:	20001234 	.word	0x20001234

08013c50 <certif_rx>:

void certif_rx( McpsIndication_t *mcpsIndication, MlmeReqJoin_t* JoinParameters)
{
 8013c50:	b590      	push	{r4, r7, lr}
 8013c52:	b0a1      	sub	sp, #132	@ 0x84
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
 8013c58:	6039      	str	r1, [r7, #0]
  if( certifParam.Running == false )
 8013c5a:	4bb0      	ldr	r3, [pc, #704]	@ (8013f1c <certif_rx+0x2cc>)
 8013c5c:	781b      	ldrb	r3, [r3, #0]
 8013c5e:	2201      	movs	r2, #1
 8013c60:	4053      	eors	r3, r2
 8013c62:	b2db      	uxtb	r3, r3
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d062      	beq.n	8013d2e <certif_rx+0xde>
  {
      // Check compliance test enable command (i)
      if( ( mcpsIndication->BufferSize == 4 ) &&
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	7b1b      	ldrb	r3, [r3, #12]
 8013c6c:	2b04      	cmp	r3, #4
 8013c6e:	d000      	beq.n	8013c72 <certif_rx+0x22>
 8013c70:	e144      	b.n	8013efc <certif_rx+0x2ac>
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	689b      	ldr	r3, [r3, #8]
 8013c76:	781b      	ldrb	r3, [r3, #0]
      if( ( mcpsIndication->BufferSize == 4 ) &&
 8013c78:	2b01      	cmp	r3, #1
 8013c7a:	d000      	beq.n	8013c7e <certif_rx+0x2e>
 8013c7c:	e13e      	b.n	8013efc <certif_rx+0x2ac>
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	689b      	ldr	r3, [r3, #8]
 8013c82:	3301      	adds	r3, #1
 8013c84:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8013c86:	2b01      	cmp	r3, #1
 8013c88:	d000      	beq.n	8013c8c <certif_rx+0x3c>
 8013c8a:	e137      	b.n	8013efc <certif_rx+0x2ac>
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	689b      	ldr	r3, [r3, #8]
 8013c90:	3302      	adds	r3, #2
 8013c92:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8013c94:	2b01      	cmp	r3, #1
 8013c96:	d000      	beq.n	8013c9a <certif_rx+0x4a>
 8013c98:	e130      	b.n	8013efc <certif_rx+0x2ac>
          ( mcpsIndication->Buffer[3] == 0x01 ) )
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	689b      	ldr	r3, [r3, #8]
 8013c9e:	3303      	adds	r3, #3
 8013ca0:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8013ca2:	2b01      	cmp	r3, #1
 8013ca4:	d000      	beq.n	8013ca8 <certif_rx+0x58>
 8013ca6:	e129      	b.n	8013efc <certif_rx+0x2ac>
      {
          MibRequestConfirm_t mibReq;
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 8013ca8:	4b9d      	ldr	r3, [pc, #628]	@ (8013f20 <certif_rx+0x2d0>)
 8013caa:	2200      	movs	r2, #0
 8013cac:	701a      	strb	r2, [r3, #0]
          certifParam.DataBufferSize = 2;
 8013cae:	4b9b      	ldr	r3, [pc, #620]	@ (8013f1c <certif_rx+0x2cc>)
 8013cb0:	2202      	movs	r2, #2
 8013cb2:	70da      	strb	r2, [r3, #3]
          certifParam.DownLinkCounter = 0;
 8013cb4:	4b99      	ldr	r3, [pc, #612]	@ (8013f1c <certif_rx+0x2cc>)
 8013cb6:	22f6      	movs	r2, #246	@ 0xf6
 8013cb8:	2100      	movs	r1, #0
 8013cba:	5299      	strh	r1, [r3, r2]
          certifParam.LinkCheck = false;
 8013cbc:	4b97      	ldr	r3, [pc, #604]	@ (8013f1c <certif_rx+0x2cc>)
 8013cbe:	22f8      	movs	r2, #248	@ 0xf8
 8013cc0:	2100      	movs	r1, #0
 8013cc2:	5499      	strb	r1, [r3, r2]
          certifParam.DemodMargin = 0;
 8013cc4:	4b95      	ldr	r3, [pc, #596]	@ (8013f1c <certif_rx+0x2cc>)
 8013cc6:	22f9      	movs	r2, #249	@ 0xf9
 8013cc8:	2100      	movs	r1, #0
 8013cca:	5499      	strb	r1, [r3, r2]
          certifParam.NbGateways = 0;
 8013ccc:	4b93      	ldr	r3, [pc, #588]	@ (8013f1c <certif_rx+0x2cc>)
 8013cce:	22fa      	movs	r2, #250	@ 0xfa
 8013cd0:	2100      	movs	r1, #0
 8013cd2:	5499      	strb	r1, [r3, r2]
          certifParam.Running = true;
 8013cd4:	4b91      	ldr	r3, [pc, #580]	@ (8013f1c <certif_rx+0x2cc>)
 8013cd6:	2201      	movs	r2, #1
 8013cd8:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8013cda:	4b90      	ldr	r3, [pc, #576]	@ (8013f1c <certif_rx+0x2cc>)
 8013cdc:	2201      	movs	r2, #1
 8013cde:	705a      	strb	r2, [r3, #1]

          mibReq.Type = MIB_ADR;
 8013ce0:	210c      	movs	r1, #12
 8013ce2:	187b      	adds	r3, r7, r1
 8013ce4:	2204      	movs	r2, #4
 8013ce6:	701a      	strb	r2, [r3, #0]

          LoRaMacMibGetRequestConfirm( &mibReq );
 8013ce8:	000c      	movs	r4, r1
 8013cea:	187b      	adds	r3, r7, r1
 8013cec:	0018      	movs	r0, r3
 8013cee:	f7fa f809 	bl	800dd04 <LoRaMacMibGetRequestConfirm>
          AdrEnableInit=mibReq.Param.AdrEnable;
 8013cf2:	0021      	movs	r1, r4
 8013cf4:	187b      	adds	r3, r7, r1
 8013cf6:	791a      	ldrb	r2, [r3, #4]
 8013cf8:	4b8a      	ldr	r3, [pc, #552]	@ (8013f24 <certif_rx+0x2d4>)
 8013cfa:	701a      	strb	r2, [r3, #0]
          
          mibReq.Type = MIB_ADR;
 8013cfc:	187b      	adds	r3, r7, r1
 8013cfe:	2204      	movs	r2, #4
 8013d00:	701a      	strb	r2, [r3, #0]
          mibReq.Param.AdrEnable = true;
 8013d02:	187b      	adds	r3, r7, r1
 8013d04:	2201      	movs	r2, #1
 8013d06:	711a      	strb	r2, [r3, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 8013d08:	187b      	adds	r3, r7, r1
 8013d0a:	0018      	movs	r0, r3
 8013d0c:	f7fa f956 	bl	800dfbc <LoRaMacMibSetRequestConfirm>
#if defined( REGION_EU868 ) || defined( REGION_RU864 ) || defined( REGION_CN779 ) || defined( REGION_EU433 )
          LoRaMacTestSetDutyCycleOn( false );
#endif

         
        TimerInit( &CertifTxNextPacketTimer, OnCertifTxNextPacketTimerEvent );
 8013d10:	4a85      	ldr	r2, [pc, #532]	@ (8013f28 <certif_rx+0x2d8>)
 8013d12:	4b86      	ldr	r3, [pc, #536]	@ (8013f2c <certif_rx+0x2dc>)
 8013d14:	0011      	movs	r1, r2
 8013d16:	0018      	movs	r0, r3
 8013d18:	f001 f8b3 	bl	8014e82 <TimerInit>
        TimerSetValue( &CertifTxNextPacketTimer,  TEST_TX_DUTYCYCLE); 
 8013d1c:	4a84      	ldr	r2, [pc, #528]	@ (8013f30 <certif_rx+0x2e0>)
 8013d1e:	4b83      	ldr	r3, [pc, #524]	@ (8013f2c <certif_rx+0x2dc>)
 8013d20:	0011      	movs	r1, r2
 8013d22:	0018      	movs	r0, r3
 8013d24:	f001 fa28 	bl	8015178 <TimerSetValue>
        
        /*confirm test mode activation */
        certif_tx( );
 8013d28:	f7ff fef8 	bl	8013b1c <certif_tx>
 8013d2c:	e0e6      	b.n	8013efc <certif_rx+0x2ac>
      }
  }

  else
  {
      certifParam.State = mcpsIndication->Buffer[0];
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	689b      	ldr	r3, [r3, #8]
 8013d32:	781a      	ldrb	r2, [r3, #0]
 8013d34:	4b79      	ldr	r3, [pc, #484]	@ (8013f1c <certif_rx+0x2cc>)
 8013d36:	705a      	strb	r2, [r3, #1]
      switch( certifParam.State )
 8013d38:	4b78      	ldr	r3, [pc, #480]	@ (8013f1c <certif_rx+0x2cc>)
 8013d3a:	785b      	ldrb	r3, [r3, #1]
 8013d3c:	2b08      	cmp	r3, #8
 8013d3e:	d900      	bls.n	8013d42 <certif_rx+0xf2>
 8013d40:	e0db      	b.n	8013efa <certif_rx+0x2aa>
 8013d42:	009a      	lsls	r2, r3, #2
 8013d44:	4b7b      	ldr	r3, [pc, #492]	@ (8013f34 <certif_rx+0x2e4>)
 8013d46:	18d3      	adds	r3, r2, r3
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	469f      	mov	pc, r3
      {
        case 0: // Check compliance test disable command (ii)
        {
          
          certifParam.DownLinkCounter = 0;
 8013d4c:	4b73      	ldr	r3, [pc, #460]	@ (8013f1c <certif_rx+0x2cc>)
 8013d4e:	22f6      	movs	r2, #246	@ 0xf6
 8013d50:	2100      	movs	r1, #0
 8013d52:	5299      	strh	r1, [r3, r2]
          certifParam.Running = false;
 8013d54:	4b71      	ldr	r3, [pc, #452]	@ (8013f1c <certif_rx+0x2cc>)
 8013d56:	2200      	movs	r2, #0
 8013d58:	701a      	strb	r2, [r3, #0]
          
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_ADR;
 8013d5a:	210c      	movs	r1, #12
 8013d5c:	187b      	adds	r3, r7, r1
 8013d5e:	2204      	movs	r2, #4
 8013d60:	701a      	strb	r2, [r3, #0]
          mibReq.Param.AdrEnable = AdrEnableInit;
 8013d62:	4b70      	ldr	r3, [pc, #448]	@ (8013f24 <certif_rx+0x2d4>)
 8013d64:	781a      	ldrb	r2, [r3, #0]
 8013d66:	187b      	adds	r3, r7, r1
 8013d68:	711a      	strb	r2, [r3, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 8013d6a:	187b      	adds	r3, r7, r1
 8013d6c:	0018      	movs	r0, r3
 8013d6e:	f7fa f925 	bl	800dfbc <LoRaMacMibSetRequestConfirm>
#if defined( REGION_EU868 ) || defined( REGION_RU864 ) || defined( REGION_CN779 ) || defined( REGION_EU433 )
          LoRaMacTestSetDutyCycleOn( true );
#endif
          
          break;
 8013d72:	e0c3      	b.n	8013efc <certif_rx+0x2ac>
        }
        case 1: // (iii, iv)
          certifParam.DataBufferSize = 2;
 8013d74:	4b69      	ldr	r3, [pc, #420]	@ (8013f1c <certif_rx+0x2cc>)
 8013d76:	2202      	movs	r2, #2
 8013d78:	70da      	strb	r2, [r3, #3]
          break;
 8013d7a:	e0bf      	b.n	8013efc <certif_rx+0x2ac>
        case 2: // Enable confirmed messages (v)
          IsTxConfirmed = LORAWAN_CONFIRMED_MSG;
 8013d7c:	4b68      	ldr	r3, [pc, #416]	@ (8013f20 <certif_rx+0x2d0>)
 8013d7e:	2201      	movs	r2, #1
 8013d80:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8013d82:	4b66      	ldr	r3, [pc, #408]	@ (8013f1c <certif_rx+0x2cc>)
 8013d84:	2201      	movs	r2, #1
 8013d86:	705a      	strb	r2, [r3, #1]
          break;
 8013d88:	e0b8      	b.n	8013efc <certif_rx+0x2ac>
        case 3:  // Disable confirmed messages (vi)
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 8013d8a:	4b65      	ldr	r3, [pc, #404]	@ (8013f20 <certif_rx+0x2d0>)
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8013d90:	4b62      	ldr	r3, [pc, #392]	@ (8013f1c <certif_rx+0x2cc>)
 8013d92:	2201      	movs	r2, #1
 8013d94:	705a      	strb	r2, [r3, #1]
          break;
 8013d96:	e0b1      	b.n	8013efc <certif_rx+0x2ac>
        case 4: // (vii)
          certifParam.DataBufferSize = mcpsIndication->BufferSize;
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	7b1a      	ldrb	r2, [r3, #12]
 8013d9c:	4b5f      	ldr	r3, [pc, #380]	@ (8013f1c <certif_rx+0x2cc>)
 8013d9e:	70da      	strb	r2, [r3, #3]

          certifParam.DataBuffer[0] = 4;
 8013da0:	4b5e      	ldr	r3, [pc, #376]	@ (8013f1c <certif_rx+0x2cc>)
 8013da2:	2204      	movs	r2, #4
 8013da4:	711a      	strb	r2, [r3, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 8013da6:	237f      	movs	r3, #127	@ 0x7f
 8013da8:	18fb      	adds	r3, r7, r3
 8013daa:	2201      	movs	r2, #1
 8013dac:	701a      	strb	r2, [r3, #0]
 8013dae:	e013      	b.n	8013dd8 <certif_rx+0x188>
          {
              certifParam.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	689a      	ldr	r2, [r3, #8]
 8013db4:	207f      	movs	r0, #127	@ 0x7f
 8013db6:	183b      	adds	r3, r7, r0
 8013db8:	781b      	ldrb	r3, [r3, #0]
 8013dba:	18d3      	adds	r3, r2, r3
 8013dbc:	781a      	ldrb	r2, [r3, #0]
 8013dbe:	183b      	adds	r3, r7, r0
 8013dc0:	781b      	ldrb	r3, [r3, #0]
 8013dc2:	3201      	adds	r2, #1
 8013dc4:	b2d1      	uxtb	r1, r2
 8013dc6:	4a55      	ldr	r2, [pc, #340]	@ (8013f1c <certif_rx+0x2cc>)
 8013dc8:	18d3      	adds	r3, r2, r3
 8013dca:	1c0a      	adds	r2, r1, #0
 8013dcc:	711a      	strb	r2, [r3, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 8013dce:	183b      	adds	r3, r7, r0
 8013dd0:	781a      	ldrb	r2, [r3, #0]
 8013dd2:	183b      	adds	r3, r7, r0
 8013dd4:	3201      	adds	r2, #1
 8013dd6:	701a      	strb	r2, [r3, #0]
 8013dd8:	4b50      	ldr	r3, [pc, #320]	@ (8013f1c <certif_rx+0x2cc>)
 8013dda:	78db      	ldrb	r3, [r3, #3]
 8013ddc:	227f      	movs	r2, #127	@ 0x7f
 8013dde:	18ba      	adds	r2, r7, r2
 8013de0:	7812      	ldrb	r2, [r2, #0]
 8013de2:	429a      	cmp	r2, r3
 8013de4:	d3e4      	bcc.n	8013db0 <certif_rx+0x160>
          }
          break;
 8013de6:	e089      	b.n	8013efc <certif_rx+0x2ac>
        case 5: // (viii)
        {
          MlmeReq_t mlmeReq;
          mlmeReq.Type = MLME_LINK_CHECK;
 8013de8:	216c      	movs	r1, #108	@ 0x6c
 8013dea:	187b      	adds	r3, r7, r1
 8013dec:	2203      	movs	r2, #3
 8013dee:	701a      	strb	r2, [r3, #0]
          LoRaMacMlmeRequest( &mlmeReq );
 8013df0:	187b      	adds	r3, r7, r1
 8013df2:	0018      	movs	r0, r3
 8013df4:	f7fa fdd6 	bl	800e9a4 <LoRaMacMlmeRequest>
          break;
 8013df8:	e080      	b.n	8013efc <certif_rx+0x2ac>
        {
            MlmeReq_t mlmeReq;

            // Disable TestMode and revert back to normal operation

            certifParam.DownLinkCounter = 0;
 8013dfa:	4b48      	ldr	r3, [pc, #288]	@ (8013f1c <certif_rx+0x2cc>)
 8013dfc:	22f6      	movs	r2, #246	@ 0xf6
 8013dfe:	2100      	movs	r1, #0
 8013e00:	5299      	strh	r1, [r3, r2]
            certifParam.Running = false;
 8013e02:	4b46      	ldr	r3, [pc, #280]	@ (8013f1c <certif_rx+0x2cc>)
 8013e04:	2200      	movs	r2, #0
 8013e06:	701a      	strb	r2, [r3, #0]

            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_ADR;
 8013e08:	210c      	movs	r1, #12
 8013e0a:	187b      	adds	r3, r7, r1
 8013e0c:	2204      	movs	r2, #4
 8013e0e:	701a      	strb	r2, [r3, #0]
            mibReq.Param.AdrEnable = AdrEnableInit;
 8013e10:	4b44      	ldr	r3, [pc, #272]	@ (8013f24 <certif_rx+0x2d4>)
 8013e12:	781a      	ldrb	r2, [r3, #0]
 8013e14:	187b      	adds	r3, r7, r1
 8013e16:	711a      	strb	r2, [r3, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8013e18:	187b      	adds	r3, r7, r1
 8013e1a:	0018      	movs	r0, r3
 8013e1c:	f7fa f8ce 	bl	800dfbc <LoRaMacMibSetRequestConfirm>

            mlmeReq.Type = MLME_JOIN;
 8013e20:	215c      	movs	r1, #92	@ 0x5c
 8013e22:	187b      	adds	r3, r7, r1
 8013e24:	2200      	movs	r2, #0
 8013e26:	701a      	strb	r2, [r3, #0]
            mlmeReq.Req.Join = *JoinParameters;
 8013e28:	187b      	adds	r3, r7, r1
 8013e2a:	683a      	ldr	r2, [r7, #0]
 8013e2c:	7812      	ldrb	r2, [r2, #0]
 8013e2e:	711a      	strb	r2, [r3, #4]

            LoRaMacMlmeRequest( &mlmeReq );
 8013e30:	187b      	adds	r3, r7, r1
 8013e32:	0018      	movs	r0, r3
 8013e34:	f7fa fdb6 	bl	800e9a4 <LoRaMacMlmeRequest>
            break;
 8013e38:	e060      	b.n	8013efc <certif_rx+0x2ac>
        }

        case 7: // (x)
        {
          if( mcpsIndication->BufferSize == 3 )
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	7b1b      	ldrb	r3, [r3, #12]
 8013e3e:	2b03      	cmp	r3, #3
 8013e40:	d118      	bne.n	8013e74 <certif_rx+0x224>
          {
              MlmeReq_t mlmeReq;
              mlmeReq.Type = MLME_TXCW;
 8013e42:	214c      	movs	r1, #76	@ 0x4c
 8013e44:	187b      	adds	r3, r7, r1
 8013e46:	2204      	movs	r2, #4
 8013e48:	701a      	strb	r2, [r3, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	689b      	ldr	r3, [r3, #8]
 8013e4e:	3301      	adds	r3, #1
 8013e50:	781b      	ldrb	r3, [r3, #0]
 8013e52:	021b      	lsls	r3, r3, #8
 8013e54:	b21a      	sxth	r2, r3
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	689b      	ldr	r3, [r3, #8]
 8013e5a:	3302      	adds	r3, #2
 8013e5c:	781b      	ldrb	r3, [r3, #0]
 8013e5e:	b21b      	sxth	r3, r3
 8013e60:	4313      	orrs	r3, r2
 8013e62:	b21b      	sxth	r3, r3
 8013e64:	b29a      	uxth	r2, r3
 8013e66:	187b      	adds	r3, r7, r1
 8013e68:	809a      	strh	r2, [r3, #4]
              LoRaMacMlmeRequest( &mlmeReq );
 8013e6a:	187b      	adds	r3, r7, r1
 8013e6c:	0018      	movs	r0, r3
 8013e6e:	f7fa fd99 	bl	800e9a4 <LoRaMacMlmeRequest>
 8013e72:	e035      	b.n	8013ee0 <certif_rx+0x290>
          }
          else if( mcpsIndication->BufferSize == 7 )
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	7b1b      	ldrb	r3, [r3, #12]
 8013e78:	2b07      	cmp	r3, #7
 8013e7a:	d131      	bne.n	8013ee0 <certif_rx+0x290>
          {
              MlmeReq_t mlmeReq;
              mlmeReq.Type = MLME_TXCW_1;
 8013e7c:	213c      	movs	r1, #60	@ 0x3c
 8013e7e:	187b      	adds	r3, r7, r1
 8013e80:	2205      	movs	r2, #5
 8013e82:	701a      	strb	r2, [r3, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	689b      	ldr	r3, [r3, #8]
 8013e88:	3301      	adds	r3, #1
 8013e8a:	781b      	ldrb	r3, [r3, #0]
 8013e8c:	021b      	lsls	r3, r3, #8
 8013e8e:	b21a      	sxth	r2, r3
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	689b      	ldr	r3, [r3, #8]
 8013e94:	3302      	adds	r3, #2
 8013e96:	781b      	ldrb	r3, [r3, #0]
 8013e98:	b21b      	sxth	r3, r3
 8013e9a:	4313      	orrs	r3, r2
 8013e9c:	b21b      	sxth	r3, r3
 8013e9e:	b29a      	uxth	r2, r3
 8013ea0:	187b      	adds	r3, r7, r1
 8013ea2:	809a      	strh	r2, [r3, #4]
              mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	689b      	ldr	r3, [r3, #8]
 8013ea8:	3303      	adds	r3, #3
 8013eaa:	781b      	ldrb	r3, [r3, #0]
 8013eac:	041a      	lsls	r2, r3, #16
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	689b      	ldr	r3, [r3, #8]
 8013eb2:	3304      	adds	r3, #4
 8013eb4:	781b      	ldrb	r3, [r3, #0]
 8013eb6:	021b      	lsls	r3, r3, #8
 8013eb8:	431a      	orrs	r2, r3
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	689b      	ldr	r3, [r3, #8]
 8013ebe:	3305      	adds	r3, #5
 8013ec0:	781b      	ldrb	r3, [r3, #0]
 8013ec2:	4313      	orrs	r3, r2
 8013ec4:	001a      	movs	r2, r3
 8013ec6:	2364      	movs	r3, #100	@ 0x64
 8013ec8:	435a      	muls	r2, r3
 8013eca:	187b      	adds	r3, r7, r1
 8013ecc:	609a      	str	r2, [r3, #8]
              mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	689b      	ldr	r3, [r3, #8]
 8013ed2:	799a      	ldrb	r2, [r3, #6]
 8013ed4:	187b      	adds	r3, r7, r1
 8013ed6:	731a      	strb	r2, [r3, #12]
              LoRaMacMlmeRequest( &mlmeReq );
 8013ed8:	187b      	adds	r3, r7, r1
 8013eda:	0018      	movs	r0, r3
 8013edc:	f7fa fd62 	bl	800e9a4 <LoRaMacMlmeRequest>
          }
          certifParam.State = 1;
 8013ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8013f1c <certif_rx+0x2cc>)
 8013ee2:	2201      	movs	r2, #1
 8013ee4:	705a      	strb	r2, [r3, #1]
          break;
 8013ee6:	e009      	b.n	8013efc <certif_rx+0x2ac>
		
        case 8: // Send DeviceTimeReq
        {
          MlmeReq_t mlmeReq;

          mlmeReq.Type = MLME_DEVICE_TIME;
 8013ee8:	212c      	movs	r1, #44	@ 0x2c
 8013eea:	187b      	adds	r3, r7, r1
 8013eec:	2209      	movs	r2, #9
 8013eee:	701a      	strb	r2, [r3, #0]

          LoRaMacMlmeRequest( &mlmeReq );
 8013ef0:	187b      	adds	r3, r7, r1
 8013ef2:	0018      	movs	r0, r3
 8013ef4:	f7fa fd56 	bl	800e9a4 <LoRaMacMlmeRequest>
          break;
 8013ef8:	e000      	b.n	8013efc <certif_rx+0x2ac>
          LoRaMacMlmeRequest( &mlmeReq );
          break;
        }
#endif /* LORAMAC_CLASSB_ENABLED */
        default:                  
          break;
 8013efa:	46c0      	nop			@ (mov r8, r8)
        }
    }
  
    if ( certifParam.Running == false )
 8013efc:	4b07      	ldr	r3, [pc, #28]	@ (8013f1c <certif_rx+0x2cc>)
 8013efe:	781b      	ldrb	r3, [r3, #0]
 8013f00:	2201      	movs	r2, #1
 8013f02:	4053      	eors	r3, r2
 8013f04:	b2db      	uxtb	r3, r3
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d003      	beq.n	8013f12 <certif_rx+0x2c2>
    {
      /*cerification test stops*/
      TimerStop( &CertifTxNextPacketTimer );
 8013f0a:	4b08      	ldr	r3, [pc, #32]	@ (8013f2c <certif_rx+0x2dc>)
 8013f0c:	0018      	movs	r0, r3
 8013f0e:	f001 f8b5 	bl	801507c <TimerStop>
    }
}
 8013f12:	46c0      	nop			@ (mov r8, r8)
 8013f14:	46bd      	mov	sp, r7
 8013f16:	b021      	add	sp, #132	@ 0x84
 8013f18:	bd90      	pop	{r4, r7, pc}
 8013f1a:	46c0      	nop			@ (mov r8, r8)
 8013f1c:	2000124c 	.word	0x2000124c
 8013f20:	20001348 	.word	0x20001348
 8013f24:	20001349 	.word	0x20001349
 8013f28:	08013f39 	.word	0x08013f39
 8013f2c:	20001234 	.word	0x20001234
 8013f30:	00001388 	.word	0x00001388
 8013f34:	0801b514 	.word	0x0801b514

08013f38 <OnCertifTxNextPacketTimerEvent>:

/*!
 * \brief Function executed on TxNextPacket Timeout event
 */
static void OnCertifTxNextPacketTimerEvent( void* context )
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b082      	sub	sp, #8
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
    certif_tx( );
 8013f40:	f7ff fdec 	bl	8013b1c <certif_tx>

}
 8013f44:	46c0      	nop			@ (mov r8, r8)
 8013f46:	46bd      	mov	sp, r7
 8013f48:	b002      	add	sp, #8
 8013f4a:	bd80      	pop	{r7, pc}

08013f4c <McpsConfirm>:
 *
 * \param   [IN] McpsConfirm - Pointer to the confirm structure,
 *               containing confirm attributes.
 */
static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b084      	sub	sp, #16
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
    TVL2( PRINTNOW(); PRINTF("APP> McpsConfirm STATUS: %s\r\n", EventInfoStatusStrings[mcpsConfirm->Status] ); )
  
    if( mcpsConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	785b      	ldrb	r3, [r3, #1]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d110      	bne.n	8013f7e <McpsConfirm+0x32>
    {
        switch( mcpsConfirm->McpsRequest )
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	781b      	ldrb	r3, [r3, #0]
 8013f60:	2b03      	cmp	r3, #3
 8013f62:	d005      	beq.n	8013f70 <McpsConfirm+0x24>
 8013f64:	dc06      	bgt.n	8013f74 <McpsConfirm+0x28>
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d006      	beq.n	8013f78 <McpsConfirm+0x2c>
 8013f6a:	2b01      	cmp	r3, #1
 8013f6c:	d006      	beq.n	8013f7c <McpsConfirm+0x30>
            case MCPS_PROPRIETARY:
            {
                break;
            }
            default:
                break;
 8013f6e:	e001      	b.n	8013f74 <McpsConfirm+0x28>
                break;
 8013f70:	46c0      	nop			@ (mov r8, r8)
 8013f72:	e004      	b.n	8013f7e <McpsConfirm+0x32>
                break;
 8013f74:	46c0      	nop			@ (mov r8, r8)
 8013f76:	e002      	b.n	8013f7e <McpsConfirm+0x32>
                break;
 8013f78:	46c0      	nop			@ (mov r8, r8)
 8013f7a:	e000      	b.n	8013f7e <McpsConfirm+0x32>
                break;
 8013f7c:	46c0      	nop			@ (mov r8, r8)
        }
    }
    
    /*implicitely desactivated when VERBOSE_LEVEL < 2*/
    TraceUpLinkFrame(mcpsConfirm);
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	0018      	movs	r0, r3
 8013f82:	f000 fb21 	bl	80145c8 <TraceUpLinkFrame>
}
 8013f86:	46c0      	nop			@ (mov r8, r8)
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	b004      	add	sp, #16
 8013f8c:	bd80      	pop	{r7, pc}
	...

08013f90 <McpsIndication>:
 *
 * \param   [IN] mcpsIndication - Pointer to the indication structure,
 *               containing indication attributes.
 */
static void McpsIndication( McpsIndication_t *mcpsIndication )
{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b086      	sub	sp, #24
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	6078      	str	r0, [r7, #4]
    TVL2( PRINTNOW(); PRINTF("APP> McpsInd STATUS: %s\r\n", EventInfoStatusStrings[mcpsIndication->Status] );)
    
    lora_AppData_t AppData;
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	785b      	ldrb	r3, [r3, #1]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d14b      	bne.n	8014038 <McpsIndication+0xa8>
    {
        return;
    }

    switch( mcpsIndication->McpsIndication )
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	781b      	ldrb	r3, [r3, #0]
 8013fa4:	2b03      	cmp	r3, #3
 8013fa6:	d008      	beq.n	8013fba <McpsIndication+0x2a>
 8013fa8:	dc09      	bgt.n	8013fbe <McpsIndication+0x2e>
 8013faa:	2b02      	cmp	r3, #2
 8013fac:	d009      	beq.n	8013fc2 <McpsIndication+0x32>
 8013fae:	dc06      	bgt.n	8013fbe <McpsIndication+0x2e>
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d008      	beq.n	8013fc6 <McpsIndication+0x36>
 8013fb4:	2b01      	cmp	r3, #1
 8013fb6:	d008      	beq.n	8013fca <McpsIndication+0x3a>
        case MCPS_MULTICAST:
        {
            break;
        }
        default:
            break;
 8013fb8:	e001      	b.n	8013fbe <McpsIndication+0x2e>
            break;
 8013fba:	46c0      	nop			@ (mov r8, r8)
 8013fbc:	e006      	b.n	8013fcc <McpsIndication+0x3c>
            break;
 8013fbe:	46c0      	nop			@ (mov r8, r8)
 8013fc0:	e004      	b.n	8013fcc <McpsIndication+0x3c>
            break;
 8013fc2:	46c0      	nop			@ (mov r8, r8)
 8013fc4:	e002      	b.n	8013fcc <McpsIndication+0x3c>
            break;
 8013fc6:	46c0      	nop			@ (mov r8, r8)
 8013fc8:	e000      	b.n	8013fcc <McpsIndication+0x3c>
            break;
 8013fca:	46c0      	nop			@ (mov r8, r8)

    // Check Multicast
    // Check Port
    // Check Datarate
    // Check FramePending
    if( mcpsIndication->FramePending == true )
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	795b      	ldrb	r3, [r3, #5]
 8013fd0:	2b01      	cmp	r3, #1
 8013fd2:	d103      	bne.n	8013fdc <McpsIndication+0x4c>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        LoRaMainCallbacks->LORA_TxNeeded( );
 8013fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8014040 <McpsIndication+0xb0>)
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	69db      	ldr	r3, [r3, #28]
 8013fda:	4798      	blx	r3
    // Check Buffer
    // Check BufferSize
    // Check Rssi
    // Check Snr
    // Check RxSlot
    if (certif_running() == true )
 8013fdc:	f7ff fd6c 	bl	8013ab8 <certif_running>
 8013fe0:	1e03      	subs	r3, r0, #0
 8013fe2:	d001      	beq.n	8013fe8 <McpsIndication+0x58>
    {
      certif_DownLinkIncrement( );
 8013fe4:	f7ff fd72 	bl	8013acc <certif_DownLinkIncrement>
    }

    if( mcpsIndication->RxData == true )
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	7b5b      	ldrb	r3, [r3, #13]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d01e      	beq.n	801402e <McpsIndication+0x9e>
    {
      switch( mcpsIndication->Port )
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	78db      	ldrb	r3, [r3, #3]
 8013ff4:	2be0      	cmp	r3, #224	@ 0xe0
 8013ff6:	d106      	bne.n	8014006 <McpsIndication+0x76>
      {
        case CERTIF_PORT:
          certif_rx( mcpsIndication, &JoinParameters );
 8013ff8:	4a12      	ldr	r2, [pc, #72]	@ (8014044 <McpsIndication+0xb4>)
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	0011      	movs	r1, r2
 8013ffe:	0018      	movs	r0, r3
 8014000:	f7ff fe26 	bl	8013c50 <certif_rx>
          break;
 8014004:	e013      	b.n	801402e <McpsIndication+0x9e>
        default:
          
          AppData.Port = mcpsIndication->Port;
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	78da      	ldrb	r2, [r3, #3]
 801400a:	2110      	movs	r1, #16
 801400c:	187b      	adds	r3, r7, r1
 801400e:	715a      	strb	r2, [r3, #5]
          AppData.BuffSize = mcpsIndication->BufferSize;
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	7b1a      	ldrb	r2, [r3, #12]
 8014014:	187b      	adds	r3, r7, r1
 8014016:	711a      	strb	r2, [r3, #4]
          AppData.Buff = mcpsIndication->Buffer;
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	689a      	ldr	r2, [r3, #8]
 801401c:	187b      	adds	r3, r7, r1
 801401e:	601a      	str	r2, [r3, #0]
        
          LoRaMainCallbacks->LORA_RxData( &AppData );
 8014020:	4b07      	ldr	r3, [pc, #28]	@ (8014040 <McpsIndication+0xb0>)
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	691b      	ldr	r3, [r3, #16]
 8014026:	187a      	adds	r2, r7, r1
 8014028:	0010      	movs	r0, r2
 801402a:	4798      	blx	r3
          break;
 801402c:	46c0      	nop			@ (mov r8, r8)
      }
    }
    
    /*implicitely desactivated when VERBOSE_LEVEL < 2*/
    TraceDownLinkFrame(mcpsIndication);
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	0018      	movs	r0, r3
 8014032:	f000 faf3 	bl	801461c <TraceDownLinkFrame>
 8014036:	e000      	b.n	801403a <McpsIndication+0xaa>
        return;
 8014038:	46c0      	nop			@ (mov r8, r8)
}
 801403a:	46bd      	mov	sp, r7
 801403c:	b006      	add	sp, #24
 801403e:	bd80      	pop	{r7, pc}
 8014040:	20001394 	.word	0x20001394
 8014044:	2000134c 	.word	0x2000134c

08014048 <MlmeConfirm>:
 *
 * \param   [IN] MlmeConfirm - Pointer to the confirm structure,
 *               containing confirm attributes.
 */
static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b084      	sub	sp, #16
 801404c:	af00      	add	r7, sp, #0
 801404e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
#endif /* LORAMAC_CLASSB_ENABLED */

    TVL2( PRINTNOW(); PRINTF("APP> MlmeConfirm STATUS: %s\r\n", EventInfoStatusStrings[mlmeConfirm->Status] );)
    
    switch( mlmeConfirm->MlmeRequest )
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	781b      	ldrb	r3, [r3, #0]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d002      	beq.n	801405e <MlmeConfirm+0x16>
 8014058:	2b03      	cmp	r3, #3
 801405a:	d00c      	beq.n	8014076 <MlmeConfirm+0x2e>
            }  
        }              
#endif /* USE_DEVICE_TIMING */
#endif /* LORAMAC_CLASSB_ENABLED */
        default:
            break;
 801405c:	e018      	b.n	8014090 <MlmeConfirm+0x48>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	785b      	ldrb	r3, [r3, #1]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d104      	bne.n	8014070 <MlmeConfirm+0x28>
              LoRaMainCallbacks->LORA_HasJoined();
 8014066:	4b0c      	ldr	r3, [pc, #48]	@ (8014098 <MlmeConfirm+0x50>)
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	695b      	ldr	r3, [r3, #20]
 801406c:	4798      	blx	r3
            break;
 801406e:	e00f      	b.n	8014090 <MlmeConfirm+0x48>
                LORA_Join();
 8014070:	f000 f99c 	bl	80143ac <LORA_Join>
            break;
 8014074:	e00c      	b.n	8014090 <MlmeConfirm+0x48>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	785b      	ldrb	r3, [r3, #1]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d107      	bne.n	801408e <MlmeConfirm+0x46>
                if (certif_running() == true )
 801407e:	f7ff fd1b 	bl	8013ab8 <certif_running>
 8014082:	1e03      	subs	r3, r0, #0
 8014084:	d003      	beq.n	801408e <MlmeConfirm+0x46>
                     certif_linkCheck( mlmeConfirm);
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	0018      	movs	r0, r3
 801408a:	f7ff fd2f 	bl	8013aec <certif_linkCheck>
            break;
 801408e:	46c0      	nop			@ (mov r8, r8)
    }
}
 8014090:	46c0      	nop			@ (mov r8, r8)
 8014092:	46bd      	mov	sp, r7
 8014094:	b004      	add	sp, #16
 8014096:	bd80      	pop	{r7, pc}
 8014098:	20001394 	.word	0x20001394

0801409c <MlmeIndication>:
 * \brief   MLME-Indication event function
 *
 * \param   [IN] MlmeIndication - Pointer to the indication structure.
 */
static void MlmeIndication( MlmeIndication_t *MlmeIndication )
{
 801409c:	b580      	push	{r7, lr}
 801409e:	b084      	sub	sp, #16
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
#endif /* LORAMAC_CLASSB_ENABLED */

    TVL2( PRINTNOW(); PRINTF("APP> MLMEInd STATUS: %s\r\n", EventInfoStatusStrings[MlmeIndication->Status] );    )

    switch( MlmeIndication->MlmeIndication )
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	781b      	ldrb	r3, [r3, #0]
 80140a8:	2b06      	cmp	r3, #6
 80140aa:	d104      	bne.n	80140b6 <MlmeIndication+0x1a>
    {
        case MLME_SCHEDULE_UPLINK:
        {
            // The MAC signals that we shall provide an uplink as soon as possible
            LoRaMainCallbacks->LORA_TxNeeded( );			
 80140ac:	4b04      	ldr	r3, [pc, #16]	@ (80140c0 <MlmeIndication+0x24>)
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	69db      	ldr	r3, [r3, #28]
 80140b2:	4798      	blx	r3
            break;
 80140b4:	e000      	b.n	80140b8 <MlmeIndication+0x1c>
            break;

        }
#endif /* LORAMAC_CLASSB_ENABLED */
        default:
            break;
 80140b6:	46c0      	nop			@ (mov r8, r8)
    }
}
 80140b8:	46c0      	nop			@ (mov r8, r8)
 80140ba:	46bd      	mov	sp, r7
 80140bc:	b004      	add	sp, #16
 80140be:	bd80      	pop	{r7, pc}
 80140c0:	20001394 	.word	0x20001394

080140c4 <LORA_Init>:
/**
 *  lora Init
 */
void LORA_Init (LoRaMainCallback_t *callbacks, LoRaParam_t* LoRaParam )
{
 80140c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140c6:	46de      	mov	lr, fp
 80140c8:	4657      	mov	r7, sl
 80140ca:	464e      	mov	r6, r9
 80140cc:	4645      	mov	r5, r8
 80140ce:	b5e0      	push	{r5, r6, r7, lr}
 80140d0:	b09b      	sub	sp, #108	@ 0x6c
 80140d2:	af0e      	add	r7, sp, #56	@ 0x38
 80140d4:	61f8      	str	r0, [r7, #28]
 80140d6:	61b9      	str	r1, [r7, #24]
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 80140d8:	2310      	movs	r3, #16
 80140da:	2418      	movs	r4, #24
 80140dc:	191b      	adds	r3, r3, r4
 80140de:	19db      	adds	r3, r3, r7
 80140e0:	4aa1      	ldr	r2, [pc, #644]	@ (8014368 <LORA_Init+0x2a4>)
 80140e2:	ca03      	ldmia	r2!, {r0, r1}
 80140e4:	c303      	stmia	r3!, {r0, r1}
  uint8_t joinEui[] = LORAWAN_JOIN_EUI;
 80140e6:	2308      	movs	r3, #8
 80140e8:	191b      	adds	r3, r3, r4
 80140ea:	19db      	adds	r3, r3, r7
 80140ec:	4a9f      	ldr	r2, [pc, #636]	@ (801436c <LORA_Init+0x2a8>)
 80140ee:	ca03      	ldmia	r2!, {r0, r1}
 80140f0:	c303      	stmia	r3!, {r0, r1}
  
  /* init the Tx Duty Cycle*/
  LoRaParamInit = LoRaParam;
 80140f2:	4b9f      	ldr	r3, [pc, #636]	@ (8014370 <LORA_Init+0x2ac>)
 80140f4:	69ba      	ldr	r2, [r7, #24]
 80140f6:	601a      	str	r2, [r3, #0]
  
  /* init the main call backs*/
  LoRaMainCallbacks = callbacks;
 80140f8:	4b9e      	ldr	r3, [pc, #632]	@ (8014374 <LORA_Init+0x2b0>)
 80140fa:	69fa      	ldr	r2, [r7, #28]
 80140fc:	601a      	str	r2, [r3, #0]
  LoRaMainCallbacks->BoardGetUniqueId( devEui );  
#endif
  
#if( OVER_THE_AIR_ACTIVATION != 0 )

  PPRINTF( "OTAA\n\r"); 
 80140fe:	4b9e      	ldr	r3, [pc, #632]	@ (8014378 <LORA_Init+0x2b4>)
 8014100:	0018      	movs	r0, r3
 8014102:	f001 f92f 	bl	8015364 <TraceSend>
 8014106:	1e03      	subs	r3, r0, #0
 8014108:	d1f9      	bne.n	80140fe <LORA_Init+0x3a>
  PPRINTF( "DevEui= %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\n\r", HEX8(devEui));
 801410a:	2010      	movs	r0, #16
 801410c:	2518      	movs	r5, #24
 801410e:	1943      	adds	r3, r0, r5
 8014110:	19db      	adds	r3, r3, r7
 8014112:	781b      	ldrb	r3, [r3, #0]
 8014114:	001e      	movs	r6, r3
 8014116:	1943      	adds	r3, r0, r5
 8014118:	19db      	adds	r3, r3, r7
 801411a:	785b      	ldrb	r3, [r3, #1]
 801411c:	469c      	mov	ip, r3
 801411e:	1943      	adds	r3, r0, r5
 8014120:	19db      	adds	r3, r3, r7
 8014122:	789b      	ldrb	r3, [r3, #2]
 8014124:	4698      	mov	r8, r3
 8014126:	1943      	adds	r3, r0, r5
 8014128:	19db      	adds	r3, r3, r7
 801412a:	78db      	ldrb	r3, [r3, #3]
 801412c:	001a      	movs	r2, r3
 801412e:	1943      	adds	r3, r0, r5
 8014130:	19db      	adds	r3, r3, r7
 8014132:	791b      	ldrb	r3, [r3, #4]
 8014134:	0019      	movs	r1, r3
 8014136:	1943      	adds	r3, r0, r5
 8014138:	19db      	adds	r3, r3, r7
 801413a:	795b      	ldrb	r3, [r3, #5]
 801413c:	001c      	movs	r4, r3
 801413e:	1943      	adds	r3, r0, r5
 8014140:	19db      	adds	r3, r3, r7
 8014142:	799b      	ldrb	r3, [r3, #6]
 8014144:	001d      	movs	r5, r3
 8014146:	2318      	movs	r3, #24
 8014148:	18c3      	adds	r3, r0, r3
 801414a:	19db      	adds	r3, r3, r7
 801414c:	79db      	ldrb	r3, [r3, #7]
 801414e:	488b      	ldr	r0, [pc, #556]	@ (801437c <LORA_Init+0x2b8>)
 8014150:	9304      	str	r3, [sp, #16]
 8014152:	9503      	str	r5, [sp, #12]
 8014154:	9402      	str	r4, [sp, #8]
 8014156:	9101      	str	r1, [sp, #4]
 8014158:	9200      	str	r2, [sp, #0]
 801415a:	4643      	mov	r3, r8
 801415c:	4662      	mov	r2, ip
 801415e:	0031      	movs	r1, r6
 8014160:	f001 f900 	bl	8015364 <TraceSend>
 8014164:	1e03      	subs	r3, r0, #0
 8014166:	d1d0      	bne.n	801410a <LORA_Init+0x46>
  PPRINTF( "AppEui= %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\n\r", HEX8(joinEui));
 8014168:	2008      	movs	r0, #8
 801416a:	2518      	movs	r5, #24
 801416c:	1943      	adds	r3, r0, r5
 801416e:	19db      	adds	r3, r3, r7
 8014170:	781b      	ldrb	r3, [r3, #0]
 8014172:	001e      	movs	r6, r3
 8014174:	1943      	adds	r3, r0, r5
 8014176:	19db      	adds	r3, r3, r7
 8014178:	785b      	ldrb	r3, [r3, #1]
 801417a:	469c      	mov	ip, r3
 801417c:	1943      	adds	r3, r0, r5
 801417e:	19db      	adds	r3, r3, r7
 8014180:	789b      	ldrb	r3, [r3, #2]
 8014182:	4698      	mov	r8, r3
 8014184:	1943      	adds	r3, r0, r5
 8014186:	19db      	adds	r3, r3, r7
 8014188:	78db      	ldrb	r3, [r3, #3]
 801418a:	001a      	movs	r2, r3
 801418c:	1943      	adds	r3, r0, r5
 801418e:	19db      	adds	r3, r3, r7
 8014190:	791b      	ldrb	r3, [r3, #4]
 8014192:	0019      	movs	r1, r3
 8014194:	1943      	adds	r3, r0, r5
 8014196:	19db      	adds	r3, r3, r7
 8014198:	795b      	ldrb	r3, [r3, #5]
 801419a:	001c      	movs	r4, r3
 801419c:	1943      	adds	r3, r0, r5
 801419e:	19db      	adds	r3, r3, r7
 80141a0:	799b      	ldrb	r3, [r3, #6]
 80141a2:	001d      	movs	r5, r3
 80141a4:	2318      	movs	r3, #24
 80141a6:	18c3      	adds	r3, r0, r3
 80141a8:	19db      	adds	r3, r3, r7
 80141aa:	79db      	ldrb	r3, [r3, #7]
 80141ac:	4874      	ldr	r0, [pc, #464]	@ (8014380 <LORA_Init+0x2bc>)
 80141ae:	9304      	str	r3, [sp, #16]
 80141b0:	9503      	str	r5, [sp, #12]
 80141b2:	9402      	str	r4, [sp, #8]
 80141b4:	9101      	str	r1, [sp, #4]
 80141b6:	9200      	str	r2, [sp, #0]
 80141b8:	4643      	mov	r3, r8
 80141ba:	4662      	mov	r2, ip
 80141bc:	0031      	movs	r1, r6
 80141be:	f001 f8d1 	bl	8015364 <TraceSend>
 80141c2:	1e03      	subs	r3, r0, #0
 80141c4:	d1d0      	bne.n	8014168 <LORA_Init+0xa4>
  PPRINTF( "AppKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(AppKey));
 80141c6:	4b6f      	ldr	r3, [pc, #444]	@ (8014384 <LORA_Init+0x2c0>)
 80141c8:	781b      	ldrb	r3, [r3, #0]
 80141ca:	617b      	str	r3, [r7, #20]
 80141cc:	4b6d      	ldr	r3, [pc, #436]	@ (8014384 <LORA_Init+0x2c0>)
 80141ce:	785b      	ldrb	r3, [r3, #1]
 80141d0:	613b      	str	r3, [r7, #16]
 80141d2:	4b6c      	ldr	r3, [pc, #432]	@ (8014384 <LORA_Init+0x2c0>)
 80141d4:	789b      	ldrb	r3, [r3, #2]
 80141d6:	60fb      	str	r3, [r7, #12]
 80141d8:	4b6a      	ldr	r3, [pc, #424]	@ (8014384 <LORA_Init+0x2c0>)
 80141da:	78db      	ldrb	r3, [r3, #3]
 80141dc:	001d      	movs	r5, r3
 80141de:	4b69      	ldr	r3, [pc, #420]	@ (8014384 <LORA_Init+0x2c0>)
 80141e0:	791b      	ldrb	r3, [r3, #4]
 80141e2:	001e      	movs	r6, r3
 80141e4:	4b67      	ldr	r3, [pc, #412]	@ (8014384 <LORA_Init+0x2c0>)
 80141e6:	795b      	ldrb	r3, [r3, #5]
 80141e8:	469c      	mov	ip, r3
 80141ea:	4b66      	ldr	r3, [pc, #408]	@ (8014384 <LORA_Init+0x2c0>)
 80141ec:	799b      	ldrb	r3, [r3, #6]
 80141ee:	4698      	mov	r8, r3
 80141f0:	4b64      	ldr	r3, [pc, #400]	@ (8014384 <LORA_Init+0x2c0>)
 80141f2:	79db      	ldrb	r3, [r3, #7]
 80141f4:	4699      	mov	r9, r3
 80141f6:	4b63      	ldr	r3, [pc, #396]	@ (8014384 <LORA_Init+0x2c0>)
 80141f8:	7a1b      	ldrb	r3, [r3, #8]
 80141fa:	469a      	mov	sl, r3
 80141fc:	4b61      	ldr	r3, [pc, #388]	@ (8014384 <LORA_Init+0x2c0>)
 80141fe:	7a5b      	ldrb	r3, [r3, #9]
 8014200:	469b      	mov	fp, r3
 8014202:	4b60      	ldr	r3, [pc, #384]	@ (8014384 <LORA_Init+0x2c0>)
 8014204:	7a9b      	ldrb	r3, [r3, #10]
 8014206:	60bb      	str	r3, [r7, #8]
 8014208:	4b5e      	ldr	r3, [pc, #376]	@ (8014384 <LORA_Init+0x2c0>)
 801420a:	7adb      	ldrb	r3, [r3, #11]
 801420c:	607b      	str	r3, [r7, #4]
 801420e:	4b5d      	ldr	r3, [pc, #372]	@ (8014384 <LORA_Init+0x2c0>)
 8014210:	7b1b      	ldrb	r3, [r3, #12]
 8014212:	001c      	movs	r4, r3
 8014214:	4b5b      	ldr	r3, [pc, #364]	@ (8014384 <LORA_Init+0x2c0>)
 8014216:	7b5b      	ldrb	r3, [r3, #13]
 8014218:	0019      	movs	r1, r3
 801421a:	4b5a      	ldr	r3, [pc, #360]	@ (8014384 <LORA_Init+0x2c0>)
 801421c:	7b9b      	ldrb	r3, [r3, #14]
 801421e:	001a      	movs	r2, r3
 8014220:	4b58      	ldr	r3, [pc, #352]	@ (8014384 <LORA_Init+0x2c0>)
 8014222:	7bdb      	ldrb	r3, [r3, #15]
 8014224:	4858      	ldr	r0, [pc, #352]	@ (8014388 <LORA_Init+0x2c4>)
 8014226:	930c      	str	r3, [sp, #48]	@ 0x30
 8014228:	920b      	str	r2, [sp, #44]	@ 0x2c
 801422a:	910a      	str	r1, [sp, #40]	@ 0x28
 801422c:	9409      	str	r4, [sp, #36]	@ 0x24
 801422e:	687c      	ldr	r4, [r7, #4]
 8014230:	9408      	str	r4, [sp, #32]
 8014232:	68bc      	ldr	r4, [r7, #8]
 8014234:	9407      	str	r4, [sp, #28]
 8014236:	465c      	mov	r4, fp
 8014238:	9406      	str	r4, [sp, #24]
 801423a:	4654      	mov	r4, sl
 801423c:	9405      	str	r4, [sp, #20]
 801423e:	464c      	mov	r4, r9
 8014240:	9404      	str	r4, [sp, #16]
 8014242:	4644      	mov	r4, r8
 8014244:	9403      	str	r4, [sp, #12]
 8014246:	4664      	mov	r4, ip
 8014248:	9402      	str	r4, [sp, #8]
 801424a:	9601      	str	r6, [sp, #4]
 801424c:	9500      	str	r5, [sp, #0]
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	693a      	ldr	r2, [r7, #16]
 8014252:	6979      	ldr	r1, [r7, #20]
 8014254:	f001 f886 	bl	8015364 <TraceSend>
 8014258:	1e03      	subs	r3, r0, #0
 801425a:	d1b4      	bne.n	80141c6 <LORA_Init+0x102>
  PPRINTF( "DevEui= %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\n\r", HEX8(devEui));
  PPRINTF( "DevAdd=  %08X\n\r", DevAddr) ;
  PPRINTF( "NwkSKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(NwkSEncKey));
  PPRINTF( "AppSKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(AppSKey));
#endif
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 801425c:	4b4b      	ldr	r3, [pc, #300]	@ (801438c <LORA_Init+0x2c8>)
 801425e:	4a4c      	ldr	r2, [pc, #304]	@ (8014390 <LORA_Init+0x2cc>)
 8014260:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8014262:	4b4a      	ldr	r3, [pc, #296]	@ (801438c <LORA_Init+0x2c8>)
 8014264:	4a4b      	ldr	r2, [pc, #300]	@ (8014394 <LORA_Init+0x2d0>)
 8014266:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8014268:	4b48      	ldr	r3, [pc, #288]	@ (801438c <LORA_Init+0x2c8>)
 801426a:	4a4b      	ldr	r2, [pc, #300]	@ (8014398 <LORA_Init+0x2d4>)
 801426c:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 801426e:	4b47      	ldr	r3, [pc, #284]	@ (801438c <LORA_Init+0x2c8>)
 8014270:	4a4a      	ldr	r2, [pc, #296]	@ (801439c <LORA_Init+0x2d8>)
 8014272:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = LoRaMainCallbacks->BoardGetBatteryLevel;
 8014274:	4b3f      	ldr	r3, [pc, #252]	@ (8014374 <LORA_Init+0x2b0>)
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	681a      	ldr	r2, [r3, #0]
 801427a:	4b49      	ldr	r3, [pc, #292]	@ (80143a0 <LORA_Init+0x2dc>)
 801427c:	601a      	str	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = LoRaMainCallbacks->BoardGetTemperatureLevel;
 801427e:	4b3d      	ldr	r3, [pc, #244]	@ (8014374 <LORA_Init+0x2b0>)
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	685a      	ldr	r2, [r3, #4]
 8014284:	4b46      	ldr	r3, [pc, #280]	@ (80143a0 <LORA_Init+0x2dc>)
 8014286:	605a      	str	r2, [r3, #4]
  LoRaMacCallbacks.MacProcessNotify = LoRaMainCallbacks->MacProcessNotify;
 8014288:	4b3a      	ldr	r3, [pc, #232]	@ (8014374 <LORA_Init+0x2b0>)
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	6a1a      	ldr	r2, [r3, #32]
 801428e:	4b44      	ldr	r3, [pc, #272]	@ (80143a0 <LORA_Init+0x2dc>)
 8014290:	60da      	str	r2, [r3, #12]
#elif defined( REGION_CN779 )
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_CN779 );
#elif defined( REGION_EU433 )
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU433 );
#elif defined( REGION_IN865 )
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_IN865 );
 8014292:	4943      	ldr	r1, [pc, #268]	@ (80143a0 <LORA_Init+0x2dc>)
 8014294:	4b3d      	ldr	r3, [pc, #244]	@ (801438c <LORA_Init+0x2c8>)
 8014296:	2207      	movs	r2, #7
 8014298:	0018      	movs	r0, r3
 801429a:	f7f9 f8cf 	bl	800d43c <LoRaMacInitialization>
  mibReq.Param.ChannelsDefaultMask = channelMask;
  LoRaMacMibSetRequestConfirm( &mibReq );
#endif
#endif

  mibReq.Type = MIB_DEV_EUI;
 801429e:	4b41      	ldr	r3, [pc, #260]	@ (80143a4 <LORA_Init+0x2e0>)
 80142a0:	2202      	movs	r2, #2
 80142a2:	701a      	strb	r2, [r3, #0]
  mibReq.Param.DevEui = devEui;
 80142a4:	4b3f      	ldr	r3, [pc, #252]	@ (80143a4 <LORA_Init+0x2e0>)
 80142a6:	2210      	movs	r2, #16
 80142a8:	2418      	movs	r4, #24
 80142aa:	1912      	adds	r2, r2, r4
 80142ac:	19d2      	adds	r2, r2, r7
 80142ae:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 80142b0:	4b3c      	ldr	r3, [pc, #240]	@ (80143a4 <LORA_Init+0x2e0>)
 80142b2:	0018      	movs	r0, r3
 80142b4:	f7f9 fe82 	bl	800dfbc <LoRaMacMibSetRequestConfirm>
  
  mibReq.Type = MIB_JOIN_EUI;
 80142b8:	4b3a      	ldr	r3, [pc, #232]	@ (80143a4 <LORA_Init+0x2e0>)
 80142ba:	2203      	movs	r2, #3
 80142bc:	701a      	strb	r2, [r3, #0]
  mibReq.Param.JoinEui = joinEui;
 80142be:	4b39      	ldr	r3, [pc, #228]	@ (80143a4 <LORA_Init+0x2e0>)
 80142c0:	2208      	movs	r2, #8
 80142c2:	1912      	adds	r2, r2, r4
 80142c4:	19d2      	adds	r2, r2, r7
 80142c6:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 80142c8:	4b36      	ldr	r3, [pc, #216]	@ (80143a4 <LORA_Init+0x2e0>)
 80142ca:	0018      	movs	r0, r3
 80142cc:	f7f9 fe76 	bl	800dfbc <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_ADR;
 80142d0:	4b34      	ldr	r3, [pc, #208]	@ (80143a4 <LORA_Init+0x2e0>)
 80142d2:	2204      	movs	r2, #4
 80142d4:	701a      	strb	r2, [r3, #0]
  mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 80142d6:	4b26      	ldr	r3, [pc, #152]	@ (8014370 <LORA_Init+0x2ac>)
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	781a      	ldrb	r2, [r3, #0]
 80142dc:	4b31      	ldr	r3, [pc, #196]	@ (80143a4 <LORA_Init+0x2e0>)
 80142de:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 80142e0:	4b30      	ldr	r3, [pc, #192]	@ (80143a4 <LORA_Init+0x2e0>)
 80142e2:	0018      	movs	r0, r3
 80142e4:	f7f9 fe6a 	bl	800dfbc <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_PUBLIC_NETWORK;
 80142e8:	4b2e      	ldr	r3, [pc, #184]	@ (80143a4 <LORA_Init+0x2e0>)
 80142ea:	221d      	movs	r2, #29
 80142ec:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnablePublicNetwork = LoRaParamInit->EnablePublicNetwork;
 80142ee:	4b20      	ldr	r3, [pc, #128]	@ (8014370 <LORA_Init+0x2ac>)
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	789a      	ldrb	r2, [r3, #2]
 80142f4:	4b2b      	ldr	r3, [pc, #172]	@ (80143a4 <LORA_Init+0x2e0>)
 80142f6:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 80142f8:	4b2a      	ldr	r3, [pc, #168]	@ (80143a4 <LORA_Init+0x2e0>)
 80142fa:	0018      	movs	r0, r3
 80142fc:	f7f9 fe5e 	bl	800dfbc <LoRaMacMibSetRequestConfirm>
  
  mibReq.Type = MIB_APP_KEY;
 8014300:	4b28      	ldr	r3, [pc, #160]	@ (80143a4 <LORA_Init+0x2e0>)
 8014302:	2208      	movs	r2, #8
 8014304:	701a      	strb	r2, [r3, #0]
  mibReq.Param.AppKey = AppKey;
 8014306:	4b27      	ldr	r3, [pc, #156]	@ (80143a4 <LORA_Init+0x2e0>)
 8014308:	4a1e      	ldr	r2, [pc, #120]	@ (8014384 <LORA_Init+0x2c0>)
 801430a:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 801430c:	4b25      	ldr	r3, [pc, #148]	@ (80143a4 <LORA_Init+0x2e0>)
 801430e:	0018      	movs	r0, r3
 8014310:	f7f9 fe54 	bl	800dfbc <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_NWK_KEY;
 8014314:	4b23      	ldr	r3, [pc, #140]	@ (80143a4 <LORA_Init+0x2e0>)
 8014316:	2209      	movs	r2, #9
 8014318:	701a      	strb	r2, [r3, #0]
  mibReq.Param.NwkKey = NwkKey;
 801431a:	4b22      	ldr	r3, [pc, #136]	@ (80143a4 <LORA_Init+0x2e0>)
 801431c:	4a22      	ldr	r2, [pc, #136]	@ (80143a8 <LORA_Init+0x2e4>)
 801431e:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 8014320:	4b20      	ldr	r3, [pc, #128]	@ (80143a4 <LORA_Init+0x2e0>)
 8014322:	0018      	movs	r0, r3
 8014324:	f7f9 fe4a 	bl	800dfbc <LoRaMacMibSetRequestConfirm>
                      
  mibReq.Type = MIB_DEVICE_CLASS;
 8014328:	4b1e      	ldr	r3, [pc, #120]	@ (80143a4 <LORA_Init+0x2e0>)
 801432a:	2200      	movs	r2, #0
 801432c:	701a      	strb	r2, [r3, #0]
  mibReq.Param.Class= CLASS_A;
 801432e:	4b1d      	ldr	r3, [pc, #116]	@ (80143a4 <LORA_Init+0x2e0>)
 8014330:	2200      	movs	r2, #0
 8014332:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 8014334:	4b1b      	ldr	r3, [pc, #108]	@ (80143a4 <LORA_Init+0x2e0>)
 8014336:	0018      	movs	r0, r3
 8014338:	f7f9 fe40 	bl	800dfbc <LoRaMacMibSetRequestConfirm>

#if defined( REGION_EU868 ) || defined( REGION_RU864 ) || defined( REGION_CN779 ) || defined( REGION_EU433 )
  LoRaMacTestSetDutyCycleOn( LORAWAN_DUTYCYCLE_ON );
#endif
      
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 801433c:	4b19      	ldr	r3, [pc, #100]	@ (80143a4 <LORA_Init+0x2e0>)
 801433e:	2230      	movs	r2, #48	@ 0x30
 8014340:	701a      	strb	r2, [r3, #0]
  mibReq.Param.SystemMaxRxError = 20;
 8014342:	4b18      	ldr	r3, [pc, #96]	@ (80143a4 <LORA_Init+0x2e0>)
 8014344:	2214      	movs	r2, #20
 8014346:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 8014348:	4b16      	ldr	r3, [pc, #88]	@ (80143a4 <LORA_Init+0x2e0>)
 801434a:	0018      	movs	r0, r3
 801434c:	f7f9 fe36 	bl	800dfbc <LoRaMacMibSetRequestConfirm>

  /*set Mac statein Idle*/
  LoRaMacStart( );
 8014350:	f7f9 fc1c 	bl	800db8c <LoRaMacStart>
}
 8014354:	46c0      	nop			@ (mov r8, r8)
 8014356:	46bd      	mov	sp, r7
 8014358:	b00d      	add	sp, #52	@ 0x34
 801435a:	bcf0      	pop	{r4, r5, r6, r7}
 801435c:	46bb      	mov	fp, r7
 801435e:	46b2      	mov	sl, r6
 8014360:	46a9      	mov	r9, r5
 8014362:	46a0      	mov	r8, r4
 8014364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014366:	46c0      	nop			@ (mov r8, r8)
 8014368:	0801ab14 	.word	0x0801ab14
 801436c:	0801ab1c 	.word	0x0801ab1c
 8014370:	20001350 	.word	0x20001350
 8014374:	20001394 	.word	0x20001394
 8014378:	0801aa48 	.word	0x0801aa48
 801437c:	0801aa50 	.word	0x0801aa50
 8014380:	0801aa84 	.word	0x0801aa84
 8014384:	20000088 	.word	0x20000088
 8014388:	0801aab8 	.word	0x0801aab8
 801438c:	20001354 	.word	0x20001354
 8014390:	08013f4d 	.word	0x08013f4d
 8014394:	08013f91 	.word	0x08013f91
 8014398:	08014049 	.word	0x08014049
 801439c:	0801409d 	.word	0x0801409d
 80143a0:	20001364 	.word	0x20001364
 80143a4:	20001374 	.word	0x20001374
 80143a8:	20000098 	.word	0x20000098

080143ac <LORA_Join>:


void LORA_Join( void)
{
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b084      	sub	sp, #16
 80143b0:	af00      	add	r7, sp, #0
    MlmeReq_t mlmeReq;
  
    mlmeReq.Type = MLME_JOIN;
 80143b2:	003b      	movs	r3, r7
 80143b4:	2200      	movs	r2, #0
 80143b6:	701a      	strb	r2, [r3, #0]
    mlmeReq.Req.Join.Datarate = LoRaParamInit->TxDatarate;
 80143b8:	4b09      	ldr	r3, [pc, #36]	@ (80143e0 <LORA_Join+0x34>)
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	785b      	ldrb	r3, [r3, #1]
 80143be:	b25b      	sxtb	r3, r3
 80143c0:	b2da      	uxtb	r2, r3
 80143c2:	003b      	movs	r3, r7
 80143c4:	711a      	strb	r2, [r3, #4]
  
    JoinParameters = mlmeReq.Req.Join;
 80143c6:	4b07      	ldr	r3, [pc, #28]	@ (80143e4 <LORA_Join+0x38>)
 80143c8:	003a      	movs	r2, r7
 80143ca:	7912      	ldrb	r2, [r2, #4]
 80143cc:	701a      	strb	r2, [r3, #0]

#if( OVER_THE_AIR_ACTIVATION != 0 )
    LoRaMacMlmeRequest( &mlmeReq );
 80143ce:	003b      	movs	r3, r7
 80143d0:	0018      	movs	r0, r3
 80143d2:	f7fa fae7 	bl	800e9a4 <LoRaMacMlmeRequest>
    mibReq.Param.AbpLrWanVersion = abpLrWanVersion;
    LoRaMacMibSetRequestConfirm( &mibReq );

    LoRaMainCallbacks->LORA_HasJoined();
#endif
}
 80143d6:	46c0      	nop			@ (mov r8, r8)
 80143d8:	46bd      	mov	sp, r7
 80143da:	b004      	add	sp, #16
 80143dc:	bd80      	pop	{r7, pc}
 80143de:	46c0      	nop			@ (mov r8, r8)
 80143e0:	20001350 	.word	0x20001350
 80143e4:	2000134c 	.word	0x2000134c

080143e8 <LORA_JoinStatus>:

LoraFlagStatus LORA_JoinStatus( void)
{
 80143e8:	b580      	push	{r7, lr}
 80143ea:	b088      	sub	sp, #32
 80143ec:	af00      	add	r7, sp, #0
  MibRequestConfirm_t mibReq;

  mibReq.Type = MIB_NETWORK_ACTIVATION;
 80143ee:	003b      	movs	r3, r7
 80143f0:	2201      	movs	r2, #1
 80143f2:	701a      	strb	r2, [r3, #0]
  
  LoRaMacMibGetRequestConfirm( &mibReq );
 80143f4:	003b      	movs	r3, r7
 80143f6:	0018      	movs	r0, r3
 80143f8:	f7f9 fc84 	bl	800dd04 <LoRaMacMibGetRequestConfirm>

  if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 80143fc:	003b      	movs	r3, r7
 80143fe:	791b      	ldrb	r3, [r3, #4]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d101      	bne.n	8014408 <LORA_JoinStatus+0x20>
  {
    return LORA_RESET;
 8014404:	2300      	movs	r3, #0
 8014406:	e000      	b.n	801440a <LORA_JoinStatus+0x22>
  }
  else
  {
    return LORA_SET;
 8014408:	2301      	movs	r3, #1
  }
}
 801440a:	0018      	movs	r0, r3
 801440c:	46bd      	mov	sp, r7
 801440e:	b008      	add	sp, #32
 8014410:	bd80      	pop	{r7, pc}
	...

08014414 <LORA_send>:



bool LORA_send(lora_AppData_t* AppData, LoraConfirm_t IsTxConfirmed)
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b088      	sub	sp, #32
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
 801441c:	000a      	movs	r2, r1
 801441e:	1cfb      	adds	r3, r7, #3
 8014420:	701a      	strb	r2, [r3, #0]
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;
  
    /*if certification test are on going, application data is not sent*/
    if (certif_running() == true)
 8014422:	f7ff fb49 	bl	8013ab8 <certif_running>
 8014426:	1e03      	subs	r3, r0, #0
 8014428:	d001      	beq.n	801442e <LORA_send+0x1a>
    {
      return false;
 801442a:	2300      	movs	r3, #0
 801442c:	e05a      	b.n	80144e4 <LORA_send+0xd0>
    }
    
    if( LoRaMacQueryTxPossible( AppData->BuffSize, &txInfo ) != LORAMAC_STATUS_OK )
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	791b      	ldrb	r3, [r3, #4]
 8014432:	220c      	movs	r2, #12
 8014434:	18ba      	adds	r2, r7, r2
 8014436:	0011      	movs	r1, r2
 8014438:	0018      	movs	r0, r3
 801443a:	f7f9 fbb5 	bl	800dba8 <LoRaMacQueryTxPossible>
 801443e:	1e03      	subs	r3, r0, #0
 8014440:	d010      	beq.n	8014464 <LORA_send+0x50>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8014442:	2110      	movs	r1, #16
 8014444:	187b      	adds	r3, r7, r1
 8014446:	2200      	movs	r2, #0
 8014448:	701a      	strb	r2, [r3, #0]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 801444a:	187b      	adds	r3, r7, r1
 801444c:	2200      	movs	r2, #0
 801444e:	609a      	str	r2, [r3, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8014450:	187b      	adds	r3, r7, r1
 8014452:	2200      	movs	r2, #0
 8014454:	819a      	strh	r2, [r3, #12]
        mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 8014456:	4b25      	ldr	r3, [pc, #148]	@ (80144ec <LORA_send+0xd8>)
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	2201      	movs	r2, #1
 801445c:	569a      	ldrsb	r2, [r3, r2]
 801445e:	187b      	adds	r3, r7, r1
 8014460:	739a      	strb	r2, [r3, #14]
 8014462:	e035      	b.n	80144d0 <LORA_send+0xbc>
    }
    else
    {
        if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 8014464:	1cfb      	adds	r3, r7, #3
 8014466:	781b      	ldrb	r3, [r3, #0]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d117      	bne.n	801449c <LORA_send+0x88>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 801446c:	2110      	movs	r1, #16
 801446e:	187b      	adds	r3, r7, r1
 8014470:	2200      	movs	r2, #0
 8014472:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Unconfirmed.fPort = AppData->Port;
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	795a      	ldrb	r2, [r3, #5]
 8014478:	187b      	adds	r3, r7, r1
 801447a:	711a      	strb	r2, [r3, #4]
            mcpsReq.Req.Unconfirmed.fBufferSize = AppData->BuffSize;
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	791b      	ldrb	r3, [r3, #4]
 8014480:	001a      	movs	r2, r3
 8014482:	187b      	adds	r3, r7, r1
 8014484:	819a      	strh	r2, [r3, #12]
            mcpsReq.Req.Unconfirmed.fBuffer = AppData->Buff;
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	681a      	ldr	r2, [r3, #0]
 801448a:	187b      	adds	r3, r7, r1
 801448c:	609a      	str	r2, [r3, #8]
            mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 801448e:	4b17      	ldr	r3, [pc, #92]	@ (80144ec <LORA_send+0xd8>)
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	2201      	movs	r2, #1
 8014494:	569a      	ldrsb	r2, [r3, r2]
 8014496:	187b      	adds	r3, r7, r1
 8014498:	739a      	strb	r2, [r3, #14]
 801449a:	e019      	b.n	80144d0 <LORA_send+0xbc>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 801449c:	2110      	movs	r1, #16
 801449e:	187b      	adds	r3, r7, r1
 80144a0:	2201      	movs	r2, #1
 80144a2:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Confirmed.fPort = AppData->Port;
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	795a      	ldrb	r2, [r3, #5]
 80144a8:	187b      	adds	r3, r7, r1
 80144aa:	711a      	strb	r2, [r3, #4]
            mcpsReq.Req.Confirmed.fBufferSize = AppData->BuffSize;
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	791b      	ldrb	r3, [r3, #4]
 80144b0:	001a      	movs	r2, r3
 80144b2:	187b      	adds	r3, r7, r1
 80144b4:	819a      	strh	r2, [r3, #12]
            mcpsReq.Req.Confirmed.fBuffer = AppData->Buff;
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	681a      	ldr	r2, [r3, #0]
 80144ba:	187b      	adds	r3, r7, r1
 80144bc:	609a      	str	r2, [r3, #8]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 80144be:	187b      	adds	r3, r7, r1
 80144c0:	2208      	movs	r2, #8
 80144c2:	73da      	strb	r2, [r3, #15]
            mcpsReq.Req.Confirmed.Datarate = LoRaParamInit->TxDatarate;
 80144c4:	4b09      	ldr	r3, [pc, #36]	@ (80144ec <LORA_send+0xd8>)
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	2201      	movs	r2, #1
 80144ca:	569a      	ldrsb	r2, [r3, r2]
 80144cc:	187b      	adds	r3, r7, r1
 80144ce:	739a      	strb	r2, [r3, #14]
        }
    }
    if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 80144d0:	2310      	movs	r3, #16
 80144d2:	18fb      	adds	r3, r7, r3
 80144d4:	0018      	movs	r0, r3
 80144d6:	f7fa fbb7 	bl	800ec48 <LoRaMacMcpsRequest>
 80144da:	1e03      	subs	r3, r0, #0
 80144dc:	d101      	bne.n	80144e2 <LORA_send+0xce>
    {
        return false;
 80144de:	2300      	movs	r3, #0
 80144e0:	e000      	b.n	80144e4 <LORA_send+0xd0>
    }
    return true;
 80144e2:	2301      	movs	r3, #1
}  
 80144e4:	0018      	movs	r0, r3
 80144e6:	46bd      	mov	sp, r7
 80144e8:	b008      	add	sp, #32
 80144ea:	bd80      	pop	{r7, pc}
 80144ec:	20001350 	.word	0x20001350

080144f0 <LORA_RequestClass>:
  }
}
#endif /* LORAMAC_CLASSB_ENABLED */

LoraErrorStatus LORA_RequestClass( DeviceClass_t newClass )
{
 80144f0:	b590      	push	{r4, r7, lr}
 80144f2:	b08d      	sub	sp, #52	@ 0x34
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	0002      	movs	r2, r0
 80144f8:	1dfb      	adds	r3, r7, #7
 80144fa:	701a      	strb	r2, [r3, #0]
  LoraErrorStatus Errorstatus = LORA_SUCCESS;
 80144fc:	232f      	movs	r3, #47	@ 0x2f
 80144fe:	18fb      	adds	r3, r7, r3
 8014500:	2200      	movs	r2, #0
 8014502:	701a      	strb	r2, [r3, #0]
  MibRequestConfirm_t mibReq;
  DeviceClass_t currentClass;
  
  mibReq.Type = MIB_DEVICE_CLASS;
 8014504:	240c      	movs	r4, #12
 8014506:	193b      	adds	r3, r7, r4
 8014508:	2200      	movs	r2, #0
 801450a:	701a      	strb	r2, [r3, #0]
  LoRaMacMibGetRequestConfirm( &mibReq );
 801450c:	193b      	adds	r3, r7, r4
 801450e:	0018      	movs	r0, r3
 8014510:	f7f9 fbf8 	bl	800dd04 <LoRaMacMibGetRequestConfirm>
  
  currentClass = mibReq.Param.Class;
 8014514:	212e      	movs	r1, #46	@ 0x2e
 8014516:	187b      	adds	r3, r7, r1
 8014518:	193a      	adds	r2, r7, r4
 801451a:	7912      	ldrb	r2, [r2, #4]
 801451c:	701a      	strb	r2, [r3, #0]
  /*attempt to swicth only if class update*/
  if (currentClass != newClass)
 801451e:	187a      	adds	r2, r7, r1
 8014520:	1dfb      	adds	r3, r7, #7
 8014522:	7812      	ldrb	r2, [r2, #0]
 8014524:	781b      	ldrb	r3, [r3, #0]
 8014526:	429a      	cmp	r2, r3
 8014528:	d042      	beq.n	80145b0 <LORA_RequestClass+0xc0>
  {
    switch (newClass)
 801452a:	1dfb      	adds	r3, r7, #7
 801452c:	781b      	ldrb	r3, [r3, #0]
 801452e:	2b02      	cmp	r3, #2
 8014530:	d01f      	beq.n	8014572 <LORA_RequestClass+0x82>
 8014532:	dc3c      	bgt.n	80145ae <LORA_RequestClass+0xbe>
 8014534:	2b00      	cmp	r3, #0
 8014536:	d002      	beq.n	801453e <LORA_RequestClass+0x4e>
 8014538:	2b01      	cmp	r3, #1
 801453a:	d015      	beq.n	8014568 <LORA_RequestClass+0x78>
            Errorstatus = LORA_ERROR;
        }
        break;
      }
      default:
        break;
 801453c:	e037      	b.n	80145ae <LORA_RequestClass+0xbe>
        mibReq.Param.Class = CLASS_A;
 801453e:	210c      	movs	r1, #12
 8014540:	187b      	adds	r3, r7, r1
 8014542:	2200      	movs	r2, #0
 8014544:	711a      	strb	r2, [r3, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8014546:	187b      	adds	r3, r7, r1
 8014548:	0018      	movs	r0, r3
 801454a:	f7f9 fd37 	bl	800dfbc <LoRaMacMibSetRequestConfirm>
 801454e:	1e03      	subs	r3, r0, #0
 8014550:	d105      	bne.n	801455e <LORA_RequestClass+0x6e>
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_A);
 8014552:	4b1b      	ldr	r3, [pc, #108]	@ (80145c0 <LORA_RequestClass+0xd0>)
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	699b      	ldr	r3, [r3, #24]
 8014558:	2000      	movs	r0, #0
 801455a:	4798      	blx	r3
        break;
 801455c:	e028      	b.n	80145b0 <LORA_RequestClass+0xc0>
          Errorstatus = LORA_ERROR;
 801455e:	232f      	movs	r3, #47	@ 0x2f
 8014560:	18fb      	adds	r3, r7, r3
 8014562:	22ff      	movs	r2, #255	@ 0xff
 8014564:	701a      	strb	r2, [r3, #0]
        break;
 8014566:	e023      	b.n	80145b0 <LORA_RequestClass+0xc0>
        PRINTF( "warning: LORAMAC_CLASSB_ENABLED has not been defined at compilation\n\r");
 8014568:	4b16      	ldr	r3, [pc, #88]	@ (80145c4 <LORA_RequestClass+0xd4>)
 801456a:	0018      	movs	r0, r3
 801456c:	f000 fefa 	bl	8015364 <TraceSend>
        break;
 8014570:	e01e      	b.n	80145b0 <LORA_RequestClass+0xc0>
        if (currentClass != CLASS_A)
 8014572:	232e      	movs	r3, #46	@ 0x2e
 8014574:	18fb      	adds	r3, r7, r3
 8014576:	781b      	ldrb	r3, [r3, #0]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d003      	beq.n	8014584 <LORA_RequestClass+0x94>
          Errorstatus = LORA_ERROR;
 801457c:	232f      	movs	r3, #47	@ 0x2f
 801457e:	18fb      	adds	r3, r7, r3
 8014580:	22ff      	movs	r2, #255	@ 0xff
 8014582:	701a      	strb	r2, [r3, #0]
        mibReq.Param.Class = CLASS_C;
 8014584:	210c      	movs	r1, #12
 8014586:	187b      	adds	r3, r7, r1
 8014588:	2202      	movs	r2, #2
 801458a:	711a      	strb	r2, [r3, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 801458c:	187b      	adds	r3, r7, r1
 801458e:	0018      	movs	r0, r3
 8014590:	f7f9 fd14 	bl	800dfbc <LoRaMacMibSetRequestConfirm>
 8014594:	1e03      	subs	r3, r0, #0
 8014596:	d105      	bne.n	80145a4 <LORA_RequestClass+0xb4>
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_C);
 8014598:	4b09      	ldr	r3, [pc, #36]	@ (80145c0 <LORA_RequestClass+0xd0>)
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	699b      	ldr	r3, [r3, #24]
 801459e:	2002      	movs	r0, #2
 80145a0:	4798      	blx	r3
        break;
 80145a2:	e005      	b.n	80145b0 <LORA_RequestClass+0xc0>
            Errorstatus = LORA_ERROR;
 80145a4:	232f      	movs	r3, #47	@ 0x2f
 80145a6:	18fb      	adds	r3, r7, r3
 80145a8:	22ff      	movs	r2, #255	@ 0xff
 80145aa:	701a      	strb	r2, [r3, #0]
        break;
 80145ac:	e000      	b.n	80145b0 <LORA_RequestClass+0xc0>
        break;
 80145ae:	46c0      	nop			@ (mov r8, r8)
    } 
  }
  return Errorstatus;
 80145b0:	232f      	movs	r3, #47	@ 0x2f
 80145b2:	18fb      	adds	r3, r7, r3
 80145b4:	781b      	ldrb	r3, [r3, #0]
 80145b6:	b25b      	sxtb	r3, r3
}
 80145b8:	0018      	movs	r0, r3
 80145ba:	46bd      	mov	sp, r7
 80145bc:	b00d      	add	sp, #52	@ 0x34
 80145be:	bd90      	pop	{r4, r7, pc}
 80145c0:	20001394 	.word	0x20001394
 80145c4:	0801ab24 	.word	0x0801ab24

080145c8 <TraceUpLinkFrame>:
  *currentClass = mibReq.Param.Class;
}


static void TraceUpLinkFrame(McpsConfirm_t *mcpsConfirm)
{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b096      	sub	sp, #88	@ 0x58
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]

    MibRequestConfirm_t mibGet;
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_DEVICE_CLASS;
 80145d0:	2114      	movs	r1, #20
 80145d2:	187b      	adds	r3, r7, r1
 80145d4:	2200      	movs	r2, #0
 80145d6:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 80145d8:	187b      	adds	r3, r7, r1
 80145da:	0018      	movs	r0, r3
 80145dc:	f7f9 fb92 	bl	800dd04 <LoRaMacMibGetRequestConfirm>
                             "ABC"[mibReq.Param.Class], \
                             AppData.Port, \
                             AppData.BuffSize, \
                             mcpsConfirm->TxPower );)

    mibGet.Type  = MIB_CHANNELS_MASK;
 80145e0:	2134      	movs	r1, #52	@ 0x34
 80145e2:	187b      	adds	r3, r7, r1
 80145e4:	2224      	movs	r2, #36	@ 0x24
 80145e6:	701a      	strb	r2, [r3, #0]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 80145e8:	187b      	adds	r3, r7, r1
 80145ea:	0018      	movs	r0, r3
 80145ec:	f7f9 fb8a 	bl	800dd04 <LoRaMacMibGetRequestConfirm>
 80145f0:	1e03      	subs	r3, r0, #0
 80145f2:	d10f      	bne.n	8014614 <TraceUpLinkFrame+0x4c>
#if defined( REGION_AS923 ) || defined( REGION_CN779 ) || \
    defined( REGION_EU868 ) || defined( REGION_IN865 ) || \
    defined( REGION_KR920 ) || defined( REGION_EU433 ) || \
    defined( REGION_RU864 )

        for( uint8_t i = 0; i < 1; i++)
 80145f4:	2357      	movs	r3, #87	@ 0x57
 80145f6:	18fb      	adds	r3, r7, r3
 80145f8:	2200      	movs	r2, #0
 80145fa:	701a      	strb	r2, [r3, #0]
 80145fc:	e005      	b.n	801460a <TraceUpLinkFrame+0x42>
 80145fe:	2157      	movs	r1, #87	@ 0x57
 8014600:	187b      	adds	r3, r7, r1
 8014602:	781a      	ldrb	r2, [r3, #0]
 8014604:	187b      	adds	r3, r7, r1
 8014606:	3201      	adds	r2, #1
 8014608:	701a      	strb	r2, [r3, #0]
 801460a:	2357      	movs	r3, #87	@ 0x57
 801460c:	18fb      	adds	r3, r7, r3
 801460e:	781b      	ldrb	r3, [r3, #0]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d0f4      	beq.n	80145fe <TraceUpLinkFrame+0x36>
            TVL2( PRINTF( "%04X ", mibGet.Param.ChannelsMask[i] );)
        }
    }

    TVL2( PRINTF("\r\n\r\n" );)
} 
 8014614:	46c0      	nop			@ (mov r8, r8)
 8014616:	46bd      	mov	sp, r7
 8014618:	b016      	add	sp, #88	@ 0x58
 801461a:	bd80      	pop	{r7, pc}

0801461c <TraceDownLinkFrame>:


static void TraceDownLinkFrame(McpsIndication_t *mcpsIndication)
{
 801461c:	b590      	push	{r4, r7, lr}
 801461e:	b08b      	sub	sp, #44	@ 0x2c
 8014620:	af00      	add	r7, sp, #0
 8014622:	6078      	str	r0, [r7, #4]
    const char *slotStrings[] = { "1", "2", "C", "Ping-Slot", "Multicast Ping-Slot" };
 8014624:	2314      	movs	r3, #20
 8014626:	18fb      	adds	r3, r7, r3
 8014628:	4a04      	ldr	r2, [pc, #16]	@ (801463c <TraceDownLinkFrame+0x20>)
 801462a:	ca13      	ldmia	r2!, {r0, r1, r4}
 801462c:	c313      	stmia	r3!, {r0, r1, r4}
 801462e:	ca03      	ldmia	r2!, {r0, r1}
 8014630:	c303      	stmia	r3!, {r0, r1}
                             slotStrings[mcpsIndication->RxSlot], \
                             mcpsIndication->Port, \
                             mcpsIndication->BufferSize, \
                             mcpsIndication->Rssi, \
                             mcpsIndication->Snr );)
}  
 8014632:	46c0      	nop			@ (mov r8, r8)
 8014634:	46bd      	mov	sp, r7
 8014636:	b00b      	add	sp, #44	@ 0x2c
 8014638:	bd90      	pop	{r4, r7, pc}
 801463a:	46c0      	nop			@ (mov r8, r8)
 801463c:	0801ab98 	.word	0x0801ab98

08014640 <LPM_SetOffMode>:

/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void LPM_SetOffMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 8014640:	b580      	push	{r7, lr}
 8014642:	b086      	sub	sp, #24
 8014644:	af00      	add	r7, sp, #0
 8014646:	0002      	movs	r2, r0
 8014648:	1dfb      	adds	r3, r7, #7
 801464a:	701a      	strb	r2, [r3, #0]
 801464c:	1dbb      	adds	r3, r7, #6
 801464e:	1c0a      	adds	r2, r1, #0
 8014650:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014652:	f3ef 8310 	mrs	r3, PRIMASK
 8014656:	613b      	str	r3, [r7, #16]
  return(result);
 8014658:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 801465a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801465c:	b672      	cpsid	i
}
 801465e:	46c0      	nop			@ (mov r8, r8)
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 8014660:	1dbb      	adds	r3, r7, #6
 8014662:	781b      	ldrb	r3, [r3, #0]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d009      	beq.n	801467c <LPM_SetOffMode+0x3c>
 8014668:	2b01      	cmp	r3, #1
 801466a:	d110      	bne.n	801468e <LPM_SetOffMode+0x4e>
  {
    case LPM_Disable:
    {
      OffModeDisable |= (uint32_t)id;
 801466c:	1dfb      	adds	r3, r7, #7
 801466e:	781a      	ldrb	r2, [r3, #0]
 8014670:	4b0c      	ldr	r3, [pc, #48]	@ (80146a4 <LPM_SetOffMode+0x64>)
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	431a      	orrs	r2, r3
 8014676:	4b0b      	ldr	r3, [pc, #44]	@ (80146a4 <LPM_SetOffMode+0x64>)
 8014678:	601a      	str	r2, [r3, #0]
      break;
 801467a:	e009      	b.n	8014690 <LPM_SetOffMode+0x50>
    }
    case LPM_Enable:
    {
      OffModeDisable &= ~(uint32_t)id;
 801467c:	1dfb      	adds	r3, r7, #7
 801467e:	781b      	ldrb	r3, [r3, #0]
 8014680:	43da      	mvns	r2, r3
 8014682:	4b08      	ldr	r3, [pc, #32]	@ (80146a4 <LPM_SetOffMode+0x64>)
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	401a      	ands	r2, r3
 8014688:	4b06      	ldr	r3, [pc, #24]	@ (80146a4 <LPM_SetOffMode+0x64>)
 801468a:	601a      	str	r2, [r3, #0]
      break;
 801468c:	e000      	b.n	8014690 <LPM_SetOffMode+0x50>
    }
    default:
      break;
 801468e:	46c0      	nop			@ (mov r8, r8)
 8014690:	697b      	ldr	r3, [r7, #20]
 8014692:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	f383 8810 	msr	PRIMASK, r3
}
 801469a:	46c0      	nop			@ (mov r8, r8)
  }
  
  RESTORE_PRIMASK( );

  return;
 801469c:	46c0      	nop			@ (mov r8, r8)
}
 801469e:	46bd      	mov	sp, r7
 80146a0:	b006      	add	sp, #24
 80146a2:	bd80      	pop	{r7, pc}
 80146a4:	2000139c 	.word	0x2000139c

080146a8 <LPM_SetStopMode>:

void LPM_SetStopMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b086      	sub	sp, #24
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	0002      	movs	r2, r0
 80146b0:	1dfb      	adds	r3, r7, #7
 80146b2:	701a      	strb	r2, [r3, #0]
 80146b4:	1dbb      	adds	r3, r7, #6
 80146b6:	1c0a      	adds	r2, r1, #0
 80146b8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80146ba:	f3ef 8310 	mrs	r3, PRIMASK
 80146be:	613b      	str	r3, [r7, #16]
  return(result);
 80146c0:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 80146c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80146c4:	b672      	cpsid	i
}
 80146c6:	46c0      	nop			@ (mov r8, r8)
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 80146c8:	1dbb      	adds	r3, r7, #6
 80146ca:	781b      	ldrb	r3, [r3, #0]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d009      	beq.n	80146e4 <LPM_SetStopMode+0x3c>
 80146d0:	2b01      	cmp	r3, #1
 80146d2:	d110      	bne.n	80146f6 <LPM_SetStopMode+0x4e>
  {
    case LPM_Disable:
    {
      StopModeDisable |= (uint32_t)id;
 80146d4:	1dfb      	adds	r3, r7, #7
 80146d6:	781a      	ldrb	r2, [r3, #0]
 80146d8:	4b0c      	ldr	r3, [pc, #48]	@ (801470c <LPM_SetStopMode+0x64>)
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	431a      	orrs	r2, r3
 80146de:	4b0b      	ldr	r3, [pc, #44]	@ (801470c <LPM_SetStopMode+0x64>)
 80146e0:	601a      	str	r2, [r3, #0]
      break;
 80146e2:	e009      	b.n	80146f8 <LPM_SetStopMode+0x50>
    }
    case LPM_Enable:
    {
      StopModeDisable &= ~(uint32_t)id;
 80146e4:	1dfb      	adds	r3, r7, #7
 80146e6:	781b      	ldrb	r3, [r3, #0]
 80146e8:	43da      	mvns	r2, r3
 80146ea:	4b08      	ldr	r3, [pc, #32]	@ (801470c <LPM_SetStopMode+0x64>)
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	401a      	ands	r2, r3
 80146f0:	4b06      	ldr	r3, [pc, #24]	@ (801470c <LPM_SetStopMode+0x64>)
 80146f2:	601a      	str	r2, [r3, #0]
      break;
 80146f4:	e000      	b.n	80146f8 <LPM_SetStopMode+0x50>
    }
    default:
      break;
 80146f6:	46c0      	nop			@ (mov r8, r8)
 80146f8:	697b      	ldr	r3, [r7, #20]
 80146fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	f383 8810 	msr	PRIMASK, r3
}
 8014702:	46c0      	nop			@ (mov r8, r8)
  }
  RESTORE_PRIMASK( );

  return;
 8014704:	46c0      	nop			@ (mov r8, r8)
}
 8014706:	46bd      	mov	sp, r7
 8014708:	b006      	add	sp, #24
 801470a:	bd80      	pop	{r7, pc}
 801470c:	20001398 	.word	0x20001398

08014710 <LPM_EnterLowPower>:

void LPM_EnterLowPower(void)
{
 8014710:	b580      	push	{r7, lr}
 8014712:	af00      	add	r7, sp, #0
  if( StopModeDisable )
 8014714:	4b0c      	ldr	r3, [pc, #48]	@ (8014748 <LPM_EnterLowPower+0x38>)
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d004      	beq.n	8014726 <LPM_EnterLowPower+0x16>
  {
    /**
     * SLEEP mode is required
     */
    LPM_EnterSleepMode();
 801471c:	f7ef f8a2 	bl	8003864 <LPM_EnterSleepMode>
    LPM_ExitSleepMode();
 8014720:	f000 f848 	bl	80147b4 <LPM_ExitSleepMode>
      LPM_EnterOffMode();
      LPM_ExitOffMode();
    }
  }

  return;
 8014724:	e00d      	b.n	8014742 <LPM_EnterLowPower+0x32>
    if( OffModeDisable )
 8014726:	4b09      	ldr	r3, [pc, #36]	@ (801474c <LPM_EnterLowPower+0x3c>)
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d004      	beq.n	8014738 <LPM_EnterLowPower+0x28>
      LPM_EnterStopMode();
 801472e:	f7ef f835 	bl	800379c <LPM_EnterStopMode>
      LPM_ExitStopMode();
 8014732:	f7ef f857 	bl	80037e4 <LPM_ExitStopMode>
  return;
 8014736:	e004      	b.n	8014742 <LPM_EnterLowPower+0x32>
      LPM_EnterOffMode();
 8014738:	f000 f841 	bl	80147be <LPM_EnterOffMode>
      LPM_ExitOffMode();
 801473c:	f000 f844 	bl	80147c8 <LPM_ExitOffMode>
  return;
 8014740:	46c0      	nop			@ (mov r8, r8)
}
 8014742:	46bd      	mov	sp, r7
 8014744:	bd80      	pop	{r7, pc}
 8014746:	46c0      	nop			@ (mov r8, r8)
 8014748:	20001398 	.word	0x20001398
 801474c:	2000139c 	.word	0x2000139c

08014750 <LPM_GetMode>:

LPM_GetMode_t LPM_GetMode(void)
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b084      	sub	sp, #16
 8014754:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014756:	f3ef 8310 	mrs	r3, PRIMASK
 801475a:	607b      	str	r3, [r7, #4]
  return(result);
 801475c:	687b      	ldr	r3, [r7, #4]
  LPM_GetMode_t mode_selected;

  BACKUP_PRIMASK();
 801475e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8014760:	b672      	cpsid	i
}
 8014762:	46c0      	nop			@ (mov r8, r8)
  
  DISABLE_IRQ( );

  if(StopModeDisable )
 8014764:	4b11      	ldr	r3, [pc, #68]	@ (80147ac <LPM_GetMode+0x5c>)
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d004      	beq.n	8014776 <LPM_GetMode+0x26>
  {
    mode_selected = LPM_SleepMode;
 801476c:	230f      	movs	r3, #15
 801476e:	18fb      	adds	r3, r7, r3
 8014770:	2200      	movs	r2, #0
 8014772:	701a      	strb	r2, [r3, #0]
 8014774:	e00c      	b.n	8014790 <LPM_GetMode+0x40>
  }
  else
  {
    if(OffModeDisable)
 8014776:	4b0e      	ldr	r3, [pc, #56]	@ (80147b0 <LPM_GetMode+0x60>)
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d004      	beq.n	8014788 <LPM_GetMode+0x38>
    {
      mode_selected = LPM_StopMode;
 801477e:	230f      	movs	r3, #15
 8014780:	18fb      	adds	r3, r7, r3
 8014782:	2201      	movs	r2, #1
 8014784:	701a      	strb	r2, [r3, #0]
 8014786:	e003      	b.n	8014790 <LPM_GetMode+0x40>
    }
    else
    {
      mode_selected = LPM_OffMode;
 8014788:	230f      	movs	r3, #15
 801478a:	18fb      	adds	r3, r7, r3
 801478c:	2202      	movs	r2, #2
 801478e:	701a      	strb	r2, [r3, #0]
 8014790:	68bb      	ldr	r3, [r7, #8]
 8014792:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014794:	683b      	ldr	r3, [r7, #0]
 8014796:	f383 8810 	msr	PRIMASK, r3
}
 801479a:	46c0      	nop			@ (mov r8, r8)
    }
  }

  RESTORE_PRIMASK( );

  return mode_selected;
 801479c:	230f      	movs	r3, #15
 801479e:	18fb      	adds	r3, r7, r3
 80147a0:	781b      	ldrb	r3, [r3, #0]
}
 80147a2:	0018      	movs	r0, r3
 80147a4:	46bd      	mov	sp, r7
 80147a6:	b004      	add	sp, #16
 80147a8:	bd80      	pop	{r7, pc}
 80147aa:	46c0      	nop			@ (mov r8, r8)
 80147ac:	20001398 	.word	0x20001398
 80147b0:	2000139c 	.word	0x2000139c

080147b4 <LPM_ExitSleepMode>:

__weak void LPM_EnterSleepMode(void) {}
__weak void LPM_ExitSleepMode(void) {}
 80147b4:	b580      	push	{r7, lr}
 80147b6:	af00      	add	r7, sp, #0
 80147b8:	46c0      	nop			@ (mov r8, r8)
 80147ba:	46bd      	mov	sp, r7
 80147bc:	bd80      	pop	{r7, pc}

080147be <LPM_EnterOffMode>:
__weak void LPM_EnterStopMode(void) {}
__weak void LPM_ExitStopMode(void) {}
__weak void LPM_EnterOffMode(void) {}
 80147be:	b580      	push	{r7, lr}
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	46c0      	nop			@ (mov r8, r8)
 80147c4:	46bd      	mov	sp, r7
 80147c6:	bd80      	pop	{r7, pc}

080147c8 <LPM_ExitOffMode>:
__weak void LPM_ExitOffMode(void) {}
 80147c8:	b580      	push	{r7, lr}
 80147ca:	af00      	add	r7, sp, #0
 80147cc:	46c0      	nop			@ (mov r8, r8)
 80147ce:	46bd      	mov	sp, r7
 80147d0:	bd80      	pop	{r7, pc}

080147d2 <circular_queue_init>:
static int16_t circular_queue_get_free_size(queue_param_t* queue);
static void add_elementSize_and_inc_writeIdx(queue_param_t* queue,uint16_t element_size);

/* Public functions ----------------------------------------------------------*/
void circular_queue_init(queue_param_t* queue, uint8_t* queue_buff, uint16_t queue_size)
{
 80147d2:	b580      	push	{r7, lr}
 80147d4:	b084      	sub	sp, #16
 80147d6:	af00      	add	r7, sp, #0
 80147d8:	60f8      	str	r0, [r7, #12]
 80147da:	60b9      	str	r1, [r7, #8]
 80147dc:	1dbb      	adds	r3, r7, #6
 80147de:	801a      	strh	r2, [r3, #0]
  queue->queue_read_idx=0;
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	2200      	movs	r2, #0
 80147e4:	801a      	strh	r2, [r3, #0]
  queue->queue_write_idx=0;
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	2200      	movs	r2, #0
 80147ea:	805a      	strh	r2, [r3, #2]
  queue->queue_nb_element=0;
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	2200      	movs	r2, #0
 80147f0:	809a      	strh	r2, [r3, #4]
  queue->queue_buff=queue_buff;
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	68ba      	ldr	r2, [r7, #8]
 80147f6:	609a      	str	r2, [r3, #8]
  queue->queue_size=queue_size;
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	1dba      	adds	r2, r7, #6
 80147fc:	8812      	ldrh	r2, [r2, #0]
 80147fe:	80da      	strh	r2, [r3, #6]
  queue->queue_full=0;
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	2200      	movs	r2, #0
 8014804:	731a      	strb	r2, [r3, #12]
}
 8014806:	46c0      	nop			@ (mov r8, r8)
 8014808:	46bd      	mov	sp, r7
 801480a:	b004      	add	sp, #16
 801480c:	bd80      	pop	{r7, pc}

0801480e <circular_queue_add>:

int circular_queue_add(queue_param_t* queue, uint8_t* buff, uint16_t buff_size)
{
 801480e:	b5b0      	push	{r4, r5, r7, lr}
 8014810:	b086      	sub	sp, #24
 8014812:	af00      	add	r7, sp, #0
 8014814:	60f8      	str	r0, [r7, #12]
 8014816:	60b9      	str	r1, [r7, #8]
 8014818:	1dbb      	adds	r3, r7, #6
 801481a:	801a      	strh	r2, [r3, #0]
  int status;  
  int16_t free_buff_len=circular_queue_get_free_size(queue);
 801481c:	2512      	movs	r5, #18
 801481e:	197c      	adds	r4, r7, r5
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	0018      	movs	r0, r3
 8014824:	f000 f983 	bl	8014b2e <circular_queue_get_free_size>
 8014828:	0003      	movs	r3, r0
 801482a:	8023      	strh	r3, [r4, #0]
  
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 801482c:	1dbb      	adds	r3, r7, #6
 801482e:	881b      	ldrh	r3, [r3, #0]
 8014830:	1c5a      	adds	r2, r3, #1
 8014832:	197b      	adds	r3, r7, r5
 8014834:	2100      	movs	r1, #0
 8014836:	5e5b      	ldrsh	r3, [r3, r1]
 8014838:	429a      	cmp	r2, r3
 801483a:	da47      	bge.n	80148cc <circular_queue_add+0xbe>
      ((queue->queue_write_idx+buff_size+ELEMENT_SIZE_LEN<=queue->queue_size) 
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	885b      	ldrh	r3, [r3, #2]
 8014840:	001a      	movs	r2, r3
 8014842:	1dbb      	adds	r3, r7, #6
 8014844:	881b      	ldrh	r3, [r3, #0]
 8014846:	18d3      	adds	r3, r2, r3
 8014848:	3301      	adds	r3, #1
 801484a:	68fa      	ldr	r2, [r7, #12]
 801484c:	88d2      	ldrh	r2, [r2, #6]
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 801484e:	4293      	cmp	r3, r2
 8014850:	db07      	blt.n	8014862 <circular_queue_add+0x54>
        || (queue->queue_write_idx>=queue->queue_size-ELEMENT_SIZE_LEN))) /*elementSize cut in 2 or elementSize at Top*/
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	885b      	ldrh	r3, [r3, #2]
 8014856:	001a      	movs	r2, r3
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	88db      	ldrh	r3, [r3, #6]
 801485c:	3b02      	subs	r3, #2
 801485e:	429a      	cmp	r2, r3
 8014860:	db34      	blt.n	80148cc <circular_queue_add+0xbe>
  {
    //add in one element
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 8014862:	1dbb      	adds	r3, r7, #6
 8014864:	881a      	ldrh	r2, [r3, #0]
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	0011      	movs	r1, r2
 801486a:	0018      	movs	r0, r3
 801486c:	f000 f9ac 	bl	8014bc8 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,buff_size);
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	689b      	ldr	r3, [r3, #8]
 8014874:	68fa      	ldr	r2, [r7, #12]
 8014876:	8852      	ldrh	r2, [r2, #2]
 8014878:	1898      	adds	r0, r3, r2
 801487a:	1dbb      	adds	r3, r7, #6
 801487c:	881a      	ldrh	r2, [r3, #0]
 801487e:	68bb      	ldr	r3, [r7, #8]
 8014880:	0019      	movs	r1, r3
 8014882:	f000 f985 	bl	8014b90 <queue_copy>
    queue->queue_write_idx+=buff_size;
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	885a      	ldrh	r2, [r3, #2]
 801488a:	1dbb      	adds	r3, r7, #6
 801488c:	881b      	ldrh	r3, [r3, #0]
 801488e:	18d3      	adds	r3, r2, r3
 8014890:	b29a      	uxth	r2, r3
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	805a      	strh	r2, [r3, #2]
    /*modulo queue_size*/
    if (queue->queue_write_idx==queue->queue_size)
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	885a      	ldrh	r2, [r3, #2]
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	88db      	ldrh	r3, [r3, #6]
 801489e:	429a      	cmp	r2, r3
 80148a0:	d102      	bne.n	80148a8 <circular_queue_add+0x9a>
    {
        queue->queue_write_idx=0;
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	2200      	movs	r2, #0
 80148a6:	805a      	strh	r2, [r3, #2]
    }
    //add one element
    queue->queue_nb_element++; 
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	889b      	ldrh	r3, [r3, #4]
 80148ac:	3301      	adds	r3, #1
 80148ae:	b29a      	uxth	r2, r3
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	809a      	strh	r2, [r3, #4]
    /*in case que is full*/
    if (queue->queue_write_idx== queue->queue_read_idx)
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	885a      	ldrh	r2, [r3, #2]
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	881b      	ldrh	r3, [r3, #0]
 80148bc:	429a      	cmp	r2, r3
 80148be:	d102      	bne.n	80148c6 <circular_queue_add+0xb8>
    {
      queue->queue_full=1;
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	2201      	movs	r2, #1
 80148c4:	731a      	strb	r2, [r3, #12]
    }
    status=0;
 80148c6:	2300      	movs	r3, #0
 80148c8:	617b      	str	r3, [r7, #20]
 80148ca:	e060      	b.n	801498e <circular_queue_add+0x180>
  }
  else if (buff_size+2*ELEMENT_SIZE_LEN<=free_buff_len)
 80148cc:	1dbb      	adds	r3, r7, #6
 80148ce:	881b      	ldrh	r3, [r3, #0]
 80148d0:	1cda      	adds	r2, r3, #3
 80148d2:	2312      	movs	r3, #18
 80148d4:	18fb      	adds	r3, r7, r3
 80148d6:	2100      	movs	r1, #0
 80148d8:	5e5b      	ldrsh	r3, [r3, r1]
 80148da:	429a      	cmp	r2, r3
 80148dc:	da54      	bge.n	8014988 <circular_queue_add+0x17a>
  {
    //split buffer in two elements
    /*fill top of queue with first element of size top_size*/
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	88da      	ldrh	r2, [r3, #6]
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	885b      	ldrh	r3, [r3, #2]
 80148e6:	1ad3      	subs	r3, r2, r3
 80148e8:	b29a      	uxth	r2, r3
 80148ea:	2410      	movs	r4, #16
 80148ec:	193b      	adds	r3, r7, r4
 80148ee:	3a02      	subs	r2, #2
 80148f0:	801a      	strh	r2, [r3, #0]
    add_elementSize_and_inc_writeIdx(queue,top_size);
 80148f2:	193b      	adds	r3, r7, r4
 80148f4:	881a      	ldrh	r2, [r3, #0]
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	0011      	movs	r1, r2
 80148fa:	0018      	movs	r0, r3
 80148fc:	f000 f964 	bl	8014bc8 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,top_size);
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	689b      	ldr	r3, [r3, #8]
 8014904:	68fa      	ldr	r2, [r7, #12]
 8014906:	8852      	ldrh	r2, [r2, #2]
 8014908:	1898      	adds	r0, r3, r2
 801490a:	193b      	adds	r3, r7, r4
 801490c:	881a      	ldrh	r2, [r3, #0]
 801490e:	68bb      	ldr	r3, [r7, #8]
 8014910:	0019      	movs	r1, r3
 8014912:	f000 f93d 	bl	8014b90 <queue_copy>
    queue->queue_write_idx=0;
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	2200      	movs	r2, #0
 801491a:	805a      	strh	r2, [r3, #2]

    /*fill bottom of queue with second element of size buff_size-top_size*/
    buff_size-=top_size;
 801491c:	1dbb      	adds	r3, r7, #6
 801491e:	1db9      	adds	r1, r7, #6
 8014920:	193a      	adds	r2, r7, r4
 8014922:	8809      	ldrh	r1, [r1, #0]
 8014924:	8812      	ldrh	r2, [r2, #0]
 8014926:	1a8a      	subs	r2, r1, r2
 8014928:	801a      	strh	r2, [r3, #0]
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 801492a:	1dbb      	adds	r3, r7, #6
 801492c:	881a      	ldrh	r2, [r3, #0]
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	0011      	movs	r1, r2
 8014932:	0018      	movs	r0, r3
 8014934:	f000 f948 	bl	8014bc8 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff+top_size,buff_size);
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	689b      	ldr	r3, [r3, #8]
 801493c:	68fa      	ldr	r2, [r7, #12]
 801493e:	8852      	ldrh	r2, [r2, #2]
 8014940:	1898      	adds	r0, r3, r2
 8014942:	193b      	adds	r3, r7, r4
 8014944:	881b      	ldrh	r3, [r3, #0]
 8014946:	68ba      	ldr	r2, [r7, #8]
 8014948:	18d1      	adds	r1, r2, r3
 801494a:	1dbb      	adds	r3, r7, #6
 801494c:	881b      	ldrh	r3, [r3, #0]
 801494e:	001a      	movs	r2, r3
 8014950:	f000 f91e 	bl	8014b90 <queue_copy>
    queue->queue_write_idx+=buff_size;
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	885a      	ldrh	r2, [r3, #2]
 8014958:	1dbb      	adds	r3, r7, #6
 801495a:	881b      	ldrh	r3, [r3, #0]
 801495c:	18d3      	adds	r3, r2, r3
 801495e:	b29a      	uxth	r2, r3
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	805a      	strh	r2, [r3, #2]
    // add two elements
    queue->queue_nb_element+=2;
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	889b      	ldrh	r3, [r3, #4]
 8014968:	3302      	adds	r3, #2
 801496a:	b29a      	uxth	r2, r3
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	809a      	strh	r2, [r3, #4]
    /*in case que is full*/
    if (queue->queue_write_idx== queue->queue_read_idx)
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	885a      	ldrh	r2, [r3, #2]
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	881b      	ldrh	r3, [r3, #0]
 8014978:	429a      	cmp	r2, r3
 801497a:	d102      	bne.n	8014982 <circular_queue_add+0x174>
    {
      queue->queue_full=1;
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	2201      	movs	r2, #1
 8014980:	731a      	strb	r2, [r3, #12]
    }    
    status =0;
 8014982:	2300      	movs	r3, #0
 8014984:	617b      	str	r3, [r7, #20]
 8014986:	e002      	b.n	801498e <circular_queue_add+0x180>
  }
  else
  {
    status=-1;
 8014988:	2301      	movs	r3, #1
 801498a:	425b      	negs	r3, r3
 801498c:	617b      	str	r3, [r7, #20]
  }
  return status;
 801498e:	697b      	ldr	r3, [r7, #20]
}
 8014990:	0018      	movs	r0, r3
 8014992:	46bd      	mov	sp, r7
 8014994:	b006      	add	sp, #24
 8014996:	bdb0      	pop	{r4, r5, r7, pc}

08014998 <circular_queue_get>:

int circular_queue_get(queue_param_t* queue, uint8_t** buff, uint16_t* buff_size)
{
 8014998:	b590      	push	{r4, r7, lr}
 801499a:	b087      	sub	sp, #28
 801499c:	af00      	add	r7, sp, #0
 801499e:	60f8      	str	r0, [r7, #12]
 80149a0:	60b9      	str	r1, [r7, #8]
 80149a2:	607a      	str	r2, [r7, #4]
  int status;
  if (queue->queue_nb_element==0)
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	889b      	ldrh	r3, [r3, #4]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d103      	bne.n	80149b4 <circular_queue_get+0x1c>
  {
    status=-1;
 80149ac:	2301      	movs	r3, #1
 80149ae:	425b      	negs	r3, r3
 80149b0:	617b      	str	r3, [r7, #20]
 80149b2:	e044      	b.n	8014a3e <circular_queue_get+0xa6>
  }
  else
  {
    uint16_t size;
    uint16_t read_idx=queue->queue_read_idx;
 80149b4:	2412      	movs	r4, #18
 80149b6:	193b      	adds	r3, r7, r4
 80149b8:	68fa      	ldr	r2, [r7, #12]
 80149ba:	8812      	ldrh	r2, [r2, #0]
 80149bc:	801a      	strh	r2, [r3, #0]
    /*retreive and remove 1st element' size and content*/
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	689a      	ldr	r2, [r3, #8]
 80149c2:	193b      	adds	r3, r7, r4
 80149c4:	881b      	ldrh	r3, [r3, #0]
 80149c6:	1939      	adds	r1, r7, r4
 80149c8:	1c58      	adds	r0, r3, #1
 80149ca:	8008      	strh	r0, [r1, #0]
 80149cc:	18d3      	adds	r3, r2, r3
 80149ce:	781b      	ldrb	r3, [r3, #0]
 80149d0:	001a      	movs	r2, r3
 80149d2:	2310      	movs	r3, #16
 80149d4:	18fb      	adds	r3, r7, r3
 80149d6:	0212      	lsls	r2, r2, #8
 80149d8:	801a      	strh	r2, [r3, #0]
    /*wrap if needed*/
    if (read_idx==queue->queue_size)
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	88db      	ldrh	r3, [r3, #6]
 80149de:	193a      	adds	r2, r7, r4
 80149e0:	8812      	ldrh	r2, [r2, #0]
 80149e2:	429a      	cmp	r2, r3
 80149e4:	d102      	bne.n	80149ec <circular_queue_get+0x54>
    {
      read_idx=0;
 80149e6:	193b      	adds	r3, r7, r4
 80149e8:	2200      	movs	r2, #0
 80149ea:	801a      	strh	r2, [r3, #0]
    }
    size|=(uint16_t) queue->queue_buff[read_idx++];
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	689a      	ldr	r2, [r3, #8]
 80149f0:	2412      	movs	r4, #18
 80149f2:	193b      	adds	r3, r7, r4
 80149f4:	881b      	ldrh	r3, [r3, #0]
 80149f6:	1939      	adds	r1, r7, r4
 80149f8:	1c58      	adds	r0, r3, #1
 80149fa:	8008      	strh	r0, [r1, #0]
 80149fc:	18d3      	adds	r3, r2, r3
 80149fe:	781b      	ldrb	r3, [r3, #0]
 8014a00:	0019      	movs	r1, r3
 8014a02:	2210      	movs	r2, #16
 8014a04:	18bb      	adds	r3, r7, r2
 8014a06:	18ba      	adds	r2, r7, r2
 8014a08:	8812      	ldrh	r2, [r2, #0]
 8014a0a:	430a      	orrs	r2, r1
 8014a0c:	801a      	strh	r2, [r3, #0]
    /*wrap if needed*/
    if (read_idx==queue->queue_size)
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	88db      	ldrh	r3, [r3, #6]
 8014a12:	193a      	adds	r2, r7, r4
 8014a14:	8812      	ldrh	r2, [r2, #0]
 8014a16:	429a      	cmp	r2, r3
 8014a18:	d102      	bne.n	8014a20 <circular_queue_get+0x88>
    {
      read_idx=0;
 8014a1a:	193b      	adds	r3, r7, r4
 8014a1c:	2200      	movs	r2, #0
 8014a1e:	801a      	strh	r2, [r3, #0]
    }
    *buff= queue->queue_buff+read_idx;
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	689a      	ldr	r2, [r3, #8]
 8014a24:	2312      	movs	r3, #18
 8014a26:	18fb      	adds	r3, r7, r3
 8014a28:	881b      	ldrh	r3, [r3, #0]
 8014a2a:	18d2      	adds	r2, r2, r3
 8014a2c:	68bb      	ldr	r3, [r7, #8]
 8014a2e:	601a      	str	r2, [r3, #0]

    * buff_size=size;
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	2210      	movs	r2, #16
 8014a34:	18ba      	adds	r2, r7, r2
 8014a36:	8812      	ldrh	r2, [r2, #0]
 8014a38:	801a      	strh	r2, [r3, #0]
    status=0;
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	617b      	str	r3, [r7, #20]
  }
  return status;
 8014a3e:	697b      	ldr	r3, [r7, #20]
}
 8014a40:	0018      	movs	r0, r3
 8014a42:	46bd      	mov	sp, r7
 8014a44:	b007      	add	sp, #28
 8014a46:	bd90      	pop	{r4, r7, pc}

08014a48 <circular_queue_remove>:

int circular_queue_remove(queue_param_t* queue)
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b084      	sub	sp, #16
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	6078      	str	r0, [r7, #4]
  int status;
  if (queue->queue_nb_element==0)
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	889b      	ldrh	r3, [r3, #4]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d103      	bne.n	8014a60 <circular_queue_remove+0x18>
  {
      status=-1;
 8014a58:	2301      	movs	r3, #1
 8014a5a:	425b      	negs	r3, r3
 8014a5c:	60fb      	str	r3, [r7, #12]
 8014a5e:	e04e      	b.n	8014afe <circular_queue_remove+0xb6>
  }
  else
  {
    uint16_t size;
    /*retreive and remove 1st element' size and content*/
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	689a      	ldr	r2, [r3, #8]
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	881b      	ldrh	r3, [r3, #0]
 8014a68:	1c59      	adds	r1, r3, #1
 8014a6a:	b288      	uxth	r0, r1
 8014a6c:	6879      	ldr	r1, [r7, #4]
 8014a6e:	8008      	strh	r0, [r1, #0]
 8014a70:	18d3      	adds	r3, r2, r3
 8014a72:	781b      	ldrb	r3, [r3, #0]
 8014a74:	001a      	movs	r2, r3
 8014a76:	230a      	movs	r3, #10
 8014a78:	18fb      	adds	r3, r7, r3
 8014a7a:	0212      	lsls	r2, r2, #8
 8014a7c:	801a      	strh	r2, [r3, #0]
    if (queue->queue_read_idx==queue->queue_size)
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	881a      	ldrh	r2, [r3, #0]
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	88db      	ldrh	r3, [r3, #6]
 8014a86:	429a      	cmp	r2, r3
 8014a88:	d102      	bne.n	8014a90 <circular_queue_remove+0x48>
    {
      queue->queue_read_idx=0;
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	2200      	movs	r2, #0
 8014a8e:	801a      	strh	r2, [r3, #0]
    }
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	689a      	ldr	r2, [r3, #8]
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	881b      	ldrh	r3, [r3, #0]
 8014a98:	1c59      	adds	r1, r3, #1
 8014a9a:	b288      	uxth	r0, r1
 8014a9c:	6879      	ldr	r1, [r7, #4]
 8014a9e:	8008      	strh	r0, [r1, #0]
 8014aa0:	18d3      	adds	r3, r2, r3
 8014aa2:	781b      	ldrb	r3, [r3, #0]
 8014aa4:	0019      	movs	r1, r3
 8014aa6:	220a      	movs	r2, #10
 8014aa8:	18bb      	adds	r3, r7, r2
 8014aaa:	18ba      	adds	r2, r7, r2
 8014aac:	8812      	ldrh	r2, [r2, #0]
 8014aae:	430a      	orrs	r2, r1
 8014ab0:	801a      	strh	r2, [r3, #0]
    if (queue->queue_read_idx==queue->queue_size)
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	881a      	ldrh	r2, [r3, #0]
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	88db      	ldrh	r3, [r3, #6]
 8014aba:	429a      	cmp	r2, r3
 8014abc:	d102      	bne.n	8014ac4 <circular_queue_remove+0x7c>
    {
      queue->queue_read_idx=0;
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	2200      	movs	r2, #0
 8014ac2:	801a      	strh	r2, [r3, #0]
    }
    /* increment read index*/
    queue->queue_read_idx+=size;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	881a      	ldrh	r2, [r3, #0]
 8014ac8:	230a      	movs	r3, #10
 8014aca:	18fb      	adds	r3, r7, r3
 8014acc:	881b      	ldrh	r3, [r3, #0]
 8014ace:	18d3      	adds	r3, r2, r3
 8014ad0:	b29a      	uxth	r2, r3
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	801a      	strh	r2, [r3, #0]
    /*modulo queue_size*/
    if (queue->queue_read_idx==queue->queue_size)
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	881a      	ldrh	r2, [r3, #0]
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	88db      	ldrh	r3, [r3, #6]
 8014ade:	429a      	cmp	r2, r3
 8014ae0:	d102      	bne.n	8014ae8 <circular_queue_remove+0xa0>
    {
        queue->queue_read_idx=0;
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	801a      	strh	r2, [r3, #0]
    }
    /* decrement number of element*/
    queue->queue_nb_element--;
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	889b      	ldrh	r3, [r3, #4]
 8014aec:	3b01      	subs	r3, #1
 8014aee:	b29a      	uxth	r2, r3
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	809a      	strh	r2, [r3, #4]
    queue->queue_full=0;
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	2200      	movs	r2, #0
 8014af8:	731a      	strb	r2, [r3, #12]
    status=0;
 8014afa:	2300      	movs	r3, #0
 8014afc:	60fb      	str	r3, [r7, #12]
  }
  return status;
 8014afe:	68fb      	ldr	r3, [r7, #12]
}
 8014b00:	0018      	movs	r0, r3
 8014b02:	46bd      	mov	sp, r7
 8014b04:	b004      	add	sp, #16
 8014b06:	bd80      	pop	{r7, pc}

08014b08 <circular_queue_sense>:

int circular_queue_sense(queue_param_t* queue)
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b084      	sub	sp, #16
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	6078      	str	r0, [r7, #4]
  int status;
  if (queue->queue_nb_element==0)
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	889b      	ldrh	r3, [r3, #4]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d103      	bne.n	8014b20 <circular_queue_sense+0x18>
  {
    status=-1;
 8014b18:	2301      	movs	r3, #1
 8014b1a:	425b      	negs	r3, r3
 8014b1c:	60fb      	str	r3, [r7, #12]
 8014b1e:	e001      	b.n	8014b24 <circular_queue_sense+0x1c>
  }
  else
  {
    status=0;
 8014b20:	2300      	movs	r3, #0
 8014b22:	60fb      	str	r3, [r7, #12]
  }
  return status;
 8014b24:	68fb      	ldr	r3, [r7, #12]
}
 8014b26:	0018      	movs	r0, r3
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	b004      	add	sp, #16
 8014b2c:	bd80      	pop	{r7, pc}

08014b2e <circular_queue_get_free_size>:

/* Private functions ---------------------------------------------------------*/
static int16_t circular_queue_get_free_size(queue_param_t* queue)
{
 8014b2e:	b580      	push	{r7, lr}
 8014b30:	b084      	sub	sp, #16
 8014b32:	af00      	add	r7, sp, #0
 8014b34:	6078      	str	r0, [r7, #4]
  int16_t free_size;
  if (queue->queue_write_idx>=queue->queue_read_idx)
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	885a      	ldrh	r2, [r3, #2]
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	881b      	ldrh	r3, [r3, #0]
 8014b3e:	429a      	cmp	r2, r3
 8014b40:	d30d      	bcc.n	8014b5e <circular_queue_get_free_size+0x30>
  {
    free_size=queue->queue_size-(queue->queue_write_idx-queue->queue_read_idx); 
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	88da      	ldrh	r2, [r3, #6]
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	8819      	ldrh	r1, [r3, #0]
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	885b      	ldrh	r3, [r3, #2]
 8014b4e:	1acb      	subs	r3, r1, r3
 8014b50:	b29b      	uxth	r3, r3
 8014b52:	18d3      	adds	r3, r2, r3
 8014b54:	b29a      	uxth	r2, r3
 8014b56:	230e      	movs	r3, #14
 8014b58:	18fb      	adds	r3, r7, r3
 8014b5a:	801a      	strh	r2, [r3, #0]
 8014b5c:	e008      	b.n	8014b70 <circular_queue_get_free_size+0x42>
  }
  else
  {
    free_size=(queue->queue_read_idx-queue->queue_write_idx); 
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	881a      	ldrh	r2, [r3, #0]
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	885b      	ldrh	r3, [r3, #2]
 8014b66:	1ad3      	subs	r3, r2, r3
 8014b68:	b29a      	uxth	r2, r3
 8014b6a:	230e      	movs	r3, #14
 8014b6c:	18fb      	adds	r3, r7, r3
 8014b6e:	801a      	strh	r2, [r3, #0]
  }
  if ( queue->queue_full==1)
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	7b1b      	ldrb	r3, [r3, #12]
 8014b74:	2b01      	cmp	r3, #1
 8014b76:	d103      	bne.n	8014b80 <circular_queue_get_free_size+0x52>
  {
    free_size=0;
 8014b78:	230e      	movs	r3, #14
 8014b7a:	18fb      	adds	r3, r7, r3
 8014b7c:	2200      	movs	r2, #0
 8014b7e:	801a      	strh	r2, [r3, #0]
  }
  return free_size;
 8014b80:	230e      	movs	r3, #14
 8014b82:	18fb      	adds	r3, r7, r3
 8014b84:	2200      	movs	r2, #0
 8014b86:	5e9b      	ldrsh	r3, [r3, r2]
}
 8014b88:	0018      	movs	r0, r3
 8014b8a:	46bd      	mov	sp, r7
 8014b8c:	b004      	add	sp, #16
 8014b8e:	bd80      	pop	{r7, pc}

08014b90 <queue_copy>:

static void queue_copy(uint8_t* out, const uint8_t* in, uint16_t size)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b084      	sub	sp, #16
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	60f8      	str	r0, [r7, #12]
 8014b98:	60b9      	str	r1, [r7, #8]
 8014b9a:	1dbb      	adds	r3, r7, #6
 8014b9c:	801a      	strh	r2, [r3, #0]
  while(size--)
 8014b9e:	e007      	b.n	8014bb0 <queue_copy+0x20>
  {
    *out++= *in++;
 8014ba0:	68ba      	ldr	r2, [r7, #8]
 8014ba2:	1c53      	adds	r3, r2, #1
 8014ba4:	60bb      	str	r3, [r7, #8]
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	1c59      	adds	r1, r3, #1
 8014baa:	60f9      	str	r1, [r7, #12]
 8014bac:	7812      	ldrb	r2, [r2, #0]
 8014bae:	701a      	strb	r2, [r3, #0]
  while(size--)
 8014bb0:	1dbb      	adds	r3, r7, #6
 8014bb2:	881b      	ldrh	r3, [r3, #0]
 8014bb4:	1dba      	adds	r2, r7, #6
 8014bb6:	1e59      	subs	r1, r3, #1
 8014bb8:	8011      	strh	r1, [r2, #0]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d1f0      	bne.n	8014ba0 <queue_copy+0x10>
  }
}
 8014bbe:	46c0      	nop			@ (mov r8, r8)
 8014bc0:	46c0      	nop			@ (mov r8, r8)
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	b004      	add	sp, #16
 8014bc6:	bd80      	pop	{r7, pc}

08014bc8 <add_elementSize_and_inc_writeIdx>:

static void add_elementSize_and_inc_writeIdx(queue_param_t* queue,uint16_t element_size)
{
 8014bc8:	b590      	push	{r4, r7, lr}
 8014bca:	b083      	sub	sp, #12
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	6078      	str	r0, [r7, #4]
 8014bd0:	000a      	movs	r2, r1
 8014bd2:	1cbb      	adds	r3, r7, #2
 8014bd4:	801a      	strh	r2, [r3, #0]
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 8014bd6:	1cbb      	adds	r3, r7, #2
 8014bd8:	881b      	ldrh	r3, [r3, #0]
 8014bda:	0a1b      	lsrs	r3, r3, #8
 8014bdc:	b298      	uxth	r0, r3
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	689a      	ldr	r2, [r3, #8]
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	885b      	ldrh	r3, [r3, #2]
 8014be6:	1c59      	adds	r1, r3, #1
 8014be8:	b28c      	uxth	r4, r1
 8014bea:	6879      	ldr	r1, [r7, #4]
 8014bec:	804c      	strh	r4, [r1, #2]
 8014bee:	18d3      	adds	r3, r2, r3
 8014bf0:	b2c2      	uxtb	r2, r0
 8014bf2:	701a      	strb	r2, [r3, #0]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	885a      	ldrh	r2, [r3, #2]
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	88db      	ldrh	r3, [r3, #6]
 8014bfc:	429a      	cmp	r2, r3
 8014bfe:	d102      	bne.n	8014c06 <add_elementSize_and_inc_writeIdx+0x3e>
  {
    queue->queue_write_idx=0;
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	2200      	movs	r2, #0
 8014c04:	805a      	strh	r2, [r3, #2]
  }
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size);
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	689a      	ldr	r2, [r3, #8]
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	885b      	ldrh	r3, [r3, #2]
 8014c0e:	1c59      	adds	r1, r3, #1
 8014c10:	b288      	uxth	r0, r1
 8014c12:	6879      	ldr	r1, [r7, #4]
 8014c14:	8048      	strh	r0, [r1, #2]
 8014c16:	18d3      	adds	r3, r2, r3
 8014c18:	1cba      	adds	r2, r7, #2
 8014c1a:	8812      	ldrh	r2, [r2, #0]
 8014c1c:	b2d2      	uxtb	r2, r2
 8014c1e:	701a      	strb	r2, [r3, #0]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	885a      	ldrh	r2, [r3, #2]
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	88db      	ldrh	r3, [r3, #6]
 8014c28:	429a      	cmp	r2, r3
 8014c2a:	d102      	bne.n	8014c32 <add_elementSize_and_inc_writeIdx+0x6a>
  {
    queue->queue_write_idx=0;
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	2200      	movs	r2, #0
 8014c30:	805a      	strh	r2, [r3, #2]
  }
}
 8014c32:	46c0      	nop			@ (mov r8, r8)
 8014c34:	46bd      	mov	sp, r7
 8014c36:	b003      	add	sp, #12
 8014c38:	bd90      	pop	{r4, r7, pc}
	...

08014c3c <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8014c3c:	b082      	sub	sp, #8
 8014c3e:	b580      	push	{r7, lr}
 8014c40:	b086      	sub	sp, #24
 8014c42:	af00      	add	r7, sp, #0
 8014c44:	60f8      	str	r0, [r7, #12]
 8014c46:	1d38      	adds	r0, r7, #4
 8014c48:	6001      	str	r1, [r0, #0]
 8014c4a:	6042      	str	r2, [r0, #4]
 8014c4c:	2204      	movs	r2, #4
 8014c4e:	2020      	movs	r0, #32
 8014c50:	1812      	adds	r2, r2, r0
 8014c52:	19d2      	adds	r2, r2, r7
 8014c54:	6013      	str	r3, [r2, #0]
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8014c56:	2110      	movs	r1, #16
 8014c58:	187b      	adds	r3, r7, r1
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	601a      	str	r2, [r3, #0]
 8014c5e:	187b      	adds	r3, r7, r1
 8014c60:	2200      	movs	r2, #0
 8014c62:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds + b.Seconds;
 8014c64:	1d3b      	adds	r3, r7, #4
 8014c66:	681a      	ldr	r2, [r3, #0]
 8014c68:	2304      	movs	r3, #4
 8014c6a:	181b      	adds	r3, r3, r0
 8014c6c:	19db      	adds	r3, r3, r7
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	18d2      	adds	r2, r2, r3
 8014c72:	187b      	adds	r3, r7, r1
 8014c74:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8014c76:	1d3b      	adds	r3, r7, #4
 8014c78:	2204      	movs	r2, #4
 8014c7a:	5e9b      	ldrsh	r3, [r3, r2]
 8014c7c:	b29a      	uxth	r2, r3
 8014c7e:	2304      	movs	r3, #4
 8014c80:	181b      	adds	r3, r3, r0
 8014c82:	19db      	adds	r3, r3, r7
 8014c84:	2004      	movs	r0, #4
 8014c86:	5e1b      	ldrsh	r3, [r3, r0]
 8014c88:	b29b      	uxth	r3, r3
 8014c8a:	18d3      	adds	r3, r2, r3
 8014c8c:	b29b      	uxth	r3, r3
 8014c8e:	b21a      	sxth	r2, r3
 8014c90:	187b      	adds	r3, r7, r1
 8014c92:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds >= 1000 )
 8014c94:	187b      	adds	r3, r7, r1
 8014c96:	2204      	movs	r2, #4
 8014c98:	5e9a      	ldrsh	r2, [r3, r2]
 8014c9a:	23fa      	movs	r3, #250	@ 0xfa
 8014c9c:	009b      	lsls	r3, r3, #2
 8014c9e:	429a      	cmp	r2, r3
 8014ca0:	db0f      	blt.n	8014cc2 <SysTimeAdd+0x86>
    {
        c.Seconds++;
 8014ca2:	187b      	adds	r3, r7, r1
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	1c5a      	adds	r2, r3, #1
 8014ca8:	187b      	adds	r3, r7, r1
 8014caa:	601a      	str	r2, [r3, #0]
        c.SubSeconds -= 1000;
 8014cac:	187b      	adds	r3, r7, r1
 8014cae:	2204      	movs	r2, #4
 8014cb0:	5e9b      	ldrsh	r3, [r3, r2]
 8014cb2:	b29b      	uxth	r3, r3
 8014cb4:	4a09      	ldr	r2, [pc, #36]	@ (8014cdc <SysTimeAdd+0xa0>)
 8014cb6:	4694      	mov	ip, r2
 8014cb8:	4463      	add	r3, ip
 8014cba:	b29b      	uxth	r3, r3
 8014cbc:	b21a      	sxth	r2, r3
 8014cbe:	187b      	adds	r3, r7, r1
 8014cc0:	809a      	strh	r2, [r3, #4]
    }
    return c;
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	2210      	movs	r2, #16
 8014cc6:	18ba      	adds	r2, r7, r2
 8014cc8:	ca03      	ldmia	r2!, {r0, r1}
 8014cca:	c303      	stmia	r3!, {r0, r1}
}
 8014ccc:	68f8      	ldr	r0, [r7, #12]
 8014cce:	46bd      	mov	sp, r7
 8014cd0:	b006      	add	sp, #24
 8014cd2:	bc80      	pop	{r7}
 8014cd4:	bc08      	pop	{r3}
 8014cd6:	b002      	add	sp, #8
 8014cd8:	4718      	bx	r3
 8014cda:	46c0      	nop			@ (mov r8, r8)
 8014cdc:	fffffc18 	.word	0xfffffc18

08014ce0 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8014ce0:	b082      	sub	sp, #8
 8014ce2:	b580      	push	{r7, lr}
 8014ce4:	b086      	sub	sp, #24
 8014ce6:	af00      	add	r7, sp, #0
 8014ce8:	60f8      	str	r0, [r7, #12]
 8014cea:	1d38      	adds	r0, r7, #4
 8014cec:	6001      	str	r1, [r0, #0]
 8014cee:	6042      	str	r2, [r0, #4]
 8014cf0:	2204      	movs	r2, #4
 8014cf2:	2020      	movs	r0, #32
 8014cf4:	1812      	adds	r2, r2, r0
 8014cf6:	19d2      	adds	r2, r2, r7
 8014cf8:	6013      	str	r3, [r2, #0]
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8014cfa:	2110      	movs	r1, #16
 8014cfc:	187b      	adds	r3, r7, r1
 8014cfe:	2200      	movs	r2, #0
 8014d00:	601a      	str	r2, [r3, #0]
 8014d02:	187b      	adds	r3, r7, r1
 8014d04:	2200      	movs	r2, #0
 8014d06:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds - b.Seconds;
 8014d08:	1d3b      	adds	r3, r7, #4
 8014d0a:	681a      	ldr	r2, [r3, #0]
 8014d0c:	2304      	movs	r3, #4
 8014d0e:	181b      	adds	r3, r3, r0
 8014d10:	19db      	adds	r3, r3, r7
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	1ad2      	subs	r2, r2, r3
 8014d16:	187b      	adds	r3, r7, r1
 8014d18:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8014d1a:	1d3b      	adds	r3, r7, #4
 8014d1c:	2204      	movs	r2, #4
 8014d1e:	5e9b      	ldrsh	r3, [r3, r2]
 8014d20:	b29a      	uxth	r2, r3
 8014d22:	2304      	movs	r3, #4
 8014d24:	181b      	adds	r3, r3, r0
 8014d26:	19db      	adds	r3, r3, r7
 8014d28:	2004      	movs	r0, #4
 8014d2a:	5e1b      	ldrsh	r3, [r3, r0]
 8014d2c:	b29b      	uxth	r3, r3
 8014d2e:	1ad3      	subs	r3, r2, r3
 8014d30:	b29b      	uxth	r3, r3
 8014d32:	b21a      	sxth	r2, r3
 8014d34:	187b      	adds	r3, r7, r1
 8014d36:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds < 0 )
 8014d38:	187b      	adds	r3, r7, r1
 8014d3a:	2204      	movs	r2, #4
 8014d3c:	5e9b      	ldrsh	r3, [r3, r2]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	da10      	bge.n	8014d64 <SysTimeSub+0x84>
    {
        c.Seconds--;
 8014d42:	187b      	adds	r3, r7, r1
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	1e5a      	subs	r2, r3, #1
 8014d48:	187b      	adds	r3, r7, r1
 8014d4a:	601a      	str	r2, [r3, #0]
        c.SubSeconds += 1000;
 8014d4c:	187b      	adds	r3, r7, r1
 8014d4e:	2204      	movs	r2, #4
 8014d50:	5e9b      	ldrsh	r3, [r3, r2]
 8014d52:	b29b      	uxth	r3, r3
 8014d54:	22fa      	movs	r2, #250	@ 0xfa
 8014d56:	0092      	lsls	r2, r2, #2
 8014d58:	4694      	mov	ip, r2
 8014d5a:	4463      	add	r3, ip
 8014d5c:	b29b      	uxth	r3, r3
 8014d5e:	b21a      	sxth	r2, r3
 8014d60:	187b      	adds	r3, r7, r1
 8014d62:	809a      	strh	r2, [r3, #4]
    }
    return c;
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	2210      	movs	r2, #16
 8014d68:	18ba      	adds	r2, r7, r2
 8014d6a:	ca03      	ldmia	r2!, {r0, r1}
 8014d6c:	c303      	stmia	r3!, {r0, r1}
}
 8014d6e:	68f8      	ldr	r0, [r7, #12]
 8014d70:	46bd      	mov	sp, r7
 8014d72:	b006      	add	sp, #24
 8014d74:	bc80      	pop	{r7}
 8014d76:	bc08      	pop	{r3}
 8014d78:	b002      	add	sp, #8
 8014d7a:	4718      	bx	r3

08014d7c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8014d7c:	b5b0      	push	{r4, r5, r7, lr}
 8014d7e:	b088      	sub	sp, #32
 8014d80:	af02      	add	r7, sp, #8
 8014d82:	003b      	movs	r3, r7
 8014d84:	6018      	str	r0, [r3, #0]
 8014d86:	6059      	str	r1, [r3, #4]
    SysTime_t DeltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8014d88:	2408      	movs	r4, #8
 8014d8a:	193b      	adds	r3, r7, r4
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	601a      	str	r2, [r3, #0]
 8014d90:	193b      	adds	r3, r7, r4
 8014d92:	2200      	movs	r2, #0
 8014d94:	809a      	strh	r2, [r3, #4]

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8014d96:	193b      	adds	r3, r7, r4
 8014d98:	3304      	adds	r3, #4
 8014d9a:	0018      	movs	r0, r3
 8014d9c:	f7ef fb74 	bl	8004488 <HW_RTC_GetCalendarTime>
 8014da0:	0002      	movs	r2, r0
 8014da2:	0021      	movs	r1, r4
 8014da4:	187b      	adds	r3, r7, r1
 8014da6:	601a      	str	r2, [r3, #0]

    // sysTime is epoch
    DeltaTime = SysTimeSub( sysTime, calendarTime );
 8014da8:	2510      	movs	r5, #16
 8014daa:	197c      	adds	r4, r7, r5
 8014dac:	187b      	adds	r3, r7, r1
 8014dae:	003a      	movs	r2, r7
 8014db0:	4669      	mov	r1, sp
 8014db2:	6858      	ldr	r0, [r3, #4]
 8014db4:	6008      	str	r0, [r1, #0]
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	6811      	ldr	r1, [r2, #0]
 8014dba:	6852      	ldr	r2, [r2, #4]
 8014dbc:	0020      	movs	r0, r4
 8014dbe:	f7ff ff8f 	bl	8014ce0 <SysTimeSub>

    HW_RTC_BKUPWrite( DeltaTime.Seconds, ( uint32_t )DeltaTime.SubSeconds );
 8014dc2:	197b      	adds	r3, r7, r5
 8014dc4:	681a      	ldr	r2, [r3, #0]
 8014dc6:	197b      	adds	r3, r7, r5
 8014dc8:	2104      	movs	r1, #4
 8014dca:	5e5b      	ldrsh	r3, [r3, r1]
 8014dcc:	0019      	movs	r1, r3
 8014dce:	0010      	movs	r0, r2
 8014dd0:	f7ef fb84 	bl	80044dc <HW_RTC_BKUPWrite>
}
 8014dd4:	46c0      	nop			@ (mov r8, r8)
 8014dd6:	46bd      	mov	sp, r7
 8014dd8:	b006      	add	sp, #24
 8014dda:	bdb0      	pop	{r4, r5, r7, pc}

08014ddc <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8014ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014dde:	b08b      	sub	sp, #44	@ 0x2c
 8014de0:	af02      	add	r7, sp, #8
 8014de2:	6078      	str	r0, [r7, #4]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8014de4:	2518      	movs	r5, #24
 8014de6:	197b      	adds	r3, r7, r5
 8014de8:	2200      	movs	r2, #0
 8014dea:	601a      	str	r2, [r3, #0]
 8014dec:	197b      	adds	r3, r7, r5
 8014dee:	2200      	movs	r2, #0
 8014df0:	809a      	strh	r2, [r3, #4]
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8014df2:	2410      	movs	r4, #16
 8014df4:	193b      	adds	r3, r7, r4
 8014df6:	2200      	movs	r2, #0
 8014df8:	601a      	str	r2, [r3, #0]
 8014dfa:	193b      	adds	r3, r7, r4
 8014dfc:	2200      	movs	r2, #0
 8014dfe:	809a      	strh	r2, [r3, #4]
    SysTime_t DeltaTime;

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8014e00:	197b      	adds	r3, r7, r5
 8014e02:	3304      	adds	r3, #4
 8014e04:	0018      	movs	r0, r3
 8014e06:	f7ef fb3f 	bl	8004488 <HW_RTC_GetCalendarTime>
 8014e0a:	0002      	movs	r2, r0
 8014e0c:	197b      	adds	r3, r7, r5
 8014e0e:	601a      	str	r2, [r3, #0]

    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 8014e10:	2108      	movs	r1, #8
 8014e12:	187b      	adds	r3, r7, r1
 8014e14:	1d1a      	adds	r2, r3, #4
 8014e16:	187b      	adds	r3, r7, r1
 8014e18:	0011      	movs	r1, r2
 8014e1a:	0018      	movs	r0, r3
 8014e1c:	f7ef fb76 	bl	800450c <HW_RTC_BKUPRead>

    sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8014e20:	0026      	movs	r6, r4
 8014e22:	193c      	adds	r4, r7, r4
 8014e24:	197b      	adds	r3, r7, r5
 8014e26:	2108      	movs	r1, #8
 8014e28:	187a      	adds	r2, r7, r1
 8014e2a:	4669      	mov	r1, sp
 8014e2c:	6858      	ldr	r0, [r3, #4]
 8014e2e:	6008      	str	r0, [r1, #0]
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	6811      	ldr	r1, [r2, #0]
 8014e34:	6852      	ldr	r2, [r2, #4]
 8014e36:	0020      	movs	r0, r4
 8014e38:	f7ff ff00 	bl	8014c3c <SysTimeAdd>

    return sysTime;
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	19ba      	adds	r2, r7, r6
 8014e40:	ca03      	ldmia	r2!, {r0, r1}
 8014e42:	c303      	stmia	r3!, {r0, r1}
}
 8014e44:	6878      	ldr	r0, [r7, #4]
 8014e46:	46bd      	mov	sp, r7
 8014e48:	b009      	add	sp, #36	@ 0x24
 8014e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014e4c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8014e4c:	b590      	push	{r4, r7, lr}
 8014e4e:	b085      	sub	sp, #20
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	6078      	str	r0, [r7, #4]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8014e54:	2408      	movs	r4, #8
 8014e56:	193b      	adds	r3, r7, r4
 8014e58:	2200      	movs	r2, #0
 8014e5a:	601a      	str	r2, [r3, #0]
 8014e5c:	193b      	adds	r3, r7, r4
 8014e5e:	2200      	movs	r2, #0
 8014e60:	809a      	strh	r2, [r3, #4]

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8014e62:	193b      	adds	r3, r7, r4
 8014e64:	3304      	adds	r3, #4
 8014e66:	0018      	movs	r0, r3
 8014e68:	f7ef fb0e 	bl	8004488 <HW_RTC_GetCalendarTime>
 8014e6c:	0002      	movs	r2, r0
 8014e6e:	193b      	adds	r3, r7, r4
 8014e70:	601a      	str	r2, [r3, #0]
    
    return calendarTime;
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	193a      	adds	r2, r7, r4
 8014e76:	ca03      	ldmia	r2!, {r0, r1}
 8014e78:	c303      	stmia	r3!, {r0, r1}
}
 8014e7a:	6878      	ldr	r0, [r7, #4]
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	b005      	add	sp, #20
 8014e80:	bd90      	pop	{r4, r7, pc}

08014e82 <TimerInit>:
 * \retval true (the object is already in the list) or false
 */
static bool TimerExists( TimerEvent_t *obj );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
 8014e82:	b580      	push	{r7, lr}
 8014e84:	b082      	sub	sp, #8
 8014e86:	af00      	add	r7, sp, #0
 8014e88:	6078      	str	r0, [r7, #4]
 8014e8a:	6039      	str	r1, [r7, #0]
  obj->Timestamp = 0;
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	2200      	movs	r2, #0
 8014e90:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = 0;
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	2200      	movs	r2, #0
 8014e96:	605a      	str	r2, [r3, #4]
  obj->IsStarted = false;
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	725a      	strb	r2, [r3, #9]
  obj->Callback = callback;
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	683a      	ldr	r2, [r7, #0]
 8014ea8:	60da      	str	r2, [r3, #12]
  obj->Context = NULL;
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	2200      	movs	r2, #0
 8014eae:	611a      	str	r2, [r3, #16]
  obj->Next = NULL;
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	2200      	movs	r2, #0
 8014eb4:	615a      	str	r2, [r3, #20]
}
 8014eb6:	46c0      	nop			@ (mov r8, r8)
 8014eb8:	46bd      	mov	sp, r7
 8014eba:	b002      	add	sp, #8
 8014ebc:	bd80      	pop	{r7, pc}
	...

08014ec0 <TimerStart>:
{
  obj->Context = context;
}

void TimerStart( TimerEvent_t *obj )
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b088      	sub	sp, #32
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
  uint32_t elapsedTime = 0;
 8014ec8:	2300      	movs	r3, #0
 8014eca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014ecc:	f3ef 8310 	mrs	r3, PRIMASK
 8014ed0:	617b      	str	r3, [r7, #20]
  return(result);
 8014ed2:	697b      	ldr	r3, [r7, #20]
  
  BACKUP_PRIMASK();
 8014ed4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8014ed6:	b672      	cpsid	i
}
 8014ed8:	46c0      	nop			@ (mov r8, r8)
  
  DISABLE_IRQ( );
  

  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d005      	beq.n	8014eec <TimerStart+0x2c>
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	0018      	movs	r0, r3
 8014ee4:	f000 f99c 	bl	8015220 <TimerExists>
 8014ee8:	1e03      	subs	r3, r0, #0
 8014eea:	d006      	beq.n	8014efa <TimerStart+0x3a>
 8014eec:	69bb      	ldr	r3, [r7, #24]
 8014eee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014ef0:	693b      	ldr	r3, [r7, #16]
 8014ef2:	f383 8810 	msr	PRIMASK, r3
}
 8014ef6:	46c0      	nop			@ (mov r8, r8)
  {
    RESTORE_PRIMASK( );
    return;
 8014ef8:	e034      	b.n	8014f64 <TimerStart+0xa4>
  }
  obj->Timestamp = obj->ReloadValue;
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	685a      	ldr	r2, [r3, #4]
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	601a      	str	r2, [r3, #0]
  obj->IsStarted = true;
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	2201      	movs	r2, #1
 8014f06:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	725a      	strb	r2, [r3, #9]

  if( TimerListHead == NULL )
 8014f0e:	4b17      	ldr	r3, [pc, #92]	@ (8014f6c <TimerStart+0xac>)
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d106      	bne.n	8014f24 <TimerStart+0x64>
  {
    HW_RTC_SetTimerContext( );
 8014f16:	f7ef f877 	bl	8004008 <HW_RTC_SetTimerContext>
    TimerInsertNewHeadTimer( obj ); // insert a timeout at now+obj->Timestamp
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	0018      	movs	r0, r3
 8014f1e:	f000 f9ed 	bl	80152fc <TimerInsertNewHeadTimer>
 8014f22:	e019      	b.n	8014f58 <TimerStart+0x98>
  }
  else 
  {
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 8014f24:	f7ee ffce 	bl	8003ec4 <HW_RTC_GetTimerElapsedTime>
 8014f28:	0003      	movs	r3, r0
 8014f2a:	61fb      	str	r3, [r7, #28]
    obj->Timestamp += elapsedTime;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	681a      	ldr	r2, [r3, #0]
 8014f30:	69fb      	ldr	r3, [r7, #28]
 8014f32:	18d2      	adds	r2, r2, r3
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	601a      	str	r2, [r3, #0]
  
    if( obj->Timestamp < TimerListHead->Timestamp )
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	681a      	ldr	r2, [r3, #0]
 8014f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8014f6c <TimerStart+0xac>)
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	429a      	cmp	r2, r3
 8014f44:	d204      	bcs.n	8014f50 <TimerStart+0x90>
    {
      TimerInsertNewHeadTimer( obj);
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	0018      	movs	r0, r3
 8014f4a:	f000 f9d7 	bl	80152fc <TimerInsertNewHeadTimer>
 8014f4e:	e003      	b.n	8014f58 <TimerStart+0x98>
    }
    else
    {
      TimerInsertTimer( obj);
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	0018      	movs	r0, r3
 8014f54:	f000 f9a4 	bl	80152a0 <TimerInsertTimer>
 8014f58:	69bb      	ldr	r3, [r7, #24]
 8014f5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	f383 8810 	msr	PRIMASK, r3
}
 8014f62:	46c0      	nop			@ (mov r8, r8)
    }
  }
  RESTORE_PRIMASK( );
}
 8014f64:	46bd      	mov	sp, r7
 8014f66:	b008      	add	sp, #32
 8014f68:	bd80      	pop	{r7, pc}
 8014f6a:	46c0      	nop			@ (mov r8, r8)
 8014f6c:	200013a0 	.word	0x200013a0

08014f70 <TimerIrqHandler>:
{
  return obj->IsStarted;
}

void TimerIrqHandler( void )
{
 8014f70:	b590      	push	{r4, r7, lr}
 8014f72:	b087      	sub	sp, #28
 8014f74:	af00      	add	r7, sp, #0
  TimerEvent_t* cur;
  TimerEvent_t* next;
  

  
  uint32_t old =  HW_RTC_GetTimerContext( );
 8014f76:	f7ef f85f 	bl	8004038 <HW_RTC_GetTimerContext>
 8014f7a:	0003      	movs	r3, r0
 8014f7c:	613b      	str	r3, [r7, #16]
  uint32_t now =  HW_RTC_SetTimerContext( );
 8014f7e:	f7ef f843 	bl	8004008 <HW_RTC_SetTimerContext>
 8014f82:	0003      	movs	r3, r0
 8014f84:	60fb      	str	r3, [r7, #12]
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 8014f86:	68fa      	ldr	r2, [r7, #12]
 8014f88:	693b      	ldr	r3, [r7, #16]
 8014f8a:	1ad3      	subs	r3, r2, r3
 8014f8c:	60bb      	str	r3, [r7, #8]
  
  /* Update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 8014f8e:	4b3a      	ldr	r3, [pc, #232]	@ (8015078 <TimerIrqHandler+0x108>)
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d01c      	beq.n	8014fd0 <TimerIrqHandler+0x60>
  {
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 8014f96:	4b38      	ldr	r3, [pc, #224]	@ (8015078 <TimerIrqHandler+0x108>)
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	617b      	str	r3, [r7, #20]
 8014f9c:	e014      	b.n	8014fc8 <TimerIrqHandler+0x58>
    {
      next =cur->Next;
 8014f9e:	697b      	ldr	r3, [r7, #20]
 8014fa0:	695b      	ldr	r3, [r3, #20]
 8014fa2:	607b      	str	r3, [r7, #4]
      if (next->Timestamp > DeltaContext)
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	68ba      	ldr	r2, [r7, #8]
 8014faa:	429a      	cmp	r2, r3
 8014fac:	d206      	bcs.n	8014fbc <TimerIrqHandler+0x4c>
      {
        next->Timestamp -= DeltaContext;
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	681a      	ldr	r2, [r3, #0]
 8014fb2:	68bb      	ldr	r3, [r7, #8]
 8014fb4:	1ad2      	subs	r2, r2, r3
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	601a      	str	r2, [r3, #0]
 8014fba:	e002      	b.n	8014fc2 <TimerIrqHandler+0x52>
      }
      else
      {
        next->Timestamp = 0 ;
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	601a      	str	r2, [r3, #0]
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 8014fc2:	697b      	ldr	r3, [r7, #20]
 8014fc4:	695b      	ldr	r3, [r3, #20]
 8014fc6:	617b      	str	r3, [r7, #20]
 8014fc8:	697b      	ldr	r3, [r7, #20]
 8014fca:	695b      	ldr	r3, [r3, #20]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d1e6      	bne.n	8014f9e <TimerIrqHandler+0x2e>
      }
    }
  }
  
  /* execute imediately the alarm callback */
  if ( TimerListHead != NULL )
 8014fd0:	4b29      	ldr	r3, [pc, #164]	@ (8015078 <TimerIrqHandler+0x108>)
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d02e      	beq.n	8015036 <TimerIrqHandler+0xc6>
  {
    cur = TimerListHead;
 8014fd8:	4b27      	ldr	r3, [pc, #156]	@ (8015078 <TimerIrqHandler+0x108>)
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	617b      	str	r3, [r7, #20]
    TimerListHead = TimerListHead->Next;
 8014fde:	4b26      	ldr	r3, [pc, #152]	@ (8015078 <TimerIrqHandler+0x108>)
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	695a      	ldr	r2, [r3, #20]
 8014fe4:	4b24      	ldr	r3, [pc, #144]	@ (8015078 <TimerIrqHandler+0x108>)
 8014fe6:	601a      	str	r2, [r3, #0]
    cur->IsStarted = false;
 8014fe8:	697b      	ldr	r3, [r7, #20]
 8014fea:	2200      	movs	r2, #0
 8014fec:	721a      	strb	r2, [r3, #8]
    exec_cb( cur->Callback, cur->Context );
 8014fee:	697b      	ldr	r3, [r7, #20]
 8014ff0:	68db      	ldr	r3, [r3, #12]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d101      	bne.n	8014ffa <TimerIrqHandler+0x8a>
 8014ff6:	46c0      	nop			@ (mov r8, r8)
 8014ff8:	e7fd      	b.n	8014ff6 <TimerIrqHandler+0x86>
 8014ffa:	697b      	ldr	r3, [r7, #20]
 8014ffc:	68da      	ldr	r2, [r3, #12]
 8014ffe:	697b      	ldr	r3, [r7, #20]
 8015000:	691b      	ldr	r3, [r3, #16]
 8015002:	0018      	movs	r0, r3
 8015004:	4790      	blx	r2
  }


  // remove all the expired object from the list
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 8015006:	e016      	b.n	8015036 <TimerIrqHandler+0xc6>
  {
   cur = TimerListHead;
 8015008:	4b1b      	ldr	r3, [pc, #108]	@ (8015078 <TimerIrqHandler+0x108>)
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	617b      	str	r3, [r7, #20]
   TimerListHead = TimerListHead->Next;
 801500e:	4b1a      	ldr	r3, [pc, #104]	@ (8015078 <TimerIrqHandler+0x108>)
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	695a      	ldr	r2, [r3, #20]
 8015014:	4b18      	ldr	r3, [pc, #96]	@ (8015078 <TimerIrqHandler+0x108>)
 8015016:	601a      	str	r2, [r3, #0]
   cur->IsStarted = false;
 8015018:	697b      	ldr	r3, [r7, #20]
 801501a:	2200      	movs	r2, #0
 801501c:	721a      	strb	r2, [r3, #8]
   exec_cb( cur->Callback, cur->Context );
 801501e:	697b      	ldr	r3, [r7, #20]
 8015020:	68db      	ldr	r3, [r3, #12]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d101      	bne.n	801502a <TimerIrqHandler+0xba>
 8015026:	46c0      	nop			@ (mov r8, r8)
 8015028:	e7fd      	b.n	8015026 <TimerIrqHandler+0xb6>
 801502a:	697b      	ldr	r3, [r7, #20]
 801502c:	68da      	ldr	r2, [r3, #12]
 801502e:	697b      	ldr	r3, [r7, #20]
 8015030:	691b      	ldr	r3, [r3, #16]
 8015032:	0018      	movs	r0, r3
 8015034:	4790      	blx	r2
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 8015036:	4b10      	ldr	r3, [pc, #64]	@ (8015078 <TimerIrqHandler+0x108>)
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d007      	beq.n	801504e <TimerIrqHandler+0xde>
 801503e:	4b0e      	ldr	r3, [pc, #56]	@ (8015078 <TimerIrqHandler+0x108>)
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	681c      	ldr	r4, [r3, #0]
 8015044:	f7ee ff3e 	bl	8003ec4 <HW_RTC_GetTimerElapsedTime>
 8015048:	0003      	movs	r3, r0
 801504a:	429c      	cmp	r4, r3
 801504c:	d3dc      	bcc.n	8015008 <TimerIrqHandler+0x98>
  }

  /* start the next TimerListHead if it exists AND NOT running */
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 801504e:	4b0a      	ldr	r3, [pc, #40]	@ (8015078 <TimerIrqHandler+0x108>)
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d00c      	beq.n	8015070 <TimerIrqHandler+0x100>
 8015056:	4b08      	ldr	r3, [pc, #32]	@ (8015078 <TimerIrqHandler+0x108>)
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	7a5b      	ldrb	r3, [r3, #9]
 801505c:	2201      	movs	r2, #1
 801505e:	4053      	eors	r3, r2
 8015060:	b2db      	uxtb	r3, r3
 8015062:	2b00      	cmp	r3, #0
 8015064:	d004      	beq.n	8015070 <TimerIrqHandler+0x100>
  {
    TimerSetTimeout( TimerListHead );
 8015066:	4b04      	ldr	r3, [pc, #16]	@ (8015078 <TimerIrqHandler+0x108>)
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	0018      	movs	r0, r3
 801506c:	f000 f8f4 	bl	8015258 <TimerSetTimeout>
  }
}
 8015070:	46c0      	nop			@ (mov r8, r8)
 8015072:	46bd      	mov	sp, r7
 8015074:	b007      	add	sp, #28
 8015076:	bd90      	pop	{r4, r7, pc}
 8015078:	200013a0 	.word	0x200013a0

0801507c <TimerStop>:

void TimerStop( TimerEvent_t *obj ) 
{
 801507c:	b580      	push	{r7, lr}
 801507e:	b088      	sub	sp, #32
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015084:	f3ef 8310 	mrs	r3, PRIMASK
 8015088:	613b      	str	r3, [r7, #16]
  return(result);
 801508a:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 801508c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801508e:	b672      	cpsid	i
}
 8015090:	46c0      	nop			@ (mov r8, r8)
  
  DISABLE_IRQ( );
  
  TimerEvent_t* prev = TimerListHead;
 8015092:	4b38      	ldr	r3, [pc, #224]	@ (8015174 <TimerStop+0xf8>)
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	61fb      	str	r3, [r7, #28]
  TimerEvent_t* cur = TimerListHead;
 8015098:	4b36      	ldr	r3, [pc, #216]	@ (8015174 <TimerStop+0xf8>)
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	61bb      	str	r3, [r7, #24]

  // List is empty or the Obj to stop does not exist 
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 801509e:	4b35      	ldr	r3, [pc, #212]	@ (8015174 <TimerStop+0xf8>)
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d002      	beq.n	80150ac <TimerStop+0x30>
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d106      	bne.n	80150ba <TimerStop+0x3e>
 80150ac:	697b      	ldr	r3, [r7, #20]
 80150ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	f383 8810 	msr	PRIMASK, r3
}
 80150b6:	46c0      	nop			@ (mov r8, r8)
  {
    RESTORE_PRIMASK( );
    return;
 80150b8:	e058      	b.n	801516c <TimerStop+0xf0>
  }

  obj->IsStarted = false;
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	2200      	movs	r2, #0
 80150be:	721a      	strb	r2, [r3, #8]

  if( TimerListHead == obj ) // Stop the Head                  
 80150c0:	4b2c      	ldr	r3, [pc, #176]	@ (8015174 <TimerStop+0xf8>)
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	687a      	ldr	r2, [r7, #4]
 80150c6:	429a      	cmp	r2, r3
 80150c8:	d147      	bne.n	801515a <TimerStop+0xde>
  {
    if( TimerListHead->IsNext2Expire == true ) // The head is already running 
 80150ca:	4b2a      	ldr	r3, [pc, #168]	@ (8015174 <TimerStop+0xf8>)
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	7a5b      	ldrb	r3, [r3, #9]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d019      	beq.n	8015108 <TimerStop+0x8c>
    {  
	  
      TimerListHead->IsNext2Expire = false;
 80150d4:	4b27      	ldr	r3, [pc, #156]	@ (8015174 <TimerStop+0xf8>)
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	2200      	movs	r2, #0
 80150da:	725a      	strb	r2, [r3, #9]
      if( TimerListHead->Next != NULL )
 80150dc:	4b25      	ldr	r3, [pc, #148]	@ (8015174 <TimerStop+0xf8>)
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	695b      	ldr	r3, [r3, #20]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d00a      	beq.n	80150fc <TimerStop+0x80>
      {
        TimerListHead = TimerListHead->Next;
 80150e6:	4b23      	ldr	r3, [pc, #140]	@ (8015174 <TimerStop+0xf8>)
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	695a      	ldr	r2, [r3, #20]
 80150ec:	4b21      	ldr	r3, [pc, #132]	@ (8015174 <TimerStop+0xf8>)
 80150ee:	601a      	str	r2, [r3, #0]
        TimerSetTimeout( TimerListHead );
 80150f0:	4b20      	ldr	r3, [pc, #128]	@ (8015174 <TimerStop+0xf8>)
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	0018      	movs	r0, r3
 80150f6:	f000 f8af 	bl	8015258 <TimerSetTimeout>
 80150fa:	e031      	b.n	8015160 <TimerStop+0xe4>
      }
      else
      {
        HW_RTC_StopAlarm( );
 80150fc:	f7ee ff0e 	bl	8003f1c <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 8015100:	4b1c      	ldr	r3, [pc, #112]	@ (8015174 <TimerStop+0xf8>)
 8015102:	2200      	movs	r2, #0
 8015104:	601a      	str	r2, [r3, #0]
 8015106:	e02b      	b.n	8015160 <TimerStop+0xe4>
      }
    }
    else // Stop the head before it is started
    {   
      if( TimerListHead->Next != NULL )   
 8015108:	4b1a      	ldr	r3, [pc, #104]	@ (8015174 <TimerStop+0xf8>)
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	695b      	ldr	r3, [r3, #20]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d005      	beq.n	801511e <TimerStop+0xa2>
      {
        TimerListHead = TimerListHead->Next;
 8015112:	4b18      	ldr	r3, [pc, #96]	@ (8015174 <TimerStop+0xf8>)
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	695a      	ldr	r2, [r3, #20]
 8015118:	4b16      	ldr	r3, [pc, #88]	@ (8015174 <TimerStop+0xf8>)
 801511a:	601a      	str	r2, [r3, #0]
 801511c:	e020      	b.n	8015160 <TimerStop+0xe4>
      }
      else
      {
        TimerListHead = NULL;
 801511e:	4b15      	ldr	r3, [pc, #84]	@ (8015174 <TimerStop+0xf8>)
 8015120:	2200      	movs	r2, #0
 8015122:	601a      	str	r2, [r3, #0]
 8015124:	e01c      	b.n	8015160 <TimerStop+0xe4>
  }
  else // Stop an object within the list
  {      
    while( cur != NULL )
    {
      if( cur == obj )
 8015126:	69ba      	ldr	r2, [r7, #24]
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	429a      	cmp	r2, r3
 801512c:	d110      	bne.n	8015150 <TimerStop+0xd4>
      {
        if( cur->Next != NULL )
 801512e:	69bb      	ldr	r3, [r7, #24]
 8015130:	695b      	ldr	r3, [r3, #20]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d006      	beq.n	8015144 <TimerStop+0xc8>
        {
          cur = cur->Next;
 8015136:	69bb      	ldr	r3, [r7, #24]
 8015138:	695b      	ldr	r3, [r3, #20]
 801513a:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 801513c:	69fb      	ldr	r3, [r7, #28]
 801513e:	69ba      	ldr	r2, [r7, #24]
 8015140:	615a      	str	r2, [r3, #20]
        else
        {
          cur = NULL;
          prev->Next = cur;
        }
        break;
 8015142:	e00d      	b.n	8015160 <TimerStop+0xe4>
          cur = NULL;
 8015144:	2300      	movs	r3, #0
 8015146:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 8015148:	69fb      	ldr	r3, [r7, #28]
 801514a:	69ba      	ldr	r2, [r7, #24]
 801514c:	615a      	str	r2, [r3, #20]
        break;
 801514e:	e007      	b.n	8015160 <TimerStop+0xe4>
      }
      else
      {
        prev = cur;
 8015150:	69bb      	ldr	r3, [r7, #24]
 8015152:	61fb      	str	r3, [r7, #28]
        cur = cur->Next;
 8015154:	69bb      	ldr	r3, [r7, #24]
 8015156:	695b      	ldr	r3, [r3, #20]
 8015158:	61bb      	str	r3, [r7, #24]
    while( cur != NULL )
 801515a:	69bb      	ldr	r3, [r7, #24]
 801515c:	2b00      	cmp	r3, #0
 801515e:	d1e2      	bne.n	8015126 <TimerStop+0xaa>
 8015160:	697b      	ldr	r3, [r7, #20]
 8015162:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015164:	68bb      	ldr	r3, [r7, #8]
 8015166:	f383 8810 	msr	PRIMASK, r3
}
 801516a:	46c0      	nop			@ (mov r8, r8)
      }
    }   
  }
  
  RESTORE_PRIMASK( );
}  
 801516c:	46bd      	mov	sp, r7
 801516e:	b008      	add	sp, #32
 8015170:	bd80      	pop	{r7, pc}
 8015172:	46c0      	nop			@ (mov r8, r8)
 8015174:	200013a0 	.word	0x200013a0

08015178 <TimerSetValue>:
  TimerStop( obj );
  TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b084      	sub	sp, #16
 801517c:	af00      	add	r7, sp, #0
 801517e:	6078      	str	r0, [r7, #4]
 8015180:	6039      	str	r1, [r7, #0]
  uint32_t minValue = 0;
 8015182:	2300      	movs	r3, #0
 8015184:	60bb      	str	r3, [r7, #8]
  uint32_t ticks = HW_RTC_ms2Tick( value );
 8015186:	683b      	ldr	r3, [r7, #0]
 8015188:	0018      	movs	r0, r3
 801518a:	f7ee fe31 	bl	8003df0 <HW_RTC_ms2Tick>
 801518e:	0003      	movs	r3, r0
 8015190:	60fb      	str	r3, [r7, #12]

  TimerStop( obj );
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	0018      	movs	r0, r3
 8015196:	f7ff ff71 	bl	801507c <TimerStop>

  minValue = HW_RTC_GetMinimumTimeout( );
 801519a:	f7ee fe23 	bl	8003de4 <HW_RTC_GetMinimumTimeout>
 801519e:	0003      	movs	r3, r0
 80151a0:	60bb      	str	r3, [r7, #8]
  
  if( ticks < minValue )
 80151a2:	68fa      	ldr	r2, [r7, #12]
 80151a4:	68bb      	ldr	r3, [r7, #8]
 80151a6:	429a      	cmp	r2, r3
 80151a8:	d201      	bcs.n	80151ae <TimerSetValue+0x36>
  {
    ticks = minValue;
 80151aa:	68bb      	ldr	r3, [r7, #8]
 80151ac:	60fb      	str	r3, [r7, #12]
  }

  obj->Timestamp = ticks;
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	68fa      	ldr	r2, [r7, #12]
 80151b2:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = ticks;
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	68fa      	ldr	r2, [r7, #12]
 80151b8:	605a      	str	r2, [r3, #4]
}
 80151ba:	46c0      	nop			@ (mov r8, r8)
 80151bc:	46bd      	mov	sp, r7
 80151be:	b004      	add	sp, #16
 80151c0:	bd80      	pop	{r7, pc}

080151c2 <TimerGetCurrentTime>:

TimerTime_t TimerGetCurrentTime( void )
{
 80151c2:	b580      	push	{r7, lr}
 80151c4:	b082      	sub	sp, #8
 80151c6:	af00      	add	r7, sp, #0
  uint32_t now = HW_RTC_GetTimerValue( );
 80151c8:	f7ee fe94 	bl	8003ef4 <HW_RTC_GetTimerValue>
 80151cc:	0003      	movs	r3, r0
 80151ce:	607b      	str	r3, [r7, #4]
  return  HW_RTC_Tick2ms(now);
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	0018      	movs	r0, r3
 80151d4:	f7ee fe25 	bl	8003e22 <HW_RTC_Tick2ms>
 80151d8:	0003      	movs	r3, r0
}
 80151da:	0018      	movs	r0, r3
 80151dc:	46bd      	mov	sp, r7
 80151de:	b002      	add	sp, #8
 80151e0:	bd80      	pop	{r7, pc}

080151e2 <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 80151e2:	b580      	push	{r7, lr}
 80151e4:	b084      	sub	sp, #16
 80151e6:	af00      	add	r7, sp, #0
 80151e8:	6078      	str	r0, [r7, #4]
  if ( past == 0 )
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d101      	bne.n	80151f4 <TimerGetElapsedTime+0x12>
  {
    return 0;
 80151f0:	2300      	movs	r3, #0
 80151f2:	e010      	b.n	8015216 <TimerGetElapsedTime+0x34>
  }
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 80151f4:	f7ee fe7e 	bl	8003ef4 <HW_RTC_GetTimerValue>
 80151f8:	0003      	movs	r3, r0
 80151fa:	60fb      	str	r3, [r7, #12]
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	0018      	movs	r0, r3
 8015200:	f7ee fdf6 	bl	8003df0 <HW_RTC_ms2Tick>
 8015204:	0003      	movs	r3, r0
 8015206:	60bb      	str	r3, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 8015208:	68fa      	ldr	r2, [r7, #12]
 801520a:	68bb      	ldr	r3, [r7, #8]
 801520c:	1ad3      	subs	r3, r2, r3
 801520e:	0018      	movs	r0, r3
 8015210:	f7ee fe07 	bl	8003e22 <HW_RTC_Tick2ms>
 8015214:	0003      	movs	r3, r0
}
 8015216:	0018      	movs	r0, r3
 8015218:	46bd      	mov	sp, r7
 801521a:	b004      	add	sp, #16
 801521c:	bd80      	pop	{r7, pc}
	...

08015220 <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 8015220:	b580      	push	{r7, lr}
 8015222:	b084      	sub	sp, #16
 8015224:	af00      	add	r7, sp, #0
 8015226:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 8015228:	4b0a      	ldr	r3, [pc, #40]	@ (8015254 <TimerExists+0x34>)
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801522e:	e008      	b.n	8015242 <TimerExists+0x22>
  {
    if( cur == obj )
 8015230:	68fa      	ldr	r2, [r7, #12]
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	429a      	cmp	r2, r3
 8015236:	d101      	bne.n	801523c <TimerExists+0x1c>
    {
      return true;
 8015238:	2301      	movs	r3, #1
 801523a:	e006      	b.n	801524a <TimerExists+0x2a>
    }
    cur = cur->Next;
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	695b      	ldr	r3, [r3, #20]
 8015240:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	2b00      	cmp	r3, #0
 8015246:	d1f3      	bne.n	8015230 <TimerExists+0x10>
  }
  return false;
 8015248:	2300      	movs	r3, #0
}
 801524a:	0018      	movs	r0, r3
 801524c:	46bd      	mov	sp, r7
 801524e:	b004      	add	sp, #16
 8015250:	bd80      	pop	{r7, pc}
 8015252:	46c0      	nop			@ (mov r8, r8)
 8015254:	200013a0 	.word	0x200013a0

08015258 <TimerSetTimeout>:
static void TimerSetTimeout( TimerEvent_t *obj )
{
 8015258:	b590      	push	{r4, r7, lr}
 801525a:	b085      	sub	sp, #20
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 8015260:	f7ee fdc0 	bl	8003de4 <HW_RTC_GetMinimumTimeout>
 8015264:	0003      	movs	r3, r0
 8015266:	60fb      	str	r3, [r7, #12]
  obj->IsNext2Expire = true; 
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	2201      	movs	r2, #1
 801526c:	725a      	strb	r2, [r3, #9]

  // In case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	681c      	ldr	r4, [r3, #0]
 8015272:	f7ee fe27 	bl	8003ec4 <HW_RTC_GetTimerElapsedTime>
 8015276:	0002      	movs	r2, r0
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	18d3      	adds	r3, r2, r3
 801527c:	429c      	cmp	r4, r3
 801527e:	d206      	bcs.n	801528e <TimerSetTimeout+0x36>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 8015280:	f7ee fe20 	bl	8003ec4 <HW_RTC_GetTimerElapsedTime>
 8015284:	0002      	movs	r2, r0
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	18d2      	adds	r2, r2, r3
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	601a      	str	r2, [r3, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	0018      	movs	r0, r3
 8015294:	f7ee fde6 	bl	8003e64 <HW_RTC_SetAlarm>
}
 8015298:	46c0      	nop			@ (mov r8, r8)
 801529a:	46bd      	mov	sp, r7
 801529c:	b005      	add	sp, #20
 801529e:	bd90      	pop	{r4, r7, pc}

080152a0 <TimerInsertTimer>:
    return RtcTempCompensation( period, temperature );
}


static void TimerInsertTimer( TimerEvent_t *obj)
{
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b084      	sub	sp, #16
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 80152a8:	4b13      	ldr	r3, [pc, #76]	@ (80152f8 <TimerInsertTimer+0x58>)
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	60fb      	str	r3, [r7, #12]
  TimerEvent_t* next = TimerListHead->Next;
 80152ae:	4b12      	ldr	r3, [pc, #72]	@ (80152f8 <TimerInsertTimer+0x58>)
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	695b      	ldr	r3, [r3, #20]
 80152b4:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 80152b6:	e012      	b.n	80152de <TimerInsertTimer+0x3e>
  {  
    if( obj->Timestamp  > next->Timestamp )
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	681a      	ldr	r2, [r3, #0]
 80152bc:	68bb      	ldr	r3, [r7, #8]
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	429a      	cmp	r2, r3
 80152c2:	d905      	bls.n	80152d0 <TimerInsertTimer+0x30>
    {
        cur = next;
 80152c4:	68bb      	ldr	r3, [r7, #8]
 80152c6:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 80152c8:	68bb      	ldr	r3, [r7, #8]
 80152ca:	695b      	ldr	r3, [r3, #20]
 80152cc:	60bb      	str	r3, [r7, #8]
 80152ce:	e006      	b.n	80152de <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = obj;
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	687a      	ldr	r2, [r7, #4]
 80152d4:	615a      	str	r2, [r3, #20]
        obj->Next = next;
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	68ba      	ldr	r2, [r7, #8]
 80152da:	615a      	str	r2, [r3, #20]
        return;
 80152dc:	e009      	b.n	80152f2 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	695b      	ldr	r3, [r3, #20]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d1e8      	bne.n	80152b8 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = obj;
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	687a      	ldr	r2, [r7, #4]
 80152ea:	615a      	str	r2, [r3, #20]
  obj->Next = NULL;
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	2200      	movs	r2, #0
 80152f0:	615a      	str	r2, [r3, #20]
}
 80152f2:	46bd      	mov	sp, r7
 80152f4:	b004      	add	sp, #16
 80152f6:	bd80      	pop	{r7, pc}
 80152f8:	200013a0 	.word	0x200013a0

080152fc <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
 80152fc:	b580      	push	{r7, lr}
 80152fe:	b084      	sub	sp, #16
 8015300:	af00      	add	r7, sp, #0
 8015302:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 8015304:	4b0b      	ldr	r3, [pc, #44]	@ (8015334 <TimerInsertNewHeadTimer+0x38>)
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d002      	beq.n	8015316 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsNext2Expire = false;
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	2200      	movs	r2, #0
 8015314:	725a      	strb	r2, [r3, #9]
  }

  obj->Next = cur;
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	68fa      	ldr	r2, [r7, #12]
 801531a:	615a      	str	r2, [r3, #20]
  TimerListHead = obj;
 801531c:	4b05      	ldr	r3, [pc, #20]	@ (8015334 <TimerInsertNewHeadTimer+0x38>)
 801531e:	687a      	ldr	r2, [r7, #4]
 8015320:	601a      	str	r2, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8015322:	4b04      	ldr	r3, [pc, #16]	@ (8015334 <TimerInsertNewHeadTimer+0x38>)
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	0018      	movs	r0, r3
 8015328:	f7ff ff96 	bl	8015258 <TimerSetTimeout>
}
 801532c:	46c0      	nop			@ (mov r8, r8)
 801532e:	46bd      	mov	sp, r7
 8015330:	b004      	add	sp, #16
 8015332:	bd80      	pop	{r7, pc}
 8015334:	200013a0 	.word	0x200013a0

08015338 <TraceInit>:
 */
static void Trace_TxCpltCallback(void);

/* Functions Definition ------------------------------------------------------*/
void TraceInit( void )
{
 8015338:	b580      	push	{r7, lr}
 801533a:	af00      	add	r7, sp, #0
  OutputInit(Trace_TxCpltCallback);
 801533c:	4b06      	ldr	r3, [pc, #24]	@ (8015358 <TraceInit+0x20>)
 801533e:	0018      	movs	r0, r3
 8015340:	f7ef fcea 	bl	8004d18 <vcom_Init>

  circular_queue_init(&MsgTraceQueue, MsgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE);
 8015344:	2380      	movs	r3, #128	@ 0x80
 8015346:	005a      	lsls	r2, r3, #1
 8015348:	4904      	ldr	r1, [pc, #16]	@ (801535c <TraceInit+0x24>)
 801534a:	4b05      	ldr	r3, [pc, #20]	@ (8015360 <TraceInit+0x28>)
 801534c:	0018      	movs	r0, r3
 801534e:	f7ff fa40 	bl	80147d2 <circular_queue_init>

  return;
 8015352:	46c0      	nop			@ (mov r8, r8)
}
 8015354:	46bd      	mov	sp, r7
 8015356:	bd80      	pop	{r7, pc}
 8015358:	08015475 	.word	0x08015475
 801535c:	200013b4 	.word	0x200013b4
 8015360:	200013a4 	.word	0x200013a4

08015364 <TraceSend>:

int32_t TraceSend( const char *strFormat, ...)
{
 8015364:	b40f      	push	{r0, r1, r2, r3}
 8015366:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015368:	b0c9      	sub	sp, #292	@ 0x124
 801536a:	af00      	add	r7, sp, #0
  char buf[TEMPBUFSIZE];
  va_list vaArgs;
  uint8_t* buffer;
  va_start( vaArgs, strFormat);
 801536c:	2396      	movs	r3, #150	@ 0x96
 801536e:	005b      	lsls	r3, r3, #1
 8015370:	2110      	movs	r1, #16
 8015372:	185b      	adds	r3, r3, r1
 8015374:	19db      	adds	r3, r3, r7
 8015376:	60bb      	str	r3, [r7, #8]
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 8015378:	68bb      	ldr	r3, [r7, #8]
 801537a:	2294      	movs	r2, #148	@ 0x94
 801537c:	0052      	lsls	r2, r2, #1
 801537e:	1852      	adds	r2, r2, r1
 8015380:	19d2      	adds	r2, r2, r7
 8015382:	6812      	ldr	r2, [r2, #0]
 8015384:	2180      	movs	r1, #128	@ 0x80
 8015386:	0049      	lsls	r1, r1, #1
 8015388:	260c      	movs	r6, #12
 801538a:	19b8      	adds	r0, r7, r6
 801538c:	f004 fb02 	bl	8019994 <vsniprintf>
 8015390:	0003      	movs	r3, r0
 8015392:	b29a      	uxth	r2, r3
 8015394:	4b34      	ldr	r3, [pc, #208]	@ (8015468 <TraceSend+0x104>)
 8015396:	2490      	movs	r4, #144	@ 0x90
 8015398:	0064      	lsls	r4, r4, #1
 801539a:	191b      	adds	r3, r3, r4
 801539c:	19db      	adds	r3, r3, r7
 801539e:	801a      	strh	r2, [r3, #0]
  va_end(vaArgs);
  int status=0;
 80153a0:	2300      	movs	r3, #0
 80153a2:	258e      	movs	r5, #142	@ 0x8e
 80153a4:	006d      	lsls	r5, r5, #1
 80153a6:	197a      	adds	r2, r7, r5
 80153a8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80153aa:	f3ef 8310 	mrs	r3, PRIMASK
 80153ae:	228a      	movs	r2, #138	@ 0x8a
 80153b0:	0052      	lsls	r2, r2, #1
 80153b2:	18b9      	adds	r1, r7, r2
 80153b4:	600b      	str	r3, [r1, #0]
  return(result);
 80153b6:	18bb      	adds	r3, r7, r2
 80153b8:	681b      	ldr	r3, [r3, #0]
  
  BACKUP_PRIMASK();
 80153ba:	228c      	movs	r2, #140	@ 0x8c
 80153bc:	0052      	lsls	r2, r2, #1
 80153be:	18b9      	adds	r1, r7, r2
 80153c0:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80153c2:	b672      	cpsid	i
}
 80153c4:	46c0      	nop			@ (mov r8, r8)
  
  DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  //DBG_GPIO_SET(GPIOB, GPIO_PIN_15);
  //DBG_GPIO_RST(GPIOB, GPIO_PIN_15);
  status =circular_queue_add(&MsgTraceQueue,(uint8_t*)buf, bufSize);
 80153c6:	4b28      	ldr	r3, [pc, #160]	@ (8015468 <TraceSend+0x104>)
 80153c8:	191b      	adds	r3, r3, r4
 80153ca:	19db      	adds	r3, r3, r7
 80153cc:	881a      	ldrh	r2, [r3, #0]
 80153ce:	19b9      	adds	r1, r7, r6
 80153d0:	4b26      	ldr	r3, [pc, #152]	@ (801546c <TraceSend+0x108>)
 80153d2:	0018      	movs	r0, r3
 80153d4:	f7ff fa1b 	bl	801480e <circular_queue_add>
 80153d8:	0003      	movs	r3, r0
 80153da:	1979      	adds	r1, r7, r5
 80153dc:	600b      	str	r3, [r1, #0]
  
  if ((status==0 ) && (TracePeripheralReady==SET))
 80153de:	197b      	adds	r3, r7, r5
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d128      	bne.n	8015438 <TraceSend+0xd4>
 80153e6:	4b22      	ldr	r3, [pc, #136]	@ (8015470 <TraceSend+0x10c>)
 80153e8:	781b      	ldrb	r3, [r3, #0]
 80153ea:	b2db      	uxtb	r3, r3
 80153ec:	2b01      	cmp	r3, #1
 80153ee:	d123      	bne.n	8015438 <TraceSend+0xd4>
  {
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 80153f0:	1cba      	adds	r2, r7, #2
 80153f2:	1d39      	adds	r1, r7, #4
 80153f4:	4b1d      	ldr	r3, [pc, #116]	@ (801546c <TraceSend+0x108>)
 80153f6:	0018      	movs	r0, r3
 80153f8:	f7ff face 	bl	8014998 <circular_queue_get>
    TracePeripheralReady = RESET;
 80153fc:	4b1c      	ldr	r3, [pc, #112]	@ (8015470 <TraceSend+0x10c>)
 80153fe:	2200      	movs	r2, #0
 8015400:	701a      	strb	r2, [r3, #0]
    //DBG_GPIO_RST(GPIOB, GPIO_PIN_12);
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 8015402:	2101      	movs	r1, #1
 8015404:	2020      	movs	r0, #32
 8015406:	f7ff f94f 	bl	80146a8 <LPM_SetStopMode>
 801540a:	228c      	movs	r2, #140	@ 0x8c
 801540c:	0052      	lsls	r2, r2, #1
 801540e:	18bb      	adds	r3, r7, r2
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	2288      	movs	r2, #136	@ 0x88
 8015414:	0052      	lsls	r2, r2, #1
 8015416:	18b9      	adds	r1, r7, r2
 8015418:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801541a:	18bb      	adds	r3, r7, r2
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	f383 8810 	msr	PRIMASK, r3
}
 8015422:	46c0      	nop			@ (mov r8, r8)

    RESTORE_PRIMASK();
    OutputTrace(buffer, bufSize);
 8015424:	687a      	ldr	r2, [r7, #4]
 8015426:	4b10      	ldr	r3, [pc, #64]	@ (8015468 <TraceSend+0x104>)
 8015428:	191b      	adds	r3, r3, r4
 801542a:	19db      	adds	r3, r3, r7
 801542c:	881b      	ldrh	r3, [r3, #0]
 801542e:	0019      	movs	r1, r3
 8015430:	0010      	movs	r0, r2
 8015432:	f7ef fca1 	bl	8004d78 <vcom_Trace>
 8015436:	e00c      	b.n	8015452 <TraceSend+0xee>
 8015438:	238c      	movs	r3, #140	@ 0x8c
 801543a:	005b      	lsls	r3, r3, #1
 801543c:	18fb      	adds	r3, r7, r3
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	2286      	movs	r2, #134	@ 0x86
 8015442:	0052      	lsls	r2, r2, #1
 8015444:	18b9      	adds	r1, r7, r2
 8015446:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015448:	18bb      	adds	r3, r7, r2
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	f383 8810 	msr	PRIMASK, r3
}
 8015450:	46c0      	nop			@ (mov r8, r8)
  else
  {
    RESTORE_PRIMASK();
  }
  
  return status;
 8015452:	238e      	movs	r3, #142	@ 0x8e
 8015454:	005b      	lsls	r3, r3, #1
 8015456:	18fb      	adds	r3, r7, r3
 8015458:	681b      	ldr	r3, [r3, #0]
}
 801545a:	0018      	movs	r0, r3
 801545c:	46bd      	mov	sp, r7
 801545e:	b049      	add	sp, #292	@ 0x124
 8015460:	bcf0      	pop	{r4, r5, r6, r7}
 8015462:	bc08      	pop	{r3}
 8015464:	b004      	add	sp, #16
 8015466:	4718      	bx	r3
 8015468:	fffffee2 	.word	0xfffffee2
 801546c:	200013a4 	.word	0x200013a4
 8015470:	200000a8 	.word	0x200000a8

08015474 <Trace_TxCpltCallback>:
}

/* Private Functions Definition ------------------------------------------------------*/

static void Trace_TxCpltCallback(void)
{
 8015474:	b580      	push	{r7, lr}
 8015476:	b088      	sub	sp, #32
 8015478:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801547a:	f3ef 8310 	mrs	r3, PRIMASK
 801547e:	617b      	str	r3, [r7, #20]
  return(result);
 8015480:	697b      	ldr	r3, [r7, #20]
  int status;
  uint8_t* buffer;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8015482:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8015484:	b672      	cpsid	i
}
 8015486:	46c0      	nop			@ (mov r8, r8)

  DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  circular_queue_remove(&MsgTraceQueue);
 8015488:	4b19      	ldr	r3, [pc, #100]	@ (80154f0 <Trace_TxCpltCallback+0x7c>)
 801548a:	0018      	movs	r0, r3
 801548c:	f7ff fadc 	bl	8014a48 <circular_queue_remove>
  //DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
  //DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
  /* Sense if new data to be sent */
  status=circular_queue_sense(&MsgTraceQueue);
 8015490:	4b17      	ldr	r3, [pc, #92]	@ (80154f0 <Trace_TxCpltCallback+0x7c>)
 8015492:	0018      	movs	r0, r3
 8015494:	f7ff fb38 	bl	8014b08 <circular_queue_sense>
 8015498:	0003      	movs	r3, r0
 801549a:	61bb      	str	r3, [r7, #24]

  if ( status == 0) 
 801549c:	69bb      	ldr	r3, [r7, #24]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d114      	bne.n	80154cc <Trace_TxCpltCallback+0x58>
  {
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 80154a2:	1dba      	adds	r2, r7, #6
 80154a4:	2308      	movs	r3, #8
 80154a6:	18f9      	adds	r1, r7, r3
 80154a8:	4b11      	ldr	r3, [pc, #68]	@ (80154f0 <Trace_TxCpltCallback+0x7c>)
 80154aa:	0018      	movs	r0, r3
 80154ac:	f7ff fa74 	bl	8014998 <circular_queue_get>
 80154b0:	69fb      	ldr	r3, [r7, #28]
 80154b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80154b4:	693b      	ldr	r3, [r7, #16]
 80154b6:	f383 8810 	msr	PRIMASK, r3
}
 80154ba:	46c0      	nop			@ (mov r8, r8)
    RESTORE_PRIMASK();
    //DBG_GPIO_SET(GPIOB, GPIO_PIN_14);
    //DBG_GPIO_RST(GPIOB, GPIO_PIN_14);
    OutputTrace(buffer, bufSize);
 80154bc:	68ba      	ldr	r2, [r7, #8]
 80154be:	1dbb      	adds	r3, r7, #6
 80154c0:	881b      	ldrh	r3, [r3, #0]
 80154c2:	0019      	movs	r1, r3
 80154c4:	0010      	movs	r0, r2
 80154c6:	f7ef fc57 	bl	8004d78 <vcom_Trace>

    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
    TracePeripheralReady = SET;
    RESTORE_PRIMASK();
  }
}
 80154ca:	e00c      	b.n	80154e6 <Trace_TxCpltCallback+0x72>
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
 80154cc:	2100      	movs	r1, #0
 80154ce:	2020      	movs	r0, #32
 80154d0:	f7ff f8ea 	bl	80146a8 <LPM_SetStopMode>
    TracePeripheralReady = SET;
 80154d4:	4b07      	ldr	r3, [pc, #28]	@ (80154f4 <Trace_TxCpltCallback+0x80>)
 80154d6:	2201      	movs	r2, #1
 80154d8:	701a      	strb	r2, [r3, #0]
 80154da:	69fb      	ldr	r3, [r7, #28]
 80154dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	f383 8810 	msr	PRIMASK, r3
}
 80154e4:	46c0      	nop			@ (mov r8, r8)
}
 80154e6:	46c0      	nop			@ (mov r8, r8)
 80154e8:	46bd      	mov	sp, r7
 80154ea:	b008      	add	sp, #32
 80154ec:	bd80      	pop	{r7, pc}
 80154ee:	46c0      	nop			@ (mov r8, r8)
 80154f0:	200013a4 	.word	0x200013a4
 80154f4:	200000a8 	.word	0x200000a8

080154f8 <rand1>:
#define RAND_LOCAL_MAX 2147483647L

static uint32_t next = 1;

int32_t rand1( void )
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80154fc:	4b08      	ldr	r3, [pc, #32]	@ (8015520 <rand1+0x28>)
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	4a08      	ldr	r2, [pc, #32]	@ (8015524 <rand1+0x2c>)
 8015502:	4353      	muls	r3, r2
 8015504:	4a08      	ldr	r2, [pc, #32]	@ (8015528 <rand1+0x30>)
 8015506:	189a      	adds	r2, r3, r2
 8015508:	4b05      	ldr	r3, [pc, #20]	@ (8015520 <rand1+0x28>)
 801550a:	601a      	str	r2, [r3, #0]
 801550c:	4b04      	ldr	r3, [pc, #16]	@ (8015520 <rand1+0x28>)
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	4906      	ldr	r1, [pc, #24]	@ (801552c <rand1+0x34>)
 8015512:	0018      	movs	r0, r3
 8015514:	f7ea fe88 	bl	8000228 <__aeabi_uidivmod>
 8015518:	000b      	movs	r3, r1
}
 801551a:	0018      	movs	r0, r3
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}
 8015520:	200000ac 	.word	0x200000ac
 8015524:	41c64e6d 	.word	0x41c64e6d
 8015528:	00003039 	.word	0x00003039
 801552c:	7fffffff 	.word	0x7fffffff

08015530 <srand1>:

void srand1( uint32_t seed )
{
 8015530:	b580      	push	{r7, lr}
 8015532:	b082      	sub	sp, #8
 8015534:	af00      	add	r7, sp, #0
 8015536:	6078      	str	r0, [r7, #4]
    next = seed;
 8015538:	4b03      	ldr	r3, [pc, #12]	@ (8015548 <srand1+0x18>)
 801553a:	687a      	ldr	r2, [r7, #4]
 801553c:	601a      	str	r2, [r3, #0]
}
 801553e:	46c0      	nop			@ (mov r8, r8)
 8015540:	46bd      	mov	sp, r7
 8015542:	b002      	add	sp, #8
 8015544:	bd80      	pop	{r7, pc}
 8015546:	46c0      	nop			@ (mov r8, r8)
 8015548:	200000ac 	.word	0x200000ac

0801554c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801554c:	b580      	push	{r7, lr}
 801554e:	b082      	sub	sp, #8
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
 8015554:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8015556:	f7ff ffcf 	bl	80154f8 <rand1>
 801555a:	683a      	ldr	r2, [r7, #0]
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	1ad3      	subs	r3, r2, r3
 8015560:	3301      	adds	r3, #1
 8015562:	0019      	movs	r1, r3
 8015564:	f7ea ff4a 	bl	80003fc <__aeabi_idivmod>
 8015568:	000b      	movs	r3, r1
 801556a:	001a      	movs	r2, r3
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	18d3      	adds	r3, r2, r3
}
 8015570:	0018      	movs	r0, r3
 8015572:	46bd      	mov	sp, r7
 8015574:	b002      	add	sp, #8
 8015576:	bd80      	pop	{r7, pc}

08015578 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b084      	sub	sp, #16
 801557c:	af00      	add	r7, sp, #0
 801557e:	60f8      	str	r0, [r7, #12]
 8015580:	60b9      	str	r1, [r7, #8]
 8015582:	1dbb      	adds	r3, r7, #6
 8015584:	801a      	strh	r2, [r3, #0]
    while( size-- )
 8015586:	e007      	b.n	8015598 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8015588:	68ba      	ldr	r2, [r7, #8]
 801558a:	1c53      	adds	r3, r2, #1
 801558c:	60bb      	str	r3, [r7, #8]
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	1c59      	adds	r1, r3, #1
 8015592:	60f9      	str	r1, [r7, #12]
 8015594:	7812      	ldrb	r2, [r2, #0]
 8015596:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8015598:	1dbb      	adds	r3, r7, #6
 801559a:	881b      	ldrh	r3, [r3, #0]
 801559c:	1dba      	adds	r2, r7, #6
 801559e:	1e59      	subs	r1, r3, #1
 80155a0:	8011      	strh	r1, [r2, #0]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d1f0      	bne.n	8015588 <memcpy1+0x10>
    }
}
 80155a6:	46c0      	nop			@ (mov r8, r8)
 80155a8:	46c0      	nop			@ (mov r8, r8)
 80155aa:	46bd      	mov	sp, r7
 80155ac:	b004      	add	sp, #16
 80155ae:	bd80      	pop	{r7, pc}

080155b0 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b084      	sub	sp, #16
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	60f8      	str	r0, [r7, #12]
 80155b8:	60b9      	str	r1, [r7, #8]
 80155ba:	1dbb      	adds	r3, r7, #6
 80155bc:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
 80155be:	1dbb      	adds	r3, r7, #6
 80155c0:	881b      	ldrh	r3, [r3, #0]
 80155c2:	3b01      	subs	r3, #1
 80155c4:	68fa      	ldr	r2, [r7, #12]
 80155c6:	18d3      	adds	r3, r2, r3
 80155c8:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80155ca:	e007      	b.n	80155dc <memcpyr+0x2c>
    {
        *dst-- = *src++;
 80155cc:	68ba      	ldr	r2, [r7, #8]
 80155ce:	1c53      	adds	r3, r2, #1
 80155d0:	60bb      	str	r3, [r7, #8]
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	1e59      	subs	r1, r3, #1
 80155d6:	60f9      	str	r1, [r7, #12]
 80155d8:	7812      	ldrb	r2, [r2, #0]
 80155da:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80155dc:	1dbb      	adds	r3, r7, #6
 80155de:	881b      	ldrh	r3, [r3, #0]
 80155e0:	1dba      	adds	r2, r7, #6
 80155e2:	1e59      	subs	r1, r3, #1
 80155e4:	8011      	strh	r1, [r2, #0]
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d1f0      	bne.n	80155cc <memcpyr+0x1c>
    }
}
 80155ea:	46c0      	nop			@ (mov r8, r8)
 80155ec:	46c0      	nop			@ (mov r8, r8)
 80155ee:	46bd      	mov	sp, r7
 80155f0:	b004      	add	sp, #16
 80155f2:	bd80      	pop	{r7, pc}

080155f4 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b082      	sub	sp, #8
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	6078      	str	r0, [r7, #4]
 80155fc:	0008      	movs	r0, r1
 80155fe:	0011      	movs	r1, r2
 8015600:	1cfb      	adds	r3, r7, #3
 8015602:	1c02      	adds	r2, r0, #0
 8015604:	701a      	strb	r2, [r3, #0]
 8015606:	003b      	movs	r3, r7
 8015608:	1c0a      	adds	r2, r1, #0
 801560a:	801a      	strh	r2, [r3, #0]
    while( size-- )
 801560c:	e005      	b.n	801561a <memset1+0x26>
    {
        *dst++ = value;
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	1c5a      	adds	r2, r3, #1
 8015612:	607a      	str	r2, [r7, #4]
 8015614:	1cfa      	adds	r2, r7, #3
 8015616:	7812      	ldrb	r2, [r2, #0]
 8015618:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801561a:	003b      	movs	r3, r7
 801561c:	881b      	ldrh	r3, [r3, #0]
 801561e:	003a      	movs	r2, r7
 8015620:	1e59      	subs	r1, r3, #1
 8015622:	8011      	strh	r1, [r2, #0]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d1f2      	bne.n	801560e <memset1+0x1a>
    }
}
 8015628:	46c0      	nop			@ (mov r8, r8)
 801562a:	46c0      	nop			@ (mov r8, r8)
 801562c:	46bd      	mov	sp, r7
 801562e:	b002      	add	sp, #8
 8015630:	bd80      	pop	{r7, pc}
	...

08015634 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015634:	b580      	push	{r7, lr}
 8015636:	b082      	sub	sp, #8
 8015638:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801563a:	1dfb      	adds	r3, r7, #7
 801563c:	2200      	movs	r2, #0
 801563e:	701a      	strb	r2, [r3, #0]
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8015640:	4b0b      	ldr	r3, [pc, #44]	@ (8015670 <HAL_Init+0x3c>)
 8015642:	681a      	ldr	r2, [r3, #0]
 8015644:	4b0a      	ldr	r3, [pc, #40]	@ (8015670 <HAL_Init+0x3c>)
 8015646:	2102      	movs	r1, #2
 8015648:	430a      	orrs	r2, r1
 801564a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801564c:	2003      	movs	r0, #3
 801564e:	f7ed fcab 	bl	8002fa8 <HAL_InitTick>
 8015652:	1e03      	subs	r3, r0, #0
 8015654:	d003      	beq.n	801565e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8015656:	1dfb      	adds	r3, r7, #7
 8015658:	2201      	movs	r2, #1
 801565a:	701a      	strb	r2, [r3, #0]
 801565c:	e001      	b.n	8015662 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801565e:	f7ed fcb9 	bl	8002fd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8015662:	1dfb      	adds	r3, r7, #7
 8015664:	781b      	ldrb	r3, [r3, #0]
}
 8015666:	0018      	movs	r0, r3
 8015668:	46bd      	mov	sp, r7
 801566a:	b002      	add	sp, #8
 801566c:	bd80      	pop	{r7, pc}
 801566e:	46c0      	nop			@ (mov r8, r8)
 8015670:	40022000 	.word	0x40022000

08015674 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015674:	b580      	push	{r7, lr}
 8015676:	af00      	add	r7, sp, #0
  uwTick++;
 8015678:	4b03      	ldr	r3, [pc, #12]	@ (8015688 <HAL_IncTick+0x14>)
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	1c5a      	adds	r2, r3, #1
 801567e:	4b02      	ldr	r3, [pc, #8]	@ (8015688 <HAL_IncTick+0x14>)
 8015680:	601a      	str	r2, [r3, #0]
}
 8015682:	46c0      	nop			@ (mov r8, r8)
 8015684:	46bd      	mov	sp, r7
 8015686:	bd80      	pop	{r7, pc}
 8015688:	200014b4 	.word	0x200014b4

0801568c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801568c:	b580      	push	{r7, lr}
 801568e:	af00      	add	r7, sp, #0
  return uwTick;
 8015690:	4b02      	ldr	r3, [pc, #8]	@ (801569c <HAL_GetTick+0x10>)
 8015692:	681b      	ldr	r3, [r3, #0]
}
 8015694:	0018      	movs	r0, r3
 8015696:	46bd      	mov	sp, r7
 8015698:	bd80      	pop	{r7, pc}
 801569a:	46c0      	nop			@ (mov r8, r8)
 801569c:	200014b4 	.word	0x200014b4

080156a0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80156a0:	b580      	push	{r7, lr}
 80156a2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80156a4:	4b04      	ldr	r3, [pc, #16]	@ (80156b8 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 80156a6:	685a      	ldr	r2, [r3, #4]
 80156a8:	4b03      	ldr	r3, [pc, #12]	@ (80156b8 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 80156aa:	2101      	movs	r1, #1
 80156ac:	430a      	orrs	r2, r1
 80156ae:	605a      	str	r2, [r3, #4]
}
 80156b0:	46c0      	nop			@ (mov r8, r8)
 80156b2:	46bd      	mov	sp, r7
 80156b4:	bd80      	pop	{r7, pc}
 80156b6:	46c0      	nop			@ (mov r8, r8)
 80156b8:	40015800 	.word	0x40015800

080156bc <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80156c0:	4b04      	ldr	r3, [pc, #16]	@ (80156d4 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80156c2:	685a      	ldr	r2, [r3, #4]
 80156c4:	4b03      	ldr	r3, [pc, #12]	@ (80156d4 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80156c6:	2102      	movs	r1, #2
 80156c8:	430a      	orrs	r2, r1
 80156ca:	605a      	str	r2, [r3, #4]
}
 80156cc:	46c0      	nop			@ (mov r8, r8)
 80156ce:	46bd      	mov	sp, r7
 80156d0:	bd80      	pop	{r7, pc}
 80156d2:	46c0      	nop			@ (mov r8, r8)
 80156d4:	40015800 	.word	0x40015800

080156d8 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80156dc:	4b04      	ldr	r3, [pc, #16]	@ (80156f0 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80156de:	685a      	ldr	r2, [r3, #4]
 80156e0:	4b03      	ldr	r3, [pc, #12]	@ (80156f0 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80156e2:	2104      	movs	r1, #4
 80156e4:	430a      	orrs	r2, r1
 80156e6:	605a      	str	r2, [r3, #4]
}
 80156e8:	46c0      	nop			@ (mov r8, r8)
 80156ea:	46bd      	mov	sp, r7
 80156ec:	bd80      	pop	{r7, pc}
 80156ee:	46c0      	nop			@ (mov r8, r8)
 80156f0:	40015800 	.word	0x40015800

080156f4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b082      	sub	sp, #8
 80156f8:	af00      	add	r7, sp, #0
 80156fa:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d101      	bne.n	8015706 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8015702:	2301      	movs	r3, #1
 8015704:	e159      	b.n	80159ba <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801570a:	2b00      	cmp	r3, #0
 801570c:	d10a      	bne.n	8015724 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	2200      	movs	r2, #0
 8015712:	659a      	str	r2, [r3, #88]	@ 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	2250      	movs	r2, #80	@ 0x50
 8015718:	2100      	movs	r1, #0
 801571a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	0018      	movs	r0, r3
 8015720:	f000 f9f8 	bl	8015b14 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015728:	2210      	movs	r2, #16
 801572a:	4013      	ands	r3, r2
 801572c:	2b10      	cmp	r3, #16
 801572e:	d005      	beq.n	801573c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	689b      	ldr	r3, [r3, #8]
 8015736:	2204      	movs	r2, #4
 8015738:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 801573a:	d00b      	beq.n	8015754 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015740:	2210      	movs	r2, #16
 8015742:	431a      	orrs	r2, r3
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	655a      	str	r2, [r3, #84]	@ 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	2250      	movs	r2, #80	@ 0x50
 801574c:	2100      	movs	r1, #0
 801574e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8015750:	2301      	movs	r3, #1
 8015752:	e132      	b.n	80159ba <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015758:	4a9a      	ldr	r2, [pc, #616]	@ (80159c4 <HAL_ADC_Init+0x2d0>)
 801575a:	4013      	ands	r3, r2
 801575c:	2202      	movs	r2, #2
 801575e:	431a      	orrs	r2, r3
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	689b      	ldr	r3, [r3, #8]
 801576a:	2203      	movs	r2, #3
 801576c:	4013      	ands	r3, r2
 801576e:	2b01      	cmp	r3, #1
 8015770:	d108      	bne.n	8015784 <HAL_ADC_Init+0x90>
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	2201      	movs	r2, #1
 801577a:	4013      	ands	r3, r2
 801577c:	2b01      	cmp	r3, #1
 801577e:	d101      	bne.n	8015784 <HAL_ADC_Init+0x90>
 8015780:	2301      	movs	r3, #1
 8015782:	e000      	b.n	8015786 <HAL_ADC_Init+0x92>
 8015784:	2300      	movs	r3, #0
 8015786:	2b00      	cmp	r3, #0
 8015788:	d149      	bne.n	801581e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	685a      	ldr	r2, [r3, #4]
 801578e:	23c0      	movs	r3, #192	@ 0xc0
 8015790:	061b      	lsls	r3, r3, #24
 8015792:	429a      	cmp	r2, r3
 8015794:	d00b      	beq.n	80157ae <HAL_ADC_Init+0xba>
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	685a      	ldr	r2, [r3, #4]
 801579a:	2380      	movs	r3, #128	@ 0x80
 801579c:	05db      	lsls	r3, r3, #23
 801579e:	429a      	cmp	r2, r3
 80157a0:	d005      	beq.n	80157ae <HAL_ADC_Init+0xba>
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	685a      	ldr	r2, [r3, #4]
 80157a6:	2380      	movs	r3, #128	@ 0x80
 80157a8:	061b      	lsls	r3, r3, #24
 80157aa:	429a      	cmp	r2, r3
 80157ac:	d111      	bne.n	80157d2 <HAL_ADC_Init+0xde>
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	691a      	ldr	r2, [r3, #16]
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	0092      	lsls	r2, r2, #2
 80157ba:	0892      	lsrs	r2, r2, #2
 80157bc:	611a      	str	r2, [r3, #16]
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	6919      	ldr	r1, [r3, #16]
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	685a      	ldr	r2, [r3, #4]
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	430a      	orrs	r2, r1
 80157ce:	611a      	str	r2, [r3, #16]
 80157d0:	e014      	b.n	80157fc <HAL_ADC_Init+0x108>
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	691a      	ldr	r2, [r3, #16]
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	0092      	lsls	r2, r2, #2
 80157de:	0892      	lsrs	r2, r2, #2
 80157e0:	611a      	str	r2, [r3, #16]
 80157e2:	4b79      	ldr	r3, [pc, #484]	@ (80159c8 <HAL_ADC_Init+0x2d4>)
 80157e4:	681a      	ldr	r2, [r3, #0]
 80157e6:	4b78      	ldr	r3, [pc, #480]	@ (80159c8 <HAL_ADC_Init+0x2d4>)
 80157e8:	4978      	ldr	r1, [pc, #480]	@ (80159cc <HAL_ADC_Init+0x2d8>)
 80157ea:	400a      	ands	r2, r1
 80157ec:	601a      	str	r2, [r3, #0]
 80157ee:	4b76      	ldr	r3, [pc, #472]	@ (80159c8 <HAL_ADC_Init+0x2d4>)
 80157f0:	6819      	ldr	r1, [r3, #0]
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	685a      	ldr	r2, [r3, #4]
 80157f6:	4b74      	ldr	r3, [pc, #464]	@ (80159c8 <HAL_ADC_Init+0x2d4>)
 80157f8:	430a      	orrs	r2, r1
 80157fa:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	68da      	ldr	r2, [r3, #12]
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	2118      	movs	r1, #24
 8015808:	438a      	bics	r2, r1
 801580a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	68d9      	ldr	r1, [r3, #12]
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	689a      	ldr	r2, [r3, #8]
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	430a      	orrs	r2, r1
 801581c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 801581e:	4b6a      	ldr	r3, [pc, #424]	@ (80159c8 <HAL_ADC_Init+0x2d4>)
 8015820:	681a      	ldr	r2, [r3, #0]
 8015822:	4b69      	ldr	r3, [pc, #420]	@ (80159c8 <HAL_ADC_Init+0x2d4>)
 8015824:	496a      	ldr	r1, [pc, #424]	@ (80159d0 <HAL_ADC_Init+0x2dc>)
 8015826:	400a      	ands	r2, r1
 8015828:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 801582a:	4b67      	ldr	r3, [pc, #412]	@ (80159c8 <HAL_ADC_Init+0x2d4>)
 801582c:	6819      	ldr	r1, [r3, #0]
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015832:	065a      	lsls	r2, r3, #25
 8015834:	4b64      	ldr	r3, [pc, #400]	@ (80159c8 <HAL_ADC_Init+0x2d4>)
 8015836:	430a      	orrs	r2, r1
 8015838:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	689a      	ldr	r2, [r3, #8]
 8015840:	2380      	movs	r3, #128	@ 0x80
 8015842:	055b      	lsls	r3, r3, #21
 8015844:	4013      	ands	r3, r2
 8015846:	d108      	bne.n	801585a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	689a      	ldr	r2, [r3, #8]
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	2180      	movs	r1, #128	@ 0x80
 8015854:	0549      	lsls	r1, r1, #21
 8015856:	430a      	orrs	r2, r1
 8015858:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	68da      	ldr	r2, [r3, #12]
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	495b      	ldr	r1, [pc, #364]	@ (80159d4 <HAL_ADC_Init+0x2e0>)
 8015866:	400a      	ands	r2, r1
 8015868:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	68d9      	ldr	r1, [r3, #12]
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	691b      	ldr	r3, [r3, #16]
 8015878:	2b02      	cmp	r3, #2
 801587a:	d101      	bne.n	8015880 <HAL_ADC_Init+0x18c>
 801587c:	2304      	movs	r3, #4
 801587e:	e000      	b.n	8015882 <HAL_ADC_Init+0x18e>
 8015880:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8015882:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	2020      	movs	r0, #32
 8015888:	5c1b      	ldrb	r3, [r3, r0]
 801588a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 801588c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	202c      	movs	r0, #44	@ 0x2c
 8015892:	5c1b      	ldrb	r3, [r3, r0]
 8015894:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8015896:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 801589c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	699b      	ldr	r3, [r3, #24]
 80158a2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80158a4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	69db      	ldr	r3, [r3, #28]
 80158aa:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80158ac:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	430a      	orrs	r2, r1
 80158b4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80158ba:	23c2      	movs	r3, #194	@ 0xc2
 80158bc:	33ff      	adds	r3, #255	@ 0xff
 80158be:	429a      	cmp	r2, r3
 80158c0:	d00b      	beq.n	80158da <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	68d9      	ldr	r1, [r3, #12]
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80158d0:	431a      	orrs	r2, r3
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	430a      	orrs	r2, r1
 80158d8:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	2221      	movs	r2, #33	@ 0x21
 80158de:	5c9b      	ldrb	r3, [r3, r2]
 80158e0:	2b01      	cmp	r3, #1
 80158e2:	d11a      	bne.n	801591a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	2220      	movs	r2, #32
 80158e8:	5c9b      	ldrb	r3, [r3, r2]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d109      	bne.n	8015902 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	68da      	ldr	r2, [r3, #12]
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	2180      	movs	r1, #128	@ 0x80
 80158fa:	0249      	lsls	r1, r1, #9
 80158fc:	430a      	orrs	r2, r1
 80158fe:	60da      	str	r2, [r3, #12]
 8015900:	e00b      	b.n	801591a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015906:	2220      	movs	r2, #32
 8015908:	431a      	orrs	r2, r3
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015912:	2201      	movs	r2, #1
 8015914:	431a      	orrs	r2, r3
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801591e:	2b01      	cmp	r3, #1
 8015920:	d11f      	bne.n	8015962 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	691a      	ldr	r2, [r3, #16]
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	492a      	ldr	r1, [pc, #168]	@ (80159d8 <HAL_ADC_Init+0x2e4>)
 801592e:	400a      	ands	r2, r1
 8015930:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	6919      	ldr	r1, [r3, #16]
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               hadc->Init.Oversample.RightBitShift             |
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8015940:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8015946:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	430a      	orrs	r2, r1
 801594e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	691a      	ldr	r2, [r3, #16]
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	2101      	movs	r1, #1
 801595c:	430a      	orrs	r2, r1
 801595e:	611a      	str	r2, [r3, #16]
 8015960:	e00e      	b.n	8015980 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	691b      	ldr	r3, [r3, #16]
 8015968:	2201      	movs	r2, #1
 801596a:	4013      	ands	r3, r2
 801596c:	2b01      	cmp	r3, #1
 801596e:	d107      	bne.n	8015980 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	691a      	ldr	r2, [r3, #16]
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	2101      	movs	r1, #1
 801597c:	438a      	bics	r2, r1
 801597e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	695a      	ldr	r2, [r3, #20]
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	2107      	movs	r1, #7
 801598c:	438a      	bics	r2, r1
 801598e:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	6959      	ldr	r1, [r3, #20]
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	430a      	orrs	r2, r1
 80159a0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	2200      	movs	r2, #0
 80159a6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80159ac:	2203      	movs	r2, #3
 80159ae:	4393      	bics	r3, r2
 80159b0:	2201      	movs	r2, #1
 80159b2:	431a      	orrs	r2, r3
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80159b8:	2300      	movs	r3, #0
}
 80159ba:	0018      	movs	r0, r3
 80159bc:	46bd      	mov	sp, r7
 80159be:	b002      	add	sp, #8
 80159c0:	bd80      	pop	{r7, pc}
 80159c2:	46c0      	nop			@ (mov r8, r8)
 80159c4:	fffffefd 	.word	0xfffffefd
 80159c8:	40012708 	.word	0x40012708
 80159cc:	ffc3ffff 	.word	0xffc3ffff
 80159d0:	fdffffff 	.word	0xfdffffff
 80159d4:	fffe0219 	.word	0xfffe0219
 80159d8:	fffffc03 	.word	0xfffffc03

080159dc <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 80159dc:	b5b0      	push	{r4, r5, r7, lr}
 80159de:	b084      	sub	sp, #16
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80159e4:	230f      	movs	r3, #15
 80159e6:	18fb      	adds	r3, r7, r3
 80159e8:	2200      	movs	r2, #0
 80159ea:	701a      	strb	r2, [r3, #0]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d101      	bne.n	80159f6 <HAL_ADC_DeInit+0x1a>
  {
    return HAL_ERROR;
 80159f2:	2301      	movs	r3, #1
 80159f4:	e07d      	b.n	8015af2 <HAL_ADC_DeInit+0x116>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80159fa:	2202      	movs	r2, #2
 80159fc:	431a      	orrs	r2, r3
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	655a      	str	r2, [r3, #84]	@ 0x54
  
  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8015a02:	250f      	movs	r5, #15
 8015a04:	197c      	adds	r4, r7, r5
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	0018      	movs	r0, r3
 8015a0a:	f000 facf 	bl	8015fac <ADC_ConversionStop>
 8015a0e:	0003      	movs	r3, r0
 8015a10:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8015a12:	197b      	adds	r3, r7, r5
 8015a14:	781b      	ldrb	r3, [r3, #0]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d10d      	bne.n	8015a36 <HAL_ADC_DeInit+0x5a>
  {   
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8015a1a:	197c      	adds	r4, r7, r5
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	0018      	movs	r0, r3
 8015a20:	f000 fa64 	bl	8015eec <ADC_Disable>
 8015a24:	0003      	movs	r3, r0
 8015a26:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status != HAL_ERROR)
 8015a28:	197b      	adds	r3, r7, r5
 8015a2a:	781b      	ldrb	r3, [r3, #0]
 8015a2c:	2b01      	cmp	r3, #1
 8015a2e:	d002      	beq.n	8015a36 <HAL_ADC_DeInit+0x5a>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	2201      	movs	r2, #1
 8015a34:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status != HAL_ERROR)
 8015a36:	230f      	movs	r3, #15
 8015a38:	18fb      	adds	r3, r7, r3
 8015a3a:	781b      	ldrb	r3, [r3, #0]
 8015a3c:	2b01      	cmp	r3, #1
 8015a3e:	d051      	beq.n	8015ae4 <HAL_ADC_DeInit+0x108>
  {
    
    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	685a      	ldr	r2, [r3, #4]
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	492c      	ldr	r1, [pc, #176]	@ (8015afc <HAL_ADC_DeInit+0x120>)
 8015a4c:	400a      	ands	r2, r1
 8015a4e:	605a      	str	r2, [r3, #4]
                                ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP ));
  
        
    /* Reset register ISR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	4a2a      	ldr	r2, [pc, #168]	@ (8015b00 <HAL_ADC_DeInit+0x124>)
 8015a56:	601a      	str	r2, [r3, #0]
    
    /* Reset register CR */
    /* Disable voltage regulator */
    /* Note: Regulator disable useful for power saving */
    /* Reset ADVREGEN bit */
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	689a      	ldr	r2, [r3, #8]
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	4928      	ldr	r1, [pc, #160]	@ (8015b04 <HAL_ADC_DeInit+0x128>)
 8015a64:	400a      	ands	r2, r1
 8015a66:	609a      	str	r2, [r3, #8]
    
    /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable */
    /* No action */
    
    /* Reset register CFGR1 */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	68da      	ldr	r2, [r3, #12]
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	4925      	ldr	r1, [pc, #148]	@ (8015b08 <HAL_ADC_DeInit+0x12c>)
 8015a74:	400a      	ands	r2, r1
 8015a76:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
                               ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
                               ADC_CFGR1_SCANDIR| ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);
  
    /* Reset register CFGR2 */
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	691a      	ldr	r2, [r3, #16]
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	4922      	ldr	r1, [pc, #136]	@ (8015b0c <HAL_ADC_DeInit+0x130>)
 8015a84:	400a      	ands	r2, r1
 8015a86:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE );
  
    
    /* Reset register SMPR */
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	695a      	ldr	r2, [r3, #20]
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	2107      	movs	r1, #7
 8015a94:	438a      	bics	r2, r1
 8015a96:	615a      	str	r2, [r3, #20]
    
    /* Reset register TR */
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	6a1a      	ldr	r2, [r3, #32]
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	491b      	ldr	r1, [pc, #108]	@ (8015b10 <HAL_ADC_DeInit+0x134>)
 8015aa4:	400a      	ands	r2, r1
 8015aa6:	621a      	str	r2, [r3, #32]
    
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	22b4      	movs	r2, #180	@ 0xb4
 8015aae:	589a      	ldr	r2, [r3, r2]
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	217f      	movs	r1, #127	@ 0x7f
 8015ab6:	438a      	bics	r2, r1
 8015ab8:	21b4      	movs	r1, #180	@ 0xb4
 8015aba:	505a      	str	r2, [r3, r1]
    
    /* Reset register DR */
    /* bits in access mode read only, no direct reset applicable*/
  
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	22b4      	movs	r2, #180	@ 0xb4
 8015ac2:	589a      	ldr	r2, [r3, r2]
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	217f      	movs	r1, #127	@ 0x7f
 8015aca:	438a      	bics	r2, r1
 8015acc:	21b4      	movs	r1, #180	@ 0xb4
 8015ace:	505a      	str	r2, [r3, r1]
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	0018      	movs	r0, r3
 8015ad4:	f000 f826 	bl	8015b24 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	2200      	movs	r2, #0
 8015adc:	659a      	str	r2, [r3, #88]	@ 0x58
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	2250      	movs	r2, #80	@ 0x50
 8015ae8:	2100      	movs	r1, #0
 8015aea:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8015aec:	230f      	movs	r3, #15
 8015aee:	18fb      	adds	r3, r7, r3
 8015af0:	781b      	ldrb	r3, [r3, #0]
}
 8015af2:	0018      	movs	r0, r3
 8015af4:	46bd      	mov	sp, r7
 8015af6:	b004      	add	sp, #16
 8015af8:	bdb0      	pop	{r4, r5, r7, pc}
 8015afa:	46c0      	nop			@ (mov r8, r8)
 8015afc:	fffff760 	.word	0xfffff760
 8015b00:	0000089f 	.word	0x0000089f
 8015b04:	efffffff 	.word	0xefffffff
 8015b08:	833e0200 	.word	0x833e0200
 8015b0c:	3ffffc02 	.word	0x3ffffc02
 8015b10:	f000f000 	.word	0xf000f000

08015b14 <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8015b14:	b580      	push	{r7, lr}
 8015b16:	b082      	sub	sp, #8
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 8015b1c:	46c0      	nop			@ (mov r8, r8)
 8015b1e:	46bd      	mov	sp, r7
 8015b20:	b002      	add	sp, #8
 8015b22:	bd80      	pop	{r7, pc}

08015b24 <HAL_ADC_MspDeInit>:
  * @brief  DeInitialize the ADC MSP.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8015b24:	b580      	push	{r7, lr}
 8015b26:	b082      	sub	sp, #8
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspDeInit must be implemented in the user file.
   */ 
}
 8015b2c:	46c0      	nop			@ (mov r8, r8)
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	b002      	add	sp, #8
 8015b32:	bd80      	pop	{r7, pc}

08015b34 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8015b34:	b590      	push	{r4, r7, lr}
 8015b36:	b085      	sub	sp, #20
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8015b3c:	230f      	movs	r3, #15
 8015b3e:	18fb      	adds	r3, r7, r3
 8015b40:	2200      	movs	r2, #0
 8015b42:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	689b      	ldr	r3, [r3, #8]
 8015b4a:	2204      	movs	r2, #4
 8015b4c:	4013      	ands	r3, r2
 8015b4e:	d138      	bne.n	8015bc2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	2250      	movs	r2, #80	@ 0x50
 8015b54:	5c9b      	ldrb	r3, [r3, r2]
 8015b56:	2b01      	cmp	r3, #1
 8015b58:	d101      	bne.n	8015b5e <HAL_ADC_Start+0x2a>
 8015b5a:	2302      	movs	r3, #2
 8015b5c:	e038      	b.n	8015bd0 <HAL_ADC_Start+0x9c>
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	2250      	movs	r2, #80	@ 0x50
 8015b62:	2101      	movs	r1, #1
 8015b64:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	69db      	ldr	r3, [r3, #28]
 8015b6a:	2b01      	cmp	r3, #1
 8015b6c:	d007      	beq.n	8015b7e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8015b6e:	230f      	movs	r3, #15
 8015b70:	18fc      	adds	r4, r7, r3
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	0018      	movs	r0, r3
 8015b76:	f000 f959 	bl	8015e2c <ADC_Enable>
 8015b7a:	0003      	movs	r3, r0
 8015b7c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8015b7e:	230f      	movs	r3, #15
 8015b80:	18fb      	adds	r3, r7, r3
 8015b82:	781b      	ldrb	r3, [r3, #0]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d120      	bne.n	8015bca <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015b8c:	4a12      	ldr	r2, [pc, #72]	@ (8015bd8 <HAL_ADC_Start+0xa4>)
 8015b8e:	4013      	ands	r3, r2
 8015b90:	2280      	movs	r2, #128	@ 0x80
 8015b92:	0052      	lsls	r2, r2, #1
 8015b94:	431a      	orrs	r2, r3
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	2200      	movs	r2, #0
 8015b9e:	659a      	str	r2, [r3, #88]	@ 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	2250      	movs	r2, #80	@ 0x50
 8015ba4:	2100      	movs	r1, #0
 8015ba6:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	221c      	movs	r2, #28
 8015bae:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	689a      	ldr	r2, [r3, #8]
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	2104      	movs	r1, #4
 8015bbc:	430a      	orrs	r2, r1
 8015bbe:	609a      	str	r2, [r3, #8]
 8015bc0:	e003      	b.n	8015bca <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8015bc2:	230f      	movs	r3, #15
 8015bc4:	18fb      	adds	r3, r7, r3
 8015bc6:	2202      	movs	r2, #2
 8015bc8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8015bca:	230f      	movs	r3, #15
 8015bcc:	18fb      	adds	r3, r7, r3
 8015bce:	781b      	ldrb	r3, [r3, #0]
}
 8015bd0:	0018      	movs	r0, r3
 8015bd2:	46bd      	mov	sp, r7
 8015bd4:	b005      	add	sp, #20
 8015bd6:	bd90      	pop	{r4, r7, pc}
 8015bd8:	fffff0fe 	.word	0xfffff0fe

08015bdc <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	b084      	sub	sp, #16
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	6078      	str	r0, [r7, #4]
 8015be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8015be6:	2300      	movs	r3, #0
 8015be8:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8015bea:	2300      	movs	r3, #0
 8015bec:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	695b      	ldr	r3, [r3, #20]
 8015bf2:	2b08      	cmp	r3, #8
 8015bf4:	d102      	bne.n	8015bfc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8015bf6:	2308      	movs	r3, #8
 8015bf8:	60fb      	str	r3, [r7, #12]
 8015bfa:	e014      	b.n	8015c26 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	68db      	ldr	r3, [r3, #12]
 8015c02:	2201      	movs	r2, #1
 8015c04:	4013      	ands	r3, r2
 8015c06:	2b01      	cmp	r3, #1
 8015c08:	d10b      	bne.n	8015c22 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015c0e:	2220      	movs	r2, #32
 8015c10:	431a      	orrs	r2, r3
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	2250      	movs	r2, #80	@ 0x50
 8015c1a:	2100      	movs	r1, #0
 8015c1c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8015c1e:	2301      	movs	r3, #1
 8015c20:	e06c      	b.n	8015cfc <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8015c22:	230c      	movs	r3, #12
 8015c24:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8015c26:	f7ff fd31 	bl	801568c <HAL_GetTick>
 8015c2a:	0003      	movs	r3, r0
 8015c2c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8015c2e:	e019      	b.n	8015c64 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8015c30:	683b      	ldr	r3, [r7, #0]
 8015c32:	3301      	adds	r3, #1
 8015c34:	d016      	beq.n	8015c64 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8015c36:	683b      	ldr	r3, [r7, #0]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d007      	beq.n	8015c4c <HAL_ADC_PollForConversion+0x70>
 8015c3c:	f7ff fd26 	bl	801568c <HAL_GetTick>
 8015c40:	0002      	movs	r2, r0
 8015c42:	68bb      	ldr	r3, [r7, #8]
 8015c44:	1ad3      	subs	r3, r2, r3
 8015c46:	683a      	ldr	r2, [r7, #0]
 8015c48:	429a      	cmp	r2, r3
 8015c4a:	d20b      	bcs.n	8015c64 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015c50:	2204      	movs	r2, #4
 8015c52:	431a      	orrs	r2, r3
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	2250      	movs	r2, #80	@ 0x50
 8015c5c:	2100      	movs	r1, #0
 8015c5e:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8015c60:	2303      	movs	r3, #3
 8015c62:	e04b      	b.n	8015cfc <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	68fa      	ldr	r2, [r7, #12]
 8015c6c:	4013      	ands	r3, r2
 8015c6e:	d0df      	beq.n	8015c30 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015c74:	2280      	movs	r2, #128	@ 0x80
 8015c76:	0092      	lsls	r2, r2, #2
 8015c78:	431a      	orrs	r2, r3
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	655a      	str	r2, [r3, #84]	@ 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	68da      	ldr	r2, [r3, #12]
 8015c84:	23c0      	movs	r3, #192	@ 0xc0
 8015c86:	011b      	lsls	r3, r3, #4
 8015c88:	4013      	ands	r3, r2
 8015c8a:	d12e      	bne.n	8015cea <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	2220      	movs	r2, #32
 8015c90:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d129      	bne.n	8015cea <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	2208      	movs	r2, #8
 8015c9e:	4013      	ands	r3, r2
 8015ca0:	2b08      	cmp	r3, #8
 8015ca2:	d122      	bne.n	8015cea <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	689b      	ldr	r3, [r3, #8]
 8015caa:	2204      	movs	r2, #4
 8015cac:	4013      	ands	r3, r2
 8015cae:	d110      	bne.n	8015cd2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	685a      	ldr	r2, [r3, #4]
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	210c      	movs	r1, #12
 8015cbc:	438a      	bics	r2, r1
 8015cbe:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015cc4:	4a0f      	ldr	r2, [pc, #60]	@ (8015d04 <HAL_ADC_PollForConversion+0x128>)
 8015cc6:	4013      	ands	r3, r2
 8015cc8:	2201      	movs	r2, #1
 8015cca:	431a      	orrs	r2, r3
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	655a      	str	r2, [r3, #84]	@ 0x54
 8015cd0:	e00b      	b.n	8015cea <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015cd6:	2220      	movs	r2, #32
 8015cd8:	431a      	orrs	r2, r3
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015ce2:	2201      	movs	r2, #1
 8015ce4:	431a      	orrs	r2, r3
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	659a      	str	r2, [r3, #88]	@ 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	699b      	ldr	r3, [r3, #24]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d103      	bne.n	8015cfa <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	220c      	movs	r2, #12
 8015cf8:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8015cfa:	2300      	movs	r3, #0
}
 8015cfc:	0018      	movs	r0, r3
 8015cfe:	46bd      	mov	sp, r7
 8015d00:	b004      	add	sp, #16
 8015d02:	bd80      	pop	{r7, pc}
 8015d04:	fffffefe 	.word	0xfffffefe

08015d08 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b082      	sub	sp, #8
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8015d16:	0018      	movs	r0, r3
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	b002      	add	sp, #8
 8015d1c:	bd80      	pop	{r7, pc}
	...

08015d20 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8015d20:	b580      	push	{r7, lr}
 8015d22:	b082      	sub	sp, #8
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	6078      	str	r0, [r7, #4]
 8015d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	2250      	movs	r2, #80	@ 0x50
 8015d2e:	5c9b      	ldrb	r3, [r3, r2]
 8015d30:	2b01      	cmp	r3, #1
 8015d32:	d101      	bne.n	8015d38 <HAL_ADC_ConfigChannel+0x18>
 8015d34:	2302      	movs	r3, #2
 8015d36:	e06c      	b.n	8015e12 <HAL_ADC_ConfigChannel+0xf2>
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	2250      	movs	r2, #80	@ 0x50
 8015d3c:	2101      	movs	r1, #1
 8015d3e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	689b      	ldr	r3, [r3, #8]
 8015d46:	2204      	movs	r2, #4
 8015d48:	4013      	ands	r3, r2
 8015d4a:	d00b      	beq.n	8015d64 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015d50:	2220      	movs	r2, #32
 8015d52:	431a      	orrs	r2, r3
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	2250      	movs	r2, #80	@ 0x50
 8015d5c:	2100      	movs	r1, #0
 8015d5e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8015d60:	2301      	movs	r3, #1
 8015d62:	e056      	b.n	8015e12 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8015d64:	683b      	ldr	r3, [r7, #0]
 8015d66:	685b      	ldr	r3, [r3, #4]
 8015d68:	4a2c      	ldr	r2, [pc, #176]	@ (8015e1c <HAL_ADC_ConfigChannel+0xfc>)
 8015d6a:	4293      	cmp	r3, r2
 8015d6c:	d028      	beq.n	8015dc0 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8015d74:	683b      	ldr	r3, [r7, #0]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	035b      	lsls	r3, r3, #13
 8015d7a:	0b5a      	lsrs	r2, r3, #13
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	430a      	orrs	r2, r1
 8015d82:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8015d84:	683b      	ldr	r3, [r7, #0]
 8015d86:	681a      	ldr	r2, [r3, #0]
 8015d88:	2380      	movs	r3, #128	@ 0x80
 8015d8a:	02db      	lsls	r3, r3, #11
 8015d8c:	4013      	ands	r3, r2
 8015d8e:	d009      	beq.n	8015da4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8015d90:	4b23      	ldr	r3, [pc, #140]	@ (8015e20 <HAL_ADC_ConfigChannel+0x100>)
 8015d92:	681a      	ldr	r2, [r3, #0]
 8015d94:	4b22      	ldr	r3, [pc, #136]	@ (8015e20 <HAL_ADC_ConfigChannel+0x100>)
 8015d96:	2180      	movs	r1, #128	@ 0x80
 8015d98:	0409      	lsls	r1, r1, #16
 8015d9a:	430a      	orrs	r2, r1
 8015d9c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8015d9e:	200a      	movs	r0, #10
 8015da0:	f000 f94a 	bl	8016038 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8015da4:	683b      	ldr	r3, [r7, #0]
 8015da6:	681a      	ldr	r2, [r3, #0]
 8015da8:	2380      	movs	r3, #128	@ 0x80
 8015daa:	029b      	lsls	r3, r3, #10
 8015dac:	4013      	ands	r3, r2
 8015dae:	d02b      	beq.n	8015e08 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8015db0:	4b1b      	ldr	r3, [pc, #108]	@ (8015e20 <HAL_ADC_ConfigChannel+0x100>)
 8015db2:	681a      	ldr	r2, [r3, #0]
 8015db4:	4b1a      	ldr	r3, [pc, #104]	@ (8015e20 <HAL_ADC_ConfigChannel+0x100>)
 8015db6:	2180      	movs	r1, #128	@ 0x80
 8015db8:	03c9      	lsls	r1, r1, #15
 8015dba:	430a      	orrs	r2, r1
 8015dbc:	601a      	str	r2, [r3, #0]
 8015dbe:	e023      	b.n	8015e08 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015dc6:	683b      	ldr	r3, [r7, #0]
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	035b      	lsls	r3, r3, #13
 8015dcc:	0b5b      	lsrs	r3, r3, #13
 8015dce:	43d9      	mvns	r1, r3
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	400a      	ands	r2, r1
 8015dd6:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8015dd8:	683b      	ldr	r3, [r7, #0]
 8015dda:	681a      	ldr	r2, [r3, #0]
 8015ddc:	2380      	movs	r3, #128	@ 0x80
 8015dde:	02db      	lsls	r3, r3, #11
 8015de0:	4013      	ands	r3, r2
 8015de2:	d005      	beq.n	8015df0 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8015de4:	4b0e      	ldr	r3, [pc, #56]	@ (8015e20 <HAL_ADC_ConfigChannel+0x100>)
 8015de6:	681a      	ldr	r2, [r3, #0]
 8015de8:	4b0d      	ldr	r3, [pc, #52]	@ (8015e20 <HAL_ADC_ConfigChannel+0x100>)
 8015dea:	490e      	ldr	r1, [pc, #56]	@ (8015e24 <HAL_ADC_ConfigChannel+0x104>)
 8015dec:	400a      	ands	r2, r1
 8015dee:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8015df0:	683b      	ldr	r3, [r7, #0]
 8015df2:	681a      	ldr	r2, [r3, #0]
 8015df4:	2380      	movs	r3, #128	@ 0x80
 8015df6:	029b      	lsls	r3, r3, #10
 8015df8:	4013      	ands	r3, r2
 8015dfa:	d005      	beq.n	8015e08 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8015dfc:	4b08      	ldr	r3, [pc, #32]	@ (8015e20 <HAL_ADC_ConfigChannel+0x100>)
 8015dfe:	681a      	ldr	r2, [r3, #0]
 8015e00:	4b07      	ldr	r3, [pc, #28]	@ (8015e20 <HAL_ADC_ConfigChannel+0x100>)
 8015e02:	4909      	ldr	r1, [pc, #36]	@ (8015e28 <HAL_ADC_ConfigChannel+0x108>)
 8015e04:	400a      	ands	r2, r1
 8015e06:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	2250      	movs	r2, #80	@ 0x50
 8015e0c:	2100      	movs	r1, #0
 8015e0e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8015e10:	2300      	movs	r3, #0
}
 8015e12:	0018      	movs	r0, r3
 8015e14:	46bd      	mov	sp, r7
 8015e16:	b002      	add	sp, #8
 8015e18:	bd80      	pop	{r7, pc}
 8015e1a:	46c0      	nop			@ (mov r8, r8)
 8015e1c:	00001001 	.word	0x00001001
 8015e20:	40012708 	.word	0x40012708
 8015e24:	ff7fffff 	.word	0xff7fffff
 8015e28:	ffbfffff 	.word	0xffbfffff

08015e2c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8015e2c:	b580      	push	{r7, lr}
 8015e2e:	b084      	sub	sp, #16
 8015e30:	af00      	add	r7, sp, #0
 8015e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8015e34:	2300      	movs	r3, #0
 8015e36:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	689b      	ldr	r3, [r3, #8]
 8015e3e:	2203      	movs	r2, #3
 8015e40:	4013      	ands	r3, r2
 8015e42:	2b01      	cmp	r3, #1
 8015e44:	d108      	bne.n	8015e58 <ADC_Enable+0x2c>
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	2201      	movs	r2, #1
 8015e4e:	4013      	ands	r3, r2
 8015e50:	2b01      	cmp	r3, #1
 8015e52:	d101      	bne.n	8015e58 <ADC_Enable+0x2c>
 8015e54:	2301      	movs	r3, #1
 8015e56:	e000      	b.n	8015e5a <ADC_Enable+0x2e>
 8015e58:	2300      	movs	r3, #0
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d13f      	bne.n	8015ede <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	689b      	ldr	r3, [r3, #8]
 8015e64:	4a20      	ldr	r2, [pc, #128]	@ (8015ee8 <ADC_Enable+0xbc>)
 8015e66:	4013      	ands	r3, r2
 8015e68:	d00d      	beq.n	8015e86 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015e6e:	2210      	movs	r2, #16
 8015e70:	431a      	orrs	r2, r3
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015e7a:	2201      	movs	r2, #1
 8015e7c:	431a      	orrs	r2, r3
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	659a      	str	r2, [r3, #88]	@ 0x58
      
      return HAL_ERROR;
 8015e82:	2301      	movs	r3, #1
 8015e84:	e02c      	b.n	8015ee0 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	689a      	ldr	r2, [r3, #8]
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	2101      	movs	r1, #1
 8015e92:	430a      	orrs	r2, r1
 8015e94:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8015e96:	2001      	movs	r0, #1
 8015e98:	f000 f8ce 	bl	8016038 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8015e9c:	f7ff fbf6 	bl	801568c <HAL_GetTick>
 8015ea0:	0003      	movs	r3, r0
 8015ea2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8015ea4:	e014      	b.n	8015ed0 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8015ea6:	f7ff fbf1 	bl	801568c <HAL_GetTick>
 8015eaa:	0002      	movs	r2, r0
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	1ad3      	subs	r3, r2, r3
 8015eb0:	2b0a      	cmp	r3, #10
 8015eb2:	d90d      	bls.n	8015ed0 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015eb8:	2210      	movs	r2, #16
 8015eba:	431a      	orrs	r2, r3
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015ec4:	2201      	movs	r2, #1
 8015ec6:	431a      	orrs	r2, r3
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	659a      	str	r2, [r3, #88]	@ 0x58
        
        return HAL_ERROR;
 8015ecc:	2301      	movs	r3, #1
 8015ece:	e007      	b.n	8015ee0 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	2201      	movs	r2, #1
 8015ed8:	4013      	ands	r3, r2
 8015eda:	2b01      	cmp	r3, #1
 8015edc:	d1e3      	bne.n	8015ea6 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8015ede:	2300      	movs	r3, #0
}
 8015ee0:	0018      	movs	r0, r3
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	b004      	add	sp, #16
 8015ee6:	bd80      	pop	{r7, pc}
 8015ee8:	80000017 	.word	0x80000017

08015eec <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b084      	sub	sp, #16
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	689b      	ldr	r3, [r3, #8]
 8015efe:	2203      	movs	r2, #3
 8015f00:	4013      	ands	r3, r2
 8015f02:	2b01      	cmp	r3, #1
 8015f04:	d108      	bne.n	8015f18 <ADC_Disable+0x2c>
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	2201      	movs	r2, #1
 8015f0e:	4013      	ands	r3, r2
 8015f10:	2b01      	cmp	r3, #1
 8015f12:	d101      	bne.n	8015f18 <ADC_Disable+0x2c>
 8015f14:	2301      	movs	r3, #1
 8015f16:	e000      	b.n	8015f1a <ADC_Disable+0x2e>
 8015f18:	2300      	movs	r3, #0
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d041      	beq.n	8015fa2 <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	689b      	ldr	r3, [r3, #8]
 8015f24:	2205      	movs	r2, #5
 8015f26:	4013      	ands	r3, r2
 8015f28:	2b01      	cmp	r3, #1
 8015f2a:	d110      	bne.n	8015f4e <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	689a      	ldr	r2, [r3, #8]
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	2102      	movs	r1, #2
 8015f38:	430a      	orrs	r2, r1
 8015f3a:	609a      	str	r2, [r3, #8]
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	2203      	movs	r2, #3
 8015f42:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8015f44:	f7ff fba2 	bl	801568c <HAL_GetTick>
 8015f48:	0003      	movs	r3, r0
 8015f4a:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8015f4c:	e022      	b.n	8015f94 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015f52:	2210      	movs	r2, #16
 8015f54:	431a      	orrs	r2, r3
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015f5e:	2201      	movs	r2, #1
 8015f60:	431a      	orrs	r2, r3
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8015f66:	2301      	movs	r3, #1
 8015f68:	e01c      	b.n	8015fa4 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8015f6a:	f7ff fb8f 	bl	801568c <HAL_GetTick>
 8015f6e:	0002      	movs	r2, r0
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	1ad3      	subs	r3, r2, r3
 8015f74:	2b0a      	cmp	r3, #10
 8015f76:	d90d      	bls.n	8015f94 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015f7c:	2210      	movs	r2, #16
 8015f7e:	431a      	orrs	r2, r3
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015f88:	2201      	movs	r2, #1
 8015f8a:	431a      	orrs	r2, r3
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	659a      	str	r2, [r3, #88]	@ 0x58
        
        return HAL_ERROR;
 8015f90:	2301      	movs	r3, #1
 8015f92:	e007      	b.n	8015fa4 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	689b      	ldr	r3, [r3, #8]
 8015f9a:	2201      	movs	r2, #1
 8015f9c:	4013      	ands	r3, r2
 8015f9e:	2b01      	cmp	r3, #1
 8015fa0:	d0e3      	beq.n	8015f6a <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8015fa2:	2300      	movs	r3, #0
}
 8015fa4:	0018      	movs	r0, r3
 8015fa6:	46bd      	mov	sp, r7
 8015fa8:	b004      	add	sp, #16
 8015faa:	bd80      	pop	{r7, pc}

08015fac <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b084      	sub	sp, #16
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8015fb4:	2300      	movs	r3, #0
 8015fb6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	689b      	ldr	r3, [r3, #8]
 8015fbe:	2204      	movs	r2, #4
 8015fc0:	4013      	ands	r3, r2
 8015fc2:	d034      	beq.n	801602e <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	689b      	ldr	r3, [r3, #8]
 8015fca:	2204      	movs	r2, #4
 8015fcc:	4013      	ands	r3, r2
 8015fce:	2b04      	cmp	r3, #4
 8015fd0:	d10d      	bne.n	8015fee <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	689b      	ldr	r3, [r3, #8]
 8015fd8:	2202      	movs	r2, #2
 8015fda:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8015fdc:	d107      	bne.n	8015fee <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	689a      	ldr	r2, [r3, #8]
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	2110      	movs	r1, #16
 8015fea:	430a      	orrs	r2, r1
 8015fec:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8015fee:	f7ff fb4d 	bl	801568c <HAL_GetTick>
 8015ff2:	0003      	movs	r3, r0
 8015ff4:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8015ff6:	e014      	b.n	8016022 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8015ff8:	f7ff fb48 	bl	801568c <HAL_GetTick>
 8015ffc:	0002      	movs	r2, r0
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	1ad3      	subs	r3, r2, r3
 8016002:	2b0a      	cmp	r3, #10
 8016004:	d90d      	bls.n	8016022 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801600a:	2210      	movs	r2, #16
 801600c:	431a      	orrs	r2, r3
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	655a      	str	r2, [r3, #84]	@ 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016016:	2201      	movs	r2, #1
 8016018:	431a      	orrs	r2, r3
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	659a      	str	r2, [r3, #88]	@ 0x58
        
        return HAL_ERROR;
 801601e:	2301      	movs	r3, #1
 8016020:	e006      	b.n	8016030 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	689b      	ldr	r3, [r3, #8]
 8016028:	2204      	movs	r2, #4
 801602a:	4013      	ands	r3, r2
 801602c:	d1e4      	bne.n	8015ff8 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 801602e:	2300      	movs	r3, #0
}
 8016030:	0018      	movs	r0, r3
 8016032:	46bd      	mov	sp, r7
 8016034:	b004      	add	sp, #16
 8016036:	bd80      	pop	{r7, pc}

08016038 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8016038:	b580      	push	{r7, lr}
 801603a:	b084      	sub	sp, #16
 801603c:	af00      	add	r7, sp, #0
 801603e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8016040:	4b0b      	ldr	r3, [pc, #44]	@ (8016070 <ADC_DelayMicroSecond+0x38>)
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	490b      	ldr	r1, [pc, #44]	@ (8016074 <ADC_DelayMicroSecond+0x3c>)
 8016046:	0018      	movs	r0, r3
 8016048:	f7ea f868 	bl	800011c <__udivsi3>
 801604c:	0003      	movs	r3, r0
 801604e:	001a      	movs	r2, r3
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	4353      	muls	r3, r2
 8016054:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8016056:	e002      	b.n	801605e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	3b01      	subs	r3, #1
 801605c:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d1f9      	bne.n	8016058 <ADC_DelayMicroSecond+0x20>
  } 
}
 8016064:	46c0      	nop			@ (mov r8, r8)
 8016066:	46c0      	nop			@ (mov r8, r8)
 8016068:	46bd      	mov	sp, r7
 801606a:	b004      	add	sp, #16
 801606c:	bd80      	pop	{r7, pc}
 801606e:	46c0      	nop			@ (mov r8, r8)
 8016070:	20000070 	.word	0x20000070
 8016074:	000f4240 	.word	0x000f4240

08016078 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8016078:	b580      	push	{r7, lr}
 801607a:	b086      	sub	sp, #24
 801607c:	af00      	add	r7, sp, #0
 801607e:	6078      	str	r0, [r7, #4]
 8016080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8016082:	2317      	movs	r3, #23
 8016084:	18fb      	adds	r3, r7, r3
 8016086:	2200      	movs	r2, #0
 8016088:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 801608a:	2300      	movs	r3, #0
 801608c:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 801608e:	2300      	movs	r3, #0
 8016090:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	2250      	movs	r2, #80	@ 0x50
 8016096:	5c9b      	ldrb	r3, [r3, r2]
 8016098:	2b01      	cmp	r3, #1
 801609a:	d101      	bne.n	80160a0 <HAL_ADCEx_Calibration_Start+0x28>
 801609c:	2302      	movs	r3, #2
 801609e:	e07a      	b.n	8016196 <HAL_ADCEx_Calibration_Start+0x11e>
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	2250      	movs	r2, #80	@ 0x50
 80160a4:	2101      	movs	r1, #1
 80160a6:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	689b      	ldr	r3, [r3, #8]
 80160ae:	2203      	movs	r2, #3
 80160b0:	4013      	ands	r3, r2
 80160b2:	2b01      	cmp	r3, #1
 80160b4:	d108      	bne.n	80160c8 <HAL_ADCEx_Calibration_Start+0x50>
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	2201      	movs	r2, #1
 80160be:	4013      	ands	r3, r2
 80160c0:	2b01      	cmp	r3, #1
 80160c2:	d101      	bne.n	80160c8 <HAL_ADCEx_Calibration_Start+0x50>
 80160c4:	2301      	movs	r3, #1
 80160c6:	e000      	b.n	80160ca <HAL_ADCEx_Calibration_Start+0x52>
 80160c8:	2300      	movs	r3, #0
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d152      	bne.n	8016174 <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80160d2:	4a33      	ldr	r2, [pc, #204]	@ (80161a0 <HAL_ADCEx_Calibration_Start+0x128>)
 80160d4:	4013      	ands	r3, r2
 80160d6:	2202      	movs	r2, #2
 80160d8:	431a      	orrs	r2, r3
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	68db      	ldr	r3, [r3, #12]
 80160e4:	2203      	movs	r2, #3
 80160e6:	4013      	ands	r3, r2
 80160e8:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	68da      	ldr	r2, [r3, #12]
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	2103      	movs	r1, #3
 80160f6:	438a      	bics	r2, r1
 80160f8:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	689a      	ldr	r2, [r3, #8]
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	2180      	movs	r1, #128	@ 0x80
 8016106:	0609      	lsls	r1, r1, #24
 8016108:	430a      	orrs	r2, r1
 801610a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 801610c:	f7ff fabe 	bl	801568c <HAL_GetTick>
 8016110:	0003      	movs	r3, r0
 8016112:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8016114:	e014      	b.n	8016140 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8016116:	f7ff fab9 	bl	801568c <HAL_GetTick>
 801611a:	0002      	movs	r2, r0
 801611c:	693b      	ldr	r3, [r7, #16]
 801611e:	1ad3      	subs	r3, r2, r3
 8016120:	2b0a      	cmp	r3, #10
 8016122:	d90d      	bls.n	8016140 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016128:	2212      	movs	r2, #18
 801612a:	4393      	bics	r3, r2
 801612c:	2210      	movs	r2, #16
 801612e:	431a      	orrs	r2, r3
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	2250      	movs	r2, #80	@ 0x50
 8016138:	2100      	movs	r1, #0
 801613a:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 801613c:	2301      	movs	r3, #1
 801613e:	e02a      	b.n	8016196 <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	689b      	ldr	r3, [r3, #8]
 8016146:	0fdb      	lsrs	r3, r3, #31
 8016148:	07da      	lsls	r2, r3, #31
 801614a:	2380      	movs	r3, #128	@ 0x80
 801614c:	061b      	lsls	r3, r3, #24
 801614e:	429a      	cmp	r2, r3
 8016150:	d0e1      	beq.n	8016116 <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	68d9      	ldr	r1, [r3, #12]
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	68fa      	ldr	r2, [r7, #12]
 801615e:	430a      	orrs	r2, r1
 8016160:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016166:	2203      	movs	r2, #3
 8016168:	4393      	bics	r3, r2
 801616a:	2201      	movs	r2, #1
 801616c:	431a      	orrs	r2, r3
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	655a      	str	r2, [r3, #84]	@ 0x54
 8016172:	e009      	b.n	8016188 <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016178:	2220      	movs	r2, #32
 801617a:	431a      	orrs	r2, r3
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    tmp_hal_status = HAL_ERROR;
 8016180:	2317      	movs	r3, #23
 8016182:	18fb      	adds	r3, r7, r3
 8016184:	2201      	movs	r2, #1
 8016186:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	2250      	movs	r2, #80	@ 0x50
 801618c:	2100      	movs	r1, #0
 801618e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8016190:	2317      	movs	r3, #23
 8016192:	18fb      	adds	r3, r7, r3
 8016194:	781b      	ldrb	r3, [r3, #0]
}
 8016196:	0018      	movs	r0, r3
 8016198:	46bd      	mov	sp, r7
 801619a:	b006      	add	sp, #24
 801619c:	bd80      	pop	{r7, pc}
 801619e:	46c0      	nop			@ (mov r8, r8)
 80161a0:	fffffefd 	.word	0xfffffefd

080161a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80161a4:	b580      	push	{r7, lr}
 80161a6:	b082      	sub	sp, #8
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	0002      	movs	r2, r0
 80161ac:	1dfb      	adds	r3, r7, #7
 80161ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80161b0:	1dfb      	adds	r3, r7, #7
 80161b2:	781b      	ldrb	r3, [r3, #0]
 80161b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80161b6:	d809      	bhi.n	80161cc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80161b8:	1dfb      	adds	r3, r7, #7
 80161ba:	781b      	ldrb	r3, [r3, #0]
 80161bc:	001a      	movs	r2, r3
 80161be:	231f      	movs	r3, #31
 80161c0:	401a      	ands	r2, r3
 80161c2:	4b04      	ldr	r3, [pc, #16]	@ (80161d4 <__NVIC_EnableIRQ+0x30>)
 80161c4:	2101      	movs	r1, #1
 80161c6:	4091      	lsls	r1, r2
 80161c8:	000a      	movs	r2, r1
 80161ca:	601a      	str	r2, [r3, #0]
  }
}
 80161cc:	46c0      	nop			@ (mov r8, r8)
 80161ce:	46bd      	mov	sp, r7
 80161d0:	b002      	add	sp, #8
 80161d2:	bd80      	pop	{r7, pc}
 80161d4:	e000e100 	.word	0xe000e100

080161d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80161d8:	b590      	push	{r4, r7, lr}
 80161da:	b083      	sub	sp, #12
 80161dc:	af00      	add	r7, sp, #0
 80161de:	0002      	movs	r2, r0
 80161e0:	6039      	str	r1, [r7, #0]
 80161e2:	1dfb      	adds	r3, r7, #7
 80161e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80161e6:	1dfb      	adds	r3, r7, #7
 80161e8:	781b      	ldrb	r3, [r3, #0]
 80161ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80161ec:	d828      	bhi.n	8016240 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80161ee:	4a2f      	ldr	r2, [pc, #188]	@ (80162ac <__NVIC_SetPriority+0xd4>)
 80161f0:	1dfb      	adds	r3, r7, #7
 80161f2:	781b      	ldrb	r3, [r3, #0]
 80161f4:	b25b      	sxtb	r3, r3
 80161f6:	089b      	lsrs	r3, r3, #2
 80161f8:	33c0      	adds	r3, #192	@ 0xc0
 80161fa:	009b      	lsls	r3, r3, #2
 80161fc:	589b      	ldr	r3, [r3, r2]
 80161fe:	1dfa      	adds	r2, r7, #7
 8016200:	7812      	ldrb	r2, [r2, #0]
 8016202:	0011      	movs	r1, r2
 8016204:	2203      	movs	r2, #3
 8016206:	400a      	ands	r2, r1
 8016208:	00d2      	lsls	r2, r2, #3
 801620a:	21ff      	movs	r1, #255	@ 0xff
 801620c:	4091      	lsls	r1, r2
 801620e:	000a      	movs	r2, r1
 8016210:	43d2      	mvns	r2, r2
 8016212:	401a      	ands	r2, r3
 8016214:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8016216:	683b      	ldr	r3, [r7, #0]
 8016218:	019b      	lsls	r3, r3, #6
 801621a:	22ff      	movs	r2, #255	@ 0xff
 801621c:	401a      	ands	r2, r3
 801621e:	1dfb      	adds	r3, r7, #7
 8016220:	781b      	ldrb	r3, [r3, #0]
 8016222:	0018      	movs	r0, r3
 8016224:	2303      	movs	r3, #3
 8016226:	4003      	ands	r3, r0
 8016228:	00db      	lsls	r3, r3, #3
 801622a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801622c:	481f      	ldr	r0, [pc, #124]	@ (80162ac <__NVIC_SetPriority+0xd4>)
 801622e:	1dfb      	adds	r3, r7, #7
 8016230:	781b      	ldrb	r3, [r3, #0]
 8016232:	b25b      	sxtb	r3, r3
 8016234:	089b      	lsrs	r3, r3, #2
 8016236:	430a      	orrs	r2, r1
 8016238:	33c0      	adds	r3, #192	@ 0xc0
 801623a:	009b      	lsls	r3, r3, #2
 801623c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 801623e:	e031      	b.n	80162a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8016240:	4a1b      	ldr	r2, [pc, #108]	@ (80162b0 <__NVIC_SetPriority+0xd8>)
 8016242:	1dfb      	adds	r3, r7, #7
 8016244:	781b      	ldrb	r3, [r3, #0]
 8016246:	0019      	movs	r1, r3
 8016248:	230f      	movs	r3, #15
 801624a:	400b      	ands	r3, r1
 801624c:	3b08      	subs	r3, #8
 801624e:	089b      	lsrs	r3, r3, #2
 8016250:	3306      	adds	r3, #6
 8016252:	009b      	lsls	r3, r3, #2
 8016254:	18d3      	adds	r3, r2, r3
 8016256:	3304      	adds	r3, #4
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	1dfa      	adds	r2, r7, #7
 801625c:	7812      	ldrb	r2, [r2, #0]
 801625e:	0011      	movs	r1, r2
 8016260:	2203      	movs	r2, #3
 8016262:	400a      	ands	r2, r1
 8016264:	00d2      	lsls	r2, r2, #3
 8016266:	21ff      	movs	r1, #255	@ 0xff
 8016268:	4091      	lsls	r1, r2
 801626a:	000a      	movs	r2, r1
 801626c:	43d2      	mvns	r2, r2
 801626e:	401a      	ands	r2, r3
 8016270:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8016272:	683b      	ldr	r3, [r7, #0]
 8016274:	019b      	lsls	r3, r3, #6
 8016276:	22ff      	movs	r2, #255	@ 0xff
 8016278:	401a      	ands	r2, r3
 801627a:	1dfb      	adds	r3, r7, #7
 801627c:	781b      	ldrb	r3, [r3, #0]
 801627e:	0018      	movs	r0, r3
 8016280:	2303      	movs	r3, #3
 8016282:	4003      	ands	r3, r0
 8016284:	00db      	lsls	r3, r3, #3
 8016286:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8016288:	4809      	ldr	r0, [pc, #36]	@ (80162b0 <__NVIC_SetPriority+0xd8>)
 801628a:	1dfb      	adds	r3, r7, #7
 801628c:	781b      	ldrb	r3, [r3, #0]
 801628e:	001c      	movs	r4, r3
 8016290:	230f      	movs	r3, #15
 8016292:	4023      	ands	r3, r4
 8016294:	3b08      	subs	r3, #8
 8016296:	089b      	lsrs	r3, r3, #2
 8016298:	430a      	orrs	r2, r1
 801629a:	3306      	adds	r3, #6
 801629c:	009b      	lsls	r3, r3, #2
 801629e:	18c3      	adds	r3, r0, r3
 80162a0:	3304      	adds	r3, #4
 80162a2:	601a      	str	r2, [r3, #0]
}
 80162a4:	46c0      	nop			@ (mov r8, r8)
 80162a6:	46bd      	mov	sp, r7
 80162a8:	b003      	add	sp, #12
 80162aa:	bd90      	pop	{r4, r7, pc}
 80162ac:	e000e100 	.word	0xe000e100
 80162b0:	e000ed00 	.word	0xe000ed00

080162b4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b084      	sub	sp, #16
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	60b9      	str	r1, [r7, #8]
 80162bc:	607a      	str	r2, [r7, #4]
 80162be:	210f      	movs	r1, #15
 80162c0:	187b      	adds	r3, r7, r1
 80162c2:	1c02      	adds	r2, r0, #0
 80162c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80162c6:	68ba      	ldr	r2, [r7, #8]
 80162c8:	187b      	adds	r3, r7, r1
 80162ca:	781b      	ldrb	r3, [r3, #0]
 80162cc:	b25b      	sxtb	r3, r3
 80162ce:	0011      	movs	r1, r2
 80162d0:	0018      	movs	r0, r3
 80162d2:	f7ff ff81 	bl	80161d8 <__NVIC_SetPriority>
}
 80162d6:	46c0      	nop			@ (mov r8, r8)
 80162d8:	46bd      	mov	sp, r7
 80162da:	b004      	add	sp, #16
 80162dc:	bd80      	pop	{r7, pc}

080162de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80162de:	b580      	push	{r7, lr}
 80162e0:	b082      	sub	sp, #8
 80162e2:	af00      	add	r7, sp, #0
 80162e4:	0002      	movs	r2, r0
 80162e6:	1dfb      	adds	r3, r7, #7
 80162e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80162ea:	1dfb      	adds	r3, r7, #7
 80162ec:	781b      	ldrb	r3, [r3, #0]
 80162ee:	b25b      	sxtb	r3, r3
 80162f0:	0018      	movs	r0, r3
 80162f2:	f7ff ff57 	bl	80161a4 <__NVIC_EnableIRQ>
}
 80162f6:	46c0      	nop			@ (mov r8, r8)
 80162f8:	46bd      	mov	sp, r7
 80162fa:	b002      	add	sp, #8
 80162fc:	bd80      	pop	{r7, pc}
	...

08016300 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b084      	sub	sp, #16
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d101      	bne.n	8016312 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801630e:	2301      	movs	r3, #1
 8016310:	e061      	b.n	80163d6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	4a32      	ldr	r2, [pc, #200]	@ (80163e0 <HAL_DMA_Init+0xe0>)
 8016318:	4694      	mov	ip, r2
 801631a:	4463      	add	r3, ip
 801631c:	2114      	movs	r1, #20
 801631e:	0018      	movs	r0, r3
 8016320:	f7e9 fefc 	bl	800011c <__udivsi3>
 8016324:	0003      	movs	r3, r0
 8016326:	009a      	lsls	r2, r3, #2
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	4a2d      	ldr	r2, [pc, #180]	@ (80163e4 <HAL_DMA_Init+0xe4>)
 8016330:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	2225      	movs	r2, #37	@ 0x25
 8016336:	2102      	movs	r1, #2
 8016338:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	4a28      	ldr	r2, [pc, #160]	@ (80163e8 <HAL_DMA_Init+0xe8>)
 8016346:	4013      	ands	r3, r2
 8016348:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8016352:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	691b      	ldr	r3, [r3, #16]
 8016358:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801635e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	699b      	ldr	r3, [r3, #24]
 8016364:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801636a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	6a1b      	ldr	r3, [r3, #32]
 8016370:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8016372:	68fa      	ldr	r2, [r7, #12]
 8016374:	4313      	orrs	r3, r2
 8016376:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	68fa      	ldr	r2, [r7, #12]
 801637e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	689a      	ldr	r2, [r3, #8]
 8016384:	2380      	movs	r3, #128	@ 0x80
 8016386:	01db      	lsls	r3, r3, #7
 8016388:	429a      	cmp	r2, r3
 801638a:	d018      	beq.n	80163be <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 801638c:	4b17      	ldr	r3, [pc, #92]	@ (80163ec <HAL_DMA_Init+0xec>)
 801638e:	681a      	ldr	r2, [r3, #0]
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016394:	211c      	movs	r1, #28
 8016396:	400b      	ands	r3, r1
 8016398:	210f      	movs	r1, #15
 801639a:	4099      	lsls	r1, r3
 801639c:	000b      	movs	r3, r1
 801639e:	43d9      	mvns	r1, r3
 80163a0:	4b12      	ldr	r3, [pc, #72]	@ (80163ec <HAL_DMA_Init+0xec>)
 80163a2:	400a      	ands	r2, r1
 80163a4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80163a6:	4b11      	ldr	r3, [pc, #68]	@ (80163ec <HAL_DMA_Init+0xec>)
 80163a8:	6819      	ldr	r1, [r3, #0]
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	685a      	ldr	r2, [r3, #4]
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80163b2:	201c      	movs	r0, #28
 80163b4:	4003      	ands	r3, r0
 80163b6:	409a      	lsls	r2, r3
 80163b8:	4b0c      	ldr	r3, [pc, #48]	@ (80163ec <HAL_DMA_Init+0xec>)
 80163ba:	430a      	orrs	r2, r1
 80163bc:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	2200      	movs	r2, #0
 80163c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	2225      	movs	r2, #37	@ 0x25
 80163c8:	2101      	movs	r1, #1
 80163ca:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	2224      	movs	r2, #36	@ 0x24
 80163d0:	2100      	movs	r1, #0
 80163d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80163d4:	2300      	movs	r3, #0
}
 80163d6:	0018      	movs	r0, r3
 80163d8:	46bd      	mov	sp, r7
 80163da:	b004      	add	sp, #16
 80163dc:	bd80      	pop	{r7, pc}
 80163de:	46c0      	nop			@ (mov r8, r8)
 80163e0:	bffdfff8 	.word	0xbffdfff8
 80163e4:	40020000 	.word	0x40020000
 80163e8:	ffff800f 	.word	0xffff800f
 80163ec:	400200a8 	.word	0x400200a8

080163f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b086      	sub	sp, #24
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	60f8      	str	r0, [r7, #12]
 80163f8:	60b9      	str	r1, [r7, #8]
 80163fa:	607a      	str	r2, [r7, #4]
 80163fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80163fe:	2317      	movs	r3, #23
 8016400:	18fb      	adds	r3, r7, r3
 8016402:	2200      	movs	r2, #0
 8016404:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	2224      	movs	r2, #36	@ 0x24
 801640a:	5c9b      	ldrb	r3, [r3, r2]
 801640c:	2b01      	cmp	r3, #1
 801640e:	d101      	bne.n	8016414 <HAL_DMA_Start_IT+0x24>
 8016410:	2302      	movs	r3, #2
 8016412:	e04f      	b.n	80164b4 <HAL_DMA_Start_IT+0xc4>
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	2224      	movs	r2, #36	@ 0x24
 8016418:	2101      	movs	r1, #1
 801641a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	2225      	movs	r2, #37	@ 0x25
 8016420:	5c9b      	ldrb	r3, [r3, r2]
 8016422:	b2db      	uxtb	r3, r3
 8016424:	2b01      	cmp	r3, #1
 8016426:	d13a      	bne.n	801649e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8016428:	68fb      	ldr	r3, [r7, #12]
 801642a:	2225      	movs	r2, #37	@ 0x25
 801642c:	2102      	movs	r1, #2
 801642e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	2200      	movs	r2, #0
 8016434:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	681a      	ldr	r2, [r3, #0]
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	2101      	movs	r1, #1
 8016442:	438a      	bics	r2, r1
 8016444:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8016446:	683b      	ldr	r3, [r7, #0]
 8016448:	687a      	ldr	r2, [r7, #4]
 801644a:	68b9      	ldr	r1, [r7, #8]
 801644c:	68f8      	ldr	r0, [r7, #12]
 801644e:	f000 f92a 	bl	80166a6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016456:	2b00      	cmp	r3, #0
 8016458:	d008      	beq.n	801646c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	681a      	ldr	r2, [r3, #0]
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	210e      	movs	r1, #14
 8016466:	430a      	orrs	r2, r1
 8016468:	601a      	str	r2, [r3, #0]
 801646a:	e00f      	b.n	801648c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	681a      	ldr	r2, [r3, #0]
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	2104      	movs	r1, #4
 8016478:	438a      	bics	r2, r1
 801647a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	681a      	ldr	r2, [r3, #0]
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	210a      	movs	r1, #10
 8016488:	430a      	orrs	r2, r1
 801648a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	681a      	ldr	r2, [r3, #0]
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	2101      	movs	r1, #1
 8016498:	430a      	orrs	r2, r1
 801649a:	601a      	str	r2, [r3, #0]
 801649c:	e007      	b.n	80164ae <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	2224      	movs	r2, #36	@ 0x24
 80164a2:	2100      	movs	r1, #0
 80164a4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80164a6:	2317      	movs	r3, #23
 80164a8:	18fb      	adds	r3, r7, r3
 80164aa:	2202      	movs	r2, #2
 80164ac:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80164ae:	2317      	movs	r3, #23
 80164b0:	18fb      	adds	r3, r7, r3
 80164b2:	781b      	ldrb	r3, [r3, #0]
}
 80164b4:	0018      	movs	r0, r3
 80164b6:	46bd      	mov	sp, r7
 80164b8:	b006      	add	sp, #24
 80164ba:	bd80      	pop	{r7, pc}

080164bc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80164bc:	b580      	push	{r7, lr}
 80164be:	b084      	sub	sp, #16
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80164c4:	210f      	movs	r1, #15
 80164c6:	187b      	adds	r3, r7, r1
 80164c8:	2200      	movs	r2, #0
 80164ca:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	2225      	movs	r2, #37	@ 0x25
 80164d0:	5c9b      	ldrb	r3, [r3, r2]
 80164d2:	b2db      	uxtb	r3, r3
 80164d4:	2b02      	cmp	r3, #2
 80164d6:	d006      	beq.n	80164e6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	2204      	movs	r2, #4
 80164dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80164de:	187b      	adds	r3, r7, r1
 80164e0:	2201      	movs	r2, #1
 80164e2:	701a      	strb	r2, [r3, #0]
 80164e4:	e02a      	b.n	801653c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	681a      	ldr	r2, [r3, #0]
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	210e      	movs	r1, #14
 80164f2:	438a      	bics	r2, r1
 80164f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	681a      	ldr	r2, [r3, #0]
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	2101      	movs	r1, #1
 8016502:	438a      	bics	r2, r1
 8016504:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801650a:	221c      	movs	r2, #28
 801650c:	401a      	ands	r2, r3
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016512:	2101      	movs	r1, #1
 8016514:	4091      	lsls	r1, r2
 8016516:	000a      	movs	r2, r1
 8016518:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	2225      	movs	r2, #37	@ 0x25
 801651e:	2101      	movs	r1, #1
 8016520:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	2224      	movs	r2, #36	@ 0x24
 8016526:	2100      	movs	r1, #0
 8016528:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801652e:	2b00      	cmp	r3, #0
 8016530:	d004      	beq.n	801653c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016536:	687a      	ldr	r2, [r7, #4]
 8016538:	0010      	movs	r0, r2
 801653a:	4798      	blx	r3
    }
  }
  return status;
 801653c:	230f      	movs	r3, #15
 801653e:	18fb      	adds	r3, r7, r3
 8016540:	781b      	ldrb	r3, [r3, #0]
}
 8016542:	0018      	movs	r0, r3
 8016544:	46bd      	mov	sp, r7
 8016546:	b004      	add	sp, #16
 8016548:	bd80      	pop	{r7, pc}

0801654a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801654a:	b580      	push	{r7, lr}
 801654c:	b084      	sub	sp, #16
 801654e:	af00      	add	r7, sp, #0
 8016550:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016566:	221c      	movs	r2, #28
 8016568:	4013      	ands	r3, r2
 801656a:	2204      	movs	r2, #4
 801656c:	409a      	lsls	r2, r3
 801656e:	0013      	movs	r3, r2
 8016570:	68fa      	ldr	r2, [r7, #12]
 8016572:	4013      	ands	r3, r2
 8016574:	d026      	beq.n	80165c4 <HAL_DMA_IRQHandler+0x7a>
 8016576:	68bb      	ldr	r3, [r7, #8]
 8016578:	2204      	movs	r2, #4
 801657a:	4013      	ands	r3, r2
 801657c:	d022      	beq.n	80165c4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	2220      	movs	r2, #32
 8016586:	4013      	ands	r3, r2
 8016588:	d107      	bne.n	801659a <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	681a      	ldr	r2, [r3, #0]
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	2104      	movs	r1, #4
 8016596:	438a      	bics	r2, r1
 8016598:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801659e:	221c      	movs	r2, #28
 80165a0:	401a      	ands	r2, r3
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80165a6:	2104      	movs	r1, #4
 80165a8:	4091      	lsls	r1, r2
 80165aa:	000a      	movs	r2, r1
 80165ac:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d100      	bne.n	80165b8 <HAL_DMA_IRQHandler+0x6e>
 80165b6:	e071      	b.n	801669c <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80165bc:	687a      	ldr	r2, [r7, #4]
 80165be:	0010      	movs	r0, r2
 80165c0:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80165c2:	e06b      	b.n	801669c <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80165c8:	221c      	movs	r2, #28
 80165ca:	4013      	ands	r3, r2
 80165cc:	2202      	movs	r2, #2
 80165ce:	409a      	lsls	r2, r3
 80165d0:	0013      	movs	r3, r2
 80165d2:	68fa      	ldr	r2, [r7, #12]
 80165d4:	4013      	ands	r3, r2
 80165d6:	d02d      	beq.n	8016634 <HAL_DMA_IRQHandler+0xea>
 80165d8:	68bb      	ldr	r3, [r7, #8]
 80165da:	2202      	movs	r2, #2
 80165dc:	4013      	ands	r3, r2
 80165de:	d029      	beq.n	8016634 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	2220      	movs	r2, #32
 80165e8:	4013      	ands	r3, r2
 80165ea:	d10b      	bne.n	8016604 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	681a      	ldr	r2, [r3, #0]
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	210a      	movs	r1, #10
 80165f8:	438a      	bics	r2, r1
 80165fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	2225      	movs	r2, #37	@ 0x25
 8016600:	2101      	movs	r1, #1
 8016602:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016608:	221c      	movs	r2, #28
 801660a:	401a      	ands	r2, r3
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016610:	2102      	movs	r1, #2
 8016612:	4091      	lsls	r1, r2
 8016614:	000a      	movs	r2, r1
 8016616:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	2224      	movs	r2, #36	@ 0x24
 801661c:	2100      	movs	r1, #0
 801661e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016624:	2b00      	cmp	r3, #0
 8016626:	d039      	beq.n	801669c <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801662c:	687a      	ldr	r2, [r7, #4]
 801662e:	0010      	movs	r0, r2
 8016630:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8016632:	e033      	b.n	801669c <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016638:	221c      	movs	r2, #28
 801663a:	4013      	ands	r3, r2
 801663c:	2208      	movs	r2, #8
 801663e:	409a      	lsls	r2, r3
 8016640:	0013      	movs	r3, r2
 8016642:	68fa      	ldr	r2, [r7, #12]
 8016644:	4013      	ands	r3, r2
 8016646:	d02a      	beq.n	801669e <HAL_DMA_IRQHandler+0x154>
 8016648:	68bb      	ldr	r3, [r7, #8]
 801664a:	2208      	movs	r2, #8
 801664c:	4013      	ands	r3, r2
 801664e:	d026      	beq.n	801669e <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	681a      	ldr	r2, [r3, #0]
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	210e      	movs	r1, #14
 801665c:	438a      	bics	r2, r1
 801665e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016664:	221c      	movs	r2, #28
 8016666:	401a      	ands	r2, r3
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801666c:	2101      	movs	r1, #1
 801666e:	4091      	lsls	r1, r2
 8016670:	000a      	movs	r2, r1
 8016672:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	2201      	movs	r2, #1
 8016678:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	2225      	movs	r2, #37	@ 0x25
 801667e:	2101      	movs	r1, #1
 8016680:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	2224      	movs	r2, #36	@ 0x24
 8016686:	2100      	movs	r1, #0
 8016688:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801668e:	2b00      	cmp	r3, #0
 8016690:	d005      	beq.n	801669e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016696:	687a      	ldr	r2, [r7, #4]
 8016698:	0010      	movs	r0, r2
 801669a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801669c:	46c0      	nop			@ (mov r8, r8)
 801669e:	46c0      	nop			@ (mov r8, r8)
}
 80166a0:	46bd      	mov	sp, r7
 80166a2:	b004      	add	sp, #16
 80166a4:	bd80      	pop	{r7, pc}

080166a6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80166a6:	b580      	push	{r7, lr}
 80166a8:	b084      	sub	sp, #16
 80166aa:	af00      	add	r7, sp, #0
 80166ac:	60f8      	str	r0, [r7, #12]
 80166ae:	60b9      	str	r1, [r7, #8]
 80166b0:	607a      	str	r2, [r7, #4]
 80166b2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80166b8:	221c      	movs	r2, #28
 80166ba:	401a      	ands	r2, r3
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80166c0:	2101      	movs	r1, #1
 80166c2:	4091      	lsls	r1, r2
 80166c4:	000a      	movs	r2, r1
 80166c6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	683a      	ldr	r2, [r7, #0]
 80166ce:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	689b      	ldr	r3, [r3, #8]
 80166d4:	2b10      	cmp	r3, #16
 80166d6:	d108      	bne.n	80166ea <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	687a      	ldr	r2, [r7, #4]
 80166de:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	68ba      	ldr	r2, [r7, #8]
 80166e6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80166e8:	e007      	b.n	80166fa <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	68ba      	ldr	r2, [r7, #8]
 80166f0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	687a      	ldr	r2, [r7, #4]
 80166f8:	60da      	str	r2, [r3, #12]
}
 80166fa:	46c0      	nop			@ (mov r8, r8)
 80166fc:	46bd      	mov	sp, r7
 80166fe:	b004      	add	sp, #16
 8016700:	bd80      	pop	{r7, pc}
	...

08016704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b086      	sub	sp, #24
 8016708:	af00      	add	r7, sp, #0
 801670a:	6078      	str	r0, [r7, #4]
 801670c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801670e:	2300      	movs	r3, #0
 8016710:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8016712:	2300      	movs	r3, #0
 8016714:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8016716:	2300      	movs	r3, #0
 8016718:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 801671a:	e155      	b.n	80169c8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 801671c:	683b      	ldr	r3, [r7, #0]
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	2101      	movs	r1, #1
 8016722:	697a      	ldr	r2, [r7, #20]
 8016724:	4091      	lsls	r1, r2
 8016726:	000a      	movs	r2, r1
 8016728:	4013      	ands	r3, r2
 801672a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	2b00      	cmp	r3, #0
 8016730:	d100      	bne.n	8016734 <HAL_GPIO_Init+0x30>
 8016732:	e146      	b.n	80169c2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8016734:	683b      	ldr	r3, [r7, #0]
 8016736:	685b      	ldr	r3, [r3, #4]
 8016738:	2b02      	cmp	r3, #2
 801673a:	d003      	beq.n	8016744 <HAL_GPIO_Init+0x40>
 801673c:	683b      	ldr	r3, [r7, #0]
 801673e:	685b      	ldr	r3, [r3, #4]
 8016740:	2b12      	cmp	r3, #18
 8016742:	d123      	bne.n	801678c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8016744:	697b      	ldr	r3, [r7, #20]
 8016746:	08da      	lsrs	r2, r3, #3
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	3208      	adds	r2, #8
 801674c:	0092      	lsls	r2, r2, #2
 801674e:	58d3      	ldr	r3, [r2, r3]
 8016750:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8016752:	697b      	ldr	r3, [r7, #20]
 8016754:	2207      	movs	r2, #7
 8016756:	4013      	ands	r3, r2
 8016758:	009b      	lsls	r3, r3, #2
 801675a:	220f      	movs	r2, #15
 801675c:	409a      	lsls	r2, r3
 801675e:	0013      	movs	r3, r2
 8016760:	43da      	mvns	r2, r3
 8016762:	693b      	ldr	r3, [r7, #16]
 8016764:	4013      	ands	r3, r2
 8016766:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8016768:	683b      	ldr	r3, [r7, #0]
 801676a:	691a      	ldr	r2, [r3, #16]
 801676c:	697b      	ldr	r3, [r7, #20]
 801676e:	2107      	movs	r1, #7
 8016770:	400b      	ands	r3, r1
 8016772:	009b      	lsls	r3, r3, #2
 8016774:	409a      	lsls	r2, r3
 8016776:	0013      	movs	r3, r2
 8016778:	693a      	ldr	r2, [r7, #16]
 801677a:	4313      	orrs	r3, r2
 801677c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801677e:	697b      	ldr	r3, [r7, #20]
 8016780:	08da      	lsrs	r2, r3, #3
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	3208      	adds	r2, #8
 8016786:	0092      	lsls	r2, r2, #2
 8016788:	6939      	ldr	r1, [r7, #16]
 801678a:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801678c:	683b      	ldr	r3, [r7, #0]
 801678e:	685b      	ldr	r3, [r3, #4]
 8016790:	2b01      	cmp	r3, #1
 8016792:	d00b      	beq.n	80167ac <HAL_GPIO_Init+0xa8>
 8016794:	683b      	ldr	r3, [r7, #0]
 8016796:	685b      	ldr	r3, [r3, #4]
 8016798:	2b02      	cmp	r3, #2
 801679a:	d007      	beq.n	80167ac <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801679c:	683b      	ldr	r3, [r7, #0]
 801679e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80167a0:	2b11      	cmp	r3, #17
 80167a2:	d003      	beq.n	80167ac <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80167a4:	683b      	ldr	r3, [r7, #0]
 80167a6:	685b      	ldr	r3, [r3, #4]
 80167a8:	2b12      	cmp	r3, #18
 80167aa:	d130      	bne.n	801680e <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	689b      	ldr	r3, [r3, #8]
 80167b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80167b2:	697b      	ldr	r3, [r7, #20]
 80167b4:	005b      	lsls	r3, r3, #1
 80167b6:	2203      	movs	r2, #3
 80167b8:	409a      	lsls	r2, r3
 80167ba:	0013      	movs	r3, r2
 80167bc:	43da      	mvns	r2, r3
 80167be:	693b      	ldr	r3, [r7, #16]
 80167c0:	4013      	ands	r3, r2
 80167c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80167c4:	683b      	ldr	r3, [r7, #0]
 80167c6:	68da      	ldr	r2, [r3, #12]
 80167c8:	697b      	ldr	r3, [r7, #20]
 80167ca:	005b      	lsls	r3, r3, #1
 80167cc:	409a      	lsls	r2, r3
 80167ce:	0013      	movs	r3, r2
 80167d0:	693a      	ldr	r2, [r7, #16]
 80167d2:	4313      	orrs	r3, r2
 80167d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	693a      	ldr	r2, [r7, #16]
 80167da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	685b      	ldr	r3, [r3, #4]
 80167e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80167e2:	2201      	movs	r2, #1
 80167e4:	697b      	ldr	r3, [r7, #20]
 80167e6:	409a      	lsls	r2, r3
 80167e8:	0013      	movs	r3, r2
 80167ea:	43da      	mvns	r2, r3
 80167ec:	693b      	ldr	r3, [r7, #16]
 80167ee:	4013      	ands	r3, r2
 80167f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80167f2:	683b      	ldr	r3, [r7, #0]
 80167f4:	685b      	ldr	r3, [r3, #4]
 80167f6:	091b      	lsrs	r3, r3, #4
 80167f8:	2201      	movs	r2, #1
 80167fa:	401a      	ands	r2, r3
 80167fc:	697b      	ldr	r3, [r7, #20]
 80167fe:	409a      	lsls	r2, r3
 8016800:	0013      	movs	r3, r2
 8016802:	693a      	ldr	r2, [r7, #16]
 8016804:	4313      	orrs	r3, r2
 8016806:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	693a      	ldr	r2, [r7, #16]
 801680c:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8016814:	697b      	ldr	r3, [r7, #20]
 8016816:	005b      	lsls	r3, r3, #1
 8016818:	2203      	movs	r2, #3
 801681a:	409a      	lsls	r2, r3
 801681c:	0013      	movs	r3, r2
 801681e:	43da      	mvns	r2, r3
 8016820:	693b      	ldr	r3, [r7, #16]
 8016822:	4013      	ands	r3, r2
 8016824:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8016826:	683b      	ldr	r3, [r7, #0]
 8016828:	685b      	ldr	r3, [r3, #4]
 801682a:	2203      	movs	r2, #3
 801682c:	401a      	ands	r2, r3
 801682e:	697b      	ldr	r3, [r7, #20]
 8016830:	005b      	lsls	r3, r3, #1
 8016832:	409a      	lsls	r2, r3
 8016834:	0013      	movs	r3, r2
 8016836:	693a      	ldr	r2, [r7, #16]
 8016838:	4313      	orrs	r3, r2
 801683a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	693a      	ldr	r2, [r7, #16]
 8016840:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	68db      	ldr	r3, [r3, #12]
 8016846:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8016848:	697b      	ldr	r3, [r7, #20]
 801684a:	005b      	lsls	r3, r3, #1
 801684c:	2203      	movs	r2, #3
 801684e:	409a      	lsls	r2, r3
 8016850:	0013      	movs	r3, r2
 8016852:	43da      	mvns	r2, r3
 8016854:	693b      	ldr	r3, [r7, #16]
 8016856:	4013      	ands	r3, r2
 8016858:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 801685a:	683b      	ldr	r3, [r7, #0]
 801685c:	689a      	ldr	r2, [r3, #8]
 801685e:	697b      	ldr	r3, [r7, #20]
 8016860:	005b      	lsls	r3, r3, #1
 8016862:	409a      	lsls	r2, r3
 8016864:	0013      	movs	r3, r2
 8016866:	693a      	ldr	r2, [r7, #16]
 8016868:	4313      	orrs	r3, r2
 801686a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	693a      	ldr	r2, [r7, #16]
 8016870:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8016872:	683b      	ldr	r3, [r7, #0]
 8016874:	685a      	ldr	r2, [r3, #4]
 8016876:	2380      	movs	r3, #128	@ 0x80
 8016878:	055b      	lsls	r3, r3, #21
 801687a:	4013      	ands	r3, r2
 801687c:	d100      	bne.n	8016880 <HAL_GPIO_Init+0x17c>
 801687e:	e0a0      	b.n	80169c2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016880:	4b57      	ldr	r3, [pc, #348]	@ (80169e0 <HAL_GPIO_Init+0x2dc>)
 8016882:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016884:	4b56      	ldr	r3, [pc, #344]	@ (80169e0 <HAL_GPIO_Init+0x2dc>)
 8016886:	2101      	movs	r1, #1
 8016888:	430a      	orrs	r2, r1
 801688a:	635a      	str	r2, [r3, #52]	@ 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 801688c:	4a55      	ldr	r2, [pc, #340]	@ (80169e4 <HAL_GPIO_Init+0x2e0>)
 801688e:	697b      	ldr	r3, [r7, #20]
 8016890:	089b      	lsrs	r3, r3, #2
 8016892:	3302      	adds	r3, #2
 8016894:	009b      	lsls	r3, r3, #2
 8016896:	589b      	ldr	r3, [r3, r2]
 8016898:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 801689a:	697b      	ldr	r3, [r7, #20]
 801689c:	2203      	movs	r2, #3
 801689e:	4013      	ands	r3, r2
 80168a0:	009b      	lsls	r3, r3, #2
 80168a2:	220f      	movs	r2, #15
 80168a4:	409a      	lsls	r2, r3
 80168a6:	0013      	movs	r3, r2
 80168a8:	43da      	mvns	r2, r3
 80168aa:	693b      	ldr	r3, [r7, #16]
 80168ac:	4013      	ands	r3, r2
 80168ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80168b0:	687a      	ldr	r2, [r7, #4]
 80168b2:	23a0      	movs	r3, #160	@ 0xa0
 80168b4:	05db      	lsls	r3, r3, #23
 80168b6:	429a      	cmp	r2, r3
 80168b8:	d01f      	beq.n	80168fa <HAL_GPIO_Init+0x1f6>
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	4a4a      	ldr	r2, [pc, #296]	@ (80169e8 <HAL_GPIO_Init+0x2e4>)
 80168be:	4293      	cmp	r3, r2
 80168c0:	d019      	beq.n	80168f6 <HAL_GPIO_Init+0x1f2>
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	4a49      	ldr	r2, [pc, #292]	@ (80169ec <HAL_GPIO_Init+0x2e8>)
 80168c6:	4293      	cmp	r3, r2
 80168c8:	d013      	beq.n	80168f2 <HAL_GPIO_Init+0x1ee>
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	4a48      	ldr	r2, [pc, #288]	@ (80169f0 <HAL_GPIO_Init+0x2ec>)
 80168ce:	4293      	cmp	r3, r2
 80168d0:	d00d      	beq.n	80168ee <HAL_GPIO_Init+0x1ea>
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	4a47      	ldr	r2, [pc, #284]	@ (80169f4 <HAL_GPIO_Init+0x2f0>)
 80168d6:	4293      	cmp	r3, r2
 80168d8:	d007      	beq.n	80168ea <HAL_GPIO_Init+0x1e6>
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	4a46      	ldr	r2, [pc, #280]	@ (80169f8 <HAL_GPIO_Init+0x2f4>)
 80168de:	4293      	cmp	r3, r2
 80168e0:	d101      	bne.n	80168e6 <HAL_GPIO_Init+0x1e2>
 80168e2:	2305      	movs	r3, #5
 80168e4:	e00a      	b.n	80168fc <HAL_GPIO_Init+0x1f8>
 80168e6:	2306      	movs	r3, #6
 80168e8:	e008      	b.n	80168fc <HAL_GPIO_Init+0x1f8>
 80168ea:	2304      	movs	r3, #4
 80168ec:	e006      	b.n	80168fc <HAL_GPIO_Init+0x1f8>
 80168ee:	2303      	movs	r3, #3
 80168f0:	e004      	b.n	80168fc <HAL_GPIO_Init+0x1f8>
 80168f2:	2302      	movs	r3, #2
 80168f4:	e002      	b.n	80168fc <HAL_GPIO_Init+0x1f8>
 80168f6:	2301      	movs	r3, #1
 80168f8:	e000      	b.n	80168fc <HAL_GPIO_Init+0x1f8>
 80168fa:	2300      	movs	r3, #0
 80168fc:	697a      	ldr	r2, [r7, #20]
 80168fe:	2103      	movs	r1, #3
 8016900:	400a      	ands	r2, r1
 8016902:	0092      	lsls	r2, r2, #2
 8016904:	4093      	lsls	r3, r2
 8016906:	693a      	ldr	r2, [r7, #16]
 8016908:	4313      	orrs	r3, r2
 801690a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801690c:	4935      	ldr	r1, [pc, #212]	@ (80169e4 <HAL_GPIO_Init+0x2e0>)
 801690e:	697b      	ldr	r3, [r7, #20]
 8016910:	089b      	lsrs	r3, r3, #2
 8016912:	3302      	adds	r3, #2
 8016914:	009b      	lsls	r3, r3, #2
 8016916:	693a      	ldr	r2, [r7, #16]
 8016918:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801691a:	4b38      	ldr	r3, [pc, #224]	@ (80169fc <HAL_GPIO_Init+0x2f8>)
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	43da      	mvns	r2, r3
 8016924:	693b      	ldr	r3, [r7, #16]
 8016926:	4013      	ands	r3, r2
 8016928:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801692a:	683b      	ldr	r3, [r7, #0]
 801692c:	685a      	ldr	r2, [r3, #4]
 801692e:	2380      	movs	r3, #128	@ 0x80
 8016930:	025b      	lsls	r3, r3, #9
 8016932:	4013      	ands	r3, r2
 8016934:	d003      	beq.n	801693e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8016936:	693a      	ldr	r2, [r7, #16]
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	4313      	orrs	r3, r2
 801693c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 801693e:	4b2f      	ldr	r3, [pc, #188]	@ (80169fc <HAL_GPIO_Init+0x2f8>)
 8016940:	693a      	ldr	r2, [r7, #16]
 8016942:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8016944:	4b2d      	ldr	r3, [pc, #180]	@ (80169fc <HAL_GPIO_Init+0x2f8>)
 8016946:	685b      	ldr	r3, [r3, #4]
 8016948:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	43da      	mvns	r2, r3
 801694e:	693b      	ldr	r3, [r7, #16]
 8016950:	4013      	ands	r3, r2
 8016952:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8016954:	683b      	ldr	r3, [r7, #0]
 8016956:	685a      	ldr	r2, [r3, #4]
 8016958:	2380      	movs	r3, #128	@ 0x80
 801695a:	029b      	lsls	r3, r3, #10
 801695c:	4013      	ands	r3, r2
 801695e:	d003      	beq.n	8016968 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8016960:	693a      	ldr	r2, [r7, #16]
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	4313      	orrs	r3, r2
 8016966:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8016968:	4b24      	ldr	r3, [pc, #144]	@ (80169fc <HAL_GPIO_Init+0x2f8>)
 801696a:	693a      	ldr	r2, [r7, #16]
 801696c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801696e:	4b23      	ldr	r3, [pc, #140]	@ (80169fc <HAL_GPIO_Init+0x2f8>)
 8016970:	689b      	ldr	r3, [r3, #8]
 8016972:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	43da      	mvns	r2, r3
 8016978:	693b      	ldr	r3, [r7, #16]
 801697a:	4013      	ands	r3, r2
 801697c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801697e:	683b      	ldr	r3, [r7, #0]
 8016980:	685a      	ldr	r2, [r3, #4]
 8016982:	2380      	movs	r3, #128	@ 0x80
 8016984:	035b      	lsls	r3, r3, #13
 8016986:	4013      	ands	r3, r2
 8016988:	d003      	beq.n	8016992 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 801698a:	693a      	ldr	r2, [r7, #16]
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	4313      	orrs	r3, r2
 8016990:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8016992:	4b1a      	ldr	r3, [pc, #104]	@ (80169fc <HAL_GPIO_Init+0x2f8>)
 8016994:	693a      	ldr	r2, [r7, #16]
 8016996:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8016998:	4b18      	ldr	r3, [pc, #96]	@ (80169fc <HAL_GPIO_Init+0x2f8>)
 801699a:	68db      	ldr	r3, [r3, #12]
 801699c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	43da      	mvns	r2, r3
 80169a2:	693b      	ldr	r3, [r7, #16]
 80169a4:	4013      	ands	r3, r2
 80169a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80169a8:	683b      	ldr	r3, [r7, #0]
 80169aa:	685a      	ldr	r2, [r3, #4]
 80169ac:	2380      	movs	r3, #128	@ 0x80
 80169ae:	039b      	lsls	r3, r3, #14
 80169b0:	4013      	ands	r3, r2
 80169b2:	d003      	beq.n	80169bc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80169b4:	693a      	ldr	r2, [r7, #16]
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	4313      	orrs	r3, r2
 80169ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80169bc:	4b0f      	ldr	r3, [pc, #60]	@ (80169fc <HAL_GPIO_Init+0x2f8>)
 80169be:	693a      	ldr	r2, [r7, #16]
 80169c0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80169c2:	697b      	ldr	r3, [r7, #20]
 80169c4:	3301      	adds	r3, #1
 80169c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80169c8:	683b      	ldr	r3, [r7, #0]
 80169ca:	681a      	ldr	r2, [r3, #0]
 80169cc:	697b      	ldr	r3, [r7, #20]
 80169ce:	40da      	lsrs	r2, r3
 80169d0:	1e13      	subs	r3, r2, #0
 80169d2:	d000      	beq.n	80169d6 <HAL_GPIO_Init+0x2d2>
 80169d4:	e6a2      	b.n	801671c <HAL_GPIO_Init+0x18>
  }
}
 80169d6:	46c0      	nop			@ (mov r8, r8)
 80169d8:	46c0      	nop			@ (mov r8, r8)
 80169da:	46bd      	mov	sp, r7
 80169dc:	b006      	add	sp, #24
 80169de:	bd80      	pop	{r7, pc}
 80169e0:	40021000 	.word	0x40021000
 80169e4:	40010000 	.word	0x40010000
 80169e8:	50000400 	.word	0x50000400
 80169ec:	50000800 	.word	0x50000800
 80169f0:	50000c00 	.word	0x50000c00
 80169f4:	50001000 	.word	0x50001000
 80169f8:	50001c00 	.word	0x50001c00
 80169fc:	40010400 	.word	0x40010400

08016a00 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8016a00:	b580      	push	{r7, lr}
 8016a02:	b082      	sub	sp, #8
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	6078      	str	r0, [r7, #4]
 8016a08:	0008      	movs	r0, r1
 8016a0a:	0011      	movs	r1, r2
 8016a0c:	1cbb      	adds	r3, r7, #2
 8016a0e:	1c02      	adds	r2, r0, #0
 8016a10:	801a      	strh	r2, [r3, #0]
 8016a12:	1c7b      	adds	r3, r7, #1
 8016a14:	1c0a      	adds	r2, r1, #0
 8016a16:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8016a18:	1c7b      	adds	r3, r7, #1
 8016a1a:	781b      	ldrb	r3, [r3, #0]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d004      	beq.n	8016a2a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8016a20:	1cbb      	adds	r3, r7, #2
 8016a22:	881a      	ldrh	r2, [r3, #0]
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8016a28:	e003      	b.n	8016a32 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8016a2a:	1cbb      	adds	r3, r7, #2
 8016a2c:	881a      	ldrh	r2, [r3, #0]
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8016a32:	46c0      	nop			@ (mov r8, r8)
 8016a34:	46bd      	mov	sp, r7
 8016a36:	b002      	add	sp, #8
 8016a38:	bd80      	pop	{r7, pc}
	...

08016a3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8016a3c:	b580      	push	{r7, lr}
 8016a3e:	b082      	sub	sp, #8
 8016a40:	af00      	add	r7, sp, #0
 8016a42:	0002      	movs	r2, r0
 8016a44:	1dbb      	adds	r3, r7, #6
 8016a46:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8016a48:	4b09      	ldr	r3, [pc, #36]	@ (8016a70 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8016a4a:	695b      	ldr	r3, [r3, #20]
 8016a4c:	1dba      	adds	r2, r7, #6
 8016a4e:	8812      	ldrh	r2, [r2, #0]
 8016a50:	4013      	ands	r3, r2
 8016a52:	d008      	beq.n	8016a66 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8016a54:	4b06      	ldr	r3, [pc, #24]	@ (8016a70 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8016a56:	1dba      	adds	r2, r7, #6
 8016a58:	8812      	ldrh	r2, [r2, #0]
 8016a5a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8016a5c:	1dbb      	adds	r3, r7, #6
 8016a5e:	881b      	ldrh	r3, [r3, #0]
 8016a60:	0018      	movs	r0, r3
 8016a62:	f7ec fb31 	bl	80030c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8016a66:	46c0      	nop			@ (mov r8, r8)
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	b002      	add	sp, #8
 8016a6c:	bd80      	pop	{r7, pc}
 8016a6e:	46c0      	nop			@ (mov r8, r8)
 8016a70:	40010400 	.word	0x40010400

08016a74 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8016a74:	b580      	push	{r7, lr}
 8016a76:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8016a78:	4b04      	ldr	r3, [pc, #16]	@ (8016a8c <HAL_PWR_DisablePVD+0x18>)
 8016a7a:	681a      	ldr	r2, [r3, #0]
 8016a7c:	4b03      	ldr	r3, [pc, #12]	@ (8016a8c <HAL_PWR_DisablePVD+0x18>)
 8016a7e:	2110      	movs	r1, #16
 8016a80:	438a      	bics	r2, r1
 8016a82:	601a      	str	r2, [r3, #0]
}
 8016a84:	46c0      	nop			@ (mov r8, r8)
 8016a86:	46bd      	mov	sp, r7
 8016a88:	bd80      	pop	{r7, pc}
 8016a8a:	46c0      	nop			@ (mov r8, r8)
 8016a8c:	40007000 	.word	0x40007000

08016a90 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8016a90:	b580      	push	{r7, lr}
 8016a92:	b084      	sub	sp, #16
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	6078      	str	r0, [r7, #4]
 8016a98:	000a      	movs	r2, r1
 8016a9a:	1cfb      	adds	r3, r7, #3
 8016a9c:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8016aa2:	4b11      	ldr	r3, [pc, #68]	@ (8016ae8 <HAL_PWR_EnterSLEEPMode+0x58>)
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	60fb      	str	r3, [r7, #12]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	2203      	movs	r2, #3
 8016aac:	4393      	bics	r3, r2
 8016aae:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8016ab0:	68fa      	ldr	r2, [r7, #12]
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	4313      	orrs	r3, r2
 8016ab6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8016ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8016ae8 <HAL_PWR_EnterSLEEPMode+0x58>)
 8016aba:	68fa      	ldr	r2, [r7, #12]
 8016abc:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8016abe:	4b0b      	ldr	r3, [pc, #44]	@ (8016aec <HAL_PWR_EnterSLEEPMode+0x5c>)
 8016ac0:	691a      	ldr	r2, [r3, #16]
 8016ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8016aec <HAL_PWR_EnterSLEEPMode+0x5c>)
 8016ac4:	2104      	movs	r1, #4
 8016ac6:	438a      	bics	r2, r1
 8016ac8:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8016aca:	1cfb      	adds	r3, r7, #3
 8016acc:	781b      	ldrb	r3, [r3, #0]
 8016ace:	2b01      	cmp	r3, #1
 8016ad0:	d101      	bne.n	8016ad6 <HAL_PWR_EnterSLEEPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8016ad2:	bf30      	wfi
 8016ad4:	e002      	b.n	8016adc <HAL_PWR_EnterSLEEPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8016ad6:	bf40      	sev
    __WFE();
 8016ad8:	bf20      	wfe
    __WFE();
 8016ada:	bf20      	wfe
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8016adc:	46c0      	nop			@ (mov r8, r8)

}
 8016ade:	46c0      	nop			@ (mov r8, r8)
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	b004      	add	sp, #16
 8016ae4:	bd80      	pop	{r7, pc}
 8016ae6:	46c0      	nop			@ (mov r8, r8)
 8016ae8:	40007000 	.word	0x40007000
 8016aec:	e000ed00 	.word	0xe000ed00

08016af0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8016af0:	b580      	push	{r7, lr}
 8016af2:	b084      	sub	sp, #16
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	6078      	str	r0, [r7, #4]
 8016af8:	000a      	movs	r2, r1
 8016afa:	1cfb      	adds	r3, r7, #3
 8016afc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8016afe:	2300      	movs	r3, #0
 8016b00:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8016b02:	4b13      	ldr	r3, [pc, #76]	@ (8016b50 <HAL_PWR_EnterSTOPMode+0x60>)
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	2203      	movs	r2, #3
 8016b0c:	4393      	bics	r3, r2
 8016b0e:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8016b10:	68fa      	ldr	r2, [r7, #12]
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	4313      	orrs	r3, r2
 8016b16:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8016b18:	4b0d      	ldr	r3, [pc, #52]	@ (8016b50 <HAL_PWR_EnterSTOPMode+0x60>)
 8016b1a:	68fa      	ldr	r2, [r7, #12]
 8016b1c:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8016b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8016b54 <HAL_PWR_EnterSTOPMode+0x64>)
 8016b20:	691a      	ldr	r2, [r3, #16]
 8016b22:	4b0c      	ldr	r3, [pc, #48]	@ (8016b54 <HAL_PWR_EnterSTOPMode+0x64>)
 8016b24:	2104      	movs	r1, #4
 8016b26:	430a      	orrs	r2, r1
 8016b28:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8016b2a:	1cfb      	adds	r3, r7, #3
 8016b2c:	781b      	ldrb	r3, [r3, #0]
 8016b2e:	2b01      	cmp	r3, #1
 8016b30:	d101      	bne.n	8016b36 <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8016b32:	bf30      	wfi
 8016b34:	e002      	b.n	8016b3c <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8016b36:	bf40      	sev
    __WFE();
 8016b38:	bf20      	wfe
    __WFE();
 8016b3a:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8016b3c:	4b05      	ldr	r3, [pc, #20]	@ (8016b54 <HAL_PWR_EnterSTOPMode+0x64>)
 8016b3e:	691a      	ldr	r2, [r3, #16]
 8016b40:	4b04      	ldr	r3, [pc, #16]	@ (8016b54 <HAL_PWR_EnterSTOPMode+0x64>)
 8016b42:	2104      	movs	r1, #4
 8016b44:	438a      	bics	r2, r1
 8016b46:	611a      	str	r2, [r3, #16]

}
 8016b48:	46c0      	nop			@ (mov r8, r8)
 8016b4a:	46bd      	mov	sp, r7
 8016b4c:	b004      	add	sp, #16
 8016b4e:	bd80      	pop	{r7, pc}
 8016b50:	40007000 	.word	0x40007000
 8016b54:	e000ed00 	.word	0xe000ed00

08016b58 <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 8016b58:	b580      	push	{r7, lr}
 8016b5a:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8016b5c:	4b04      	ldr	r3, [pc, #16]	@ (8016b70 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8016b5e:	681a      	ldr	r2, [r3, #0]
 8016b60:	4b03      	ldr	r3, [pc, #12]	@ (8016b70 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8016b62:	2180      	movs	r1, #128	@ 0x80
 8016b64:	00c9      	lsls	r1, r1, #3
 8016b66:	430a      	orrs	r2, r1
 8016b68:	601a      	str	r2, [r3, #0]
}
 8016b6a:	46c0      	nop			@ (mov r8, r8)
 8016b6c:	46bd      	mov	sp, r7
 8016b6e:	bd80      	pop	{r7, pc}
 8016b70:	40007000 	.word	0x40007000

08016b74 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8016b74:	b580      	push	{r7, lr}
 8016b76:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8016b78:	4b04      	ldr	r3, [pc, #16]	@ (8016b8c <HAL_PWREx_EnableUltraLowPower+0x18>)
 8016b7a:	681a      	ldr	r2, [r3, #0]
 8016b7c:	4b03      	ldr	r3, [pc, #12]	@ (8016b8c <HAL_PWREx_EnableUltraLowPower+0x18>)
 8016b7e:	2180      	movs	r1, #128	@ 0x80
 8016b80:	0089      	lsls	r1, r1, #2
 8016b82:	430a      	orrs	r2, r1
 8016b84:	601a      	str	r2, [r3, #0]
}
 8016b86:	46c0      	nop			@ (mov r8, r8)
 8016b88:	46bd      	mov	sp, r7
 8016b8a:	bd80      	pop	{r7, pc}
 8016b8c:	40007000 	.word	0x40007000

08016b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8016b90:	b5b0      	push	{r4, r5, r7, lr}
 8016b92:	b08a      	sub	sp, #40	@ 0x28
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d102      	bne.n	8016ba4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8016b9e:	2301      	movs	r3, #1
 8016ba0:	f000 fbbb 	bl	801731a <HAL_RCC_OscConfig+0x78a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8016ba4:	4bc8      	ldr	r3, [pc, #800]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016ba6:	68db      	ldr	r3, [r3, #12]
 8016ba8:	220c      	movs	r2, #12
 8016baa:	4013      	ands	r3, r2
 8016bac:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8016bae:	4bc6      	ldr	r3, [pc, #792]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016bb0:	68da      	ldr	r2, [r3, #12]
 8016bb2:	2380      	movs	r3, #128	@ 0x80
 8016bb4:	025b      	lsls	r3, r3, #9
 8016bb6:	4013      	ands	r3, r2
 8016bb8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	2201      	movs	r2, #1
 8016bc0:	4013      	ands	r3, r2
 8016bc2:	d100      	bne.n	8016bc6 <HAL_RCC_OscConfig+0x36>
 8016bc4:	e07e      	b.n	8016cc4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8016bc6:	69fb      	ldr	r3, [r7, #28]
 8016bc8:	2b08      	cmp	r3, #8
 8016bca:	d007      	beq.n	8016bdc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8016bcc:	69fb      	ldr	r3, [r7, #28]
 8016bce:	2b0c      	cmp	r3, #12
 8016bd0:	d112      	bne.n	8016bf8 <HAL_RCC_OscConfig+0x68>
 8016bd2:	69ba      	ldr	r2, [r7, #24]
 8016bd4:	2380      	movs	r3, #128	@ 0x80
 8016bd6:	025b      	lsls	r3, r3, #9
 8016bd8:	429a      	cmp	r2, r3
 8016bda:	d10d      	bne.n	8016bf8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016bdc:	4bba      	ldr	r3, [pc, #744]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016bde:	681a      	ldr	r2, [r3, #0]
 8016be0:	2380      	movs	r3, #128	@ 0x80
 8016be2:	029b      	lsls	r3, r3, #10
 8016be4:	4013      	ands	r3, r2
 8016be6:	d100      	bne.n	8016bea <HAL_RCC_OscConfig+0x5a>
 8016be8:	e06b      	b.n	8016cc2 <HAL_RCC_OscConfig+0x132>
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	685b      	ldr	r3, [r3, #4]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d167      	bne.n	8016cc2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8016bf2:	2301      	movs	r3, #1
 8016bf4:	f000 fb91 	bl	801731a <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	685a      	ldr	r2, [r3, #4]
 8016bfc:	2380      	movs	r3, #128	@ 0x80
 8016bfe:	025b      	lsls	r3, r3, #9
 8016c00:	429a      	cmp	r2, r3
 8016c02:	d107      	bne.n	8016c14 <HAL_RCC_OscConfig+0x84>
 8016c04:	4bb0      	ldr	r3, [pc, #704]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016c06:	681a      	ldr	r2, [r3, #0]
 8016c08:	4baf      	ldr	r3, [pc, #700]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016c0a:	2180      	movs	r1, #128	@ 0x80
 8016c0c:	0249      	lsls	r1, r1, #9
 8016c0e:	430a      	orrs	r2, r1
 8016c10:	601a      	str	r2, [r3, #0]
 8016c12:	e027      	b.n	8016c64 <HAL_RCC_OscConfig+0xd4>
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	685a      	ldr	r2, [r3, #4]
 8016c18:	23a0      	movs	r3, #160	@ 0xa0
 8016c1a:	02db      	lsls	r3, r3, #11
 8016c1c:	429a      	cmp	r2, r3
 8016c1e:	d10e      	bne.n	8016c3e <HAL_RCC_OscConfig+0xae>
 8016c20:	4ba9      	ldr	r3, [pc, #676]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016c22:	681a      	ldr	r2, [r3, #0]
 8016c24:	4ba8      	ldr	r3, [pc, #672]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016c26:	2180      	movs	r1, #128	@ 0x80
 8016c28:	02c9      	lsls	r1, r1, #11
 8016c2a:	430a      	orrs	r2, r1
 8016c2c:	601a      	str	r2, [r3, #0]
 8016c2e:	4ba6      	ldr	r3, [pc, #664]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016c30:	681a      	ldr	r2, [r3, #0]
 8016c32:	4ba5      	ldr	r3, [pc, #660]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016c34:	2180      	movs	r1, #128	@ 0x80
 8016c36:	0249      	lsls	r1, r1, #9
 8016c38:	430a      	orrs	r2, r1
 8016c3a:	601a      	str	r2, [r3, #0]
 8016c3c:	e012      	b.n	8016c64 <HAL_RCC_OscConfig+0xd4>
 8016c3e:	4ba2      	ldr	r3, [pc, #648]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016c40:	681a      	ldr	r2, [r3, #0]
 8016c42:	4ba1      	ldr	r3, [pc, #644]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016c44:	49a1      	ldr	r1, [pc, #644]	@ (8016ecc <HAL_RCC_OscConfig+0x33c>)
 8016c46:	400a      	ands	r2, r1
 8016c48:	601a      	str	r2, [r3, #0]
 8016c4a:	4b9f      	ldr	r3, [pc, #636]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016c4c:	681a      	ldr	r2, [r3, #0]
 8016c4e:	2380      	movs	r3, #128	@ 0x80
 8016c50:	025b      	lsls	r3, r3, #9
 8016c52:	4013      	ands	r3, r2
 8016c54:	60fb      	str	r3, [r7, #12]
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	4b9b      	ldr	r3, [pc, #620]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016c5a:	681a      	ldr	r2, [r3, #0]
 8016c5c:	4b9a      	ldr	r3, [pc, #616]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016c5e:	499c      	ldr	r1, [pc, #624]	@ (8016ed0 <HAL_RCC_OscConfig+0x340>)
 8016c60:	400a      	ands	r2, r1
 8016c62:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	685b      	ldr	r3, [r3, #4]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d015      	beq.n	8016c98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016c6c:	f7fe fd0e 	bl	801568c <HAL_GetTick>
 8016c70:	0003      	movs	r3, r0
 8016c72:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8016c74:	e009      	b.n	8016c8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8016c76:	f7fe fd09 	bl	801568c <HAL_GetTick>
 8016c7a:	0002      	movs	r2, r0
 8016c7c:	697b      	ldr	r3, [r7, #20]
 8016c7e:	1ad3      	subs	r3, r2, r3
 8016c80:	2b64      	cmp	r3, #100	@ 0x64
 8016c82:	d902      	bls.n	8016c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8016c84:	2303      	movs	r3, #3
 8016c86:	f000 fb48 	bl	801731a <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8016c8a:	4b8f      	ldr	r3, [pc, #572]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016c8c:	681a      	ldr	r2, [r3, #0]
 8016c8e:	2380      	movs	r3, #128	@ 0x80
 8016c90:	029b      	lsls	r3, r3, #10
 8016c92:	4013      	ands	r3, r2
 8016c94:	d0ef      	beq.n	8016c76 <HAL_RCC_OscConfig+0xe6>
 8016c96:	e015      	b.n	8016cc4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016c98:	f7fe fcf8 	bl	801568c <HAL_GetTick>
 8016c9c:	0003      	movs	r3, r0
 8016c9e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8016ca0:	e008      	b.n	8016cb4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8016ca2:	f7fe fcf3 	bl	801568c <HAL_GetTick>
 8016ca6:	0002      	movs	r2, r0
 8016ca8:	697b      	ldr	r3, [r7, #20]
 8016caa:	1ad3      	subs	r3, r2, r3
 8016cac:	2b64      	cmp	r3, #100	@ 0x64
 8016cae:	d901      	bls.n	8016cb4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8016cb0:	2303      	movs	r3, #3
 8016cb2:	e332      	b.n	801731a <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8016cb4:	4b84      	ldr	r3, [pc, #528]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016cb6:	681a      	ldr	r2, [r3, #0]
 8016cb8:	2380      	movs	r3, #128	@ 0x80
 8016cba:	029b      	lsls	r3, r3, #10
 8016cbc:	4013      	ands	r3, r2
 8016cbe:	d1f0      	bne.n	8016ca2 <HAL_RCC_OscConfig+0x112>
 8016cc0:	e000      	b.n	8016cc4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016cc2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	2202      	movs	r2, #2
 8016cca:	4013      	ands	r3, r2
 8016ccc:	d100      	bne.n	8016cd0 <HAL_RCC_OscConfig+0x140>
 8016cce:	e098      	b.n	8016e02 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	68db      	ldr	r3, [r3, #12]
 8016cd4:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8016cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cd8:	2220      	movs	r2, #32
 8016cda:	4013      	ands	r3, r2
 8016cdc:	d009      	beq.n	8016cf2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8016cde:	4b7a      	ldr	r3, [pc, #488]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016ce0:	681a      	ldr	r2, [r3, #0]
 8016ce2:	4b79      	ldr	r3, [pc, #484]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016ce4:	2120      	movs	r1, #32
 8016ce6:	430a      	orrs	r2, r1
 8016ce8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8016cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cec:	2220      	movs	r2, #32
 8016cee:	4393      	bics	r3, r2
 8016cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8016cf2:	69fb      	ldr	r3, [r7, #28]
 8016cf4:	2b04      	cmp	r3, #4
 8016cf6:	d005      	beq.n	8016d04 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8016cf8:	69fb      	ldr	r3, [r7, #28]
 8016cfa:	2b0c      	cmp	r3, #12
 8016cfc:	d13d      	bne.n	8016d7a <HAL_RCC_OscConfig+0x1ea>
 8016cfe:	69bb      	ldr	r3, [r7, #24]
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d13a      	bne.n	8016d7a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8016d04:	4b70      	ldr	r3, [pc, #448]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	2204      	movs	r2, #4
 8016d0a:	4013      	ands	r3, r2
 8016d0c:	d004      	beq.n	8016d18 <HAL_RCC_OscConfig+0x188>
 8016d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d101      	bne.n	8016d18 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8016d14:	2301      	movs	r3, #1
 8016d16:	e300      	b.n	801731a <HAL_RCC_OscConfig+0x78a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016d18:	4b6b      	ldr	r3, [pc, #428]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016d1a:	685b      	ldr	r3, [r3, #4]
 8016d1c:	4a6d      	ldr	r2, [pc, #436]	@ (8016ed4 <HAL_RCC_OscConfig+0x344>)
 8016d1e:	4013      	ands	r3, r2
 8016d20:	0019      	movs	r1, r3
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	691b      	ldr	r3, [r3, #16]
 8016d26:	021a      	lsls	r2, r3, #8
 8016d28:	4b67      	ldr	r3, [pc, #412]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016d2a:	430a      	orrs	r2, r1
 8016d2c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8016d2e:	4b66      	ldr	r3, [pc, #408]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	2209      	movs	r2, #9
 8016d34:	4393      	bics	r3, r2
 8016d36:	0019      	movs	r1, r3
 8016d38:	4b63      	ldr	r3, [pc, #396]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016d3c:	430a      	orrs	r2, r1
 8016d3e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8016d40:	f000 fc20 	bl	8017584 <HAL_RCC_GetSysClockFreq>
 8016d44:	0001      	movs	r1, r0
 8016d46:	4b60      	ldr	r3, [pc, #384]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016d48:	68db      	ldr	r3, [r3, #12]
 8016d4a:	091b      	lsrs	r3, r3, #4
 8016d4c:	220f      	movs	r2, #15
 8016d4e:	4013      	ands	r3, r2
 8016d50:	4a61      	ldr	r2, [pc, #388]	@ (8016ed8 <HAL_RCC_OscConfig+0x348>)
 8016d52:	5cd3      	ldrb	r3, [r2, r3]
 8016d54:	000a      	movs	r2, r1
 8016d56:	40da      	lsrs	r2, r3
 8016d58:	4b60      	ldr	r3, [pc, #384]	@ (8016edc <HAL_RCC_OscConfig+0x34c>)
 8016d5a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8016d5c:	2513      	movs	r5, #19
 8016d5e:	197c      	adds	r4, r7, r5
 8016d60:	2003      	movs	r0, #3
 8016d62:	f7ec f921 	bl	8002fa8 <HAL_InitTick>
 8016d66:	0003      	movs	r3, r0
 8016d68:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8016d6a:	002a      	movs	r2, r5
 8016d6c:	18bb      	adds	r3, r7, r2
 8016d6e:	781b      	ldrb	r3, [r3, #0]
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d046      	beq.n	8016e02 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8016d74:	18bb      	adds	r3, r7, r2
 8016d76:	781b      	ldrb	r3, [r3, #0]
 8016d78:	e2cf      	b.n	801731a <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8016d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d027      	beq.n	8016dd0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8016d80:	4b51      	ldr	r3, [pc, #324]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	2209      	movs	r2, #9
 8016d86:	4393      	bics	r3, r2
 8016d88:	0019      	movs	r1, r3
 8016d8a:	4b4f      	ldr	r3, [pc, #316]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016d8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016d8e:	430a      	orrs	r2, r1
 8016d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016d92:	f7fe fc7b 	bl	801568c <HAL_GetTick>
 8016d96:	0003      	movs	r3, r0
 8016d98:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8016d9a:	e008      	b.n	8016dae <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8016d9c:	f7fe fc76 	bl	801568c <HAL_GetTick>
 8016da0:	0002      	movs	r2, r0
 8016da2:	697b      	ldr	r3, [r7, #20]
 8016da4:	1ad3      	subs	r3, r2, r3
 8016da6:	2b02      	cmp	r3, #2
 8016da8:	d901      	bls.n	8016dae <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8016daa:	2303      	movs	r3, #3
 8016dac:	e2b5      	b.n	801731a <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8016dae:	4b46      	ldr	r3, [pc, #280]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	2204      	movs	r2, #4
 8016db4:	4013      	ands	r3, r2
 8016db6:	d0f1      	beq.n	8016d9c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016db8:	4b43      	ldr	r3, [pc, #268]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016dba:	685b      	ldr	r3, [r3, #4]
 8016dbc:	4a45      	ldr	r2, [pc, #276]	@ (8016ed4 <HAL_RCC_OscConfig+0x344>)
 8016dbe:	4013      	ands	r3, r2
 8016dc0:	0019      	movs	r1, r3
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	691b      	ldr	r3, [r3, #16]
 8016dc6:	021a      	lsls	r2, r3, #8
 8016dc8:	4b3f      	ldr	r3, [pc, #252]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016dca:	430a      	orrs	r2, r1
 8016dcc:	605a      	str	r2, [r3, #4]
 8016dce:	e018      	b.n	8016e02 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8016dd0:	4b3d      	ldr	r3, [pc, #244]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016dd2:	681a      	ldr	r2, [r3, #0]
 8016dd4:	4b3c      	ldr	r3, [pc, #240]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016dd6:	2101      	movs	r1, #1
 8016dd8:	438a      	bics	r2, r1
 8016dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016ddc:	f7fe fc56 	bl	801568c <HAL_GetTick>
 8016de0:	0003      	movs	r3, r0
 8016de2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8016de4:	e008      	b.n	8016df8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8016de6:	f7fe fc51 	bl	801568c <HAL_GetTick>
 8016dea:	0002      	movs	r2, r0
 8016dec:	697b      	ldr	r3, [r7, #20]
 8016dee:	1ad3      	subs	r3, r2, r3
 8016df0:	2b02      	cmp	r3, #2
 8016df2:	d901      	bls.n	8016df8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8016df4:	2303      	movs	r3, #3
 8016df6:	e290      	b.n	801731a <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8016df8:	4b33      	ldr	r3, [pc, #204]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	2204      	movs	r2, #4
 8016dfe:	4013      	ands	r3, r2
 8016e00:	d1f1      	bne.n	8016de6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	2210      	movs	r2, #16
 8016e08:	4013      	ands	r3, r2
 8016e0a:	d100      	bne.n	8016e0e <HAL_RCC_OscConfig+0x27e>
 8016e0c:	e09f      	b.n	8016f4e <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8016e0e:	69fb      	ldr	r3, [r7, #28]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d13f      	bne.n	8016e94 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8016e14:	4b2c      	ldr	r3, [pc, #176]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016e16:	681a      	ldr	r2, [r3, #0]
 8016e18:	2380      	movs	r3, #128	@ 0x80
 8016e1a:	009b      	lsls	r3, r3, #2
 8016e1c:	4013      	ands	r3, r2
 8016e1e:	d005      	beq.n	8016e2c <HAL_RCC_OscConfig+0x29c>
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	69db      	ldr	r3, [r3, #28]
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d101      	bne.n	8016e2c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8016e28:	2301      	movs	r3, #1
 8016e2a:	e276      	b.n	801731a <HAL_RCC_OscConfig+0x78a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016e2c:	4b26      	ldr	r3, [pc, #152]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016e2e:	685b      	ldr	r3, [r3, #4]
 8016e30:	4a2b      	ldr	r2, [pc, #172]	@ (8016ee0 <HAL_RCC_OscConfig+0x350>)
 8016e32:	4013      	ands	r3, r2
 8016e34:	0019      	movs	r1, r3
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016e3a:	4b23      	ldr	r3, [pc, #140]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016e3c:	430a      	orrs	r2, r1
 8016e3e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016e40:	4b21      	ldr	r3, [pc, #132]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016e42:	685b      	ldr	r3, [r3, #4]
 8016e44:	021b      	lsls	r3, r3, #8
 8016e46:	0a19      	lsrs	r1, r3, #8
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	6a1b      	ldr	r3, [r3, #32]
 8016e4c:	061a      	lsls	r2, r3, #24
 8016e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016e50:	430a      	orrs	r2, r1
 8016e52:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e58:	0b5b      	lsrs	r3, r3, #13
 8016e5a:	3301      	adds	r3, #1
 8016e5c:	2280      	movs	r2, #128	@ 0x80
 8016e5e:	0212      	lsls	r2, r2, #8
 8016e60:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8016e62:	4b19      	ldr	r3, [pc, #100]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016e64:	68db      	ldr	r3, [r3, #12]
 8016e66:	091b      	lsrs	r3, r3, #4
 8016e68:	210f      	movs	r1, #15
 8016e6a:	400b      	ands	r3, r1
 8016e6c:	491a      	ldr	r1, [pc, #104]	@ (8016ed8 <HAL_RCC_OscConfig+0x348>)
 8016e6e:	5ccb      	ldrb	r3, [r1, r3]
 8016e70:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8016e72:	4b1a      	ldr	r3, [pc, #104]	@ (8016edc <HAL_RCC_OscConfig+0x34c>)
 8016e74:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8016e76:	2513      	movs	r5, #19
 8016e78:	197c      	adds	r4, r7, r5
 8016e7a:	2003      	movs	r0, #3
 8016e7c:	f7ec f894 	bl	8002fa8 <HAL_InitTick>
 8016e80:	0003      	movs	r3, r0
 8016e82:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8016e84:	002a      	movs	r2, r5
 8016e86:	18bb      	adds	r3, r7, r2
 8016e88:	781b      	ldrb	r3, [r3, #0]
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d05f      	beq.n	8016f4e <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8016e8e:	18bb      	adds	r3, r7, r2
 8016e90:	781b      	ldrb	r3, [r3, #0]
 8016e92:	e242      	b.n	801731a <HAL_RCC_OscConfig+0x78a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	69db      	ldr	r3, [r3, #28]
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d03e      	beq.n	8016f1a <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8016e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016e9e:	681a      	ldr	r2, [r3, #0]
 8016ea0:	4b09      	ldr	r3, [pc, #36]	@ (8016ec8 <HAL_RCC_OscConfig+0x338>)
 8016ea2:	2180      	movs	r1, #128	@ 0x80
 8016ea4:	0049      	lsls	r1, r1, #1
 8016ea6:	430a      	orrs	r2, r1
 8016ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016eaa:	f7fe fbef 	bl	801568c <HAL_GetTick>
 8016eae:	0003      	movs	r3, r0
 8016eb0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8016eb2:	e017      	b.n	8016ee4 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8016eb4:	f7fe fbea 	bl	801568c <HAL_GetTick>
 8016eb8:	0002      	movs	r2, r0
 8016eba:	697b      	ldr	r3, [r7, #20]
 8016ebc:	1ad3      	subs	r3, r2, r3
 8016ebe:	2b02      	cmp	r3, #2
 8016ec0:	d910      	bls.n	8016ee4 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8016ec2:	2303      	movs	r3, #3
 8016ec4:	e229      	b.n	801731a <HAL_RCC_OscConfig+0x78a>
 8016ec6:	46c0      	nop			@ (mov r8, r8)
 8016ec8:	40021000 	.word	0x40021000
 8016ecc:	fffeffff 	.word	0xfffeffff
 8016ed0:	fffbffff 	.word	0xfffbffff
 8016ed4:	ffffe0ff 	.word	0xffffe0ff
 8016ed8:	0801ae00 	.word	0x0801ae00
 8016edc:	20000070 	.word	0x20000070
 8016ee0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8016ee4:	4bca      	ldr	r3, [pc, #808]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8016ee6:	681a      	ldr	r2, [r3, #0]
 8016ee8:	2380      	movs	r3, #128	@ 0x80
 8016eea:	009b      	lsls	r3, r3, #2
 8016eec:	4013      	ands	r3, r2
 8016eee:	d0e1      	beq.n	8016eb4 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016ef0:	4bc7      	ldr	r3, [pc, #796]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8016ef2:	685b      	ldr	r3, [r3, #4]
 8016ef4:	4ac7      	ldr	r2, [pc, #796]	@ (8017214 <HAL_RCC_OscConfig+0x684>)
 8016ef6:	4013      	ands	r3, r2
 8016ef8:	0019      	movs	r1, r3
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016efe:	4bc4      	ldr	r3, [pc, #784]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8016f00:	430a      	orrs	r2, r1
 8016f02:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016f04:	4bc2      	ldr	r3, [pc, #776]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8016f06:	685b      	ldr	r3, [r3, #4]
 8016f08:	021b      	lsls	r3, r3, #8
 8016f0a:	0a19      	lsrs	r1, r3, #8
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	6a1b      	ldr	r3, [r3, #32]
 8016f10:	061a      	lsls	r2, r3, #24
 8016f12:	4bbf      	ldr	r3, [pc, #764]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8016f14:	430a      	orrs	r2, r1
 8016f16:	605a      	str	r2, [r3, #4]
 8016f18:	e019      	b.n	8016f4e <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8016f1a:	4bbd      	ldr	r3, [pc, #756]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8016f1c:	681a      	ldr	r2, [r3, #0]
 8016f1e:	4bbc      	ldr	r3, [pc, #752]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8016f20:	49bd      	ldr	r1, [pc, #756]	@ (8017218 <HAL_RCC_OscConfig+0x688>)
 8016f22:	400a      	ands	r2, r1
 8016f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016f26:	f7fe fbb1 	bl	801568c <HAL_GetTick>
 8016f2a:	0003      	movs	r3, r0
 8016f2c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8016f2e:	e008      	b.n	8016f42 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8016f30:	f7fe fbac 	bl	801568c <HAL_GetTick>
 8016f34:	0002      	movs	r2, r0
 8016f36:	697b      	ldr	r3, [r7, #20]
 8016f38:	1ad3      	subs	r3, r2, r3
 8016f3a:	2b02      	cmp	r3, #2
 8016f3c:	d901      	bls.n	8016f42 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8016f3e:	2303      	movs	r3, #3
 8016f40:	e1eb      	b.n	801731a <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8016f42:	4bb3      	ldr	r3, [pc, #716]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8016f44:	681a      	ldr	r2, [r3, #0]
 8016f46:	2380      	movs	r3, #128	@ 0x80
 8016f48:	009b      	lsls	r3, r3, #2
 8016f4a:	4013      	ands	r3, r2
 8016f4c:	d1f0      	bne.n	8016f30 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	2208      	movs	r2, #8
 8016f54:	4013      	ands	r3, r2
 8016f56:	d036      	beq.n	8016fc6 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	695b      	ldr	r3, [r3, #20]
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d019      	beq.n	8016f94 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8016f60:	4bab      	ldr	r3, [pc, #684]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8016f62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016f64:	4baa      	ldr	r3, [pc, #680]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8016f66:	2101      	movs	r1, #1
 8016f68:	430a      	orrs	r2, r1
 8016f6a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8016f6c:	f7fe fb8e 	bl	801568c <HAL_GetTick>
 8016f70:	0003      	movs	r3, r0
 8016f72:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8016f74:	e008      	b.n	8016f88 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8016f76:	f7fe fb89 	bl	801568c <HAL_GetTick>
 8016f7a:	0002      	movs	r2, r0
 8016f7c:	697b      	ldr	r3, [r7, #20]
 8016f7e:	1ad3      	subs	r3, r2, r3
 8016f80:	2b02      	cmp	r3, #2
 8016f82:	d901      	bls.n	8016f88 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8016f84:	2303      	movs	r3, #3
 8016f86:	e1c8      	b.n	801731a <HAL_RCC_OscConfig+0x78a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8016f88:	4ba1      	ldr	r3, [pc, #644]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8016f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016f8c:	2202      	movs	r2, #2
 8016f8e:	4013      	ands	r3, r2
 8016f90:	d0f1      	beq.n	8016f76 <HAL_RCC_OscConfig+0x3e6>
 8016f92:	e018      	b.n	8016fc6 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8016f94:	4b9e      	ldr	r3, [pc, #632]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8016f96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016f98:	4b9d      	ldr	r3, [pc, #628]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8016f9a:	2101      	movs	r1, #1
 8016f9c:	438a      	bics	r2, r1
 8016f9e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8016fa0:	f7fe fb74 	bl	801568c <HAL_GetTick>
 8016fa4:	0003      	movs	r3, r0
 8016fa6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8016fa8:	e008      	b.n	8016fbc <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8016faa:	f7fe fb6f 	bl	801568c <HAL_GetTick>
 8016fae:	0002      	movs	r2, r0
 8016fb0:	697b      	ldr	r3, [r7, #20]
 8016fb2:	1ad3      	subs	r3, r2, r3
 8016fb4:	2b02      	cmp	r3, #2
 8016fb6:	d901      	bls.n	8016fbc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8016fb8:	2303      	movs	r3, #3
 8016fba:	e1ae      	b.n	801731a <HAL_RCC_OscConfig+0x78a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8016fbc:	4b94      	ldr	r3, [pc, #592]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8016fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016fc0:	2202      	movs	r2, #2
 8016fc2:	4013      	ands	r3, r2
 8016fc4:	d1f1      	bne.n	8016faa <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	2204      	movs	r2, #4
 8016fcc:	4013      	ands	r3, r2
 8016fce:	d100      	bne.n	8016fd2 <HAL_RCC_OscConfig+0x442>
 8016fd0:	e0ae      	b.n	8017130 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8016fd2:	2023      	movs	r0, #35	@ 0x23
 8016fd4:	183b      	adds	r3, r7, r0
 8016fd6:	2200      	movs	r2, #0
 8016fd8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8016fda:	4b8d      	ldr	r3, [pc, #564]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8016fdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016fde:	2380      	movs	r3, #128	@ 0x80
 8016fe0:	055b      	lsls	r3, r3, #21
 8016fe2:	4013      	ands	r3, r2
 8016fe4:	d109      	bne.n	8016ffa <HAL_RCC_OscConfig+0x46a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8016fe6:	4b8a      	ldr	r3, [pc, #552]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8016fe8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016fea:	4b89      	ldr	r3, [pc, #548]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8016fec:	2180      	movs	r1, #128	@ 0x80
 8016fee:	0549      	lsls	r1, r1, #21
 8016ff0:	430a      	orrs	r2, r1
 8016ff2:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8016ff4:	183b      	adds	r3, r7, r0
 8016ff6:	2201      	movs	r2, #1
 8016ff8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8016ffa:	4b88      	ldr	r3, [pc, #544]	@ (801721c <HAL_RCC_OscConfig+0x68c>)
 8016ffc:	681a      	ldr	r2, [r3, #0]
 8016ffe:	2380      	movs	r3, #128	@ 0x80
 8017000:	005b      	lsls	r3, r3, #1
 8017002:	4013      	ands	r3, r2
 8017004:	d11a      	bne.n	801703c <HAL_RCC_OscConfig+0x4ac>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8017006:	4b85      	ldr	r3, [pc, #532]	@ (801721c <HAL_RCC_OscConfig+0x68c>)
 8017008:	681a      	ldr	r2, [r3, #0]
 801700a:	4b84      	ldr	r3, [pc, #528]	@ (801721c <HAL_RCC_OscConfig+0x68c>)
 801700c:	2180      	movs	r1, #128	@ 0x80
 801700e:	0049      	lsls	r1, r1, #1
 8017010:	430a      	orrs	r2, r1
 8017012:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8017014:	f7fe fb3a 	bl	801568c <HAL_GetTick>
 8017018:	0003      	movs	r3, r0
 801701a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801701c:	e008      	b.n	8017030 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801701e:	f7fe fb35 	bl	801568c <HAL_GetTick>
 8017022:	0002      	movs	r2, r0
 8017024:	697b      	ldr	r3, [r7, #20]
 8017026:	1ad3      	subs	r3, r2, r3
 8017028:	2b64      	cmp	r3, #100	@ 0x64
 801702a:	d901      	bls.n	8017030 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 801702c:	2303      	movs	r3, #3
 801702e:	e174      	b.n	801731a <HAL_RCC_OscConfig+0x78a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017030:	4b7a      	ldr	r3, [pc, #488]	@ (801721c <HAL_RCC_OscConfig+0x68c>)
 8017032:	681a      	ldr	r2, [r3, #0]
 8017034:	2380      	movs	r3, #128	@ 0x80
 8017036:	005b      	lsls	r3, r3, #1
 8017038:	4013      	ands	r3, r2
 801703a:	d0f0      	beq.n	801701e <HAL_RCC_OscConfig+0x48e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	689a      	ldr	r2, [r3, #8]
 8017040:	2380      	movs	r3, #128	@ 0x80
 8017042:	005b      	lsls	r3, r3, #1
 8017044:	429a      	cmp	r2, r3
 8017046:	d107      	bne.n	8017058 <HAL_RCC_OscConfig+0x4c8>
 8017048:	4b71      	ldr	r3, [pc, #452]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 801704a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801704c:	4b70      	ldr	r3, [pc, #448]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 801704e:	2180      	movs	r1, #128	@ 0x80
 8017050:	0049      	lsls	r1, r1, #1
 8017052:	430a      	orrs	r2, r1
 8017054:	651a      	str	r2, [r3, #80]	@ 0x50
 8017056:	e031      	b.n	80170bc <HAL_RCC_OscConfig+0x52c>
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	689b      	ldr	r3, [r3, #8]
 801705c:	2b00      	cmp	r3, #0
 801705e:	d10c      	bne.n	801707a <HAL_RCC_OscConfig+0x4ea>
 8017060:	4b6b      	ldr	r3, [pc, #428]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8017062:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017064:	4b6a      	ldr	r3, [pc, #424]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8017066:	496c      	ldr	r1, [pc, #432]	@ (8017218 <HAL_RCC_OscConfig+0x688>)
 8017068:	400a      	ands	r2, r1
 801706a:	651a      	str	r2, [r3, #80]	@ 0x50
 801706c:	4b68      	ldr	r3, [pc, #416]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 801706e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017070:	4b67      	ldr	r3, [pc, #412]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8017072:	496b      	ldr	r1, [pc, #428]	@ (8017220 <HAL_RCC_OscConfig+0x690>)
 8017074:	400a      	ands	r2, r1
 8017076:	651a      	str	r2, [r3, #80]	@ 0x50
 8017078:	e020      	b.n	80170bc <HAL_RCC_OscConfig+0x52c>
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	689a      	ldr	r2, [r3, #8]
 801707e:	23a0      	movs	r3, #160	@ 0xa0
 8017080:	00db      	lsls	r3, r3, #3
 8017082:	429a      	cmp	r2, r3
 8017084:	d10e      	bne.n	80170a4 <HAL_RCC_OscConfig+0x514>
 8017086:	4b62      	ldr	r3, [pc, #392]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8017088:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801708a:	4b61      	ldr	r3, [pc, #388]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 801708c:	2180      	movs	r1, #128	@ 0x80
 801708e:	00c9      	lsls	r1, r1, #3
 8017090:	430a      	orrs	r2, r1
 8017092:	651a      	str	r2, [r3, #80]	@ 0x50
 8017094:	4b5e      	ldr	r3, [pc, #376]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8017096:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017098:	4b5d      	ldr	r3, [pc, #372]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 801709a:	2180      	movs	r1, #128	@ 0x80
 801709c:	0049      	lsls	r1, r1, #1
 801709e:	430a      	orrs	r2, r1
 80170a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80170a2:	e00b      	b.n	80170bc <HAL_RCC_OscConfig+0x52c>
 80170a4:	4b5a      	ldr	r3, [pc, #360]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 80170a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80170a8:	4b59      	ldr	r3, [pc, #356]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 80170aa:	495b      	ldr	r1, [pc, #364]	@ (8017218 <HAL_RCC_OscConfig+0x688>)
 80170ac:	400a      	ands	r2, r1
 80170ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80170b0:	4b57      	ldr	r3, [pc, #348]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 80170b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80170b4:	4b56      	ldr	r3, [pc, #344]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 80170b6:	495a      	ldr	r1, [pc, #360]	@ (8017220 <HAL_RCC_OscConfig+0x690>)
 80170b8:	400a      	ands	r2, r1
 80170ba:	651a      	str	r2, [r3, #80]	@ 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	689b      	ldr	r3, [r3, #8]
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d015      	beq.n	80170f0 <HAL_RCC_OscConfig+0x560>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80170c4:	f7fe fae2 	bl	801568c <HAL_GetTick>
 80170c8:	0003      	movs	r3, r0
 80170ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80170cc:	e009      	b.n	80170e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80170ce:	f7fe fadd 	bl	801568c <HAL_GetTick>
 80170d2:	0002      	movs	r2, r0
 80170d4:	697b      	ldr	r3, [r7, #20]
 80170d6:	1ad3      	subs	r3, r2, r3
 80170d8:	4a52      	ldr	r2, [pc, #328]	@ (8017224 <HAL_RCC_OscConfig+0x694>)
 80170da:	4293      	cmp	r3, r2
 80170dc:	d901      	bls.n	80170e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80170de:	2303      	movs	r3, #3
 80170e0:	e11b      	b.n	801731a <HAL_RCC_OscConfig+0x78a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80170e2:	4b4b      	ldr	r3, [pc, #300]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 80170e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80170e6:	2380      	movs	r3, #128	@ 0x80
 80170e8:	009b      	lsls	r3, r3, #2
 80170ea:	4013      	ands	r3, r2
 80170ec:	d0ef      	beq.n	80170ce <HAL_RCC_OscConfig+0x53e>
 80170ee:	e014      	b.n	801711a <HAL_RCC_OscConfig+0x58a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80170f0:	f7fe facc 	bl	801568c <HAL_GetTick>
 80170f4:	0003      	movs	r3, r0
 80170f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80170f8:	e009      	b.n	801710e <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80170fa:	f7fe fac7 	bl	801568c <HAL_GetTick>
 80170fe:	0002      	movs	r2, r0
 8017100:	697b      	ldr	r3, [r7, #20]
 8017102:	1ad3      	subs	r3, r2, r3
 8017104:	4a47      	ldr	r2, [pc, #284]	@ (8017224 <HAL_RCC_OscConfig+0x694>)
 8017106:	4293      	cmp	r3, r2
 8017108:	d901      	bls.n	801710e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 801710a:	2303      	movs	r3, #3
 801710c:	e105      	b.n	801731a <HAL_RCC_OscConfig+0x78a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801710e:	4b40      	ldr	r3, [pc, #256]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8017110:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017112:	2380      	movs	r3, #128	@ 0x80
 8017114:	009b      	lsls	r3, r3, #2
 8017116:	4013      	ands	r3, r2
 8017118:	d1ef      	bne.n	80170fa <HAL_RCC_OscConfig+0x56a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801711a:	2323      	movs	r3, #35	@ 0x23
 801711c:	18fb      	adds	r3, r7, r3
 801711e:	781b      	ldrb	r3, [r3, #0]
 8017120:	2b01      	cmp	r3, #1
 8017122:	d105      	bne.n	8017130 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8017124:	4b3a      	ldr	r3, [pc, #232]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8017126:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017128:	4b39      	ldr	r3, [pc, #228]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 801712a:	493f      	ldr	r1, [pc, #252]	@ (8017228 <HAL_RCC_OscConfig+0x698>)
 801712c:	400a      	ands	r2, r1
 801712e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	681b      	ldr	r3, [r3, #0]
 8017134:	2220      	movs	r2, #32
 8017136:	4013      	ands	r3, r2
 8017138:	d049      	beq.n	80171ce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	699b      	ldr	r3, [r3, #24]
 801713e:	2b00      	cmp	r3, #0
 8017140:	d026      	beq.n	8017190 <HAL_RCC_OscConfig+0x600>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8017142:	4b33      	ldr	r3, [pc, #204]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8017144:	689a      	ldr	r2, [r3, #8]
 8017146:	4b32      	ldr	r3, [pc, #200]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8017148:	2101      	movs	r1, #1
 801714a:	430a      	orrs	r2, r1
 801714c:	609a      	str	r2, [r3, #8]
 801714e:	4b30      	ldr	r3, [pc, #192]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8017150:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017152:	4b2f      	ldr	r3, [pc, #188]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8017154:	2101      	movs	r1, #1
 8017156:	430a      	orrs	r2, r1
 8017158:	635a      	str	r2, [r3, #52]	@ 0x34
 801715a:	4b34      	ldr	r3, [pc, #208]	@ (801722c <HAL_RCC_OscConfig+0x69c>)
 801715c:	6a1a      	ldr	r2, [r3, #32]
 801715e:	4b33      	ldr	r3, [pc, #204]	@ (801722c <HAL_RCC_OscConfig+0x69c>)
 8017160:	2180      	movs	r1, #128	@ 0x80
 8017162:	0189      	lsls	r1, r1, #6
 8017164:	430a      	orrs	r2, r1
 8017166:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017168:	f7fe fa90 	bl	801568c <HAL_GetTick>
 801716c:	0003      	movs	r3, r0
 801716e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8017170:	e008      	b.n	8017184 <HAL_RCC_OscConfig+0x5f4>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8017172:	f7fe fa8b 	bl	801568c <HAL_GetTick>
 8017176:	0002      	movs	r2, r0
 8017178:	697b      	ldr	r3, [r7, #20]
 801717a:	1ad3      	subs	r3, r2, r3
 801717c:	2b02      	cmp	r3, #2
 801717e:	d901      	bls.n	8017184 <HAL_RCC_OscConfig+0x5f4>
          {
            return HAL_TIMEOUT;
 8017180:	2303      	movs	r3, #3
 8017182:	e0ca      	b.n	801731a <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8017184:	4b22      	ldr	r3, [pc, #136]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8017186:	689b      	ldr	r3, [r3, #8]
 8017188:	2202      	movs	r2, #2
 801718a:	4013      	ands	r3, r2
 801718c:	d0f1      	beq.n	8017172 <HAL_RCC_OscConfig+0x5e2>
 801718e:	e01e      	b.n	80171ce <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8017190:	4b1f      	ldr	r3, [pc, #124]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8017192:	689a      	ldr	r2, [r3, #8]
 8017194:	4b1e      	ldr	r3, [pc, #120]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 8017196:	2101      	movs	r1, #1
 8017198:	438a      	bics	r2, r1
 801719a:	609a      	str	r2, [r3, #8]
 801719c:	4b23      	ldr	r3, [pc, #140]	@ (801722c <HAL_RCC_OscConfig+0x69c>)
 801719e:	6a1a      	ldr	r2, [r3, #32]
 80171a0:	4b22      	ldr	r3, [pc, #136]	@ (801722c <HAL_RCC_OscConfig+0x69c>)
 80171a2:	4923      	ldr	r1, [pc, #140]	@ (8017230 <HAL_RCC_OscConfig+0x6a0>)
 80171a4:	400a      	ands	r2, r1
 80171a6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80171a8:	f7fe fa70 	bl	801568c <HAL_GetTick>
 80171ac:	0003      	movs	r3, r0
 80171ae:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80171b0:	e008      	b.n	80171c4 <HAL_RCC_OscConfig+0x634>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80171b2:	f7fe fa6b 	bl	801568c <HAL_GetTick>
 80171b6:	0002      	movs	r2, r0
 80171b8:	697b      	ldr	r3, [r7, #20]
 80171ba:	1ad3      	subs	r3, r2, r3
 80171bc:	2b02      	cmp	r3, #2
 80171be:	d901      	bls.n	80171c4 <HAL_RCC_OscConfig+0x634>
          {
            return HAL_TIMEOUT;
 80171c0:	2303      	movs	r3, #3
 80171c2:	e0aa      	b.n	801731a <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80171c4:	4b12      	ldr	r3, [pc, #72]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 80171c6:	689b      	ldr	r3, [r3, #8]
 80171c8:	2202      	movs	r2, #2
 80171ca:	4013      	ands	r3, r2
 80171cc:	d1f1      	bne.n	80171b2 <HAL_RCC_OscConfig+0x622>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d100      	bne.n	80171d8 <HAL_RCC_OscConfig+0x648>
 80171d6:	e09f      	b.n	8017318 <HAL_RCC_OscConfig+0x788>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80171d8:	69fb      	ldr	r3, [r7, #28]
 80171da:	2b0c      	cmp	r3, #12
 80171dc:	d100      	bne.n	80171e0 <HAL_RCC_OscConfig+0x650>
 80171de:	e078      	b.n	80172d2 <HAL_RCC_OscConfig+0x742>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80171e4:	2b02      	cmp	r3, #2
 80171e6:	d159      	bne.n	801729c <HAL_RCC_OscConfig+0x70c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80171e8:	4b09      	ldr	r3, [pc, #36]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 80171ea:	681a      	ldr	r2, [r3, #0]
 80171ec:	4b08      	ldr	r3, [pc, #32]	@ (8017210 <HAL_RCC_OscConfig+0x680>)
 80171ee:	4911      	ldr	r1, [pc, #68]	@ (8017234 <HAL_RCC_OscConfig+0x6a4>)
 80171f0:	400a      	ands	r2, r1
 80171f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80171f4:	f7fe fa4a 	bl	801568c <HAL_GetTick>
 80171f8:	0003      	movs	r3, r0
 80171fa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80171fc:	e01c      	b.n	8017238 <HAL_RCC_OscConfig+0x6a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80171fe:	f7fe fa45 	bl	801568c <HAL_GetTick>
 8017202:	0002      	movs	r2, r0
 8017204:	697b      	ldr	r3, [r7, #20]
 8017206:	1ad3      	subs	r3, r2, r3
 8017208:	2b02      	cmp	r3, #2
 801720a:	d915      	bls.n	8017238 <HAL_RCC_OscConfig+0x6a8>
          {
            return HAL_TIMEOUT;
 801720c:	2303      	movs	r3, #3
 801720e:	e084      	b.n	801731a <HAL_RCC_OscConfig+0x78a>
 8017210:	40021000 	.word	0x40021000
 8017214:	ffff1fff 	.word	0xffff1fff
 8017218:	fffffeff 	.word	0xfffffeff
 801721c:	40007000 	.word	0x40007000
 8017220:	fffffbff 	.word	0xfffffbff
 8017224:	00001388 	.word	0x00001388
 8017228:	efffffff 	.word	0xefffffff
 801722c:	40010000 	.word	0x40010000
 8017230:	ffffdfff 	.word	0xffffdfff
 8017234:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8017238:	4b3a      	ldr	r3, [pc, #232]	@ (8017324 <HAL_RCC_OscConfig+0x794>)
 801723a:	681a      	ldr	r2, [r3, #0]
 801723c:	2380      	movs	r3, #128	@ 0x80
 801723e:	049b      	lsls	r3, r3, #18
 8017240:	4013      	ands	r3, r2
 8017242:	d1dc      	bne.n	80171fe <HAL_RCC_OscConfig+0x66e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8017244:	4b37      	ldr	r3, [pc, #220]	@ (8017324 <HAL_RCC_OscConfig+0x794>)
 8017246:	68db      	ldr	r3, [r3, #12]
 8017248:	4a37      	ldr	r2, [pc, #220]	@ (8017328 <HAL_RCC_OscConfig+0x798>)
 801724a:	4013      	ands	r3, r2
 801724c:	0019      	movs	r1, r3
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017256:	431a      	orrs	r2, r3
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801725c:	431a      	orrs	r2, r3
 801725e:	4b31      	ldr	r3, [pc, #196]	@ (8017324 <HAL_RCC_OscConfig+0x794>)
 8017260:	430a      	orrs	r2, r1
 8017262:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8017264:	4b2f      	ldr	r3, [pc, #188]	@ (8017324 <HAL_RCC_OscConfig+0x794>)
 8017266:	681a      	ldr	r2, [r3, #0]
 8017268:	4b2e      	ldr	r3, [pc, #184]	@ (8017324 <HAL_RCC_OscConfig+0x794>)
 801726a:	2180      	movs	r1, #128	@ 0x80
 801726c:	0449      	lsls	r1, r1, #17
 801726e:	430a      	orrs	r2, r1
 8017270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017272:	f7fe fa0b 	bl	801568c <HAL_GetTick>
 8017276:	0003      	movs	r3, r0
 8017278:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801727a:	e008      	b.n	801728e <HAL_RCC_OscConfig+0x6fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801727c:	f7fe fa06 	bl	801568c <HAL_GetTick>
 8017280:	0002      	movs	r2, r0
 8017282:	697b      	ldr	r3, [r7, #20]
 8017284:	1ad3      	subs	r3, r2, r3
 8017286:	2b02      	cmp	r3, #2
 8017288:	d901      	bls.n	801728e <HAL_RCC_OscConfig+0x6fe>
          {
            return HAL_TIMEOUT;
 801728a:	2303      	movs	r3, #3
 801728c:	e045      	b.n	801731a <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801728e:	4b25      	ldr	r3, [pc, #148]	@ (8017324 <HAL_RCC_OscConfig+0x794>)
 8017290:	681a      	ldr	r2, [r3, #0]
 8017292:	2380      	movs	r3, #128	@ 0x80
 8017294:	049b      	lsls	r3, r3, #18
 8017296:	4013      	ands	r3, r2
 8017298:	d0f0      	beq.n	801727c <HAL_RCC_OscConfig+0x6ec>
 801729a:	e03d      	b.n	8017318 <HAL_RCC_OscConfig+0x788>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801729c:	4b21      	ldr	r3, [pc, #132]	@ (8017324 <HAL_RCC_OscConfig+0x794>)
 801729e:	681a      	ldr	r2, [r3, #0]
 80172a0:	4b20      	ldr	r3, [pc, #128]	@ (8017324 <HAL_RCC_OscConfig+0x794>)
 80172a2:	4922      	ldr	r1, [pc, #136]	@ (801732c <HAL_RCC_OscConfig+0x79c>)
 80172a4:	400a      	ands	r2, r1
 80172a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80172a8:	f7fe f9f0 	bl	801568c <HAL_GetTick>
 80172ac:	0003      	movs	r3, r0
 80172ae:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80172b0:	e008      	b.n	80172c4 <HAL_RCC_OscConfig+0x734>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80172b2:	f7fe f9eb 	bl	801568c <HAL_GetTick>
 80172b6:	0002      	movs	r2, r0
 80172b8:	697b      	ldr	r3, [r7, #20]
 80172ba:	1ad3      	subs	r3, r2, r3
 80172bc:	2b02      	cmp	r3, #2
 80172be:	d901      	bls.n	80172c4 <HAL_RCC_OscConfig+0x734>
          {
            return HAL_TIMEOUT;
 80172c0:	2303      	movs	r3, #3
 80172c2:	e02a      	b.n	801731a <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80172c4:	4b17      	ldr	r3, [pc, #92]	@ (8017324 <HAL_RCC_OscConfig+0x794>)
 80172c6:	681a      	ldr	r2, [r3, #0]
 80172c8:	2380      	movs	r3, #128	@ 0x80
 80172ca:	049b      	lsls	r3, r3, #18
 80172cc:	4013      	ands	r3, r2
 80172ce:	d1f0      	bne.n	80172b2 <HAL_RCC_OscConfig+0x722>
 80172d0:	e022      	b.n	8017318 <HAL_RCC_OscConfig+0x788>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80172d6:	2b01      	cmp	r3, #1
 80172d8:	d101      	bne.n	80172de <HAL_RCC_OscConfig+0x74e>
      {
        return HAL_ERROR;
 80172da:	2301      	movs	r3, #1
 80172dc:	e01d      	b.n	801731a <HAL_RCC_OscConfig+0x78a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80172de:	4b11      	ldr	r3, [pc, #68]	@ (8017324 <HAL_RCC_OscConfig+0x794>)
 80172e0:	68db      	ldr	r3, [r3, #12]
 80172e2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80172e4:	69ba      	ldr	r2, [r7, #24]
 80172e6:	2380      	movs	r3, #128	@ 0x80
 80172e8:	025b      	lsls	r3, r3, #9
 80172ea:	401a      	ands	r2, r3
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80172f0:	429a      	cmp	r2, r3
 80172f2:	d10f      	bne.n	8017314 <HAL_RCC_OscConfig+0x784>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80172f4:	69ba      	ldr	r2, [r7, #24]
 80172f6:	23f0      	movs	r3, #240	@ 0xf0
 80172f8:	039b      	lsls	r3, r3, #14
 80172fa:	401a      	ands	r2, r3
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017300:	429a      	cmp	r2, r3
 8017302:	d107      	bne.n	8017314 <HAL_RCC_OscConfig+0x784>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8017304:	69ba      	ldr	r2, [r7, #24]
 8017306:	23c0      	movs	r3, #192	@ 0xc0
 8017308:	041b      	lsls	r3, r3, #16
 801730a:	401a      	ands	r2, r3
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8017310:	429a      	cmp	r2, r3
 8017312:	d001      	beq.n	8017318 <HAL_RCC_OscConfig+0x788>
        {
          return HAL_ERROR;
 8017314:	2301      	movs	r3, #1
 8017316:	e000      	b.n	801731a <HAL_RCC_OscConfig+0x78a>
        }
      }
    }
  }

  return HAL_OK;
 8017318:	2300      	movs	r3, #0
}
 801731a:	0018      	movs	r0, r3
 801731c:	46bd      	mov	sp, r7
 801731e:	b00a      	add	sp, #40	@ 0x28
 8017320:	bdb0      	pop	{r4, r5, r7, pc}
 8017322:	46c0      	nop			@ (mov r8, r8)
 8017324:	40021000 	.word	0x40021000
 8017328:	ff02ffff 	.word	0xff02ffff
 801732c:	feffffff 	.word	0xfeffffff

08017330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8017330:	b5b0      	push	{r4, r5, r7, lr}
 8017332:	b084      	sub	sp, #16
 8017334:	af00      	add	r7, sp, #0
 8017336:	6078      	str	r0, [r7, #4]
 8017338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	2b00      	cmp	r3, #0
 801733e:	d101      	bne.n	8017344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8017340:	2301      	movs	r3, #1
 8017342:	e10d      	b.n	8017560 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8017344:	4b88      	ldr	r3, [pc, #544]	@ (8017568 <HAL_RCC_ClockConfig+0x238>)
 8017346:	681b      	ldr	r3, [r3, #0]
 8017348:	2201      	movs	r2, #1
 801734a:	4013      	ands	r3, r2
 801734c:	683a      	ldr	r2, [r7, #0]
 801734e:	429a      	cmp	r2, r3
 8017350:	d911      	bls.n	8017376 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017352:	4b85      	ldr	r3, [pc, #532]	@ (8017568 <HAL_RCC_ClockConfig+0x238>)
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	2201      	movs	r2, #1
 8017358:	4393      	bics	r3, r2
 801735a:	0019      	movs	r1, r3
 801735c:	4b82      	ldr	r3, [pc, #520]	@ (8017568 <HAL_RCC_ClockConfig+0x238>)
 801735e:	683a      	ldr	r2, [r7, #0]
 8017360:	430a      	orrs	r2, r1
 8017362:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8017364:	4b80      	ldr	r3, [pc, #512]	@ (8017568 <HAL_RCC_ClockConfig+0x238>)
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	2201      	movs	r2, #1
 801736a:	4013      	ands	r3, r2
 801736c:	683a      	ldr	r2, [r7, #0]
 801736e:	429a      	cmp	r2, r3
 8017370:	d001      	beq.n	8017376 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8017372:	2301      	movs	r3, #1
 8017374:	e0f4      	b.n	8017560 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	2202      	movs	r2, #2
 801737c:	4013      	ands	r3, r2
 801737e:	d009      	beq.n	8017394 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8017380:	4b7a      	ldr	r3, [pc, #488]	@ (801756c <HAL_RCC_ClockConfig+0x23c>)
 8017382:	68db      	ldr	r3, [r3, #12]
 8017384:	22f0      	movs	r2, #240	@ 0xf0
 8017386:	4393      	bics	r3, r2
 8017388:	0019      	movs	r1, r3
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	689a      	ldr	r2, [r3, #8]
 801738e:	4b77      	ldr	r3, [pc, #476]	@ (801756c <HAL_RCC_ClockConfig+0x23c>)
 8017390:	430a      	orrs	r2, r1
 8017392:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	2201      	movs	r2, #1
 801739a:	4013      	ands	r3, r2
 801739c:	d100      	bne.n	80173a0 <HAL_RCC_ClockConfig+0x70>
 801739e:	e089      	b.n	80174b4 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	685b      	ldr	r3, [r3, #4]
 80173a4:	2b02      	cmp	r3, #2
 80173a6:	d107      	bne.n	80173b8 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80173a8:	4b70      	ldr	r3, [pc, #448]	@ (801756c <HAL_RCC_ClockConfig+0x23c>)
 80173aa:	681a      	ldr	r2, [r3, #0]
 80173ac:	2380      	movs	r3, #128	@ 0x80
 80173ae:	029b      	lsls	r3, r3, #10
 80173b0:	4013      	ands	r3, r2
 80173b2:	d120      	bne.n	80173f6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80173b4:	2301      	movs	r3, #1
 80173b6:	e0d3      	b.n	8017560 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	685b      	ldr	r3, [r3, #4]
 80173bc:	2b03      	cmp	r3, #3
 80173be:	d107      	bne.n	80173d0 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80173c0:	4b6a      	ldr	r3, [pc, #424]	@ (801756c <HAL_RCC_ClockConfig+0x23c>)
 80173c2:	681a      	ldr	r2, [r3, #0]
 80173c4:	2380      	movs	r3, #128	@ 0x80
 80173c6:	049b      	lsls	r3, r3, #18
 80173c8:	4013      	ands	r3, r2
 80173ca:	d114      	bne.n	80173f6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80173cc:	2301      	movs	r3, #1
 80173ce:	e0c7      	b.n	8017560 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	685b      	ldr	r3, [r3, #4]
 80173d4:	2b01      	cmp	r3, #1
 80173d6:	d106      	bne.n	80173e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80173d8:	4b64      	ldr	r3, [pc, #400]	@ (801756c <HAL_RCC_ClockConfig+0x23c>)
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	2204      	movs	r2, #4
 80173de:	4013      	ands	r3, r2
 80173e0:	d109      	bne.n	80173f6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80173e2:	2301      	movs	r3, #1
 80173e4:	e0bc      	b.n	8017560 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80173e6:	4b61      	ldr	r3, [pc, #388]	@ (801756c <HAL_RCC_ClockConfig+0x23c>)
 80173e8:	681a      	ldr	r2, [r3, #0]
 80173ea:	2380      	movs	r3, #128	@ 0x80
 80173ec:	009b      	lsls	r3, r3, #2
 80173ee:	4013      	ands	r3, r2
 80173f0:	d101      	bne.n	80173f6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80173f2:	2301      	movs	r3, #1
 80173f4:	e0b4      	b.n	8017560 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80173f6:	4b5d      	ldr	r3, [pc, #372]	@ (801756c <HAL_RCC_ClockConfig+0x23c>)
 80173f8:	68db      	ldr	r3, [r3, #12]
 80173fa:	2203      	movs	r2, #3
 80173fc:	4393      	bics	r3, r2
 80173fe:	0019      	movs	r1, r3
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	685a      	ldr	r2, [r3, #4]
 8017404:	4b59      	ldr	r3, [pc, #356]	@ (801756c <HAL_RCC_ClockConfig+0x23c>)
 8017406:	430a      	orrs	r2, r1
 8017408:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801740a:	f7fe f93f 	bl	801568c <HAL_GetTick>
 801740e:	0003      	movs	r3, r0
 8017410:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	685b      	ldr	r3, [r3, #4]
 8017416:	2b02      	cmp	r3, #2
 8017418:	d111      	bne.n	801743e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801741a:	e009      	b.n	8017430 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801741c:	f7fe f936 	bl	801568c <HAL_GetTick>
 8017420:	0002      	movs	r2, r0
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	1ad3      	subs	r3, r2, r3
 8017426:	4a52      	ldr	r2, [pc, #328]	@ (8017570 <HAL_RCC_ClockConfig+0x240>)
 8017428:	4293      	cmp	r3, r2
 801742a:	d901      	bls.n	8017430 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 801742c:	2303      	movs	r3, #3
 801742e:	e097      	b.n	8017560 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8017430:	4b4e      	ldr	r3, [pc, #312]	@ (801756c <HAL_RCC_ClockConfig+0x23c>)
 8017432:	68db      	ldr	r3, [r3, #12]
 8017434:	220c      	movs	r2, #12
 8017436:	4013      	ands	r3, r2
 8017438:	2b08      	cmp	r3, #8
 801743a:	d1ef      	bne.n	801741c <HAL_RCC_ClockConfig+0xec>
 801743c:	e03a      	b.n	80174b4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	685b      	ldr	r3, [r3, #4]
 8017442:	2b03      	cmp	r3, #3
 8017444:	d111      	bne.n	801746a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017446:	e009      	b.n	801745c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017448:	f7fe f920 	bl	801568c <HAL_GetTick>
 801744c:	0002      	movs	r2, r0
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	1ad3      	subs	r3, r2, r3
 8017452:	4a47      	ldr	r2, [pc, #284]	@ (8017570 <HAL_RCC_ClockConfig+0x240>)
 8017454:	4293      	cmp	r3, r2
 8017456:	d901      	bls.n	801745c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8017458:	2303      	movs	r3, #3
 801745a:	e081      	b.n	8017560 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801745c:	4b43      	ldr	r3, [pc, #268]	@ (801756c <HAL_RCC_ClockConfig+0x23c>)
 801745e:	68db      	ldr	r3, [r3, #12]
 8017460:	220c      	movs	r2, #12
 8017462:	4013      	ands	r3, r2
 8017464:	2b0c      	cmp	r3, #12
 8017466:	d1ef      	bne.n	8017448 <HAL_RCC_ClockConfig+0x118>
 8017468:	e024      	b.n	80174b4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	685b      	ldr	r3, [r3, #4]
 801746e:	2b01      	cmp	r3, #1
 8017470:	d11b      	bne.n	80174aa <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8017472:	e009      	b.n	8017488 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017474:	f7fe f90a 	bl	801568c <HAL_GetTick>
 8017478:	0002      	movs	r2, r0
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	1ad3      	subs	r3, r2, r3
 801747e:	4a3c      	ldr	r2, [pc, #240]	@ (8017570 <HAL_RCC_ClockConfig+0x240>)
 8017480:	4293      	cmp	r3, r2
 8017482:	d901      	bls.n	8017488 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8017484:	2303      	movs	r3, #3
 8017486:	e06b      	b.n	8017560 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8017488:	4b38      	ldr	r3, [pc, #224]	@ (801756c <HAL_RCC_ClockConfig+0x23c>)
 801748a:	68db      	ldr	r3, [r3, #12]
 801748c:	220c      	movs	r2, #12
 801748e:	4013      	ands	r3, r2
 8017490:	2b04      	cmp	r3, #4
 8017492:	d1ef      	bne.n	8017474 <HAL_RCC_ClockConfig+0x144>
 8017494:	e00e      	b.n	80174b4 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017496:	f7fe f8f9 	bl	801568c <HAL_GetTick>
 801749a:	0002      	movs	r2, r0
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	1ad3      	subs	r3, r2, r3
 80174a0:	4a33      	ldr	r2, [pc, #204]	@ (8017570 <HAL_RCC_ClockConfig+0x240>)
 80174a2:	4293      	cmp	r3, r2
 80174a4:	d901      	bls.n	80174aa <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80174a6:	2303      	movs	r3, #3
 80174a8:	e05a      	b.n	8017560 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80174aa:	4b30      	ldr	r3, [pc, #192]	@ (801756c <HAL_RCC_ClockConfig+0x23c>)
 80174ac:	68db      	ldr	r3, [r3, #12]
 80174ae:	220c      	movs	r2, #12
 80174b0:	4013      	ands	r3, r2
 80174b2:	d1f0      	bne.n	8017496 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80174b4:	4b2c      	ldr	r3, [pc, #176]	@ (8017568 <HAL_RCC_ClockConfig+0x238>)
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	2201      	movs	r2, #1
 80174ba:	4013      	ands	r3, r2
 80174bc:	683a      	ldr	r2, [r7, #0]
 80174be:	429a      	cmp	r2, r3
 80174c0:	d211      	bcs.n	80174e6 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80174c2:	4b29      	ldr	r3, [pc, #164]	@ (8017568 <HAL_RCC_ClockConfig+0x238>)
 80174c4:	681b      	ldr	r3, [r3, #0]
 80174c6:	2201      	movs	r2, #1
 80174c8:	4393      	bics	r3, r2
 80174ca:	0019      	movs	r1, r3
 80174cc:	4b26      	ldr	r3, [pc, #152]	@ (8017568 <HAL_RCC_ClockConfig+0x238>)
 80174ce:	683a      	ldr	r2, [r7, #0]
 80174d0:	430a      	orrs	r2, r1
 80174d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80174d4:	4b24      	ldr	r3, [pc, #144]	@ (8017568 <HAL_RCC_ClockConfig+0x238>)
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	2201      	movs	r2, #1
 80174da:	4013      	ands	r3, r2
 80174dc:	683a      	ldr	r2, [r7, #0]
 80174de:	429a      	cmp	r2, r3
 80174e0:	d001      	beq.n	80174e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80174e2:	2301      	movs	r3, #1
 80174e4:	e03c      	b.n	8017560 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	2204      	movs	r2, #4
 80174ec:	4013      	ands	r3, r2
 80174ee:	d009      	beq.n	8017504 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80174f0:	4b1e      	ldr	r3, [pc, #120]	@ (801756c <HAL_RCC_ClockConfig+0x23c>)
 80174f2:	68db      	ldr	r3, [r3, #12]
 80174f4:	4a1f      	ldr	r2, [pc, #124]	@ (8017574 <HAL_RCC_ClockConfig+0x244>)
 80174f6:	4013      	ands	r3, r2
 80174f8:	0019      	movs	r1, r3
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	68da      	ldr	r2, [r3, #12]
 80174fe:	4b1b      	ldr	r3, [pc, #108]	@ (801756c <HAL_RCC_ClockConfig+0x23c>)
 8017500:	430a      	orrs	r2, r1
 8017502:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	2208      	movs	r2, #8
 801750a:	4013      	ands	r3, r2
 801750c:	d00a      	beq.n	8017524 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801750e:	4b17      	ldr	r3, [pc, #92]	@ (801756c <HAL_RCC_ClockConfig+0x23c>)
 8017510:	68db      	ldr	r3, [r3, #12]
 8017512:	4a19      	ldr	r2, [pc, #100]	@ (8017578 <HAL_RCC_ClockConfig+0x248>)
 8017514:	4013      	ands	r3, r2
 8017516:	0019      	movs	r1, r3
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	691b      	ldr	r3, [r3, #16]
 801751c:	00da      	lsls	r2, r3, #3
 801751e:	4b13      	ldr	r3, [pc, #76]	@ (801756c <HAL_RCC_ClockConfig+0x23c>)
 8017520:	430a      	orrs	r2, r1
 8017522:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8017524:	f000 f82e 	bl	8017584 <HAL_RCC_GetSysClockFreq>
 8017528:	0001      	movs	r1, r0
 801752a:	4b10      	ldr	r3, [pc, #64]	@ (801756c <HAL_RCC_ClockConfig+0x23c>)
 801752c:	68db      	ldr	r3, [r3, #12]
 801752e:	091b      	lsrs	r3, r3, #4
 8017530:	220f      	movs	r2, #15
 8017532:	4013      	ands	r3, r2
 8017534:	4a11      	ldr	r2, [pc, #68]	@ (801757c <HAL_RCC_ClockConfig+0x24c>)
 8017536:	5cd3      	ldrb	r3, [r2, r3]
 8017538:	000a      	movs	r2, r1
 801753a:	40da      	lsrs	r2, r3
 801753c:	4b10      	ldr	r3, [pc, #64]	@ (8017580 <HAL_RCC_ClockConfig+0x250>)
 801753e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8017540:	250b      	movs	r5, #11
 8017542:	197c      	adds	r4, r7, r5
 8017544:	2003      	movs	r0, #3
 8017546:	f7eb fd2f 	bl	8002fa8 <HAL_InitTick>
 801754a:	0003      	movs	r3, r0
 801754c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801754e:	002a      	movs	r2, r5
 8017550:	18bb      	adds	r3, r7, r2
 8017552:	781b      	ldrb	r3, [r3, #0]
 8017554:	2b00      	cmp	r3, #0
 8017556:	d002      	beq.n	801755e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8017558:	18bb      	adds	r3, r7, r2
 801755a:	781b      	ldrb	r3, [r3, #0]
 801755c:	e000      	b.n	8017560 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 801755e:	2300      	movs	r3, #0
}
 8017560:	0018      	movs	r0, r3
 8017562:	46bd      	mov	sp, r7
 8017564:	b004      	add	sp, #16
 8017566:	bdb0      	pop	{r4, r5, r7, pc}
 8017568:	40022000 	.word	0x40022000
 801756c:	40021000 	.word	0x40021000
 8017570:	00001388 	.word	0x00001388
 8017574:	fffff8ff 	.word	0xfffff8ff
 8017578:	ffffc7ff 	.word	0xffffc7ff
 801757c:	0801ae00 	.word	0x0801ae00
 8017580:	20000070 	.word	0x20000070

08017584 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8017584:	b580      	push	{r7, lr}
 8017586:	b086      	sub	sp, #24
 8017588:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801758a:	4b3c      	ldr	r3, [pc, #240]	@ (801767c <HAL_RCC_GetSysClockFreq+0xf8>)
 801758c:	68db      	ldr	r3, [r3, #12]
 801758e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	220c      	movs	r2, #12
 8017594:	4013      	ands	r3, r2
 8017596:	2b0c      	cmp	r3, #12
 8017598:	d013      	beq.n	80175c2 <HAL_RCC_GetSysClockFreq+0x3e>
 801759a:	d85c      	bhi.n	8017656 <HAL_RCC_GetSysClockFreq+0xd2>
 801759c:	2b04      	cmp	r3, #4
 801759e:	d002      	beq.n	80175a6 <HAL_RCC_GetSysClockFreq+0x22>
 80175a0:	2b08      	cmp	r3, #8
 80175a2:	d00b      	beq.n	80175bc <HAL_RCC_GetSysClockFreq+0x38>
 80175a4:	e057      	b.n	8017656 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80175a6:	4b35      	ldr	r3, [pc, #212]	@ (801767c <HAL_RCC_GetSysClockFreq+0xf8>)
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	2210      	movs	r2, #16
 80175ac:	4013      	ands	r3, r2
 80175ae:	d002      	beq.n	80175b6 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80175b0:	4b33      	ldr	r3, [pc, #204]	@ (8017680 <HAL_RCC_GetSysClockFreq+0xfc>)
 80175b2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80175b4:	e05d      	b.n	8017672 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80175b6:	4b33      	ldr	r3, [pc, #204]	@ (8017684 <HAL_RCC_GetSysClockFreq+0x100>)
 80175b8:	613b      	str	r3, [r7, #16]
      break;
 80175ba:	e05a      	b.n	8017672 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80175bc:	4b32      	ldr	r3, [pc, #200]	@ (8017688 <HAL_RCC_GetSysClockFreq+0x104>)
 80175be:	613b      	str	r3, [r7, #16]
      break;
 80175c0:	e057      	b.n	8017672 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	0c9b      	lsrs	r3, r3, #18
 80175c6:	220f      	movs	r2, #15
 80175c8:	4013      	ands	r3, r2
 80175ca:	4a30      	ldr	r2, [pc, #192]	@ (801768c <HAL_RCC_GetSysClockFreq+0x108>)
 80175cc:	5cd3      	ldrb	r3, [r2, r3]
 80175ce:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	0d9b      	lsrs	r3, r3, #22
 80175d4:	2203      	movs	r2, #3
 80175d6:	4013      	ands	r3, r2
 80175d8:	3301      	adds	r3, #1
 80175da:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80175dc:	4b27      	ldr	r3, [pc, #156]	@ (801767c <HAL_RCC_GetSysClockFreq+0xf8>)
 80175de:	68da      	ldr	r2, [r3, #12]
 80175e0:	2380      	movs	r3, #128	@ 0x80
 80175e2:	025b      	lsls	r3, r3, #9
 80175e4:	4013      	ands	r3, r2
 80175e6:	d00f      	beq.n	8017608 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80175e8:	68b9      	ldr	r1, [r7, #8]
 80175ea:	000a      	movs	r2, r1
 80175ec:	0152      	lsls	r2, r2, #5
 80175ee:	1a52      	subs	r2, r2, r1
 80175f0:	0193      	lsls	r3, r2, #6
 80175f2:	1a9b      	subs	r3, r3, r2
 80175f4:	00db      	lsls	r3, r3, #3
 80175f6:	185b      	adds	r3, r3, r1
 80175f8:	025b      	lsls	r3, r3, #9
 80175fa:	6879      	ldr	r1, [r7, #4]
 80175fc:	0018      	movs	r0, r3
 80175fe:	f7e8 fd8d 	bl	800011c <__udivsi3>
 8017602:	0003      	movs	r3, r0
 8017604:	617b      	str	r3, [r7, #20]
 8017606:	e023      	b.n	8017650 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8017608:	4b1c      	ldr	r3, [pc, #112]	@ (801767c <HAL_RCC_GetSysClockFreq+0xf8>)
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	2210      	movs	r2, #16
 801760e:	4013      	ands	r3, r2
 8017610:	d00f      	beq.n	8017632 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8017612:	68b9      	ldr	r1, [r7, #8]
 8017614:	000a      	movs	r2, r1
 8017616:	0152      	lsls	r2, r2, #5
 8017618:	1a52      	subs	r2, r2, r1
 801761a:	0193      	lsls	r3, r2, #6
 801761c:	1a9b      	subs	r3, r3, r2
 801761e:	00db      	lsls	r3, r3, #3
 8017620:	185b      	adds	r3, r3, r1
 8017622:	021b      	lsls	r3, r3, #8
 8017624:	6879      	ldr	r1, [r7, #4]
 8017626:	0018      	movs	r0, r3
 8017628:	f7e8 fd78 	bl	800011c <__udivsi3>
 801762c:	0003      	movs	r3, r0
 801762e:	617b      	str	r3, [r7, #20]
 8017630:	e00e      	b.n	8017650 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8017632:	68b9      	ldr	r1, [r7, #8]
 8017634:	000a      	movs	r2, r1
 8017636:	0152      	lsls	r2, r2, #5
 8017638:	1a52      	subs	r2, r2, r1
 801763a:	0193      	lsls	r3, r2, #6
 801763c:	1a9b      	subs	r3, r3, r2
 801763e:	00db      	lsls	r3, r3, #3
 8017640:	185b      	adds	r3, r3, r1
 8017642:	029b      	lsls	r3, r3, #10
 8017644:	6879      	ldr	r1, [r7, #4]
 8017646:	0018      	movs	r0, r3
 8017648:	f7e8 fd68 	bl	800011c <__udivsi3>
 801764c:	0003      	movs	r3, r0
 801764e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8017650:	697b      	ldr	r3, [r7, #20]
 8017652:	613b      	str	r3, [r7, #16]
      break;
 8017654:	e00d      	b.n	8017672 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8017656:	4b09      	ldr	r3, [pc, #36]	@ (801767c <HAL_RCC_GetSysClockFreq+0xf8>)
 8017658:	685b      	ldr	r3, [r3, #4]
 801765a:	0b5b      	lsrs	r3, r3, #13
 801765c:	2207      	movs	r2, #7
 801765e:	4013      	ands	r3, r2
 8017660:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8017662:	683b      	ldr	r3, [r7, #0]
 8017664:	3301      	adds	r3, #1
 8017666:	2280      	movs	r2, #128	@ 0x80
 8017668:	0212      	lsls	r2, r2, #8
 801766a:	409a      	lsls	r2, r3
 801766c:	0013      	movs	r3, r2
 801766e:	613b      	str	r3, [r7, #16]
      break;
 8017670:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8017672:	693b      	ldr	r3, [r7, #16]
}
 8017674:	0018      	movs	r0, r3
 8017676:	46bd      	mov	sp, r7
 8017678:	b006      	add	sp, #24
 801767a:	bd80      	pop	{r7, pc}
 801767c:	40021000 	.word	0x40021000
 8017680:	003d0900 	.word	0x003d0900
 8017684:	00f42400 	.word	0x00f42400
 8017688:	007a1200 	.word	0x007a1200
 801768c:	0801ae18 	.word	0x0801ae18

08017690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8017690:	b580      	push	{r7, lr}
 8017692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8017694:	4b02      	ldr	r3, [pc, #8]	@ (80176a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8017696:	681b      	ldr	r3, [r3, #0]
}
 8017698:	0018      	movs	r0, r3
 801769a:	46bd      	mov	sp, r7
 801769c:	bd80      	pop	{r7, pc}
 801769e:	46c0      	nop			@ (mov r8, r8)
 80176a0:	20000070 	.word	0x20000070

080176a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80176a4:	b580      	push	{r7, lr}
 80176a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80176a8:	f7ff fff2 	bl	8017690 <HAL_RCC_GetHCLKFreq>
 80176ac:	0001      	movs	r1, r0
 80176ae:	4b06      	ldr	r3, [pc, #24]	@ (80176c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80176b0:	68db      	ldr	r3, [r3, #12]
 80176b2:	0a1b      	lsrs	r3, r3, #8
 80176b4:	2207      	movs	r2, #7
 80176b6:	4013      	ands	r3, r2
 80176b8:	4a04      	ldr	r2, [pc, #16]	@ (80176cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80176ba:	5cd3      	ldrb	r3, [r2, r3]
 80176bc:	40d9      	lsrs	r1, r3
 80176be:	000b      	movs	r3, r1
}
 80176c0:	0018      	movs	r0, r3
 80176c2:	46bd      	mov	sp, r7
 80176c4:	bd80      	pop	{r7, pc}
 80176c6:	46c0      	nop			@ (mov r8, r8)
 80176c8:	40021000 	.word	0x40021000
 80176cc:	0801ae10 	.word	0x0801ae10

080176d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80176d0:	b580      	push	{r7, lr}
 80176d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80176d4:	f7ff ffdc 	bl	8017690 <HAL_RCC_GetHCLKFreq>
 80176d8:	0001      	movs	r1, r0
 80176da:	4b06      	ldr	r3, [pc, #24]	@ (80176f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80176dc:	68db      	ldr	r3, [r3, #12]
 80176de:	0adb      	lsrs	r3, r3, #11
 80176e0:	2207      	movs	r2, #7
 80176e2:	4013      	ands	r3, r2
 80176e4:	4a04      	ldr	r2, [pc, #16]	@ (80176f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80176e6:	5cd3      	ldrb	r3, [r2, r3]
 80176e8:	40d9      	lsrs	r1, r3
 80176ea:	000b      	movs	r3, r1
}
 80176ec:	0018      	movs	r0, r3
 80176ee:	46bd      	mov	sp, r7
 80176f0:	bd80      	pop	{r7, pc}
 80176f2:	46c0      	nop			@ (mov r8, r8)
 80176f4:	40021000 	.word	0x40021000
 80176f8:	0801ae10 	.word	0x0801ae10

080176fc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80176fc:	b580      	push	{r7, lr}
 80176fe:	b086      	sub	sp, #24
 8017700:	af00      	add	r7, sp, #0
 8017702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	2220      	movs	r2, #32
 801770a:	4013      	ands	r3, r2
 801770c:	d100      	bne.n	8017710 <HAL_RCCEx_PeriphCLKConfig+0x14>
 801770e:	e0c6      	b.n	801789e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8017710:	2017      	movs	r0, #23
 8017712:	183b      	adds	r3, r7, r0
 8017714:	2200      	movs	r2, #0
 8017716:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8017718:	4b98      	ldr	r3, [pc, #608]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801771a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801771c:	2380      	movs	r3, #128	@ 0x80
 801771e:	055b      	lsls	r3, r3, #21
 8017720:	4013      	ands	r3, r2
 8017722:	d109      	bne.n	8017738 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8017724:	4b95      	ldr	r3, [pc, #596]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017726:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017728:	4b94      	ldr	r3, [pc, #592]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801772a:	2180      	movs	r1, #128	@ 0x80
 801772c:	0549      	lsls	r1, r1, #21
 801772e:	430a      	orrs	r2, r1
 8017730:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8017732:	183b      	adds	r3, r7, r0
 8017734:	2201      	movs	r2, #1
 8017736:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017738:	4b91      	ldr	r3, [pc, #580]	@ (8017980 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 801773a:	681a      	ldr	r2, [r3, #0]
 801773c:	2380      	movs	r3, #128	@ 0x80
 801773e:	005b      	lsls	r3, r3, #1
 8017740:	4013      	ands	r3, r2
 8017742:	d11a      	bne.n	801777a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8017744:	4b8e      	ldr	r3, [pc, #568]	@ (8017980 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8017746:	681a      	ldr	r2, [r3, #0]
 8017748:	4b8d      	ldr	r3, [pc, #564]	@ (8017980 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 801774a:	2180      	movs	r1, #128	@ 0x80
 801774c:	0049      	lsls	r1, r1, #1
 801774e:	430a      	orrs	r2, r1
 8017750:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8017752:	f7fd ff9b 	bl	801568c <HAL_GetTick>
 8017756:	0003      	movs	r3, r0
 8017758:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801775a:	e008      	b.n	801776e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801775c:	f7fd ff96 	bl	801568c <HAL_GetTick>
 8017760:	0002      	movs	r2, r0
 8017762:	693b      	ldr	r3, [r7, #16]
 8017764:	1ad3      	subs	r3, r2, r3
 8017766:	2b64      	cmp	r3, #100	@ 0x64
 8017768:	d901      	bls.n	801776e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801776a:	2303      	movs	r3, #3
 801776c:	e102      	b.n	8017974 <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801776e:	4b84      	ldr	r3, [pc, #528]	@ (8017980 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8017770:	681a      	ldr	r2, [r3, #0]
 8017772:	2380      	movs	r3, #128	@ 0x80
 8017774:	005b      	lsls	r3, r3, #1
 8017776:	4013      	ands	r3, r2
 8017778:	d0f0      	beq.n	801775c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801777a:	4b80      	ldr	r3, [pc, #512]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801777c:	681a      	ldr	r2, [r3, #0]
 801777e:	23c0      	movs	r3, #192	@ 0xc0
 8017780:	039b      	lsls	r3, r3, #14
 8017782:	4013      	ands	r3, r2
 8017784:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	685a      	ldr	r2, [r3, #4]
 801778a:	23c0      	movs	r3, #192	@ 0xc0
 801778c:	039b      	lsls	r3, r3, #14
 801778e:	4013      	ands	r3, r2
 8017790:	68fa      	ldr	r2, [r7, #12]
 8017792:	429a      	cmp	r2, r3
 8017794:	d013      	beq.n	80177be <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	685a      	ldr	r2, [r3, #4]
 801779a:	23c0      	movs	r3, #192	@ 0xc0
 801779c:	029b      	lsls	r3, r3, #10
 801779e:	401a      	ands	r2, r3
 80177a0:	23c0      	movs	r3, #192	@ 0xc0
 80177a2:	029b      	lsls	r3, r3, #10
 80177a4:	429a      	cmp	r2, r3
 80177a6:	d10a      	bne.n	80177be <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80177a8:	4b74      	ldr	r3, [pc, #464]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80177aa:	681a      	ldr	r2, [r3, #0]
 80177ac:	2380      	movs	r3, #128	@ 0x80
 80177ae:	029b      	lsls	r3, r3, #10
 80177b0:	401a      	ands	r2, r3
 80177b2:	2380      	movs	r3, #128	@ 0x80
 80177b4:	029b      	lsls	r3, r3, #10
 80177b6:	429a      	cmp	r2, r3
 80177b8:	d101      	bne.n	80177be <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80177ba:	2301      	movs	r3, #1
 80177bc:	e0da      	b.n	8017974 <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80177be:	4b6f      	ldr	r3, [pc, #444]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80177c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80177c2:	23c0      	movs	r3, #192	@ 0xc0
 80177c4:	029b      	lsls	r3, r3, #10
 80177c6:	4013      	ands	r3, r2
 80177c8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d03b      	beq.n	8017848 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	685a      	ldr	r2, [r3, #4]
 80177d4:	23c0      	movs	r3, #192	@ 0xc0
 80177d6:	029b      	lsls	r3, r3, #10
 80177d8:	4013      	ands	r3, r2
 80177da:	68fa      	ldr	r2, [r7, #12]
 80177dc:	429a      	cmp	r2, r3
 80177de:	d033      	beq.n	8017848 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	2220      	movs	r2, #32
 80177e6:	4013      	ands	r3, r2
 80177e8:	d02e      	beq.n	8017848 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80177ea:	4b64      	ldr	r3, [pc, #400]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80177ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80177ee:	4a65      	ldr	r2, [pc, #404]	@ (8017984 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80177f0:	4013      	ands	r3, r2
 80177f2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80177f4:	4b61      	ldr	r3, [pc, #388]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80177f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80177f8:	4b60      	ldr	r3, [pc, #384]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80177fa:	2180      	movs	r1, #128	@ 0x80
 80177fc:	0309      	lsls	r1, r1, #12
 80177fe:	430a      	orrs	r2, r1
 8017800:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8017802:	4b5e      	ldr	r3, [pc, #376]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017804:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017806:	4b5d      	ldr	r3, [pc, #372]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017808:	495f      	ldr	r1, [pc, #380]	@ (8017988 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801780a:	400a      	ands	r2, r1
 801780c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801780e:	4b5b      	ldr	r3, [pc, #364]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017810:	68fa      	ldr	r2, [r7, #12]
 8017812:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8017814:	68fa      	ldr	r2, [r7, #12]
 8017816:	2380      	movs	r3, #128	@ 0x80
 8017818:	005b      	lsls	r3, r3, #1
 801781a:	4013      	ands	r3, r2
 801781c:	d014      	beq.n	8017848 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801781e:	f7fd ff35 	bl	801568c <HAL_GetTick>
 8017822:	0003      	movs	r3, r0
 8017824:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8017826:	e009      	b.n	801783c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8017828:	f7fd ff30 	bl	801568c <HAL_GetTick>
 801782c:	0002      	movs	r2, r0
 801782e:	693b      	ldr	r3, [r7, #16]
 8017830:	1ad3      	subs	r3, r2, r3
 8017832:	4a56      	ldr	r2, [pc, #344]	@ (801798c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8017834:	4293      	cmp	r3, r2
 8017836:	d901      	bls.n	801783c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8017838:	2303      	movs	r3, #3
 801783a:	e09b      	b.n	8017974 <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801783c:	4b4f      	ldr	r3, [pc, #316]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801783e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017840:	2380      	movs	r3, #128	@ 0x80
 8017842:	009b      	lsls	r3, r3, #2
 8017844:	4013      	ands	r3, r2
 8017846:	d0ef      	beq.n	8017828 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	685a      	ldr	r2, [r3, #4]
 801784c:	23c0      	movs	r3, #192	@ 0xc0
 801784e:	029b      	lsls	r3, r3, #10
 8017850:	401a      	ands	r2, r3
 8017852:	23c0      	movs	r3, #192	@ 0xc0
 8017854:	029b      	lsls	r3, r3, #10
 8017856:	429a      	cmp	r2, r3
 8017858:	d10c      	bne.n	8017874 <HAL_RCCEx_PeriphCLKConfig+0x178>
 801785a:	4b48      	ldr	r3, [pc, #288]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	4a4c      	ldr	r2, [pc, #304]	@ (8017990 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8017860:	4013      	ands	r3, r2
 8017862:	0019      	movs	r1, r3
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	685a      	ldr	r2, [r3, #4]
 8017868:	23c0      	movs	r3, #192	@ 0xc0
 801786a:	039b      	lsls	r3, r3, #14
 801786c:	401a      	ands	r2, r3
 801786e:	4b43      	ldr	r3, [pc, #268]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017870:	430a      	orrs	r2, r1
 8017872:	601a      	str	r2, [r3, #0]
 8017874:	4b41      	ldr	r3, [pc, #260]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017876:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	685a      	ldr	r2, [r3, #4]
 801787c:	23c0      	movs	r3, #192	@ 0xc0
 801787e:	029b      	lsls	r3, r3, #10
 8017880:	401a      	ands	r2, r3
 8017882:	4b3e      	ldr	r3, [pc, #248]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017884:	430a      	orrs	r2, r1
 8017886:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8017888:	2317      	movs	r3, #23
 801788a:	18fb      	adds	r3, r7, r3
 801788c:	781b      	ldrb	r3, [r3, #0]
 801788e:	2b01      	cmp	r3, #1
 8017890:	d105      	bne.n	801789e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8017892:	4b3a      	ldr	r3, [pc, #232]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017894:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017896:	4b39      	ldr	r3, [pc, #228]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017898:	493e      	ldr	r1, [pc, #248]	@ (8017994 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801789a:	400a      	ands	r2, r1
 801789c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	2201      	movs	r2, #1
 80178a4:	4013      	ands	r3, r2
 80178a6:	d009      	beq.n	80178bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80178a8:	4b34      	ldr	r3, [pc, #208]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80178aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80178ac:	2203      	movs	r2, #3
 80178ae:	4393      	bics	r3, r2
 80178b0:	0019      	movs	r1, r3
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	689a      	ldr	r2, [r3, #8]
 80178b6:	4b31      	ldr	r3, [pc, #196]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80178b8:	430a      	orrs	r2, r1
 80178ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	2202      	movs	r2, #2
 80178c2:	4013      	ands	r3, r2
 80178c4:	d009      	beq.n	80178da <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80178c6:	4b2d      	ldr	r3, [pc, #180]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80178c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80178ca:	220c      	movs	r2, #12
 80178cc:	4393      	bics	r3, r2
 80178ce:	0019      	movs	r1, r3
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	68da      	ldr	r2, [r3, #12]
 80178d4:	4b29      	ldr	r3, [pc, #164]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80178d6:	430a      	orrs	r2, r1
 80178d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	2204      	movs	r2, #4
 80178e0:	4013      	ands	r3, r2
 80178e2:	d009      	beq.n	80178f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80178e4:	4b25      	ldr	r3, [pc, #148]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80178e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80178e8:	4a2b      	ldr	r2, [pc, #172]	@ (8017998 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80178ea:	4013      	ands	r3, r2
 80178ec:	0019      	movs	r1, r3
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	691a      	ldr	r2, [r3, #16]
 80178f2:	4b22      	ldr	r3, [pc, #136]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80178f4:	430a      	orrs	r2, r1
 80178f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	2208      	movs	r2, #8
 80178fe:	4013      	ands	r3, r2
 8017900:	d009      	beq.n	8017916 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8017902:	4b1e      	ldr	r3, [pc, #120]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017906:	4a25      	ldr	r2, [pc, #148]	@ (801799c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8017908:	4013      	ands	r3, r2
 801790a:	0019      	movs	r1, r3
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	695a      	ldr	r2, [r3, #20]
 8017910:	4b1a      	ldr	r3, [pc, #104]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017912:	430a      	orrs	r2, r1
 8017914:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	681a      	ldr	r2, [r3, #0]
 801791a:	2380      	movs	r3, #128	@ 0x80
 801791c:	005b      	lsls	r3, r3, #1
 801791e:	4013      	ands	r3, r2
 8017920:	d009      	beq.n	8017936 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8017922:	4b16      	ldr	r3, [pc, #88]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017926:	4a17      	ldr	r2, [pc, #92]	@ (8017984 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8017928:	4013      	ands	r3, r2
 801792a:	0019      	movs	r1, r3
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	699a      	ldr	r2, [r3, #24]
 8017930:	4b12      	ldr	r3, [pc, #72]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017932:	430a      	orrs	r2, r1
 8017934:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	681b      	ldr	r3, [r3, #0]
 801793a:	2240      	movs	r2, #64	@ 0x40
 801793c:	4013      	ands	r3, r2
 801793e:	d009      	beq.n	8017954 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8017940:	4b0e      	ldr	r3, [pc, #56]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017944:	4a16      	ldr	r2, [pc, #88]	@ (80179a0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8017946:	4013      	ands	r3, r2
 8017948:	0019      	movs	r1, r3
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	6a1a      	ldr	r2, [r3, #32]
 801794e:	4b0b      	ldr	r3, [pc, #44]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017950:	430a      	orrs	r2, r1
 8017952:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	681b      	ldr	r3, [r3, #0]
 8017958:	2280      	movs	r2, #128	@ 0x80
 801795a:	4013      	ands	r3, r2
 801795c:	d009      	beq.n	8017972 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 801795e:	4b07      	ldr	r3, [pc, #28]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017962:	4a10      	ldr	r2, [pc, #64]	@ (80179a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8017964:	4013      	ands	r3, r2
 8017966:	0019      	movs	r1, r3
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	69da      	ldr	r2, [r3, #28]
 801796c:	4b03      	ldr	r3, [pc, #12]	@ (801797c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801796e:	430a      	orrs	r2, r1
 8017970:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8017972:	2300      	movs	r3, #0
}
 8017974:	0018      	movs	r0, r3
 8017976:	46bd      	mov	sp, r7
 8017978:	b006      	add	sp, #24
 801797a:	bd80      	pop	{r7, pc}
 801797c:	40021000 	.word	0x40021000
 8017980:	40007000 	.word	0x40007000
 8017984:	fffcffff 	.word	0xfffcffff
 8017988:	fff7ffff 	.word	0xfff7ffff
 801798c:	00001388 	.word	0x00001388
 8017990:	ffcfffff 	.word	0xffcfffff
 8017994:	efffffff 	.word	0xefffffff
 8017998:	fffff3ff 	.word	0xfffff3ff
 801799c:	ffffcfff 	.word	0xffffcfff
 80179a0:	fbffffff 	.word	0xfbffffff
 80179a4:	fff3ffff 	.word	0xfff3ffff

080179a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b082      	sub	sp, #8
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d101      	bne.n	80179ba <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80179b6:	2301      	movs	r3, #1
 80179b8:	e08e      	b.n	8017ad8 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	2221      	movs	r2, #33	@ 0x21
 80179be:	5c9b      	ldrb	r3, [r3, r2]
 80179c0:	b2db      	uxtb	r3, r3
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d107      	bne.n	80179d6 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	2220      	movs	r2, #32
 80179ca:	2100      	movs	r1, #0
 80179cc:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	0018      	movs	r0, r3
 80179d2:	f7eb fb23 	bl	800301c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	2221      	movs	r2, #33	@ 0x21
 80179da:	2102      	movs	r1, #2
 80179dc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	22ca      	movs	r2, #202	@ 0xca
 80179e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	2253      	movs	r2, #83	@ 0x53
 80179ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	0018      	movs	r0, r3
 80179f2:	f000 fca6 	bl	8018342 <RTC_EnterInitMode>
 80179f6:	1e03      	subs	r3, r0, #0
 80179f8:	d009      	beq.n	8017a0e <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	22ff      	movs	r2, #255	@ 0xff
 8017a00:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	2221      	movs	r2, #33	@ 0x21
 8017a06:	2104      	movs	r1, #4
 8017a08:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8017a0a:	2301      	movs	r3, #1
 8017a0c:	e064      	b.n	8017ad8 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	689a      	ldr	r2, [r3, #8]
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	4931      	ldr	r1, [pc, #196]	@ (8017ae0 <HAL_RTC_Init+0x138>)
 8017a1a:	400a      	ands	r2, r1
 8017a1c:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	6899      	ldr	r1, [r3, #8]
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	685a      	ldr	r2, [r3, #4]
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	691b      	ldr	r3, [r3, #16]
 8017a2c:	431a      	orrs	r2, r3
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	699b      	ldr	r3, [r3, #24]
 8017a32:	431a      	orrs	r2, r3
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	430a      	orrs	r2, r1
 8017a3a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	687a      	ldr	r2, [r7, #4]
 8017a42:	68d2      	ldr	r2, [r2, #12]
 8017a44:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	6919      	ldr	r1, [r3, #16]
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	689b      	ldr	r3, [r3, #8]
 8017a50:	041a      	lsls	r2, r3, #16
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	430a      	orrs	r2, r1
 8017a58:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	681b      	ldr	r3, [r3, #0]
 8017a5e:	68da      	ldr	r2, [r3, #12]
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	2180      	movs	r1, #128	@ 0x80
 8017a66:	438a      	bics	r2, r1
 8017a68:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	681b      	ldr	r3, [r3, #0]
 8017a6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	2103      	movs	r1, #3
 8017a76:	438a      	bics	r2, r1
 8017a78:	64da      	str	r2, [r3, #76]	@ 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	69da      	ldr	r2, [r3, #28]
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	695b      	ldr	r3, [r3, #20]
 8017a88:	431a      	orrs	r2, r3
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	430a      	orrs	r2, r1
 8017a90:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	689b      	ldr	r3, [r3, #8]
 8017a98:	2220      	movs	r2, #32
 8017a9a:	4013      	ands	r3, r2
 8017a9c:	d113      	bne.n	8017ac6 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	0018      	movs	r0, r3
 8017aa2:	f000 fc27 	bl	80182f4 <HAL_RTC_WaitForSynchro>
 8017aa6:	1e03      	subs	r3, r0, #0
 8017aa8:	d00d      	beq.n	8017ac6 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	681b      	ldr	r3, [r3, #0]
 8017aae:	22ff      	movs	r2, #255	@ 0xff
 8017ab0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	2221      	movs	r2, #33	@ 0x21
 8017ab6:	2104      	movs	r1, #4
 8017ab8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	2220      	movs	r2, #32
 8017abe:	2100      	movs	r1, #0
 8017ac0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8017ac2:	2301      	movs	r3, #1
 8017ac4:	e008      	b.n	8017ad8 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	22ff      	movs	r2, #255	@ 0xff
 8017acc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	2221      	movs	r2, #33	@ 0x21
 8017ad2:	2101      	movs	r1, #1
 8017ad4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8017ad6:	2300      	movs	r3, #0
  }
}
 8017ad8:	0018      	movs	r0, r3
 8017ada:	46bd      	mov	sp, r7
 8017adc:	b002      	add	sp, #8
 8017ade:	bd80      	pop	{r7, pc}
 8017ae0:	ff8fffbf 	.word	0xff8fffbf

08017ae4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8017ae4:	b590      	push	{r4, r7, lr}
 8017ae6:	b087      	sub	sp, #28
 8017ae8:	af00      	add	r7, sp, #0
 8017aea:	60f8      	str	r0, [r7, #12]
 8017aec:	60b9      	str	r1, [r7, #8]
 8017aee:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	2220      	movs	r2, #32
 8017af4:	5c9b      	ldrb	r3, [r3, r2]
 8017af6:	2b01      	cmp	r3, #1
 8017af8:	d101      	bne.n	8017afe <HAL_RTC_SetTime+0x1a>
 8017afa:	2302      	movs	r3, #2
 8017afc:	e0ad      	b.n	8017c5a <HAL_RTC_SetTime+0x176>
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	2220      	movs	r2, #32
 8017b02:	2101      	movs	r1, #1
 8017b04:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	2221      	movs	r2, #33	@ 0x21
 8017b0a:	2102      	movs	r1, #2
 8017b0c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d125      	bne.n	8017b60 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8017b14:	68fb      	ldr	r3, [r7, #12]
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	689b      	ldr	r3, [r3, #8]
 8017b1a:	2240      	movs	r2, #64	@ 0x40
 8017b1c:	4013      	ands	r3, r2
 8017b1e:	d102      	bne.n	8017b26 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8017b20:	68bb      	ldr	r3, [r7, #8]
 8017b22:	2200      	movs	r2, #0
 8017b24:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8017b26:	68bb      	ldr	r3, [r7, #8]
 8017b28:	781b      	ldrb	r3, [r3, #0]
 8017b2a:	0018      	movs	r0, r3
 8017b2c:	f000 fc33 	bl	8018396 <RTC_ByteToBcd2>
 8017b30:	0003      	movs	r3, r0
 8017b32:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8017b34:	68bb      	ldr	r3, [r7, #8]
 8017b36:	785b      	ldrb	r3, [r3, #1]
 8017b38:	0018      	movs	r0, r3
 8017b3a:	f000 fc2c 	bl	8018396 <RTC_ByteToBcd2>
 8017b3e:	0003      	movs	r3, r0
 8017b40:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8017b42:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8017b44:	68bb      	ldr	r3, [r7, #8]
 8017b46:	789b      	ldrb	r3, [r3, #2]
 8017b48:	0018      	movs	r0, r3
 8017b4a:	f000 fc24 	bl	8018396 <RTC_ByteToBcd2>
 8017b4e:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8017b50:	0022      	movs	r2, r4
 8017b52:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8017b54:	68bb      	ldr	r3, [r7, #8]
 8017b56:	78db      	ldrb	r3, [r3, #3]
 8017b58:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8017b5a:	4313      	orrs	r3, r2
 8017b5c:	617b      	str	r3, [r7, #20]
 8017b5e:	e017      	b.n	8017b90 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	689b      	ldr	r3, [r3, #8]
 8017b66:	2240      	movs	r2, #64	@ 0x40
 8017b68:	4013      	ands	r3, r2
 8017b6a:	d102      	bne.n	8017b72 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8017b6c:	68bb      	ldr	r3, [r7, #8]
 8017b6e:	2200      	movs	r2, #0
 8017b70:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8017b72:	68bb      	ldr	r3, [r7, #8]
 8017b74:	781b      	ldrb	r3, [r3, #0]
 8017b76:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8017b78:	68bb      	ldr	r3, [r7, #8]
 8017b7a:	785b      	ldrb	r3, [r3, #1]
 8017b7c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8017b7e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8017b80:	68ba      	ldr	r2, [r7, #8]
 8017b82:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8017b84:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8017b86:	68bb      	ldr	r3, [r7, #8]
 8017b88:	78db      	ldrb	r3, [r3, #3]
 8017b8a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8017b8c:	4313      	orrs	r3, r2
 8017b8e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	22ca      	movs	r2, #202	@ 0xca
 8017b96:	625a      	str	r2, [r3, #36]	@ 0x24
 8017b98:	68fb      	ldr	r3, [r7, #12]
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	2253      	movs	r2, #83	@ 0x53
 8017b9e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	0018      	movs	r0, r3
 8017ba4:	f000 fbcd 	bl	8018342 <RTC_EnterInitMode>
 8017ba8:	1e03      	subs	r3, r0, #0
 8017baa:	d00d      	beq.n	8017bc8 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017bac:	68fb      	ldr	r3, [r7, #12]
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	22ff      	movs	r2, #255	@ 0xff
 8017bb2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	2221      	movs	r2, #33	@ 0x21
 8017bb8:	2104      	movs	r1, #4
 8017bba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8017bbc:	68fb      	ldr	r3, [r7, #12]
 8017bbe:	2220      	movs	r2, #32
 8017bc0:	2100      	movs	r1, #0
 8017bc2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8017bc4:	2301      	movs	r3, #1
 8017bc6:	e048      	b.n	8017c5a <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	697a      	ldr	r2, [r7, #20]
 8017bce:	4925      	ldr	r1, [pc, #148]	@ (8017c64 <HAL_RTC_SetTime+0x180>)
 8017bd0:	400a      	ands	r2, r1
 8017bd2:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	689a      	ldr	r2, [r3, #8]
 8017bda:	68fb      	ldr	r3, [r7, #12]
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	4922      	ldr	r1, [pc, #136]	@ (8017c68 <HAL_RTC_SetTime+0x184>)
 8017be0:	400a      	ands	r2, r1
 8017be2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	6899      	ldr	r1, [r3, #8]
 8017bea:	68bb      	ldr	r3, [r7, #8]
 8017bec:	68da      	ldr	r2, [r3, #12]
 8017bee:	68bb      	ldr	r3, [r7, #8]
 8017bf0:	691b      	ldr	r3, [r3, #16]
 8017bf2:	431a      	orrs	r2, r3
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	430a      	orrs	r2, r1
 8017bfa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	681b      	ldr	r3, [r3, #0]
 8017c00:	68da      	ldr	r2, [r3, #12]
 8017c02:	68fb      	ldr	r3, [r7, #12]
 8017c04:	681b      	ldr	r3, [r3, #0]
 8017c06:	2180      	movs	r1, #128	@ 0x80
 8017c08:	438a      	bics	r2, r1
 8017c0a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8017c0c:	68fb      	ldr	r3, [r7, #12]
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	689b      	ldr	r3, [r3, #8]
 8017c12:	2220      	movs	r2, #32
 8017c14:	4013      	ands	r3, r2
 8017c16:	d113      	bne.n	8017c40 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	0018      	movs	r0, r3
 8017c1c:	f000 fb6a 	bl	80182f4 <HAL_RTC_WaitForSynchro>
 8017c20:	1e03      	subs	r3, r0, #0
 8017c22:	d00d      	beq.n	8017c40 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	22ff      	movs	r2, #255	@ 0xff
 8017c2a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	2221      	movs	r2, #33	@ 0x21
 8017c30:	2104      	movs	r1, #4
 8017c32:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8017c34:	68fb      	ldr	r3, [r7, #12]
 8017c36:	2220      	movs	r2, #32
 8017c38:	2100      	movs	r1, #0
 8017c3a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8017c3c:	2301      	movs	r3, #1
 8017c3e:	e00c      	b.n	8017c5a <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017c40:	68fb      	ldr	r3, [r7, #12]
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	22ff      	movs	r2, #255	@ 0xff
 8017c46:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8017c48:	68fb      	ldr	r3, [r7, #12]
 8017c4a:	2221      	movs	r2, #33	@ 0x21
 8017c4c:	2101      	movs	r1, #1
 8017c4e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	2220      	movs	r2, #32
 8017c54:	2100      	movs	r1, #0
 8017c56:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8017c58:	2300      	movs	r3, #0
  }
}
 8017c5a:	0018      	movs	r0, r3
 8017c5c:	46bd      	mov	sp, r7
 8017c5e:	b007      	add	sp, #28
 8017c60:	bd90      	pop	{r4, r7, pc}
 8017c62:	46c0      	nop			@ (mov r8, r8)
 8017c64:	007f7f7f 	.word	0x007f7f7f
 8017c68:	fffbffff 	.word	0xfffbffff

08017c6c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8017c6c:	b580      	push	{r7, lr}
 8017c6e:	b086      	sub	sp, #24
 8017c70:	af00      	add	r7, sp, #0
 8017c72:	60f8      	str	r0, [r7, #12]
 8017c74:	60b9      	str	r1, [r7, #8]
 8017c76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8017c78:	68fb      	ldr	r3, [r7, #12]
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017c7e:	68bb      	ldr	r3, [r7, #8]
 8017c80:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8017c82:	68fb      	ldr	r3, [r7, #12]
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	691b      	ldr	r3, [r3, #16]
 8017c88:	045b      	lsls	r3, r3, #17
 8017c8a:	0c5a      	lsrs	r2, r3, #17
 8017c8c:	68bb      	ldr	r3, [r7, #8]
 8017c8e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	4a22      	ldr	r2, [pc, #136]	@ (8017d20 <HAL_RTC_GetTime+0xb4>)
 8017c98:	4013      	ands	r3, r2
 8017c9a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8017c9c:	697b      	ldr	r3, [r7, #20]
 8017c9e:	0c1b      	lsrs	r3, r3, #16
 8017ca0:	b2db      	uxtb	r3, r3
 8017ca2:	223f      	movs	r2, #63	@ 0x3f
 8017ca4:	4013      	ands	r3, r2
 8017ca6:	b2da      	uxtb	r2, r3
 8017ca8:	68bb      	ldr	r3, [r7, #8]
 8017caa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8017cac:	697b      	ldr	r3, [r7, #20]
 8017cae:	0a1b      	lsrs	r3, r3, #8
 8017cb0:	b2db      	uxtb	r3, r3
 8017cb2:	227f      	movs	r2, #127	@ 0x7f
 8017cb4:	4013      	ands	r3, r2
 8017cb6:	b2da      	uxtb	r2, r3
 8017cb8:	68bb      	ldr	r3, [r7, #8]
 8017cba:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8017cbc:	697b      	ldr	r3, [r7, #20]
 8017cbe:	b2db      	uxtb	r3, r3
 8017cc0:	227f      	movs	r2, #127	@ 0x7f
 8017cc2:	4013      	ands	r3, r2
 8017cc4:	b2da      	uxtb	r2, r3
 8017cc6:	68bb      	ldr	r3, [r7, #8]
 8017cc8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8017cca:	697b      	ldr	r3, [r7, #20]
 8017ccc:	0c1b      	lsrs	r3, r3, #16
 8017cce:	b2db      	uxtb	r3, r3
 8017cd0:	2240      	movs	r2, #64	@ 0x40
 8017cd2:	4013      	ands	r3, r2
 8017cd4:	b2da      	uxtb	r2, r3
 8017cd6:	68bb      	ldr	r3, [r7, #8]
 8017cd8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d11a      	bne.n	8017d16 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8017ce0:	68bb      	ldr	r3, [r7, #8]
 8017ce2:	781b      	ldrb	r3, [r3, #0]
 8017ce4:	0018      	movs	r0, r3
 8017ce6:	f000 fb7e 	bl	80183e6 <RTC_Bcd2ToByte>
 8017cea:	0003      	movs	r3, r0
 8017cec:	001a      	movs	r2, r3
 8017cee:	68bb      	ldr	r3, [r7, #8]
 8017cf0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8017cf2:	68bb      	ldr	r3, [r7, #8]
 8017cf4:	785b      	ldrb	r3, [r3, #1]
 8017cf6:	0018      	movs	r0, r3
 8017cf8:	f000 fb75 	bl	80183e6 <RTC_Bcd2ToByte>
 8017cfc:	0003      	movs	r3, r0
 8017cfe:	001a      	movs	r2, r3
 8017d00:	68bb      	ldr	r3, [r7, #8]
 8017d02:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8017d04:	68bb      	ldr	r3, [r7, #8]
 8017d06:	789b      	ldrb	r3, [r3, #2]
 8017d08:	0018      	movs	r0, r3
 8017d0a:	f000 fb6c 	bl	80183e6 <RTC_Bcd2ToByte>
 8017d0e:	0003      	movs	r3, r0
 8017d10:	001a      	movs	r2, r3
 8017d12:	68bb      	ldr	r3, [r7, #8]
 8017d14:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8017d16:	2300      	movs	r3, #0
}
 8017d18:	0018      	movs	r0, r3
 8017d1a:	46bd      	mov	sp, r7
 8017d1c:	b006      	add	sp, #24
 8017d1e:	bd80      	pop	{r7, pc}
 8017d20:	007f7f7f 	.word	0x007f7f7f

08017d24 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8017d24:	b590      	push	{r4, r7, lr}
 8017d26:	b087      	sub	sp, #28
 8017d28:	af00      	add	r7, sp, #0
 8017d2a:	60f8      	str	r0, [r7, #12]
 8017d2c:	60b9      	str	r1, [r7, #8]
 8017d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	2220      	movs	r2, #32
 8017d34:	5c9b      	ldrb	r3, [r3, r2]
 8017d36:	2b01      	cmp	r3, #1
 8017d38:	d101      	bne.n	8017d3e <HAL_RTC_SetDate+0x1a>
 8017d3a:	2302      	movs	r3, #2
 8017d3c:	e099      	b.n	8017e72 <HAL_RTC_SetDate+0x14e>
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	2220      	movs	r2, #32
 8017d42:	2101      	movs	r1, #1
 8017d44:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	2221      	movs	r2, #33	@ 0x21
 8017d4a:	2102      	movs	r1, #2
 8017d4c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d10e      	bne.n	8017d72 <HAL_RTC_SetDate+0x4e>
 8017d54:	68bb      	ldr	r3, [r7, #8]
 8017d56:	785b      	ldrb	r3, [r3, #1]
 8017d58:	001a      	movs	r2, r3
 8017d5a:	2310      	movs	r3, #16
 8017d5c:	4013      	ands	r3, r2
 8017d5e:	d008      	beq.n	8017d72 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8017d60:	68bb      	ldr	r3, [r7, #8]
 8017d62:	785b      	ldrb	r3, [r3, #1]
 8017d64:	2210      	movs	r2, #16
 8017d66:	4393      	bics	r3, r2
 8017d68:	b2db      	uxtb	r3, r3
 8017d6a:	330a      	adds	r3, #10
 8017d6c:	b2da      	uxtb	r2, r3
 8017d6e:	68bb      	ldr	r3, [r7, #8]
 8017d70:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d11c      	bne.n	8017db2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8017d78:	68bb      	ldr	r3, [r7, #8]
 8017d7a:	78db      	ldrb	r3, [r3, #3]
 8017d7c:	0018      	movs	r0, r3
 8017d7e:	f000 fb0a 	bl	8018396 <RTC_ByteToBcd2>
 8017d82:	0003      	movs	r3, r0
 8017d84:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8017d86:	68bb      	ldr	r3, [r7, #8]
 8017d88:	785b      	ldrb	r3, [r3, #1]
 8017d8a:	0018      	movs	r0, r3
 8017d8c:	f000 fb03 	bl	8018396 <RTC_ByteToBcd2>
 8017d90:	0003      	movs	r3, r0
 8017d92:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8017d94:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8017d96:	68bb      	ldr	r3, [r7, #8]
 8017d98:	789b      	ldrb	r3, [r3, #2]
 8017d9a:	0018      	movs	r0, r3
 8017d9c:	f000 fafb 	bl	8018396 <RTC_ByteToBcd2>
 8017da0:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8017da2:	0022      	movs	r2, r4
 8017da4:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8017da6:	68bb      	ldr	r3, [r7, #8]
 8017da8:	781b      	ldrb	r3, [r3, #0]
 8017daa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8017dac:	4313      	orrs	r3, r2
 8017dae:	617b      	str	r3, [r7, #20]
 8017db0:	e00e      	b.n	8017dd0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8017db2:	68bb      	ldr	r3, [r7, #8]
 8017db4:	78db      	ldrb	r3, [r3, #3]
 8017db6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8017db8:	68bb      	ldr	r3, [r7, #8]
 8017dba:	785b      	ldrb	r3, [r3, #1]
 8017dbc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8017dbe:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8017dc0:	68ba      	ldr	r2, [r7, #8]
 8017dc2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8017dc4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8017dc6:	68bb      	ldr	r3, [r7, #8]
 8017dc8:	781b      	ldrb	r3, [r3, #0]
 8017dca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8017dcc:	4313      	orrs	r3, r2
 8017dce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8017dd0:	68fb      	ldr	r3, [r7, #12]
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	22ca      	movs	r2, #202	@ 0xca
 8017dd6:	625a      	str	r2, [r3, #36]	@ 0x24
 8017dd8:	68fb      	ldr	r3, [r7, #12]
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	2253      	movs	r2, #83	@ 0x53
 8017dde:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	0018      	movs	r0, r3
 8017de4:	f000 faad 	bl	8018342 <RTC_EnterInitMode>
 8017de8:	1e03      	subs	r3, r0, #0
 8017dea:	d00d      	beq.n	8017e08 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	22ff      	movs	r2, #255	@ 0xff
 8017df2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	2221      	movs	r2, #33	@ 0x21
 8017df8:	2104      	movs	r1, #4
 8017dfa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	2220      	movs	r2, #32
 8017e00:	2100      	movs	r1, #0
 8017e02:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8017e04:	2301      	movs	r3, #1
 8017e06:	e034      	b.n	8017e72 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	697a      	ldr	r2, [r7, #20]
 8017e0e:	491b      	ldr	r1, [pc, #108]	@ (8017e7c <HAL_RTC_SetDate+0x158>)
 8017e10:	400a      	ands	r2, r1
 8017e12:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	681b      	ldr	r3, [r3, #0]
 8017e18:	68da      	ldr	r2, [r3, #12]
 8017e1a:	68fb      	ldr	r3, [r7, #12]
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	2180      	movs	r1, #128	@ 0x80
 8017e20:	438a      	bics	r2, r1
 8017e22:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	689b      	ldr	r3, [r3, #8]
 8017e2a:	2220      	movs	r2, #32
 8017e2c:	4013      	ands	r3, r2
 8017e2e:	d113      	bne.n	8017e58 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	0018      	movs	r0, r3
 8017e34:	f000 fa5e 	bl	80182f4 <HAL_RTC_WaitForSynchro>
 8017e38:	1e03      	subs	r3, r0, #0
 8017e3a:	d00d      	beq.n	8017e58 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017e3c:	68fb      	ldr	r3, [r7, #12]
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	22ff      	movs	r2, #255	@ 0xff
 8017e42:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	2221      	movs	r2, #33	@ 0x21
 8017e48:	2104      	movs	r1, #4
 8017e4a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	2220      	movs	r2, #32
 8017e50:	2100      	movs	r1, #0
 8017e52:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8017e54:	2301      	movs	r3, #1
 8017e56:	e00c      	b.n	8017e72 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	22ff      	movs	r2, #255	@ 0xff
 8017e5e:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8017e60:	68fb      	ldr	r3, [r7, #12]
 8017e62:	2221      	movs	r2, #33	@ 0x21
 8017e64:	2101      	movs	r1, #1
 8017e66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	2220      	movs	r2, #32
 8017e6c:	2100      	movs	r1, #0
 8017e6e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8017e70:	2300      	movs	r3, #0
  }
}
 8017e72:	0018      	movs	r0, r3
 8017e74:	46bd      	mov	sp, r7
 8017e76:	b007      	add	sp, #28
 8017e78:	bd90      	pop	{r4, r7, pc}
 8017e7a:	46c0      	nop			@ (mov r8, r8)
 8017e7c:	00ffff3f 	.word	0x00ffff3f

08017e80 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8017e80:	b580      	push	{r7, lr}
 8017e82:	b086      	sub	sp, #24
 8017e84:	af00      	add	r7, sp, #0
 8017e86:	60f8      	str	r0, [r7, #12]
 8017e88:	60b9      	str	r1, [r7, #8]
 8017e8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8017e8c:	68fb      	ldr	r3, [r7, #12]
 8017e8e:	681b      	ldr	r3, [r3, #0]
 8017e90:	685b      	ldr	r3, [r3, #4]
 8017e92:	4a21      	ldr	r2, [pc, #132]	@ (8017f18 <HAL_RTC_GetDate+0x98>)
 8017e94:	4013      	ands	r3, r2
 8017e96:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8017e98:	697b      	ldr	r3, [r7, #20]
 8017e9a:	0c1b      	lsrs	r3, r3, #16
 8017e9c:	b2da      	uxtb	r2, r3
 8017e9e:	68bb      	ldr	r3, [r7, #8]
 8017ea0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8017ea2:	697b      	ldr	r3, [r7, #20]
 8017ea4:	0a1b      	lsrs	r3, r3, #8
 8017ea6:	b2db      	uxtb	r3, r3
 8017ea8:	221f      	movs	r2, #31
 8017eaa:	4013      	ands	r3, r2
 8017eac:	b2da      	uxtb	r2, r3
 8017eae:	68bb      	ldr	r3, [r7, #8]
 8017eb0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8017eb2:	697b      	ldr	r3, [r7, #20]
 8017eb4:	b2db      	uxtb	r3, r3
 8017eb6:	223f      	movs	r2, #63	@ 0x3f
 8017eb8:	4013      	ands	r3, r2
 8017eba:	b2da      	uxtb	r2, r3
 8017ebc:	68bb      	ldr	r3, [r7, #8]
 8017ebe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8017ec0:	697b      	ldr	r3, [r7, #20]
 8017ec2:	0b5b      	lsrs	r3, r3, #13
 8017ec4:	b2db      	uxtb	r3, r3
 8017ec6:	2207      	movs	r2, #7
 8017ec8:	4013      	ands	r3, r2
 8017eca:	b2da      	uxtb	r2, r3
 8017ecc:	68bb      	ldr	r3, [r7, #8]
 8017ece:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d11a      	bne.n	8017f0c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8017ed6:	68bb      	ldr	r3, [r7, #8]
 8017ed8:	78db      	ldrb	r3, [r3, #3]
 8017eda:	0018      	movs	r0, r3
 8017edc:	f000 fa83 	bl	80183e6 <RTC_Bcd2ToByte>
 8017ee0:	0003      	movs	r3, r0
 8017ee2:	001a      	movs	r2, r3
 8017ee4:	68bb      	ldr	r3, [r7, #8]
 8017ee6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8017ee8:	68bb      	ldr	r3, [r7, #8]
 8017eea:	785b      	ldrb	r3, [r3, #1]
 8017eec:	0018      	movs	r0, r3
 8017eee:	f000 fa7a 	bl	80183e6 <RTC_Bcd2ToByte>
 8017ef2:	0003      	movs	r3, r0
 8017ef4:	001a      	movs	r2, r3
 8017ef6:	68bb      	ldr	r3, [r7, #8]
 8017ef8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8017efa:	68bb      	ldr	r3, [r7, #8]
 8017efc:	789b      	ldrb	r3, [r3, #2]
 8017efe:	0018      	movs	r0, r3
 8017f00:	f000 fa71 	bl	80183e6 <RTC_Bcd2ToByte>
 8017f04:	0003      	movs	r3, r0
 8017f06:	001a      	movs	r2, r3
 8017f08:	68bb      	ldr	r3, [r7, #8]
 8017f0a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8017f0c:	2300      	movs	r3, #0
}
 8017f0e:	0018      	movs	r0, r3
 8017f10:	46bd      	mov	sp, r7
 8017f12:	b006      	add	sp, #24
 8017f14:	bd80      	pop	{r7, pc}
 8017f16:	46c0      	nop			@ (mov r8, r8)
 8017f18:	00ffff3f 	.word	0x00ffff3f

08017f1c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8017f1c:	b590      	push	{r4, r7, lr}
 8017f1e:	b089      	sub	sp, #36	@ 0x24
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	60f8      	str	r0, [r7, #12]
 8017f24:	60b9      	str	r1, [r7, #8]
 8017f26:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	2220      	movs	r2, #32
 8017f2c:	5c9b      	ldrb	r3, [r3, r2]
 8017f2e:	2b01      	cmp	r3, #1
 8017f30:	d101      	bne.n	8017f36 <HAL_RTC_SetAlarm_IT+0x1a>
 8017f32:	2302      	movs	r3, #2
 8017f34:	e130      	b.n	8018198 <HAL_RTC_SetAlarm_IT+0x27c>
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	2220      	movs	r2, #32
 8017f3a:	2101      	movs	r1, #1
 8017f3c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8017f3e:	68fb      	ldr	r3, [r7, #12]
 8017f40:	2221      	movs	r2, #33	@ 0x21
 8017f42:	2102      	movs	r1, #2
 8017f44:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d136      	bne.n	8017fba <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	689b      	ldr	r3, [r3, #8]
 8017f52:	2240      	movs	r2, #64	@ 0x40
 8017f54:	4013      	ands	r3, r2
 8017f56:	d102      	bne.n	8017f5e <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8017f58:	68bb      	ldr	r3, [r7, #8]
 8017f5a:	2200      	movs	r2, #0
 8017f5c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8017f5e:	68bb      	ldr	r3, [r7, #8]
 8017f60:	781b      	ldrb	r3, [r3, #0]
 8017f62:	0018      	movs	r0, r3
 8017f64:	f000 fa17 	bl	8018396 <RTC_ByteToBcd2>
 8017f68:	0003      	movs	r3, r0
 8017f6a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8017f6c:	68bb      	ldr	r3, [r7, #8]
 8017f6e:	785b      	ldrb	r3, [r3, #1]
 8017f70:	0018      	movs	r0, r3
 8017f72:	f000 fa10 	bl	8018396 <RTC_ByteToBcd2>
 8017f76:	0003      	movs	r3, r0
 8017f78:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8017f7a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8017f7c:	68bb      	ldr	r3, [r7, #8]
 8017f7e:	789b      	ldrb	r3, [r3, #2]
 8017f80:	0018      	movs	r0, r3
 8017f82:	f000 fa08 	bl	8018396 <RTC_ByteToBcd2>
 8017f86:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8017f88:	0022      	movs	r2, r4
 8017f8a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8017f8c:	68bb      	ldr	r3, [r7, #8]
 8017f8e:	78db      	ldrb	r3, [r3, #3]
 8017f90:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8017f92:	431a      	orrs	r2, r3
 8017f94:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8017f96:	68bb      	ldr	r3, [r7, #8]
 8017f98:	2220      	movs	r2, #32
 8017f9a:	5c9b      	ldrb	r3, [r3, r2]
 8017f9c:	0018      	movs	r0, r3
 8017f9e:	f000 f9fa 	bl	8018396 <RTC_ByteToBcd2>
 8017fa2:	0003      	movs	r3, r0
 8017fa4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8017fa6:	0022      	movs	r2, r4
 8017fa8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8017faa:	68bb      	ldr	r3, [r7, #8]
 8017fac:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8017fae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8017fb0:	68bb      	ldr	r3, [r7, #8]
 8017fb2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8017fb4:	4313      	orrs	r3, r2
 8017fb6:	61fb      	str	r3, [r7, #28]
 8017fb8:	e022      	b.n	8018000 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8017fba:	68fb      	ldr	r3, [r7, #12]
 8017fbc:	681b      	ldr	r3, [r3, #0]
 8017fbe:	689b      	ldr	r3, [r3, #8]
 8017fc0:	2240      	movs	r2, #64	@ 0x40
 8017fc2:	4013      	ands	r3, r2
 8017fc4:	d102      	bne.n	8017fcc <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8017fc6:	68bb      	ldr	r3, [r7, #8]
 8017fc8:	2200      	movs	r2, #0
 8017fca:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8017fcc:	68bb      	ldr	r3, [r7, #8]
 8017fce:	781b      	ldrb	r3, [r3, #0]
 8017fd0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8017fd2:	68bb      	ldr	r3, [r7, #8]
 8017fd4:	785b      	ldrb	r3, [r3, #1]
 8017fd6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8017fd8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8017fda:	68ba      	ldr	r2, [r7, #8]
 8017fdc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8017fde:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8017fe0:	68bb      	ldr	r3, [r7, #8]
 8017fe2:	78db      	ldrb	r3, [r3, #3]
 8017fe4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8017fe6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8017fe8:	68bb      	ldr	r3, [r7, #8]
 8017fea:	2120      	movs	r1, #32
 8017fec:	5c5b      	ldrb	r3, [r3, r1]
 8017fee:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8017ff0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8017ff2:	68bb      	ldr	r3, [r7, #8]
 8017ff4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8017ff6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8017ff8:	68bb      	ldr	r3, [r7, #8]
 8017ffa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8017ffc:	4313      	orrs	r3, r2
 8017ffe:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8018000:	68bb      	ldr	r3, [r7, #8]
 8018002:	685a      	ldr	r2, [r3, #4]
 8018004:	68bb      	ldr	r3, [r7, #8]
 8018006:	699b      	ldr	r3, [r3, #24]
 8018008:	4313      	orrs	r3, r2
 801800a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801800c:	68fb      	ldr	r3, [r7, #12]
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	22ca      	movs	r2, #202	@ 0xca
 8018012:	625a      	str	r2, [r3, #36]	@ 0x24
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	2253      	movs	r2, #83	@ 0x53
 801801a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 801801c:	68bb      	ldr	r3, [r7, #8]
 801801e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018020:	2380      	movs	r3, #128	@ 0x80
 8018022:	005b      	lsls	r3, r3, #1
 8018024:	429a      	cmp	r2, r3
 8018026:	d14e      	bne.n	80180c6 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	689a      	ldr	r2, [r3, #8]
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	495b      	ldr	r1, [pc, #364]	@ (80181a0 <HAL_RTC_SetAlarm_IT+0x284>)
 8018034:	400a      	ands	r2, r1
 8018036:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8018038:	68fb      	ldr	r3, [r7, #12]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	68db      	ldr	r3, [r3, #12]
 801803e:	22ff      	movs	r2, #255	@ 0xff
 8018040:	401a      	ands	r2, r3
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	4957      	ldr	r1, [pc, #348]	@ (80181a4 <HAL_RTC_SetAlarm_IT+0x288>)
 8018048:	430a      	orrs	r2, r1
 801804a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 801804c:	f7fd fb1e 	bl	801568c <HAL_GetTick>
 8018050:	0003      	movs	r3, r0
 8018052:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8018054:	e016      	b.n	8018084 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018056:	f7fd fb19 	bl	801568c <HAL_GetTick>
 801805a:	0002      	movs	r2, r0
 801805c:	697b      	ldr	r3, [r7, #20]
 801805e:	1ad2      	subs	r2, r2, r3
 8018060:	23fa      	movs	r3, #250	@ 0xfa
 8018062:	009b      	lsls	r3, r3, #2
 8018064:	429a      	cmp	r2, r3
 8018066:	d90d      	bls.n	8018084 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018068:	68fb      	ldr	r3, [r7, #12]
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	22ff      	movs	r2, #255	@ 0xff
 801806e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	2221      	movs	r2, #33	@ 0x21
 8018074:	2103      	movs	r1, #3
 8018076:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8018078:	68fb      	ldr	r3, [r7, #12]
 801807a:	2220      	movs	r2, #32
 801807c:	2100      	movs	r1, #0
 801807e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8018080:	2303      	movs	r3, #3
 8018082:	e089      	b.n	8018198 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8018084:	68fb      	ldr	r3, [r7, #12]
 8018086:	681b      	ldr	r3, [r3, #0]
 8018088:	68db      	ldr	r3, [r3, #12]
 801808a:	2201      	movs	r2, #1
 801808c:	4013      	ands	r3, r2
 801808e:	d0e2      	beq.n	8018056 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8018090:	68fb      	ldr	r3, [r7, #12]
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	69fa      	ldr	r2, [r7, #28]
 8018096:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8018098:	68fb      	ldr	r3, [r7, #12]
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	69ba      	ldr	r2, [r7, #24]
 801809e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80180a0:	68fb      	ldr	r3, [r7, #12]
 80180a2:	681b      	ldr	r3, [r3, #0]
 80180a4:	689a      	ldr	r2, [r3, #8]
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	681b      	ldr	r3, [r3, #0]
 80180aa:	2180      	movs	r1, #128	@ 0x80
 80180ac:	0049      	lsls	r1, r1, #1
 80180ae:	430a      	orrs	r2, r1
 80180b0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80180b2:	68fb      	ldr	r3, [r7, #12]
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	689a      	ldr	r2, [r3, #8]
 80180b8:	68fb      	ldr	r3, [r7, #12]
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	2180      	movs	r1, #128	@ 0x80
 80180be:	0149      	lsls	r1, r1, #5
 80180c0:	430a      	orrs	r2, r1
 80180c2:	609a      	str	r2, [r3, #8]
 80180c4:	e04d      	b.n	8018162 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80180c6:	68fb      	ldr	r3, [r7, #12]
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	689a      	ldr	r2, [r3, #8]
 80180cc:	68fb      	ldr	r3, [r7, #12]
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	4935      	ldr	r1, [pc, #212]	@ (80181a8 <HAL_RTC_SetAlarm_IT+0x28c>)
 80180d2:	400a      	ands	r2, r1
 80180d4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	681b      	ldr	r3, [r3, #0]
 80180da:	68db      	ldr	r3, [r3, #12]
 80180dc:	22ff      	movs	r2, #255	@ 0xff
 80180de:	401a      	ands	r2, r3
 80180e0:	68fb      	ldr	r3, [r7, #12]
 80180e2:	681b      	ldr	r3, [r3, #0]
 80180e4:	4931      	ldr	r1, [pc, #196]	@ (80181ac <HAL_RTC_SetAlarm_IT+0x290>)
 80180e6:	430a      	orrs	r2, r1
 80180e8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80180ea:	f7fd facf 	bl	801568c <HAL_GetTick>
 80180ee:	0003      	movs	r3, r0
 80180f0:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80180f2:	e016      	b.n	8018122 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80180f4:	f7fd faca 	bl	801568c <HAL_GetTick>
 80180f8:	0002      	movs	r2, r0
 80180fa:	697b      	ldr	r3, [r7, #20]
 80180fc:	1ad2      	subs	r2, r2, r3
 80180fe:	23fa      	movs	r3, #250	@ 0xfa
 8018100:	009b      	lsls	r3, r3, #2
 8018102:	429a      	cmp	r2, r3
 8018104:	d90d      	bls.n	8018122 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	22ff      	movs	r2, #255	@ 0xff
 801810c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801810e:	68fb      	ldr	r3, [r7, #12]
 8018110:	2221      	movs	r2, #33	@ 0x21
 8018112:	2103      	movs	r1, #3
 8018114:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8018116:	68fb      	ldr	r3, [r7, #12]
 8018118:	2220      	movs	r2, #32
 801811a:	2100      	movs	r1, #0
 801811c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801811e:	2303      	movs	r3, #3
 8018120:	e03a      	b.n	8018198 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8018122:	68fb      	ldr	r3, [r7, #12]
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	68db      	ldr	r3, [r3, #12]
 8018128:	2202      	movs	r2, #2
 801812a:	4013      	ands	r3, r2
 801812c:	d0e2      	beq.n	80180f4 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 801812e:	68fb      	ldr	r3, [r7, #12]
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	69fa      	ldr	r2, [r7, #28]
 8018134:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	69ba      	ldr	r2, [r7, #24]
 801813c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	689a      	ldr	r2, [r3, #8]
 8018144:	68fb      	ldr	r3, [r7, #12]
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	2180      	movs	r1, #128	@ 0x80
 801814a:	0089      	lsls	r1, r1, #2
 801814c:	430a      	orrs	r2, r1
 801814e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	689a      	ldr	r2, [r3, #8]
 8018156:	68fb      	ldr	r3, [r7, #12]
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	2180      	movs	r1, #128	@ 0x80
 801815c:	0189      	lsls	r1, r1, #6
 801815e:	430a      	orrs	r2, r1
 8018160:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8018162:	4b13      	ldr	r3, [pc, #76]	@ (80181b0 <HAL_RTC_SetAlarm_IT+0x294>)
 8018164:	681a      	ldr	r2, [r3, #0]
 8018166:	4b12      	ldr	r3, [pc, #72]	@ (80181b0 <HAL_RTC_SetAlarm_IT+0x294>)
 8018168:	2180      	movs	r1, #128	@ 0x80
 801816a:	0289      	lsls	r1, r1, #10
 801816c:	430a      	orrs	r2, r1
 801816e:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8018170:	4b0f      	ldr	r3, [pc, #60]	@ (80181b0 <HAL_RTC_SetAlarm_IT+0x294>)
 8018172:	689a      	ldr	r2, [r3, #8]
 8018174:	4b0e      	ldr	r3, [pc, #56]	@ (80181b0 <HAL_RTC_SetAlarm_IT+0x294>)
 8018176:	2180      	movs	r1, #128	@ 0x80
 8018178:	0289      	lsls	r1, r1, #10
 801817a:	430a      	orrs	r2, r1
 801817c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801817e:	68fb      	ldr	r3, [r7, #12]
 8018180:	681b      	ldr	r3, [r3, #0]
 8018182:	22ff      	movs	r2, #255	@ 0xff
 8018184:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8018186:	68fb      	ldr	r3, [r7, #12]
 8018188:	2221      	movs	r2, #33	@ 0x21
 801818a:	2101      	movs	r1, #1
 801818c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801818e:	68fb      	ldr	r3, [r7, #12]
 8018190:	2220      	movs	r2, #32
 8018192:	2100      	movs	r1, #0
 8018194:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018196:	2300      	movs	r3, #0
}
 8018198:	0018      	movs	r0, r3
 801819a:	46bd      	mov	sp, r7
 801819c:	b009      	add	sp, #36	@ 0x24
 801819e:	bd90      	pop	{r4, r7, pc}
 80181a0:	fffffeff 	.word	0xfffffeff
 80181a4:	fffffe7f 	.word	0xfffffe7f
 80181a8:	fffffdff 	.word	0xfffffdff
 80181ac:	fffffd7f 	.word	0xfffffd7f
 80181b0:	40010400 	.word	0x40010400

080181b4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80181b4:	b580      	push	{r7, lr}
 80181b6:	b084      	sub	sp, #16
 80181b8:	af00      	add	r7, sp, #0
 80181ba:	6078      	str	r0, [r7, #4]
 80181bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	2220      	movs	r2, #32
 80181c2:	5c9b      	ldrb	r3, [r3, r2]
 80181c4:	2b01      	cmp	r3, #1
 80181c6:	d101      	bne.n	80181cc <HAL_RTC_DeactivateAlarm+0x18>
 80181c8:	2302      	movs	r3, #2
 80181ca:	e086      	b.n	80182da <HAL_RTC_DeactivateAlarm+0x126>
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	2220      	movs	r2, #32
 80181d0:	2101      	movs	r1, #1
 80181d2:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	2221      	movs	r2, #33	@ 0x21
 80181d8:	2102      	movs	r1, #2
 80181da:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	681b      	ldr	r3, [r3, #0]
 80181e0:	22ca      	movs	r2, #202	@ 0xca
 80181e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	2253      	movs	r2, #83	@ 0x53
 80181ea:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 80181ec:	683a      	ldr	r2, [r7, #0]
 80181ee:	2380      	movs	r3, #128	@ 0x80
 80181f0:	005b      	lsls	r3, r3, #1
 80181f2:	429a      	cmp	r2, r3
 80181f4:	d132      	bne.n	801825c <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	681b      	ldr	r3, [r3, #0]
 80181fa:	689a      	ldr	r2, [r3, #8]
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	4938      	ldr	r1, [pc, #224]	@ (80182e4 <HAL_RTC_DeactivateAlarm+0x130>)
 8018202:	400a      	ands	r2, r1
 8018204:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	689a      	ldr	r2, [r3, #8]
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	4935      	ldr	r1, [pc, #212]	@ (80182e8 <HAL_RTC_DeactivateAlarm+0x134>)
 8018212:	400a      	ands	r2, r1
 8018214:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8018216:	f7fd fa39 	bl	801568c <HAL_GetTick>
 801821a:	0003      	movs	r3, r0
 801821c:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 801821e:	e016      	b.n	801824e <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8018220:	f7fd fa34 	bl	801568c <HAL_GetTick>
 8018224:	0002      	movs	r2, r0
 8018226:	68fb      	ldr	r3, [r7, #12]
 8018228:	1ad2      	subs	r2, r2, r3
 801822a:	23fa      	movs	r3, #250	@ 0xfa
 801822c:	009b      	lsls	r3, r3, #2
 801822e:	429a      	cmp	r2, r3
 8018230:	d90d      	bls.n	801824e <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	22ff      	movs	r2, #255	@ 0xff
 8018238:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	2221      	movs	r2, #33	@ 0x21
 801823e:	2103      	movs	r1, #3
 8018240:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	2220      	movs	r2, #32
 8018246:	2100      	movs	r1, #0
 8018248:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801824a:	2303      	movs	r3, #3
 801824c:	e045      	b.n	80182da <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	68db      	ldr	r3, [r3, #12]
 8018254:	2201      	movs	r2, #1
 8018256:	4013      	ands	r3, r2
 8018258:	d0e2      	beq.n	8018220 <HAL_RTC_DeactivateAlarm+0x6c>
 801825a:	e031      	b.n	80182c0 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	689a      	ldr	r2, [r3, #8]
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	4921      	ldr	r1, [pc, #132]	@ (80182ec <HAL_RTC_DeactivateAlarm+0x138>)
 8018268:	400a      	ands	r2, r1
 801826a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	689a      	ldr	r2, [r3, #8]
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	491e      	ldr	r1, [pc, #120]	@ (80182f0 <HAL_RTC_DeactivateAlarm+0x13c>)
 8018278:	400a      	ands	r2, r1
 801827a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 801827c:	f7fd fa06 	bl	801568c <HAL_GetTick>
 8018280:	0003      	movs	r3, r0
 8018282:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8018284:	e016      	b.n	80182b4 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018286:	f7fd fa01 	bl	801568c <HAL_GetTick>
 801828a:	0002      	movs	r2, r0
 801828c:	68fb      	ldr	r3, [r7, #12]
 801828e:	1ad2      	subs	r2, r2, r3
 8018290:	23fa      	movs	r3, #250	@ 0xfa
 8018292:	009b      	lsls	r3, r3, #2
 8018294:	429a      	cmp	r2, r3
 8018296:	d90d      	bls.n	80182b4 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	22ff      	movs	r2, #255	@ 0xff
 801829e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	2221      	movs	r2, #33	@ 0x21
 80182a4:	2103      	movs	r1, #3
 80182a6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	2220      	movs	r2, #32
 80182ac:	2100      	movs	r1, #0
 80182ae:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80182b0:	2303      	movs	r3, #3
 80182b2:	e012      	b.n	80182da <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	681b      	ldr	r3, [r3, #0]
 80182b8:	68db      	ldr	r3, [r3, #12]
 80182ba:	2202      	movs	r2, #2
 80182bc:	4013      	ands	r3, r2
 80182be:	d0e2      	beq.n	8018286 <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	22ff      	movs	r2, #255	@ 0xff
 80182c6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	2221      	movs	r2, #33	@ 0x21
 80182cc:	2101      	movs	r1, #1
 80182ce:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	2220      	movs	r2, #32
 80182d4:	2100      	movs	r1, #0
 80182d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80182d8:	2300      	movs	r3, #0
}
 80182da:	0018      	movs	r0, r3
 80182dc:	46bd      	mov	sp, r7
 80182de:	b004      	add	sp, #16
 80182e0:	bd80      	pop	{r7, pc}
 80182e2:	46c0      	nop			@ (mov r8, r8)
 80182e4:	fffffeff 	.word	0xfffffeff
 80182e8:	ffffefff 	.word	0xffffefff
 80182ec:	fffffdff 	.word	0xfffffdff
 80182f0:	ffffdfff 	.word	0xffffdfff

080182f4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80182f4:	b580      	push	{r7, lr}
 80182f6:	b084      	sub	sp, #16
 80182f8:	af00      	add	r7, sp, #0
 80182fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	68da      	ldr	r2, [r3, #12]
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	681b      	ldr	r3, [r3, #0]
 8018306:	21a0      	movs	r1, #160	@ 0xa0
 8018308:	438a      	bics	r2, r1
 801830a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 801830c:	f7fd f9be 	bl	801568c <HAL_GetTick>
 8018310:	0003      	movs	r3, r0
 8018312:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8018314:	e00a      	b.n	801832c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018316:	f7fd f9b9 	bl	801568c <HAL_GetTick>
 801831a:	0002      	movs	r2, r0
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	1ad2      	subs	r2, r2, r3
 8018320:	23fa      	movs	r3, #250	@ 0xfa
 8018322:	009b      	lsls	r3, r3, #2
 8018324:	429a      	cmp	r2, r3
 8018326:	d901      	bls.n	801832c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8018328:	2303      	movs	r3, #3
 801832a:	e006      	b.n	801833a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	68db      	ldr	r3, [r3, #12]
 8018332:	2220      	movs	r2, #32
 8018334:	4013      	ands	r3, r2
 8018336:	d0ee      	beq.n	8018316 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8018338:	2300      	movs	r3, #0
}
 801833a:	0018      	movs	r0, r3
 801833c:	46bd      	mov	sp, r7
 801833e:	b004      	add	sp, #16
 8018340:	bd80      	pop	{r7, pc}

08018342 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8018342:	b580      	push	{r7, lr}
 8018344:	b084      	sub	sp, #16
 8018346:	af00      	add	r7, sp, #0
 8018348:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	68db      	ldr	r3, [r3, #12]
 8018350:	2240      	movs	r2, #64	@ 0x40
 8018352:	4013      	ands	r3, r2
 8018354:	d11a      	bne.n	801838c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	2201      	movs	r2, #1
 801835c:	4252      	negs	r2, r2
 801835e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8018360:	f7fd f994 	bl	801568c <HAL_GetTick>
 8018364:	0003      	movs	r3, r0
 8018366:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8018368:	e00a      	b.n	8018380 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 801836a:	f7fd f98f 	bl	801568c <HAL_GetTick>
 801836e:	0002      	movs	r2, r0
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	1ad2      	subs	r2, r2, r3
 8018374:	23fa      	movs	r3, #250	@ 0xfa
 8018376:	009b      	lsls	r3, r3, #2
 8018378:	429a      	cmp	r2, r3
 801837a:	d901      	bls.n	8018380 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 801837c:	2303      	movs	r3, #3
 801837e:	e006      	b.n	801838e <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	68db      	ldr	r3, [r3, #12]
 8018386:	2240      	movs	r2, #64	@ 0x40
 8018388:	4013      	ands	r3, r2
 801838a:	d0ee      	beq.n	801836a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 801838c:	2300      	movs	r3, #0
}
 801838e:	0018      	movs	r0, r3
 8018390:	46bd      	mov	sp, r7
 8018392:	b004      	add	sp, #16
 8018394:	bd80      	pop	{r7, pc}

08018396 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8018396:	b580      	push	{r7, lr}
 8018398:	b084      	sub	sp, #16
 801839a:	af00      	add	r7, sp, #0
 801839c:	0002      	movs	r2, r0
 801839e:	1dfb      	adds	r3, r7, #7
 80183a0:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80183a2:	2300      	movs	r3, #0
 80183a4:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80183a6:	230b      	movs	r3, #11
 80183a8:	18fb      	adds	r3, r7, r3
 80183aa:	1dfa      	adds	r2, r7, #7
 80183ac:	7812      	ldrb	r2, [r2, #0]
 80183ae:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80183b0:	e008      	b.n	80183c4 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80183b2:	68fb      	ldr	r3, [r7, #12]
 80183b4:	3301      	adds	r3, #1
 80183b6:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80183b8:	220b      	movs	r2, #11
 80183ba:	18bb      	adds	r3, r7, r2
 80183bc:	18ba      	adds	r2, r7, r2
 80183be:	7812      	ldrb	r2, [r2, #0]
 80183c0:	3a0a      	subs	r2, #10
 80183c2:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 80183c4:	210b      	movs	r1, #11
 80183c6:	187b      	adds	r3, r7, r1
 80183c8:	781b      	ldrb	r3, [r3, #0]
 80183ca:	2b09      	cmp	r3, #9
 80183cc:	d8f1      	bhi.n	80183b2 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	b2db      	uxtb	r3, r3
 80183d2:	011b      	lsls	r3, r3, #4
 80183d4:	b2da      	uxtb	r2, r3
 80183d6:	187b      	adds	r3, r7, r1
 80183d8:	781b      	ldrb	r3, [r3, #0]
 80183da:	4313      	orrs	r3, r2
 80183dc:	b2db      	uxtb	r3, r3
}
 80183de:	0018      	movs	r0, r3
 80183e0:	46bd      	mov	sp, r7
 80183e2:	b004      	add	sp, #16
 80183e4:	bd80      	pop	{r7, pc}

080183e6 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80183e6:	b580      	push	{r7, lr}
 80183e8:	b084      	sub	sp, #16
 80183ea:	af00      	add	r7, sp, #0
 80183ec:	0002      	movs	r2, r0
 80183ee:	1dfb      	adds	r3, r7, #7
 80183f0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80183f2:	1dfb      	adds	r3, r7, #7
 80183f4:	781b      	ldrb	r3, [r3, #0]
 80183f6:	091b      	lsrs	r3, r3, #4
 80183f8:	b2db      	uxtb	r3, r3
 80183fa:	001a      	movs	r2, r3
 80183fc:	0013      	movs	r3, r2
 80183fe:	009b      	lsls	r3, r3, #2
 8018400:	189b      	adds	r3, r3, r2
 8018402:	005b      	lsls	r3, r3, #1
 8018404:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8018406:	68fb      	ldr	r3, [r7, #12]
 8018408:	b2da      	uxtb	r2, r3
 801840a:	1dfb      	adds	r3, r7, #7
 801840c:	781b      	ldrb	r3, [r3, #0]
 801840e:	210f      	movs	r1, #15
 8018410:	400b      	ands	r3, r1
 8018412:	b2db      	uxtb	r3, r3
 8018414:	18d3      	adds	r3, r2, r3
 8018416:	b2db      	uxtb	r3, r3
}
 8018418:	0018      	movs	r0, r3
 801841a:	46bd      	mov	sp, r7
 801841c:	b004      	add	sp, #16
 801841e:	bd80      	pop	{r7, pc}

08018420 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8018420:	b580      	push	{r7, lr}
 8018422:	b086      	sub	sp, #24
 8018424:	af00      	add	r7, sp, #0
 8018426:	60f8      	str	r0, [r7, #12]
 8018428:	60b9      	str	r1, [r7, #8]
 801842a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801842c:	68fb      	ldr	r3, [r7, #12]
 801842e:	681b      	ldr	r3, [r3, #0]
 8018430:	3350      	adds	r3, #80	@ 0x50
 8018432:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8018434:	68bb      	ldr	r3, [r7, #8]
 8018436:	009b      	lsls	r3, r3, #2
 8018438:	697a      	ldr	r2, [r7, #20]
 801843a:	18d3      	adds	r3, r2, r3
 801843c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801843e:	697b      	ldr	r3, [r7, #20]
 8018440:	687a      	ldr	r2, [r7, #4]
 8018442:	601a      	str	r2, [r3, #0]
}
 8018444:	46c0      	nop			@ (mov r8, r8)
 8018446:	46bd      	mov	sp, r7
 8018448:	b006      	add	sp, #24
 801844a:	bd80      	pop	{r7, pc}

0801844c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801844c:	b580      	push	{r7, lr}
 801844e:	b084      	sub	sp, #16
 8018450:	af00      	add	r7, sp, #0
 8018452:	6078      	str	r0, [r7, #4]
 8018454:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	681b      	ldr	r3, [r3, #0]
 801845a:	3350      	adds	r3, #80	@ 0x50
 801845c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801845e:	683b      	ldr	r3, [r7, #0]
 8018460:	009b      	lsls	r3, r3, #2
 8018462:	68fa      	ldr	r2, [r7, #12]
 8018464:	18d3      	adds	r3, r2, r3
 8018466:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	681b      	ldr	r3, [r3, #0]
}
 801846c:	0018      	movs	r0, r3
 801846e:	46bd      	mov	sp, r7
 8018470:	b004      	add	sp, #16
 8018472:	bd80      	pop	{r7, pc}

08018474 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8018474:	b580      	push	{r7, lr}
 8018476:	b082      	sub	sp, #8
 8018478:	af00      	add	r7, sp, #0
 801847a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	2220      	movs	r2, #32
 8018480:	5c9b      	ldrb	r3, [r3, r2]
 8018482:	2b01      	cmp	r3, #1
 8018484:	d101      	bne.n	801848a <HAL_RTCEx_EnableBypassShadow+0x16>
 8018486:	2302      	movs	r3, #2
 8018488:	e024      	b.n	80184d4 <HAL_RTCEx_EnableBypassShadow+0x60>
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	2220      	movs	r2, #32
 801848e:	2101      	movs	r1, #1
 8018490:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	2221      	movs	r2, #33	@ 0x21
 8018496:	2102      	movs	r1, #2
 8018498:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	22ca      	movs	r2, #202	@ 0xca
 80184a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	2253      	movs	r2, #83	@ 0x53
 80184a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	689a      	ldr	r2, [r3, #8]
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	2120      	movs	r1, #32
 80184b6:	430a      	orrs	r2, r1
 80184b8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	22ff      	movs	r2, #255	@ 0xff
 80184c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	2221      	movs	r2, #33	@ 0x21
 80184c6:	2101      	movs	r1, #1
 80184c8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	2220      	movs	r2, #32
 80184ce:	2100      	movs	r1, #0
 80184d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80184d2:	2300      	movs	r3, #0
}
 80184d4:	0018      	movs	r0, r3
 80184d6:	46bd      	mov	sp, r7
 80184d8:	b002      	add	sp, #8
 80184da:	bd80      	pop	{r7, pc}

080184dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80184dc:	b580      	push	{r7, lr}
 80184de:	b082      	sub	sp, #8
 80184e0:	af00      	add	r7, sp, #0
 80184e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d101      	bne.n	80184ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80184ea:	2301      	movs	r3, #1
 80184ec:	e059      	b.n	80185a2 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	2200      	movs	r2, #0
 80184f2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	2251      	movs	r2, #81	@ 0x51
 80184f8:	5c9b      	ldrb	r3, [r3, r2]
 80184fa:	b2db      	uxtb	r3, r3
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d107      	bne.n	8018510 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	2250      	movs	r2, #80	@ 0x50
 8018504:	2100      	movs	r1, #0
 8018506:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	0018      	movs	r0, r3
 801850c:	f000 f850 	bl	80185b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	2251      	movs	r2, #81	@ 0x51
 8018514:	2102      	movs	r1, #2
 8018516:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	681a      	ldr	r2, [r3, #0]
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	2140      	movs	r1, #64	@ 0x40
 8018524:	438a      	bics	r2, r1
 8018526:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	685a      	ldr	r2, [r3, #4]
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	689b      	ldr	r3, [r3, #8]
 8018530:	431a      	orrs	r2, r3
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	68db      	ldr	r3, [r3, #12]
 8018536:	431a      	orrs	r2, r3
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	691b      	ldr	r3, [r3, #16]
 801853c:	431a      	orrs	r2, r3
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	695b      	ldr	r3, [r3, #20]
 8018542:	431a      	orrs	r2, r3
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	6999      	ldr	r1, [r3, #24]
 8018548:	2380      	movs	r3, #128	@ 0x80
 801854a:	009b      	lsls	r3, r3, #2
 801854c:	400b      	ands	r3, r1
 801854e:	431a      	orrs	r2, r3
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	69db      	ldr	r3, [r3, #28]
 8018554:	431a      	orrs	r2, r3
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	6a1b      	ldr	r3, [r3, #32]
 801855a:	431a      	orrs	r2, r3
 801855c:	0011      	movs	r1, r2
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	430a      	orrs	r2, r1
 8018568:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	699b      	ldr	r3, [r3, #24]
 801856e:	0c1b      	lsrs	r3, r3, #16
 8018570:	2204      	movs	r2, #4
 8018572:	4013      	ands	r3, r2
 8018574:	0019      	movs	r1, r3
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	430a      	orrs	r2, r1
 8018580:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	69da      	ldr	r2, [r3, #28]
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	4907      	ldr	r1, [pc, #28]	@ (80185ac <HAL_SPI_Init+0xd0>)
 801858e:	400a      	ands	r2, r1
 8018590:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	2200      	movs	r2, #0
 8018596:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	2251      	movs	r2, #81	@ 0x51
 801859c:	2101      	movs	r1, #1
 801859e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80185a0:	2300      	movs	r3, #0
}
 80185a2:	0018      	movs	r0, r3
 80185a4:	46bd      	mov	sp, r7
 80185a6:	b002      	add	sp, #8
 80185a8:	bd80      	pop	{r7, pc}
 80185aa:	46c0      	nop			@ (mov r8, r8)
 80185ac:	fffff7ff 	.word	0xfffff7ff

080185b0 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80185b0:	b580      	push	{r7, lr}
 80185b2:	b082      	sub	sp, #8
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80185b8:	46c0      	nop			@ (mov r8, r8)
 80185ba:	46bd      	mov	sp, r7
 80185bc:	b002      	add	sp, #8
 80185be:	bd80      	pop	{r7, pc}

080185c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80185c0:	b580      	push	{r7, lr}
 80185c2:	b08c      	sub	sp, #48	@ 0x30
 80185c4:	af00      	add	r7, sp, #0
 80185c6:	60f8      	str	r0, [r7, #12]
 80185c8:	60b9      	str	r1, [r7, #8]
 80185ca:	607a      	str	r2, [r7, #4]
 80185cc:	001a      	movs	r2, r3
 80185ce:	1cbb      	adds	r3, r7, #2
 80185d0:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80185d2:	2301      	movs	r3, #1
 80185d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80185d6:	232b      	movs	r3, #43	@ 0x2b
 80185d8:	18fb      	adds	r3, r7, r3
 80185da:	2200      	movs	r2, #0
 80185dc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	2250      	movs	r2, #80	@ 0x50
 80185e2:	5c9b      	ldrb	r3, [r3, r2]
 80185e4:	2b01      	cmp	r3, #1
 80185e6:	d101      	bne.n	80185ec <HAL_SPI_TransmitReceive+0x2c>
 80185e8:	2302      	movs	r3, #2
 80185ea:	e1a0      	b.n	801892e <HAL_SPI_TransmitReceive+0x36e>
 80185ec:	68fb      	ldr	r3, [r7, #12]
 80185ee:	2250      	movs	r2, #80	@ 0x50
 80185f0:	2101      	movs	r1, #1
 80185f2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80185f4:	f7fd f84a 	bl	801568c <HAL_GetTick>
 80185f8:	0003      	movs	r3, r0
 80185fa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80185fc:	2023      	movs	r0, #35	@ 0x23
 80185fe:	183b      	adds	r3, r7, r0
 8018600:	68fa      	ldr	r2, [r7, #12]
 8018602:	2151      	movs	r1, #81	@ 0x51
 8018604:	5c52      	ldrb	r2, [r2, r1]
 8018606:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	685b      	ldr	r3, [r3, #4]
 801860c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801860e:	231a      	movs	r3, #26
 8018610:	18fb      	adds	r3, r7, r3
 8018612:	1cba      	adds	r2, r7, #2
 8018614:	8812      	ldrh	r2, [r2, #0]
 8018616:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8018618:	183b      	adds	r3, r7, r0
 801861a:	781b      	ldrb	r3, [r3, #0]
 801861c:	2b01      	cmp	r3, #1
 801861e:	d011      	beq.n	8018644 <HAL_SPI_TransmitReceive+0x84>
 8018620:	69fa      	ldr	r2, [r7, #28]
 8018622:	2382      	movs	r3, #130	@ 0x82
 8018624:	005b      	lsls	r3, r3, #1
 8018626:	429a      	cmp	r2, r3
 8018628:	d107      	bne.n	801863a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	689b      	ldr	r3, [r3, #8]
 801862e:	2b00      	cmp	r3, #0
 8018630:	d103      	bne.n	801863a <HAL_SPI_TransmitReceive+0x7a>
 8018632:	183b      	adds	r3, r7, r0
 8018634:	781b      	ldrb	r3, [r3, #0]
 8018636:	2b04      	cmp	r3, #4
 8018638:	d004      	beq.n	8018644 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 801863a:	232b      	movs	r3, #43	@ 0x2b
 801863c:	18fb      	adds	r3, r7, r3
 801863e:	2202      	movs	r2, #2
 8018640:	701a      	strb	r2, [r3, #0]
    goto error;
 8018642:	e169      	b.n	8018918 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8018644:	68bb      	ldr	r3, [r7, #8]
 8018646:	2b00      	cmp	r3, #0
 8018648:	d006      	beq.n	8018658 <HAL_SPI_TransmitReceive+0x98>
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	2b00      	cmp	r3, #0
 801864e:	d003      	beq.n	8018658 <HAL_SPI_TransmitReceive+0x98>
 8018650:	1cbb      	adds	r3, r7, #2
 8018652:	881b      	ldrh	r3, [r3, #0]
 8018654:	2b00      	cmp	r3, #0
 8018656:	d104      	bne.n	8018662 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8018658:	232b      	movs	r3, #43	@ 0x2b
 801865a:	18fb      	adds	r3, r7, r3
 801865c:	2201      	movs	r2, #1
 801865e:	701a      	strb	r2, [r3, #0]
    goto error;
 8018660:	e15a      	b.n	8018918 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	2251      	movs	r2, #81	@ 0x51
 8018666:	5c9b      	ldrb	r3, [r3, r2]
 8018668:	b2db      	uxtb	r3, r3
 801866a:	2b04      	cmp	r3, #4
 801866c:	d003      	beq.n	8018676 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	2251      	movs	r2, #81	@ 0x51
 8018672:	2105      	movs	r1, #5
 8018674:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	2200      	movs	r2, #0
 801867a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801867c:	68fb      	ldr	r3, [r7, #12]
 801867e:	687a      	ldr	r2, [r7, #4]
 8018680:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	1cba      	adds	r2, r7, #2
 8018686:	8812      	ldrh	r2, [r2, #0]
 8018688:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	1cba      	adds	r2, r7, #2
 801868e:	8812      	ldrh	r2, [r2, #0]
 8018690:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	68ba      	ldr	r2, [r7, #8]
 8018696:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	1cba      	adds	r2, r7, #2
 801869c:	8812      	ldrh	r2, [r2, #0]
 801869e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80186a0:	68fb      	ldr	r3, [r7, #12]
 80186a2:	1cba      	adds	r2, r7, #2
 80186a4:	8812      	ldrh	r2, [r2, #0]
 80186a6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80186a8:	68fb      	ldr	r3, [r7, #12]
 80186aa:	2200      	movs	r2, #0
 80186ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	2200      	movs	r2, #0
 80186b2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80186b4:	68fb      	ldr	r3, [r7, #12]
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	681b      	ldr	r3, [r3, #0]
 80186ba:	2240      	movs	r2, #64	@ 0x40
 80186bc:	4013      	ands	r3, r2
 80186be:	2b40      	cmp	r3, #64	@ 0x40
 80186c0:	d007      	beq.n	80186d2 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80186c2:	68fb      	ldr	r3, [r7, #12]
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	681a      	ldr	r2, [r3, #0]
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	2140      	movs	r1, #64	@ 0x40
 80186ce:	430a      	orrs	r2, r1
 80186d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80186d2:	68fb      	ldr	r3, [r7, #12]
 80186d4:	68da      	ldr	r2, [r3, #12]
 80186d6:	2380      	movs	r3, #128	@ 0x80
 80186d8:	011b      	lsls	r3, r3, #4
 80186da:	429a      	cmp	r2, r3
 80186dc:	d000      	beq.n	80186e0 <HAL_SPI_TransmitReceive+0x120>
 80186de:	e07a      	b.n	80187d6 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80186e0:	68fb      	ldr	r3, [r7, #12]
 80186e2:	685b      	ldr	r3, [r3, #4]
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d004      	beq.n	80186f2 <HAL_SPI_TransmitReceive+0x132>
 80186e8:	231a      	movs	r3, #26
 80186ea:	18fb      	adds	r3, r7, r3
 80186ec:	881b      	ldrh	r3, [r3, #0]
 80186ee:	2b01      	cmp	r3, #1
 80186f0:	d166      	bne.n	80187c0 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80186f2:	68fb      	ldr	r3, [r7, #12]
 80186f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80186f6:	881a      	ldrh	r2, [r3, #0]
 80186f8:	68fb      	ldr	r3, [r7, #12]
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018702:	1c9a      	adds	r2, r3, #2
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8018708:	68fb      	ldr	r3, [r7, #12]
 801870a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801870c:	b29b      	uxth	r3, r3
 801870e:	3b01      	subs	r3, #1
 8018710:	b29a      	uxth	r2, r3
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8018716:	e053      	b.n	80187c0 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	689b      	ldr	r3, [r3, #8]
 801871e:	2202      	movs	r2, #2
 8018720:	4013      	ands	r3, r2
 8018722:	2b02      	cmp	r3, #2
 8018724:	d11b      	bne.n	801875e <HAL_SPI_TransmitReceive+0x19e>
 8018726:	68fb      	ldr	r3, [r7, #12]
 8018728:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801872a:	b29b      	uxth	r3, r3
 801872c:	2b00      	cmp	r3, #0
 801872e:	d016      	beq.n	801875e <HAL_SPI_TransmitReceive+0x19e>
 8018730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018732:	2b01      	cmp	r3, #1
 8018734:	d113      	bne.n	801875e <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8018736:	68fb      	ldr	r3, [r7, #12]
 8018738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801873a:	881a      	ldrh	r2, [r3, #0]
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	681b      	ldr	r3, [r3, #0]
 8018740:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018746:	1c9a      	adds	r2, r3, #2
 8018748:	68fb      	ldr	r3, [r7, #12]
 801874a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 801874c:	68fb      	ldr	r3, [r7, #12]
 801874e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8018750:	b29b      	uxth	r3, r3
 8018752:	3b01      	subs	r3, #1
 8018754:	b29a      	uxth	r2, r3
 8018756:	68fb      	ldr	r3, [r7, #12]
 8018758:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801875a:	2300      	movs	r3, #0
 801875c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	689b      	ldr	r3, [r3, #8]
 8018764:	2201      	movs	r2, #1
 8018766:	4013      	ands	r3, r2
 8018768:	2b01      	cmp	r3, #1
 801876a:	d119      	bne.n	80187a0 <HAL_SPI_TransmitReceive+0x1e0>
 801876c:	68fb      	ldr	r3, [r7, #12]
 801876e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8018770:	b29b      	uxth	r3, r3
 8018772:	2b00      	cmp	r3, #0
 8018774:	d014      	beq.n	80187a0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8018776:	68fb      	ldr	r3, [r7, #12]
 8018778:	681b      	ldr	r3, [r3, #0]
 801877a:	68da      	ldr	r2, [r3, #12]
 801877c:	68fb      	ldr	r3, [r7, #12]
 801877e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018780:	b292      	uxth	r2, r2
 8018782:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018788:	1c9a      	adds	r2, r3, #2
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8018792:	b29b      	uxth	r3, r3
 8018794:	3b01      	subs	r3, #1
 8018796:	b29a      	uxth	r2, r3
 8018798:	68fb      	ldr	r3, [r7, #12]
 801879a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801879c:	2301      	movs	r3, #1
 801879e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80187a0:	f7fc ff74 	bl	801568c <HAL_GetTick>
 80187a4:	0002      	movs	r2, r0
 80187a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187a8:	1ad3      	subs	r3, r2, r3
 80187aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80187ac:	429a      	cmp	r2, r3
 80187ae:	d807      	bhi.n	80187c0 <HAL_SPI_TransmitReceive+0x200>
 80187b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80187b2:	3301      	adds	r3, #1
 80187b4:	d004      	beq.n	80187c0 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 80187b6:	232b      	movs	r3, #43	@ 0x2b
 80187b8:	18fb      	adds	r3, r7, r3
 80187ba:	2203      	movs	r2, #3
 80187bc:	701a      	strb	r2, [r3, #0]
        goto error;
 80187be:	e0ab      	b.n	8018918 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80187c4:	b29b      	uxth	r3, r3
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d1a6      	bne.n	8018718 <HAL_SPI_TransmitReceive+0x158>
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80187ce:	b29b      	uxth	r3, r3
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d1a1      	bne.n	8018718 <HAL_SPI_TransmitReceive+0x158>
 80187d4:	e07f      	b.n	80188d6 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80187d6:	68fb      	ldr	r3, [r7, #12]
 80187d8:	685b      	ldr	r3, [r3, #4]
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d005      	beq.n	80187ea <HAL_SPI_TransmitReceive+0x22a>
 80187de:	231a      	movs	r3, #26
 80187e0:	18fb      	adds	r3, r7, r3
 80187e2:	881b      	ldrh	r3, [r3, #0]
 80187e4:	2b01      	cmp	r3, #1
 80187e6:	d000      	beq.n	80187ea <HAL_SPI_TransmitReceive+0x22a>
 80187e8:	e06b      	b.n	80188c2 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80187ea:	68fb      	ldr	r3, [r7, #12]
 80187ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80187ee:	68fb      	ldr	r3, [r7, #12]
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	330c      	adds	r3, #12
 80187f4:	7812      	ldrb	r2, [r2, #0]
 80187f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80187fc:	1c5a      	adds	r2, r3, #1
 80187fe:	68fb      	ldr	r3, [r7, #12]
 8018800:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8018802:	68fb      	ldr	r3, [r7, #12]
 8018804:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8018806:	b29b      	uxth	r3, r3
 8018808:	3b01      	subs	r3, #1
 801880a:	b29a      	uxth	r2, r3
 801880c:	68fb      	ldr	r3, [r7, #12]
 801880e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8018810:	e057      	b.n	80188c2 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8018812:	68fb      	ldr	r3, [r7, #12]
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	689b      	ldr	r3, [r3, #8]
 8018818:	2202      	movs	r2, #2
 801881a:	4013      	ands	r3, r2
 801881c:	2b02      	cmp	r3, #2
 801881e:	d11c      	bne.n	801885a <HAL_SPI_TransmitReceive+0x29a>
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8018824:	b29b      	uxth	r3, r3
 8018826:	2b00      	cmp	r3, #0
 8018828:	d017      	beq.n	801885a <HAL_SPI_TransmitReceive+0x29a>
 801882a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801882c:	2b01      	cmp	r3, #1
 801882e:	d114      	bne.n	801885a <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8018830:	68fb      	ldr	r3, [r7, #12]
 8018832:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8018834:	68fb      	ldr	r3, [r7, #12]
 8018836:	681b      	ldr	r3, [r3, #0]
 8018838:	330c      	adds	r3, #12
 801883a:	7812      	ldrb	r2, [r2, #0]
 801883c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018842:	1c5a      	adds	r2, r3, #1
 8018844:	68fb      	ldr	r3, [r7, #12]
 8018846:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8018848:	68fb      	ldr	r3, [r7, #12]
 801884a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801884c:	b29b      	uxth	r3, r3
 801884e:	3b01      	subs	r3, #1
 8018850:	b29a      	uxth	r2, r3
 8018852:	68fb      	ldr	r3, [r7, #12]
 8018854:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8018856:	2300      	movs	r3, #0
 8018858:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	689b      	ldr	r3, [r3, #8]
 8018860:	2201      	movs	r2, #1
 8018862:	4013      	ands	r3, r2
 8018864:	2b01      	cmp	r3, #1
 8018866:	d119      	bne.n	801889c <HAL_SPI_TransmitReceive+0x2dc>
 8018868:	68fb      	ldr	r3, [r7, #12]
 801886a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801886c:	b29b      	uxth	r3, r3
 801886e:	2b00      	cmp	r3, #0
 8018870:	d014      	beq.n	801889c <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	68da      	ldr	r2, [r3, #12]
 8018878:	68fb      	ldr	r3, [r7, #12]
 801887a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801887c:	b2d2      	uxtb	r2, r2
 801887e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8018880:	68fb      	ldr	r3, [r7, #12]
 8018882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018884:	1c5a      	adds	r2, r3, #1
 8018886:	68fb      	ldr	r3, [r7, #12]
 8018888:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 801888a:	68fb      	ldr	r3, [r7, #12]
 801888c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801888e:	b29b      	uxth	r3, r3
 8018890:	3b01      	subs	r3, #1
 8018892:	b29a      	uxth	r2, r3
 8018894:	68fb      	ldr	r3, [r7, #12]
 8018896:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8018898:	2301      	movs	r3, #1
 801889a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801889c:	f7fc fef6 	bl	801568c <HAL_GetTick>
 80188a0:	0002      	movs	r2, r0
 80188a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188a4:	1ad3      	subs	r3, r2, r3
 80188a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80188a8:	429a      	cmp	r2, r3
 80188aa:	d802      	bhi.n	80188b2 <HAL_SPI_TransmitReceive+0x2f2>
 80188ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80188ae:	3301      	adds	r3, #1
 80188b0:	d102      	bne.n	80188b8 <HAL_SPI_TransmitReceive+0x2f8>
 80188b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d104      	bne.n	80188c2 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 80188b8:	232b      	movs	r3, #43	@ 0x2b
 80188ba:	18fb      	adds	r3, r7, r3
 80188bc:	2203      	movs	r2, #3
 80188be:	701a      	strb	r2, [r3, #0]
        goto error;
 80188c0:	e02a      	b.n	8018918 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80188c2:	68fb      	ldr	r3, [r7, #12]
 80188c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80188c6:	b29b      	uxth	r3, r3
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	d1a2      	bne.n	8018812 <HAL_SPI_TransmitReceive+0x252>
 80188cc:	68fb      	ldr	r3, [r7, #12]
 80188ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80188d0:	b29b      	uxth	r3, r3
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d19d      	bne.n	8018812 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80188d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80188d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80188da:	68fb      	ldr	r3, [r7, #12]
 80188dc:	0018      	movs	r0, r3
 80188de:	f000 f89b 	bl	8018a18 <SPI_EndRxTxTransaction>
 80188e2:	1e03      	subs	r3, r0, #0
 80188e4:	d007      	beq.n	80188f6 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 80188e6:	232b      	movs	r3, #43	@ 0x2b
 80188e8:	18fb      	adds	r3, r7, r3
 80188ea:	2201      	movs	r2, #1
 80188ec:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80188ee:	68fb      	ldr	r3, [r7, #12]
 80188f0:	2220      	movs	r2, #32
 80188f2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80188f4:	e010      	b.n	8018918 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80188f6:	68fb      	ldr	r3, [r7, #12]
 80188f8:	689b      	ldr	r3, [r3, #8]
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d10b      	bne.n	8018916 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80188fe:	2300      	movs	r3, #0
 8018900:	617b      	str	r3, [r7, #20]
 8018902:	68fb      	ldr	r3, [r7, #12]
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	68db      	ldr	r3, [r3, #12]
 8018908:	617b      	str	r3, [r7, #20]
 801890a:	68fb      	ldr	r3, [r7, #12]
 801890c:	681b      	ldr	r3, [r3, #0]
 801890e:	689b      	ldr	r3, [r3, #8]
 8018910:	617b      	str	r3, [r7, #20]
 8018912:	697b      	ldr	r3, [r7, #20]
 8018914:	e000      	b.n	8018918 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8018916:	46c0      	nop			@ (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8018918:	68fb      	ldr	r3, [r7, #12]
 801891a:	2251      	movs	r2, #81	@ 0x51
 801891c:	2101      	movs	r1, #1
 801891e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8018920:	68fb      	ldr	r3, [r7, #12]
 8018922:	2250      	movs	r2, #80	@ 0x50
 8018924:	2100      	movs	r1, #0
 8018926:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8018928:	232b      	movs	r3, #43	@ 0x2b
 801892a:	18fb      	adds	r3, r7, r3
 801892c:	781b      	ldrb	r3, [r3, #0]
}
 801892e:	0018      	movs	r0, r3
 8018930:	46bd      	mov	sp, r7
 8018932:	b00c      	add	sp, #48	@ 0x30
 8018934:	bd80      	pop	{r7, pc}
	...

08018938 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8018938:	b580      	push	{r7, lr}
 801893a:	b084      	sub	sp, #16
 801893c:	af00      	add	r7, sp, #0
 801893e:	60f8      	str	r0, [r7, #12]
 8018940:	60b9      	str	r1, [r7, #8]
 8018942:	603b      	str	r3, [r7, #0]
 8018944:	1dfb      	adds	r3, r7, #7
 8018946:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8018948:	e050      	b.n	80189ec <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 801894a:	683b      	ldr	r3, [r7, #0]
 801894c:	3301      	adds	r3, #1
 801894e:	d04d      	beq.n	80189ec <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8018950:	f7fc fe9c 	bl	801568c <HAL_GetTick>
 8018954:	0002      	movs	r2, r0
 8018956:	69bb      	ldr	r3, [r7, #24]
 8018958:	1ad3      	subs	r3, r2, r3
 801895a:	683a      	ldr	r2, [r7, #0]
 801895c:	429a      	cmp	r2, r3
 801895e:	d902      	bls.n	8018966 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8018960:	683b      	ldr	r3, [r7, #0]
 8018962:	2b00      	cmp	r3, #0
 8018964:	d142      	bne.n	80189ec <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8018966:	68fb      	ldr	r3, [r7, #12]
 8018968:	681b      	ldr	r3, [r3, #0]
 801896a:	685a      	ldr	r2, [r3, #4]
 801896c:	68fb      	ldr	r3, [r7, #12]
 801896e:	681b      	ldr	r3, [r3, #0]
 8018970:	21e0      	movs	r1, #224	@ 0xe0
 8018972:	438a      	bics	r2, r1
 8018974:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018976:	68fb      	ldr	r3, [r7, #12]
 8018978:	685a      	ldr	r2, [r3, #4]
 801897a:	2382      	movs	r3, #130	@ 0x82
 801897c:	005b      	lsls	r3, r3, #1
 801897e:	429a      	cmp	r2, r3
 8018980:	d113      	bne.n	80189aa <SPI_WaitFlagStateUntilTimeout+0x72>
 8018982:	68fb      	ldr	r3, [r7, #12]
 8018984:	689a      	ldr	r2, [r3, #8]
 8018986:	2380      	movs	r3, #128	@ 0x80
 8018988:	021b      	lsls	r3, r3, #8
 801898a:	429a      	cmp	r2, r3
 801898c:	d005      	beq.n	801899a <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	689a      	ldr	r2, [r3, #8]
 8018992:	2380      	movs	r3, #128	@ 0x80
 8018994:	00db      	lsls	r3, r3, #3
 8018996:	429a      	cmp	r2, r3
 8018998:	d107      	bne.n	80189aa <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801899a:	68fb      	ldr	r3, [r7, #12]
 801899c:	681b      	ldr	r3, [r3, #0]
 801899e:	681a      	ldr	r2, [r3, #0]
 80189a0:	68fb      	ldr	r3, [r7, #12]
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	2140      	movs	r1, #64	@ 0x40
 80189a6:	438a      	bics	r2, r1
 80189a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80189ae:	2380      	movs	r3, #128	@ 0x80
 80189b0:	019b      	lsls	r3, r3, #6
 80189b2:	429a      	cmp	r2, r3
 80189b4:	d110      	bne.n	80189d8 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80189b6:	68fb      	ldr	r3, [r7, #12]
 80189b8:	681b      	ldr	r3, [r3, #0]
 80189ba:	681a      	ldr	r2, [r3, #0]
 80189bc:	68fb      	ldr	r3, [r7, #12]
 80189be:	681b      	ldr	r3, [r3, #0]
 80189c0:	4914      	ldr	r1, [pc, #80]	@ (8018a14 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 80189c2:	400a      	ands	r2, r1
 80189c4:	601a      	str	r2, [r3, #0]
 80189c6:	68fb      	ldr	r3, [r7, #12]
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	681a      	ldr	r2, [r3, #0]
 80189cc:	68fb      	ldr	r3, [r7, #12]
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	2180      	movs	r1, #128	@ 0x80
 80189d2:	0189      	lsls	r1, r1, #6
 80189d4:	430a      	orrs	r2, r1
 80189d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80189d8:	68fb      	ldr	r3, [r7, #12]
 80189da:	2251      	movs	r2, #81	@ 0x51
 80189dc:	2101      	movs	r1, #1
 80189de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80189e0:	68fb      	ldr	r3, [r7, #12]
 80189e2:	2250      	movs	r2, #80	@ 0x50
 80189e4:	2100      	movs	r1, #0
 80189e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80189e8:	2303      	movs	r3, #3
 80189ea:	e00f      	b.n	8018a0c <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	689b      	ldr	r3, [r3, #8]
 80189f2:	68ba      	ldr	r2, [r7, #8]
 80189f4:	4013      	ands	r3, r2
 80189f6:	68ba      	ldr	r2, [r7, #8]
 80189f8:	1ad3      	subs	r3, r2, r3
 80189fa:	425a      	negs	r2, r3
 80189fc:	4153      	adcs	r3, r2
 80189fe:	b2db      	uxtb	r3, r3
 8018a00:	001a      	movs	r2, r3
 8018a02:	1dfb      	adds	r3, r7, #7
 8018a04:	781b      	ldrb	r3, [r3, #0]
 8018a06:	429a      	cmp	r2, r3
 8018a08:	d19f      	bne.n	801894a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8018a0a:	2300      	movs	r3, #0
}
 8018a0c:	0018      	movs	r0, r3
 8018a0e:	46bd      	mov	sp, r7
 8018a10:	b004      	add	sp, #16
 8018a12:	bd80      	pop	{r7, pc}
 8018a14:	ffffdfff 	.word	0xffffdfff

08018a18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8018a18:	b580      	push	{r7, lr}
 8018a1a:	b086      	sub	sp, #24
 8018a1c:	af02      	add	r7, sp, #8
 8018a1e:	60f8      	str	r0, [r7, #12]
 8018a20:	60b9      	str	r1, [r7, #8]
 8018a22:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8018a24:	68fb      	ldr	r3, [r7, #12]
 8018a26:	685a      	ldr	r2, [r3, #4]
 8018a28:	2382      	movs	r3, #130	@ 0x82
 8018a2a:	005b      	lsls	r3, r3, #1
 8018a2c:	429a      	cmp	r2, r3
 8018a2e:	d112      	bne.n	8018a56 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8018a30:	68ba      	ldr	r2, [r7, #8]
 8018a32:	68f8      	ldr	r0, [r7, #12]
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	9300      	str	r3, [sp, #0]
 8018a38:	0013      	movs	r3, r2
 8018a3a:	2200      	movs	r2, #0
 8018a3c:	2180      	movs	r1, #128	@ 0x80
 8018a3e:	f7ff ff7b 	bl	8018938 <SPI_WaitFlagStateUntilTimeout>
 8018a42:	1e03      	subs	r3, r0, #0
 8018a44:	d020      	beq.n	8018a88 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018a4a:	2220      	movs	r2, #32
 8018a4c:	431a      	orrs	r2, r3
 8018a4e:	68fb      	ldr	r3, [r7, #12]
 8018a50:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8018a52:	2303      	movs	r3, #3
 8018a54:	e019      	b.n	8018a8a <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8018a56:	68fb      	ldr	r3, [r7, #12]
 8018a58:	2251      	movs	r2, #81	@ 0x51
 8018a5a:	5c9b      	ldrb	r3, [r3, r2]
 8018a5c:	b2db      	uxtb	r3, r3
 8018a5e:	2b05      	cmp	r3, #5
 8018a60:	d112      	bne.n	8018a88 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8018a62:	68ba      	ldr	r2, [r7, #8]
 8018a64:	68f8      	ldr	r0, [r7, #12]
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	9300      	str	r3, [sp, #0]
 8018a6a:	0013      	movs	r3, r2
 8018a6c:	2200      	movs	r2, #0
 8018a6e:	2101      	movs	r1, #1
 8018a70:	f7ff ff62 	bl	8018938 <SPI_WaitFlagStateUntilTimeout>
 8018a74:	1e03      	subs	r3, r0, #0
 8018a76:	d007      	beq.n	8018a88 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8018a78:	68fb      	ldr	r3, [r7, #12]
 8018a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018a7c:	2220      	movs	r2, #32
 8018a7e:	431a      	orrs	r2, r3
 8018a80:	68fb      	ldr	r3, [r7, #12]
 8018a82:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8018a84:	2303      	movs	r3, #3
 8018a86:	e000      	b.n	8018a8a <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8018a88:	2300      	movs	r3, #0
}
 8018a8a:	0018      	movs	r0, r3
 8018a8c:	46bd      	mov	sp, r7
 8018a8e:	b004      	add	sp, #16
 8018a90:	bd80      	pop	{r7, pc}
	...

08018a94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018a94:	b580      	push	{r7, lr}
 8018a96:	b082      	sub	sp, #8
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d101      	bne.n	8018aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8018aa2:	2301      	movs	r3, #1
 8018aa4:	e044      	b.n	8018b30 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d107      	bne.n	8018abe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	2270      	movs	r2, #112	@ 0x70
 8018ab2:	2100      	movs	r1, #0
 8018ab4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	0018      	movs	r0, r3
 8018aba:	f7ec f997 	bl	8004dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	2224      	movs	r2, #36	@ 0x24
 8018ac2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	681a      	ldr	r2, [r3, #0]
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	681b      	ldr	r3, [r3, #0]
 8018ace:	2101      	movs	r1, #1
 8018ad0:	438a      	bics	r2, r1
 8018ad2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	0018      	movs	r0, r3
 8018ad8:	f000 f9f4 	bl	8018ec4 <UART_SetConfig>
 8018adc:	0003      	movs	r3, r0
 8018ade:	2b01      	cmp	r3, #1
 8018ae0:	d101      	bne.n	8018ae6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8018ae2:	2301      	movs	r3, #1
 8018ae4:	e024      	b.n	8018b30 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d003      	beq.n	8018af6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	0018      	movs	r0, r3
 8018af2:	f000 fcfd 	bl	80194f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	685a      	ldr	r2, [r3, #4]
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	490d      	ldr	r1, [pc, #52]	@ (8018b38 <HAL_UART_Init+0xa4>)
 8018b02:	400a      	ands	r2, r1
 8018b04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	681b      	ldr	r3, [r3, #0]
 8018b0a:	689a      	ldr	r2, [r3, #8]
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	681b      	ldr	r3, [r3, #0]
 8018b10:	212a      	movs	r1, #42	@ 0x2a
 8018b12:	438a      	bics	r2, r1
 8018b14:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	681b      	ldr	r3, [r3, #0]
 8018b1a:	681a      	ldr	r2, [r3, #0]
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	2101      	movs	r1, #1
 8018b22:	430a      	orrs	r2, r1
 8018b24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	0018      	movs	r0, r3
 8018b2a:	f000 fd95 	bl	8019658 <UART_CheckIdleState>
 8018b2e:	0003      	movs	r3, r0
}
 8018b30:	0018      	movs	r0, r3
 8018b32:	46bd      	mov	sp, r7
 8018b34:	b002      	add	sp, #8
 8018b36:	bd80      	pop	{r7, pc}
 8018b38:	ffffb7ff 	.word	0xffffb7ff

08018b3c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018b3c:	b580      	push	{r7, lr}
 8018b3e:	b084      	sub	sp, #16
 8018b40:	af00      	add	r7, sp, #0
 8018b42:	60f8      	str	r0, [r7, #12]
 8018b44:	60b9      	str	r1, [r7, #8]
 8018b46:	1dbb      	adds	r3, r7, #6
 8018b48:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8018b4a:	68fb      	ldr	r3, [r7, #12]
 8018b4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018b4e:	2b20      	cmp	r3, #32
 8018b50:	d000      	beq.n	8018b54 <HAL_UART_Transmit_DMA+0x18>
 8018b52:	e077      	b.n	8018c44 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8018b54:	68bb      	ldr	r3, [r7, #8]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d003      	beq.n	8018b62 <HAL_UART_Transmit_DMA+0x26>
 8018b5a:	1dbb      	adds	r3, r7, #6
 8018b5c:	881b      	ldrh	r3, [r3, #0]
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d101      	bne.n	8018b66 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8018b62:	2301      	movs	r3, #1
 8018b64:	e06f      	b.n	8018c46 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	689a      	ldr	r2, [r3, #8]
 8018b6a:	2380      	movs	r3, #128	@ 0x80
 8018b6c:	015b      	lsls	r3, r3, #5
 8018b6e:	429a      	cmp	r2, r3
 8018b70:	d109      	bne.n	8018b86 <HAL_UART_Transmit_DMA+0x4a>
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	691b      	ldr	r3, [r3, #16]
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d105      	bne.n	8018b86 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8018b7a:	68bb      	ldr	r3, [r7, #8]
 8018b7c:	2201      	movs	r2, #1
 8018b7e:	4013      	ands	r3, r2
 8018b80:	d001      	beq.n	8018b86 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8018b82:	2301      	movs	r3, #1
 8018b84:	e05f      	b.n	8018c46 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	2270      	movs	r2, #112	@ 0x70
 8018b8a:	5c9b      	ldrb	r3, [r3, r2]
 8018b8c:	2b01      	cmp	r3, #1
 8018b8e:	d101      	bne.n	8018b94 <HAL_UART_Transmit_DMA+0x58>
 8018b90:	2302      	movs	r3, #2
 8018b92:	e058      	b.n	8018c46 <HAL_UART_Transmit_DMA+0x10a>
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	2270      	movs	r2, #112	@ 0x70
 8018b98:	2101      	movs	r1, #1
 8018b9a:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8018b9c:	68fb      	ldr	r3, [r7, #12]
 8018b9e:	68ba      	ldr	r2, [r7, #8]
 8018ba0:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8018ba2:	68fb      	ldr	r3, [r7, #12]
 8018ba4:	1dba      	adds	r2, r7, #6
 8018ba6:	2150      	movs	r1, #80	@ 0x50
 8018ba8:	8812      	ldrh	r2, [r2, #0]
 8018baa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	1dba      	adds	r2, r7, #6
 8018bb0:	2152      	movs	r1, #82	@ 0x52
 8018bb2:	8812      	ldrh	r2, [r2, #0]
 8018bb4:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018bb6:	68fb      	ldr	r3, [r7, #12]
 8018bb8:	2200      	movs	r2, #0
 8018bba:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	2221      	movs	r2, #33	@ 0x21
 8018bc0:	675a      	str	r2, [r3, #116]	@ 0x74

    if (huart->hdmatx != NULL)
 8018bc2:	68fb      	ldr	r3, [r7, #12]
 8018bc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	d02a      	beq.n	8018c20 <HAL_UART_Transmit_DMA+0xe4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018bce:	4a20      	ldr	r2, [pc, #128]	@ (8018c50 <HAL_UART_Transmit_DMA+0x114>)
 8018bd0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8018c54 <HAL_UART_Transmit_DMA+0x118>)
 8018bd8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018bde:	4a1e      	ldr	r2, [pc, #120]	@ (8018c58 <HAL_UART_Transmit_DMA+0x11c>)
 8018be0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8018be2:	68fb      	ldr	r3, [r7, #12]
 8018be4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018be6:	2200      	movs	r2, #0
 8018be8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8018bea:	68fb      	ldr	r3, [r7, #12]
 8018bec:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8018bee:	68fb      	ldr	r3, [r7, #12]
 8018bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018bf2:	0019      	movs	r1, r3
 8018bf4:	68fb      	ldr	r3, [r7, #12]
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	3328      	adds	r3, #40	@ 0x28
 8018bfa:	001a      	movs	r2, r3
 8018bfc:	1dbb      	adds	r3, r7, #6
 8018bfe:	881b      	ldrh	r3, [r3, #0]
 8018c00:	f7fd fbf6 	bl	80163f0 <HAL_DMA_Start_IT>
 8018c04:	1e03      	subs	r3, r0, #0
 8018c06:	d00b      	beq.n	8018c20 <HAL_UART_Transmit_DMA+0xe4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8018c08:	68fb      	ldr	r3, [r7, #12]
 8018c0a:	2210      	movs	r2, #16
 8018c0c:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8018c0e:	68fb      	ldr	r3, [r7, #12]
 8018c10:	2270      	movs	r2, #112	@ 0x70
 8018c12:	2100      	movs	r1, #0
 8018c14:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8018c16:	68fb      	ldr	r3, [r7, #12]
 8018c18:	2220      	movs	r2, #32
 8018c1a:	675a      	str	r2, [r3, #116]	@ 0x74

        return HAL_ERROR;
 8018c1c:	2301      	movs	r3, #1
 8018c1e:	e012      	b.n	8018c46 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8018c20:	68fb      	ldr	r3, [r7, #12]
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	2240      	movs	r2, #64	@ 0x40
 8018c26:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8018c28:	68fb      	ldr	r3, [r7, #12]
 8018c2a:	2270      	movs	r2, #112	@ 0x70
 8018c2c:	2100      	movs	r1, #0
 8018c2e:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8018c30:	68fb      	ldr	r3, [r7, #12]
 8018c32:	681b      	ldr	r3, [r3, #0]
 8018c34:	689a      	ldr	r2, [r3, #8]
 8018c36:	68fb      	ldr	r3, [r7, #12]
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	2180      	movs	r1, #128	@ 0x80
 8018c3c:	430a      	orrs	r2, r1
 8018c3e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8018c40:	2300      	movs	r3, #0
 8018c42:	e000      	b.n	8018c46 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8018c44:	2302      	movs	r3, #2
  }
}
 8018c46:	0018      	movs	r0, r3
 8018c48:	46bd      	mov	sp, r7
 8018c4a:	b004      	add	sp, #16
 8018c4c:	bd80      	pop	{r7, pc}
 8018c4e:	46c0      	nop			@ (mov r8, r8)
 8018c50:	080197dd 	.word	0x080197dd
 8018c54:	08019831 	.word	0x08019831
 8018c58:	0801984f 	.word	0x0801984f

08018c5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8018c5c:	b580      	push	{r7, lr}
 8018c5e:	b088      	sub	sp, #32
 8018c60:	af00      	add	r7, sp, #0
 8018c62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	69db      	ldr	r3, [r3, #28]
 8018c6a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	681b      	ldr	r3, [r3, #0]
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	689b      	ldr	r3, [r3, #8]
 8018c7a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8018c7c:	69fb      	ldr	r3, [r7, #28]
 8018c7e:	220f      	movs	r2, #15
 8018c80:	4013      	ands	r3, r2
 8018c82:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8018c84:	693b      	ldr	r3, [r7, #16]
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d112      	bne.n	8018cb0 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8018c8a:	69fb      	ldr	r3, [r7, #28]
 8018c8c:	2220      	movs	r2, #32
 8018c8e:	4013      	ands	r3, r2
 8018c90:	d00e      	beq.n	8018cb0 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8018c92:	69bb      	ldr	r3, [r7, #24]
 8018c94:	2220      	movs	r2, #32
 8018c96:	4013      	ands	r3, r2
 8018c98:	d00a      	beq.n	8018cb0 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d100      	bne.n	8018ca4 <HAL_UART_IRQHandler+0x48>
 8018ca2:	e0f5      	b.n	8018e90 <HAL_UART_IRQHandler+0x234>
      {
        huart->RxISR(huart);
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018ca8:	687a      	ldr	r2, [r7, #4]
 8018caa:	0010      	movs	r0, r2
 8018cac:	4798      	blx	r3
      }
      return;
 8018cae:	e0ef      	b.n	8018e90 <HAL_UART_IRQHandler+0x234>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8018cb0:	693b      	ldr	r3, [r7, #16]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d100      	bne.n	8018cb8 <HAL_UART_IRQHandler+0x5c>
 8018cb6:	e0b8      	b.n	8018e2a <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8018cb8:	697b      	ldr	r3, [r7, #20]
 8018cba:	2201      	movs	r2, #1
 8018cbc:	4013      	ands	r3, r2
 8018cbe:	d105      	bne.n	8018ccc <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8018cc0:	69ba      	ldr	r2, [r7, #24]
 8018cc2:	2390      	movs	r3, #144	@ 0x90
 8018cc4:	005b      	lsls	r3, r3, #1
 8018cc6:	4013      	ands	r3, r2
 8018cc8:	d100      	bne.n	8018ccc <HAL_UART_IRQHandler+0x70>
 8018cca:	e0ae      	b.n	8018e2a <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8018ccc:	69fb      	ldr	r3, [r7, #28]
 8018cce:	2201      	movs	r2, #1
 8018cd0:	4013      	ands	r3, r2
 8018cd2:	d00e      	beq.n	8018cf2 <HAL_UART_IRQHandler+0x96>
 8018cd4:	69ba      	ldr	r2, [r7, #24]
 8018cd6:	2380      	movs	r3, #128	@ 0x80
 8018cd8:	005b      	lsls	r3, r3, #1
 8018cda:	4013      	ands	r3, r2
 8018cdc:	d009      	beq.n	8018cf2 <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	681b      	ldr	r3, [r3, #0]
 8018ce2:	2201      	movs	r2, #1
 8018ce4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018cea:	2201      	movs	r2, #1
 8018cec:	431a      	orrs	r2, r3
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018cf2:	69fb      	ldr	r3, [r7, #28]
 8018cf4:	2202      	movs	r2, #2
 8018cf6:	4013      	ands	r3, r2
 8018cf8:	d00d      	beq.n	8018d16 <HAL_UART_IRQHandler+0xba>
 8018cfa:	697b      	ldr	r3, [r7, #20]
 8018cfc:	2201      	movs	r2, #1
 8018cfe:	4013      	ands	r3, r2
 8018d00:	d009      	beq.n	8018d16 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	681b      	ldr	r3, [r3, #0]
 8018d06:	2202      	movs	r2, #2
 8018d08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018d0e:	2204      	movs	r2, #4
 8018d10:	431a      	orrs	r2, r3
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018d16:	69fb      	ldr	r3, [r7, #28]
 8018d18:	2204      	movs	r2, #4
 8018d1a:	4013      	ands	r3, r2
 8018d1c:	d00d      	beq.n	8018d3a <HAL_UART_IRQHandler+0xde>
 8018d1e:	697b      	ldr	r3, [r7, #20]
 8018d20:	2201      	movs	r2, #1
 8018d22:	4013      	ands	r3, r2
 8018d24:	d009      	beq.n	8018d3a <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	681b      	ldr	r3, [r3, #0]
 8018d2a:	2204      	movs	r2, #4
 8018d2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018d32:	2202      	movs	r2, #2
 8018d34:	431a      	orrs	r2, r3
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8018d3a:	69fb      	ldr	r3, [r7, #28]
 8018d3c:	2208      	movs	r2, #8
 8018d3e:	4013      	ands	r3, r2
 8018d40:	d011      	beq.n	8018d66 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8018d42:	69bb      	ldr	r3, [r7, #24]
 8018d44:	2220      	movs	r2, #32
 8018d46:	4013      	ands	r3, r2
 8018d48:	d103      	bne.n	8018d52 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8018d4a:	697b      	ldr	r3, [r7, #20]
 8018d4c:	2201      	movs	r2, #1
 8018d4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8018d50:	d009      	beq.n	8018d66 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	2208      	movs	r2, #8
 8018d58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018d5e:	2208      	movs	r2, #8
 8018d60:	431a      	orrs	r2, r3
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d100      	bne.n	8018d70 <HAL_UART_IRQHandler+0x114>
 8018d6e:	e091      	b.n	8018e94 <HAL_UART_IRQHandler+0x238>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8018d70:	69fb      	ldr	r3, [r7, #28]
 8018d72:	2220      	movs	r2, #32
 8018d74:	4013      	ands	r3, r2
 8018d76:	d00c      	beq.n	8018d92 <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8018d78:	69bb      	ldr	r3, [r7, #24]
 8018d7a:	2220      	movs	r2, #32
 8018d7c:	4013      	ands	r3, r2
 8018d7e:	d008      	beq.n	8018d92 <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018d84:	2b00      	cmp	r3, #0
 8018d86:	d004      	beq.n	8018d92 <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018d8c:	687a      	ldr	r2, [r7, #4]
 8018d8e:	0010      	movs	r0, r2
 8018d90:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018d96:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	689b      	ldr	r3, [r3, #8]
 8018d9e:	2240      	movs	r2, #64	@ 0x40
 8018da0:	4013      	ands	r3, r2
 8018da2:	2b40      	cmp	r3, #64	@ 0x40
 8018da4:	d003      	beq.n	8018dae <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8018da6:	68fb      	ldr	r3, [r7, #12]
 8018da8:	2208      	movs	r2, #8
 8018daa:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018dac:	d033      	beq.n	8018e16 <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	0018      	movs	r0, r3
 8018db2:	f000 fcf3 	bl	801979c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	689b      	ldr	r3, [r3, #8]
 8018dbc:	2240      	movs	r2, #64	@ 0x40
 8018dbe:	4013      	ands	r3, r2
 8018dc0:	2b40      	cmp	r3, #64	@ 0x40
 8018dc2:	d123      	bne.n	8018e0c <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	689a      	ldr	r2, [r3, #8]
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	2140      	movs	r1, #64	@ 0x40
 8018dd0:	438a      	bics	r2, r1
 8018dd2:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d012      	beq.n	8018e02 <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018de0:	4a2f      	ldr	r2, [pc, #188]	@ (8018ea0 <HAL_UART_IRQHandler+0x244>)
 8018de2:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018de8:	0018      	movs	r0, r3
 8018dea:	f7fd fb67 	bl	80164bc <HAL_DMA_Abort_IT>
 8018dee:	1e03      	subs	r3, r0, #0
 8018df0:	d019      	beq.n	8018e26 <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018df6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018dfc:	0018      	movs	r0, r3
 8018dfe:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018e00:	e011      	b.n	8018e26 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	0018      	movs	r0, r3
 8018e06:	f000 f855 	bl	8018eb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018e0a:	e00c      	b.n	8018e26 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	0018      	movs	r0, r3
 8018e10:	f000 f850 	bl	8018eb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018e14:	e007      	b.n	8018e26 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	0018      	movs	r0, r3
 8018e1a:	f000 f84b 	bl	8018eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	2200      	movs	r2, #0
 8018e22:	67da      	str	r2, [r3, #124]	@ 0x7c
      }
    }
    return;
 8018e24:	e036      	b.n	8018e94 <HAL_UART_IRQHandler+0x238>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018e26:	46c0      	nop			@ (mov r8, r8)
    return;
 8018e28:	e034      	b.n	8018e94 <HAL_UART_IRQHandler+0x238>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8018e2a:	69fa      	ldr	r2, [r7, #28]
 8018e2c:	2380      	movs	r3, #128	@ 0x80
 8018e2e:	035b      	lsls	r3, r3, #13
 8018e30:	4013      	ands	r3, r2
 8018e32:	d00e      	beq.n	8018e52 <HAL_UART_IRQHandler+0x1f6>
 8018e34:	697a      	ldr	r2, [r7, #20]
 8018e36:	2380      	movs	r3, #128	@ 0x80
 8018e38:	03db      	lsls	r3, r3, #15
 8018e3a:	4013      	ands	r3, r2
 8018e3c:	d009      	beq.n	8018e52 <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	681b      	ldr	r3, [r3, #0]
 8018e42:	2280      	movs	r2, #128	@ 0x80
 8018e44:	0352      	lsls	r2, r2, #13
 8018e46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	0018      	movs	r0, r3
 8018e4c:	f000 fd6f 	bl	801992e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8018e50:	e023      	b.n	8018e9a <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8018e52:	69fb      	ldr	r3, [r7, #28]
 8018e54:	2280      	movs	r2, #128	@ 0x80
 8018e56:	4013      	ands	r3, r2
 8018e58:	d00d      	beq.n	8018e76 <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8018e5a:	69bb      	ldr	r3, [r7, #24]
 8018e5c:	2280      	movs	r2, #128	@ 0x80
 8018e5e:	4013      	ands	r3, r2
 8018e60:	d009      	beq.n	8018e76 <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d016      	beq.n	8018e98 <HAL_UART_IRQHandler+0x23c>
    {
      huart->TxISR(huart);
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018e6e:	687a      	ldr	r2, [r7, #4]
 8018e70:	0010      	movs	r0, r2
 8018e72:	4798      	blx	r3
    }
    return;
 8018e74:	e010      	b.n	8018e98 <HAL_UART_IRQHandler+0x23c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8018e76:	69fb      	ldr	r3, [r7, #28]
 8018e78:	2240      	movs	r2, #64	@ 0x40
 8018e7a:	4013      	ands	r3, r2
 8018e7c:	d00d      	beq.n	8018e9a <HAL_UART_IRQHandler+0x23e>
 8018e7e:	69bb      	ldr	r3, [r7, #24]
 8018e80:	2240      	movs	r2, #64	@ 0x40
 8018e82:	4013      	ands	r3, r2
 8018e84:	d009      	beq.n	8018e9a <HAL_UART_IRQHandler+0x23e>
  {
    UART_EndTransmit_IT(huart);
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	0018      	movs	r0, r3
 8018e8a:	f000 fd36 	bl	80198fa <UART_EndTransmit_IT>
    return;
 8018e8e:	e004      	b.n	8018e9a <HAL_UART_IRQHandler+0x23e>
      return;
 8018e90:	46c0      	nop			@ (mov r8, r8)
 8018e92:	e002      	b.n	8018e9a <HAL_UART_IRQHandler+0x23e>
    return;
 8018e94:	46c0      	nop			@ (mov r8, r8)
 8018e96:	e000      	b.n	8018e9a <HAL_UART_IRQHandler+0x23e>
    return;
 8018e98:	46c0      	nop			@ (mov r8, r8)
  }

}
 8018e9a:	46bd      	mov	sp, r7
 8018e9c:	b008      	add	sp, #32
 8018e9e:	bd80      	pop	{r7, pc}
 8018ea0:	080198cd 	.word	0x080198cd

08018ea4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8018ea4:	b580      	push	{r7, lr}
 8018ea6:	b082      	sub	sp, #8
 8018ea8:	af00      	add	r7, sp, #0
 8018eaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8018eac:	46c0      	nop			@ (mov r8, r8)
 8018eae:	46bd      	mov	sp, r7
 8018eb0:	b002      	add	sp, #8
 8018eb2:	bd80      	pop	{r7, pc}

08018eb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8018eb4:	b580      	push	{r7, lr}
 8018eb6:	b082      	sub	sp, #8
 8018eb8:	af00      	add	r7, sp, #0
 8018eba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8018ebc:	46c0      	nop			@ (mov r8, r8)
 8018ebe:	46bd      	mov	sp, r7
 8018ec0:	b002      	add	sp, #8
 8018ec2:	bd80      	pop	{r7, pc}

08018ec4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018ec4:	b5b0      	push	{r4, r5, r7, lr}
 8018ec6:	b08e      	sub	sp, #56	@ 0x38
 8018ec8:	af00      	add	r7, sp, #0
 8018eca:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8018ecc:	231b      	movs	r3, #27
 8018ece:	2118      	movs	r1, #24
 8018ed0:	185b      	adds	r3, r3, r1
 8018ed2:	19db      	adds	r3, r3, r7
 8018ed4:	2210      	movs	r2, #16
 8018ed6:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8018ed8:	2300      	movs	r3, #0
 8018eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8018edc:	2313      	movs	r3, #19
 8018ede:	185b      	adds	r3, r3, r1
 8018ee0:	19db      	adds	r3, r3, r7
 8018ee2:	2200      	movs	r2, #0
 8018ee4:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8018ee6:	2300      	movs	r3, #0
 8018ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018eea:	69fb      	ldr	r3, [r7, #28]
 8018eec:	689a      	ldr	r2, [r3, #8]
 8018eee:	69fb      	ldr	r3, [r7, #28]
 8018ef0:	691b      	ldr	r3, [r3, #16]
 8018ef2:	431a      	orrs	r2, r3
 8018ef4:	69fb      	ldr	r3, [r7, #28]
 8018ef6:	695b      	ldr	r3, [r3, #20]
 8018ef8:	431a      	orrs	r2, r3
 8018efa:	69fb      	ldr	r3, [r7, #28]
 8018efc:	69db      	ldr	r3, [r3, #28]
 8018efe:	4313      	orrs	r3, r2
 8018f00:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8018f02:	69fb      	ldr	r3, [r7, #28]
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	681b      	ldr	r3, [r3, #0]
 8018f08:	4ac2      	ldr	r2, [pc, #776]	@ (8019214 <UART_SetConfig+0x350>)
 8018f0a:	4013      	ands	r3, r2
 8018f0c:	0019      	movs	r1, r3
 8018f0e:	69fb      	ldr	r3, [r7, #28]
 8018f10:	681b      	ldr	r3, [r3, #0]
 8018f12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018f14:	430a      	orrs	r2, r1
 8018f16:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018f18:	69fb      	ldr	r3, [r7, #28]
 8018f1a:	681b      	ldr	r3, [r3, #0]
 8018f1c:	685b      	ldr	r3, [r3, #4]
 8018f1e:	4abe      	ldr	r2, [pc, #760]	@ (8019218 <UART_SetConfig+0x354>)
 8018f20:	4013      	ands	r3, r2
 8018f22:	0019      	movs	r1, r3
 8018f24:	69fb      	ldr	r3, [r7, #28]
 8018f26:	68da      	ldr	r2, [r3, #12]
 8018f28:	69fb      	ldr	r3, [r7, #28]
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	430a      	orrs	r2, r1
 8018f2e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018f30:	69fb      	ldr	r3, [r7, #28]
 8018f32:	699b      	ldr	r3, [r3, #24]
 8018f34:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8018f36:	69fb      	ldr	r3, [r7, #28]
 8018f38:	681b      	ldr	r3, [r3, #0]
 8018f3a:	4ab8      	ldr	r2, [pc, #736]	@ (801921c <UART_SetConfig+0x358>)
 8018f3c:	4293      	cmp	r3, r2
 8018f3e:	d004      	beq.n	8018f4a <UART_SetConfig+0x86>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8018f40:	69fb      	ldr	r3, [r7, #28]
 8018f42:	6a1b      	ldr	r3, [r3, #32]
 8018f44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018f46:	4313      	orrs	r3, r2
 8018f48:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018f4a:	69fb      	ldr	r3, [r7, #28]
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	689b      	ldr	r3, [r3, #8]
 8018f50:	4ab3      	ldr	r2, [pc, #716]	@ (8019220 <UART_SetConfig+0x35c>)
 8018f52:	4013      	ands	r3, r2
 8018f54:	0019      	movs	r1, r3
 8018f56:	69fb      	ldr	r3, [r7, #28]
 8018f58:	681b      	ldr	r3, [r3, #0]
 8018f5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018f5c:	430a      	orrs	r2, r1
 8018f5e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018f60:	69fb      	ldr	r3, [r7, #28]
 8018f62:	681b      	ldr	r3, [r3, #0]
 8018f64:	4aaf      	ldr	r2, [pc, #700]	@ (8019224 <UART_SetConfig+0x360>)
 8018f66:	4293      	cmp	r3, r2
 8018f68:	d131      	bne.n	8018fce <UART_SetConfig+0x10a>
 8018f6a:	4baf      	ldr	r3, [pc, #700]	@ (8019228 <UART_SetConfig+0x364>)
 8018f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018f6e:	2203      	movs	r2, #3
 8018f70:	4013      	ands	r3, r2
 8018f72:	2b03      	cmp	r3, #3
 8018f74:	d01d      	beq.n	8018fb2 <UART_SetConfig+0xee>
 8018f76:	d823      	bhi.n	8018fc0 <UART_SetConfig+0xfc>
 8018f78:	2b02      	cmp	r3, #2
 8018f7a:	d00c      	beq.n	8018f96 <UART_SetConfig+0xd2>
 8018f7c:	d820      	bhi.n	8018fc0 <UART_SetConfig+0xfc>
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d002      	beq.n	8018f88 <UART_SetConfig+0xc4>
 8018f82:	2b01      	cmp	r3, #1
 8018f84:	d00e      	beq.n	8018fa4 <UART_SetConfig+0xe0>
 8018f86:	e01b      	b.n	8018fc0 <UART_SetConfig+0xfc>
 8018f88:	231b      	movs	r3, #27
 8018f8a:	2218      	movs	r2, #24
 8018f8c:	189b      	adds	r3, r3, r2
 8018f8e:	19db      	adds	r3, r3, r7
 8018f90:	2201      	movs	r2, #1
 8018f92:	701a      	strb	r2, [r3, #0]
 8018f94:	e0b4      	b.n	8019100 <UART_SetConfig+0x23c>
 8018f96:	231b      	movs	r3, #27
 8018f98:	2218      	movs	r2, #24
 8018f9a:	189b      	adds	r3, r3, r2
 8018f9c:	19db      	adds	r3, r3, r7
 8018f9e:	2202      	movs	r2, #2
 8018fa0:	701a      	strb	r2, [r3, #0]
 8018fa2:	e0ad      	b.n	8019100 <UART_SetConfig+0x23c>
 8018fa4:	231b      	movs	r3, #27
 8018fa6:	2218      	movs	r2, #24
 8018fa8:	189b      	adds	r3, r3, r2
 8018faa:	19db      	adds	r3, r3, r7
 8018fac:	2204      	movs	r2, #4
 8018fae:	701a      	strb	r2, [r3, #0]
 8018fb0:	e0a6      	b.n	8019100 <UART_SetConfig+0x23c>
 8018fb2:	231b      	movs	r3, #27
 8018fb4:	2218      	movs	r2, #24
 8018fb6:	189b      	adds	r3, r3, r2
 8018fb8:	19db      	adds	r3, r3, r7
 8018fba:	2208      	movs	r2, #8
 8018fbc:	701a      	strb	r2, [r3, #0]
 8018fbe:	e09f      	b.n	8019100 <UART_SetConfig+0x23c>
 8018fc0:	231b      	movs	r3, #27
 8018fc2:	2218      	movs	r2, #24
 8018fc4:	189b      	adds	r3, r3, r2
 8018fc6:	19db      	adds	r3, r3, r7
 8018fc8:	2210      	movs	r2, #16
 8018fca:	701a      	strb	r2, [r3, #0]
 8018fcc:	e098      	b.n	8019100 <UART_SetConfig+0x23c>
 8018fce:	69fb      	ldr	r3, [r7, #28]
 8018fd0:	681b      	ldr	r3, [r3, #0]
 8018fd2:	4a96      	ldr	r2, [pc, #600]	@ (801922c <UART_SetConfig+0x368>)
 8018fd4:	4293      	cmp	r3, r2
 8018fd6:	d131      	bne.n	801903c <UART_SetConfig+0x178>
 8018fd8:	4b93      	ldr	r3, [pc, #588]	@ (8019228 <UART_SetConfig+0x364>)
 8018fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018fdc:	220c      	movs	r2, #12
 8018fde:	4013      	ands	r3, r2
 8018fe0:	2b0c      	cmp	r3, #12
 8018fe2:	d01d      	beq.n	8019020 <UART_SetConfig+0x15c>
 8018fe4:	d823      	bhi.n	801902e <UART_SetConfig+0x16a>
 8018fe6:	2b08      	cmp	r3, #8
 8018fe8:	d00c      	beq.n	8019004 <UART_SetConfig+0x140>
 8018fea:	d820      	bhi.n	801902e <UART_SetConfig+0x16a>
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d002      	beq.n	8018ff6 <UART_SetConfig+0x132>
 8018ff0:	2b04      	cmp	r3, #4
 8018ff2:	d00e      	beq.n	8019012 <UART_SetConfig+0x14e>
 8018ff4:	e01b      	b.n	801902e <UART_SetConfig+0x16a>
 8018ff6:	231b      	movs	r3, #27
 8018ff8:	2218      	movs	r2, #24
 8018ffa:	189b      	adds	r3, r3, r2
 8018ffc:	19db      	adds	r3, r3, r7
 8018ffe:	2200      	movs	r2, #0
 8019000:	701a      	strb	r2, [r3, #0]
 8019002:	e07d      	b.n	8019100 <UART_SetConfig+0x23c>
 8019004:	231b      	movs	r3, #27
 8019006:	2218      	movs	r2, #24
 8019008:	189b      	adds	r3, r3, r2
 801900a:	19db      	adds	r3, r3, r7
 801900c:	2202      	movs	r2, #2
 801900e:	701a      	strb	r2, [r3, #0]
 8019010:	e076      	b.n	8019100 <UART_SetConfig+0x23c>
 8019012:	231b      	movs	r3, #27
 8019014:	2218      	movs	r2, #24
 8019016:	189b      	adds	r3, r3, r2
 8019018:	19db      	adds	r3, r3, r7
 801901a:	2204      	movs	r2, #4
 801901c:	701a      	strb	r2, [r3, #0]
 801901e:	e06f      	b.n	8019100 <UART_SetConfig+0x23c>
 8019020:	231b      	movs	r3, #27
 8019022:	2218      	movs	r2, #24
 8019024:	189b      	adds	r3, r3, r2
 8019026:	19db      	adds	r3, r3, r7
 8019028:	2208      	movs	r2, #8
 801902a:	701a      	strb	r2, [r3, #0]
 801902c:	e068      	b.n	8019100 <UART_SetConfig+0x23c>
 801902e:	231b      	movs	r3, #27
 8019030:	2218      	movs	r2, #24
 8019032:	189b      	adds	r3, r3, r2
 8019034:	19db      	adds	r3, r3, r7
 8019036:	2210      	movs	r2, #16
 8019038:	701a      	strb	r2, [r3, #0]
 801903a:	e061      	b.n	8019100 <UART_SetConfig+0x23c>
 801903c:	69fb      	ldr	r3, [r7, #28]
 801903e:	681b      	ldr	r3, [r3, #0]
 8019040:	4a7b      	ldr	r2, [pc, #492]	@ (8019230 <UART_SetConfig+0x36c>)
 8019042:	4293      	cmp	r3, r2
 8019044:	d106      	bne.n	8019054 <UART_SetConfig+0x190>
 8019046:	231b      	movs	r3, #27
 8019048:	2218      	movs	r2, #24
 801904a:	189b      	adds	r3, r3, r2
 801904c:	19db      	adds	r3, r3, r7
 801904e:	2200      	movs	r2, #0
 8019050:	701a      	strb	r2, [r3, #0]
 8019052:	e055      	b.n	8019100 <UART_SetConfig+0x23c>
 8019054:	69fb      	ldr	r3, [r7, #28]
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	4a76      	ldr	r2, [pc, #472]	@ (8019234 <UART_SetConfig+0x370>)
 801905a:	4293      	cmp	r3, r2
 801905c:	d106      	bne.n	801906c <UART_SetConfig+0x1a8>
 801905e:	231b      	movs	r3, #27
 8019060:	2218      	movs	r2, #24
 8019062:	189b      	adds	r3, r3, r2
 8019064:	19db      	adds	r3, r3, r7
 8019066:	2200      	movs	r2, #0
 8019068:	701a      	strb	r2, [r3, #0]
 801906a:	e049      	b.n	8019100 <UART_SetConfig+0x23c>
 801906c:	69fb      	ldr	r3, [r7, #28]
 801906e:	681b      	ldr	r3, [r3, #0]
 8019070:	4a6a      	ldr	r2, [pc, #424]	@ (801921c <UART_SetConfig+0x358>)
 8019072:	4293      	cmp	r3, r2
 8019074:	d13e      	bne.n	80190f4 <UART_SetConfig+0x230>
 8019076:	4b6c      	ldr	r3, [pc, #432]	@ (8019228 <UART_SetConfig+0x364>)
 8019078:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801907a:	23c0      	movs	r3, #192	@ 0xc0
 801907c:	011b      	lsls	r3, r3, #4
 801907e:	4013      	ands	r3, r2
 8019080:	22c0      	movs	r2, #192	@ 0xc0
 8019082:	0112      	lsls	r2, r2, #4
 8019084:	4293      	cmp	r3, r2
 8019086:	d027      	beq.n	80190d8 <UART_SetConfig+0x214>
 8019088:	22c0      	movs	r2, #192	@ 0xc0
 801908a:	0112      	lsls	r2, r2, #4
 801908c:	4293      	cmp	r3, r2
 801908e:	d82a      	bhi.n	80190e6 <UART_SetConfig+0x222>
 8019090:	2280      	movs	r2, #128	@ 0x80
 8019092:	0112      	lsls	r2, r2, #4
 8019094:	4293      	cmp	r3, r2
 8019096:	d011      	beq.n	80190bc <UART_SetConfig+0x1f8>
 8019098:	2280      	movs	r2, #128	@ 0x80
 801909a:	0112      	lsls	r2, r2, #4
 801909c:	4293      	cmp	r3, r2
 801909e:	d822      	bhi.n	80190e6 <UART_SetConfig+0x222>
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d004      	beq.n	80190ae <UART_SetConfig+0x1ea>
 80190a4:	2280      	movs	r2, #128	@ 0x80
 80190a6:	00d2      	lsls	r2, r2, #3
 80190a8:	4293      	cmp	r3, r2
 80190aa:	d00e      	beq.n	80190ca <UART_SetConfig+0x206>
 80190ac:	e01b      	b.n	80190e6 <UART_SetConfig+0x222>
 80190ae:	231b      	movs	r3, #27
 80190b0:	2218      	movs	r2, #24
 80190b2:	189b      	adds	r3, r3, r2
 80190b4:	19db      	adds	r3, r3, r7
 80190b6:	2200      	movs	r2, #0
 80190b8:	701a      	strb	r2, [r3, #0]
 80190ba:	e021      	b.n	8019100 <UART_SetConfig+0x23c>
 80190bc:	231b      	movs	r3, #27
 80190be:	2218      	movs	r2, #24
 80190c0:	189b      	adds	r3, r3, r2
 80190c2:	19db      	adds	r3, r3, r7
 80190c4:	2202      	movs	r2, #2
 80190c6:	701a      	strb	r2, [r3, #0]
 80190c8:	e01a      	b.n	8019100 <UART_SetConfig+0x23c>
 80190ca:	231b      	movs	r3, #27
 80190cc:	2218      	movs	r2, #24
 80190ce:	189b      	adds	r3, r3, r2
 80190d0:	19db      	adds	r3, r3, r7
 80190d2:	2204      	movs	r2, #4
 80190d4:	701a      	strb	r2, [r3, #0]
 80190d6:	e013      	b.n	8019100 <UART_SetConfig+0x23c>
 80190d8:	231b      	movs	r3, #27
 80190da:	2218      	movs	r2, #24
 80190dc:	189b      	adds	r3, r3, r2
 80190de:	19db      	adds	r3, r3, r7
 80190e0:	2208      	movs	r2, #8
 80190e2:	701a      	strb	r2, [r3, #0]
 80190e4:	e00c      	b.n	8019100 <UART_SetConfig+0x23c>
 80190e6:	231b      	movs	r3, #27
 80190e8:	2218      	movs	r2, #24
 80190ea:	189b      	adds	r3, r3, r2
 80190ec:	19db      	adds	r3, r3, r7
 80190ee:	2210      	movs	r2, #16
 80190f0:	701a      	strb	r2, [r3, #0]
 80190f2:	e005      	b.n	8019100 <UART_SetConfig+0x23c>
 80190f4:	231b      	movs	r3, #27
 80190f6:	2218      	movs	r2, #24
 80190f8:	189b      	adds	r3, r3, r2
 80190fa:	19db      	adds	r3, r3, r7
 80190fc:	2210      	movs	r2, #16
 80190fe:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8019100:	69fb      	ldr	r3, [r7, #28]
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	4a45      	ldr	r2, [pc, #276]	@ (801921c <UART_SetConfig+0x358>)
 8019106:	4293      	cmp	r3, r2
 8019108:	d000      	beq.n	801910c <UART_SetConfig+0x248>
 801910a:	e099      	b.n	8019240 <UART_SetConfig+0x37c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801910c:	231b      	movs	r3, #27
 801910e:	2218      	movs	r2, #24
 8019110:	189b      	adds	r3, r3, r2
 8019112:	19db      	adds	r3, r3, r7
 8019114:	781b      	ldrb	r3, [r3, #0]
 8019116:	2b08      	cmp	r3, #8
 8019118:	d01d      	beq.n	8019156 <UART_SetConfig+0x292>
 801911a:	dc20      	bgt.n	801915e <UART_SetConfig+0x29a>
 801911c:	2b04      	cmp	r3, #4
 801911e:	d015      	beq.n	801914c <UART_SetConfig+0x288>
 8019120:	dc1d      	bgt.n	801915e <UART_SetConfig+0x29a>
 8019122:	2b00      	cmp	r3, #0
 8019124:	d002      	beq.n	801912c <UART_SetConfig+0x268>
 8019126:	2b02      	cmp	r3, #2
 8019128:	d005      	beq.n	8019136 <UART_SetConfig+0x272>
 801912a:	e018      	b.n	801915e <UART_SetConfig+0x29a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 801912c:	f7fe faba 	bl	80176a4 <HAL_RCC_GetPCLK1Freq>
 8019130:	0003      	movs	r3, r0
 8019132:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8019134:	e01a      	b.n	801916c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8019136:	4b3c      	ldr	r3, [pc, #240]	@ (8019228 <UART_SetConfig+0x364>)
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	2210      	movs	r2, #16
 801913c:	4013      	ands	r3, r2
 801913e:	d002      	beq.n	8019146 <UART_SetConfig+0x282>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8019140:	4b3d      	ldr	r3, [pc, #244]	@ (8019238 <UART_SetConfig+0x374>)
 8019142:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8019144:	e012      	b.n	801916c <UART_SetConfig+0x2a8>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8019146:	4b3d      	ldr	r3, [pc, #244]	@ (801923c <UART_SetConfig+0x378>)
 8019148:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801914a:	e00f      	b.n	801916c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 801914c:	f7fe fa1a 	bl	8017584 <HAL_RCC_GetSysClockFreq>
 8019150:	0003      	movs	r3, r0
 8019152:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8019154:	e00a      	b.n	801916c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8019156:	2380      	movs	r3, #128	@ 0x80
 8019158:	021b      	lsls	r3, r3, #8
 801915a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801915c:	e006      	b.n	801916c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 801915e:	2313      	movs	r3, #19
 8019160:	2218      	movs	r2, #24
 8019162:	189b      	adds	r3, r3, r2
 8019164:	19db      	adds	r3, r3, r7
 8019166:	2201      	movs	r2, #1
 8019168:	701a      	strb	r2, [r3, #0]
        break;
 801916a:	46c0      	nop			@ (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 801916c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801916e:	2b00      	cmp	r3, #0
 8019170:	d100      	bne.n	8019174 <UART_SetConfig+0x2b0>
 8019172:	e1a0      	b.n	80194b6 <UART_SetConfig+0x5f2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8019174:	69fb      	ldr	r3, [r7, #28]
 8019176:	685a      	ldr	r2, [r3, #4]
 8019178:	0013      	movs	r3, r2
 801917a:	005b      	lsls	r3, r3, #1
 801917c:	189b      	adds	r3, r3, r2
 801917e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019180:	429a      	cmp	r2, r3
 8019182:	d305      	bcc.n	8019190 <UART_SetConfig+0x2cc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8019184:	69fb      	ldr	r3, [r7, #28]
 8019186:	685b      	ldr	r3, [r3, #4]
 8019188:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801918a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801918c:	429a      	cmp	r2, r3
 801918e:	d906      	bls.n	801919e <UART_SetConfig+0x2da>
      {
        ret = HAL_ERROR;
 8019190:	2313      	movs	r3, #19
 8019192:	2218      	movs	r2, #24
 8019194:	189b      	adds	r3, r3, r2
 8019196:	19db      	adds	r3, r3, r7
 8019198:	2201      	movs	r2, #1
 801919a:	701a      	strb	r2, [r3, #0]
 801919c:	e18b      	b.n	80194b6 <UART_SetConfig+0x5f2>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 801919e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191a0:	613b      	str	r3, [r7, #16]
 80191a2:	2300      	movs	r3, #0
 80191a4:	617b      	str	r3, [r7, #20]
 80191a6:	6939      	ldr	r1, [r7, #16]
 80191a8:	697a      	ldr	r2, [r7, #20]
 80191aa:	000b      	movs	r3, r1
 80191ac:	0e1b      	lsrs	r3, r3, #24
 80191ae:	0010      	movs	r0, r2
 80191b0:	0205      	lsls	r5, r0, #8
 80191b2:	431d      	orrs	r5, r3
 80191b4:	000b      	movs	r3, r1
 80191b6:	021c      	lsls	r4, r3, #8
 80191b8:	69fb      	ldr	r3, [r7, #28]
 80191ba:	685b      	ldr	r3, [r3, #4]
 80191bc:	085b      	lsrs	r3, r3, #1
 80191be:	60bb      	str	r3, [r7, #8]
 80191c0:	2300      	movs	r3, #0
 80191c2:	60fb      	str	r3, [r7, #12]
 80191c4:	68b8      	ldr	r0, [r7, #8]
 80191c6:	68f9      	ldr	r1, [r7, #12]
 80191c8:	1900      	adds	r0, r0, r4
 80191ca:	4169      	adcs	r1, r5
 80191cc:	69fb      	ldr	r3, [r7, #28]
 80191ce:	685b      	ldr	r3, [r3, #4]
 80191d0:	603b      	str	r3, [r7, #0]
 80191d2:	2300      	movs	r3, #0
 80191d4:	607b      	str	r3, [r7, #4]
 80191d6:	683a      	ldr	r2, [r7, #0]
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	f7e7 f98d 	bl	80004f8 <__aeabi_uldivmod>
 80191de:	0002      	movs	r2, r0
 80191e0:	000b      	movs	r3, r1
 80191e2:	0013      	movs	r3, r2
 80191e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80191e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80191e8:	23c0      	movs	r3, #192	@ 0xc0
 80191ea:	009b      	lsls	r3, r3, #2
 80191ec:	429a      	cmp	r2, r3
 80191ee:	d309      	bcc.n	8019204 <UART_SetConfig+0x340>
 80191f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80191f2:	2380      	movs	r3, #128	@ 0x80
 80191f4:	035b      	lsls	r3, r3, #13
 80191f6:	429a      	cmp	r2, r3
 80191f8:	d204      	bcs.n	8019204 <UART_SetConfig+0x340>
        {
          huart->Instance->BRR = usartdiv;
 80191fa:	69fb      	ldr	r3, [r7, #28]
 80191fc:	681b      	ldr	r3, [r3, #0]
 80191fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019200:	60da      	str	r2, [r3, #12]
 8019202:	e158      	b.n	80194b6 <UART_SetConfig+0x5f2>
        }
        else
        {
          ret = HAL_ERROR;
 8019204:	2313      	movs	r3, #19
 8019206:	2218      	movs	r2, #24
 8019208:	189b      	adds	r3, r3, r2
 801920a:	19db      	adds	r3, r3, r7
 801920c:	2201      	movs	r2, #1
 801920e:	701a      	strb	r2, [r3, #0]
 8019210:	e151      	b.n	80194b6 <UART_SetConfig+0x5f2>
 8019212:	46c0      	nop			@ (mov r8, r8)
 8019214:	efff69f3 	.word	0xefff69f3
 8019218:	ffffcfff 	.word	0xffffcfff
 801921c:	40004800 	.word	0x40004800
 8019220:	fffff4ff 	.word	0xfffff4ff
 8019224:	40013800 	.word	0x40013800
 8019228:	40021000 	.word	0x40021000
 801922c:	40004400 	.word	0x40004400
 8019230:	40004c00 	.word	0x40004c00
 8019234:	40005000 	.word	0x40005000
 8019238:	003d0900 	.word	0x003d0900
 801923c:	00f42400 	.word	0x00f42400
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8019240:	69fb      	ldr	r3, [r7, #28]
 8019242:	69da      	ldr	r2, [r3, #28]
 8019244:	2380      	movs	r3, #128	@ 0x80
 8019246:	021b      	lsls	r3, r3, #8
 8019248:	429a      	cmp	r2, r3
 801924a:	d000      	beq.n	801924e <UART_SetConfig+0x38a>
 801924c:	e0a7      	b.n	801939e <UART_SetConfig+0x4da>
  {
    switch (clocksource)
 801924e:	231b      	movs	r3, #27
 8019250:	2218      	movs	r2, #24
 8019252:	189b      	adds	r3, r3, r2
 8019254:	19db      	adds	r3, r3, r7
 8019256:	781b      	ldrb	r3, [r3, #0]
 8019258:	2b08      	cmp	r3, #8
 801925a:	d86d      	bhi.n	8019338 <UART_SetConfig+0x474>
 801925c:	009a      	lsls	r2, r3, #2
 801925e:	4b9d      	ldr	r3, [pc, #628]	@ (80194d4 <UART_SetConfig+0x610>)
 8019260:	18d3      	adds	r3, r2, r3
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8019266:	f7fe fa1d 	bl	80176a4 <HAL_RCC_GetPCLK1Freq>
 801926a:	0003      	movs	r3, r0
 801926c:	005a      	lsls	r2, r3, #1
 801926e:	69fb      	ldr	r3, [r7, #28]
 8019270:	685b      	ldr	r3, [r3, #4]
 8019272:	085b      	lsrs	r3, r3, #1
 8019274:	18d2      	adds	r2, r2, r3
 8019276:	69fb      	ldr	r3, [r7, #28]
 8019278:	685b      	ldr	r3, [r3, #4]
 801927a:	0019      	movs	r1, r3
 801927c:	0010      	movs	r0, r2
 801927e:	f7e6 ff4d 	bl	800011c <__udivsi3>
 8019282:	0003      	movs	r3, r0
 8019284:	b29b      	uxth	r3, r3
 8019286:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8019288:	e05d      	b.n	8019346 <UART_SetConfig+0x482>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 801928a:	f7fe fa21 	bl	80176d0 <HAL_RCC_GetPCLK2Freq>
 801928e:	0003      	movs	r3, r0
 8019290:	005a      	lsls	r2, r3, #1
 8019292:	69fb      	ldr	r3, [r7, #28]
 8019294:	685b      	ldr	r3, [r3, #4]
 8019296:	085b      	lsrs	r3, r3, #1
 8019298:	18d2      	adds	r2, r2, r3
 801929a:	69fb      	ldr	r3, [r7, #28]
 801929c:	685b      	ldr	r3, [r3, #4]
 801929e:	0019      	movs	r1, r3
 80192a0:	0010      	movs	r0, r2
 80192a2:	f7e6 ff3b 	bl	800011c <__udivsi3>
 80192a6:	0003      	movs	r3, r0
 80192a8:	b29b      	uxth	r3, r3
 80192aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80192ac:	e04b      	b.n	8019346 <UART_SetConfig+0x482>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80192ae:	4b8a      	ldr	r3, [pc, #552]	@ (80194d8 <UART_SetConfig+0x614>)
 80192b0:	681b      	ldr	r3, [r3, #0]
 80192b2:	2210      	movs	r2, #16
 80192b4:	4013      	ands	r3, r2
 80192b6:	d00e      	beq.n	80192d6 <UART_SetConfig+0x412>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80192b8:	69fb      	ldr	r3, [r7, #28]
 80192ba:	685b      	ldr	r3, [r3, #4]
 80192bc:	085b      	lsrs	r3, r3, #1
 80192be:	4a87      	ldr	r2, [pc, #540]	@ (80194dc <UART_SetConfig+0x618>)
 80192c0:	189a      	adds	r2, r3, r2
 80192c2:	69fb      	ldr	r3, [r7, #28]
 80192c4:	685b      	ldr	r3, [r3, #4]
 80192c6:	0019      	movs	r1, r3
 80192c8:	0010      	movs	r0, r2
 80192ca:	f7e6 ff27 	bl	800011c <__udivsi3>
 80192ce:	0003      	movs	r3, r0
 80192d0:	b29b      	uxth	r3, r3
 80192d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80192d4:	e037      	b.n	8019346 <UART_SetConfig+0x482>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80192d6:	69fb      	ldr	r3, [r7, #28]
 80192d8:	685b      	ldr	r3, [r3, #4]
 80192da:	085b      	lsrs	r3, r3, #1
 80192dc:	4a80      	ldr	r2, [pc, #512]	@ (80194e0 <UART_SetConfig+0x61c>)
 80192de:	189a      	adds	r2, r3, r2
 80192e0:	69fb      	ldr	r3, [r7, #28]
 80192e2:	685b      	ldr	r3, [r3, #4]
 80192e4:	0019      	movs	r1, r3
 80192e6:	0010      	movs	r0, r2
 80192e8:	f7e6 ff18 	bl	800011c <__udivsi3>
 80192ec:	0003      	movs	r3, r0
 80192ee:	b29b      	uxth	r3, r3
 80192f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80192f2:	e028      	b.n	8019346 <UART_SetConfig+0x482>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80192f4:	f7fe f946 	bl	8017584 <HAL_RCC_GetSysClockFreq>
 80192f8:	0003      	movs	r3, r0
 80192fa:	005a      	lsls	r2, r3, #1
 80192fc:	69fb      	ldr	r3, [r7, #28]
 80192fe:	685b      	ldr	r3, [r3, #4]
 8019300:	085b      	lsrs	r3, r3, #1
 8019302:	18d2      	adds	r2, r2, r3
 8019304:	69fb      	ldr	r3, [r7, #28]
 8019306:	685b      	ldr	r3, [r3, #4]
 8019308:	0019      	movs	r1, r3
 801930a:	0010      	movs	r0, r2
 801930c:	f7e6 ff06 	bl	800011c <__udivsi3>
 8019310:	0003      	movs	r3, r0
 8019312:	b29b      	uxth	r3, r3
 8019314:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8019316:	e016      	b.n	8019346 <UART_SetConfig+0x482>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8019318:	69fb      	ldr	r3, [r7, #28]
 801931a:	685b      	ldr	r3, [r3, #4]
 801931c:	085b      	lsrs	r3, r3, #1
 801931e:	2280      	movs	r2, #128	@ 0x80
 8019320:	0252      	lsls	r2, r2, #9
 8019322:	189a      	adds	r2, r3, r2
 8019324:	69fb      	ldr	r3, [r7, #28]
 8019326:	685b      	ldr	r3, [r3, #4]
 8019328:	0019      	movs	r1, r3
 801932a:	0010      	movs	r0, r2
 801932c:	f7e6 fef6 	bl	800011c <__udivsi3>
 8019330:	0003      	movs	r3, r0
 8019332:	b29b      	uxth	r3, r3
 8019334:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8019336:	e006      	b.n	8019346 <UART_SetConfig+0x482>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8019338:	2313      	movs	r3, #19
 801933a:	2218      	movs	r2, #24
 801933c:	189b      	adds	r3, r3, r2
 801933e:	19db      	adds	r3, r3, r7
 8019340:	2201      	movs	r2, #1
 8019342:	701a      	strb	r2, [r3, #0]
        break;
 8019344:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019348:	2b0f      	cmp	r3, #15
 801934a:	d921      	bls.n	8019390 <UART_SetConfig+0x4cc>
 801934c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801934e:	2380      	movs	r3, #128	@ 0x80
 8019350:	025b      	lsls	r3, r3, #9
 8019352:	429a      	cmp	r2, r3
 8019354:	d21c      	bcs.n	8019390 <UART_SetConfig+0x4cc>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8019356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019358:	b29a      	uxth	r2, r3
 801935a:	200a      	movs	r0, #10
 801935c:	2418      	movs	r4, #24
 801935e:	1903      	adds	r3, r0, r4
 8019360:	19db      	adds	r3, r3, r7
 8019362:	210f      	movs	r1, #15
 8019364:	438a      	bics	r2, r1
 8019366:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8019368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801936a:	085b      	lsrs	r3, r3, #1
 801936c:	b29b      	uxth	r3, r3
 801936e:	2207      	movs	r2, #7
 8019370:	4013      	ands	r3, r2
 8019372:	b299      	uxth	r1, r3
 8019374:	1903      	adds	r3, r0, r4
 8019376:	19db      	adds	r3, r3, r7
 8019378:	1902      	adds	r2, r0, r4
 801937a:	19d2      	adds	r2, r2, r7
 801937c:	8812      	ldrh	r2, [r2, #0]
 801937e:	430a      	orrs	r2, r1
 8019380:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8019382:	69fb      	ldr	r3, [r7, #28]
 8019384:	681b      	ldr	r3, [r3, #0]
 8019386:	1902      	adds	r2, r0, r4
 8019388:	19d2      	adds	r2, r2, r7
 801938a:	8812      	ldrh	r2, [r2, #0]
 801938c:	60da      	str	r2, [r3, #12]
 801938e:	e092      	b.n	80194b6 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 8019390:	2313      	movs	r3, #19
 8019392:	2218      	movs	r2, #24
 8019394:	189b      	adds	r3, r3, r2
 8019396:	19db      	adds	r3, r3, r7
 8019398:	2201      	movs	r2, #1
 801939a:	701a      	strb	r2, [r3, #0]
 801939c:	e08b      	b.n	80194b6 <UART_SetConfig+0x5f2>
    }
  }
  else
  {
    switch (clocksource)
 801939e:	231b      	movs	r3, #27
 80193a0:	2218      	movs	r2, #24
 80193a2:	189b      	adds	r3, r3, r2
 80193a4:	19db      	adds	r3, r3, r7
 80193a6:	781b      	ldrb	r3, [r3, #0]
 80193a8:	2b08      	cmp	r3, #8
 80193aa:	d86a      	bhi.n	8019482 <UART_SetConfig+0x5be>
 80193ac:	009a      	lsls	r2, r3, #2
 80193ae:	4b4d      	ldr	r3, [pc, #308]	@ (80194e4 <UART_SetConfig+0x620>)
 80193b0:	18d3      	adds	r3, r2, r3
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80193b6:	f7fe f975 	bl	80176a4 <HAL_RCC_GetPCLK1Freq>
 80193ba:	0002      	movs	r2, r0
 80193bc:	69fb      	ldr	r3, [r7, #28]
 80193be:	685b      	ldr	r3, [r3, #4]
 80193c0:	085b      	lsrs	r3, r3, #1
 80193c2:	18d2      	adds	r2, r2, r3
 80193c4:	69fb      	ldr	r3, [r7, #28]
 80193c6:	685b      	ldr	r3, [r3, #4]
 80193c8:	0019      	movs	r1, r3
 80193ca:	0010      	movs	r0, r2
 80193cc:	f7e6 fea6 	bl	800011c <__udivsi3>
 80193d0:	0003      	movs	r3, r0
 80193d2:	b29b      	uxth	r3, r3
 80193d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80193d6:	e05b      	b.n	8019490 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80193d8:	f7fe f97a 	bl	80176d0 <HAL_RCC_GetPCLK2Freq>
 80193dc:	0002      	movs	r2, r0
 80193de:	69fb      	ldr	r3, [r7, #28]
 80193e0:	685b      	ldr	r3, [r3, #4]
 80193e2:	085b      	lsrs	r3, r3, #1
 80193e4:	18d2      	adds	r2, r2, r3
 80193e6:	69fb      	ldr	r3, [r7, #28]
 80193e8:	685b      	ldr	r3, [r3, #4]
 80193ea:	0019      	movs	r1, r3
 80193ec:	0010      	movs	r0, r2
 80193ee:	f7e6 fe95 	bl	800011c <__udivsi3>
 80193f2:	0003      	movs	r3, r0
 80193f4:	b29b      	uxth	r3, r3
 80193f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80193f8:	e04a      	b.n	8019490 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80193fa:	4b37      	ldr	r3, [pc, #220]	@ (80194d8 <UART_SetConfig+0x614>)
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	2210      	movs	r2, #16
 8019400:	4013      	ands	r3, r2
 8019402:	d00e      	beq.n	8019422 <UART_SetConfig+0x55e>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8019404:	69fb      	ldr	r3, [r7, #28]
 8019406:	685b      	ldr	r3, [r3, #4]
 8019408:	085b      	lsrs	r3, r3, #1
 801940a:	4a37      	ldr	r2, [pc, #220]	@ (80194e8 <UART_SetConfig+0x624>)
 801940c:	189a      	adds	r2, r3, r2
 801940e:	69fb      	ldr	r3, [r7, #28]
 8019410:	685b      	ldr	r3, [r3, #4]
 8019412:	0019      	movs	r1, r3
 8019414:	0010      	movs	r0, r2
 8019416:	f7e6 fe81 	bl	800011c <__udivsi3>
 801941a:	0003      	movs	r3, r0
 801941c:	b29b      	uxth	r3, r3
 801941e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8019420:	e036      	b.n	8019490 <UART_SetConfig+0x5cc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8019422:	69fb      	ldr	r3, [r7, #28]
 8019424:	685b      	ldr	r3, [r3, #4]
 8019426:	085b      	lsrs	r3, r3, #1
 8019428:	4a30      	ldr	r2, [pc, #192]	@ (80194ec <UART_SetConfig+0x628>)
 801942a:	189a      	adds	r2, r3, r2
 801942c:	69fb      	ldr	r3, [r7, #28]
 801942e:	685b      	ldr	r3, [r3, #4]
 8019430:	0019      	movs	r1, r3
 8019432:	0010      	movs	r0, r2
 8019434:	f7e6 fe72 	bl	800011c <__udivsi3>
 8019438:	0003      	movs	r3, r0
 801943a:	b29b      	uxth	r3, r3
 801943c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801943e:	e027      	b.n	8019490 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8019440:	f7fe f8a0 	bl	8017584 <HAL_RCC_GetSysClockFreq>
 8019444:	0002      	movs	r2, r0
 8019446:	69fb      	ldr	r3, [r7, #28]
 8019448:	685b      	ldr	r3, [r3, #4]
 801944a:	085b      	lsrs	r3, r3, #1
 801944c:	18d2      	adds	r2, r2, r3
 801944e:	69fb      	ldr	r3, [r7, #28]
 8019450:	685b      	ldr	r3, [r3, #4]
 8019452:	0019      	movs	r1, r3
 8019454:	0010      	movs	r0, r2
 8019456:	f7e6 fe61 	bl	800011c <__udivsi3>
 801945a:	0003      	movs	r3, r0
 801945c:	b29b      	uxth	r3, r3
 801945e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8019460:	e016      	b.n	8019490 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8019462:	69fb      	ldr	r3, [r7, #28]
 8019464:	685b      	ldr	r3, [r3, #4]
 8019466:	085b      	lsrs	r3, r3, #1
 8019468:	2280      	movs	r2, #128	@ 0x80
 801946a:	0212      	lsls	r2, r2, #8
 801946c:	189a      	adds	r2, r3, r2
 801946e:	69fb      	ldr	r3, [r7, #28]
 8019470:	685b      	ldr	r3, [r3, #4]
 8019472:	0019      	movs	r1, r3
 8019474:	0010      	movs	r0, r2
 8019476:	f7e6 fe51 	bl	800011c <__udivsi3>
 801947a:	0003      	movs	r3, r0
 801947c:	b29b      	uxth	r3, r3
 801947e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8019480:	e006      	b.n	8019490 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8019482:	2313      	movs	r3, #19
 8019484:	2218      	movs	r2, #24
 8019486:	189b      	adds	r3, r3, r2
 8019488:	19db      	adds	r3, r3, r7
 801948a:	2201      	movs	r2, #1
 801948c:	701a      	strb	r2, [r3, #0]
        break;
 801948e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019492:	2b0f      	cmp	r3, #15
 8019494:	d909      	bls.n	80194aa <UART_SetConfig+0x5e6>
 8019496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019498:	2380      	movs	r3, #128	@ 0x80
 801949a:	025b      	lsls	r3, r3, #9
 801949c:	429a      	cmp	r2, r3
 801949e:	d204      	bcs.n	80194aa <UART_SetConfig+0x5e6>
    {
      huart->Instance->BRR = usartdiv;
 80194a0:	69fb      	ldr	r3, [r7, #28]
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80194a6:	60da      	str	r2, [r3, #12]
 80194a8:	e005      	b.n	80194b6 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 80194aa:	2313      	movs	r3, #19
 80194ac:	2218      	movs	r2, #24
 80194ae:	189b      	adds	r3, r3, r2
 80194b0:	19db      	adds	r3, r3, r7
 80194b2:	2201      	movs	r2, #1
 80194b4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80194b6:	69fb      	ldr	r3, [r7, #28]
 80194b8:	2200      	movs	r2, #0
 80194ba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->TxISR = NULL;
 80194bc:	69fb      	ldr	r3, [r7, #28]
 80194be:	2200      	movs	r2, #0
 80194c0:	665a      	str	r2, [r3, #100]	@ 0x64

  return ret;
 80194c2:	2313      	movs	r3, #19
 80194c4:	2218      	movs	r2, #24
 80194c6:	189b      	adds	r3, r3, r2
 80194c8:	19db      	adds	r3, r3, r7
 80194ca:	781b      	ldrb	r3, [r3, #0]
}
 80194cc:	0018      	movs	r0, r3
 80194ce:	46bd      	mov	sp, r7
 80194d0:	b00e      	add	sp, #56	@ 0x38
 80194d2:	bdb0      	pop	{r4, r5, r7, pc}
 80194d4:	0801b538 	.word	0x0801b538
 80194d8:	40021000 	.word	0x40021000
 80194dc:	007a1200 	.word	0x007a1200
 80194e0:	01e84800 	.word	0x01e84800
 80194e4:	0801b55c 	.word	0x0801b55c
 80194e8:	003d0900 	.word	0x003d0900
 80194ec:	00f42400 	.word	0x00f42400

080194f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80194f0:	b580      	push	{r7, lr}
 80194f2:	b082      	sub	sp, #8
 80194f4:	af00      	add	r7, sp, #0
 80194f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80194fc:	2201      	movs	r2, #1
 80194fe:	4013      	ands	r3, r2
 8019500:	d00b      	beq.n	801951a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	681b      	ldr	r3, [r3, #0]
 8019506:	685b      	ldr	r3, [r3, #4]
 8019508:	4a4a      	ldr	r2, [pc, #296]	@ (8019634 <UART_AdvFeatureConfig+0x144>)
 801950a:	4013      	ands	r3, r2
 801950c:	0019      	movs	r1, r3
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	681b      	ldr	r3, [r3, #0]
 8019516:	430a      	orrs	r2, r1
 8019518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801951e:	2202      	movs	r2, #2
 8019520:	4013      	ands	r3, r2
 8019522:	d00b      	beq.n	801953c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	685b      	ldr	r3, [r3, #4]
 801952a:	4a43      	ldr	r2, [pc, #268]	@ (8019638 <UART_AdvFeatureConfig+0x148>)
 801952c:	4013      	ands	r3, r2
 801952e:	0019      	movs	r1, r3
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	681b      	ldr	r3, [r3, #0]
 8019538:	430a      	orrs	r2, r1
 801953a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019540:	2204      	movs	r2, #4
 8019542:	4013      	ands	r3, r2
 8019544:	d00b      	beq.n	801955e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	681b      	ldr	r3, [r3, #0]
 801954a:	685b      	ldr	r3, [r3, #4]
 801954c:	4a3b      	ldr	r2, [pc, #236]	@ (801963c <UART_AdvFeatureConfig+0x14c>)
 801954e:	4013      	ands	r3, r2
 8019550:	0019      	movs	r1, r3
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	430a      	orrs	r2, r1
 801955c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019562:	2208      	movs	r2, #8
 8019564:	4013      	ands	r3, r2
 8019566:	d00b      	beq.n	8019580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	681b      	ldr	r3, [r3, #0]
 801956c:	685b      	ldr	r3, [r3, #4]
 801956e:	4a34      	ldr	r2, [pc, #208]	@ (8019640 <UART_AdvFeatureConfig+0x150>)
 8019570:	4013      	ands	r3, r2
 8019572:	0019      	movs	r1, r3
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	681b      	ldr	r3, [r3, #0]
 801957c:	430a      	orrs	r2, r1
 801957e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019584:	2210      	movs	r2, #16
 8019586:	4013      	ands	r3, r2
 8019588:	d00b      	beq.n	80195a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	689b      	ldr	r3, [r3, #8]
 8019590:	4a2c      	ldr	r2, [pc, #176]	@ (8019644 <UART_AdvFeatureConfig+0x154>)
 8019592:	4013      	ands	r3, r2
 8019594:	0019      	movs	r1, r3
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	681b      	ldr	r3, [r3, #0]
 801959e:	430a      	orrs	r2, r1
 80195a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80195a6:	2220      	movs	r2, #32
 80195a8:	4013      	ands	r3, r2
 80195aa:	d00b      	beq.n	80195c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	689b      	ldr	r3, [r3, #8]
 80195b2:	4a25      	ldr	r2, [pc, #148]	@ (8019648 <UART_AdvFeatureConfig+0x158>)
 80195b4:	4013      	ands	r3, r2
 80195b6:	0019      	movs	r1, r3
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	681b      	ldr	r3, [r3, #0]
 80195c0:	430a      	orrs	r2, r1
 80195c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80195c8:	2240      	movs	r2, #64	@ 0x40
 80195ca:	4013      	ands	r3, r2
 80195cc:	d01d      	beq.n	801960a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	681b      	ldr	r3, [r3, #0]
 80195d2:	685b      	ldr	r3, [r3, #4]
 80195d4:	4a1d      	ldr	r2, [pc, #116]	@ (801964c <UART_AdvFeatureConfig+0x15c>)
 80195d6:	4013      	ands	r3, r2
 80195d8:	0019      	movs	r1, r3
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	681b      	ldr	r3, [r3, #0]
 80195e2:	430a      	orrs	r2, r1
 80195e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80195ea:	2380      	movs	r3, #128	@ 0x80
 80195ec:	035b      	lsls	r3, r3, #13
 80195ee:	429a      	cmp	r2, r3
 80195f0:	d10b      	bne.n	801960a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	685b      	ldr	r3, [r3, #4]
 80195f8:	4a15      	ldr	r2, [pc, #84]	@ (8019650 <UART_AdvFeatureConfig+0x160>)
 80195fa:	4013      	ands	r3, r2
 80195fc:	0019      	movs	r1, r3
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	681b      	ldr	r3, [r3, #0]
 8019606:	430a      	orrs	r2, r1
 8019608:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801960e:	2280      	movs	r2, #128	@ 0x80
 8019610:	4013      	ands	r3, r2
 8019612:	d00b      	beq.n	801962c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	681b      	ldr	r3, [r3, #0]
 8019618:	685b      	ldr	r3, [r3, #4]
 801961a:	4a0e      	ldr	r2, [pc, #56]	@ (8019654 <UART_AdvFeatureConfig+0x164>)
 801961c:	4013      	ands	r3, r2
 801961e:	0019      	movs	r1, r3
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	430a      	orrs	r2, r1
 801962a:	605a      	str	r2, [r3, #4]
  }
}
 801962c:	46c0      	nop			@ (mov r8, r8)
 801962e:	46bd      	mov	sp, r7
 8019630:	b002      	add	sp, #8
 8019632:	bd80      	pop	{r7, pc}
 8019634:	fffdffff 	.word	0xfffdffff
 8019638:	fffeffff 	.word	0xfffeffff
 801963c:	fffbffff 	.word	0xfffbffff
 8019640:	ffff7fff 	.word	0xffff7fff
 8019644:	ffffefff 	.word	0xffffefff
 8019648:	ffffdfff 	.word	0xffffdfff
 801964c:	ffefffff 	.word	0xffefffff
 8019650:	ff9fffff 	.word	0xff9fffff
 8019654:	fff7ffff 	.word	0xfff7ffff

08019658 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8019658:	b580      	push	{r7, lr}
 801965a:	b086      	sub	sp, #24
 801965c:	af02      	add	r7, sp, #8
 801965e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	2200      	movs	r2, #0
 8019664:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8019666:	f7fc f811 	bl	801568c <HAL_GetTick>
 801966a:	0003      	movs	r3, r0
 801966c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	681b      	ldr	r3, [r3, #0]
 8019674:	2208      	movs	r2, #8
 8019676:	4013      	ands	r3, r2
 8019678:	2b08      	cmp	r3, #8
 801967a:	d10c      	bne.n	8019696 <UART_CheckIdleState+0x3e>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801967c:	68fb      	ldr	r3, [r7, #12]
 801967e:	2280      	movs	r2, #128	@ 0x80
 8019680:	0391      	lsls	r1, r2, #14
 8019682:	6878      	ldr	r0, [r7, #4]
 8019684:	4a15      	ldr	r2, [pc, #84]	@ (80196dc <UART_CheckIdleState+0x84>)
 8019686:	9200      	str	r2, [sp, #0]
 8019688:	2200      	movs	r2, #0
 801968a:	f000 f829 	bl	80196e0 <UART_WaitOnFlagUntilTimeout>
 801968e:	1e03      	subs	r3, r0, #0
 8019690:	d001      	beq.n	8019696 <UART_CheckIdleState+0x3e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019692:	2303      	movs	r3, #3
 8019694:	e01e      	b.n	80196d4 <UART_CheckIdleState+0x7c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	681b      	ldr	r3, [r3, #0]
 801969c:	2204      	movs	r2, #4
 801969e:	4013      	ands	r3, r2
 80196a0:	2b04      	cmp	r3, #4
 80196a2:	d10c      	bne.n	80196be <UART_CheckIdleState+0x66>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80196a4:	68fb      	ldr	r3, [r7, #12]
 80196a6:	2280      	movs	r2, #128	@ 0x80
 80196a8:	03d1      	lsls	r1, r2, #15
 80196aa:	6878      	ldr	r0, [r7, #4]
 80196ac:	4a0b      	ldr	r2, [pc, #44]	@ (80196dc <UART_CheckIdleState+0x84>)
 80196ae:	9200      	str	r2, [sp, #0]
 80196b0:	2200      	movs	r2, #0
 80196b2:	f000 f815 	bl	80196e0 <UART_WaitOnFlagUntilTimeout>
 80196b6:	1e03      	subs	r3, r0, #0
 80196b8:	d001      	beq.n	80196be <UART_CheckIdleState+0x66>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80196ba:	2303      	movs	r3, #3
 80196bc:	e00a      	b.n	80196d4 <UART_CheckIdleState+0x7c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	2220      	movs	r2, #32
 80196c2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	2220      	movs	r2, #32
 80196c8:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	2270      	movs	r2, #112	@ 0x70
 80196ce:	2100      	movs	r1, #0
 80196d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80196d2:	2300      	movs	r3, #0
}
 80196d4:	0018      	movs	r0, r3
 80196d6:	46bd      	mov	sp, r7
 80196d8:	b004      	add	sp, #16
 80196da:	bd80      	pop	{r7, pc}
 80196dc:	01ffffff 	.word	0x01ffffff

080196e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80196e0:	b580      	push	{r7, lr}
 80196e2:	b084      	sub	sp, #16
 80196e4:	af00      	add	r7, sp, #0
 80196e6:	60f8      	str	r0, [r7, #12]
 80196e8:	60b9      	str	r1, [r7, #8]
 80196ea:	603b      	str	r3, [r7, #0]
 80196ec:	1dfb      	adds	r3, r7, #7
 80196ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80196f0:	e029      	b.n	8019746 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80196f2:	69bb      	ldr	r3, [r7, #24]
 80196f4:	3301      	adds	r3, #1
 80196f6:	d026      	beq.n	8019746 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80196f8:	f7fb ffc8 	bl	801568c <HAL_GetTick>
 80196fc:	0002      	movs	r2, r0
 80196fe:	683b      	ldr	r3, [r7, #0]
 8019700:	1ad3      	subs	r3, r2, r3
 8019702:	69ba      	ldr	r2, [r7, #24]
 8019704:	429a      	cmp	r2, r3
 8019706:	d302      	bcc.n	801970e <UART_WaitOnFlagUntilTimeout+0x2e>
 8019708:	69bb      	ldr	r3, [r7, #24]
 801970a:	2b00      	cmp	r3, #0
 801970c:	d11b      	bne.n	8019746 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801970e:	68fb      	ldr	r3, [r7, #12]
 8019710:	681b      	ldr	r3, [r3, #0]
 8019712:	681a      	ldr	r2, [r3, #0]
 8019714:	68fb      	ldr	r3, [r7, #12]
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	4915      	ldr	r1, [pc, #84]	@ (8019770 <UART_WaitOnFlagUntilTimeout+0x90>)
 801971a:	400a      	ands	r2, r1
 801971c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801971e:	68fb      	ldr	r3, [r7, #12]
 8019720:	681b      	ldr	r3, [r3, #0]
 8019722:	689a      	ldr	r2, [r3, #8]
 8019724:	68fb      	ldr	r3, [r7, #12]
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	2101      	movs	r1, #1
 801972a:	438a      	bics	r2, r1
 801972c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801972e:	68fb      	ldr	r3, [r7, #12]
 8019730:	2220      	movs	r2, #32
 8019732:	675a      	str	r2, [r3, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8019734:	68fb      	ldr	r3, [r7, #12]
 8019736:	2220      	movs	r2, #32
 8019738:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801973a:	68fb      	ldr	r3, [r7, #12]
 801973c:	2270      	movs	r2, #112	@ 0x70
 801973e:	2100      	movs	r1, #0
 8019740:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8019742:	2303      	movs	r3, #3
 8019744:	e00f      	b.n	8019766 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019746:	68fb      	ldr	r3, [r7, #12]
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	69db      	ldr	r3, [r3, #28]
 801974c:	68ba      	ldr	r2, [r7, #8]
 801974e:	4013      	ands	r3, r2
 8019750:	68ba      	ldr	r2, [r7, #8]
 8019752:	1ad3      	subs	r3, r2, r3
 8019754:	425a      	negs	r2, r3
 8019756:	4153      	adcs	r3, r2
 8019758:	b2db      	uxtb	r3, r3
 801975a:	001a      	movs	r2, r3
 801975c:	1dfb      	adds	r3, r7, #7
 801975e:	781b      	ldrb	r3, [r3, #0]
 8019760:	429a      	cmp	r2, r3
 8019762:	d0c6      	beq.n	80196f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8019764:	2300      	movs	r3, #0
}
 8019766:	0018      	movs	r0, r3
 8019768:	46bd      	mov	sp, r7
 801976a:	b004      	add	sp, #16
 801976c:	bd80      	pop	{r7, pc}
 801976e:	46c0      	nop			@ (mov r8, r8)
 8019770:	fffffe5f 	.word	0xfffffe5f

08019774 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8019774:	b580      	push	{r7, lr}
 8019776:	b082      	sub	sp, #8
 8019778:	af00      	add	r7, sp, #0
 801977a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	681b      	ldr	r3, [r3, #0]
 8019780:	681a      	ldr	r2, [r3, #0]
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	681b      	ldr	r3, [r3, #0]
 8019786:	21c0      	movs	r1, #192	@ 0xc0
 8019788:	438a      	bics	r2, r1
 801978a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	2220      	movs	r2, #32
 8019790:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8019792:	46c0      	nop			@ (mov r8, r8)
 8019794:	46bd      	mov	sp, r7
 8019796:	b002      	add	sp, #8
 8019798:	bd80      	pop	{r7, pc}
	...

0801979c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801979c:	b580      	push	{r7, lr}
 801979e:	b082      	sub	sp, #8
 80197a0:	af00      	add	r7, sp, #0
 80197a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	681b      	ldr	r3, [r3, #0]
 80197a8:	681a      	ldr	r2, [r3, #0]
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	490a      	ldr	r1, [pc, #40]	@ (80197d8 <UART_EndRxTransfer+0x3c>)
 80197b0:	400a      	ands	r2, r1
 80197b2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	681b      	ldr	r3, [r3, #0]
 80197b8:	689a      	ldr	r2, [r3, #8]
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	681b      	ldr	r3, [r3, #0]
 80197be:	2101      	movs	r1, #1
 80197c0:	438a      	bics	r2, r1
 80197c2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	2220      	movs	r2, #32
 80197c8:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	2200      	movs	r2, #0
 80197ce:	661a      	str	r2, [r3, #96]	@ 0x60
}
 80197d0:	46c0      	nop			@ (mov r8, r8)
 80197d2:	46bd      	mov	sp, r7
 80197d4:	b002      	add	sp, #8
 80197d6:	bd80      	pop	{r7, pc}
 80197d8:	fffffedf 	.word	0xfffffedf

080197dc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80197dc:	b580      	push	{r7, lr}
 80197de:	b084      	sub	sp, #16
 80197e0:	af00      	add	r7, sp, #0
 80197e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80197e8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	681b      	ldr	r3, [r3, #0]
 80197f0:	2220      	movs	r2, #32
 80197f2:	4013      	ands	r3, r2
 80197f4:	d114      	bne.n	8019820 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 80197f6:	68fb      	ldr	r3, [r7, #12]
 80197f8:	2252      	movs	r2, #82	@ 0x52
 80197fa:	2100      	movs	r1, #0
 80197fc:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80197fe:	68fb      	ldr	r3, [r7, #12]
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	689a      	ldr	r2, [r3, #8]
 8019804:	68fb      	ldr	r3, [r7, #12]
 8019806:	681b      	ldr	r3, [r3, #0]
 8019808:	2180      	movs	r1, #128	@ 0x80
 801980a:	438a      	bics	r2, r1
 801980c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801980e:	68fb      	ldr	r3, [r7, #12]
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	681a      	ldr	r2, [r3, #0]
 8019814:	68fb      	ldr	r3, [r7, #12]
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	2140      	movs	r1, #64	@ 0x40
 801981a:	430a      	orrs	r2, r1
 801981c:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801981e:	e003      	b.n	8019828 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8019820:	68fb      	ldr	r3, [r7, #12]
 8019822:	0018      	movs	r0, r3
 8019824:	f7eb fabc 	bl	8004da0 <HAL_UART_TxCpltCallback>
}
 8019828:	46c0      	nop			@ (mov r8, r8)
 801982a:	46bd      	mov	sp, r7
 801982c:	b004      	add	sp, #16
 801982e:	bd80      	pop	{r7, pc}

08019830 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8019830:	b580      	push	{r7, lr}
 8019832:	b084      	sub	sp, #16
 8019834:	af00      	add	r7, sp, #0
 8019836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801983c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801983e:	68fb      	ldr	r3, [r7, #12]
 8019840:	0018      	movs	r0, r3
 8019842:	f7ff fb2f 	bl	8018ea4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019846:	46c0      	nop			@ (mov r8, r8)
 8019848:	46bd      	mov	sp, r7
 801984a:	b004      	add	sp, #16
 801984c:	bd80      	pop	{r7, pc}

0801984e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801984e:	b580      	push	{r7, lr}
 8019850:	b086      	sub	sp, #24
 8019852:	af00      	add	r7, sp, #0
 8019854:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801985a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801985c:	697b      	ldr	r3, [r7, #20]
 801985e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019860:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8019862:	697b      	ldr	r3, [r7, #20]
 8019864:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8019866:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8019868:	697b      	ldr	r3, [r7, #20]
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	689b      	ldr	r3, [r3, #8]
 801986e:	2280      	movs	r2, #128	@ 0x80
 8019870:	4013      	ands	r3, r2
 8019872:	2b80      	cmp	r3, #128	@ 0x80
 8019874:	d10a      	bne.n	801988c <UART_DMAError+0x3e>
 8019876:	693b      	ldr	r3, [r7, #16]
 8019878:	2b21      	cmp	r3, #33	@ 0x21
 801987a:	d107      	bne.n	801988c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801987c:	697b      	ldr	r3, [r7, #20]
 801987e:	2252      	movs	r2, #82	@ 0x52
 8019880:	2100      	movs	r1, #0
 8019882:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8019884:	697b      	ldr	r3, [r7, #20]
 8019886:	0018      	movs	r0, r3
 8019888:	f7ff ff74 	bl	8019774 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801988c:	697b      	ldr	r3, [r7, #20]
 801988e:	681b      	ldr	r3, [r3, #0]
 8019890:	689b      	ldr	r3, [r3, #8]
 8019892:	2240      	movs	r2, #64	@ 0x40
 8019894:	4013      	ands	r3, r2
 8019896:	2b40      	cmp	r3, #64	@ 0x40
 8019898:	d10a      	bne.n	80198b0 <UART_DMAError+0x62>
 801989a:	68fb      	ldr	r3, [r7, #12]
 801989c:	2b22      	cmp	r3, #34	@ 0x22
 801989e:	d107      	bne.n	80198b0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80198a0:	697b      	ldr	r3, [r7, #20]
 80198a2:	225a      	movs	r2, #90	@ 0x5a
 80198a4:	2100      	movs	r1, #0
 80198a6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80198a8:	697b      	ldr	r3, [r7, #20]
 80198aa:	0018      	movs	r0, r3
 80198ac:	f7ff ff76 	bl	801979c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80198b0:	697b      	ldr	r3, [r7, #20]
 80198b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80198b4:	2210      	movs	r2, #16
 80198b6:	431a      	orrs	r2, r3
 80198b8:	697b      	ldr	r3, [r7, #20]
 80198ba:	67da      	str	r2, [r3, #124]	@ 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80198bc:	697b      	ldr	r3, [r7, #20]
 80198be:	0018      	movs	r0, r3
 80198c0:	f7ff faf8 	bl	8018eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80198c4:	46c0      	nop			@ (mov r8, r8)
 80198c6:	46bd      	mov	sp, r7
 80198c8:	b006      	add	sp, #24
 80198ca:	bd80      	pop	{r7, pc}

080198cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80198cc:	b580      	push	{r7, lr}
 80198ce:	b084      	sub	sp, #16
 80198d0:	af00      	add	r7, sp, #0
 80198d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80198d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80198da:	68fb      	ldr	r3, [r7, #12]
 80198dc:	225a      	movs	r2, #90	@ 0x5a
 80198de:	2100      	movs	r1, #0
 80198e0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80198e2:	68fb      	ldr	r3, [r7, #12]
 80198e4:	2252      	movs	r2, #82	@ 0x52
 80198e6:	2100      	movs	r1, #0
 80198e8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80198ea:	68fb      	ldr	r3, [r7, #12]
 80198ec:	0018      	movs	r0, r3
 80198ee:	f7ff fae1 	bl	8018eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80198f2:	46c0      	nop			@ (mov r8, r8)
 80198f4:	46bd      	mov	sp, r7
 80198f6:	b004      	add	sp, #16
 80198f8:	bd80      	pop	{r7, pc}

080198fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80198fa:	b580      	push	{r7, lr}
 80198fc:	b082      	sub	sp, #8
 80198fe:	af00      	add	r7, sp, #0
 8019900:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	681a      	ldr	r2, [r3, #0]
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	681b      	ldr	r3, [r3, #0]
 801990c:	2140      	movs	r1, #64	@ 0x40
 801990e:	438a      	bics	r2, r1
 8019910:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	2220      	movs	r2, #32
 8019916:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	2200      	movs	r2, #0
 801991c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	0018      	movs	r0, r3
 8019922:	f7eb fa3d 	bl	8004da0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019926:	46c0      	nop			@ (mov r8, r8)
 8019928:	46bd      	mov	sp, r7
 801992a:	b002      	add	sp, #8
 801992c:	bd80      	pop	{r7, pc}

0801992e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801992e:	b580      	push	{r7, lr}
 8019930:	b082      	sub	sp, #8
 8019932:	af00      	add	r7, sp, #0
 8019934:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8019936:	46c0      	nop			@ (mov r8, r8)
 8019938:	46bd      	mov	sp, r7
 801993a:	b002      	add	sp, #8
 801993c:	bd80      	pop	{r7, pc}

0801993e <_vsniprintf_r>:
 801993e:	b530      	push	{r4, r5, lr}
 8019940:	0014      	movs	r4, r2
 8019942:	0005      	movs	r5, r0
 8019944:	001a      	movs	r2, r3
 8019946:	b09b      	sub	sp, #108	@ 0x6c
 8019948:	2c00      	cmp	r4, #0
 801994a:	da05      	bge.n	8019958 <_vsniprintf_r+0x1a>
 801994c:	238b      	movs	r3, #139	@ 0x8b
 801994e:	6003      	str	r3, [r0, #0]
 8019950:	2001      	movs	r0, #1
 8019952:	4240      	negs	r0, r0
 8019954:	b01b      	add	sp, #108	@ 0x6c
 8019956:	bd30      	pop	{r4, r5, pc}
 8019958:	2382      	movs	r3, #130	@ 0x82
 801995a:	4668      	mov	r0, sp
 801995c:	009b      	lsls	r3, r3, #2
 801995e:	8183      	strh	r3, [r0, #12]
 8019960:	2300      	movs	r3, #0
 8019962:	9100      	str	r1, [sp, #0]
 8019964:	9104      	str	r1, [sp, #16]
 8019966:	429c      	cmp	r4, r3
 8019968:	d000      	beq.n	801996c <_vsniprintf_r+0x2e>
 801996a:	1e63      	subs	r3, r4, #1
 801996c:	9302      	str	r3, [sp, #8]
 801996e:	9305      	str	r3, [sp, #20]
 8019970:	2301      	movs	r3, #1
 8019972:	4669      	mov	r1, sp
 8019974:	425b      	negs	r3, r3
 8019976:	81cb      	strh	r3, [r1, #14]
 8019978:	0028      	movs	r0, r5
 801997a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801997c:	f000 f9a0 	bl	8019cc0 <_svfiprintf_r>
 8019980:	1c43      	adds	r3, r0, #1
 8019982:	da01      	bge.n	8019988 <_vsniprintf_r+0x4a>
 8019984:	238b      	movs	r3, #139	@ 0x8b
 8019986:	602b      	str	r3, [r5, #0]
 8019988:	2c00      	cmp	r4, #0
 801998a:	d0e3      	beq.n	8019954 <_vsniprintf_r+0x16>
 801998c:	2200      	movs	r2, #0
 801998e:	9b00      	ldr	r3, [sp, #0]
 8019990:	701a      	strb	r2, [r3, #0]
 8019992:	e7df      	b.n	8019954 <_vsniprintf_r+0x16>

08019994 <vsniprintf>:
 8019994:	b513      	push	{r0, r1, r4, lr}
 8019996:	4c04      	ldr	r4, [pc, #16]	@ (80199a8 <vsniprintf+0x14>)
 8019998:	9300      	str	r3, [sp, #0]
 801999a:	0013      	movs	r3, r2
 801999c:	000a      	movs	r2, r1
 801999e:	0001      	movs	r1, r0
 80199a0:	6820      	ldr	r0, [r4, #0]
 80199a2:	f7ff ffcc 	bl	801993e <_vsniprintf_r>
 80199a6:	bd16      	pop	{r1, r2, r4, pc}
 80199a8:	200000b0 	.word	0x200000b0

080199ac <memset>:
 80199ac:	0003      	movs	r3, r0
 80199ae:	1882      	adds	r2, r0, r2
 80199b0:	4293      	cmp	r3, r2
 80199b2:	d100      	bne.n	80199b6 <memset+0xa>
 80199b4:	4770      	bx	lr
 80199b6:	7019      	strb	r1, [r3, #0]
 80199b8:	3301      	adds	r3, #1
 80199ba:	e7f9      	b.n	80199b0 <memset+0x4>

080199bc <__libc_init_array>:
 80199bc:	b570      	push	{r4, r5, r6, lr}
 80199be:	2600      	movs	r6, #0
 80199c0:	4c0c      	ldr	r4, [pc, #48]	@ (80199f4 <__libc_init_array+0x38>)
 80199c2:	4d0d      	ldr	r5, [pc, #52]	@ (80199f8 <__libc_init_array+0x3c>)
 80199c4:	1b64      	subs	r4, r4, r5
 80199c6:	10a4      	asrs	r4, r4, #2
 80199c8:	42a6      	cmp	r6, r4
 80199ca:	d109      	bne.n	80199e0 <__libc_init_array+0x24>
 80199cc:	2600      	movs	r6, #0
 80199ce:	f000 fdb1 	bl	801a534 <_init>
 80199d2:	4c0a      	ldr	r4, [pc, #40]	@ (80199fc <__libc_init_array+0x40>)
 80199d4:	4d0a      	ldr	r5, [pc, #40]	@ (8019a00 <__libc_init_array+0x44>)
 80199d6:	1b64      	subs	r4, r4, r5
 80199d8:	10a4      	asrs	r4, r4, #2
 80199da:	42a6      	cmp	r6, r4
 80199dc:	d105      	bne.n	80199ea <__libc_init_array+0x2e>
 80199de:	bd70      	pop	{r4, r5, r6, pc}
 80199e0:	00b3      	lsls	r3, r6, #2
 80199e2:	58eb      	ldr	r3, [r5, r3]
 80199e4:	4798      	blx	r3
 80199e6:	3601      	adds	r6, #1
 80199e8:	e7ee      	b.n	80199c8 <__libc_init_array+0xc>
 80199ea:	00b3      	lsls	r3, r6, #2
 80199ec:	58eb      	ldr	r3, [r5, r3]
 80199ee:	4798      	blx	r3
 80199f0:	3601      	adds	r6, #1
 80199f2:	e7f2      	b.n	80199da <__libc_init_array+0x1e>
 80199f4:	0801b5bc 	.word	0x0801b5bc
 80199f8:	0801b5bc 	.word	0x0801b5bc
 80199fc:	0801b5c0 	.word	0x0801b5c0
 8019a00:	0801b5bc 	.word	0x0801b5bc

08019a04 <__retarget_lock_acquire_recursive>:
 8019a04:	4770      	bx	lr

08019a06 <__retarget_lock_release_recursive>:
 8019a06:	4770      	bx	lr

08019a08 <_free_r>:
 8019a08:	b570      	push	{r4, r5, r6, lr}
 8019a0a:	0005      	movs	r5, r0
 8019a0c:	1e0c      	subs	r4, r1, #0
 8019a0e:	d010      	beq.n	8019a32 <_free_r+0x2a>
 8019a10:	3c04      	subs	r4, #4
 8019a12:	6823      	ldr	r3, [r4, #0]
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	da00      	bge.n	8019a1a <_free_r+0x12>
 8019a18:	18e4      	adds	r4, r4, r3
 8019a1a:	0028      	movs	r0, r5
 8019a1c:	f000 f8e0 	bl	8019be0 <__malloc_lock>
 8019a20:	4a1d      	ldr	r2, [pc, #116]	@ (8019a98 <_free_r+0x90>)
 8019a22:	6813      	ldr	r3, [r2, #0]
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	d105      	bne.n	8019a34 <_free_r+0x2c>
 8019a28:	6063      	str	r3, [r4, #4]
 8019a2a:	6014      	str	r4, [r2, #0]
 8019a2c:	0028      	movs	r0, r5
 8019a2e:	f000 f8df 	bl	8019bf0 <__malloc_unlock>
 8019a32:	bd70      	pop	{r4, r5, r6, pc}
 8019a34:	42a3      	cmp	r3, r4
 8019a36:	d908      	bls.n	8019a4a <_free_r+0x42>
 8019a38:	6820      	ldr	r0, [r4, #0]
 8019a3a:	1821      	adds	r1, r4, r0
 8019a3c:	428b      	cmp	r3, r1
 8019a3e:	d1f3      	bne.n	8019a28 <_free_r+0x20>
 8019a40:	6819      	ldr	r1, [r3, #0]
 8019a42:	685b      	ldr	r3, [r3, #4]
 8019a44:	1809      	adds	r1, r1, r0
 8019a46:	6021      	str	r1, [r4, #0]
 8019a48:	e7ee      	b.n	8019a28 <_free_r+0x20>
 8019a4a:	001a      	movs	r2, r3
 8019a4c:	685b      	ldr	r3, [r3, #4]
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d001      	beq.n	8019a56 <_free_r+0x4e>
 8019a52:	42a3      	cmp	r3, r4
 8019a54:	d9f9      	bls.n	8019a4a <_free_r+0x42>
 8019a56:	6811      	ldr	r1, [r2, #0]
 8019a58:	1850      	adds	r0, r2, r1
 8019a5a:	42a0      	cmp	r0, r4
 8019a5c:	d10b      	bne.n	8019a76 <_free_r+0x6e>
 8019a5e:	6820      	ldr	r0, [r4, #0]
 8019a60:	1809      	adds	r1, r1, r0
 8019a62:	1850      	adds	r0, r2, r1
 8019a64:	6011      	str	r1, [r2, #0]
 8019a66:	4283      	cmp	r3, r0
 8019a68:	d1e0      	bne.n	8019a2c <_free_r+0x24>
 8019a6a:	6818      	ldr	r0, [r3, #0]
 8019a6c:	685b      	ldr	r3, [r3, #4]
 8019a6e:	1841      	adds	r1, r0, r1
 8019a70:	6011      	str	r1, [r2, #0]
 8019a72:	6053      	str	r3, [r2, #4]
 8019a74:	e7da      	b.n	8019a2c <_free_r+0x24>
 8019a76:	42a0      	cmp	r0, r4
 8019a78:	d902      	bls.n	8019a80 <_free_r+0x78>
 8019a7a:	230c      	movs	r3, #12
 8019a7c:	602b      	str	r3, [r5, #0]
 8019a7e:	e7d5      	b.n	8019a2c <_free_r+0x24>
 8019a80:	6820      	ldr	r0, [r4, #0]
 8019a82:	1821      	adds	r1, r4, r0
 8019a84:	428b      	cmp	r3, r1
 8019a86:	d103      	bne.n	8019a90 <_free_r+0x88>
 8019a88:	6819      	ldr	r1, [r3, #0]
 8019a8a:	685b      	ldr	r3, [r3, #4]
 8019a8c:	1809      	adds	r1, r1, r0
 8019a8e:	6021      	str	r1, [r4, #0]
 8019a90:	6063      	str	r3, [r4, #4]
 8019a92:	6054      	str	r4, [r2, #4]
 8019a94:	e7ca      	b.n	8019a2c <_free_r+0x24>
 8019a96:	46c0      	nop			@ (mov r8, r8)
 8019a98:	200015fc 	.word	0x200015fc

08019a9c <sbrk_aligned>:
 8019a9c:	b570      	push	{r4, r5, r6, lr}
 8019a9e:	4e0f      	ldr	r6, [pc, #60]	@ (8019adc <sbrk_aligned+0x40>)
 8019aa0:	000d      	movs	r5, r1
 8019aa2:	6831      	ldr	r1, [r6, #0]
 8019aa4:	0004      	movs	r4, r0
 8019aa6:	2900      	cmp	r1, #0
 8019aa8:	d102      	bne.n	8019ab0 <sbrk_aligned+0x14>
 8019aaa:	f000 fb99 	bl	801a1e0 <_sbrk_r>
 8019aae:	6030      	str	r0, [r6, #0]
 8019ab0:	0029      	movs	r1, r5
 8019ab2:	0020      	movs	r0, r4
 8019ab4:	f000 fb94 	bl	801a1e0 <_sbrk_r>
 8019ab8:	1c43      	adds	r3, r0, #1
 8019aba:	d103      	bne.n	8019ac4 <sbrk_aligned+0x28>
 8019abc:	2501      	movs	r5, #1
 8019abe:	426d      	negs	r5, r5
 8019ac0:	0028      	movs	r0, r5
 8019ac2:	bd70      	pop	{r4, r5, r6, pc}
 8019ac4:	2303      	movs	r3, #3
 8019ac6:	1cc5      	adds	r5, r0, #3
 8019ac8:	439d      	bics	r5, r3
 8019aca:	42a8      	cmp	r0, r5
 8019acc:	d0f8      	beq.n	8019ac0 <sbrk_aligned+0x24>
 8019ace:	1a29      	subs	r1, r5, r0
 8019ad0:	0020      	movs	r0, r4
 8019ad2:	f000 fb85 	bl	801a1e0 <_sbrk_r>
 8019ad6:	3001      	adds	r0, #1
 8019ad8:	d1f2      	bne.n	8019ac0 <sbrk_aligned+0x24>
 8019ada:	e7ef      	b.n	8019abc <sbrk_aligned+0x20>
 8019adc:	200015f8 	.word	0x200015f8

08019ae0 <_malloc_r>:
 8019ae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019ae2:	2203      	movs	r2, #3
 8019ae4:	1ccb      	adds	r3, r1, #3
 8019ae6:	4393      	bics	r3, r2
 8019ae8:	3308      	adds	r3, #8
 8019aea:	0005      	movs	r5, r0
 8019aec:	001f      	movs	r7, r3
 8019aee:	2b0c      	cmp	r3, #12
 8019af0:	d234      	bcs.n	8019b5c <_malloc_r+0x7c>
 8019af2:	270c      	movs	r7, #12
 8019af4:	42b9      	cmp	r1, r7
 8019af6:	d833      	bhi.n	8019b60 <_malloc_r+0x80>
 8019af8:	0028      	movs	r0, r5
 8019afa:	f000 f871 	bl	8019be0 <__malloc_lock>
 8019afe:	4e37      	ldr	r6, [pc, #220]	@ (8019bdc <_malloc_r+0xfc>)
 8019b00:	6833      	ldr	r3, [r6, #0]
 8019b02:	001c      	movs	r4, r3
 8019b04:	2c00      	cmp	r4, #0
 8019b06:	d12f      	bne.n	8019b68 <_malloc_r+0x88>
 8019b08:	0039      	movs	r1, r7
 8019b0a:	0028      	movs	r0, r5
 8019b0c:	f7ff ffc6 	bl	8019a9c <sbrk_aligned>
 8019b10:	0004      	movs	r4, r0
 8019b12:	1c43      	adds	r3, r0, #1
 8019b14:	d15f      	bne.n	8019bd6 <_malloc_r+0xf6>
 8019b16:	6834      	ldr	r4, [r6, #0]
 8019b18:	9400      	str	r4, [sp, #0]
 8019b1a:	9b00      	ldr	r3, [sp, #0]
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d14a      	bne.n	8019bb6 <_malloc_r+0xd6>
 8019b20:	2c00      	cmp	r4, #0
 8019b22:	d052      	beq.n	8019bca <_malloc_r+0xea>
 8019b24:	6823      	ldr	r3, [r4, #0]
 8019b26:	0028      	movs	r0, r5
 8019b28:	18e3      	adds	r3, r4, r3
 8019b2a:	9900      	ldr	r1, [sp, #0]
 8019b2c:	9301      	str	r3, [sp, #4]
 8019b2e:	f000 fb57 	bl	801a1e0 <_sbrk_r>
 8019b32:	9b01      	ldr	r3, [sp, #4]
 8019b34:	4283      	cmp	r3, r0
 8019b36:	d148      	bne.n	8019bca <_malloc_r+0xea>
 8019b38:	6823      	ldr	r3, [r4, #0]
 8019b3a:	0028      	movs	r0, r5
 8019b3c:	1aff      	subs	r7, r7, r3
 8019b3e:	0039      	movs	r1, r7
 8019b40:	f7ff ffac 	bl	8019a9c <sbrk_aligned>
 8019b44:	3001      	adds	r0, #1
 8019b46:	d040      	beq.n	8019bca <_malloc_r+0xea>
 8019b48:	6823      	ldr	r3, [r4, #0]
 8019b4a:	19db      	adds	r3, r3, r7
 8019b4c:	6023      	str	r3, [r4, #0]
 8019b4e:	6833      	ldr	r3, [r6, #0]
 8019b50:	685a      	ldr	r2, [r3, #4]
 8019b52:	2a00      	cmp	r2, #0
 8019b54:	d133      	bne.n	8019bbe <_malloc_r+0xde>
 8019b56:	9b00      	ldr	r3, [sp, #0]
 8019b58:	6033      	str	r3, [r6, #0]
 8019b5a:	e019      	b.n	8019b90 <_malloc_r+0xb0>
 8019b5c:	2b00      	cmp	r3, #0
 8019b5e:	dac9      	bge.n	8019af4 <_malloc_r+0x14>
 8019b60:	230c      	movs	r3, #12
 8019b62:	602b      	str	r3, [r5, #0]
 8019b64:	2000      	movs	r0, #0
 8019b66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019b68:	6821      	ldr	r1, [r4, #0]
 8019b6a:	1bc9      	subs	r1, r1, r7
 8019b6c:	d420      	bmi.n	8019bb0 <_malloc_r+0xd0>
 8019b6e:	290b      	cmp	r1, #11
 8019b70:	d90a      	bls.n	8019b88 <_malloc_r+0xa8>
 8019b72:	19e2      	adds	r2, r4, r7
 8019b74:	6027      	str	r7, [r4, #0]
 8019b76:	42a3      	cmp	r3, r4
 8019b78:	d104      	bne.n	8019b84 <_malloc_r+0xa4>
 8019b7a:	6032      	str	r2, [r6, #0]
 8019b7c:	6863      	ldr	r3, [r4, #4]
 8019b7e:	6011      	str	r1, [r2, #0]
 8019b80:	6053      	str	r3, [r2, #4]
 8019b82:	e005      	b.n	8019b90 <_malloc_r+0xb0>
 8019b84:	605a      	str	r2, [r3, #4]
 8019b86:	e7f9      	b.n	8019b7c <_malloc_r+0x9c>
 8019b88:	6862      	ldr	r2, [r4, #4]
 8019b8a:	42a3      	cmp	r3, r4
 8019b8c:	d10e      	bne.n	8019bac <_malloc_r+0xcc>
 8019b8e:	6032      	str	r2, [r6, #0]
 8019b90:	0028      	movs	r0, r5
 8019b92:	f000 f82d 	bl	8019bf0 <__malloc_unlock>
 8019b96:	0020      	movs	r0, r4
 8019b98:	2207      	movs	r2, #7
 8019b9a:	300b      	adds	r0, #11
 8019b9c:	1d23      	adds	r3, r4, #4
 8019b9e:	4390      	bics	r0, r2
 8019ba0:	1ac2      	subs	r2, r0, r3
 8019ba2:	4298      	cmp	r0, r3
 8019ba4:	d0df      	beq.n	8019b66 <_malloc_r+0x86>
 8019ba6:	1a1b      	subs	r3, r3, r0
 8019ba8:	50a3      	str	r3, [r4, r2]
 8019baa:	e7dc      	b.n	8019b66 <_malloc_r+0x86>
 8019bac:	605a      	str	r2, [r3, #4]
 8019bae:	e7ef      	b.n	8019b90 <_malloc_r+0xb0>
 8019bb0:	0023      	movs	r3, r4
 8019bb2:	6864      	ldr	r4, [r4, #4]
 8019bb4:	e7a6      	b.n	8019b04 <_malloc_r+0x24>
 8019bb6:	9c00      	ldr	r4, [sp, #0]
 8019bb8:	6863      	ldr	r3, [r4, #4]
 8019bba:	9300      	str	r3, [sp, #0]
 8019bbc:	e7ad      	b.n	8019b1a <_malloc_r+0x3a>
 8019bbe:	001a      	movs	r2, r3
 8019bc0:	685b      	ldr	r3, [r3, #4]
 8019bc2:	42a3      	cmp	r3, r4
 8019bc4:	d1fb      	bne.n	8019bbe <_malloc_r+0xde>
 8019bc6:	2300      	movs	r3, #0
 8019bc8:	e7da      	b.n	8019b80 <_malloc_r+0xa0>
 8019bca:	230c      	movs	r3, #12
 8019bcc:	0028      	movs	r0, r5
 8019bce:	602b      	str	r3, [r5, #0]
 8019bd0:	f000 f80e 	bl	8019bf0 <__malloc_unlock>
 8019bd4:	e7c6      	b.n	8019b64 <_malloc_r+0x84>
 8019bd6:	6007      	str	r7, [r0, #0]
 8019bd8:	e7da      	b.n	8019b90 <_malloc_r+0xb0>
 8019bda:	46c0      	nop			@ (mov r8, r8)
 8019bdc:	200015fc 	.word	0x200015fc

08019be0 <__malloc_lock>:
 8019be0:	b510      	push	{r4, lr}
 8019be2:	4802      	ldr	r0, [pc, #8]	@ (8019bec <__malloc_lock+0xc>)
 8019be4:	f7ff ff0e 	bl	8019a04 <__retarget_lock_acquire_recursive>
 8019be8:	bd10      	pop	{r4, pc}
 8019bea:	46c0      	nop			@ (mov r8, r8)
 8019bec:	200015f4 	.word	0x200015f4

08019bf0 <__malloc_unlock>:
 8019bf0:	b510      	push	{r4, lr}
 8019bf2:	4802      	ldr	r0, [pc, #8]	@ (8019bfc <__malloc_unlock+0xc>)
 8019bf4:	f7ff ff07 	bl	8019a06 <__retarget_lock_release_recursive>
 8019bf8:	bd10      	pop	{r4, pc}
 8019bfa:	46c0      	nop			@ (mov r8, r8)
 8019bfc:	200015f4 	.word	0x200015f4

08019c00 <__ssputs_r>:
 8019c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c02:	688e      	ldr	r6, [r1, #8]
 8019c04:	b085      	sub	sp, #20
 8019c06:	001f      	movs	r7, r3
 8019c08:	000c      	movs	r4, r1
 8019c0a:	680b      	ldr	r3, [r1, #0]
 8019c0c:	9002      	str	r0, [sp, #8]
 8019c0e:	9203      	str	r2, [sp, #12]
 8019c10:	42be      	cmp	r6, r7
 8019c12:	d830      	bhi.n	8019c76 <__ssputs_r+0x76>
 8019c14:	210c      	movs	r1, #12
 8019c16:	5e62      	ldrsh	r2, [r4, r1]
 8019c18:	2190      	movs	r1, #144	@ 0x90
 8019c1a:	00c9      	lsls	r1, r1, #3
 8019c1c:	420a      	tst	r2, r1
 8019c1e:	d028      	beq.n	8019c72 <__ssputs_r+0x72>
 8019c20:	2003      	movs	r0, #3
 8019c22:	6921      	ldr	r1, [r4, #16]
 8019c24:	1a5b      	subs	r3, r3, r1
 8019c26:	9301      	str	r3, [sp, #4]
 8019c28:	6963      	ldr	r3, [r4, #20]
 8019c2a:	4343      	muls	r3, r0
 8019c2c:	9801      	ldr	r0, [sp, #4]
 8019c2e:	0fdd      	lsrs	r5, r3, #31
 8019c30:	18ed      	adds	r5, r5, r3
 8019c32:	1c7b      	adds	r3, r7, #1
 8019c34:	181b      	adds	r3, r3, r0
 8019c36:	106d      	asrs	r5, r5, #1
 8019c38:	42ab      	cmp	r3, r5
 8019c3a:	d900      	bls.n	8019c3e <__ssputs_r+0x3e>
 8019c3c:	001d      	movs	r5, r3
 8019c3e:	0552      	lsls	r2, r2, #21
 8019c40:	d528      	bpl.n	8019c94 <__ssputs_r+0x94>
 8019c42:	0029      	movs	r1, r5
 8019c44:	9802      	ldr	r0, [sp, #8]
 8019c46:	f7ff ff4b 	bl	8019ae0 <_malloc_r>
 8019c4a:	1e06      	subs	r6, r0, #0
 8019c4c:	d02c      	beq.n	8019ca8 <__ssputs_r+0xa8>
 8019c4e:	9a01      	ldr	r2, [sp, #4]
 8019c50:	6921      	ldr	r1, [r4, #16]
 8019c52:	f000 fae2 	bl	801a21a <memcpy>
 8019c56:	89a2      	ldrh	r2, [r4, #12]
 8019c58:	4b18      	ldr	r3, [pc, #96]	@ (8019cbc <__ssputs_r+0xbc>)
 8019c5a:	401a      	ands	r2, r3
 8019c5c:	2380      	movs	r3, #128	@ 0x80
 8019c5e:	4313      	orrs	r3, r2
 8019c60:	81a3      	strh	r3, [r4, #12]
 8019c62:	9b01      	ldr	r3, [sp, #4]
 8019c64:	6126      	str	r6, [r4, #16]
 8019c66:	18f6      	adds	r6, r6, r3
 8019c68:	6026      	str	r6, [r4, #0]
 8019c6a:	003e      	movs	r6, r7
 8019c6c:	6165      	str	r5, [r4, #20]
 8019c6e:	1aed      	subs	r5, r5, r3
 8019c70:	60a5      	str	r5, [r4, #8]
 8019c72:	42be      	cmp	r6, r7
 8019c74:	d900      	bls.n	8019c78 <__ssputs_r+0x78>
 8019c76:	003e      	movs	r6, r7
 8019c78:	0032      	movs	r2, r6
 8019c7a:	9903      	ldr	r1, [sp, #12]
 8019c7c:	6820      	ldr	r0, [r4, #0]
 8019c7e:	f000 fa9b 	bl	801a1b8 <memmove>
 8019c82:	2000      	movs	r0, #0
 8019c84:	68a3      	ldr	r3, [r4, #8]
 8019c86:	1b9b      	subs	r3, r3, r6
 8019c88:	60a3      	str	r3, [r4, #8]
 8019c8a:	6823      	ldr	r3, [r4, #0]
 8019c8c:	199b      	adds	r3, r3, r6
 8019c8e:	6023      	str	r3, [r4, #0]
 8019c90:	b005      	add	sp, #20
 8019c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c94:	002a      	movs	r2, r5
 8019c96:	9802      	ldr	r0, [sp, #8]
 8019c98:	f000 fac8 	bl	801a22c <_realloc_r>
 8019c9c:	1e06      	subs	r6, r0, #0
 8019c9e:	d1e0      	bne.n	8019c62 <__ssputs_r+0x62>
 8019ca0:	6921      	ldr	r1, [r4, #16]
 8019ca2:	9802      	ldr	r0, [sp, #8]
 8019ca4:	f7ff feb0 	bl	8019a08 <_free_r>
 8019ca8:	230c      	movs	r3, #12
 8019caa:	2001      	movs	r0, #1
 8019cac:	9a02      	ldr	r2, [sp, #8]
 8019cae:	4240      	negs	r0, r0
 8019cb0:	6013      	str	r3, [r2, #0]
 8019cb2:	89a2      	ldrh	r2, [r4, #12]
 8019cb4:	3334      	adds	r3, #52	@ 0x34
 8019cb6:	4313      	orrs	r3, r2
 8019cb8:	81a3      	strh	r3, [r4, #12]
 8019cba:	e7e9      	b.n	8019c90 <__ssputs_r+0x90>
 8019cbc:	fffffb7f 	.word	0xfffffb7f

08019cc0 <_svfiprintf_r>:
 8019cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019cc2:	b0a1      	sub	sp, #132	@ 0x84
 8019cc4:	9003      	str	r0, [sp, #12]
 8019cc6:	001d      	movs	r5, r3
 8019cc8:	898b      	ldrh	r3, [r1, #12]
 8019cca:	000f      	movs	r7, r1
 8019ccc:	0016      	movs	r6, r2
 8019cce:	061b      	lsls	r3, r3, #24
 8019cd0:	d511      	bpl.n	8019cf6 <_svfiprintf_r+0x36>
 8019cd2:	690b      	ldr	r3, [r1, #16]
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	d10e      	bne.n	8019cf6 <_svfiprintf_r+0x36>
 8019cd8:	2140      	movs	r1, #64	@ 0x40
 8019cda:	f7ff ff01 	bl	8019ae0 <_malloc_r>
 8019cde:	6038      	str	r0, [r7, #0]
 8019ce0:	6138      	str	r0, [r7, #16]
 8019ce2:	2800      	cmp	r0, #0
 8019ce4:	d105      	bne.n	8019cf2 <_svfiprintf_r+0x32>
 8019ce6:	230c      	movs	r3, #12
 8019ce8:	9a03      	ldr	r2, [sp, #12]
 8019cea:	6013      	str	r3, [r2, #0]
 8019cec:	2001      	movs	r0, #1
 8019cee:	4240      	negs	r0, r0
 8019cf0:	e0cf      	b.n	8019e92 <_svfiprintf_r+0x1d2>
 8019cf2:	2340      	movs	r3, #64	@ 0x40
 8019cf4:	617b      	str	r3, [r7, #20]
 8019cf6:	2300      	movs	r3, #0
 8019cf8:	ac08      	add	r4, sp, #32
 8019cfa:	6163      	str	r3, [r4, #20]
 8019cfc:	3320      	adds	r3, #32
 8019cfe:	7663      	strb	r3, [r4, #25]
 8019d00:	3310      	adds	r3, #16
 8019d02:	76a3      	strb	r3, [r4, #26]
 8019d04:	9507      	str	r5, [sp, #28]
 8019d06:	0035      	movs	r5, r6
 8019d08:	782b      	ldrb	r3, [r5, #0]
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d001      	beq.n	8019d12 <_svfiprintf_r+0x52>
 8019d0e:	2b25      	cmp	r3, #37	@ 0x25
 8019d10:	d148      	bne.n	8019da4 <_svfiprintf_r+0xe4>
 8019d12:	1bab      	subs	r3, r5, r6
 8019d14:	9305      	str	r3, [sp, #20]
 8019d16:	42b5      	cmp	r5, r6
 8019d18:	d00b      	beq.n	8019d32 <_svfiprintf_r+0x72>
 8019d1a:	0032      	movs	r2, r6
 8019d1c:	0039      	movs	r1, r7
 8019d1e:	9803      	ldr	r0, [sp, #12]
 8019d20:	f7ff ff6e 	bl	8019c00 <__ssputs_r>
 8019d24:	3001      	adds	r0, #1
 8019d26:	d100      	bne.n	8019d2a <_svfiprintf_r+0x6a>
 8019d28:	e0ae      	b.n	8019e88 <_svfiprintf_r+0x1c8>
 8019d2a:	6963      	ldr	r3, [r4, #20]
 8019d2c:	9a05      	ldr	r2, [sp, #20]
 8019d2e:	189b      	adds	r3, r3, r2
 8019d30:	6163      	str	r3, [r4, #20]
 8019d32:	782b      	ldrb	r3, [r5, #0]
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d100      	bne.n	8019d3a <_svfiprintf_r+0x7a>
 8019d38:	e0a6      	b.n	8019e88 <_svfiprintf_r+0x1c8>
 8019d3a:	2201      	movs	r2, #1
 8019d3c:	2300      	movs	r3, #0
 8019d3e:	4252      	negs	r2, r2
 8019d40:	6062      	str	r2, [r4, #4]
 8019d42:	a904      	add	r1, sp, #16
 8019d44:	3254      	adds	r2, #84	@ 0x54
 8019d46:	1852      	adds	r2, r2, r1
 8019d48:	1c6e      	adds	r6, r5, #1
 8019d4a:	6023      	str	r3, [r4, #0]
 8019d4c:	60e3      	str	r3, [r4, #12]
 8019d4e:	60a3      	str	r3, [r4, #8]
 8019d50:	7013      	strb	r3, [r2, #0]
 8019d52:	65a3      	str	r3, [r4, #88]	@ 0x58
 8019d54:	4b54      	ldr	r3, [pc, #336]	@ (8019ea8 <_svfiprintf_r+0x1e8>)
 8019d56:	2205      	movs	r2, #5
 8019d58:	0018      	movs	r0, r3
 8019d5a:	7831      	ldrb	r1, [r6, #0]
 8019d5c:	9305      	str	r3, [sp, #20]
 8019d5e:	f000 fa51 	bl	801a204 <memchr>
 8019d62:	1c75      	adds	r5, r6, #1
 8019d64:	2800      	cmp	r0, #0
 8019d66:	d11f      	bne.n	8019da8 <_svfiprintf_r+0xe8>
 8019d68:	6822      	ldr	r2, [r4, #0]
 8019d6a:	06d3      	lsls	r3, r2, #27
 8019d6c:	d504      	bpl.n	8019d78 <_svfiprintf_r+0xb8>
 8019d6e:	2353      	movs	r3, #83	@ 0x53
 8019d70:	a904      	add	r1, sp, #16
 8019d72:	185b      	adds	r3, r3, r1
 8019d74:	2120      	movs	r1, #32
 8019d76:	7019      	strb	r1, [r3, #0]
 8019d78:	0713      	lsls	r3, r2, #28
 8019d7a:	d504      	bpl.n	8019d86 <_svfiprintf_r+0xc6>
 8019d7c:	2353      	movs	r3, #83	@ 0x53
 8019d7e:	a904      	add	r1, sp, #16
 8019d80:	185b      	adds	r3, r3, r1
 8019d82:	212b      	movs	r1, #43	@ 0x2b
 8019d84:	7019      	strb	r1, [r3, #0]
 8019d86:	7833      	ldrb	r3, [r6, #0]
 8019d88:	2b2a      	cmp	r3, #42	@ 0x2a
 8019d8a:	d016      	beq.n	8019dba <_svfiprintf_r+0xfa>
 8019d8c:	0035      	movs	r5, r6
 8019d8e:	2100      	movs	r1, #0
 8019d90:	200a      	movs	r0, #10
 8019d92:	68e3      	ldr	r3, [r4, #12]
 8019d94:	782a      	ldrb	r2, [r5, #0]
 8019d96:	1c6e      	adds	r6, r5, #1
 8019d98:	3a30      	subs	r2, #48	@ 0x30
 8019d9a:	2a09      	cmp	r2, #9
 8019d9c:	d950      	bls.n	8019e40 <_svfiprintf_r+0x180>
 8019d9e:	2900      	cmp	r1, #0
 8019da0:	d111      	bne.n	8019dc6 <_svfiprintf_r+0x106>
 8019da2:	e017      	b.n	8019dd4 <_svfiprintf_r+0x114>
 8019da4:	3501      	adds	r5, #1
 8019da6:	e7af      	b.n	8019d08 <_svfiprintf_r+0x48>
 8019da8:	9b05      	ldr	r3, [sp, #20]
 8019daa:	6822      	ldr	r2, [r4, #0]
 8019dac:	1ac0      	subs	r0, r0, r3
 8019dae:	2301      	movs	r3, #1
 8019db0:	4083      	lsls	r3, r0
 8019db2:	4313      	orrs	r3, r2
 8019db4:	002e      	movs	r6, r5
 8019db6:	6023      	str	r3, [r4, #0]
 8019db8:	e7cc      	b.n	8019d54 <_svfiprintf_r+0x94>
 8019dba:	9b07      	ldr	r3, [sp, #28]
 8019dbc:	1d19      	adds	r1, r3, #4
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	9107      	str	r1, [sp, #28]
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	db01      	blt.n	8019dca <_svfiprintf_r+0x10a>
 8019dc6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019dc8:	e004      	b.n	8019dd4 <_svfiprintf_r+0x114>
 8019dca:	425b      	negs	r3, r3
 8019dcc:	60e3      	str	r3, [r4, #12]
 8019dce:	2302      	movs	r3, #2
 8019dd0:	4313      	orrs	r3, r2
 8019dd2:	6023      	str	r3, [r4, #0]
 8019dd4:	782b      	ldrb	r3, [r5, #0]
 8019dd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8019dd8:	d10c      	bne.n	8019df4 <_svfiprintf_r+0x134>
 8019dda:	786b      	ldrb	r3, [r5, #1]
 8019ddc:	2b2a      	cmp	r3, #42	@ 0x2a
 8019dde:	d134      	bne.n	8019e4a <_svfiprintf_r+0x18a>
 8019de0:	9b07      	ldr	r3, [sp, #28]
 8019de2:	3502      	adds	r5, #2
 8019de4:	1d1a      	adds	r2, r3, #4
 8019de6:	681b      	ldr	r3, [r3, #0]
 8019de8:	9207      	str	r2, [sp, #28]
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	da01      	bge.n	8019df2 <_svfiprintf_r+0x132>
 8019dee:	2301      	movs	r3, #1
 8019df0:	425b      	negs	r3, r3
 8019df2:	9309      	str	r3, [sp, #36]	@ 0x24
 8019df4:	4e2d      	ldr	r6, [pc, #180]	@ (8019eac <_svfiprintf_r+0x1ec>)
 8019df6:	2203      	movs	r2, #3
 8019df8:	0030      	movs	r0, r6
 8019dfa:	7829      	ldrb	r1, [r5, #0]
 8019dfc:	f000 fa02 	bl	801a204 <memchr>
 8019e00:	2800      	cmp	r0, #0
 8019e02:	d006      	beq.n	8019e12 <_svfiprintf_r+0x152>
 8019e04:	2340      	movs	r3, #64	@ 0x40
 8019e06:	1b80      	subs	r0, r0, r6
 8019e08:	4083      	lsls	r3, r0
 8019e0a:	6822      	ldr	r2, [r4, #0]
 8019e0c:	3501      	adds	r5, #1
 8019e0e:	4313      	orrs	r3, r2
 8019e10:	6023      	str	r3, [r4, #0]
 8019e12:	7829      	ldrb	r1, [r5, #0]
 8019e14:	2206      	movs	r2, #6
 8019e16:	4826      	ldr	r0, [pc, #152]	@ (8019eb0 <_svfiprintf_r+0x1f0>)
 8019e18:	1c6e      	adds	r6, r5, #1
 8019e1a:	7621      	strb	r1, [r4, #24]
 8019e1c:	f000 f9f2 	bl	801a204 <memchr>
 8019e20:	2800      	cmp	r0, #0
 8019e22:	d038      	beq.n	8019e96 <_svfiprintf_r+0x1d6>
 8019e24:	4b23      	ldr	r3, [pc, #140]	@ (8019eb4 <_svfiprintf_r+0x1f4>)
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	d122      	bne.n	8019e70 <_svfiprintf_r+0x1b0>
 8019e2a:	2207      	movs	r2, #7
 8019e2c:	9b07      	ldr	r3, [sp, #28]
 8019e2e:	3307      	adds	r3, #7
 8019e30:	4393      	bics	r3, r2
 8019e32:	3308      	adds	r3, #8
 8019e34:	9307      	str	r3, [sp, #28]
 8019e36:	6963      	ldr	r3, [r4, #20]
 8019e38:	9a04      	ldr	r2, [sp, #16]
 8019e3a:	189b      	adds	r3, r3, r2
 8019e3c:	6163      	str	r3, [r4, #20]
 8019e3e:	e762      	b.n	8019d06 <_svfiprintf_r+0x46>
 8019e40:	4343      	muls	r3, r0
 8019e42:	0035      	movs	r5, r6
 8019e44:	2101      	movs	r1, #1
 8019e46:	189b      	adds	r3, r3, r2
 8019e48:	e7a4      	b.n	8019d94 <_svfiprintf_r+0xd4>
 8019e4a:	2300      	movs	r3, #0
 8019e4c:	200a      	movs	r0, #10
 8019e4e:	0019      	movs	r1, r3
 8019e50:	3501      	adds	r5, #1
 8019e52:	6063      	str	r3, [r4, #4]
 8019e54:	782a      	ldrb	r2, [r5, #0]
 8019e56:	1c6e      	adds	r6, r5, #1
 8019e58:	3a30      	subs	r2, #48	@ 0x30
 8019e5a:	2a09      	cmp	r2, #9
 8019e5c:	d903      	bls.n	8019e66 <_svfiprintf_r+0x1a6>
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d0c8      	beq.n	8019df4 <_svfiprintf_r+0x134>
 8019e62:	9109      	str	r1, [sp, #36]	@ 0x24
 8019e64:	e7c6      	b.n	8019df4 <_svfiprintf_r+0x134>
 8019e66:	4341      	muls	r1, r0
 8019e68:	0035      	movs	r5, r6
 8019e6a:	2301      	movs	r3, #1
 8019e6c:	1889      	adds	r1, r1, r2
 8019e6e:	e7f1      	b.n	8019e54 <_svfiprintf_r+0x194>
 8019e70:	aa07      	add	r2, sp, #28
 8019e72:	9200      	str	r2, [sp, #0]
 8019e74:	0021      	movs	r1, r4
 8019e76:	003a      	movs	r2, r7
 8019e78:	4b0f      	ldr	r3, [pc, #60]	@ (8019eb8 <_svfiprintf_r+0x1f8>)
 8019e7a:	9803      	ldr	r0, [sp, #12]
 8019e7c:	e000      	b.n	8019e80 <_svfiprintf_r+0x1c0>
 8019e7e:	bf00      	nop
 8019e80:	9004      	str	r0, [sp, #16]
 8019e82:	9b04      	ldr	r3, [sp, #16]
 8019e84:	3301      	adds	r3, #1
 8019e86:	d1d6      	bne.n	8019e36 <_svfiprintf_r+0x176>
 8019e88:	89bb      	ldrh	r3, [r7, #12]
 8019e8a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8019e8c:	065b      	lsls	r3, r3, #25
 8019e8e:	d500      	bpl.n	8019e92 <_svfiprintf_r+0x1d2>
 8019e90:	e72c      	b.n	8019cec <_svfiprintf_r+0x2c>
 8019e92:	b021      	add	sp, #132	@ 0x84
 8019e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e96:	aa07      	add	r2, sp, #28
 8019e98:	9200      	str	r2, [sp, #0]
 8019e9a:	0021      	movs	r1, r4
 8019e9c:	003a      	movs	r2, r7
 8019e9e:	4b06      	ldr	r3, [pc, #24]	@ (8019eb8 <_svfiprintf_r+0x1f8>)
 8019ea0:	9803      	ldr	r0, [sp, #12]
 8019ea2:	f000 f87b 	bl	8019f9c <_printf_i>
 8019ea6:	e7eb      	b.n	8019e80 <_svfiprintf_r+0x1c0>
 8019ea8:	0801b580 	.word	0x0801b580
 8019eac:	0801b586 	.word	0x0801b586
 8019eb0:	0801b58a 	.word	0x0801b58a
 8019eb4:	00000000 	.word	0x00000000
 8019eb8:	08019c01 	.word	0x08019c01

08019ebc <_printf_common>:
 8019ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019ebe:	0016      	movs	r6, r2
 8019ec0:	9301      	str	r3, [sp, #4]
 8019ec2:	688a      	ldr	r2, [r1, #8]
 8019ec4:	690b      	ldr	r3, [r1, #16]
 8019ec6:	000c      	movs	r4, r1
 8019ec8:	9000      	str	r0, [sp, #0]
 8019eca:	4293      	cmp	r3, r2
 8019ecc:	da00      	bge.n	8019ed0 <_printf_common+0x14>
 8019ece:	0013      	movs	r3, r2
 8019ed0:	0022      	movs	r2, r4
 8019ed2:	6033      	str	r3, [r6, #0]
 8019ed4:	3243      	adds	r2, #67	@ 0x43
 8019ed6:	7812      	ldrb	r2, [r2, #0]
 8019ed8:	2a00      	cmp	r2, #0
 8019eda:	d001      	beq.n	8019ee0 <_printf_common+0x24>
 8019edc:	3301      	adds	r3, #1
 8019ede:	6033      	str	r3, [r6, #0]
 8019ee0:	6823      	ldr	r3, [r4, #0]
 8019ee2:	069b      	lsls	r3, r3, #26
 8019ee4:	d502      	bpl.n	8019eec <_printf_common+0x30>
 8019ee6:	6833      	ldr	r3, [r6, #0]
 8019ee8:	3302      	adds	r3, #2
 8019eea:	6033      	str	r3, [r6, #0]
 8019eec:	6822      	ldr	r2, [r4, #0]
 8019eee:	2306      	movs	r3, #6
 8019ef0:	0015      	movs	r5, r2
 8019ef2:	401d      	ands	r5, r3
 8019ef4:	421a      	tst	r2, r3
 8019ef6:	d027      	beq.n	8019f48 <_printf_common+0x8c>
 8019ef8:	0023      	movs	r3, r4
 8019efa:	3343      	adds	r3, #67	@ 0x43
 8019efc:	781b      	ldrb	r3, [r3, #0]
 8019efe:	1e5a      	subs	r2, r3, #1
 8019f00:	4193      	sbcs	r3, r2
 8019f02:	6822      	ldr	r2, [r4, #0]
 8019f04:	0692      	lsls	r2, r2, #26
 8019f06:	d430      	bmi.n	8019f6a <_printf_common+0xae>
 8019f08:	0022      	movs	r2, r4
 8019f0a:	9901      	ldr	r1, [sp, #4]
 8019f0c:	9800      	ldr	r0, [sp, #0]
 8019f0e:	9d08      	ldr	r5, [sp, #32]
 8019f10:	3243      	adds	r2, #67	@ 0x43
 8019f12:	47a8      	blx	r5
 8019f14:	3001      	adds	r0, #1
 8019f16:	d025      	beq.n	8019f64 <_printf_common+0xa8>
 8019f18:	2206      	movs	r2, #6
 8019f1a:	6823      	ldr	r3, [r4, #0]
 8019f1c:	2500      	movs	r5, #0
 8019f1e:	4013      	ands	r3, r2
 8019f20:	2b04      	cmp	r3, #4
 8019f22:	d105      	bne.n	8019f30 <_printf_common+0x74>
 8019f24:	6833      	ldr	r3, [r6, #0]
 8019f26:	68e5      	ldr	r5, [r4, #12]
 8019f28:	1aed      	subs	r5, r5, r3
 8019f2a:	43eb      	mvns	r3, r5
 8019f2c:	17db      	asrs	r3, r3, #31
 8019f2e:	401d      	ands	r5, r3
 8019f30:	68a3      	ldr	r3, [r4, #8]
 8019f32:	6922      	ldr	r2, [r4, #16]
 8019f34:	4293      	cmp	r3, r2
 8019f36:	dd01      	ble.n	8019f3c <_printf_common+0x80>
 8019f38:	1a9b      	subs	r3, r3, r2
 8019f3a:	18ed      	adds	r5, r5, r3
 8019f3c:	2600      	movs	r6, #0
 8019f3e:	42b5      	cmp	r5, r6
 8019f40:	d120      	bne.n	8019f84 <_printf_common+0xc8>
 8019f42:	2000      	movs	r0, #0
 8019f44:	e010      	b.n	8019f68 <_printf_common+0xac>
 8019f46:	3501      	adds	r5, #1
 8019f48:	68e3      	ldr	r3, [r4, #12]
 8019f4a:	6832      	ldr	r2, [r6, #0]
 8019f4c:	1a9b      	subs	r3, r3, r2
 8019f4e:	42ab      	cmp	r3, r5
 8019f50:	ddd2      	ble.n	8019ef8 <_printf_common+0x3c>
 8019f52:	0022      	movs	r2, r4
 8019f54:	2301      	movs	r3, #1
 8019f56:	9901      	ldr	r1, [sp, #4]
 8019f58:	9800      	ldr	r0, [sp, #0]
 8019f5a:	9f08      	ldr	r7, [sp, #32]
 8019f5c:	3219      	adds	r2, #25
 8019f5e:	47b8      	blx	r7
 8019f60:	3001      	adds	r0, #1
 8019f62:	d1f0      	bne.n	8019f46 <_printf_common+0x8a>
 8019f64:	2001      	movs	r0, #1
 8019f66:	4240      	negs	r0, r0
 8019f68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019f6a:	2030      	movs	r0, #48	@ 0x30
 8019f6c:	18e1      	adds	r1, r4, r3
 8019f6e:	3143      	adds	r1, #67	@ 0x43
 8019f70:	7008      	strb	r0, [r1, #0]
 8019f72:	0021      	movs	r1, r4
 8019f74:	1c5a      	adds	r2, r3, #1
 8019f76:	3145      	adds	r1, #69	@ 0x45
 8019f78:	7809      	ldrb	r1, [r1, #0]
 8019f7a:	18a2      	adds	r2, r4, r2
 8019f7c:	3243      	adds	r2, #67	@ 0x43
 8019f7e:	3302      	adds	r3, #2
 8019f80:	7011      	strb	r1, [r2, #0]
 8019f82:	e7c1      	b.n	8019f08 <_printf_common+0x4c>
 8019f84:	0022      	movs	r2, r4
 8019f86:	2301      	movs	r3, #1
 8019f88:	9901      	ldr	r1, [sp, #4]
 8019f8a:	9800      	ldr	r0, [sp, #0]
 8019f8c:	9f08      	ldr	r7, [sp, #32]
 8019f8e:	321a      	adds	r2, #26
 8019f90:	47b8      	blx	r7
 8019f92:	3001      	adds	r0, #1
 8019f94:	d0e6      	beq.n	8019f64 <_printf_common+0xa8>
 8019f96:	3601      	adds	r6, #1
 8019f98:	e7d1      	b.n	8019f3e <_printf_common+0x82>
	...

08019f9c <_printf_i>:
 8019f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f9e:	b08b      	sub	sp, #44	@ 0x2c
 8019fa0:	9206      	str	r2, [sp, #24]
 8019fa2:	000a      	movs	r2, r1
 8019fa4:	3243      	adds	r2, #67	@ 0x43
 8019fa6:	9307      	str	r3, [sp, #28]
 8019fa8:	9005      	str	r0, [sp, #20]
 8019faa:	9203      	str	r2, [sp, #12]
 8019fac:	7e0a      	ldrb	r2, [r1, #24]
 8019fae:	000c      	movs	r4, r1
 8019fb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019fb2:	2a78      	cmp	r2, #120	@ 0x78
 8019fb4:	d809      	bhi.n	8019fca <_printf_i+0x2e>
 8019fb6:	2a62      	cmp	r2, #98	@ 0x62
 8019fb8:	d80b      	bhi.n	8019fd2 <_printf_i+0x36>
 8019fba:	2a00      	cmp	r2, #0
 8019fbc:	d100      	bne.n	8019fc0 <_printf_i+0x24>
 8019fbe:	e0bc      	b.n	801a13a <_printf_i+0x19e>
 8019fc0:	497b      	ldr	r1, [pc, #492]	@ (801a1b0 <_printf_i+0x214>)
 8019fc2:	9104      	str	r1, [sp, #16]
 8019fc4:	2a58      	cmp	r2, #88	@ 0x58
 8019fc6:	d100      	bne.n	8019fca <_printf_i+0x2e>
 8019fc8:	e090      	b.n	801a0ec <_printf_i+0x150>
 8019fca:	0025      	movs	r5, r4
 8019fcc:	3542      	adds	r5, #66	@ 0x42
 8019fce:	702a      	strb	r2, [r5, #0]
 8019fd0:	e022      	b.n	801a018 <_printf_i+0x7c>
 8019fd2:	0010      	movs	r0, r2
 8019fd4:	3863      	subs	r0, #99	@ 0x63
 8019fd6:	2815      	cmp	r0, #21
 8019fd8:	d8f7      	bhi.n	8019fca <_printf_i+0x2e>
 8019fda:	f7e6 f895 	bl	8000108 <__gnu_thumb1_case_shi>
 8019fde:	0016      	.short	0x0016
 8019fe0:	fff6001f 	.word	0xfff6001f
 8019fe4:	fff6fff6 	.word	0xfff6fff6
 8019fe8:	001ffff6 	.word	0x001ffff6
 8019fec:	fff6fff6 	.word	0xfff6fff6
 8019ff0:	fff6fff6 	.word	0xfff6fff6
 8019ff4:	003600a1 	.word	0x003600a1
 8019ff8:	fff60080 	.word	0xfff60080
 8019ffc:	00b2fff6 	.word	0x00b2fff6
 801a000:	0036fff6 	.word	0x0036fff6
 801a004:	fff6fff6 	.word	0xfff6fff6
 801a008:	0084      	.short	0x0084
 801a00a:	0025      	movs	r5, r4
 801a00c:	681a      	ldr	r2, [r3, #0]
 801a00e:	3542      	adds	r5, #66	@ 0x42
 801a010:	1d11      	adds	r1, r2, #4
 801a012:	6019      	str	r1, [r3, #0]
 801a014:	6813      	ldr	r3, [r2, #0]
 801a016:	702b      	strb	r3, [r5, #0]
 801a018:	2301      	movs	r3, #1
 801a01a:	e0a0      	b.n	801a15e <_printf_i+0x1c2>
 801a01c:	6818      	ldr	r0, [r3, #0]
 801a01e:	6809      	ldr	r1, [r1, #0]
 801a020:	1d02      	adds	r2, r0, #4
 801a022:	060d      	lsls	r5, r1, #24
 801a024:	d50b      	bpl.n	801a03e <_printf_i+0xa2>
 801a026:	6806      	ldr	r6, [r0, #0]
 801a028:	601a      	str	r2, [r3, #0]
 801a02a:	2e00      	cmp	r6, #0
 801a02c:	da03      	bge.n	801a036 <_printf_i+0x9a>
 801a02e:	232d      	movs	r3, #45	@ 0x2d
 801a030:	9a03      	ldr	r2, [sp, #12]
 801a032:	4276      	negs	r6, r6
 801a034:	7013      	strb	r3, [r2, #0]
 801a036:	4b5e      	ldr	r3, [pc, #376]	@ (801a1b0 <_printf_i+0x214>)
 801a038:	270a      	movs	r7, #10
 801a03a:	9304      	str	r3, [sp, #16]
 801a03c:	e018      	b.n	801a070 <_printf_i+0xd4>
 801a03e:	6806      	ldr	r6, [r0, #0]
 801a040:	601a      	str	r2, [r3, #0]
 801a042:	0649      	lsls	r1, r1, #25
 801a044:	d5f1      	bpl.n	801a02a <_printf_i+0x8e>
 801a046:	b236      	sxth	r6, r6
 801a048:	e7ef      	b.n	801a02a <_printf_i+0x8e>
 801a04a:	6808      	ldr	r0, [r1, #0]
 801a04c:	6819      	ldr	r1, [r3, #0]
 801a04e:	c940      	ldmia	r1!, {r6}
 801a050:	0605      	lsls	r5, r0, #24
 801a052:	d402      	bmi.n	801a05a <_printf_i+0xbe>
 801a054:	0640      	lsls	r0, r0, #25
 801a056:	d500      	bpl.n	801a05a <_printf_i+0xbe>
 801a058:	b2b6      	uxth	r6, r6
 801a05a:	6019      	str	r1, [r3, #0]
 801a05c:	4b54      	ldr	r3, [pc, #336]	@ (801a1b0 <_printf_i+0x214>)
 801a05e:	270a      	movs	r7, #10
 801a060:	9304      	str	r3, [sp, #16]
 801a062:	2a6f      	cmp	r2, #111	@ 0x6f
 801a064:	d100      	bne.n	801a068 <_printf_i+0xcc>
 801a066:	3f02      	subs	r7, #2
 801a068:	0023      	movs	r3, r4
 801a06a:	2200      	movs	r2, #0
 801a06c:	3343      	adds	r3, #67	@ 0x43
 801a06e:	701a      	strb	r2, [r3, #0]
 801a070:	6863      	ldr	r3, [r4, #4]
 801a072:	60a3      	str	r3, [r4, #8]
 801a074:	2b00      	cmp	r3, #0
 801a076:	db03      	blt.n	801a080 <_printf_i+0xe4>
 801a078:	2104      	movs	r1, #4
 801a07a:	6822      	ldr	r2, [r4, #0]
 801a07c:	438a      	bics	r2, r1
 801a07e:	6022      	str	r2, [r4, #0]
 801a080:	2e00      	cmp	r6, #0
 801a082:	d102      	bne.n	801a08a <_printf_i+0xee>
 801a084:	9d03      	ldr	r5, [sp, #12]
 801a086:	2b00      	cmp	r3, #0
 801a088:	d00c      	beq.n	801a0a4 <_printf_i+0x108>
 801a08a:	9d03      	ldr	r5, [sp, #12]
 801a08c:	0030      	movs	r0, r6
 801a08e:	0039      	movs	r1, r7
 801a090:	f7e6 f8ca 	bl	8000228 <__aeabi_uidivmod>
 801a094:	9b04      	ldr	r3, [sp, #16]
 801a096:	3d01      	subs	r5, #1
 801a098:	5c5b      	ldrb	r3, [r3, r1]
 801a09a:	702b      	strb	r3, [r5, #0]
 801a09c:	0033      	movs	r3, r6
 801a09e:	0006      	movs	r6, r0
 801a0a0:	429f      	cmp	r7, r3
 801a0a2:	d9f3      	bls.n	801a08c <_printf_i+0xf0>
 801a0a4:	2f08      	cmp	r7, #8
 801a0a6:	d109      	bne.n	801a0bc <_printf_i+0x120>
 801a0a8:	6823      	ldr	r3, [r4, #0]
 801a0aa:	07db      	lsls	r3, r3, #31
 801a0ac:	d506      	bpl.n	801a0bc <_printf_i+0x120>
 801a0ae:	6862      	ldr	r2, [r4, #4]
 801a0b0:	6923      	ldr	r3, [r4, #16]
 801a0b2:	429a      	cmp	r2, r3
 801a0b4:	dc02      	bgt.n	801a0bc <_printf_i+0x120>
 801a0b6:	2330      	movs	r3, #48	@ 0x30
 801a0b8:	3d01      	subs	r5, #1
 801a0ba:	702b      	strb	r3, [r5, #0]
 801a0bc:	9b03      	ldr	r3, [sp, #12]
 801a0be:	1b5b      	subs	r3, r3, r5
 801a0c0:	6123      	str	r3, [r4, #16]
 801a0c2:	9b07      	ldr	r3, [sp, #28]
 801a0c4:	0021      	movs	r1, r4
 801a0c6:	9300      	str	r3, [sp, #0]
 801a0c8:	9805      	ldr	r0, [sp, #20]
 801a0ca:	9b06      	ldr	r3, [sp, #24]
 801a0cc:	aa09      	add	r2, sp, #36	@ 0x24
 801a0ce:	f7ff fef5 	bl	8019ebc <_printf_common>
 801a0d2:	3001      	adds	r0, #1
 801a0d4:	d148      	bne.n	801a168 <_printf_i+0x1cc>
 801a0d6:	2001      	movs	r0, #1
 801a0d8:	4240      	negs	r0, r0
 801a0da:	b00b      	add	sp, #44	@ 0x2c
 801a0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0de:	2220      	movs	r2, #32
 801a0e0:	6809      	ldr	r1, [r1, #0]
 801a0e2:	430a      	orrs	r2, r1
 801a0e4:	6022      	str	r2, [r4, #0]
 801a0e6:	2278      	movs	r2, #120	@ 0x78
 801a0e8:	4932      	ldr	r1, [pc, #200]	@ (801a1b4 <_printf_i+0x218>)
 801a0ea:	9104      	str	r1, [sp, #16]
 801a0ec:	0021      	movs	r1, r4
 801a0ee:	3145      	adds	r1, #69	@ 0x45
 801a0f0:	700a      	strb	r2, [r1, #0]
 801a0f2:	6819      	ldr	r1, [r3, #0]
 801a0f4:	6822      	ldr	r2, [r4, #0]
 801a0f6:	c940      	ldmia	r1!, {r6}
 801a0f8:	0610      	lsls	r0, r2, #24
 801a0fa:	d402      	bmi.n	801a102 <_printf_i+0x166>
 801a0fc:	0650      	lsls	r0, r2, #25
 801a0fe:	d500      	bpl.n	801a102 <_printf_i+0x166>
 801a100:	b2b6      	uxth	r6, r6
 801a102:	6019      	str	r1, [r3, #0]
 801a104:	07d3      	lsls	r3, r2, #31
 801a106:	d502      	bpl.n	801a10e <_printf_i+0x172>
 801a108:	2320      	movs	r3, #32
 801a10a:	4313      	orrs	r3, r2
 801a10c:	6023      	str	r3, [r4, #0]
 801a10e:	2e00      	cmp	r6, #0
 801a110:	d001      	beq.n	801a116 <_printf_i+0x17a>
 801a112:	2710      	movs	r7, #16
 801a114:	e7a8      	b.n	801a068 <_printf_i+0xcc>
 801a116:	2220      	movs	r2, #32
 801a118:	6823      	ldr	r3, [r4, #0]
 801a11a:	4393      	bics	r3, r2
 801a11c:	6023      	str	r3, [r4, #0]
 801a11e:	e7f8      	b.n	801a112 <_printf_i+0x176>
 801a120:	681a      	ldr	r2, [r3, #0]
 801a122:	680d      	ldr	r5, [r1, #0]
 801a124:	1d10      	adds	r0, r2, #4
 801a126:	6949      	ldr	r1, [r1, #20]
 801a128:	6018      	str	r0, [r3, #0]
 801a12a:	6813      	ldr	r3, [r2, #0]
 801a12c:	062e      	lsls	r6, r5, #24
 801a12e:	d501      	bpl.n	801a134 <_printf_i+0x198>
 801a130:	6019      	str	r1, [r3, #0]
 801a132:	e002      	b.n	801a13a <_printf_i+0x19e>
 801a134:	066d      	lsls	r5, r5, #25
 801a136:	d5fb      	bpl.n	801a130 <_printf_i+0x194>
 801a138:	8019      	strh	r1, [r3, #0]
 801a13a:	2300      	movs	r3, #0
 801a13c:	9d03      	ldr	r5, [sp, #12]
 801a13e:	6123      	str	r3, [r4, #16]
 801a140:	e7bf      	b.n	801a0c2 <_printf_i+0x126>
 801a142:	681a      	ldr	r2, [r3, #0]
 801a144:	1d11      	adds	r1, r2, #4
 801a146:	6019      	str	r1, [r3, #0]
 801a148:	6815      	ldr	r5, [r2, #0]
 801a14a:	2100      	movs	r1, #0
 801a14c:	0028      	movs	r0, r5
 801a14e:	6862      	ldr	r2, [r4, #4]
 801a150:	f000 f858 	bl	801a204 <memchr>
 801a154:	2800      	cmp	r0, #0
 801a156:	d001      	beq.n	801a15c <_printf_i+0x1c0>
 801a158:	1b40      	subs	r0, r0, r5
 801a15a:	6060      	str	r0, [r4, #4]
 801a15c:	6863      	ldr	r3, [r4, #4]
 801a15e:	6123      	str	r3, [r4, #16]
 801a160:	2300      	movs	r3, #0
 801a162:	9a03      	ldr	r2, [sp, #12]
 801a164:	7013      	strb	r3, [r2, #0]
 801a166:	e7ac      	b.n	801a0c2 <_printf_i+0x126>
 801a168:	002a      	movs	r2, r5
 801a16a:	6923      	ldr	r3, [r4, #16]
 801a16c:	9906      	ldr	r1, [sp, #24]
 801a16e:	9805      	ldr	r0, [sp, #20]
 801a170:	9d07      	ldr	r5, [sp, #28]
 801a172:	47a8      	blx	r5
 801a174:	3001      	adds	r0, #1
 801a176:	d0ae      	beq.n	801a0d6 <_printf_i+0x13a>
 801a178:	6823      	ldr	r3, [r4, #0]
 801a17a:	079b      	lsls	r3, r3, #30
 801a17c:	d415      	bmi.n	801a1aa <_printf_i+0x20e>
 801a17e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a180:	68e0      	ldr	r0, [r4, #12]
 801a182:	4298      	cmp	r0, r3
 801a184:	daa9      	bge.n	801a0da <_printf_i+0x13e>
 801a186:	0018      	movs	r0, r3
 801a188:	e7a7      	b.n	801a0da <_printf_i+0x13e>
 801a18a:	0022      	movs	r2, r4
 801a18c:	2301      	movs	r3, #1
 801a18e:	9906      	ldr	r1, [sp, #24]
 801a190:	9805      	ldr	r0, [sp, #20]
 801a192:	9e07      	ldr	r6, [sp, #28]
 801a194:	3219      	adds	r2, #25
 801a196:	47b0      	blx	r6
 801a198:	3001      	adds	r0, #1
 801a19a:	d09c      	beq.n	801a0d6 <_printf_i+0x13a>
 801a19c:	3501      	adds	r5, #1
 801a19e:	68e3      	ldr	r3, [r4, #12]
 801a1a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a1a2:	1a9b      	subs	r3, r3, r2
 801a1a4:	42ab      	cmp	r3, r5
 801a1a6:	dcf0      	bgt.n	801a18a <_printf_i+0x1ee>
 801a1a8:	e7e9      	b.n	801a17e <_printf_i+0x1e2>
 801a1aa:	2500      	movs	r5, #0
 801a1ac:	e7f7      	b.n	801a19e <_printf_i+0x202>
 801a1ae:	46c0      	nop			@ (mov r8, r8)
 801a1b0:	0801b591 	.word	0x0801b591
 801a1b4:	0801b5a2 	.word	0x0801b5a2

0801a1b8 <memmove>:
 801a1b8:	b510      	push	{r4, lr}
 801a1ba:	4288      	cmp	r0, r1
 801a1bc:	d806      	bhi.n	801a1cc <memmove+0x14>
 801a1be:	2300      	movs	r3, #0
 801a1c0:	429a      	cmp	r2, r3
 801a1c2:	d008      	beq.n	801a1d6 <memmove+0x1e>
 801a1c4:	5ccc      	ldrb	r4, [r1, r3]
 801a1c6:	54c4      	strb	r4, [r0, r3]
 801a1c8:	3301      	adds	r3, #1
 801a1ca:	e7f9      	b.n	801a1c0 <memmove+0x8>
 801a1cc:	188b      	adds	r3, r1, r2
 801a1ce:	4298      	cmp	r0, r3
 801a1d0:	d2f5      	bcs.n	801a1be <memmove+0x6>
 801a1d2:	3a01      	subs	r2, #1
 801a1d4:	d200      	bcs.n	801a1d8 <memmove+0x20>
 801a1d6:	bd10      	pop	{r4, pc}
 801a1d8:	5c8b      	ldrb	r3, [r1, r2]
 801a1da:	5483      	strb	r3, [r0, r2]
 801a1dc:	e7f9      	b.n	801a1d2 <memmove+0x1a>
	...

0801a1e0 <_sbrk_r>:
 801a1e0:	2300      	movs	r3, #0
 801a1e2:	b570      	push	{r4, r5, r6, lr}
 801a1e4:	4d06      	ldr	r5, [pc, #24]	@ (801a200 <_sbrk_r+0x20>)
 801a1e6:	0004      	movs	r4, r0
 801a1e8:	0008      	movs	r0, r1
 801a1ea:	602b      	str	r3, [r5, #0]
 801a1ec:	f000 f992 	bl	801a514 <_sbrk>
 801a1f0:	1c43      	adds	r3, r0, #1
 801a1f2:	d103      	bne.n	801a1fc <_sbrk_r+0x1c>
 801a1f4:	682b      	ldr	r3, [r5, #0]
 801a1f6:	2b00      	cmp	r3, #0
 801a1f8:	d000      	beq.n	801a1fc <_sbrk_r+0x1c>
 801a1fa:	6023      	str	r3, [r4, #0]
 801a1fc:	bd70      	pop	{r4, r5, r6, pc}
 801a1fe:	46c0      	nop			@ (mov r8, r8)
 801a200:	200015f0 	.word	0x200015f0

0801a204 <memchr>:
 801a204:	b2c9      	uxtb	r1, r1
 801a206:	1882      	adds	r2, r0, r2
 801a208:	4290      	cmp	r0, r2
 801a20a:	d101      	bne.n	801a210 <memchr+0xc>
 801a20c:	2000      	movs	r0, #0
 801a20e:	4770      	bx	lr
 801a210:	7803      	ldrb	r3, [r0, #0]
 801a212:	428b      	cmp	r3, r1
 801a214:	d0fb      	beq.n	801a20e <memchr+0xa>
 801a216:	3001      	adds	r0, #1
 801a218:	e7f6      	b.n	801a208 <memchr+0x4>

0801a21a <memcpy>:
 801a21a:	2300      	movs	r3, #0
 801a21c:	b510      	push	{r4, lr}
 801a21e:	429a      	cmp	r2, r3
 801a220:	d100      	bne.n	801a224 <memcpy+0xa>
 801a222:	bd10      	pop	{r4, pc}
 801a224:	5ccc      	ldrb	r4, [r1, r3]
 801a226:	54c4      	strb	r4, [r0, r3]
 801a228:	3301      	adds	r3, #1
 801a22a:	e7f8      	b.n	801a21e <memcpy+0x4>

0801a22c <_realloc_r>:
 801a22c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a22e:	0006      	movs	r6, r0
 801a230:	000c      	movs	r4, r1
 801a232:	0015      	movs	r5, r2
 801a234:	2900      	cmp	r1, #0
 801a236:	d105      	bne.n	801a244 <_realloc_r+0x18>
 801a238:	0011      	movs	r1, r2
 801a23a:	f7ff fc51 	bl	8019ae0 <_malloc_r>
 801a23e:	0004      	movs	r4, r0
 801a240:	0020      	movs	r0, r4
 801a242:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a244:	2a00      	cmp	r2, #0
 801a246:	d103      	bne.n	801a250 <_realloc_r+0x24>
 801a248:	f7ff fbde 	bl	8019a08 <_free_r>
 801a24c:	2400      	movs	r4, #0
 801a24e:	e7f7      	b.n	801a240 <_realloc_r+0x14>
 801a250:	f000 f81b 	bl	801a28a <_malloc_usable_size_r>
 801a254:	0007      	movs	r7, r0
 801a256:	4285      	cmp	r5, r0
 801a258:	d802      	bhi.n	801a260 <_realloc_r+0x34>
 801a25a:	0843      	lsrs	r3, r0, #1
 801a25c:	42ab      	cmp	r3, r5
 801a25e:	d3ef      	bcc.n	801a240 <_realloc_r+0x14>
 801a260:	0029      	movs	r1, r5
 801a262:	0030      	movs	r0, r6
 801a264:	f7ff fc3c 	bl	8019ae0 <_malloc_r>
 801a268:	9001      	str	r0, [sp, #4]
 801a26a:	2800      	cmp	r0, #0
 801a26c:	d0ee      	beq.n	801a24c <_realloc_r+0x20>
 801a26e:	002a      	movs	r2, r5
 801a270:	42bd      	cmp	r5, r7
 801a272:	d900      	bls.n	801a276 <_realloc_r+0x4a>
 801a274:	003a      	movs	r2, r7
 801a276:	0021      	movs	r1, r4
 801a278:	9801      	ldr	r0, [sp, #4]
 801a27a:	f7ff ffce 	bl	801a21a <memcpy>
 801a27e:	0021      	movs	r1, r4
 801a280:	0030      	movs	r0, r6
 801a282:	f7ff fbc1 	bl	8019a08 <_free_r>
 801a286:	9c01      	ldr	r4, [sp, #4]
 801a288:	e7da      	b.n	801a240 <_realloc_r+0x14>

0801a28a <_malloc_usable_size_r>:
 801a28a:	1f0b      	subs	r3, r1, #4
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	1f18      	subs	r0, r3, #4
 801a290:	2b00      	cmp	r3, #0
 801a292:	da01      	bge.n	801a298 <_malloc_usable_size_r+0xe>
 801a294:	580b      	ldr	r3, [r1, r0]
 801a296:	18c0      	adds	r0, r0, r3
 801a298:	4770      	bx	lr
	...

0801a29c <ceil>:
 801a29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a29e:	004b      	lsls	r3, r1, #1
 801a2a0:	4a34      	ldr	r2, [pc, #208]	@ (801a374 <ceil+0xd8>)
 801a2a2:	0d5b      	lsrs	r3, r3, #21
 801a2a4:	189e      	adds	r6, r3, r2
 801a2a6:	000d      	movs	r5, r1
 801a2a8:	0004      	movs	r4, r0
 801a2aa:	9001      	str	r0, [sp, #4]
 801a2ac:	2e13      	cmp	r6, #19
 801a2ae:	dc2e      	bgt.n	801a30e <ceil+0x72>
 801a2b0:	2e00      	cmp	r6, #0
 801a2b2:	da11      	bge.n	801a2d8 <ceil+0x3c>
 801a2b4:	4a30      	ldr	r2, [pc, #192]	@ (801a378 <ceil+0xdc>)
 801a2b6:	4b31      	ldr	r3, [pc, #196]	@ (801a37c <ceil+0xe0>)
 801a2b8:	f7e6 ff6a 	bl	8001190 <__aeabi_dadd>
 801a2bc:	2200      	movs	r2, #0
 801a2be:	2300      	movs	r3, #0
 801a2c0:	f7e6 f8cc 	bl	800045c <__aeabi_dcmpgt>
 801a2c4:	2800      	cmp	r0, #0
 801a2c6:	d01f      	beq.n	801a308 <ceil+0x6c>
 801a2c8:	2d00      	cmp	r5, #0
 801a2ca:	db4f      	blt.n	801a36c <ceil+0xd0>
 801a2cc:	432c      	orrs	r4, r5
 801a2ce:	1e25      	subs	r5, r4, #0
 801a2d0:	d01a      	beq.n	801a308 <ceil+0x6c>
 801a2d2:	2400      	movs	r4, #0
 801a2d4:	4d2a      	ldr	r5, [pc, #168]	@ (801a380 <ceil+0xe4>)
 801a2d6:	e017      	b.n	801a308 <ceil+0x6c>
 801a2d8:	4f2a      	ldr	r7, [pc, #168]	@ (801a384 <ceil+0xe8>)
 801a2da:	4137      	asrs	r7, r6
 801a2dc:	003b      	movs	r3, r7
 801a2de:	400b      	ands	r3, r1
 801a2e0:	4303      	orrs	r3, r0
 801a2e2:	d01e      	beq.n	801a322 <ceil+0x86>
 801a2e4:	4a24      	ldr	r2, [pc, #144]	@ (801a378 <ceil+0xdc>)
 801a2e6:	4b25      	ldr	r3, [pc, #148]	@ (801a37c <ceil+0xe0>)
 801a2e8:	f7e6 ff52 	bl	8001190 <__aeabi_dadd>
 801a2ec:	2200      	movs	r2, #0
 801a2ee:	2300      	movs	r3, #0
 801a2f0:	f7e6 f8b4 	bl	800045c <__aeabi_dcmpgt>
 801a2f4:	2800      	cmp	r0, #0
 801a2f6:	d007      	beq.n	801a308 <ceil+0x6c>
 801a2f8:	2d00      	cmp	r5, #0
 801a2fa:	dd03      	ble.n	801a304 <ceil+0x68>
 801a2fc:	2380      	movs	r3, #128	@ 0x80
 801a2fe:	035b      	lsls	r3, r3, #13
 801a300:	4133      	asrs	r3, r6
 801a302:	18ed      	adds	r5, r5, r3
 801a304:	2400      	movs	r4, #0
 801a306:	43bd      	bics	r5, r7
 801a308:	0029      	movs	r1, r5
 801a30a:	0020      	movs	r0, r4
 801a30c:	e009      	b.n	801a322 <ceil+0x86>
 801a30e:	2e33      	cmp	r6, #51	@ 0x33
 801a310:	dd09      	ble.n	801a326 <ceil+0x8a>
 801a312:	2380      	movs	r3, #128	@ 0x80
 801a314:	00db      	lsls	r3, r3, #3
 801a316:	429e      	cmp	r6, r3
 801a318:	d103      	bne.n	801a322 <ceil+0x86>
 801a31a:	0002      	movs	r2, r0
 801a31c:	000b      	movs	r3, r1
 801a31e:	f7e6 ff37 	bl	8001190 <__aeabi_dadd>
 801a322:	b003      	add	sp, #12
 801a324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a326:	2701      	movs	r7, #1
 801a328:	4a17      	ldr	r2, [pc, #92]	@ (801a388 <ceil+0xec>)
 801a32a:	427f      	negs	r7, r7
 801a32c:	189b      	adds	r3, r3, r2
 801a32e:	40df      	lsrs	r7, r3
 801a330:	4207      	tst	r7, r0
 801a332:	d0f6      	beq.n	801a322 <ceil+0x86>
 801a334:	4a10      	ldr	r2, [pc, #64]	@ (801a378 <ceil+0xdc>)
 801a336:	4b11      	ldr	r3, [pc, #68]	@ (801a37c <ceil+0xe0>)
 801a338:	f7e6 ff2a 	bl	8001190 <__aeabi_dadd>
 801a33c:	2200      	movs	r2, #0
 801a33e:	2300      	movs	r3, #0
 801a340:	f7e6 f88c 	bl	800045c <__aeabi_dcmpgt>
 801a344:	2800      	cmp	r0, #0
 801a346:	d0df      	beq.n	801a308 <ceil+0x6c>
 801a348:	2d00      	cmp	r5, #0
 801a34a:	dd02      	ble.n	801a352 <ceil+0xb6>
 801a34c:	2e14      	cmp	r6, #20
 801a34e:	d102      	bne.n	801a356 <ceil+0xba>
 801a350:	3501      	adds	r5, #1
 801a352:	43bc      	bics	r4, r7
 801a354:	e7d8      	b.n	801a308 <ceil+0x6c>
 801a356:	2234      	movs	r2, #52	@ 0x34
 801a358:	2301      	movs	r3, #1
 801a35a:	1b92      	subs	r2, r2, r6
 801a35c:	4093      	lsls	r3, r2
 801a35e:	18e4      	adds	r4, r4, r3
 801a360:	9b01      	ldr	r3, [sp, #4]
 801a362:	429c      	cmp	r4, r3
 801a364:	419b      	sbcs	r3, r3
 801a366:	425b      	negs	r3, r3
 801a368:	18ed      	adds	r5, r5, r3
 801a36a:	e7f2      	b.n	801a352 <ceil+0xb6>
 801a36c:	2580      	movs	r5, #128	@ 0x80
 801a36e:	2400      	movs	r4, #0
 801a370:	062d      	lsls	r5, r5, #24
 801a372:	e7c9      	b.n	801a308 <ceil+0x6c>
 801a374:	fffffc01 	.word	0xfffffc01
 801a378:	8800759c 	.word	0x8800759c
 801a37c:	7e37e43c 	.word	0x7e37e43c
 801a380:	3ff00000 	.word	0x3ff00000
 801a384:	000fffff 	.word	0x000fffff
 801a388:	fffffbed 	.word	0xfffffbed

0801a38c <floor>:
 801a38c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a38e:	004b      	lsls	r3, r1, #1
 801a390:	4a36      	ldr	r2, [pc, #216]	@ (801a46c <floor+0xe0>)
 801a392:	0d5b      	lsrs	r3, r3, #21
 801a394:	189e      	adds	r6, r3, r2
 801a396:	000c      	movs	r4, r1
 801a398:	0005      	movs	r5, r0
 801a39a:	9001      	str	r0, [sp, #4]
 801a39c:	2e13      	cmp	r6, #19
 801a39e:	dc2f      	bgt.n	801a400 <floor+0x74>
 801a3a0:	2e00      	cmp	r6, #0
 801a3a2:	da14      	bge.n	801a3ce <floor+0x42>
 801a3a4:	4a32      	ldr	r2, [pc, #200]	@ (801a470 <floor+0xe4>)
 801a3a6:	4b33      	ldr	r3, [pc, #204]	@ (801a474 <floor+0xe8>)
 801a3a8:	f7e6 fef2 	bl	8001190 <__aeabi_dadd>
 801a3ac:	2200      	movs	r2, #0
 801a3ae:	2300      	movs	r3, #0
 801a3b0:	f7e6 f854 	bl	800045c <__aeabi_dcmpgt>
 801a3b4:	2800      	cmp	r0, #0
 801a3b6:	d007      	beq.n	801a3c8 <floor+0x3c>
 801a3b8:	2c00      	cmp	r4, #0
 801a3ba:	da50      	bge.n	801a45e <floor+0xd2>
 801a3bc:	0064      	lsls	r4, r4, #1
 801a3be:	0864      	lsrs	r4, r4, #1
 801a3c0:	4325      	orrs	r5, r4
 801a3c2:	d14f      	bne.n	801a464 <floor+0xd8>
 801a3c4:	2480      	movs	r4, #128	@ 0x80
 801a3c6:	0624      	lsls	r4, r4, #24
 801a3c8:	0021      	movs	r1, r4
 801a3ca:	0028      	movs	r0, r5
 801a3cc:	e022      	b.n	801a414 <floor+0x88>
 801a3ce:	4f2a      	ldr	r7, [pc, #168]	@ (801a478 <floor+0xec>)
 801a3d0:	4137      	asrs	r7, r6
 801a3d2:	003b      	movs	r3, r7
 801a3d4:	400b      	ands	r3, r1
 801a3d6:	4303      	orrs	r3, r0
 801a3d8:	d01c      	beq.n	801a414 <floor+0x88>
 801a3da:	4a25      	ldr	r2, [pc, #148]	@ (801a470 <floor+0xe4>)
 801a3dc:	4b25      	ldr	r3, [pc, #148]	@ (801a474 <floor+0xe8>)
 801a3de:	f7e6 fed7 	bl	8001190 <__aeabi_dadd>
 801a3e2:	2200      	movs	r2, #0
 801a3e4:	2300      	movs	r3, #0
 801a3e6:	f7e6 f839 	bl	800045c <__aeabi_dcmpgt>
 801a3ea:	2800      	cmp	r0, #0
 801a3ec:	d0ec      	beq.n	801a3c8 <floor+0x3c>
 801a3ee:	2c00      	cmp	r4, #0
 801a3f0:	da03      	bge.n	801a3fa <floor+0x6e>
 801a3f2:	2380      	movs	r3, #128	@ 0x80
 801a3f4:	035b      	lsls	r3, r3, #13
 801a3f6:	4133      	asrs	r3, r6
 801a3f8:	18e4      	adds	r4, r4, r3
 801a3fa:	2500      	movs	r5, #0
 801a3fc:	43bc      	bics	r4, r7
 801a3fe:	e7e3      	b.n	801a3c8 <floor+0x3c>
 801a400:	2e33      	cmp	r6, #51	@ 0x33
 801a402:	dd09      	ble.n	801a418 <floor+0x8c>
 801a404:	2380      	movs	r3, #128	@ 0x80
 801a406:	00db      	lsls	r3, r3, #3
 801a408:	429e      	cmp	r6, r3
 801a40a:	d103      	bne.n	801a414 <floor+0x88>
 801a40c:	0002      	movs	r2, r0
 801a40e:	000b      	movs	r3, r1
 801a410:	f7e6 febe 	bl	8001190 <__aeabi_dadd>
 801a414:	b003      	add	sp, #12
 801a416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a418:	2701      	movs	r7, #1
 801a41a:	4a18      	ldr	r2, [pc, #96]	@ (801a47c <floor+0xf0>)
 801a41c:	427f      	negs	r7, r7
 801a41e:	189b      	adds	r3, r3, r2
 801a420:	40df      	lsrs	r7, r3
 801a422:	4238      	tst	r0, r7
 801a424:	d0f6      	beq.n	801a414 <floor+0x88>
 801a426:	4a12      	ldr	r2, [pc, #72]	@ (801a470 <floor+0xe4>)
 801a428:	4b12      	ldr	r3, [pc, #72]	@ (801a474 <floor+0xe8>)
 801a42a:	f7e6 feb1 	bl	8001190 <__aeabi_dadd>
 801a42e:	2200      	movs	r2, #0
 801a430:	2300      	movs	r3, #0
 801a432:	f7e6 f813 	bl	800045c <__aeabi_dcmpgt>
 801a436:	2800      	cmp	r0, #0
 801a438:	d0c6      	beq.n	801a3c8 <floor+0x3c>
 801a43a:	2c00      	cmp	r4, #0
 801a43c:	da02      	bge.n	801a444 <floor+0xb8>
 801a43e:	2e14      	cmp	r6, #20
 801a440:	d102      	bne.n	801a448 <floor+0xbc>
 801a442:	3401      	adds	r4, #1
 801a444:	43bd      	bics	r5, r7
 801a446:	e7bf      	b.n	801a3c8 <floor+0x3c>
 801a448:	2234      	movs	r2, #52	@ 0x34
 801a44a:	2301      	movs	r3, #1
 801a44c:	1b92      	subs	r2, r2, r6
 801a44e:	4093      	lsls	r3, r2
 801a450:	18ed      	adds	r5, r5, r3
 801a452:	9b01      	ldr	r3, [sp, #4]
 801a454:	429d      	cmp	r5, r3
 801a456:	419b      	sbcs	r3, r3
 801a458:	425b      	negs	r3, r3
 801a45a:	18e4      	adds	r4, r4, r3
 801a45c:	e7f2      	b.n	801a444 <floor+0xb8>
 801a45e:	2500      	movs	r5, #0
 801a460:	002c      	movs	r4, r5
 801a462:	e7b1      	b.n	801a3c8 <floor+0x3c>
 801a464:	2500      	movs	r5, #0
 801a466:	4c06      	ldr	r4, [pc, #24]	@ (801a480 <floor+0xf4>)
 801a468:	e7ae      	b.n	801a3c8 <floor+0x3c>
 801a46a:	46c0      	nop			@ (mov r8, r8)
 801a46c:	fffffc01 	.word	0xfffffc01
 801a470:	8800759c 	.word	0x8800759c
 801a474:	7e37e43c 	.word	0x7e37e43c
 801a478:	000fffff 	.word	0x000fffff
 801a47c:	fffffbed 	.word	0xfffffbed
 801a480:	bff00000 	.word	0xbff00000

0801a484 <round>:
 801a484:	b570      	push	{r4, r5, r6, lr}
 801a486:	4b1f      	ldr	r3, [pc, #124]	@ (801a504 <round+0x80>)
 801a488:	004d      	lsls	r5, r1, #1
 801a48a:	0d6d      	lsrs	r5, r5, #21
 801a48c:	18eb      	adds	r3, r5, r3
 801a48e:	000a      	movs	r2, r1
 801a490:	0004      	movs	r4, r0
 801a492:	2b13      	cmp	r3, #19
 801a494:	dc18      	bgt.n	801a4c8 <round+0x44>
 801a496:	2b00      	cmp	r3, #0
 801a498:	da0a      	bge.n	801a4b0 <round+0x2c>
 801a49a:	0fc9      	lsrs	r1, r1, #31
 801a49c:	07c9      	lsls	r1, r1, #31
 801a49e:	000a      	movs	r2, r1
 801a4a0:	3301      	adds	r3, #1
 801a4a2:	d101      	bne.n	801a4a8 <round+0x24>
 801a4a4:	4a18      	ldr	r2, [pc, #96]	@ (801a508 <round+0x84>)
 801a4a6:	430a      	orrs	r2, r1
 801a4a8:	2300      	movs	r3, #0
 801a4aa:	0011      	movs	r1, r2
 801a4ac:	0018      	movs	r0, r3
 801a4ae:	e015      	b.n	801a4dc <round+0x58>
 801a4b0:	4d16      	ldr	r5, [pc, #88]	@ (801a50c <round+0x88>)
 801a4b2:	000e      	movs	r6, r1
 801a4b4:	411d      	asrs	r5, r3
 801a4b6:	402e      	ands	r6, r5
 801a4b8:	4334      	orrs	r4, r6
 801a4ba:	d00f      	beq.n	801a4dc <round+0x58>
 801a4bc:	2180      	movs	r1, #128	@ 0x80
 801a4be:	0309      	lsls	r1, r1, #12
 801a4c0:	4119      	asrs	r1, r3
 801a4c2:	188a      	adds	r2, r1, r2
 801a4c4:	43aa      	bics	r2, r5
 801a4c6:	e7ef      	b.n	801a4a8 <round+0x24>
 801a4c8:	2b33      	cmp	r3, #51	@ 0x33
 801a4ca:	dd08      	ble.n	801a4de <round+0x5a>
 801a4cc:	2280      	movs	r2, #128	@ 0x80
 801a4ce:	00d2      	lsls	r2, r2, #3
 801a4d0:	4293      	cmp	r3, r2
 801a4d2:	d103      	bne.n	801a4dc <round+0x58>
 801a4d4:	0002      	movs	r2, r0
 801a4d6:	000b      	movs	r3, r1
 801a4d8:	f7e6 fe5a 	bl	8001190 <__aeabi_dadd>
 801a4dc:	bd70      	pop	{r4, r5, r6, pc}
 801a4de:	4e0c      	ldr	r6, [pc, #48]	@ (801a510 <round+0x8c>)
 801a4e0:	19ae      	adds	r6, r5, r6
 801a4e2:	2501      	movs	r5, #1
 801a4e4:	426d      	negs	r5, r5
 801a4e6:	40f5      	lsrs	r5, r6
 801a4e8:	4228      	tst	r0, r5
 801a4ea:	d0f7      	beq.n	801a4dc <round+0x58>
 801a4ec:	2133      	movs	r1, #51	@ 0x33
 801a4ee:	1ac9      	subs	r1, r1, r3
 801a4f0:	2301      	movs	r3, #1
 801a4f2:	408b      	lsls	r3, r1
 801a4f4:	181b      	adds	r3, r3, r0
 801a4f6:	4283      	cmp	r3, r0
 801a4f8:	41a4      	sbcs	r4, r4
 801a4fa:	4264      	negs	r4, r4
 801a4fc:	1912      	adds	r2, r2, r4
 801a4fe:	43ab      	bics	r3, r5
 801a500:	e7d3      	b.n	801a4aa <round+0x26>
 801a502:	46c0      	nop			@ (mov r8, r8)
 801a504:	fffffc01 	.word	0xfffffc01
 801a508:	3ff00000 	.word	0x3ff00000
 801a50c:	000fffff 	.word	0x000fffff
 801a510:	fffffbed 	.word	0xfffffbed

0801a514 <_sbrk>:
 801a514:	4a05      	ldr	r2, [pc, #20]	@ (801a52c <_sbrk+0x18>)
 801a516:	0003      	movs	r3, r0
 801a518:	6811      	ldr	r1, [r2, #0]
 801a51a:	2900      	cmp	r1, #0
 801a51c:	d101      	bne.n	801a522 <_sbrk+0xe>
 801a51e:	4904      	ldr	r1, [pc, #16]	@ (801a530 <_sbrk+0x1c>)
 801a520:	6011      	str	r1, [r2, #0]
 801a522:	6810      	ldr	r0, [r2, #0]
 801a524:	18c3      	adds	r3, r0, r3
 801a526:	6013      	str	r3, [r2, #0]
 801a528:	4770      	bx	lr
 801a52a:	46c0      	nop			@ (mov r8, r8)
 801a52c:	20001600 	.word	0x20001600
 801a530:	20001608 	.word	0x20001608

0801a534 <_init>:
 801a534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a536:	46c0      	nop			@ (mov r8, r8)
 801a538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a53a:	bc08      	pop	{r3}
 801a53c:	469e      	mov	lr, r3
 801a53e:	4770      	bx	lr

0801a540 <_fini>:
 801a540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a542:	46c0      	nop			@ (mov r8, r8)
 801a544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a546:	bc08      	pop	{r3}
 801a548:	469e      	mov	lr, r3
 801a54a:	4770      	bx	lr
